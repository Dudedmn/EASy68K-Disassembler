000010A4 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/17/2019 6:19:46 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OP Code routines for Disassembler
00000000                             3  * Written by : Daniel Yan
00000000                             4  * Date       : 2/28/2019, Updated 3/17/2019
00000000                             5  
00000000                             6  * Description: Disassembler routines to identify any valid
00000000                             7  * OP code dependent on current supported list.
00000000                             8  *------------------------------------------------------------
00000000                             9  OP_SIZE         DS.B    1   ;This constant refers to the size of the current OP code 
00000001                            10  MNEMONIC        DS.B    1   ;Constant for EA, first 4 bits (15-12) of a 4 hex OP code
00000002                            11  FIRST_3         DS.B    1   ;Constant for EA, 3 bits (11-9) of a 4 hex OP code
00000003                            12  SECOND_3        DS.B    1   ;Constant for EA, 3 bits (8-6) of a 4 hex OP code
00000004                            13  THIRD_3         DS.B    1   ;Constant for EA, 3 bits (5-3) of a 4 hex OP code
00000005                            14  FOURTH_3        DS.B    1   ;Constant for EA, 3 bits (2-0) of a 4 hex OP code
00000006                            15  
00000006                            16  ************************************************************************************
00000006                            17  *First Nibble Values (15-12)
00000006                            18  *Value                  Operations
00000006                            19  *$0                     GROUP_0: ORI,BCLR (static and dynamic),CMPI 
00000006                            20  *$1                     GROUP_1: MOVE.B                             
00000006                            21  *$2                     GROUP_2: MOVE.L, MOVEA.L                    
00000006                            22  *$3                     GROUP_3: MOVE.W, MOVEA.W                    
00000006                            23  *$4                     GROUP_4: LEA,JSR,RTS,NEG,MOVEM              
00000006                            24  *$5                     GROUP_5: SUBQ                               
00000006                            25  *$6                     GROUP_6: Bcc(BCS,BGE,BLT,BVC), BRA          
00000006                            26  *$7                     GROUP_7: INVALID_OP                         
00000006                            27  *$8                     GROUP_8: DIVS, OR                           
00000006                            28  *$9                     GROUP_9: SUB                                
00000006                            29  *$A                     GROUP_A: INVALID_OP                         
00000006                            30  *$B                     GROUP_B: EOR, CMP                           
00000006                            31  *$C                     GROUP_C: MULS                               
00000006                            32  *$D                     GROUP_D: ADD, ADDA                          
00000006                            33  *$E                     GROUP_E: LSR, LSL, ASR, ASL, ROL, ROR       
00000006                            34  *$F                     GROUP_F: INVALID_OP                         
00000006                            35  
00000006                            36  * OP_JSR_Routine
00000006                            37  **********************************************************************************
00000006                            38  * Description: Catalog all supported OP codes into groupings based on their hex
00000006                            39  * values. Sort the supported OP codes by looking at the first nibble for their
00000006                            40  * grouping value. Call underlying subroutines for further identification of the
00000006                            41  * op code.
00000006                            42  *
00000006                            43  * Registers used: A6,D0,D1 
00000006                            44  *
00000006                            45  * Precondition: Instruction set (size Word) has been loaded in the appropriate
00000006                            46  * address to be parsed and read.
00000006                            47  
00000006                            48  * Postcondition: OP code has been identified as either valid or invalid. If it is
00000006                            49  * valid, it is stored into A6 and EA parsing methods are called to pass needed
00000006                            50  * information to EA. If invalid, DATA output will be utilized to indicate so.
00000006                            51  **********************************************************************************
00000006                            52  * These valid operand codes refer to the basic supported operand codes
00000006                            53  * Groups refer to the first nibble value that is supported by the operand
00000006                            54  
00000006                            55  OP_JSR_Routine:
00000006  48E7 C000                 56      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
Line 57 ERROR: Undefined symbol
0000000A  3039 004DBD16             57      MOVE.W CUR_OP_CODE,D0          ;Move current instruction set to D0
Line 58 ERROR: Undefined symbol
00000010  13FC 0001 005455D4        58      MOVE.B #1,IS_VALID             ;Set IS_VALID bit to 1 by default
00000018  720C                      59      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
0000001A  E2A8                      60      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
0000001C                            61  
0000001C                            62  GROUP_0:                           ;$0| ORI, BCLR (static and dynamic), CMPI                  
0000001C  B03C 0000                 63      CMP.B   #$0,D0                 ;Compare first nibble
00000020  6600 000C                 64      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
00000024  4EB9 0000025C             65      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
0000002A  6000 010C                 66      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000002E                            67      
0000002E                            68  GROUP_1:                           ;$1| MOVE.B
0000002E  B03C 0001                 69      CMP.B   #$1,D0                 ;Compare first nibble
00000032  6600 000C                 70      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
00000036  4EB9 00000466             71      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
0000003C  6000 00FA                 72      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000040                            73  
00000040                            74  GROUP_2:                           ;$2| MOVE.L, MOVEA.L
00000040  B03C 0002                 75      CMP.B   #$2,D0                 ;Compare first nibble
00000044  6600 000C                 76      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
00000048  4EB9 00000492             77      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
0000004E  6000 00E8                 78      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000052                            79  
00000052                            80  GROUP_3:                           ;$3| MOVE.W, MOVEA.W
00000052  B03C 0003                 81      CMP.B   #$3,D0                 ;Compare first nibble
00000056  6600 000C                 82      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
0000005A  4EB9 000004FA             83      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
00000060  6000 00D6                 84      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000064                            85  
00000064                            86  GROUP_4:                           ;$4| LEA, JSR, RTS, NEG, MOVEM
00000064  B03C 0004                 87      CMP.B   #$4,D0                 ;Compare first nibble
00000068  6600 000C                 88      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
0000006C  4EB9 00000562             89      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
00000072  6000 00C4                 90      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000076                            91  
00000076                            92  
00000076                            93  GROUP_5:                           ;$5| SUBQ
00000076  B03C 0005                 94      CMP.B   #$5,D0                 ;Compare first nibble
0000007A  6600 000C                 95      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
0000007E  4EB9 0000085C             96      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
00000084  6000 00B2                 97      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000088                            98  
00000088                            99  
00000088                           100  GROUP_6:                           ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
00000088  B03C 0006                101      CMP.B   #$6,D0                 ;Compare first nibble
0000008C  6600 000C                102      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
00000090  4EB9 000008CE            103      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
00000096  6000 00A0                104      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000009A                           105  
0000009A                           106  
0000009A                           107  GROUP_7:                           ;$7| Display: DATA, $WXYZ (Unsupported)
0000009A  B03C 0007                108      CMP.B   #$7,D0                 ;Compare first nibble
0000009E  6600 000C                109      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
000000A2  4EB9 00000A30            110      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
000000A8  6000 008E                111      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000AC                           112  
000000AC                           113  
000000AC                           114  GROUP_8:                           ;$8| DIVS, OR
000000AC  B03C 0008                115      CMP.B   #$8,D0                 ;Compare first nibble
000000B0  6600 000C                116      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
000000B4  4EB9 00000A52            117      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
000000BA  6000 007C                118      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000BE                           119  
000000BE                           120  
000000BE                           121  GROUP_9:                           ;$9| SUB
000000BE  B03C 0009                122      CMP.B   #$9,D0                 ;Compare first nibble
000000C2  6600 000C                123      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
000000C6  4EB9 00000AB8            124      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
000000CC  6000 006A                125      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000D0                           126  
000000D0                           127  
000000D0                           128  GROUP_A:                           ;$A| Display: DATA, $WXYZ (Unsupported)
000000D0  B03C 000A                129      CMP.B   #$A,D0                 ;Compare first nibble
000000D4  6600 000C                130      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
000000D8  4EB9 00000B30            131      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
000000DE  6000 0058                132      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000E2                           133  
000000E2                           134  
000000E2                           135  GROUP_B:                           ;$B| EOR, CMP
000000E2  B03C 000B                136      CMP.B   #$B,D0                 ;Compare first nibble
000000E6  6600 000C                137      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
000000EA  4EB9 00000B38            138      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
000000F0  6000 0046                139      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000F4                           140  
000000F4                           141  
000000F4                           142  GROUP_C:                           ;$C| MULS
000000F4  B03C 000C                143      CMP.B   #$C,D0                 ;Compare first nibble
000000F8  6600 000C                144      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
000000FC  4EB9 00000BB4            145      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
00000102  6000 0034                146      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000106                           147  
00000106                           148  
00000106                           149  GROUP_D:                           ;$D| ADD, ADDA
00000106  B03C 000D                150      CMP.B   #$D,D0                 ;Compare first nibble
0000010A  6600 000C                151      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
0000010E  4EB9 00000C42            152      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
00000114  6000 0022                153      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000118                           154  
00000118                           155  
00000118                           156  GROUP_E:                           ;$E| LSR, LSL, ASR, ASL, ROL, ROR
00000118  B03C 000E                157      CMP.B   #$E,D0                 ;Compare first nibble
0000011C  6600 000C                158      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
00000120  4EB9 00000CA8            159      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
00000126  6000 0010                160      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000012A                           161  
0000012A                           162  
0000012A                           163  GROUP_F:                           ;$F| Display: DATA, $WXYZ (Unsupported)
0000012A  B03C 000F                164      CMP.B   #$F,D0                 ;Compare first nibble
0000012E  4EB9 00000E78            165      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
00000134  6000 0002                166      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000138                           167  
00000138                           168  
00000138                           169  OP_JSR_DONE:                       ;This subroutine is only called when identification has been finished
00000138  4CDF 0003                170           MOVEM.L (SP)+,D0-D1       ;Recover register D0
Line 171 ERROR: Undefined symbol
0000013C  0C39 0001 005455DC       171           CMP.B #1,IS_VALID         ;Checks if the IS_VALID bit is valid or not
Line 172 ERROR: Undefined symbol
00000144  6700 BBD0                172           BEQ    main_EA            ;This runs EA's routines after OP code portion is finished
Line 173 ERROR: Undefined symbol
00000148  6600 BBCC                173           BNE    check_print        ;If not valid, skip EA routine and call IO
0000014C                           174  **********************************************************************************    
0000014C                           175  * FIND_2_BIT_SIZE_7_TO_6
0000014C                           176  **********************************************************************************
0000014C                           177  * Description: For OP codes with 2 bit size fields, the 2 relevant bits (7-6) will 
0000014C                           178  * be parsed and moved to the appropriate registers.
0000014C                           179  *
0000014C                           180  * Registers used: D0,D1
0000014C                           181  *
0000014C                           182  * Precondition: OP code has been identified with 2 size bit field for CUR_OP_CODE.
0000014C                           183  *
0000014C                           184  * Postcondition: 2 bit size field has been isolated and stored into OP_SIZE.
0000014C                           185  **********************************************************************************
0000014C                           186  FIND_2_BIT_SIZE_7_TO_6:         ;Move the 2 bit size field relevant register
0000014C  48E7 C000                187      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
Line 188 ERROR: Undefined symbol
00000150  3039 004DBD16            188      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
00000156  323C 0008                189      MOVE.W   #8,D1              ;Prepare 8 bit shift to D1
0000015A  E368                     190      LSL.W    D1,D0              ;Truncate to find the 2 size bits
0000015C  E268                     191      LSR.W    D1,D0              ;Reposition the bits
0000015E  323C 0006                192      MOVE.W   #6,D1              ;Prepare 6 bit shift to D1
00000162  E268                     193      LSR.W    D1,D0              ;Truncate to shift 2 bits to a byte
00000164  11C0 0000                194      MOVE.B   D0,OP_SIZE         ;Move 2 size bits into OP_SIZE
00000168  4CDF 0003                195      MOVEM.L (SP)+,D0-D1         ;Restore registers
0000016C  4E75                     196      RTS                         ;Return to stack
0000016E                           197  **********************************************************************************
0000016E                           198  
0000016E                           199  * FIND_1_BIT_SIZE_6
0000016E                           200  **********************************************************************************
0000016E                           201  * Description: For OP codes with 1 bit size fields, the 1 relevant bit 6 will 
0000016E                           202  * be parsed and moved to the appropriate registers.
0000016E                           203  * This particular size parsing is used for MOVEM
0000016E                           204  *
0000016E                           205  * Registers used: D0,D1
0000016E                           206  *
0000016E                           207  * Precondition: OP code has been identified with 1 size bit field for CUR_OP_CODE.
0000016E                           208  *
0000016E                           209  * Postcondition: 1 bit size field has been isolated and stored into OP_SIZE.
0000016E                           210  **********************************************************************************
0000016E                           211  FIND_1_BIT_SIZE_6:              ;Move the 1 bit size field relevant register
0000016E  48E7 C000                212      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
Line 213 ERROR: Undefined symbol
00000172  3039 004DBD16            213      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
00000178  323C 0009                214      MOVE.W   #9,D1              ;Prepare 9 bit shift to D1
0000017C  E368                     215      LSL.W    D1,D0              ;Truncate to find the size bit
0000017E  E268                     216      LSR.W    D1,D0              ;Reposition the bits
00000180  323C 0006                217      MOVE.W   #6,D1              ;Prepare 6 bit shift to D1
00000184  E268                     218      LSR.W    D1,D0              ;Truncate to shift 1 bit to a byte
00000186  11C0 0000                219      MOVE.B   D0,OP_SIZE         ;Move 1 size bit into OP_SIZE
0000018A  4CDF 0003                220      MOVEM.L (SP)+,D0-D1         ;Restore registers
0000018E  4E75                     221      RTS                         ;Return to stack
00000190                           222  **********************************************************************************
00000190                           223  
00000190                           224  * FIND_1_BIT_SIZE_8
00000190                           225  **********************************************************************************
00000190                           226  * Description: For OP codes with 1 bit size fields, the 1 relevant bit 8 will 
00000190                           227  * be parsed and moved to the appropriate registers.
00000190                           228  * This particular size parsing is used for ADDA
00000190                           229  *
00000190                           230  * Registers used: D0,D1
00000190                           231  *
00000190                           232  * Precondition: OP code has been identified with 1 size bit field for CUR_OP_CODE.
00000190                           233  *
00000190                           234  * Postcondition: 1 bit size field has been isolated and stored into OP_SIZE.
00000190                           235  *
00000190                           236  **********************************************************************************
00000190                           237  FIND_1_BIT_SIZE_8:         ;Move the 1 bit size field relevant register
00000190  48E7 C000                238      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
Line 239 ERROR: Undefined symbol
00000194  3039 004DBD16            239      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
0000019A  323C 0007                240      MOVE.W   #7,D1              ;Prepare 7 bit shift to D1
0000019E  E368                     241      LSL.W    D1,D0              ;Truncate to find the 1 size bit
000001A0  E268                     242      LSR.W    D1,D0              ;Reposition the bits
000001A2  323C 0008                243      MOVE.W   #8,D1              ;Prepare 8 bit shift to D1
000001A6  E268                     244      LSR.W    D1,D0              ;Truncate to shift 1 bit to a byte
000001A8  11C0 0000                245      MOVE.B   D0,OP_SIZE         ;Move 1 size bit into OP_SIZE
000001AC  4CDF 0003                246      MOVEM.L (SP)+,D0-D1         ;Restore registers
000001B0  4E75                     247      RTS                         ;Return to stack
000001B2                           248  **********************************************************************************
000001B2                           249  
000001B2                           250  * MOVE_AND_MOVEA_PARSE_EA
000001B2                           251  **********************************************************************************
000001B2                           252  * Description: Special parsing for the SRC and DST Mode/Reg for MOVE/MOVE
000001B2                           253  *
000001B2                           254  * Registers used: A6,D0,D1,D7,D6,D5,D4
000001B2                           255  *
000001B2                           256  * Precondition: OP code has been identified with either MOVE or MOVEA
000001B2                           257  *
000001B2                           258  * Postcondition: Store all relevant EA bits into associated register.
000001B2                           259  * This particular routine is not Callee saved as it needs to change D7 and D6
000001B2                           260  **********************************************************************************
000001B2                           261  MOVE_AND_MOVEA_PARSE_EA:     ;Move the 3 bit dynamic register bits to proper register
Line 262 ERROR: Undefined symbol
000001B2  3039 004DBD16            262      MOVE.W CUR_OP_CODE,D0    ;Move current OP code into D0
000001B8  323C 000A                263      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
000001BC  E368                     264      LSL.W   D1,D0            ;Truncate to find the last 6 bits
000001BE  E268                     265      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
000001C0  3E00                     266      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
000001C2  323C 0003                267      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
000001C6  E26F                     268      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
000001C8  3A07                     269      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
000001CA  323C 000D                270      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
000001CE  E368                     271      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
000001D0  E268                     272      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
000001D2  3800                     273      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
000001D4                           274      
000001D4                           275  ****MOVING_SOURCE***********
Line 276 ERROR: Undefined symbol
000001D4  3039 004DBD16            276      MOVE.W CUR_OP_CODE,D0    ;Move current OP code into D0     
000001DA  323C 0004                277      MOVE.W  #4,D1            ;Prepare 4 bit shift to D1
000001DE  E368                     278      LSL.W   D1,D0            ;Truncate to find bits 11-6
000001E0  E268                     279      LSR.W   D1,D0            ;Reposition bits
000001E2  323C 0006                280      MOVE.W  #6,D1            ;Prepare 6 bit shift to D1
000001E6  E268                     281      LSR.W   D1,D0            ;Truncate the SRC Reg/Mode bits
000001E8  323C 0003                282      MOVE.W  #3,D1            ;Prepare a 3 bit shift to D1 for DST Reg/Mode
000001EC  3C00                     283      MOVE.W  D0,D6            ;Copy over the current 6 bits to D6
000001EE  E268                     284      LSR.W   D1,D0            ;Truncate DST Mode  
000001F0  3E00                     285      MOVE.W  D0,D7            ;Move DST Reg to D7
000001F2  323C 000D                286      MOVE.W  #13,D1             
000001F6  E36E                     287      LSL.W   D1,D6            ;Truncate 13 bits in D6
000001F8  E26E                     288      LSR.W   D1,D6            ;Reposition D6
000001FA                           289                               ;D6 now contains the DST Reg
000001FA  4E75                     290      RTS                      ;Return to stack
000001FC                           291  **********************************************************************************
000001FC                           292  ********** EA Parsing ************************************************************
000001FC                           293  *PARSE_EA_CONSTANT_BITS
000001FC                           294  **********************************************************************************
000001FC                           295  * Definition: Uses CUR_OP_CODE to shift the proper bits into the global constants
000001FC                           296  * used for EA (MNEMONIC,FIRST_3,SECOND_3,THIRD_3,FOURTH_3. Where MNEMONIC refers
000001FC                           297  * to the first 4 bits of CUR_OP_CODE (15-12), FIRST_3 refers to the first group
000001FC                           298  * of 3 bits (11-9), SECOND_3 refers to the second group of 3 bits (8-6), THIRD_3
000001FC                           299  * refers to the third group of 3 bits (5-3), and FOURTH_3 refers to the fourth
000001FC                           300  * group of 3 bits (2-0). Shifts CUR_OP_CODE bits to initialize constants.
000001FC                           301  *
000001FC                           302  * Registers used: D0,D1
000001FC                           303  *
000001FC                           304  * Precondition: CUR_OP_CODE has been set with an 4 hex instruction set
000001FC                           305  * 
000001FC                           306  * Postcondition: MNEMONIC, FIRST_3, SECOND_3, THIRD_3, FOURTH_3 have been set
000001FC                           307  * to the corresponding values.
000001FC                           308  **********************************************************************************
000001FC                           309  PARSE_EA_CONSTANT_BITS:
000001FC  48E7 C000                310      MOVEM.L D0-D1,-(SP)         ;Save register to stack
00000200                           311      *MNEMONIC SHIFT
Line 312 ERROR: Undefined symbol
00000200  3039 004DBD16            312      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D0
00000206  323C 000C                313      MOVE.W #12,D1               ;Prepare a bit shift of 12 into D1
0000020A  E268                     314      LSR.W D1,D0                 ;Shift 12 bits from D0 right
0000020C  11C0 0001                315      MOVE.B D0,MNEMONIC          ;Set MNEMONIC to D0
00000210                           316      *FIRST_3 SHIFT
00000210  323C 0009                317      MOVE.W #9,D1                ;Prepare a bit shift of 9 into D1
Line 318 ERROR: Undefined symbol
00000214  3039 004DBD16            318      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
0000021A  E948                     319      LSL.W #4,D0                 ;Shift out bits 15-12 in D0
0000021C  E848                     320      LSR.W #4,D0                 ;Reposition D0
0000021E  E268                     321      LSR.W  D1,D0                ;Shift D0 9 bits right
00000220  11C0 0002                322      MOVE.B D0,FIRST_3           ;Set FIRST_3 to D0
00000224                           323      *SECOND_3 SHIFT
Line 324 ERROR: Undefined symbol
00000224  3039 004DBD16            324      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
0000022A  EF48                     325      LSL.W #7,D0                 ;Shift out bits 15-9 in D0
0000022C  EE48                     326      LSR.W #7,D0                 ;Reposition D0
0000022E  EC48                     327      LSR.W #6,D0                 ;Shift D0 6 bits right
00000230  11C0 0003                328      MOVE.B D0,SECOND_3          ;Set SECOND_3 to D0
00000234                           329      *THIRD_3 SHIFT
Line 330 ERROR: Undefined symbol
00000234  3039 004DBD16            330      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
0000023A  E648                     331      LSR.W #3,D0                 ;Shift D0 3 bits right
0000023C  323C 000D                332      MOVE.W #13,D1               ;Prepare a 13 bit shift into D1
00000240  E368                     333      LSL.W D1,D0                 ;Truncate first 13 bits of D0
00000242  E268                     334      LSR.W D1,D0                 ;Reposition D0
00000244  11C0 0004                335      MOVE.B D0,THIRD_3           ;Set THIRD_3 to D0
00000248                           336      *FOURTH_3 SHIFT
Line 337 ERROR: Undefined symbol
00000248  3039 004DBD16            337      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
0000024E  E368                     338      LSL.W D1,D0                 ;Grab the fourth 3-bit group
00000250  E268                     339      LSR.W D1,D0                 ;Shift D0 back into position
00000252  11C0 0005                340      MOVE.B D0,FOURTH_3          ;Set FOURTH_3 to Do
00000256  4CDF 0003                341      MOVEM.L (SP)+,D0-D1         ;Restore registers
0000025A  4E75                     342      RTS                         ;Return to stack
0000025C                           343  **********************************************************************************
0000025C                           344  ********** End of EA Parsing *****************************************************
0000025C                           345  
0000025C                           346  *******************JMP LABELS ****************************************************
0000025C                           347  * Labeling for group codes will be in the following format
0000025C                           348  
0000025C                           349  * <JMP Label Name>
0000025C                           350  ********************************************************************************
0000025C                           351  * Checking List Order (If more than one value)
0000025C                           352  * Operand1 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
0000025C                           353  * Operand2 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
0000025C                           354  
0000025C                           355  * Where a-b will refer to the bit corresponding bit value in the instruction
0000025C                           356  * format, and a specifier will be attached such as Size, EA Mode, SRC Reg, etc
0000025C                           357  * to clarify what a specific bit range means.
0000025C                           358  * Checking order refers to what order the checks will be performed in. 
0000025C                           359  * Any other code outside of the listed supported ones will be routed toINVALID_OP.
0000025C                           360  ********************************************************************************
0000025C                           361  
0000025C                           362  ********************************************************************************
0000025C                           363  * Global Field Descriptions
0000025C                           364  * Size Field: Byte = 00 Word = 01 Long = 10
0000025C                           365  * EA Mode: Refer to EA Address Modes
0000025C                           366  * EA Reg: 3-bit input that is mapped to the respective binary value
0000025C                           367  ********************************************************************************
0000025C                           368  
0000025C                           369  * GROUP_0                      
0000025C                           370  ********************************************************************************
0000025C                           371  * Description: Checks for the following listed OP codes to be present or not
0000025C                           372  * Supported OP codes:
0000025C                           373  * ORI: $00, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
0000025C                           374  * CMPI: $0C, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
0000025C                           375  * Dynamic BCLR: $0, 11-9 Register, 8-6 %110, 5-3 EA Mode, 2-0 EA Reg
0000025C                           376  * Static BCLR: $01, 7-6 10, 5-3 EA Mode, 2-0 EA Reg
0000025C                           377  *
0000025C                           378  * Register(s) used: D0
0000025C                           379  *
0000025C                           380  * Precondition: First nibble has been identified as $0
0000025C                           381  *
0000025C                           382  * Postcondition: Parses proper OP code with a nibble value of $0 or finds an
0000025C                           383  * invalid OP code.
0000025C                           384  * 
0000025C                           385  * Unsupported OP codes:
0000025C                           386  * ORI_TO_CCR, ORI_TO_SR, ANDI_TO_CCR, ANDI_TO_SR, ANDI, SUBI, ADDI, EORI_TO_CCR
0000025C                           387  * EORI_TO_SR, EORI, STATIC_BTST, STATIC_BCHG, STATIC_BSET, DYNAMIC_BTST,
0000025C                           388  * DYNAMIC_BCHG, DYNAMIC_BSET, MOVEP 
0000025C                           389  ********************************************************************************
0000025C                           390  C_GROUP_0:
0000025C  48E7 C000                391      MOVEM.L D0-D1, -(SP)            ;Backup registers
00000260                           392      
00000260                           393  *Unsupported OP codes that are fully static in bits
00000260                           394  CHECK_OP_ORI_TO_CCR:
Line 395 ERROR: Undefined symbol
00000260  3039 004DBD16            395      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000266  B07C 003C                396      CMP.W #$003C,D0                 ;Compare the direct full bits
0000026A  6700 01EE                397      BEQ GROUP0_INVALID              ;INVALID OP code found
0000026E  6600 0002                398      BNE CHECK_OP_ORI_TO_SR          ;Check next routine
00000272                           399      
00000272                           400  CHECK_OP_ORI_TO_SR:
Line 401 ERROR: Undefined symbol
00000272  3039 004DBD16            401      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000278  B07C 007C                402      CMP.W #$007C,D0                 ;Compare the direct full bits
0000027C  6700 01DC                403      BEQ GROUP0_INVALID              ;INVALID OP code found
00000280  6600 0002                404      BNE CHECK_OP_ANDI_TO_CCR        ;Check next routine
00000284                           405      
00000284                           406  CHECK_OP_ANDI_TO_CCR:
Line 407 ERROR: Undefined symbol
00000284  3039 004DBD16            407      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000028A  B07C 023C                408      CMP.W #$023C,D0                 ;Compare the direct full bits
0000028E  6700 01CA                409      BEQ GROUP0_INVALID              ;INVALID OP code found
00000292  6600 0002                410      BNE CHECK_OP_ANDI_TO_SR         ;Check next routine
00000296                           411      
00000296                           412  CHECK_OP_ANDI_TO_SR:
Line 413 ERROR: Undefined symbol
00000296  3039 004DBD16            413      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000029C  B07C 027C                414      CMP.W #$027C,D0                 ;Compare the direct full bits
000002A0  6700 01B8                415      BEQ GROUP0_INVALID              ;INVALID OP code found
000002A4  6600 0002                416      BNE CHECK_OP_EORI_TO_CCR                ;Check next routine
000002A8                           417  
000002A8                           418  CHECK_OP_EORI_TO_CCR:
Line 419 ERROR: Undefined symbol
000002A8  3039 004DBD16            419      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002AE  B07C 0A3C                420      CMP.W #$0A3C,D0                 ;Compare the direct full bits
000002B2  6700 01A6                421      BEQ GROUP0_INVALID              ;INVALID OP code found
000002B6  6600 0002                422      BNE CHECK_OP_EORI_TO_SR         ;Check next routine
000002BA                           423      
000002BA                           424  CHECK_OP_EORI_TO_SR:
Line 425 ERROR: Undefined symbol
000002BA  3039 004DBD16            425      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002C0  B07C 0A7C                426      CMP.W #$0A7C,D0                 ;Compare the direct full bits
000002C4  6700 0194                427      BEQ GROUP0_INVALID              ;INVALID OP code found
000002C8  6600 0002                428      BNE CHECK_OP_ANDI               ;Check next routine
000002CC                           429      
000002CC                           430  *Unsupported OP codes to check with partial static bits
000002CC                           431  CHECK_OP_ANDI:
Line 432 ERROR: Undefined symbol
000002CC  3039 004DBD16            432      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002D2  0240 FF00                433      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
000002D6  B07C 0200                434      CMP.W #$0200,D0                 ;Compare the appropriate masked bits
000002DA  6700 017E                435      BEQ GROUP0_INVALID              ;INVALID OP code found
000002DE  6600 0002                436      BNE CHECK_OP_SUBI               Check next routine
000002E2                           437      
000002E2                           438  CHECK_OP_SUBI:
Line 439 ERROR: Undefined symbol
000002E2  3039 004DBD16            439      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002E8  0240 FF00                440      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
000002EC  B07C 0400                441      CMP.W #$0400,D0                 ;Compare the appropriate masked bits
000002F0  6700 0168                442      BEQ GROUP0_INVALID              ;INVALID OP code found
000002F4  6600 0002                443      BNE CHECK_OP_ADDI               ;Check next routine
000002F8                           444  
000002F8                           445  CHECK_OP_ADDI:
Line 446 ERROR: Undefined symbol
000002F8  3039 004DBD16            446      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002FE  0240 FF00                447      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00000302  B07C 0600                448      CMP.W #$0600,D0                 ;Compare the appropriate masked bits
00000306  6700 0152                449      BEQ GROUP0_INVALID              ;INVALID OP code found
0000030A  6600 0002                450      BNE CHECK_OP_EORI               ;Check next routine 
0000030E                           451  
0000030E                           452  CHECK_OP_EORI:
Line 453 ERROR: Undefined symbol
0000030E  3039 004DBD16            453      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000314  0240 FF00                454      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00000318  B07C 0A00                455      CMP.W #$0A00,D0                 ;Compare the appropriate masked bits
0000031C  6700 013C                456      BEQ GROUP0_INVALID              ;INVALID OP code found
00000320  6600 0002                457      BNE CHECK_OP_STATIC_BTST        ;Check next routine
00000324                           458      
00000324                           459  CHECK_OP_STATIC_BTST:
Line 460 ERROR: Undefined symbol
00000324  3039 004DBD16            460      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000032A  0240 FFC0                461      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
0000032E  B07C 0800                462      CMP.W #$0800,D0                 ;Compare the appropriate masked bits
00000332  6700 0126                463      BEQ GROUP0_INVALID              ;INVALID OP code found
00000336  6600 0002                464      BNE CHECK_OP_STATIC_BCHG        ;Check next routine
0000033A                           465      
0000033A                           466  CHECK_OP_STATIC_BCHG:
Line 467 ERROR: Undefined symbol
0000033A  3039 004DBD16            467      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000340  0240 FFC0                468      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00000344  B07C 0840                469      CMP.W #$0840,D0                 ;Compare the appropriate masked bits
00000348  6700 0110                470      BEQ GROUP0_INVALID              ;INVALID OP code found
0000034C  6600 0002                471      BNE CHECK_OP_STATIC_BSET        ;Check next routine
00000350                           472  
00000350                           473  CHECK_OP_STATIC_BSET:
Line 474 ERROR: Undefined symbol
00000350  3039 004DBD16            474      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000356  0240 FFC0                475      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
0000035A  B07C 08C0                476      CMP.W #$08C0,D0                 ;Compare the appropriate masked bits
0000035E  6700 00FA                477      BEQ GROUP0_INVALID              ;INVALID OP code found   
00000362  6600 0002                478      BNE CHECK_OP_DYNAMIC_BTST       ;Check next routine
00000366                           479  
00000366                           480  CHECK_OP_DYNAMIC_BTST:
Line 481 ERROR: Undefined symbol
00000366  3039 004DBD16            481      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000036C  0240 F1C0                482      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
00000370  B07C 0100                483      CMP.W #$0100,D0                 ;Compare the appropriate masked bits
00000374  6700 00E4                484      BEQ GROUP0_INVALID              ;INVALID OP code found
00000378  6600 0002                485      BNE CHECK_OP_DYNAMIC_BCHG       ;Check next routine
0000037C                           486  
0000037C                           487  CHECK_OP_DYNAMIC_BCHG:
Line 488 ERROR: Undefined symbol
0000037C  3039 004DBD16            488      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000382  0240 F1C0                489      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
00000386  B07C 0140                490      CMP.W #$0140,D0                 ;Compare the appropriate masked bits 
0000038A  6700 00CE                491      BEQ GROUP0_INVALID              ;INVALID OP code found
0000038E  6600 0002                492      BNE CHECK_OP_DYNAMIC_BSET       ;Check next routine
00000392                           493      
00000392                           494  CHECK_OP_DYNAMIC_BSET:
00000392                           495  
Line 496 ERROR: Undefined symbol
00000392  3039 004DBD16            496      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000398  0240 F1C0                497      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
0000039C  B07C 01C0                498      CMP.W   #$01C0,D0               ;Compare the appropriate masked bits 
000003A0  6700 0006                499      BEQ     BIT_CHECK_MOVEP         ;Check special case for MOVEP
000003A4  6600 001E                500      BNE     CHECK_OP_MOVEP          ;Check next routine
000003A8                           501  
000003A8                           502  BIT_CHECK_MOVEP:                                ;This is a special case check for MOVEP
Line 503 ERROR: Undefined symbol
000003A8  3039 004DBD16            503      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000003AE  323C 000A                504      MOVE.W  #10,D1                  ;Prepare a 10-bit shift
000003B2  E368                     505      LSL.W   D1,D0                   ;Shift out 10 bits left 
000003B4  E268                     506      LSR.W   D1,D0                   ;Reposition D0 for last 6 bits
000003B6  E648                     507      LSR.W   #3,D0                   ;Shift out 3 bits right, D0 contains bits 5-3
000003B8  B07C 0001                508      CMP.W   #$1,D0                  ;Compare bits to D0
000003BC  6700 0006                509      BEQ     CHECK_OP_MOVEP          ;If bits are $1 then it's addressing, goto MOVEP
000003C0  6600 0098                510      BNE     GROUP0_INVALID          ;If not then it's DYNAMIC_BSET which is invalid
000003C4                           511      
000003C4                           512  CHECK_OP_MOVEP:
Line 513 ERROR: Undefined symbol
000003C4  3039 004DBD16            513      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000003CA  0240 F138                514      ANDI.W #$F138,D0                ;Mask relevant bits to D0
000003CE  B07C 0108                515      CMP.W #$0108,D0                 ;Compare the appropriate masked bits
000003D2  6700 0AAC                516      BEQ INVALID_OP                  ;INVALID OP code found
000003D6  6600 0002                517      BNE CHECK_OP_ORI                ;Check next routine
000003DA                           518  
000003DA                           519  *Supported OP code checks
000003DA                           520  CHECK_OP_ORI:
Line 521 ERROR: Undefined symbol
000003DA  3039 004DBD16            521      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000003E0  0240 FF00                522      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
000003E4  B07C 0000                523      CMP.W   #$0000,D0               ;Compare the appropriate masked bits     
000003E8  6600 0010                524      BNE     CHECK_OP_CMPI           ;Branch to next comparison if not equal
000003EC  4EB8 014C                525      JSR     FIND_2_BIT_SIZE_7_TO_6
000003F0  4EB9 00000E9C            526      JSR     PRINT_OP_ORI            ;Print the OP code if equal    
000003F6  6000 0068                527      BRA     GROUP0_SUCCESS          ;Finish routine
000003FA                           528      
000003FA                           529  CHECK_OP_CMPI:
Line 530 ERROR: Undefined symbol
000003FA  3039 004DBD16            530      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000400  0240 FF00                531      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00000404  B07C 0C00                532      CMP.W   #$0C00,D0               ;Compare the appropriate masked bits   
00000408  6600 0010                533      BNE     CHECK_OP_STATIC_BCLR    ;Branch to next comparison if not equal       
0000040C  4EB8 014C                534      JSR     FIND_2_BIT_SIZE_7_TO_6
00000410  4EB9 00000EB2            535      JSR     PRINT_OP_CMPI           ;Print the OP code if equal
00000416  6000 0048                536      BRA     GROUP0_SUCCESS          ;Finish routine
0000041A                           537      
0000041A                           538  CHECK_OP_STATIC_BCLR:
Line 539 ERROR: Undefined symbol
0000041A  3039 004DBD16            539      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000420  0240 FF00                540      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00000424  B07C 0800                541      CMP.W   #$0800,D0               ;Compare the appropriate masked bits
00000428  6600 0010                542      BNE     CHECK_OP_DYNAMIC_BCLR   ;Branch to next comparison if not equal
0000042C  4EB8 014C                543      JSR     FIND_2_BIT_SIZE_7_TO_6
00000430  4EB9 00000EC8            544      JSR     PRINT_OP_STATIC_BCLR    ;Print the OP code if equal
00000436  6000 0028                545      BRA     GROUP0_SUCCESS          ;Finish routine
0000043A                           546      
0000043A                           547  CHECK_OP_DYNAMIC_BCLR:
Line 548 ERROR: Undefined symbol
0000043A  3039 004DBD16            548      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000440  0240 0180                549      ANDI.W  #$0180,D0               ;Mask relevant bits to D0
00000444  B07C 0180                550      CMP.W   #$0180,D0               ;Compare the appropriate masked bits
00000448  6600 0010                551      BNE     GROUP0_INVALID          ;If not equal this must be an invalid OP code
0000044C  4EB8 014C                552      JSR     FIND_2_BIT_SIZE_7_TO_6
00000450  4EB9 00000EDE            553      JSR     PRINT_OP_DYNAMIC_BCLR   ;Print the OP code if equal
00000456  6000 0008                554      BRA     GROUP0_SUCCESS          ;Finish routine
0000045A                           555  
0000045A                           556  GROUP0_INVALID:                     ;Checks have been finished, invalid OP code has been found
0000045A  4EB9 00000E80            557      JSR INVALID_OP                  ;INVALID OP code found
00000460                           558  GROUP0_SUCCESS:                     ;Checks have been finished,a valid OP code has been found
00000460  4CDF 0003                559      MOVEM.L (SP)+,D0-D1             ;Restore registers
00000464  4E75                     560      RTS                             ;Return to stack
00000466                           561      
00000466                           562  * GROUP_1                      
00000466                           563  ********************************************************************************
00000466                           564  * Description: Checks for the following OP code to be present or not.
00000466                           565  * Supported OP code:
00000466                           566  * MOVE.B: $1, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
00000466                           567  *
00000466                           568  * Register(s) used: D0,D1
00000466                           569  *
00000466                           570  * Precondition: First nibble has been identified as $1
00000466                           571  *
00000466                           572  * Postcondition: Parses proper OP code with a nibble value of $1 or finds an
00000466                           573  * invalid OP code.********************************************************************************
00000466                           574  C_GROUP_1:
00000466  48E7 C000                575      MOVEM.L D0-D1,-(SP)             ;Save registers to stack
0000046A                           576  
0000046A                           577  CHECK_OP_MOVE_B:
Line 578 ERROR: Undefined symbol
0000046A  3039 004DBD16            578      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0          
00000470  0240 F000                579      ANDI.W  #$F000,D0               ;Mask relevant bits to D0
00000474  B07C 1000                580      CMP.W   #$1000,D0               ;Compare the appropriate masked bits 
00000478  6600 000C                581      BNE     GROUP1_INVALID          ;Invalid OP code has been found
0000047C  4EB9 00000EF4            582      JSR     PRINT_OP_MOVEB          ;Print the OP code if equal
00000482  6000 0008                583      BRA     GROUP1_SUCCESS          ;Finish routine
00000486                           584      
00000486                           585  GROUP1_INVALID:
00000486  4EB9 00000E80            586      JSR INVALID_OP                  ;Invalid OP code found
0000048C                           587  GROUP1_SUCCESS:
0000048C  4CDF 0003                588      MOVEM.L (SP)+,D0-D1             ;Restore register
00000490  4E75                     589      RTS                             ;Return to stack
00000492                           590  * GROUP_2
00000492                           591  ********************************************************************************
00000492                           592  * Description: Checks for the following list of OP codes to be present or not.
00000492                           593  * Supported OP codes:
00000492                           594  * MOVEA.L: $2, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
00000492                           595  * MOVE.L: $2, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
00000492                           596  *
00000492                           597  * Register(s) used: D0,D1,D2
00000492                           598  *
00000492                           599  * Precondition: First nibble has been identified as $2
00000492                           600  *
00000492                           601  * Postcondition: Parses proper OP code with a nibble value of $2 or finds an
00000492                           602  * invalid OP code.********************************************************************************
00000492                           603  C_GROUP_2:
00000492  48E7 E000                604      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
00000496                           605  
00000496                           606  CHECK_OP_MOVEA_L:
Line 607 ERROR: Undefined symbol
00000496  3039 004DBD16            607      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0  
0000049C  0240 F000                608      ANDI.W #$F000,D0                ;Mask relevant bits to D0
000004A0  B07C 2000                609      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
000004A4  4EF9 000004AA            610      JMP FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
000004AA                           611      
000004AA                           612  FIND_MOVEA_L_DIFFERENCE:            ;Finds difference between MOVEA and MOVE
Line 613 ERROR: Undefined symbol
000004AA  3039 004DBD16            613      MOVE.W   CUR_OP_CODE,D0         ;Move current OP code into D0
000004B0  323C 0007                614      MOVE.W   #7,D1                  ;Prepare 7 bit shift to D1
000004B4  E368                     615      LSL.W    D1,D0                  ;Truncate to find the 3 address mode bits
000004B6  E268                     616      LSR.W    D1,D0                  ;Reposition the bits
000004B8  323C 0006                617      MOVE.W   #6,D1                  ;Prepare 6 bit shift to D1
000004BC  E268                     618      LSR.W    D1,D0                  ;Truncate to shift 3 bits to a register
000004BE  3400                     619      MOVE.W   D0,D2                  ;Move 3 address mode bits into D6
000004C0  B47C 0001                620      CMP.W   #$1,D2                  ;Check if the address mode value is MOVEA
000004C4  6600 000C                621      BNE     CHECK_OP_MOVE_L         ;Branch if not equal to check MOVE
000004C8  4EB9 00000F04            622      JSR     PRINT_OP_MOVEA_L        ;Print the OP code if it's a match
000004CE  6000 0024                623      BRA     GROUP2_SUCCESS          ;Finish routine
000004D2                           624      
000004D2                           625      
000004D2                           626  CHECK_OP_MOVE_L:
Line 627 ERROR: Undefined symbol
000004D2  3039 004DBD16            627      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000004D8  0240 F000                628      ANDI.W #$F000,D0                ;Mask relevant bits to D0
000004DC  B07C 2000                629      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
000004E0  6600 000C                630      BNE GROUP2_INVALID              ;If not equal, OP code is invalid
000004E4  4EB9 00000F14            631      JSR PRINT_OP_MOVE_L             ;Print out MOVE.L
000004EA  6000 0008                632      BRA GROUP2_SUCCESS              ;Finish routine
000004EE                           633      
000004EE                           634  GROUP2_INVALID:    
000004EE  4EB9 00000E80            635      JSR INVALID_OP                  ;Invalid OP code found
000004F4                           636  GROUP2_SUCCESS:
000004F4  4CDF 0007                637      MOVEM.L (SP)+,D0-D2             ;Restore register
000004F8  4E75                     638      RTS                             ;Return to stack
000004FA                           639  * GROUP_3
000004FA                           640  ********************************************************************************
000004FA                           641  * Description: Checks for the following list of OP codes to be present or not.
000004FA                           642  * Supported OP codes:
000004FA                           643  * MOVEA.W: $3, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
000004FA                           644  * MOVE.W: $3, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000004FA                           645  *
000004FA                           646  * Register(s) used: D0,D1,D2
000004FA                           647  *
000004FA                           648  * Precondition: First nibble has been identified as $3
000004FA                           649  *
000004FA                           650  * Postcondition: Parses proper OP code with a nibble value of $3 or finds an
000004FA                           651  * invalid OP code.
000004FA                           652  ********************************************************************************
000004FA                           653  C_GROUP_3:
000004FA  48E7 E000                654      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
000004FE                           655      
000004FE                           656  CHECK_OP_MOVEA_W:
Line 657 ERROR: Undefined symbol
000004FE  3039 004DBD16            657      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00000504  0240 F000                658      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00000508  B07C 3000                659      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
0000050C  4EF9 00000512            660      JMP      FIND_MOVEA_W_DIFF     ;Custom routine to differentiate MOVE and MOVEA
00000512                           661  
00000512                           662      
00000512                           663  FIND_MOVEA_W_DIFF:                 ;Finds difference between MOVEA and MOVE
Line 664 ERROR: Undefined symbol
00000512  3039 004DBD16            664      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00000518  323C 0007                665      MOVE.W   #7,D1                 ;Prepare 7 bit shift to D1
0000051C  E368                     666      LSL.W    D1,D0                 ;Truncate to find the 3 address mode bits
0000051E  E268                     667      LSR.W    D1,D0                 ;Reposition the bits
00000520  323C 0006                668      MOVE.W   #6,D1                 ;Prepare 6 bit shift to D1
00000524  E268                     669      LSR.W    D1,D0                 ;Truncate to shift 3 bits to a register
00000526  3400                     670      MOVE.W   D0,D2                 ;Move 3 address mode bits into D6
00000528  B47C 0001                671      CMP.W    #$1,D2                ;Check if the address mode value is MOVEA
0000052C  6600 000C                672      BNE      CHECK_OP_MOVE_W       ;If bits do not match, try MOVE 
00000530  4EB9 00000F24            673      JSR      PRINT_OP_MOVEA_W      ;Print the OP code if it's a match
00000536  6000 0024                674      BRA      GROUP3_SUCCESS        ;Finish routine
0000053A                           675      
0000053A                           676  CHECK_OP_MOVE_W:
Line 677 ERROR: Undefined symbol
0000053A  3039 004DBD16            677      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00000540  0240 F000                678      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00000544  B07C 3000                679      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
00000548  6600 000C                680      BNE      GROUP3_INVALID        ;INVALID OP code found
0000054C  4EB9 00000F34            681      JSR      PRINT_OP_MOVE_W       ;Print the OP code if it's a match
00000552  6000 0008                682      BRA      GROUP3_SUCCESS        ;Finish routine
00000556                           683      
00000556                           684  GROUP3_INVALID:
00000556  4EB9 00000E80            685      JSR INVALID_OP                 ;INVALID OP code found
0000055C                           686  GROUP3_SUCCESS:
0000055C  4CDF 0007                687      MOVEM.L (SP)+,D0-D2            ;Restore registers from stack
00000560  4E75                     688      RTS                            ;Return to stack
00000562                           689  
00000562                           690  * GROUP_4
00000562                           691  ********************************************************************************
00000562                           692  * Description: Checks for the following list of OP codes to be present or not.
00000562                           693  * Supported OP codes:
00000562                           694  * LEA: $4, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00000562                           695  * JSR: $4E, 7-6 %10, 5-3 EA Mode, 2-0 EA Reg 
00000562                           696  * RTS: $4E75
00000562                           697  * NEG: $44, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00000562                           698  * MOVEM: $4, 11 %1, 10 %D, 9-7 %001, 6 S, 5-3 EA Mode, 2-0 EA Reg
00000562                           699  * %D = 0 , Register to Memory, 1 Memory to Register
00000562                           700  *
00000562                           701  * Register(s) used: D0
00000562                           702  *
00000562                           703  * Precondition: First nibble has been identified as $4
00000562                           704  *
00000562                           705  * Postcondition: Parses proper OP code with a nibble value of $4 or finds an
00000562                           706  * invalid OP code. 
00000562                           707  *
00000562                           708  * Unsupported OP codes: MOVE_FROM_SR, MOVE_TO_CCR, MOVE_TO_SR, NEGX, CLR, NOT
00000562                           709  * EXT, NBCD, SWAP, PEA, ILLEGAL, TAS, TST, TRAP, LINK, UNLK, MOVE_USP, RESET,
00000562                           710  * NOP, STOP, RTE, TRAPV, RTR, JMP, CHK
00000562                           711  ********************************************************************************
00000562                           712  C_GROUP_4:
00000562  2F00                     713      MOVE.L  D0,-(SP)            ;Save registers
00000564                           714      
00000564                           715  *Unsupported OP codes to check that are full static bits
00000564                           716  CHECK_OP_STOP:
Line 717 ERROR: Undefined symbol
00000564  3039 004DBD16            717      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000056A  B07C 4E72                718      CMP.W  #$4E72,D0                ;Compare the appropriate bits
0000056E  6700 02E0                719      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000572  6600 0002                720      BNE    CHECK_OP_RESET           ;Check next OP code
00000576                           721      
00000576                           722  CHECK_OP_RESET:
Line 723 ERROR: Undefined symbol
00000576  3039 004DBD16            723      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000057C  B07C 4E70                724      CMP.W  #$4E70,D0                ;Compare the appropriate bits
00000580  6700 02CE                725      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000584  6600 0002                726      BNE    CHECK_OP_ILLEGAL         ;Check next OP code
00000588                           727          
00000588                           728  CHECK_OP_ILLEGAL:
Line 729 ERROR: Undefined symbol
00000588  3039 004DBD16            729      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000058E  B07C 4AFC                730      CMP.W  #$4AFC,D0                ;Compare the appropriate bits
00000592  6700 02BC                731      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000596  6600 0002                732      BNE    CHECK_OP_RTE             ;Check next OP code
0000059A                           733      
0000059A                           734  CHECK_OP_RTE:    
Line 735 ERROR: Undefined symbol
0000059A  3039 004DBD16            735      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005A0  B07C 4E73                736      CMP.W #$4E73,D0                 ;Compare the appropriate bits
000005A4  6700 02AA                737      BEQ   GROUP4_INVALID            ;INVALID OP code found
000005A8  6600 0002                738      BNE   CHECK_OP_TRAPV            ;Check next OP code
000005AC                           739      
000005AC                           740  CHECK_OP_TRAPV:
Line 741 ERROR: Undefined symbol
000005AC  3039 004DBD16            741      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005B2  B07C 4E76                742      CMP.W  #$4E76,D0                ;Compare the appropriate bits
000005B6  6700 0298                743      BEQ    GROUP4_INVALID           ;INVALID OP code found
000005BA  6600 0002                744      BNE    CHECK_OP_RTR             ;Check next OP code
000005BE                           745      
000005BE                           746  CHECK_OP_RTR:
Line 747 ERROR: Undefined symbol
000005BE  3039 004DBD16            747      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005C4  B07C 4E77                748      CMP.W #$4E77,D0                 ;Compare the appropriate bits
000005C8  6700 0286                749      BEQ    GROUP4_INVALID           ;INVALID OP code found
000005CC  6600 0002                750      BNE    CHECK_OP_MOVE_FROM_SR    ;Check next OP code
000005D0                           751  
000005D0                           752  
000005D0                           753  *Unsupported OP codes to check that have partial static bits
000005D0                           754  CHECK_OP_MOVE_FROM_SR:
Line 755 ERROR: Undefined symbol
000005D0  3039 004DBD16            755      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005D6  0240 FFC0                756      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
000005DA  B07C 40C0                757      CMP.W  #$40C0,D0                ;Compare the appropriate masked bits
000005DE  6700 0270                758      BEQ    GROUP4_INVALID           ;INVALID OP code found  
000005E2  6600 0002                759      BNE    CHECK_OP_MOVE_TO_CCR     ;Check next OP code
000005E6                           760      
000005E6                           761  CHECK_OP_MOVE_TO_CCR:
Line 762 ERROR: Undefined symbol
000005E6  3039 004DBD16            762      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005EC  0240 FFC0                763      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
000005F0  B07C 44C0                764      CMP.W  #$44C0,D0                ;Compare the appropriate masked bits
000005F4  6700 025A                765      BEQ    GROUP4_INVALID           ;INVALID OP code found
000005F8  6600 0002                766      BNE    CHECK_OP_MOVE_TO_SR      ;Check next OP code
000005FC                           767      
000005FC                           768  CHECK_OP_MOVE_TO_SR:
Line 769 ERROR: Undefined symbol
000005FC  3039 004DBD16            769      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000602  0240 FFC0                770      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00000606  B07C 46C0                771      CMP.W  #$46C0,D0                ;Compare the appropriate masked bits
0000060A  6700 0244                772      BEQ    GROUP4_INVALID           ;INVALID OP code found
0000060E  6600 0002                773      BNE    CHECK_OP_NEGX            ;Check next OP code
00000612                           774      
00000612                           775  CHECK_OP_NEGX:
Line 776 ERROR: Undefined symbol
00000612  3039 004DBD16            776      MOVE.W CUR_OP_CODE,D0            ;Move current instruction set into D0
00000618  0240 FF00                777      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
0000061C  B07C 4000                778      CMP.W  #$4000,D0                ;Compare the appropriate masked bits
00000620  6700 022E                779      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000624  6600 0002                780      BNE    CHECK_OP_CLR             ;Check next OP code
00000628                           781      
00000628                           782  CHECK_OP_CLR:
Line 783 ERROR: Undefined symbol
00000628  3039 004DBD16            783      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000062E  0240 FF00                784      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00000632  B07C 4200                785      CMP.W  #$4200,D0                ;Compare the appropriate masked bits
00000636  6700 0218                786      BEQ    GROUP4_INVALID           ;INVALID OP code found
0000063A  6600 0002                787      BNE    CHECK_OP_NOT             ;Check next OP code
0000063E                           788      
0000063E                           789  CHECK_OP_NOT:
Line 790 ERROR: Undefined symbol
0000063E  3039 004DBD16            790      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000644  0240 FF00                791      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00000648  B07C 4600                792      CMP.W  #$4600,D0                ;Compare the appropriate masked bits
0000064C  6700 0202                793      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000650  6600 0002                794      BNE    CHECK_OP_EXT             ;Check next OP code
00000654                           795      
00000654                           796  CHECK_OP_EXT:
Line 797 ERROR: Undefined symbol
00000654  3039 004DBD16            797      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000065A  0240 FFB8                798      ANDI.W #$FFB8,D0                ;Mask relevant bits to D0
0000065E  B07C 4880                799      CMP.W  #$4880,D0                ;Compare the appropriate masked bits
00000662  6700 01EC                800      BEQ    GROUP4_INVALID           ;INVALID OP code BIT_CHECK_EXT
00000666  6600 001E                801      BNE    CHECK_OP_NBCD            ;Check next OP code
0000066A                           802  
0000066A                           803  BIT_CHECK_EXT:    
Line 804 ERROR: Undefined symbol
0000066A  3039 004DBD16            804      MOVE.W CUR_OP_CODE,D0           ;This is a special case to check against MOVEM
00000670  323C 000A                805      MOVE.W #10,D1                   ;Prepare a 10 bit shift into D1
00000674  E368                     806      LSL.W  D1,D0                    ;Shift D0 left 10 bits
00000676  E068                     807      LSR.W  D0,D0                    ;Reposition D0
00000678  E648                     808      LSR.W  #3,D0                    ;Shift D0 3 bits
0000067A  B078 0000                809      CMP.W  %000,D0                  ;Check the specific bits needed to differentiate EXT
0000067E  6700 01D0                810      BEQ    GROUP4_INVALID           ;This means that this OP code is EXT
Line 811 ERROR: Undefined symbol
00000682  6600 B692                811      BNE    CHECK_OP_MOVEM           ;This is the only other possibility 
00000686                           812      
00000686                           813  CHECK_OP_NBCD:
Line 814 ERROR: Undefined symbol
00000686  3039 004DBD16            814      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000068C  0240 FFC0                815      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0           
00000690  B07C 4800                816      CMP.W  #$4800,D0                ;Compare the appropriate masked bits
00000694  6700 01BA                817      BEQ    GROUP4_INVALID           ;INVALID OP code
00000698  6600 0002                818      BNE    CHECK_OP_SWAP            ;Check next OP code
0000069C                           819      
0000069C                           820  CHECK_OP_SWAP:                      ; This must go before CHECK_OP PEA as first 3 nibbles can be equivalent
Line 821 ERROR: Undefined symbol
0000069C  3039 004DBD16            821      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000006A2  0240 FF48                822      ANDI.W #$FF48,D0                ;Mask relevant bits to D0
000006A6  B07C 4840                823      CMP.W  #$4840,D0                ;Compare the appropriate masked bits
000006AA  6700 01A4                824      BEQ    GROUP4_INVALID           ;INVALID OP code
000006AE  6600 0002                825      BNE    CHECK_OP_PEA             ;Check next OP code
000006B2                           826   
000006B2                           827  CHECK_OP_PEA:                       ;This must go after CHECK_OP_SWAP as first 3 nibbles can be equivalent
Line 828 ERROR: Undefined symbol
000006B2  3039 004DBD16            828      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000006B8  0240 FF40                829      ANDI.W #$FF40,D0                ;Mask relevant bits to D0
000006BC  B07C 4840                830      CMP.W  #$4840,D0                ;Compare the appropriate masked bits
000006C0  6700 018E                831      BEQ    GROUP4_INVALID           ;INVALID OP code
000006C4  6600 0002                832      BNE    CHECK_OP_TAS             ;Check next OP code
000006C8                           833      
000006C8                           834  CHECK_OP_TAS:
Line 835 ERROR: Undefined symbol
000006C8  3039 004DBD16            835      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000006CE  0240 FFC0                836      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
000006D2  B07C 4AC0                837      CMP.W  #$4AC0,D0                ;Compare the appropriate masked bits
000006D6  6700 0178                838      BEQ    GROUP4_INVALID           ;INVALID OP code
000006DA  6600 0002                839      BNE    CHECK_OP_TST             ;Check next OP code
000006DE                           840  
000006DE                           841  CHECK_OP_TST:                       ;This must go after CHECK_OP_TAS as first 2 nibbles are equivalent
Line 842 ERROR: Undefined symbol
000006DE  3039 004DBD16            842      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000006E4  0240 FF00                843      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
000006E8  B07C 4A00                844      CMP.W  #$4A00,D0                ;Compare the appropriate masked bits
000006EC  6700 0162                845      BEQ    GROUP4_INVALID           ;INVALID OP code
000006F0  6600 0002                846      BNE    CHECK_OP_TRAP            ;Check next OP code
000006F4                           847      
000006F4                           848  CHECK_OP_TRAP:
Line 849 ERROR: Undefined symbol
000006F4  3039 004DBD16            849      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000006FA  0240 FFF0                850      ANDI.W #$FFF0,D0                ;Mask relevant bits to D0
000006FE  B07C 4E40                851      CMP.W  #$4E40,D0                ;Compare the appropriate masked bits
00000702  6700 014C                852      BEQ    GROUP4_INVALID           ;INVALID OP code
00000706  6600 0002                853      BNE    CHECK_OP_LINK            ;Check next OP code
0000070A                           854      
0000070A                           855  CHECK_OP_LINK:
Line 856 ERROR: Undefined symbol
0000070A  3039 004DBD16            856      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000710  0240 FFF8                857      ANDI.W #$FFF8,D0                ;Mask relevant bits to D0
00000714  B07C 4E50                858      CMP.W  #$4E50,D0                ;Compare the appropriate masked bits
00000718  6700 0136                859      BEQ    GROUP4_INVALID           ;INVALID OP code
0000071C  6600 0002                860      BNE    CHECK_OP_UNLK            ;Check next OP code
00000720                           861  
00000720                           862  CHECK_OP_UNLK:
Line 863 ERROR: Undefined symbol
00000720  3039 004DBD16            863      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000726  0240 FFF8                864      ANDI.W #$FFF8,D0                ;Mask relevant bits to D0
0000072A  B07C 4E58                865      CMP.W  #$4E58,D0                ;Compare the appropriate masked bits
0000072E  6700 0120                866      BEQ    GROUP4_INVALID           ;INVALID OP code
00000732  6600 0002                867      BNE    CHECK_OP_MOVE_USP        ;Check next OP
00000736                           868      
00000736                           869  CHECK_OP_MOVE_USP:
Line 870 ERROR: Undefined symbol
00000736  3039 004DBD16            870      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000073C  0240 FFF0                871      ANDI.W #$FFF0,D0                ;Mask relevant bits to D0
00000740  B07C 4E60                872      CMP.W  #$4E60,D0                ;Compare the appropriate masked bits
00000744  6700 010A                873      BEQ    GROUP4_INVALID           ;INVALID OP code
00000748  6600 0002                874      BNE    CHECK_OP_JMP             ;Check next OP
0000074C                           875  
0000074C                           876  CHECK_OP_JMP:
Line 877 ERROR: Undefined symbol
0000074C  3039 004DBD16            877       MOVE.W CUR_OP_CODE,D0          ;Move current instruction set into D0
00000752  0240 FFC0                878       ANDI.W #$FFC0,D0               ;Mask relevant bits to D0
00000756  B07C 4EC0                879       CMP.W  #$4EC0,D0               ;Compare the appropriate masked bits
0000075A  6700 00F4                880       BEQ    GROUP4_INVALID          ;INVALID OP code
0000075E  6600 0002                881       BNE    CHECK_OP_CHK            ;Check next OP code
00000762                           882       
00000762                           883  CHECK_OP_CHK:
Line 884 ERROR: Undefined symbol
00000762  3039 004DBD16            884      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000768  0240 F1C0                885      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
0000076C  B07C 4180                886      CMP.W   #$4180,D0               ;Compare the appropriate masked bits
00000770  6700 070E                887      BEQ     INVALID_OP              ;INVALID OP code
00000774  6600 0002                888      BNE     CHECK_OP_NOP            ;Check next OP code
00000778                           889  
00000778                           890  *Supported OP codes to check
00000778                           891  CHECK_OP_NOP:                       ;While this code is not in the supported docs, Nash covered it in class and expects it to be implemented
Line 892 ERROR: Undefined symbol
00000778  3039 004DBD16            892      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000077E  B07C 4E71                893      CMP.W  #$4E71,D0                ;Compare the appropriate bits
00000782  6600 000C                894      BNE    CHECK_OP_RTS             ;Check next OP code
00000786  4EB9 00000F64            895      JSR    PRINT_OP_NOP             ;Print out OP code
0000078C  6000 00C8                896      BRA    GROUP4_SUCCESS           ;Finish routine
00000790                           897      
00000790                           898  CHECK_OP_RTS:
Line 899 ERROR: Undefined symbol
00000790  3039 004DBD16            899      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000796  B07C 4E75                900      CMP.W  #$4E75,D0                ;Mask exact bits for RTS    
0000079A  6600 000C                901      BNE    CHECK_OP_LEA             ;If it's equal check next code
0000079E  4EB9 00000F54            902      JSR    PRINT_OP_RTS             ;Print out OP code
000007A4  6000 00B0                903      BRA    GROUP4_SUCCESS           ;Finish routine
000007A8                           904   
000007A8                           905  CHECK_OP_LEA:
Line 906 ERROR: Undefined symbol
000007A8  3039 004DBD16            906      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000007AE  0240 F1C0                907      ANDI.W #$F1C0,D0                ;Mask appropriate bits
000007B2  B07C 41C0                908      CMP.W  #$41C0,D0                ;Compare masked bits
000007B6  6600 000C                909      BNE    CHECK_OP_JSR             ;Check next OP code
000007BA  4EB9 00000F74            910      JSR    PRINT_OP_LEA             ;Print out OP code
000007C0  6000 0094                911      BRA    GROUP4_SUCCESS           ;Finish routine
000007C4                           912   
000007C4                           913  CHECK_OP_JSR:
Line 914 ERROR: Undefined symbol
000007C4  3039 004DBD16            914      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000007CA  0240 FFC0                915      ANDI.W #$FFC0,D0                ;Mask appropriate bits
000007CE  B07C 4E80                916      CMP.W  #$4E80,D0                ;Compare masked bits
000007D2  6600 000C                917      BNE    CHECK_OP_NEG             ;Check next OP code
000007D6  4EB9 00000F44            918      JSR    PRINT_OP_JSR             ;Print out OP code
000007DC  6000 0078                919      BRA    GROUP4_SUCCESS           ;Finish routine
000007E0                           920      
000007E0                           921  CHECK_OP_NEG:
Line 922 ERROR: Undefined symbol
000007E0  3039 004DBD16            922      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000007E6  0240 FF00                923      ANDI.W #$FF00,D0                ;Mask appropriate bits
000007EA  B07C 4400                924      CMP.W  #$4400,D0                ;Compare masked bits
Line 925 ERROR: Undefined symbol
000007EE  6600 B526                925      BNE    CHECK_OP_MOVEM           ;Check next OP code
000007F2  4EB8 014C                926      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Find size field
000007F6  4EB9 00000F8A            927      JSR    PRINT_OP_NEG             ;Print out OP code
000007FC  6000 0058                928      BRA    GROUP4_SUCCESS           ;Finish routine
00000800                           929      
00000800                           930  MOVEM_BIT_SIZE_CHECK:
Line 931 ERROR: Undefined symbol
00000800  3039 004DBD16            931      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000806  4EB8 016E                932      JSR    FIND_1_BIT_SIZE_6        ;Parse size for bit 6
0000080A  0C38 0000 0000           933      CMP.B  #%0,OP_SIZE              ;Check size bit
00000810  6700 0006                934      BEQ    CHECK_OP_MOVEM_W         ;If 0 it's a word
00000814  6600 001E                935      BNE    CHECK_OP_MOVEM_L         ;If 1 it's a long
00000818                           936  
00000818                           937  *Special checking for MOVEM sizes
00000818                           938  CHECK_OP_MOVEM_W:
Line 939 ERROR: Undefined symbol
00000818  3039 004DBD16            939      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000081E  0240 FB80                940      ANDI.W #$FB80,D0                ;Mask appropriate bits
00000822  B07C 4880                941      CMP.W  #$4880,D0                ;Compare masked bits
00000826  6600 0028                942      BNE    GROUP4_INVALID           ;INVALID OP code is found
0000082A  4EB9 00000FA0            943      JSR    PRINT_OP_MOVEM_W         ;PRINT OP code
00000830  6000 0024                944      BRA    GROUP4_SUCCESS           ;Finish routine
00000834                           945      
00000834                           946  CHECK_OP_MOVEM_L:
Line 947 ERROR: Undefined symbol
00000834  3039 004DBD16            947      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000083A  0240 FB80                948      ANDI.W #$FB80,D0                ;Mask appropriate bits
0000083E  B07C 4880                949      CMP.W  #$4880,D0                ;Compare masked bits
00000842  6600 000C                950      BNE    GROUP4_INVALID           ;INVALID OP code is found
00000846  4EB9 00000FB0            951      JSR    PRINT_OP_MOVEM_L         ;Print OP code
0000084C  6000 0008                952      BRA    GROUP4_SUCCESS           ;Finish routine    
00000850                           953      
00000850                           954  GROUP4_INVALID:
00000850  4EB9 00000E80            955      JSR INVALID_OP                  ;INVALID op code has been found, set IS_VALID to 0
00000856                           956  
00000856                           957  GROUP4_SUCCESS:
00000856  4CDF 0001                958      MOVEM.L (SP)+,D0                ;Restore saved registers
0000085A  4E75                     959      RTS                             ;Return to stack
0000085C                           960  * GROUP_5
0000085C                           961  ********************************************************************************
0000085C                           962  * Description: CHecks for the following list of OP codes to be present or not.
0000085C                           963  * Supported OP code:
0000085C                           964  * SUBQ: $5, 11-9 DATA, 8 %1, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
0000085C                           965  *
0000085C                           966  * Register(s) used: D0
0000085C                           967  *
0000085C                           968  * Precondition: First nibble has been identified as $5
0000085C                           969  *
0000085C                           970  * Postcondition: Parses proper OP code with a nibble value of $5 or finds an
0000085C                           971  * invalid OP code. 
0000085C                           972  *
0000085C                           973  * Unsupported OP codes: ADDQ, Scc, DBcc
0000085C                           974  ********************************************************************************
0000085C                           975  C_GROUP_5:
0000085C  48E7 8000                976      MOVEM.L D0,-(SP)                ;Save registers to stack
00000860                           977  *Unsupported OP codes
00000860                           978  CHECK_OP_DBcc:                      ;These are ordered first due to checking bits 7-6
Line 979 ERROR: Undefined symbol
00000860  3039 004DBD16            979      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000866  0240 F0C8                980      ANDI.W #$F0C8,D0                ;Mask appropriate bits
0000086A  B07C 50C8                981      CMP.W  #$50C8,D0                ;Compare appropriate masked bits
0000086E  6700 0052                982      BEQ    GROUP5_INVALID           ;INVALID op code found
00000872  6600 0002                983      BNE    CHECK_OP_Scc             ;Check next OP code
00000876                           984  
00000876                           985  CHECK_OP_Scc:
Line 986 ERROR: Undefined symbol
00000876  3039 004DBD16            986      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000087C  0240 F0C0                987      ANDI.W #$F0C0,D0                ;Mask appropriate bits
00000880  B07C 50C0                988      CMP.W  #$50C0,D0                ;Compare appropriate masked bits
00000884  6700 003C                989      BEQ     GROUP5_INVALID          ;INVALID OP code found
00000888  6600 0002                990      BNE     CHECK_OP_ADDQ           ;Check next OP code
0000088C                           991  
0000088C                           992  CHECK_OP_ADDQ:
Line 993 ERROR: Undefined symbol
0000088C  3039 004DBD16            993      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000892  0240 F100                994      ANDI.W #$F100,D0                ;Mask appropriate bits
00000896  B07C 5000                995      CMP.W  #$5000,D0                ;Compare appropriate masked bits
0000089A  6700 0026                996      BEQ    GROUP5_INVALID           ;INVALID OP code found
0000089E  6600 0002                997      BNE    CHECK_OP_SUBQ            ;Check next OP code
000008A2                           998  
000008A2                           999  *Supported OP code   
000008A2                          1000  CHECK_OP_SUBQ     
Line 1001 ERROR: Undefined symbol
000008A2  3039 004DBD16           1001      MOVE.W  CUR_OP_CODE,D0          ;Actual check for SUBQ
000008A8  0240 F100               1002      ANDI.W #$F100,D0                ;Bitmask check for SUBQ
000008AC  B07C 5100               1003      CMP.W  #$5100,D0                ;Compare the proper value
000008B0  6600 0010               1004      BNE    GROUP5_INVALID           ;Else the operand is invalid
000008B4  4EB8 014C               1005      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Find size bit to print
000008B8  4EB9 00000FC0           1006      JSR    PRINT_OP_SUBQ            ;If equal print it out
000008BE  6000 0008               1007      BRA    GROUP5_SUCCESS           ;Finish routine
000008C2                          1008      
000008C2                          1009  GROUP5_INVALID: 
000008C2  4EB9 00000E80           1010      JSR INVALID_OP                  ;INVALID OP has been found, set IS_VALID to 0
000008C8                          1011  GROUP5_SUCCESS:
000008C8  4CDF 0001               1012      MOVEM.L (SP)+,D0                ;Restore registers from stack
000008CC  4E75                    1013      RTS                             ;Return to stack
000008CE                          1014      
000008CE                          1015  * GROUP_6
000008CE                          1016  ********************************************************************************
000008CE                          1017  * Description: Checks for the following list of OP codes to be present or not.
000008CE                          1018  * Supported OP codes
000008CE                          1019  * BRA: $60, 7-0 8-Bit Displacement
000008CE                          1020  * Bcc: $6, 11-8 Condition, 7-0 8-Bit Displacement
000008CE                          1021  *   Branch: <Condition>   
000008CE                          1022  *   BCS: %0101          
000008CE                          1023  *   BGE: %1100      
000008CE                          1024  *   BLT: %1101  
000008CE                          1025  *   BVC: %1000
000008CE                          1026  *
000008CE                          1027  * Register(s) used: D0,D1,D2
000008CE                          1028  *
000008CE                          1029  * Precondition: First nibble has been identified as $6
000008CE                          1030  *
000008CE                          1031  * Postcondition: Parses proper OP code with a nibble value of $6 or finds an
000008CE                          1032  * invalid OP code.
000008CE                          1033  *
000008CE                          1034  * Unsupported OP codes: BSR,BGT,BCC,BEQ,BHI,BMI,BNE,BPL
000008CE                          1035  ********************************************************************************
000008CE                          1036  C_GROUP_6:
000008CE  48E7 8000               1037      MOVEM.L D0,-(SP)            ;Save register to stack
000008D2                          1038  *Unsupported OP code
000008D2                          1039  CHECK_OP_BSR:
Line 1040 ERROR: Undefined symbol
000008D2  3039 004DBD16           1040      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set to D0
000008D8  0240 FF00               1041      ANDI.W  #$FF00,D0               ;Mask appropriate bits
000008DC  B07C 6100               1042      CMP.W   #$6100,D0               ;Compare masked bits
000008E0  6700 0142               1043      BEQ     GROUP6_INVALID          ;INVALID OP code found
000008E4  6600 0002               1044      BNE     CHECK_OP_BGT            ;Check next OP code
000008E8                          1045      
000008E8                          1046  CHECK_OP_BGT:
Line 1047 ERROR: Undefined symbol
000008E8  3039 004DBD16           1047      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000008EE  0240 FF00               1048      ANDI.W #$FF00,D0                ;Mask appropriate bits
000008F2  B07C 6E00               1049      CMP.W  #$6E00,D0                ;Compare masked bits
000008F6  6700 012C               1050      BEQ    GROUP6_INVALID           ;INVALID OP code found
000008FA  6600 0002               1051      BNE    CHECK_OP_BCC             ;Check next OP code
000008FE                          1052  
000008FE                          1053  CHECK_OP_BCC:
Line 1054 ERROR: Undefined symbol
000008FE  3039 004DBD16           1054      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000904  0240 FF00               1055      ANDI.W #$FF00,D0                ;Mask appropriate bits
00000908  B07C 6400               1056      CMP.W  #$6400,D0                ;Compare masked bits
0000090C  6700 0116               1057      BEQ    GROUP6_INVALID           ;INVALID OP code found
00000910  6600 0002               1058      BNE    CHECK_OP_BEQ             ;Check next OP code 
00000914                          1059  
00000914                          1060  CHECK_OP_BEQ:
Line 1061 ERROR: Undefined symbol
00000914  3039 004DBD16           1061      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000091A  0240 FF00               1062      ANDI.W #$FF00,D0                ;Mask appropriate bits
0000091E  B07C 6700               1063      CMP.W  #$6700,D0                ;Compare masked bits
00000922  6700 0100               1064      BEQ    GROUP6_INVALID           ;INVALID OP code found
00000926  6600 0002               1065      BNE    CHECK_OP_BHI             ;Check next OP code
0000092A                          1066  
0000092A                          1067  CHECK_OP_BHI:
Line 1068 ERROR: Undefined symbol
0000092A  3039 004DBD16           1068      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000930  0240 FF00               1069      ANDI.W #$FF00,D0                ;Mask appropriate bits
00000934  B07C 6200               1070      CMP.W  #$6200,D0                ;Compare masked bits
00000938  6700 00EA               1071      BEQ    GROUP6_INVALID           ;INVALID OP code found
0000093C  6600 0002               1072      BNE    CHECK_OP_BLS             ;Check next OP code
00000940                          1073  
00000940                          1074  CHECK_OP_BLS:
Line 1075 ERROR: Undefined symbol
00000940  3039 004DBD16           1075      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000946  0240 FF00               1076      ANDI.W #$FF00,D0                ;Mask appropriate bits
0000094A  B07C 6300               1077      CMP.W  #$6300,D0                ;Compare masked bits
0000094E  6700 00D4               1078      BEQ    GROUP6_INVALID           ;INVALID OP code found
00000952  6600 0002               1079      BNE    CHECK_OP_BMI             ;Check next OP code
00000956                          1080  
00000956                          1081  CHECK_OP_BMI:
Line 1082 ERROR: Undefined symbol
00000956  3039 004DBD16           1082      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000095C  0240 FF00               1083      ANDI.W #$FF00,D0                ;Mask appropriate bits
00000960  B07C 6B00               1084      CMP.W  #$6B00,D0                ;Compare masked bits
00000964  6700 00BE               1085      BEQ    GROUP6_INVALID           ;INVALID OP code found
00000968  6600 0002               1086      BNE    CHECK_OP_BNE             ;Check next OP code
0000096C                          1087  
0000096C                          1088  CHECK_OP_BNE:
Line 1089 ERROR: Undefined symbol
0000096C  3039 004DBD16           1089      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000972  0240 FF00               1090      ANDI.W #$FF00,D0                ;Mask appropriate bits
00000976  B07C 6600               1091      CMP.W  #$6600,D0                ;Compare masked bits
0000097A  6700 00A8               1092      BEQ    GROUP6_INVALID           ;INVALID OP code found
0000097E  6600 0002               1093      BNE    CHECK_OP_BPL             ;Check next OP code    
00000982                          1094  
00000982                          1095  CHECK_OP_BPL:
Line 1096 ERROR: Undefined symbol
00000982  3039 004DBD16           1096      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000988  0240 FF00               1097      ANDI.W #$FF00,D0                ;Mask appropriate bits
0000098C  B07C 6A00               1098      CMP.W  #$6A00,D0                ;Compare masked bits
00000990  6700 0092               1099      BEQ    GROUP6_INVALID           ;INVALID OP code found
00000994  6600 0002               1100      BNE    CHECK_OP_BRA             ;Check next OP code 
00000998                          1101  
00000998                          1102  
00000998                          1103  *Supported OP codes
00000998                          1104  CHECK_OP_BRA:
Line 1105 ERROR: Undefined symbol
00000998  3039 004DBD16           1105      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0       
0000099E  0240 FF00               1106      ANDI.W  #$FF00,D0               ;Mask appropriate bits
000009A2  B07C 6000               1107      CMP.W   #$6000,D0               ;Compare masked bits
000009A6  6600 000C               1108      BNE     CHECK_OP_BCS            ;Check next OP code
000009AA  4EB9 0000102E           1109      JSR     PRINT_OP_BRA            ;Print out OP code
000009B0  6000 0078               1110      BRA     GROUP6_SUCCESS          ;Finish routine
000009B4                          1111      
000009B4                          1112  CHECK_OP_BCS:
Line 1113 ERROR: Undefined symbol
000009B4  3039 004DBD16           1113      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000009BA  0240 FF00               1114      ANDI.W #$FF00,D0                ;Mask appropriate bits
000009BE  B07C 6500               1115      CMP.W  #$6500,D0                ;Compare masked bits
000009C2  6600 000C               1116      BNE    CHECK_OP_BGE             ;Check next OP code
000009C6  4EB9 00000FD6           1117      JSR    PRINT_OP_BCS             ;Print out OP code
000009CC  6000 005C               1118      BRA    GROUP6_SUCCESS           ;Finish routine
000009D0                          1119  
000009D0                          1120      
000009D0                          1121  CHECK_OP_BGE:
Line 1122 ERROR: Undefined symbol
000009D0  3039 004DBD16           1122      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000009D6  0240 FF00               1123      ANDI.W #$FF00,D0                ;Mask appropriate bits
000009DA  B07C 6C00               1124      CMP.W  #$6C00,D0                ;Compare masked bits
000009DE  6600 000C               1125      BNE    CHECK_OP_BLT             ;Check next OP code
000009E2  4EB9 00000FEC           1126      JSR    PRINT_OP_BGE             ;Print out OP code
000009E8  6000 0040               1127      BRA    GROUP6_SUCCESS           ;Finish routine
000009EC                          1128      
000009EC                          1129      
000009EC                          1130  CHECK_OP_BLT:
Line 1131 ERROR: Undefined symbol
000009EC  3039 004DBD16           1131      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000009F2  0240 FF00               1132      ANDI.W #$FF00,D0                ;Mask appropriate bits
000009F6  B07C 6D00               1133      CMP.W  #$6D00,D0                ;Compare masked bits
000009FA  6600 000C               1134      BNE    CHECK_OP_BVC             ;Check next OP code
000009FE  4EB9 00001002           1135      JSR    PRINT_OP_BLT             ;Print out OP code
00000A04  6000 0024               1136      BRA    GROUP6_SUCCESS           ;Finish routine
00000A08                          1137      
00000A08                          1138  CHECK_OP_BVC:
Line 1139 ERROR: Undefined symbol
00000A08  3039 004DBD16           1139      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000A0E  0240 FF00               1140      ANDI.W #$FF00,D0                ;Mask appropriate bits
00000A12  B07C 6800               1141      CMP.W  #$6800,D0                ;Compare masked bits
00000A16  6600 000C               1142      BNE    GROUP6_INVALID           ;Check next OP code
00000A1A  4EB9 00001018           1143      JSR    PRINT_OP_BVC             ;Print out OP code
00000A20  6000 0008               1144      BRA    GROUP6_SUCCESS           ;Finish routine
00000A24                          1145      
00000A24                          1146  GROUP6_INVALID:
00000A24  4EB9 00000E80           1147      JSR    INVALID_OP               ;INVALID OP code found, set IS_VALID to 0
00000A2A                          1148  GROUP6_SUCCESS:
00000A2A  4CDF 0001               1149      MOVEM.L (SP)+,D0                ;Restore registers from stack
00000A2E  4E75                    1150      RTS                             ;Return from stack
00000A30                          1151      
00000A30                          1152  *GROUP_7
00000A30                          1153  ********************************************************************************
00000A30                          1154  * Description: Checks if the following OP code is present or not.
00000A30                          1155  * Currently no OP codes here are supported. MOVEQ is the only code in this group
00000A30                          1156  * Register(s) used: D0
00000A30                          1157  *
00000A30                          1158  * Precondition: First nibble has been identified as $7
00000A30                          1159  *
00000A30                          1160  * Postcondition: Identifies it's MOVEQ and sets IS_VALID to 0
00000A30                          1161  *
00000A30                          1162  * Unsupported OP code: MOVEQ
00000A30                          1163  ********************************************************************************
00000A30                          1164  C_GROUP_7:
00000A30  48E7 8000               1165      MOVEM.L D0,-(SP)                ;Save register to stack
00000A34                          1166  *Unsupported OP code
00000A34                          1167  CHECK_OP_MOVEQ
Line 1168 ERROR: Undefined symbol
00000A34  3039 004DBD16           1168      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set to D0
00000A3A  0240 F100               1169      ANDI.W  #$F100,D0               ;Mask appropriate bits
00000A3E  B07C 7000               1170      CMP.W   #$7000,D0               ;Compare masked bits
00000A42  6000 0002               1171      BRA     GROUP7_INVALID          ;INVALID OP code found
00000A46                          1172  
00000A46                          1173  GROUP7_INVALID:
00000A46  4EB9 00000E80           1174      JSR     INVALID_OP              ;INVALID OP code found, set IS_VALID to 0
00000A4C                          1175  GROUP7_SUCCESS:    
00000A4C  4CDF 0001               1176      MOVEM.L (SP)+,D0                ;Restore registers from stack
00000A50  4E75                    1177      RTS                             ;Return from stack
00000A52                          1178  * GROUP_8
00000A52                          1179  ********************************************************************************
00000A52                          1180  * Description: Checks the following list of OP codes to be present or not.
00000A52                          1181  * Supported OP code:
00000A52                          1182  * DIVS: $8, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00000A52                          1183  * OR: $80, 7-6 Size, 5-3 EA Mode, 2-0 EA Register
00000A52                          1184  * Register(s) used: D0
00000A52                          1185  *
00000A52                          1186  * Precondition: First nibble has been identified as $8
00000A52                          1187  *
00000A52                          1188  * Postcondition: Parses proper OP code with a nibble value of $8 or finds an
00000A52                          1189  * invalid OP code.
00000A52                          1190  *
00000A52                          1191  * Unsupported OP codes: DIVU, SBCD
00000A52                          1192  ********************************************************************************
00000A52                          1193  C_GROUP_8:
00000A52  48E7 8000               1194      MOVEM.L D0,-(SP)
00000A56                          1195  *Unsupported OP codes
00000A56                          1196  CHECK_OP_DIVU:
Line 1197 ERROR: Undefined symbol
00000A56  3039 004DBD16           1197      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000A5C  0240 F1C0               1198      ANDI.W  #$F1C0,D0               ;Mask appropriate bits
00000A60  B07C 80C0               1199      CMP.W   #$80C0,D0               ;Compare masked bits
00000A64  6700 0046               1200      BEQ     GROUP8_INVALID          ;INVALID OP code found
00000A68  6600 0002               1201      BNE     CHECK_OP_SBCD           ;Check next OP code
00000A6C                          1202  
00000A6C                          1203  CHECK_OP_SBCD:
Line 1204 ERROR: Undefined symbol
00000A6C  3039 004DBD16           1204      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000A72  0240 F1F0               1205      ANDI.W  #$F1F0,D0               ;Mask appropriate bits
00000A76  B07C 8100               1206      CMP.W   #$8100,D0               ;Compare masked bits
00000A7A  6700 0030               1207      BEQ     GROUP8_INVALID          ;INVALID OP code found
00000A7E  6600 0002               1208      BNE     CHECK_OP_DIVS           ;Check next OP code
00000A82                          1209      
00000A82                          1210  *Supported OP codes
00000A82                          1211  CHECK_OP_DIVS:
Line 1212 ERROR: Undefined symbol
00000A82  3039 004DBD16           1212      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000A88  0240 F1C0               1213      ANDI.W  #$F1C0,D0               ;Mask appropriate bits
00000A8C  B07C 81C0               1214      CMP.W   #$81C0,D0               ;Compare masked bits
00000A90  6600 000C               1215      BNE     CHECK_OP_OR             ;Check next OP code
00000A94  4EB9 00001044           1216      JSR     PRINT_OP_DIVS           ;OP Code found
00000A9A  6000 0016               1217      BRA     GROUP8_SUCCESS          ;Finish routine
00000A9E                          1218      
00000A9E                          1219  CHECK_OP_OR:                        ;At this point only remaining $8 code is OR
00000A9E  4EB8 014C               1220      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Finding size bit to print out
00000AA2  4EB9 00001054           1221      JSR     PRINT_OP_OR             ;Print out OR
00000AA8  6000 0008               1222      BRA     GROUP8_SUCCESS          ;Finish routine
00000AAC                          1223  GROUP8_INVALID:
00000AAC  4EB9 00000E80           1224       JSR     INVALID_OP             ;INVALID OP code found, set IS_VALID to 0
00000AB2                          1225  GROUP8_SUCCESS:
00000AB2  4CDF 0001               1226       MOVEM.L (SP)+,D0               ;Restore register from stack
00000AB6  4E75                    1227       RTS                            ;Return to stack
00000AB8                          1228       
00000AB8                          1229  * GROUP_9                      
00000AB8                          1230  ********************************************************************************
00000AB8                          1231  * Description: Checks the if the following OP code is present or not.
00000AB8                          1232  * Supported OP code:
00000AB8                          1233  * SUB: $9, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00000AB8                          1234  *
00000AB8                          1235  * Register(s) used: D0,D1
00000AB8                          1236  *
00000AB8                          1237  * Precondition: First nibble has been identified as $9
00000AB8                          1238  *
00000AB8                          1239  * Postcondition: Parses proper OP code with a nibble value of $9 or finds an
00000AB8                          1240  * invalid OP code.
00000AB8                          1241  *
00000AB8                          1242  * Unsupported OP codes: SUBX, SUBA
00000AB8                          1243  ********************************************************************************
00000AB8                          1244  C_GROUP_9:
00000AB8  48E7 C000               1245      MOVEM.L D0-D1,-(SP)             ;Save the registers
00000ABC                          1246  *Unsupported OP codes
00000ABC                          1247  CHECK_SIZE_BIT_FOR_SUB:
00000ABC  4EB8 014C               1248      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Find the size bits in 7-6
00000AC0  0C38 0003 0000          1249      CMP.B   #%11,OP_SIZE            ;If the bits are %11, it has to be SUBA
00000AC6  6700 0006               1250      BEQ     CHECK_OP_SUBA           ;If the bits equal it must be SUBA
00000ACA  6600 0018               1251      BNE     CHECK_OP_SUBX           ;If the bits are not equal it could be SUBX
00000ACE                          1252      
00000ACE                          1253  CHECK_OP_SUBA:                      ;Check SUBA first as it has static bits
Line 1254 ERROR: Undefined symbol
00000ACE  3039 004DBD16           1254      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000AD4  0240 F0C0               1255      ANDI.W  #$F0C0,D0               ;Mask appropriate bits
00000AD8  B07C 90C0               1256      CMP.W   #$90C0,D0               ;Compare masked bits
00000ADC  6700 0046               1257      BEQ     GROUP9_INVALID          ;INVALID OP has been found
00000AE0  6600 0002               1258      BNE     CHECK_OP_SUBX           ;Check next OP
00000AE4                          1259  
00000AE4                          1260  CHECK_OP_SUBX:
Line 1261 ERROR: Undefined symbol
00000AE4  3039 004DBD16           1261      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000AEA  0240 F130               1262      ANDI.W  #$F130,D0               ;Mask appropriate bits
00000AEE  B07C 9100               1263      CMP.W   #$9100,D0               ;Compare masked bits
00000AF2  6000 0002               1264      BRA     BIT_CHECK_SUBX          ;Checking if this code is SUBX through bit shifts
00000AF6                          1265      
00000AF6                          1266  BIT_CHECK_SUBX:    
Line 1267 ERROR: Undefined symbol
00000AF6  3039 004DBD16           1267      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000AFC  323C 0007               1268      MOVE.W  #7,D1                   ;Prepare a shift of 7 bits into D1
00000B00  E368                    1269      LSL.W   D1,D0                   ;Shift left 7 bits truncate 15-9 bits
00000B02  E268                    1270      LSR.W   D1,D0                   ;Reposition D0
00000B04  E848                    1271      LSR.W   #4,D0                   ;Truncate 4 right most bits to
00000B06  0240 FF13               1272      ANDI.W  #$FF13,D0               ;Compare remaining static bits
00000B0A  B07C 0010               1273      CMP.W   #$0010,D0               ;If equal to this value it's SUBX
00000B0E  6700 0014               1274      BEQ     GROUP9_INVALID          ;INVALID OP code found
00000B12  6600 0002               1275      BNE     CHECK_OP_SUB            ;Not can only be SUB here
00000B16                          1276      
00000B16                          1277  *Supported OP code 
00000B16                          1278  CHECK_OP_SUB:                       ;At this point only remaining $9 is SUB
00000B16  4EB8 014C               1279      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Find the size bit to print out
00000B1A  4EB9 0000106A           1280      JSR     PRINT_OP_SUB            ;Print out SUB
00000B20  6000 0008               1281      BRA     GROUP9_SUCCESS          ;Finish routine
00000B24                          1282      
00000B24                          1283  GROUP9_INVALID:
00000B24  4EB9 00000E80           1284       JSR     INVALID_OP             ;INVALID OP code found, set IS_VALID to 0
00000B2A                          1285  GROUP9_SUCCESS: 
00000B2A  4CDF 0003               1286      MOVEM.L (SP)+,D0-D1             ;Restore registers
00000B2E  4E75                    1287      RTS                             ;Return to stack
00000B30                          1288  
00000B30                          1289  *GROUP_A
00000B30                          1290  ********************************************************************************
00000B30                          1291  * Description: One of the few groups where there are no OP codes at all.
00000B30                          1292  * Currently no OP codes here are supported. There are no current OP codes here.
00000B30                          1293  * Register(s) used: None
00000B30                          1294  *
00000B30                          1295  * Precondition: First nibble has been identified as $A
00000B30                          1296  *
00000B30                          1297  * Postcondition: Sets IS_VALID to 0 as there are no OP codes here
00000B30                          1298  ********************************************************************************
00000B30                          1299  C_GROUP_A:
00000B30  4EB9 00000E80           1300      JSR INVALID_OP                  ;INVALID OP code found, set IS_VALID to 0
00000B36  4E75                    1301      RTS                             ;Return to stack
00000B38                          1302      
00000B38                          1303  * GROUP_B                     
00000B38                          1304  ********************************************************************************
00000B38                          1305  * Description: Checks if the following list of OP codes is present or not.
00000B38                          1306  * Supported OP codes:
00000B38                          1307  * EOR: $B, 11-9 Reg, 8 %1, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00000B38                          1308  * CMP: $B, 11-9 Reg, 8 %0, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00000B38                          1309  * The specific bit difference is listed 
00000B38                          1310  *
00000B38                          1311  * Register(s) used: D0
00000B38                          1312  *
00000B38                          1313  * Precondition: First nibble has been identified as $B
00000B38                          1314  *
00000B38                          1315  * Postcondition: Parses proper OP code with a nibble value of $B or finds an
00000B38                          1316  * invalid OP code.
00000B38                          1317  *
00000B38                          1318  * Unsupported OP codes: CMPM, CMPA
00000B38                          1319  ********************************************************************************
00000B38                          1320  C_GROUP_B:
00000B38  48E7 8000               1321      MOVEM.L D0,-(SP)                ;Save current registers to stack
00000B3C                          1322  *Unsupported OP codes    
00000B3C                          1323  CHECK_OP_CMPM
Line 1324 ERROR: Undefined symbol
00000B3C  3039 004DBD16           1324      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000B42  0240 F138               1325      ANDI.W  #$F138,D0               ;Mask appropriate bits
00000B46  B07C B108               1326      CMP.W   #$B108,D0               ;Compare masked bits
00000B4A  6700 005C               1327      BEQ     GROUPB_INVALID          ;INVALID OP found
00000B4E  6600 0002               1328      BNE     CHECK_OP_CMPA           ;Check next OP
00000B52                          1329      
00000B52                          1330  CHECK_OP_CMPA:
Line 1331 ERROR: Undefined symbol
00000B52  3039 004DBD16           1331      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000B58  0240 F0C0               1332      ANDI.W  #$F0C0,D0               ;Mask appropriate bits
00000B5C  B07C B0C0               1333      CMP.W   #$B0C0,D0               ;Compare masked bits
00000B60  6700 0046               1334      BEQ     GROUPB_INVALID          ;INVALID OP found
00000B64  6600 0002               1335      BNE     CHECK_OP_EOR            ;Check next OP
00000B68                          1336  
00000B68                          1337  *Supported OP codes    
00000B68                          1338  CHECK_OP_EOR:
Line 1339 ERROR: Undefined symbol
00000B68  3039 004DBD16           1339      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000B6E  0240 F100               1340      ANDI.W  #$F100,D0               ;Mask appropriate bits
00000B72  B07C B100               1341      CMP.W   #$B100,D0               ;Compare masked bits
00000B76  6600 0010               1342      BNE     CHECK_OP_CMP            ;Check next OP 
00000B7A  4EB8 014C               1343      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Find size bit field to print out size
00000B7E  4EB9 00001080           1344      JSR     PRINT_OP_EOR            ;Print out OP code
00000B84  6000 0028               1345      BRA     GROUPB_SUCCESS          ;Finish routine
00000B88                          1346      
00000B88                          1347  CHECK_OP_CMP:
Line 1348 ERROR: Undefined symbol
00000B88  3039 004DBD16           1348      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000B8E  0240 F100               1349      ANDI.W  #$F100,D0               ;Mask appropriate bits
00000B92  B07C B000               1350      CMP.W   #$B000,D0               ;Compare masked bits
00000B96  6600 0010               1351      BNE     GROUPB_INVALID          ;INVALID OP code found
00000B9A  4EB8 014C               1352      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Find size bit field to print out size
00000B9E  4EB9 00001096           1353      JSR     PRINT_OP_CMP            ;Print out OP code
00000BA4  6000 0008               1354      BRA     GROUPB_SUCCESS          ;Finish routine
00000BA8                          1355      
00000BA8                          1356  GROUPB_INVALID:
00000BA8  4EB9 00000E80           1357      JSR     INVALID_OP              ;INVALID OP has been found, set IS_VALID to 0
00000BAE                          1358  GROUPB_SUCCESS:
00000BAE  4CDF 0001               1359      MOVEM.L (SP)+,D0                ;Restore registers from stack
00000BB2  4E75                    1360      RTS                             ;Return to stack
00000BB4                          1361  * GROUP_C                     
00000BB4                          1362  ********************************************************************************
00000BB4                          1363  * Description: Checks if the following list of OP codes is present or not.
00000BB4                          1364  * Supported OP code:
00000BB4                          1365  * MULS: $C, 11-8 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00000BB4                          1366  * Note: EXG OP mode has to be 01000, 01001, 10001, as such can never be 11 for
00000BB4                          1367  * bits 7-6
00000BB4                          1368  *
00000BB4                          1369  * Register(s) used: D0,D1
00000BB4                          1370  *
00000BB4                          1371  * Precondition: First nibble has been identified as $C
00000BB4                          1372  *
00000BB4                          1373  * Postcondition: Parses proper OP code with a nibble value of $C or finds an
00000BB4                          1374  * invalid OP code.
00000BB4                          1375  *
00000BB4                          1376  * Unsupported OP codes: MULU, ABCD, EXG, AND
00000BB4                          1377  ********************************************************************************
00000BB4                          1378  C_GROUP_C:
00000BB4                          1379  *Unsupported OP codes
00000BB4  48E7 C000               1380      MOVEM.L D0-D1,-(SP)
00000BB8                          1381      
00000BB8                          1382  CHECK_OP_MULU:
Line 1383 ERROR: Undefined symbol
00000BB8  3039 004DBD16           1383      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000BBE  0240 F1C0               1384      ANDI.W  #$F1C0,D0               ;Mask appropriate bits
00000BC2  B07C C0C0               1385      CMP.W   #$C0C0,D0               ;Compare masked bits
00000BC6  6700 006E               1386      BEQ     GROUPC_INVALID          ;INVALID OP code found
00000BCA  6600 0002               1387      BNE     CHECK_OP_ABCD           ;Check next OP code
00000BCE                          1388   
00000BCE                          1389  CHECK_OP_ABCD:
Line 1390 ERROR: Undefined symbol
00000BCE  3039 004DBD16           1390      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000BD4  0240 F1F0               1391      ANDI.W  #$F1F0,D0               ;Mask appropriate bits
00000BD8  B07C C100               1392      CMP.W   #$C100,D0               ;Compare masked bits
00000BDC  6700 0058               1393      BEQ     GROUPC_INVALID          ;INVALID OP code found
00000BE0  6600 0002               1394      BNE     CHECK_OP_EXG            ;Check next OP code
00000BE4                          1395   
00000BE4                          1396  CHECK_OP_EXG:
00000BE4  6000 0002               1397      BRA     BIT_CHECK_EXG           ;Always do bit check here
00000BE8                          1398                          
00000BE8                          1399  BIT_CHECK_EXG:                      ;Checks the OP mode bits 7-6 which cannot be 11 for EXG
Line 1400 ERROR: Undefined symbol
00000BE8  3039 004DBD16           1400      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000BEE  323C 0007               1401      MOVE.W  #7,D1                   ;Prepare a bit shift of 7 into D1
00000BF2  E368                    1402      LSL.W   D1,D0                   ;Shift D0 to 7 bits
00000BF4  E268                    1403      LSR.W   D1,D0                   ;Reposition D0
00000BF6  E848                    1404      LSR.W   #4,D0                   ;Shift D0 4 bits right
00000BF8  0240 FF83               1405      ANDI.W  #$FF83,D0               ;Mask appropriate bits
00000BFC  B07C 0010               1406      CMP.W   #$0010,D0               ;Bit mask static EXG bits
00000C00  6700 0034               1407      BEQ     GROUPC_INVALID          ;If this equals, then OP must be EXG
00000C04  6600 0002               1408      BNE     CHECK_OP_MULS           ;Otherwise it's MULS
00000C08                          1409  *Supported OP code
00000C08                          1410  CHECK_OP_MULS:
Line 1411 ERROR: Undefined symbol
00000C08  3039 004DBD16           1411      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000C0E  0240 F1C0               1412      ANDI.W #$F1C0,D0                ;Mask appropriate bits
00000C12  B07C C1C0               1413      CMP.W  #$C1C0,D0                ;Compare masked bits
00000C16  6600 000C               1414      BNE    CHECK_OP_AND             ;OP_AND is completely dynamic outside of first nibble
00000C1A  4EB9 000010AC           1415      JSR    PRINT_OP_MULS            ;Print OP code
00000C20  6000 001A               1416      BRA    GROUPC_SUCCESS           ;Finish routine
00000C24                          1417      
00000C24                          1418  *Odd completely dynamic unsupported OP code    
00000C24                          1419  CHECK_OP_AND:                       ;This would be the only possible OP code left after CHECK_OP_MULS
Line 1420 ERROR: Undefined symbol
00000C24  3039 004DBD16           1420      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000C2A  0240 F000               1421      ANDI.W  #$F000,D0               ;Mask appropriate bits
00000C2E  B07C C000               1422      CMP.W   #$C000,D0               ;Compare masked bits
00000C32  6000 0002               1423      BRA    GROUPC_INVALID           ;INVALID OP code found
00000C36                          1424      
00000C36                          1425  GROUPC_INVALID:
00000C36  4EB9 00000E80           1426      JSR     INVALID_OP              ;Set IS_VALID to 0
00000C3C                          1427      
00000C3C                          1428  GROUPC_SUCCESS:
00000C3C  4CDF 0003               1429      MOVEM.L (SP)+,D0-D1             ;Restore registers from stack
00000C40  4E75                    1430      RTS                             ;Return to stack
00000C42                          1431      
00000C42                          1432  * GROUP_D                     
00000C42                          1433  ********************************************************************************
00000C42                          1434  * Description: Checks if the following list of OP codes is present or not.
00000C42                          1435  * Supported OP codes:
00000C42                          1436  * ADD: $D, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00000C42                          1437  * ADDA: $D, 11- 9 Reg, 8-6 OPMODE, 7-6 %11, 5-3 EA Mode, 2-0 EA Reg
00000C42                          1438  * The specific bit difference is listed out in the OPMODE field.
00000C42                          1439  *
00000C42                          1440  * Register(s) used: D0
00000C42                          1441  *
00000C42                          1442  * Precondition: First nibble has been identified as $D
00000C42                          1443  *
00000C42                          1444  * Postcondition: Parses proper OP code with a nibble value of $D or finds an
00000C42                          1445  * invalid OP code.
00000C42                          1446  *
00000C42                          1447  * Unsupported: ADDX
00000C42                          1448  ********************************************************************************
00000C42                          1449  C_GROUP_D:
00000C42  48E7 8000               1450      MOVEM.L D0,-(SP)                ;Save registers to stack
00000C46                          1451  *Unsupported OP codes
00000C46                          1452  BIT_SIZE_CHECK
Line 1453 ERROR: Undefined symbol
00000C46  3039 004DBD16           1453      MOVE    CUR_OP_CODE,D0          ;Move current instruction set into D0
00000C4C  4EB8 014C               1454      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Specific size bit checking to see if it's 11
00000C50  0C38 0003 0000          1455      CMP.B   #%11,OP_SIZE            ;If it's %11 it cannot be ADDX and is either ADDA or ADD
00000C56  6700 0026               1456      BEQ     CHECK_OP_ADDA           ;If it's equal check ADDA
00000C5A  6600 0002               1457      BNE     CHECK_OP_ADDX           ;If it's not equal check ADDX
00000C5E                          1458      
00000C5E                          1459  CHECK_OP_ADDX:
Line 1460 ERROR: Undefined symbol
00000C5E  3039 004DBD16           1460      MOVE    CUR_OP_CODE,D0
00000C64  0240 F130               1461      ANDI.W #$F130,D0                ;Mask appropriate bits
00000C68  B07C D100               1462      CMP.W  #$D100,D0                ;Compare masked bits
00000C6C  6700 002E               1463      BEQ    GROUPD_INVALID           ;INVALID OP code found
00000C70  6600 0002               1464      BNE    CHECK_OP_ADD             ;Check next OP code
00000C74                          1465      
00000C74                          1466  *Supported OP codes
00000C74                          1467  CHECK_OP_ADD:
00000C74  4EB9 000010BC           1468      JSR PRINT_OP_ADD                ;Only remaining OP in $D is ADD at this point
00000C7A  6000 0026               1469      BRA GROUPD_SUCCESS              ;Finish routine
00000C7E                          1470  
00000C7E                          1471  CHECK_OP_ADDA:
Line 1472 ERROR: Undefined symbol
00000C7E  3039 004DBD16           1472      MOVE    CUR_OP_CODE,D0          ;Move current instruction set into D0
00000C84  0240 F0C0               1473      ANDI.W #$F0C0,D0                ;Mask applicable bits
00000C88  B07C D0C0               1474      CMP.W  #$D0C0,D0                ;Compare masked bits
00000C8C  66E6                    1475      BNE    CHECK_OP_ADD             ;Check next OP code
00000C8E  4EB8 0190               1476      JSR    FIND_1_BIT_SIZE_8        ;Size bit to print
00000C92  4EB9 000010D2           1477      JSR    PRINT_OP_ADDA            ;Print out OP code
00000C98  6000 0008               1478      BRA    GROUPD_SUCCESS           ;Finish routine
00000C9C                          1479      
00000C9C                          1480  GROUPD_INVALID:
00000C9C  4EB9 00000E80           1481      JSR INVALID_OP                  ;INVALID OP code found
00000CA2                          1482  GROUPD_SUCCESS:
00000CA2  4CDF 0001               1483      MOVEM.L (SP)+,D0                ;Restore registers from stack
00000CA6  4E75                    1484      RTS                             ;Return to stack
00000CA8                          1485      
00000CA8                          1486  * GROUP_E                     
00000CA8                          1487  ********************************************************************************
00000CA8                          1488  * Description: Check if the following list of OP codes is present or not.
00000CA8                          1489  * Supported:
00000CA8                          1490  * LSR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00000CA8                          1491  * LSL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00000CA8                          1492  * ASR: $E, $0, 8 %0, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00000CA8                          1493  * ASL: $E, $0, 8 %1, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00000CA8                          1494  * ROR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00000CA8                          1495  * ROL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00000CA8                          1496  * Count/Reg for LSR/LSL refers to shift count, where 0 = shift count of 8, 1-7 
00000CA8                          1497  * refers to the respective value when i/r = 0. If i/r = 1, data register in the 
00000CA8                          1498  * Count/Reg field specifies the shift count.  
00000CA8                          1499  * For directional bit at 8, R = 0, L = 1
00000CA8                          1500  * Count/Reg for ROR/ROL specifies rotate count instead of shift count.
00000CA8                          1501  *
00000CA8                          1502  * Split into ROT and NO_ROT groups first to make identifying easier.
00000CA8                          1503  *
00000CA8                          1504  * Register(s) used: D0
00000CA8                          1505  *
00000CA8                          1506  * Precondition: First nibble has been identified as $E
00000CA8                          1507  *
00000CA8                          1508  * Postcondition: Parses proper OP code with a nibble value of $E or finds an
00000CA8                          1509  * invalid OP code.
00000CA8                          1510  *
00000CA8                          1511  * Unsupported: ROXL, ROXR
00000CA8                          1512  ********************************************************************************
00000CA8                          1513  C_GROUP_E:
00000CA8  48E7 8000               1514      MOVEM.L D0,-(SP)
00000CAC                          1515  *Unsupported OP codes
00000CAC                          1516  CHECK_OP_ROXR_NO_ROT:
Line 1517 ERROR: Undefined symbol
00000CAC  3039 004DBD16           1517      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000CB2  0240 FFC0               1518      ANDI.W #$FFC0,D0                ;Mask appropriate bits
00000CB6  B07C E4C0               1519      CMP.W  #$E4C0,D0                ;Compare masked bits
00000CBA  6700 01B0               1520      BEQ    GROUPE_INVALID           ;INVALID OP code
00000CBE  6600 0002               1521      BNE    CHECK_OP_ROXL_NO_ROT     ;Check next OP code
00000CC2                          1522  
00000CC2                          1523  CHECK_OP_ROXL_NO_ROT:
Line 1524 ERROR: Undefined symbol
00000CC2  3039 004DBD16           1524      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000CC8  0240 FFC0               1525      ANDI.W #$FFC0,D0                ;Mask appropriate bits
00000CCC  B07C E5C0               1526      CMP.W  #$E5C0,D0                ;Compare masked bits
00000CD0  6700 019A               1527      BEQ    GROUPE_INVALID           ;INVALID OP code
00000CD4  6600 0002               1528      BNE    CHECK_OP_ROR_NO_ROT      ;Check next OP code
00000CD8                          1529  
00000CD8                          1530  *Supported OP codes
00000CD8                          1531  CHECK_OP_ROR_NO_ROT:
Line 1532 ERROR: Undefined symbol
00000CD8  3039 004DBD16           1532      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000CDE  0240 FFC0               1533      ANDI.W #$FFC0,D0                ;Mask appropriate bits
00000CE2  B07C E6C0               1534      CMP.W  #$E6C0,D0                ;Compare masked bits
00000CE6  6600 000C               1535      BNE    CHECK_OP_ROL_NO_ROT      ;Check next OP code
00000CEA  4EB9 00001156           1536      JSR    PRINT_OP_ROR             ;Print out OP code
00000CF0  6000 0180               1537      BRA    GROUPE_SUCCESS           ;Finish routine
00000CF4                          1538      
00000CF4                          1539  CHECK_OP_ROL_NO_ROT:
Line 1540 ERROR: Undefined symbol
00000CF4  3039 004DBD16           1540      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000CFA  0240 FFC0               1541      ANDI.W #$FFC0,D0                ;Mask appropriate bits
00000CFE  B07C E7C0               1542      CMP.W  #$E7C0,D0                ;Compare masked bits
00000D02  6600 000C               1543      BNE    CHECK_OP_LSR_NO_ROT      ;Check next OP code
00000D06  4EB9 00001140           1544      JSR    PRINT_OP_ROL             ;Print out OP code
00000D0C  6000 0164               1545      BRA    GROUPE_SUCCESS           ;Finish routine
00000D10                          1546   
00000D10                          1547  CHECK_OP_LSR_NO_ROT:
Line 1548 ERROR: Undefined symbol
00000D10  3039 004DBD16           1548      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000D16  0240 FFC0               1549      ANDI.W #$FFC0,D0                ;Mask appropriate bits
00000D1A  B07C E2C0               1550      CMP.W  #$E2C0,D0                ;Compare masked bits
00000D1E  6600 000C               1551      BNE    CHECK_OP_LSL_NO_ROT      ;Check next OP code
00000D22  4EB9 000010FE           1552      JSR    PRINT_OP_LSR             ;Print out OP code
00000D28  6000 0148               1553      BRA    GROUPE_SUCCESS           ;Finish routine
00000D2C                          1554  
00000D2C                          1555  CHECK_OP_LSL_NO_ROT:
Line 1556 ERROR: Undefined symbol
00000D2C  3039 004DBD16           1556      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000D32  0240 FFC0               1557      ANDI.W #$FFC0,D0                ;Mask appropriate bits
00000D36  B07C E3C0               1558      CMP.W  #$E3C0,D0                ;Compare masked bits
00000D3A  6600 000C               1559      BNE    CHECK_OP_ASR_NO_ROT      ;Check next OP code
00000D3E  4EB9 000010E8           1560      JSR    PRINT_OP_LSL             ;Print out OP code
00000D44  6000 012C               1561      BRA    GROUPE_SUCCESS           ;Finish routine
00000D48                          1562  
00000D48                          1563  CHECK_OP_ASR_NO_ROT:
Line 1564 ERROR: Undefined symbol
00000D48  3039 004DBD16           1564      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000D4E  0240 FFC0               1565      ANDI.W #$FFC0,D0                ;Mask appropriate bits
00000D52  B07C E0C0               1566      CMP.W  #$E0C0,D0                ;Compare masked bits
00000D56  6600 000C               1567      BNE    CHECK_OP_ASL_NO_ROT      ;Check next OP code
00000D5A  4EB9 00001114           1568      JSR    PRINT_OP_ASR             ;Print out OP code
00000D60  6000 0110               1569      BRA    GROUPE_SUCCESS           ;Finish routine
00000D64                          1570              
00000D64                          1571  CHECK_OP_ASL_NO_ROT:
Line 1572 ERROR: Undefined symbol
00000D64  3039 004DBD16           1572      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000D6A  0240 FFC0               1573      ANDI.W #$FFC0,D0                ;Mask appropriate bits
00000D6E  B07C E1C0               1574      CMP.W  #$E1C0,D0                ;Compare masked bits
00000D72  6600 000C               1575      BNE    CHECK_OP_ROXR            ;Check next OP code
00000D76  4EB9 0000112A           1576      JSR    PRINT_OP_ASL             Print out OP code
00000D7C  6000 00F4               1577      BRA    GROUPE_SUCCESS           ;Finish routine
00000D80                          1578  
00000D80                          1579  *Unsupported OP codes
00000D80                          1580  CHECK_OP_ROXR:
Line 1581 ERROR: Undefined symbol
00000D80  3039 004DBD16           1581      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000D86  0240 F118               1582      ANDI.W #$F118,D0                ;Mask appropriate bits
00000D8A  B07C E010               1583      CMP.W  #$E010,D0                ;Compare masked bits
00000D8E  6700 00DC               1584      BEQ    GROUPE_INVALID           ;INVALID OP code found
00000D92  6600 0002               1585      BNE    CHECK_OP_ROXL            ;Check next OP code
00000D96                          1586      
00000D96                          1587  CHECK_OP_ROXL:
Line 1588 ERROR: Undefined symbol
00000D96  3039 004DBD16           1588      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000D9C  0240 F118               1589      ANDI.W #$F118,D0                ;Mask appropriate bits
00000DA0  B07C E110               1590      CMP.W  #$E110,D0                ;Compare masked bits
00000DA4  6700 00C6               1591      BEQ    GROUPE_INVALID           ;INVALID OP code found
00000DA8  6600 0002               1592      BNE    CHECK_OP_ROR             ;Check next OP code
00000DAC                          1593      
00000DAC                          1594  *Supported OP codes
00000DAC                          1595  CHECK_OP_ROR:
Line 1596 ERROR: Undefined symbol
00000DAC  3039 004DBD16           1596      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000DB2  0240 F118               1597      ANDI.W #$F118,D0                ;Mask appropriate bits
00000DB6  B07C E018               1598      CMP.W  #$E018,D0                ;Compare masked bits
00000DBA  6600 0010               1599      BNE    CHECK_OP_ROL             ;Check next OP code
00000DBE  4EB8 014C               1600      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Parse size bits
00000DC2  4EB9 00001156           1601      JSR    PRINT_OP_ROR             ;Print out OP code
00000DC8  6000 00A8               1602      BRA    GROUPE_SUCCESS           ;Finish routine
00000DCC                          1603  
00000DCC                          1604  CHECK_OP_ROL:
Line 1605 ERROR: Undefined symbol
00000DCC  3039 004DBD16           1605      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000DD2  0240 F118               1606      ANDI.W #$F118,D0                ;Mask appropriate bits
00000DD6  B07C E118               1607      CMP.W  #$E118,D0                ;Compare masked bits
00000DDA  6600 0010               1608      BNE    CHECK_OP_LSR             ;Check next OP code
00000DDE  4EB8 014C               1609      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Parse size field
00000DE2  4EB9 00001140           1610      JSR    PRINT_OP_ROL             ;Print out OP code
00000DE8  6000 0088               1611      BRA    GROUPE_SUCCESS           ;Finish routine
00000DEC                          1612      
00000DEC                          1613  CHECK_OP_LSR:
Line 1614 ERROR: Undefined symbol
00000DEC  3039 004DBD16           1614      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000DF2  0240 F118               1615      ANDI.W #$F118,D0                ;Mask appropriate bits
00000DF6  B07C E008               1616      CMP.W  #$E008,D0                ;Compare masked bits
00000DFA  6600 0010               1617      BNE    CHECK_OP_LSL             ;Check next OP code
00000DFE  4EB8 014C               1618      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Parse size field
00000E02  4EB9 000010FE           1619      JSR    PRINT_OP_LSR             ;Print out OP code
00000E08  6000 0068               1620      BRA    GROUPE_SUCCESS           ;Finish routine
00000E0C                          1621  
00000E0C                          1622  CHECK_OP_LSL:
Line 1623 ERROR: Undefined symbol
00000E0C  3039 004DBD16           1623      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000E12  0240 F118               1624      ANDI.W #$F118,D0                ;Mask appropriate bits
00000E16  B07C E108               1625      CMP.W  #$E108,D0                ;Compare masked bits
00000E1A  6600 0010               1626      BNE    CHECK_OP_ASR             ;Check next OP code
00000E1E  4EB8 014C               1627      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Parse size field
00000E22  4EB9 000010E8           1628      JSR    PRINT_OP_LSL             ;Print out OP code
00000E28  6000 0048               1629      BRA    GROUPE_SUCCESS           ;Finish routine
00000E2C                          1630  
00000E2C                          1631  CHECK_OP_ASR:
Line 1632 ERROR: Undefined symbol
00000E2C  3039 004DBD16           1632      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000E32  0240 F118               1633      ANDI.W #$F118,D0                ;Mask appropriate bits
00000E36  B07C E000               1634      CMP.W  #$E000,D0                ;Compare masked bits
00000E3A  6600 0010               1635      BNE    CHECK_OP_ASL             ;Check next OP code
00000E3E  4EB8 014C               1636      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Parse size field
00000E42  4EB9 00001114           1637      JSR    PRINT_OP_ASR             ;Print out OP code
00000E48  6000 0028               1638      BRA    GROUPE_SUCCESS           ;Finish routine
00000E4C                          1639  
00000E4C                          1640  CHECK_OP_ASL:
Line 1641 ERROR: Undefined symbol
00000E4C  3039 004DBD16           1641      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000E52  0240 F118               1642      ANDI.W #$F118,D0                ;Mask appropriate bits
00000E56  B07C E100               1643      CMP.W  #$E100,D0                ;Compare masked bits
00000E5A  6600 0010               1644      BNE    GROUPE_INVALID           ;Last possible OP code
00000E5E  4EB8 014C               1645      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Parse size field
00000E62  4EB9 0000112A           1646      JSR    PRINT_OP_ASL             ;Print out OP code
00000E68  6000 0008               1647      BRA    GROUPE_SUCCESS           ;Finish routine
00000E6C                          1648  
00000E6C                          1649  GROUPE_INVALID:
00000E6C  4EB9 00000E80           1650      JSR     INVALID_OP              ;Set IS_VALID to 0
00000E72                          1651  GROUPE_SUCCESS:
00000E72  4CDF 0001               1652      MOVEM.L (SP)+,D0                ;Restore registers from stack
00000E76  4E75                    1653      RTS                             ;Return to stack
00000E78                          1654  * GROUP_F
00000E78                          1655  ********************************************************************************
00000E78                          1656  * Description: One of the few groups that have no OP codes
00000E78                          1657  * Currently no OP codes here are supported. There are no OP codes here
00000E78                          1658  *
00000E78                          1659  * Register(s) used: None
00000E78                          1660  *
00000E78                          1661  * Precondition: Identified nibble value is $F
00000E78                          1662  *
00000E78                          1663  * Postcondition: IS_VALID is set to 0 as there are no OP codes here
00000E78                          1664  ********************************************************************************
00000E78                          1665  C_GROUP_F:
00000E78  4EB9 00000E80           1666      JSR     INVALID_OP              ;Set IS_VALID to 0
00000E7E  4E75                    1667      RTS                             ;Return to stack
00000E80                          1668      
00000E80                          1669  * INVALID_OP                     
00000E80                          1670  ********************************************************************************
00000E80                          1671  * Description: Finds any value that is not covered in the above supported groups 
00000E80                          1672  * and considers it invalid 
00000E80                          1673  * The following values in the first nibble would also indicate that the 
00000E80                          1674  * operand codes is already invalid: $7, $A, $F.
00000E80                          1675  * For unsupported OP codes, display <MEMORY ADDRESS> DATA $<INVALID HEX>   
00000E80                          1676  *
00000E80                          1677  * Register(s) used: None
00000E80                          1678  *
00000E80                          1679  * Precondition: INVALID OP code has been found
00000E80                          1680  *
00000E80                          1681  * Postcondition: IS_VALID is set to 0
00000E80                          1682  ********************************************************************************
00000E80                          1683  INVALID_OP:                         ; ONLY SETS IS_VALID TO 0
Line 1684 ERROR: Undefined symbol
00000E80  13FC 0000 005455C8      1684      MOVE.B #0,IS_VALID              ;Sets IS_VALID to 0
00000E88  4E75                    1685      RTS                             ;Return to stack
00000E8A                          1686  
00000E8A                          1687  ********************** PRINTING ROUTINES **************************************
00000E8A                          1688  * Description: These routines are to print the associated op codes, by placing
00000E8A                          1689  * them in the appropriate area to the buffer
00000E8A                          1690  *
00000E8A                          1691  * Registers used: D0,D1,D2,D3,A0,A1
00000E8A                          1692  *
00000E8A                          1693  * Precondition: The relevant opcode has been identified correctly.
00000E8A                          1694  *
00000E8A                          1695  * Postcondition: Prints out the associated opcode to the buffer.
00000E8A                          1696  *******************************************************************************
00000E8A                          1697  
00000E8A                          1698  * Prints the loaded item into G_BUFFER
00000E8A                          1699  PRINT_TO_BUFFER:
Line 1700 ERROR: Undefined symbol
00000E8A  23FC 004DBD16 005455B8  1700      MOVE.L #G_BUFFER, BUFFER_POINTER
Line 1701 ERROR: Undefined symbol
00000E94  4EB9 004DBD16           1701      JSR AddStrToBuffer
00000E9A  4E75                    1702      RTS
00000E9C                          1703      
00000E9C                          1704  ****************************** GROUP 0 **************************************** 
00000E9C                          1705  PRINT_OP_ORI:
Line 1706 ERROR: Undefined symbol
00000E9C  23FC 000011D8 005455B8  1706      MOVE.L #P_OP_ORI, STRING_BUFFER_POINTER
00000EA6  4EB8 0E8A               1707      JSR PRINT_TO_BUFFER
00000EAA  4EB9 0000119C           1708      JSR PRINT_OP_SIZE
00000EB0  4E75                    1709      RTS
00000EB2                          1710  PRINT_OP_CMPI:
Line 1711 ERROR: Undefined symbol
00000EB2  23FC 000011DF 005455B8  1711      MOVE.L #P_OP_CMPI, STRING_BUFFER_POINTER
00000EBC  4EB8 0E8A               1712      JSR PRINT_TO_BUFFER
00000EC0  4EB9 0000119C           1713      JSR PRINT_OP_SIZE
00000EC6  4E75                    1714      RTS
00000EC8                          1715  PRINT_OP_STATIC_BCLR:
Line 1716 ERROR: Undefined symbol
00000EC8  23FC 000011E7 005455B8  1716      MOVE.L #P_OP_BCLR, STRING_BUFFER_POINTER
00000ED2  4EB8 0E8A               1717      JSR PRINT_TO_BUFFER
00000ED6  4EB9 0000119C           1718      JSR PRINT_OP_SIZE
00000EDC  4E75                    1719      RTS
00000EDE                          1720      
00000EDE                          1721  PRINT_OP_DYNAMIC_BCLR:
Line 1722 ERROR: Undefined symbol
00000EDE  23FC 000011E7 005455B8  1722      MOVE.L #P_OP_BCLR, STRING_BUFFER_POINTER
00000EE8  4EB8 0E8A               1723      JSR PRINT_TO_BUFFER
00000EEC  4EB9 0000119C           1724      JSR PRINT_OP_SIZE
00000EF2  4E75                    1725      RTS
00000EF4                          1726  ******************************* END OF GROUP 0 ********************************
00000EF4                          1727  
00000EF4                          1728  ****************************** GROUP 1 ****************************************    
00000EF4                          1729  PRINT_OP_MOVEB:
Line 1730 ERROR: Undefined symbol
00000EF4  23FC 000011EF 005455B8  1730      MOVE.L #P_OP_MOVEB, STRING_BUFFER_POINTER
00000EFE  4EB8 0E8A               1731      JSR PRINT_TO_BUFFER
00000F02  4E75                    1732      RTS
00000F04                          1733  ******************************* END OF GROUP 1 ********************************
00000F04                          1734      
00000F04                          1735  ****************************** GROUP 2 **************************************** 
00000F04                          1736  PRINT_OP_MOVEA_L:
Line 1737 ERROR: Undefined symbol
00000F04  23FC 000011FA 005455B8  1737      MOVE.L #P_OP_MOVEA_L, STRING_BUFFER_POINTER
00000F0E  4EB8 0E8A               1738      JSR PRINT_TO_BUFFER
00000F12  4E75                    1739      RTS
00000F14                          1740  PRINT_OP_MOVE_L:
Line 1741 ERROR: Undefined symbol
00000F14  23FC 00001206 005455B8  1741      MOVE.L #P_OP_MOVE_L, STRING_BUFFER_POINTER
00000F1E  4EB8 0E8A               1742      JSR PRINT_TO_BUFFER
00000F22  4E75                    1743      RTS
00000F24                          1744  ******************************* END OF GROUP 2 ********************************
00000F24                          1745      
00000F24                          1746  ****************************** GROUP 3 ****************************************    
00000F24                          1747  PRINT_OP_MOVEA_W:
Line 1748 ERROR: Undefined symbol
00000F24  23FC 00001211 005455B8  1748      MOVE.L #P_OP_MOVEA_W, STRING_BUFFER_POINTER
00000F2E  4EB8 0E8A               1749      JSR PRINT_TO_BUFFER
00000F32  4E75                    1750      RTS
00000F34                          1751  PRINT_OP_MOVE_W:
Line 1752 ERROR: Undefined symbol
00000F34  23FC 0000121D 005455B8  1752      MOVE.L #P_OP_MOVE_W, STRING_BUFFER_POINTER
00000F3E  4EB8 0E8A               1753      JSR PRINT_TO_BUFFER
00000F42  4E75                    1754      RTS
00000F44                          1755  ******************************* END OF GROUP 3 ********************************
00000F44                          1756  
00000F44                          1757  ****************************** GROUP 4 ****************************************
00000F44                          1758  PRINT_OP_JSR:
Line 1759 ERROR: Undefined symbol
00000F44  23FC 00001247 005455B8  1759      MOVE.L #P_OP_JSR, STRING_BUFFER_POINTER
00000F4E  4EB8 0E8A               1760      JSR PRINT_TO_BUFFER
00000F52  4E75                    1761      RTS
00000F54                          1762  PRINT_OP_RTS:
Line 1763 ERROR: Undefined symbol
00000F54  23FC 00001255 005455B8  1763      MOVE.L #P_OP_RTS, STRING_BUFFER_POINTER
00000F5E  4EB8 0E8A               1764      JSR PRINT_TO_BUFFER
00000F62  4E75                    1765      RTS
00000F64                          1766  PRINT_OP_NOP:
Line 1767 ERROR: Undefined symbol
00000F64  23FC 0000124E 005455B8  1767      MOVE.L #P_OP_NOP, STRING_BUFFER_POINTER
00000F6E  4EB8 0E8A               1768      JSR PRINT_TO_BUFFER
00000F72  4E75                    1769      RTS
00000F74                          1770  PRINT_OP_LEA:
Line 1771 ERROR: Undefined symbol
00000F74  23FC 00001240 005455B8  1771      MOVE.L #P_OP_LEA, STRING_BUFFER_POINTER
00000F7E  4EB8 0E8A               1772      JSR PRINT_TO_BUFFER
00000F82  4EB9 0000119C           1773      JSR PRINT_OP_SIZE
00000F88  4E75                    1774      RTS
00000F8A                          1775  PRINT_OP_NEG:
Line 1776 ERROR: Undefined symbol
00000F8A  23FC 0000125C 005455B8  1776      MOVE.L #P_OP_NEG, STRING_BUFFER_POINTER
00000F94  4EB8 0E8A               1777      JSR PRINT_TO_BUFFER
00000F98  4EB9 0000119C           1778      JSR PRINT_OP_SIZE
00000F9E  4E75                    1779      RTS
00000FA0                          1780  PRINT_OP_MOVEM_W:
Line 1781 ERROR: Undefined symbol
00000FA0  23FC 00001228 005455B8  1781      MOVE.L #P_OP_MOVEM_W, STRING_BUFFER_POINTER
00000FAA  4EB8 0E8A               1782      JSR PRINT_TO_BUFFER
00000FAE  4E75                    1783      RTS
00000FB0                          1784  PRINT_OP_MOVEM_L:
Line 1785 ERROR: Undefined symbol
00000FB0  23FC 00001234 005455B8  1785      MOVE.L #P_OP_MOVEM_L, STRING_BUFFER_POINTER
00000FBA  4EB8 0E8A               1786      JSR PRINT_TO_BUFFER
00000FBE  4E75                    1787      RTS
00000FC0                          1788  ******************************* END OF GROUP 4 ********************************
00000FC0                          1789      
00000FC0                          1790  ****************************** GROUP 5 ****************************************
00000FC0                          1791  PRINT_OP_SUBQ:
Line 1792 ERROR: Undefined symbol
00000FC0  23FC 00001263 005455B8  1792      MOVE.L #P_OP_SUBQ, STRING_BUFFER_POINTER
00000FCA  4EB8 0E8A               1793      JSR PRINT_TO_BUFFER
00000FCE  4EB9 0000119C           1794      JSR PRINT_OP_SIZE
00000FD4  4E75                    1795      RTS
00000FD6                          1796  ******************************* END OF GROUP 5 ********************************
00000FD6                          1797  
00000FD6                          1798  ****************************** GROUP 6 ****************************************
00000FD6                          1799  PRINT_OP_BCS:
Line 1800 ERROR: Undefined symbol
00000FD6  23FC 00001272 005455B8  1800      MOVE.L #P_OP_BCS, STRING_BUFFER_POINTER
00000FE0  4EB8 0E8A               1801      JSR PRINT_TO_BUFFER
00000FE4  4EB9 0000119C           1802      JSR PRINT_OP_SIZE
00000FEA  4E75                    1803      RTS
00000FEC                          1804  PRINT_OP_BGE:
Line 1805 ERROR: Undefined symbol
00000FEC  23FC 00001279 005455B8  1805      MOVE.L #P_OP_BGE, STRING_BUFFER_POINTER
00000FF6  4EB8 0E8A               1806      JSR PRINT_TO_BUFFER
00000FFA  4EB9 0000119C           1807      JSR PRINT_OP_SIZE
00001000  4E75                    1808      RTS
00001002                          1809  PRINT_OP_BLT:
Line 1810 ERROR: Undefined symbol
00001002  23FC 00001280 005455B8  1810      MOVE.L #P_OP_BLT, STRING_BUFFER_POINTER
0000100C  4EB8 0E8A               1811      JSR PRINT_TO_BUFFER
00001010  4EB9 0000119C           1812      JSR PRINT_OP_SIZE
00001016  4E75                    1813      RTS
00001018                          1814  PRINT_OP_BVC:
Line 1815 ERROR: Undefined symbol
00001018  23FC 00001287 005455B8  1815      MOVE.L #P_OP_BVC, STRING_BUFFER_POINTER
00001022  4EB8 0E8A               1816      JSR PRINT_TO_BUFFER
00001026  4EB9 0000119C           1817      JSR PRINT_OP_SIZE
0000102C  4E75                    1818      RTS
0000102E                          1819  PRINT_OP_BRA:
Line 1820 ERROR: Undefined symbol
0000102E  23FC 0000126B 005455B8  1820      MOVE.L #P_OP_BRA, STRING_BUFFER_POINTER
00001038  4EB8 0E8A               1821      JSR PRINT_TO_BUFFER
0000103C  4EB9 0000119C           1822      JSR PRINT_OP_SIZE
00001042  4E75                    1823      RTS
00001044                          1824  ******************************* END OF GROUP 6 ********************************
00001044                          1825  
00001044                          1826  ****************************** GROUP 7 ****************************************
00001044                          1827  * No currently supported OP codes to print here.
00001044                          1828  ******************************* END OF GROUP 7 ********************************
00001044                          1829  
00001044                          1830  ****************************** GROUP 8 ****************************************
00001044                          1831  PRINT_OP_DIVS:
Line 1832 ERROR: Undefined symbol
00001044  23FC 0000128E 005455B8  1832      MOVE.L #P_OP_DIVS, STRING_BUFFER_POINTER
0000104E  4EB8 0E8A               1833      JSR PRINT_TO_BUFFER
00001052  4E75                    1834      RTS
00001054                          1835  PRINT_OP_OR:
Line 1836 ERROR: Undefined symbol
00001054  23FC 00001299 005455B8  1836      MOVE.L #P_OP_OR, STRING_BUFFER_POINTER
0000105E  4EB8 0E8A               1837      JSR PRINT_TO_BUFFER
00001062  4EB9 0000119C           1838      JSR PRINT_OP_SIZE
00001068  4E75                    1839      RTS
0000106A                          1840  ******************************* END OF GROUP 8 ********************************
0000106A                          1841  
0000106A                          1842  ****************************** GROUP 9 ****************************************
0000106A                          1843  PRINT_OP_SUB:
Line 1844 ERROR: Undefined symbol
0000106A  23FC 0000129F 005455B8  1844      MOVE.L #P_OP_SUB, STRING_BUFFER_POINTER
00001074  4EB8 0E8A               1845      JSR PRINT_TO_BUFFER
00001078  4EB9 0000119C           1846      JSR PRINT_OP_SIZE
0000107E  4E75                    1847      RTS
00001080                          1848  ******************************* END OF GROUP 9 ********************************
00001080                          1849  
00001080                          1850  ****************************** GROUP A ****************************************
00001080                          1851  * No currently supported OP codes to print here.
00001080                          1852  ******************************* END OF GROUP A ********************************
00001080                          1853  
00001080                          1854  ****************************** GROUP B ****************************************
00001080                          1855  PRINT_OP_EOR:
Line 1856 ERROR: Undefined symbol
00001080  23FC 000012A6 005455B8  1856      MOVE.L #P_OP_EOR, STRING_BUFFER_POINTER
0000108A  4EB8 0E8A               1857      JSR PRINT_TO_BUFFER
0000108E  4EB9 0000119C           1858      JSR PRINT_OP_SIZE
00001094  4E75                    1859      RTS
00001096                          1860  PRINT_OP_CMP:
Line 1861 ERROR: Undefined symbol
00001096  23FC 000012AD 005455B8  1861      MOVE.L #P_OP_CMP, STRING_BUFFER_POINTER
000010A0  4EB8 0E8A               1862      JSR PRINT_TO_BUFFER
000010A4  4EB9 0000119C           1863      JSR PRINT_OP_SIZE
000010AA  4E75                    1864      RTS
000010AC                          1865  ******************************* END OF GROUP B ********************************
000010AC                          1866  
000010AC                          1867  ****************************** GROUP C ****************************************
000010AC                          1868  PRINT_OP_MULS:
Line 1869 ERROR: Undefined symbol
000010AC  23FC 000012B4 005455B8  1869      MOVE.L #P_OP_MULS, STRING_BUFFER_POINTER
000010B6  4EB8 0E8A               1870      JSR PRINT_TO_BUFFER
000010BA  4E75                    1871      RTS
000010BC                          1872  ******************************* END OF GROUP C ********************************
000010BC                          1873  
000010BC                          1874  ****************************** GROUP D ****************************************
000010BC                          1875  PRINT_OP_ADD:
Line 1876 ERROR: Undefined symbol
000010BC  23FC 000012C7 005455B8  1876      MOVE.L #P_OP_ADD, STRING_BUFFER_POINTER
000010C6  4EB8 0E8A               1877      JSR PRINT_TO_BUFFER
000010CA  4EB9 0000119C           1878      JSR PRINT_OP_SIZE
000010D0  4E75                    1879      RTS
000010D2                          1880  PRINT_OP_ADDA:
Line 1881 ERROR: Undefined symbol
000010D2  23FC 000012BF 005455B8  1881      MOVE.L #P_OP_ADDA, STRING_BUFFER_POINTER
000010DC  4EB8 0E8A               1882      JSR PRINT_TO_BUFFER
000010E0  4EB9 000011B6           1883      JSR PRINT_OP_SIZE_ADDA
000010E6  4E75                    1884      RTS
000010E8                          1885  
000010E8                          1886  ******************************* END OF GROUP D ********************************
000010E8                          1887  
000010E8                          1888  ****************************** GROUP E ****************************************
000010E8                          1889  PRINT_OP_LSL:
Line 1890 ERROR: Undefined symbol
000010E8  23FC 000012D5 005455B8  1890      MOVE.L #P_OP_LSL, STRING_BUFFER_POINTER
000010F2  4EB8 0E8A               1891      JSR PRINT_TO_BUFFER
000010F6  4EB9 0000119C           1892      JSR PRINT_OP_SIZE
000010FC  4E75                    1893      RTS
000010FE                          1894  PRINT_OP_LSR:
Line 1895 ERROR: Undefined symbol
000010FE  23FC 000012CE 005455B8  1895      MOVE.L #P_OP_LSR, STRING_BUFFER_POINTER
00001108  4EB8 0E8A               1896      JSR PRINT_TO_BUFFER
0000110C  4EB9 0000119C           1897      JSR PRINT_OP_SIZE
00001112  4E75                    1898      RTS
00001114                          1899  PRINT_OP_ASR:
Line 1900 ERROR: Undefined symbol
00001114  23FC 000012DC 005455B8  1900      MOVE.L #P_OP_ASR, STRING_BUFFER_POINTER
0000111E  4EB8 0E8A               1901      JSR PRINT_TO_BUFFER
00001122  4EB9 0000119C           1902      JSR PRINT_OP_SIZE
00001128  4E75                    1903      RTS
0000112A                          1904  PRINT_OP_ASL:
Line 1905 ERROR: Undefined symbol
0000112A  23FC 000012E3 005455B8  1905      MOVE.L #P_OP_ASL, STRING_BUFFER_POINTER
00001134  4EB8 0E8A               1906      JSR PRINT_TO_BUFFER
00001138  4EB9 0000119C           1907      JSR PRINT_OP_SIZE
0000113E  4E75                    1908      RTS
00001140                          1909  PRINT_OP_ROL:
Line 1910 ERROR: Undefined symbol
00001140  23FC 000012F1 005455B8  1910      MOVE.L #P_OP_ROL, STRING_BUFFER_POINTER
0000114A  4EB8 0E8A               1911      JSR PRINT_TO_BUFFER
0000114E  4EB9 0000119C           1912      JSR PRINT_OP_SIZE
00001154  4E75                    1913      RTS
00001156                          1914  PRINT_OP_ROR:
Line 1915 ERROR: Undefined symbol
00001156  23FC 000012EA 005455B8  1915      MOVE.L #P_OP_ROR, STRING_BUFFER_POINTER
00001160  4EB8 0E8A               1916      JSR PRINT_TO_BUFFER
00001164  4EB9 0000119C           1917      JSR PRINT_OP_SIZE
0000116A  4E75                    1918      RTS
0000116C                          1919  ******************************* END OF GROUP E ********************************
0000116C                          1920  
0000116C                          1921  ****************************** GROUP F ****************************************
0000116C                          1922  * No currently supported OP codes to print here.
0000116C                          1923  ******************************* END OF GROUP F ********************************
0000116C                          1924  
0000116C                          1925  ****************************** SIZE PRINTS ************************************
0000116C                          1926  PRINT_SIZE_BYTE:
Line 1927 ERROR: Undefined symbol
0000116C  23FC 000011CC 005455B8  1927      MOVE.L #P_SIZE_B, STRING_BUFFER_POINTER
00001176  4EB8 0E8A               1928      JSR PRINT_TO_BUFFER
0000117A  4E75                    1929      RTS    
0000117C                          1930  
0000117C                          1931  PRINT_SIZE_WORD:
Line 1932 ERROR: Undefined symbol
0000117C  23FC 000011D0 005455B8  1932      MOVE.L #P_SIZE_W, STRING_BUFFER_POINTER
00001186  4EB8 0E8A               1933      JSR PRINT_TO_BUFFER
0000118A  4E75                    1934      RTS
0000118C                          1935      
0000118C                          1936  PRINT_SIZE_LONG:
Line 1937 ERROR: Undefined symbol
0000118C  23FC 000011D4 005455B8  1937      MOVE.L #P_SIZE_L, STRING_BUFFER_POINTER
00001196  4EB8 0E8A               1938      JSR PRINT_TO_BUFFER
0000119A  4E75                    1939      RTS
0000119C                          1940  
0000119C                          1941  PRINT_OP_SIZE:                      ;Prints current OP code byte size if applicable
0000119C  0C38 0000 0000          1942      CMP.B  #%00,OP_SIZE             ;Checks for byte size
000011A2  67C8                    1943      BEQ    PRINT_SIZE_BYTE          ;Print .B to buffer
000011A4  0C38 0001 0000          1944      CMP.B  #%01,OP_SIZE             ;Check for word size
000011AA  67D0                    1945      BEQ    PRINT_SIZE_WORD          ;Print .W to buffer
000011AC  0C38 0002 0000          1946      CMP.B  #%10,OP_SIZE             ;Check for long size
000011B2  67D8                    1947      BEQ    PRINT_SIZE_LONG          ;Print .L to buffer
000011B4  4E75                    1948      RTS
000011B6                          1949      
000011B6                          1950  PRINT_OP_SIZE_ADDA:                 ;Special  print for ADDA
000011B6  0C38 0000 0000          1951      CMP.B #%0,OP_SIZE               ;Checks if the OP_SIZE is 0
000011BC  67BE                    1952      BEQ    PRINT_SIZE_WORD          ;If it is the size is word
000011BE  66CC                    1953      BNE    PRINT_SIZE_LONG          ;If it's not the size is long
000011C0                          1954      
000011C0                          1955  ******************* END OF SIZE PRINTS ****************************************
000011C0                          1956  
000011C0                          1957  ******************* END OF PRINTING ROUTINES **********************************
000011C0                          1958  
000011C0                          1959  ******************* END OF JMP LABELS *****************************************
000011C0                          1960  
000011C0                          1961  ******************* DATA CONSTANT PRINTS **************************************
000011C0                          1962  * Formatting is as follows: P_OP_<OPCODE>, where P = Print, OP = Operation,
000011C0                          1963  * <OPCODE> is any valid operand
000011C0                          1964  
000011C0= 20 20 20 44 41 54 ...   1965  P_INVALID_OP    DC.B    '   DATA   $',0
000011CC= 2E 42 20 00             1966  P_SIZE_B        DC.B    '.B ',0
000011D0= 2E 57 20 00             1967  P_SIZE_W        DC.B    '.W ',0
000011D4= 2E 4C 20 00             1968  P_SIZE_L        DC.B    '.L ',0
000011D8= 20 20 20 4F 52 49 00    1969  P_OP_ORI        DC.B    '   ORI',0
000011DF= 20 20 20 43 4D 50 ...   1970  P_OP_CMPI       DC.B    '   CMPI',0
000011E7= 20 20 20 42 43 4C ...   1971  P_OP_BCLR       DC.B    '   BCLR',0
000011EF= 20 20 20 4D 4F 56 ...   1972  P_OP_MOVEB      DC.B    '   MOVE.B ',0
000011FA= 20 20 20 4D 4F 56 ...   1973  P_OP_MOVEA_L    DC.B    '   MOVEA.L ',0 
00001206= 20 20 20 4D 4F 56 ...   1974  P_OP_MOVE_L     DC.B    '   MOVE.L ',0
00001211= 20 20 20 4D 4F 56 ...   1975  P_OP_MOVEA_W    DC.B    '   MOVEA.W ',0
0000121D= 20 20 20 4D 4F 56 ...   1976  P_OP_MOVE_W     DC.B    '   MOVE.W ',0
00001228= 20 20 20 4D 4F 56 ...   1977  P_OP_MOVEM_W    DC.B    '   MOVEM.W ',0
00001234= 20 20 20 4D 4F 56 ...   1978  P_OP_MOVEM_L    DC.B    '   MOVEM.L ',0
00001240= 20 20 20 4C 45 41 00    1979  P_OP_LEA        DC.B    '   LEA',0
00001247= 20 20 20 4A 53 52 00    1980  P_OP_JSR        DC.B    '   JSR',0
0000124E= 20 20 20 4E 4F 50 00    1981  P_OP_NOP        DC.B    '   NOP',0
00001255= 20 20 20 52 54 53 00    1982  P_OP_RTS        DC.B    '   RTS',0
0000125C= 20 20 20 4E 45 47 00    1983  P_OP_NEG        DC.B    '   NEG',0
00001263= 20 20 20 53 55 42 ...   1984  P_OP_SUBQ       DC.B    '   SUBQ',0
0000126B= 20 20 20 42 52 41 00    1985  P_OP_BRA        DC.B    '   BRA',0
00001272= 20 20 20 42 43 53 00    1986  P_OP_BCS        DC.B    '   BCS',0
00001279= 20 20 20 42 47 45 00    1987  P_OP_BGE        DC.B    '   BGE',0
00001280= 20 20 20 42 4C 54 00    1988  P_OP_BLT        DC.B    '   BLT',0
00001287= 20 20 20 42 56 43 00    1989  P_OP_BVC        DC.B    '   BVC',0
0000128E= 20 20 20 44 49 56 ...   1990  P_OP_DIVS       DC.B    '   DIVS.W ',0
00001299= 20 20 20 4F 52 00       1991  P_OP_OR         DC.B    '   OR',0
0000129F= 20 20 20 53 55 42 00    1992  P_OP_SUB        DC.B    '   SUB',0
000012A6= 20 20 20 45 4F 52 00    1993  P_OP_EOR        DC.B    '   EOR',0
000012AD= 20 20 20 43 4D 50 00    1994  P_OP_CMP        DC.B    '   CMP',0
000012B4= 20 20 20 4D 55 4C ...   1995  P_OP_MULS       DC.B    '   MULS.W ',0
000012BF= 20 20 20 41 44 44 ...   1996  P_OP_ADDA       DC.B    '   ADDA',0
000012C7= 20 20 20 41 44 44 00    1997  P_OP_ADD        DC.B    '   ADD',0
000012CE= 20 20 20 4C 53 52 00    1998  P_OP_LSR        DC.B    '   LSR',0
000012D5= 20 20 20 4C 53 4C 00    1999  P_OP_LSL        DC.B    '   LSL',0
000012DC= 20 20 20 41 53 52 00    2000  P_OP_ASR        DC.B    '   ASR',0
000012E3= 20 20 20 41 53 4C 00    2001  P_OP_ASL        DC.B    '   ASL',0
000012EA= 20 20 20 52 4F 52 00    2002  P_OP_ROR        DC.B    '   ROR',0
000012F1= 20 20 20 52 4F 4C 00    2003  P_OP_ROL        DC.B    '   ROL',0
000012F8                          2004  ***************** END OF DATA CONSTANT PRINTS ***********************************
000012F8                          2005  
000012F8                          2006  
000012F8                          2007  
Line 2008 WARNING: END directive missing, starting address not set

174 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BIT_CHECK_EXG       BE8
BIT_CHECK_EXT       66A
BIT_CHECK_MOVEP     3A8
BIT_CHECK_SUBX      AF6
BIT_SIZE_CHECK      C46
CHECK_OP_ABCD       BCE
CHECK_OP_ADD        C74
CHECK_OP_ADDA       C7E
CHECK_OP_ADDI       2F8
CHECK_OP_ADDQ       88C
CHECK_OP_ADDX       C5E
CHECK_OP_AND        C24
CHECK_OP_ANDI       2CC
CHECK_OP_ANDI_TO_CCR  284
CHECK_OP_ANDI_TO_SR  296
CHECK_OP_ASL        E4C
CHECK_OP_ASL_NO_ROT  D64
CHECK_OP_ASR        E2C
CHECK_OP_ASR_NO_ROT  D48
CHECK_OP_BCC        8FE
CHECK_OP_BCS        9B4
CHECK_OP_BEQ        914
CHECK_OP_BGE        9D0
CHECK_OP_BGT        8E8
CHECK_OP_BHI        92A
CHECK_OP_BLS        940
CHECK_OP_BLT        9EC
CHECK_OP_BMI        956
CHECK_OP_BNE        96C
CHECK_OP_BPL        982
CHECK_OP_BRA        998
CHECK_OP_BSR        8D2
CHECK_OP_BVC        A08
CHECK_OP_CHK        762
CHECK_OP_CLR        628
CHECK_OP_CMP        B88
CHECK_OP_CMPA       B52
CHECK_OP_CMPI       3FA
CHECK_OP_CMPM       B3C
CHECK_OP_DBCC       860
CHECK_OP_DIVS       A82
CHECK_OP_DIVU       A56
CHECK_OP_DYNAMIC_BCHG  37C
CHECK_OP_DYNAMIC_BCLR  43A
CHECK_OP_DYNAMIC_BSET  392
CHECK_OP_DYNAMIC_BTST  366
CHECK_OP_EOR        B68
CHECK_OP_EORI       30E
CHECK_OP_EORI_TO_CCR  2A8
CHECK_OP_EORI_TO_SR  2BA
CHECK_OP_EXG        BE4
CHECK_OP_EXT        654
CHECK_OP_ILLEGAL    588
CHECK_OP_JMP        74C
CHECK_OP_JSR        7C4
CHECK_OP_LEA        7A8
CHECK_OP_LINK       70A
CHECK_OP_LSL        E0C
CHECK_OP_LSL_NO_ROT  D2C
CHECK_OP_LSR        DEC
CHECK_OP_LSR_NO_ROT  D10
CHECK_OP_MOVEA_L    496
CHECK_OP_MOVEA_W    4FE
CHECK_OP_MOVEM_L    834
CHECK_OP_MOVEM_W    818
CHECK_OP_MOVEP      3C4
CHECK_OP_MOVEQ      A34
CHECK_OP_MOVE_B     46A
CHECK_OP_MOVE_FROM_SR  5D0
CHECK_OP_MOVE_L     4D2
CHECK_OP_MOVE_TO_CCR  5E6
CHECK_OP_MOVE_TO_SR  5FC
CHECK_OP_MOVE_USP   736
CHECK_OP_MOVE_W     53A
CHECK_OP_MULS       C08
CHECK_OP_MULU       BB8
CHECK_OP_NBCD       686
CHECK_OP_NEG        7E0
CHECK_OP_NEGX       612
CHECK_OP_NOP        778
CHECK_OP_NOT        63E
CHECK_OP_OR         A9E
CHECK_OP_ORI        3DA
CHECK_OP_ORI_TO_CCR  260
CHECK_OP_ORI_TO_SR  272
CHECK_OP_PEA        6B2
CHECK_OP_RESET      576
CHECK_OP_ROL        DCC
CHECK_OP_ROL_NO_ROT  CF4
CHECK_OP_ROR        DAC
CHECK_OP_ROR_NO_ROT  CD8
CHECK_OP_ROXL       D96
CHECK_OP_ROXL_NO_ROT  CC2
CHECK_OP_ROXR       D80
CHECK_OP_ROXR_NO_ROT  CAC
CHECK_OP_RTE        59A
CHECK_OP_RTR        5BE
CHECK_OP_RTS        790
CHECK_OP_SBCD       A6C
CHECK_OP_SCC        876
CHECK_OP_STATIC_BCHG  33A
CHECK_OP_STATIC_BCLR  41A
CHECK_OP_STATIC_BSET  350
CHECK_OP_STATIC_BTST  324
CHECK_OP_STOP       564
CHECK_OP_SUB        B16
CHECK_OP_SUBA       ACE
CHECK_OP_SUBI       2E2
CHECK_OP_SUBQ       8A2
CHECK_OP_SUBX       AE4
CHECK_OP_SWAP       69C
CHECK_OP_TAS        6C8
CHECK_OP_TRAP       6F4
CHECK_OP_TRAPV      5AC
CHECK_OP_TST        6DE
CHECK_OP_UNLK       720
CHECK_SIZE_BIT_FOR_SUB  ABC
C_GROUP_0           25C
C_GROUP_1           466
C_GROUP_2           492
C_GROUP_3           4FA
C_GROUP_4           562
C_GROUP_5           85C
C_GROUP_6           8CE
C_GROUP_7           A30
C_GROUP_8           A52
C_GROUP_9           AB8
C_GROUP_A           B30
C_GROUP_B           B38
C_GROUP_C           BB4
C_GROUP_D           C42
C_GROUP_E           CA8
C_GROUP_F           E78
FIND_1_BIT_SIZE_6   16E
FIND_1_BIT_SIZE_8   190
FIND_2_BIT_SIZE_7_TO_6  14C
FIND_MOVEA_L_DIFFERENCE  4AA
FIND_MOVEA_W_DIFF   512
FIRST_3             2
FOURTH_3            5
GROUP0_INVALID      45A
GROUP0_SUCCESS      460
GROUP1_INVALID      486
GROUP1_SUCCESS      48C
GROUP2_INVALID      4EE
GROUP2_SUCCESS      4F4
GROUP3_INVALID      556
GROUP3_SUCCESS      55C
GROUP4_INVALID      850
GROUP4_SUCCESS      856
GROUP5_INVALID      8C2
GROUP5_SUCCESS      8C8
GROUP6_INVALID      A24
GROUP6_SUCCESS      A2A
GROUP7_INVALID      A46
GROUP7_SUCCESS      A4C
GROUP8_INVALID      AAC
GROUP8_SUCCESS      AB2
GROUP9_INVALID      B24
GROUP9_SUCCESS      B2A
GROUPB_INVALID      BA8
GROUPB_SUCCESS      BAE
GROUPC_INVALID      C36
GROUPC_SUCCESS      C3C
GROUPD_INVALID      C9C
GROUPD_SUCCESS      CA2
GROUPE_INVALID      E6C
GROUPE_SUCCESS      E72
GROUP_0             1C
GROUP_1             2E
GROUP_2             40
GROUP_3             52
GROUP_4             64
GROUP_5             76
GROUP_6             88
GROUP_7             9A
GROUP_8             AC
GROUP_9             BE
GROUP_A             D0
GROUP_B             E2
GROUP_C             F4
GROUP_D             106
GROUP_E             118
GROUP_F             12A
INVALID_OP          E80
MNEMONIC            1
MOVEM_BIT_SIZE_CHECK  800
MOVE_AND_MOVEA_PARSE_EA  1B2
OP_JSR_DONE         138
OP_JSR_ROUTINE      6
OP_SIZE             0
PARSE_EA_CONSTANT_BITS  1FC
PRINT_OP_ADD        10BC
PRINT_OP_ADDA       10D2
PRINT_OP_ASL        112A
PRINT_OP_ASR        1114
PRINT_OP_BCS        FD6
PRINT_OP_BGE        FEC
PRINT_OP_BLT        1002
PRINT_OP_BRA        102E
PRINT_OP_BVC        1018
PRINT_OP_CMP        1096
PRINT_OP_CMPI       EB2
PRINT_OP_DIVS       1044
PRINT_OP_DYNAMIC_BCLR  EDE
PRINT_OP_EOR        1080
PRINT_OP_JSR        F44
PRINT_OP_LEA        F74
PRINT_OP_LSL        10E8
PRINT_OP_LSR        10FE
PRINT_OP_MOVEA_L    F04
PRINT_OP_MOVEA_W    F24
PRINT_OP_MOVEB      EF4
PRINT_OP_MOVEM_L    FB0
PRINT_OP_MOVEM_W    FA0
PRINT_OP_MOVE_L     F14
PRINT_OP_MOVE_W     F34
PRINT_OP_MULS       10AC
PRINT_OP_NEG        F8A
PRINT_OP_NOP        F64
PRINT_OP_OR         1054
PRINT_OP_ORI        E9C
PRINT_OP_ROL        1140
PRINT_OP_ROR        1156
PRINT_OP_RTS        F54
PRINT_OP_SIZE       119C
PRINT_OP_SIZE_ADDA  11B6
PRINT_OP_STATIC_BCLR  EC8
PRINT_OP_SUB        106A
PRINT_OP_SUBQ       FC0
PRINT_SIZE_BYTE     116C
PRINT_SIZE_LONG     118C
PRINT_SIZE_WORD     117C
PRINT_TO_BUFFER     E8A
P_INVALID_OP        11C0
P_OP_ADD            12C7
P_OP_ADDA           12BF
P_OP_ASL            12E3
P_OP_ASR            12DC
P_OP_BCLR           11E7
P_OP_BCS            1272
P_OP_BGE            1279
P_OP_BLT            1280
P_OP_BRA            126B
P_OP_BVC            1287
P_OP_CMP            12AD
P_OP_CMPI           11DF
P_OP_DIVS           128E
P_OP_EOR            12A6
P_OP_JSR            1247
P_OP_LEA            1240
P_OP_LSL            12D5
P_OP_LSR            12CE
P_OP_MOVEA_L        11FA
P_OP_MOVEA_W        1211
P_OP_MOVEB          11EF
P_OP_MOVEM_L        1234
P_OP_MOVEM_W        1228
P_OP_MOVE_L         1206
P_OP_MOVE_W         121D
P_OP_MULS           12B4
P_OP_NEG            125C
P_OP_NOP            124E
P_OP_OR             1299
P_OP_ORI            11D8
P_OP_ROL            12F1
P_OP_ROR            12EA
P_OP_RTS            1255
P_OP_SUB            129F
P_OP_SUBQ           1263
P_SIZE_B            11CC
P_SIZE_L            11D4
P_SIZE_W            11D0
SECOND_3            3
THIRD_3             4
