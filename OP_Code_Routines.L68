000010BC Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/13/2019 5:08:04 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OP Code routines for Disassembler
00000000                             3  * Written by : Daniel Yan
00000000                             4  * Date       : 2/28/2019, Updated 3/12/2019
00000000                             5  
00000000                             6  * Description: Disassembler routines to identify any valid
00000000                             7  * OP code dependent on current supported list.
00000000                             8  *------------------------------------------------------------
00001000                             9    ORG $1000 ; Start at Address $1000
00001000                            10  CUR_OP_CODE DS.W 1  ; Current OP Code Word
00001002                            11  EA_SIZE     DS.B 1
00001003                            12  G_BUFFER    DS.B 80
00001053                            13  B_BUFFER    DS.B 80
000010A3                            14  MNEMONIC    DS.B 1
000010A4                            15  FIRST_3     DS.B 1
000010A5                            16  SECOND_3    DS.B 1
000010A6                            17  THIRD_3     DS.B 1
000010A7                            18  FOURTH_3    DS.B 1
000010A8                            19  
000010A8= 4D4F5645 412E4C00 ...     20  P_OP_MOVEA_L_T  DC.L    'MOVEA.L',0
000010B4= 412E4C00 00000000         21  P_OP_MOVEA_L_A_L DC.L   'A.L',0
000010BC                            22      
000010BC                            23  
000010BC                            24  START
000010BC  49F8 1003                 25      LEA G_BUFFER,A4
000010C0  18BC 0000                 26      MOVE.B #0, (A4)
000010C4                            27      
000010C4                            28      ;MOVE.L (A5)+, D0
000010C4                            29  ************** BUFFER PRINTING/LOADING EXAMPLES *************************************
000010C4                            30      ; Load the message onto A4
000010C4                            31      ;MOVE.L #P_OP_MOVEA_L_T, Arg_AddStrToBuffer_String
000010C4                            32      ;MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer 
000010C4                            33      ;JSR AddStrToBuffer
000010C4                            34      ;LEA G_BUFFER, A4   ; Load the value of the message onto the G_BUFFER
000010C4                            35      ;MOVE.L P_OP_MOVEA_L_T,(A4)+
000010C4                            36      ;MOVE.L P_OP_MOVEA_L_A_L,(A4)+
000010C4                            37      
000010C4                            38  ***************************** Input Tests ********************************************
000010C4                            39      ***GROUP 0 tests**** SUPPORTED: ORI, BCLR (static, dynamic), CMPI
000010C4                            40      ;MOVE.W #%0000000000111100,CUR_OP_CODE      ;ORI TO CCR             SHOULD FAIL
000010C4                            41      ;MOVE.W #%0000000001111100,CUR_OP_CODE      ;ORI TO SR              SHOULD FAIL
000010C4                            42      ;MOVE.W #%0000000010000101,CUR_OP_CODE      ;ORI.W D5               SHOULD PASS
000010C4                            43      ;MOVE.W #%0000001001111100,CUR_OP_CODE      ;ANDI TO CCR            SHOULD FAIL
000010C4                            44      ;MOVE.W #%0000001001111100,CUR_OP_CODE      ;ANDI TO SR             SHOULD FAIL
000010C4                            45      ;MOVE.W #%0000001010000101,CUR_OP_CODE      ;ANDI.W D5              SHOULD FAIL
000010C4                            46      ;MOVE.W #%0000010010000101,CUR_OP_CODE      ;SUBI.W D5              SHOULD FAIL
000010C4                            47      ;MOVE.W #%0000011010000101,CUR_OP_CODE      ;ADDI.W D5              SHOULD FAIL
000010C4                            48      ;MOVE.W #%0000101000111100,CUR_OP_CODE      ;EORI TO CCR            SHOULD FAIL
000010C4                            49      ;MOVE.W #%0000101001111100,CUR_OP_CODE      ;EORI TO SR             SHOULD FAIL
000010C4                            50      ;MOVE.W #%0000101010000101,CUR_OP_CODE      ;EORI.W D5              SHOULD FAIL
000010C4                            51      ;MOVE.W #%0000110010000101,CUR_OP_CODE      ;CMPI.L D5              SHOULD PASS
000010C4                            52      ;MOVE.W #%0000100000000101,CUR_OP_CODE      ;STATIC BTST.B D5       SHOULD FAIL
000010C4                            53      ;MOVE.W #%0000100001000101,CUR_OP_CODE      ;STATIC BCHG.B D5       SHOULD FAIL
000010C4                            54      ;MOVE.W #%0000100010000101,CUR_OP_CODE      ;STATIC BCLR D5         SHOULD PASS
000010C4                            55      ;MOVE.W #%0000100011000101,CUR_OP_CODE      ;STATIC BSET.B D5       SHOULD FAIL
000010C4                            56      ;MOVE.W #%0000111100000101,CUR_OP_CODE      ;DYNAMIC BTST.B D7,D5   SHOULD FAIL
000010C4                            57      ;MOVE.W #%0000111101000101,CUR_OP_CODE      ;DYNAMIC BCHG.B,D7,D5   SHOULD FAIL
000010C4                            58      ;MOVE.W #%0000101110000111,CUR_OP_CODE      ;DYNAMIC BCLR.B D7,D5   SHOULD PASS
000010C4                            59      ;MOVE.W #%0000111111000101,CUR_OP_CODE      ;DYNAMIC BSET.B D7,D5   SHOULD FAIL
000010C4                            60      ;MOVE.W #%0000111111001101,CUR_OP_CODE      ;MOVEP.L MEM TO REG, A5 SHOULD FAIL, MADE A SPECIAL CASE FOR DYNAMIC BSET BIT SHIFTING
000010C4                            61          
000010C4                            62      ***GROUP 1 tests**** SUPPORTED: MOVE.B
000010C4                            63      ;MOVE.W #%0001101000000111,CUR_OP_CODE       ;MOVE.B D5,D7           SHOULD PASS
000010C4                            64      
000010C4                            65      ***GROUP 2 tests**** SUPPORTED: MOVEA.L, MOVE.L
000010C4                            66      ;MOVE.W #%0010101000000111,CUR_OP_CODE       ;MOVE.L D5,D7           SHOULD PASS
000010C4                            67      ;MOVE.W #%0010101001000111,CUR_OP_CODE       ;MOVEA.L D5,D7          SHOULD PASS
000010C4                            68          
000010C4                            69      ***GROUP 3 tests**** SUPPORTED: MOVEA.W, MOVE.W
000010C4                            70      ;MOVE.W #%0011101000000111,CUR_OP_CODE       ;MOVE.W D5,D7           SHOULD PASS
000010C4                            71      ;MOVE.W #%0011101001000111,CUR_OP_CODE       ;MOVEA.W D5,D7          SHOULD PASS
000010C4                            72      
000010C4                            73      ****GROUP 4 tests**** SUPPORTED: LEA, JSR, RTS, NEG, MOVEM  
000010C4                            74      ;MOVE.W #%0100000011000101,CUR_OP_CODE       ;MOVE_FROM_SR           SHOULD FAIL
000010C4                            75      ;MOVE.W #%0100010011000101,CUR_OP_CODE       ;MOVE_TO_CCR            SHOULD FAIL
000010C4                            76      ;MOVE.W #%0100011011000101,CUR_OP_CODE       ;MOVE_TO_SR             SHOULD FAIL
000010C4                            77      ;MOVE.W #%0100000010000101,CUR_OP_CODE       ;NEGX                   SHOULD FAIL
000010C4                            78      ;MOVE.W #%0100001010000101,CUR_OP_CODE       ;CLR                    SHOULD FAIL
000010C4                            79      ;MOVE.W #%0100010001000101,CUR_OP_CODE       ;NEG                    SHOULD PASS
000010C4                            80      ;MOVE.W #%0100011010000101,CUR_OP_CODE       ;NOT                    SHOULD FAIL
000010C4                            81      ;MOVE.W #%0100100011000101,CUR_OP_CODE       ;EXT                    SHOULD FAIL
000010C4                            82      ;MOVE.W #%0100100000000101,CUR_OP_CODE       ;NBCD                   SHOULD FAIL
000010C4                            83      ;MOVE.W #%0100100001000101,CUR_OP_CODE       ;SWAP                   SHOULD FAIL
000010C4                            84      ;MOVE.W #%0100100001000101,CUR_OP_CODE       ;PEA                    SHOULD FAIL
000010C4                            85      ;MOVE.W #%0100101011111100,CUR_OP_CODE       ;ILLEGAL                SHOULD FAIL
000010C4                            86      ;MOVE.W #%0100101011000101,CUR_OP_CODE       ;TAS                    SHOULD FAIL
000010C4                            87      ;MOVE.W #%0100101010000101,CUR_OP_CODE       ;TST                    SHOULD FAIL
000010C4                            88      ;MOVE.W #%0100111001000111,CUR_OP_CODE       ;TRAP                   SHOULD FAIL
000010C4                            89      ;MOVE.W #%0100111001010101,CUR_OP_CODE       ;LINK                   SHOULD FAIL
000010C4                            90      ;MOVE.W #%0100111001011101,CUR_OP_CODE       ;UNLK                   SHOULD FAIL
000010C4                            91      ;MOVE.W #%0100111001101101,CUR_OP_CODE       ;MOVE_USP               SHOULD FAIL
000010C4                            92      ;MOVE.W #%0100111001110000,CUR_OP_CODE       ;RESET                  SHOULD FAIL
000010C4                            93      ;MOVE.W #%0100111001110001,CUR_OP_CODE       ;NOP                    SHOULD FAIL
000010C4                            94      ;MOVE.W #%0100111001110010,CUR_OP_CODE       ;STOP                   SHOULD FAIL
000010C4                            95      ;MOVE.W #%0100111001110011,CUR_OP_CODE       ;RTE                    SHOULD FAIL
000010C4                            96      ;MOVE.W #%0100111001110101,CUR_OP_CODE       ;RTS                    SHOULD PASS
000010C4                            97      ;MOVE.W #%0100111001110110,CUR_OP_CODE       ;TRAPV                  SHOULD FAIL
000010C4                            98      ;MOVE.W #%0100111001110111,CUR_OP_CODE       ;RTR                    SHOULD FAIL
000010C4                            99      ;MOVE.W #%0100111010000101,CUR_OP_CODE       ;JSR                    SHOULD PASS
000010C4                           100      ;MOVE.W #%0100111011000101,CUR_OP_CODE       ;JMP                    SHOULD FAIL
000010C4                           101      ;MOVE.W #%0100000110000101,CUR_OP_CODE       ;CHK                    SHOULD FAIL
000010C4  31FC 488E 1000           102      MOVE.W #$488E,CUR_OP_CODE                   ;MOVEM.W Reg to Mem,A6  SHOULD PASS
000010CA                           103      ;MOVE.W #$4C8E,CUR_OP_CODE                   ;MOVEM.W Mem to Reg,A6  SHOULD PASS
000010CA                           104      
000010CA                           105      ;MOVE.W #$4E75,CUR_OP_CODE                   ;RTS                    SHOULD PASS
000010CA                           106      ;MOVE.W #$4E71,CUR_OP_CODE                   ;NOP                    SHOULD FAIL
000010CA                           107      ;MOVE.W #$4415,CUR_OP_CODE                   ;NEG.L D5               SHOULD PASS
000010CA                           108      ;MOVE.W #$43CC,CUR_OP_CODE                   ;LEA A1,A6              SHOULD PASS
000010CA                           109      ;MOVE.W #%0100100010001110,CUR_OP_CODE
000010CA                           110      ;MOVE.W #$4E95,CUR_OP_CODE                   ;JSR (A5)               SHOULD PASS
000010CA                           111               
000010CA                           112      
000010CA                           113      *****GROUP 5 TESTS**** SUPPORTED: SUBQ
000010CA                           114      *MOVE.W #%0101110010000101,CUR_OP_CODE        ;ADDQ
000010CA                           115      *MOVE.W #%0101110110000101,CUR_OP_CODE        ;SUBQ
000010CA                           116      *MOVE.W #%0101101011000101,CUR_OP_CODE        Scc (SPL)
000010CA                           117      *MOVE.W #%0101101011001101,CUR_OP_CODE        DBcc (DCPL) this may need a custom parse
000010CA                           118      
000010CA                           119      ******GROUP 5 VALIDATION TESTS**********
000010CA                           120      *MOVE.W #%0101111000001110,CUR_OP_CODE  ; ADDQ
000010CA                           121      *MOVE.W #%0101010011000110,CUR_OP_CODE ; Scc
000010CA                           122      *MOVE.W #%0101010011001110,CUR_OP_CODE ; DBcc
000010CA                           123     
000010CA                           124      *****GROUP 6 TESTS********* SUPPORTED: BCS,BGE,BLT,BVC
000010CA                           125      ; DISPLACEMENT, $00 is 16 bits, $FF is 32 bits
000010CA                           126      ; DISPLACEMENT = Last 8 bits
000010CA                           127      ;MOVE.W #%0110000001010101,CUR_OP_CODE   ;BRA
000010CA                           128      *MOVE.W #%0110000110101010,CUR_OP_CODE   ;BSR
000010CA                           129      ;MOVE.W #%0110010100000001,CUR_OP_CODE   ;BCS
000010CA                           130      ;MOVE.W #%0110110001010100,CUR_OP_CODE   ;BGE
000010CA                           131      ;MOVE.W #%0110110110101010,CUR_OP_CODE   ;BLT
000010CA                           132      ;MOVE.W #%0110100001010100,CUR_OP_CODE   ;BVC
000010CA                           133      
000010CA                           134      *****GROUP 7 TESTS**********        ;Should be ALL INVALID
000010CA                           135      ;MOVE.W #%0111101011110000,CUR_OP_CODE   ;MOVEQ
000010CA                           136      
000010CA                           137      *****GROUP 8 TESTS********** SUPPORTED: DIVS, OR
000010CA                           138      *MOVE.W #%1000101111000110,CUR_OP_CODE    ;DIVU
000010CA                           139      
000010CA                           140      *****GROUP 9 TESTS********** SUPPORTED: SUB
000010CA                           141      
000010CA                           142      *****GROUP A TESTS**********        ;Should be ALL INVALID
000010CA                           143      
000010CA                           144      *****GROUP B TESTS********** SUPPORTED: EOR, CMP
000010CA                           145      
000010CA                           146      *****GROUP C TESTS********** SUPPORTED: MULS
000010CA                           147      
000010CA                           148      *****GROUP D TESTS********** SUPPORTED: ADD, ADDA
000010CA                           149      
000010CA                           150      *****GROUP E TESTS********** SUPPORTED: LSX, ASX, ROX
000010CA                           151      
000010CA                           152      *****GROUP F TESTS**********        ;Should be ALL INVALID
000010CA                           153      
000010CA                           154      
000010CA                           155      
000010CA                           156  ************************************************************************************
000010CA                           157  * PRINTING BUFFER FUNCTION HAS BEEN FINISHED
000010CA                           158  *-----------------------------------------------------------
000010CA                           159  *First Nibble Values (15-12)
000010CA                           160  *Value                  Operations
000010CA                           161  *$0                     GROUP_0: ORI,BCLR (static and dynamic),CMPI --- DONE, need validation testing
000010CA                           162  *$1                     GROUP_1: MOVE.B                             --- DONE, need validation testing
000010CA                           163  *$2                     GROUP_2: MOVE.L, MOVEA.L                    --- DONE, need validation testing
000010CA                           164  *$3                     GROUP_3: MOVE.W, MOVEA.W                    --- Partial, needs trailing bits
000010CA                           165  *$4                     GROUP_4: LEA,JSR,RTS,NEG,MOVEM              --- Partial, needs SIZE print for NEG, MOVE
000010CA                           166  *$5                     GROUP_5: SUBQ                               --- Partial, needs SIZE pri
000010CA                           167  *$6                     GROUP_6: Bcc(BCS,BGE,BLT,BVC), BRA          --- Not started
000010CA                           168  *$7                     GROUP_7: INVALID_OP                         --- DONE
000010CA                           169  *$8                     GROUP_8: DIVS, OR                           --- Not started
000010CA                           170  *$9                     GROUP_9: SUB                                --- Not started
000010CA                           171  *$A                     GROUP_A: INVALID_OP                         --- DONE
000010CA                           172  *$B                     GROUP_B: EOR, CMP                           --- Not started
000010CA                           173  *$C                     GROUP_C: MULS                               --- Not started
000010CA                           174  *$D                     GROUP_D: ADD, ADDA                          --- Not started
000010CA                           175  *$E                     GROUP_E: LSR, LSL, ASR, ASL, ROL, ROR       --- Not started
000010CA                           176  *$F                     GROUP_F: INVALID_OP                         --- DONE
000010CA                           177  
000010CA                           178  
000010CA                           179  * OP_JSR_Routine
000010CA                           180  **********************************************************************************
000010CA                           181  * Description: Catalog all supported OP codes into groupings based on their hex
000010CA                           182  * values. Sort the supported OP codes by looking at the first nibble for their
000010CA                           183  * grouping value. Call underlying subroutines for further identification of the
000010CA                           184  * op code.
000010CA                           185  *
000010CA                           186  * Registers used: A6,D0,D1 
000010CA                           187  *
000010CA                           188  * Precondition: Instruction set (size Word) has been loaded in the appropriate
000010CA                           189  * address to be parsed and read.
000010CA                           190  
000010CA                           191  * Postcondition: OP code has been identified as either valid or invalid. If it is
000010CA                           192  * valid, it is stored into A6 and EA parsing methods are called to pass needed
000010CA                           193  * information to EA. If invalid, DATA output will be utilized to indicate so.
000010CA                           194  **********************************************************************************
000010CA                           195  * These valid operand codes refer to the basic supported operand codes
000010CA                           196  * Groups refer to the first nibble value that is supported by the operand
000010CA                           197  LOAD_OP_CODE:
000010CA  3038 1000                198      MOVE.W CUR_OP_CODE,D0
000010CE  4EB9 000010D4            199      JSR OP_JSR_Routine      ;Use the JSR routine to identify the op code
000010D4                           200  OP_JSR_Routine:
000010D4  48E7 C000                201      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
000010D8  720C                     202      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
000010DA  E2A8                     203      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
000010DC                           204  
000010DC                           205  GROUP_0:                ;$0| ORI, BCLR (static and dynamic), CMPI                  
000010DC  B03C 0000                206      CMP.B   #$0,D0                 ;Compare first nibble
000010E0  6600 000C                207      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
000010E4  4EB9 000012FA            208      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
000010EA  6000 010C                209      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000010EE                           210      
000010EE                           211  GROUP_1:                ;$1| MOVE.B
000010EE  B03C 0001                212      CMP.B   #$1,D0                 ;Compare first nibble
000010F2  6600 000C                213      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
000010F6  4EB9 000014C6            214      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
000010FC  6000 00FA                215      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001100                           216  
00001100                           217  GROUP_2:                ;$2| MOVE.L, MOVEA.L
00001100  B03C 0002                218      CMP.B   #$2,D0                 ;Compare first nibble
00001104  6600 000C                219      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
00001108  4EB9 000014EE            220      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
0000110E  6000 00E8                221      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001112                           222  
00001112                           223  GROUP_3:                ;$3| MOVE.W, MOVEA.W
00001112  B03C 0003                224      CMP.B   #$3,D0                 ;Compare first nibble
00001116  6600 000C                225      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
0000111A  4EB9 0000154E            226      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
00001120  6000 00D6                227      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001124                           228  
00001124                           229  GROUP_4:                ;$4| LEA, JSR, RTS, NEG, MOVEM
00001124  B03C 0004                230      CMP.B   #$4,D0                 ;Compare first nibble
00001128  6600 000C                231      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
0000112C  4EB9 000015AE            232      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
00001132  6000 00C4                233      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001136                           234  
00001136                           235  
00001136                           236  GROUP_5:                ;$5| SUBQ
00001136  B03C 0005                237      CMP.B   #$5,D0                 ;Compare first nibble
0000113A  6600 000C                238      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
0000113E  4EB9 00001804            239      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
00001144  6000 00B2                240      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001148                           241  
00001148                           242  
00001148                           243  GROUP_6:                ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
00001148  B03C 0006                244      CMP.B   #$6,D0                 ;Compare first nibble
0000114C  6600 000C                245      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
00001150  4EB9 00001854            246      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
00001156  6000 00A0                247      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000115A                           248  
0000115A                           249  
0000115A                           250  GROUP_7:                ;$7| Display: DATA, $WXYZ (Unsupported)
0000115A  B03C 0007                251      CMP.B   #$7,D0                 ;Compare first nibble
0000115E  6600 000C                252      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
00001162  4EB9 000018CC            253      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
00001168  6000 008E                254      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000116C                           255  
0000116C                           256  
0000116C                           257  GROUP_8:                ;$8| DIVS, OR
0000116C  B03C 0008                258      CMP.B   #$8,D0                 ;Compare first nibble
00001170  6600 000C                259      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
00001174  4EB9 000018DE            260      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
0000117A  6000 007C                261      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000117E                           262  
0000117E                           263  
0000117E                           264  GROUP_9:                ;$9| SUB
0000117E  B03C 0009                265      CMP.B   #$9,D0                 ;Compare first nibble
00001182  6600 000C                266      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
00001186  4EB9 00001920            267      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
0000118C  6000 006A                268      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001190                           269  
00001190                           270  
00001190                           271  GROUP_A:                ;$A| Display: DATA, $WXYZ (Unsupported)
00001190  B03C 000A                272      CMP.B   #$A,D0                 ;Compare first nibble
00001194  6600 000C                273      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
00001198  4EB9 0000194E            274      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
0000119E  6000 0058                275      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011A2                           276  
000011A2                           277  
000011A2                           278  GROUP_B:                ;$B| EOR, CMP
000011A2  B03C 000B                279      CMP.B   #$B,D0                 ;Compare first nibble
000011A6  6600 000C                280      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
000011AA  4EB9 00001954            281      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
000011B0  6000 0046                282      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011B4                           283  
000011B4                           284  
000011B4                           285  GROUP_C:                ;$C| MULS
000011B4  B03C 000C                286      CMP.B   #$C,D0                 ;Compare first nibble
000011B8  6600 000C                287      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
000011BC  4EB9 000019A4            288      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
000011C2  6000 0034                289      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011C6                           290  
000011C6                           291  
000011C6                           292  GROUP_D:                 ;$D| ADD, ADDA
000011C6  B03C 000D                293      CMP.B   #$D,D0                 ;Compare first nibble
000011CA  6600 000C                294      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
000011CE  4EB9 00001A04            295      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
000011D4  6000 0022                296      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011D8                           297  
000011D8                           298  
000011D8                           299  GROUP_E:                ;$E| LSR, LSL, ASR, ASL, ROL, ROR
000011D8  B03C 000E                300      CMP.B   #$E,D0                 ;Compare first nibble
000011DC  6600 000C                301      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
000011E0  4EB9 00001A32            302      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
000011E6  6000 0010                303      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011EA                           304  
000011EA                           305  
000011EA                           306  GROUP_F:                ;$F| Display: DATA, $WXYZ (Unsupported)
000011EA  B03C 000F                307      CMP.B   #$F,D0                 ;Compare first nibble
000011EE  4EB9 00001B70            308      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
000011F4  6000 0002                309      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011F8                           310  
000011F8                           311  
000011F8                           312  OP_JSR_DONE:
000011F8  4CDF 0003                313           MOVEM.L (SP)+,D0-D1       ;Recover register D0
000011FC  4EF9 00001B86            314           JMP READ_NEXT_INSTRUCTION
00001202                           315  **********************************************************************************
00001202                           316  
00001202                           317  ********** EA Parsing ************************************************************
00001202                           318  
00001202                           319  * MOVE_LAST_6_BITS_TO_EA
00001202                           320  **********************************************************************************
00001202                           321  * Description: For OP codes with the last 6 bits specified as EA Mode and EA Reg,
00001202                           322  * the last 6 bits will be parsed and moved into the appropriate registers.
00001202                           323  *
00001202                           324  * Registers used: A6,D0,D1,D6,D7 
00001202                           325  
00001202                           326  * Precondition: OP code has been identified with only the last 6 bits for EA,
00001202                           327  * current instruction set is stored into A6.
00001202                           328  
00001202                           329  * Postcondition: Last 6 bits of instruction bit has been isolated and stored. Bits
00001202                           330  * for EA Mode have been stored in D7, Bits for EA Reg been stored in D6.
00001202                           331  **********************************************************************************
00001202                           332  MOVE_LAST_6_BITS_TO_EA:      ;Move last 6 bits from EA field to relevant registers
00001202                           333     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001202  3038 1000                334      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
00001206  323C 000A                335      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
0000120A  E368                     336      LSL.W   D1,D0            ;Truncate to find the last 6 bits
0000120C  E268                     337      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
0000120E  3E00                     338      MOVE.W  D0,D7            ;Move last 6 bits into D7
00001210  323C 0003                339      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
00001214  E26F                     340      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
00001216  3C07                     341      MOVE.W  D7,D6            ;Move the 'upper' 3 bits into D6
00001218  323C 000D                342      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
0000121C  E368                     343      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
0000121E  E268                     344      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001220  3E00                     345      MOVE.W  D0,D7            ;Move the 'lower' 3 bits into D7
00001222                           346     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
00001222  4E75                     347      RTS                      ;Return to stack
00001224                           348      
00001224                           349  * FIND_2_BIT_SIZE_TO_EA
00001224                           350  **********************************************************************************
00001224                           351  * Description: For OP codes with 2 bit size fields, the 2 relevant bits (7-6) will 
00001224                           352  * be parsed and moved to the appropriate registers.
00001224                           353  *
00001224                           354  * Registers used: A6,D0,D1,D5
00001224                           355  *
00001224                           356  * Precondition: OP code has been identified with 2 size bit field for EA, current
00001224                           357  * instruction set for OP code is stored in to A6.
00001224                           358  *
00001224                           359  * Postcondition: 2 bit size field has been isolated and stored into D5.
00001224                           360  **********************************************************************************
00001224                           361  FIND_2_BIT_SIZE_TO_EA:      ;Move the 2 bit size field relevant register
00001224                           362     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
00001224  3038 1000                363      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
00001228  323C 0008                364      MOVE.W   #8,D1          ;Prepare 8 bit shift to D1
0000122C  E368                     365      LSL.W    D1,D0          ;Truncate to find the 2 size bits
0000122E  E268                     366      LSR.W    D1,D0          ;Reposition the bits
00001230  323C 0006                367      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
00001234  E268                     368      LSR.W    D1,D0          ;Truncate to shift 2 bits to a byte
00001236  3800                     369      MOVE.W   D0,D4          ;Move 2 size bits into D5
00001238                           370    ;  MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
00001238  4E75                     371      RTS                     ;Return to stack
0000123A                           372  **********************************************************************************
0000123A                           373  
0000123A                           374  * FIND_3_BIT_REG_TO_EA
0000123A                           375  **********************************************************************************
0000123A                           376  * Description: OP codes with a dynamic 3 bit register in bits 11-9 will be parsed
0000123A                           377  * and have those 3 bits isolated and moved to the appropriate registers.
0000123A                           378  *
0000123A                           379  * Registers used: A6,D0,D1,D5
0000123A                           380  *
0000123A                           381  * Precondition: OP code has been identified with a dynamic 3 bit register in bits
0000123A                           382  * 11-9.
0000123A                           383  *
0000123A                           384  * Postcondition: 3 bit dynamic register has been isolated and stored into D4.
0000123A                           385  **********************************************************************************
0000123A                           386  FIND_3_BIT_REG_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
0000123A                           387     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
0000123A  3038 1000                388      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
0000123E  323C 0004                389      MOVE.W   #4,D1          ;Prepare 4 bit shift to D1
00001242  E368                     390      LSL.W    D1,D0          ;Truncate to find the 2 size bits
00001244  E268                     391      LSR.W    D1,D0          ;Reposition the bits
00001246  323C 0009                392      MOVE.W   #9,D1          ;Prepare 9 bit shift to D1
0000124A  E268                     393      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
0000124C  3A00                     394      MOVE.W   D0,D5          ;Move 3 register bits into D4
0000124E                           395     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
0000124E  4E75                     396      RTS                     ;Return to stack
00001250                           397  **********************************************************************************
00001250                           398  
00001250                           399  * MOVE_AND_MOVEA_PARSE_EA
00001250                           400  **********************************************************************************
00001250                           401  * Description: Special parsing for the SRC and DST Mode/Reg for MOVE/MOVE
00001250                           402  *
00001250                           403  * Registers used: A6,D0,D1,D7,D6,D5,D4
00001250                           404  *
00001250                           405  * Precondition: OP code has been identified with either MOVE or MOVEA
00001250                           406  *
00001250                           407  * Postcondition: Store all relevant EA bits into associated register.
00001250                           408  **********************************************************************************
00001250                           409  MOVE_AND_MOVEA_PARSE_EA:       ;Move the 3 bit dynamic register bits to proper register
00001250                           410     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001250  3038 1000                411      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
00001254  323C 000A                412      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
00001258  E368                     413      LSL.W   D1,D0            ;Truncate to find the last 6 bits
0000125A  E268                     414      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
0000125C  3E00                     415      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
0000125E  323C 0003                416      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
00001262  E26F                     417      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
00001264  3A07                     418      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
00001266  323C 000D                419      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
0000126A  E368                     420      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
0000126C  E268                     421      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
0000126E  3800                     422      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
00001270                           423      **************MOVING SOURCE*********** TO BE DONE LATER
00001270                           424      ; MOVE.W #%0011 011 001 001 101,(A6)              ;MOVEA.W A5,A3
00001270                           425      ; MOVE.W #%0010 011 001 001 101,D0                ;MOVEA.L A5,A3
00001270                           426       ;Expected values:
00001270                           427      ;D7, DST REG:   011
00001270                           428      ;D6, DST MODE:  001
00001270                           429      ;D5, SRC MODE:  001
00001270                           430      ;D4, SRC REG:   101
00001270                           431      ;00011001
00001270  3038 1000                432      MOVE.W CUR_OP_CODE,D0     ;Move current OP code into D0     
00001274  323C 0004                433      MOVE.W  #4,D1             ;Prepare 4 bit shift to D1
00001278  E368                     434      LSL.W   D1,D0             ;Truncate to find bits 11-6
0000127A  E268                     435      LSR.W   D1,D0             ;Reposition bits
0000127C  323C 0006                436      MOVE.W  #6,D1             ;Prepare 6 bit shift to D1
00001280  E268                     437      LSR.W   D1,D0             ;Truncate the SRC Reg/Mode bits
00001282  323C 0003                438      MOVE.W  #3,D1             ;Prepare a 3 bit shift to D1 for DST Reg/Mode
00001286  3C00                     439      MOVE.W  D0,D6             ;Copy over the current 6 bits to D6
00001288  E268                     440      LSR.W   D1,D0             ;Truncate DST Mode  
0000128A  3E00                     441      MOVE.W  D0,D7             ;Move DST Reg to D7
0000128C  323C 000D                442      MOVE.W  #13,D1             
00001290  E36E                     443      LSL.W   D1,D6             ;Truncate 13 bits in D6
00001292  E26E                     444      LSR.W   D1,D6             ;Reposition D6
00001294                           445                                ;D6 now contains the DST Reg
00001294                           446     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
00001294  4E75                     447      RTS                     ;Return to stack
00001296                           448  **********************************************************************************
00001296                           449  
00001296                           450  *FIND_TRAILING_BITS_TO_EA
00001296                           451  **********************************************************************************
00001296                           452  FIND_TRAILING_BITS_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
00001296                           453     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
00001296  3038 1000                454      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
0000129A  323C 0007                455      MOVE.W   #7,D1          ;Prepare 4 bit shift to D1
0000129E  E368                     456      LSL.W    D1,D0          ;Truncate to find the 2 size bits
000012A0  E268                     457      LSR.W    D1,D0          ;Reposition the bits
000012A2  323C 0006                458      MOVE.W   #6,D1          ;Prepare 9 bit shift to D1
000012A6  E268                     459      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
000012A8  3680                     460      MOVE.W   D0,(A3)          ;Move 3 register bits into D4
000012AA                           461     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
000012AA  4E75                     462      RTS                    ;Return to stack
000012AC                           463  **********************************************************************************
000012AC                           464  
000012AC                           465  *PARSE_EA_CONSTANT_BITS
000012AC                           466  **********************************************************************************
000012AC                           467  * Definition: Uses CUR_OP_CODE to shift the proper bits into the global constants
000012AC                           468  * used for EA (MNEMONIC,FIRST_3,SECOND_3,THIRD_3,FOURTH_3. Where MNEMONIC refers
000012AC                           469  * to the first 4 bits of CUR_OP_CODE (15-12), FIRST_3 refers to the first group
000012AC                           470  * of 3 bits (11-9), SECOND_3 refers to the second group of 3 bits (8-6), THIRD_3
000012AC                           471  * refers to the third group of 3 bits (5-3), and FOURTH_3 refers to the fourth
000012AC                           472  * group of 3 bits (2-0). Shifts CUR_OP_CODE bits to initialize constants.
000012AC                           473  *
000012AC                           474  * Registers used: D0,D1
000012AC                           475  *
000012AC                           476  * Precondition: CUR_OP_CODE has been set with an 4 hex instruction set
000012AC                           477  * 
000012AC                           478  * Postcondition: MNEMONIC, FIRST_3, SECOND_3, THIRD_3, FOURTH_3 have been set
000012AC                           479  * to the corresponding values.
000012AC                           480  **********************************************************************************
000012AC                           481  PARSE_EA_CONSTANT_BITS:
000012AC                           482      *MNEMONIC SHIFT
000012AC  3038 1000                483      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D0
000012B0  323C 000C                484      MOVE.W #12,D1               ;Prepare a bit shift of 12 into D1
000012B4  E268                     485      LSR.W D1,D0                 ;Shift 12 bits from D0 right
000012B6  11C0 10A3                486      MOVE.B D0,MNEMONIC          ;Set MNEMONIC to D0
000012BA                           487      *FIRST_3 SHIFT
000012BA  323C 0009                488      MOVE.W #9,D1                ;Prepare a bit shift of 9 into D1
000012BE  3038 1000                489      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012C2  E948                     490      LSL.W #4,D0                 ;Shift out bits 15-12 in D0
000012C4  E848                     491      LSR.W #4,D0                 ;Reposition D0
000012C6  E268                     492      LSR.W  D1,D0                ;Shift D0 9 bits right
000012C8  11C0 10A4                493      MOVE.B D0,FIRST_3           ;Set FIRST_3 to D0
000012CC                           494      *SECOND_3 SHIFT
000012CC  3038 1000                495      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012D0  EF48                     496      LSL.W #7,D0                 ;Shift out bits 15-9 in D0
000012D2  EE48                     497      LSR.W #7,D0                 ;Reposition D0
000012D4  EC48                     498      LSR.W #6,D0                 ;Shift D0 6 bits right
000012D6  11C0 10A5                499      MOVE.B D0,SECOND_3          ;Set SECOND_3 to D0
000012DA                           500      *THIRD_3 SHIFT
000012DA  3038 1000                501      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012DE  E648                     502      LSR.W #3,D0                 ;Shift D0 3 bits right
000012E0  323C 000D                503      MOVE.W #13,D1               ;Prepare a 13 bit shift into D1
000012E4  E368                     504      LSL.W D1,D0                 ;Truncate first 13 bits of D0
000012E6  E268                     505      LSR.W D1,D0                 ;Reposition D0
000012E8  11C0 10A6                506      MOVE.B D0,THIRD_3           ;Set THIRD_3 to D0
000012EC                           507      *FOURTH_3 SHIFT
000012EC  3038 1000                508      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012F0  E368                     509      LSL.W D1,D0                 ;Grab the fourth 3-bit group
000012F2  E268                     510      LSR.W D1,D0                 ;Shift D0 back into position
000012F4  11C0 10A7                511      MOVE.B D0,FOURTH_3          ;Set FOURTH_3 to Do
000012F8  4E75                     512      RTS                         ;Return to stack
000012FA                           513  **********************************************************************************
000012FA                           514  ********** End of EA Parsing *****************************************************
000012FA                           515  
000012FA                           516  *******************JMP LABELS ****************************************************
000012FA                           517  * Labelling for group codes will be in the following format
000012FA                           518  
000012FA                           519  * <JMP Labelname>
000012FA                           520  ********************************************************************************
000012FA                           521  * Checking List Order (If more than one value)
000012FA                           522  * Operand1 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
000012FA                           523  * Operand2 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
000012FA                           524  
000012FA                           525  * Where a-b will refer to the bit corresponding bit value in the instruction
000012FA                           526  * format, and a specifier will be attached such as Size, EA Mode, SRC Reg, etc
000012FA                           527  * to clarify what a specific bit range means.
000012FA                           528  * Checking order refers to what order the checks will be performed in. 
000012FA                           529  * Any other code outside of the listed ones will be INVALID_OP.
000012FA                           530  ********************************************************************************
000012FA                           531  
000012FA                           532  ********************************************************************************
000012FA                           533  * Global Field Descriptions
000012FA                           534  * Size Field: Byte = 00 Word = 01 Long = 10
000012FA                           535  * EA Mode: Refer to EA Address Modes
000012FA                           536  * EA Reg: 3-bit input that is mapped to the respective binary value
000012FA                           537  ********************************************************************************
000012FA                           538  
000012FA                           539  * GROUP_0                      
000012FA                           540  ********************************************************************************
000012FA                           541  * Description: Checks for the following listed OP codes to be present or not
000012FA                           542  * Supported OP codes:
000012FA                           543  * ORI: $00, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
000012FA                           544  * CMPI: $0C, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
000012FA                           545  * Dynamic BCLR: $0, 11-9 Register, 8-6 %110, 5-3 EA Mode, 2-0 EA Reg
000012FA                           546  * Static BCLR: $01, 7-6 10, 5-3 EA Mode, 2-0 EA Reg
000012FA                           547  *
000012FA                           548  * Registers used: D0
000012FA                           549  *
000012FA                           550  * Precondition: First nibble has been identified as $0
000012FA                           551  *
000012FA                           552  * Postcondition: Parses proper OP code with a nibble value of $0 or finds an
000012FA                           553  * invalid OP code. After a successful parse loading for EA values will be done
000012FA                           554  * through a subroutine.
000012FA                           555  * 
000012FA                           556  * Unsupported OP codes:
000012FA                           557  * ORI_TO_CCR, ORI_TO_SR, ANDI_TO_CCR, ANDI_TO_SR, ANDI, SUBI, ADDI, EORI_TO_CCR
000012FA                           558  * EORI_TO_SR, EORI, STATIC_BTST, STATIC_BCHG, STATIC_BSET, DYNAMIC_BTST,
000012FA                           559  * DYNAMIC_BCHG, DYNAMIC_BSET, MOVEP 
000012FA                           560  ********************************************************************************
000012FA                           561  C_GROUP_0:
000012FA  48E7 C000                562      MOVEM.L D0-D1, -(SP)        ;Backup registers
000012FE                           563  *Unsupported OP codes that are fully static in bits
000012FE                           564  CHECK_OP_ORI_TO_CCR:
000012FE  3038 1000                565      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001302  B07C 003C                566      CMP.W   #$003C,D0               ;Compare the direct full bits
00001306  6700 01B4                567      BEQ     GROUP0_INVALID          ;INVALID OP code found
0000130A  6600 0002                568      BNE     CHECK_OP_ORI_TO_SR      ;Check next routine
0000130E                           569      
0000130E                           570  CHECK_OP_ORI_TO_SR:
0000130E  3038 1000                571      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001312  B07C 007C                572      CMP.W   #$007C,D0               ;Compare the direct full bits
00001316  6700 01A4                573      BEQ     GROUP0_INVALID          ;INVALID OP code found
0000131A  6600 0002                574      BNE     CHECK_OP_ANDI_TO_CCR    ;Check next routine
0000131E                           575      
0000131E                           576  CHECK_OP_ANDI_TO_CCR:
0000131E  3038 1000                577      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001322  B07C 023C                578      CMP.W   #$023C,D0               ;Compare the direct full bits
00001326  6700 0194                579      BEQ     GROUP0_INVALID          ;INVALID OP code found
0000132A  6600 0002                580      BNE     CHECK_OP_ANDI_TO_SR     ;Check next routine
0000132E                           581      
0000132E                           582  CHECK_OP_ANDI_TO_SR:
0000132E  3038 1000                583      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001332  B07C 027C                584      CMP.W   #$027C,D0               ;Compare the direct full bits
00001336  6700 0184                585      BEQ     GROUP0_INVALID          ;INVALID OP code found
0000133A  6600 0022                586      BNE     CHECK_OP_ANDI           ;Check next routine
0000133E                           587  
0000133E                           588  
0000133E                           589  CHECK_OP_EORI_TO_CCR:
0000133E  3038 1000                590      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001342  B07C 0A3C                591      CMP.W   #$0A3C,D0               ;Compare the direct full bits
00001346  6700 0174                592      BEQ     GROUP0_INVALID          ;INVALID OP code found
0000134A  6600 0002                593      BNE     CHECK_OP_EORI_TO_SR     ;Check next routine
0000134E                           594      
0000134E                           595  CHECK_OP_EORI_TO_SR:
0000134E  3038 1000                596      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001352  B07C 0A7C                597      CMP.W   #$0A7C,D0               ;Compare the direct full bits
00001356  6700 0164                598      BEQ     GROUP0_INVALID          ;INVALID OP code found
0000135A  6600 0002                599      BNE     CHECK_OP_ANDI           ;Check next routine
0000135E                           600      
0000135E                           601  *Unsupported OP codes to check with partial static bits
0000135E                           602  CHECK_OP_ANDI:
0000135E  3038 1000                603      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001362  0240 FF00                604      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001366  B07C 0200                605      CMP.W   #$0200,D0               ;Compare the appropriate masked bits
0000136A  6700 0150                606      BEQ     GROUP0_INVALID          ;INVALID OP code found
0000136E  6600 0002                607      BNE     CHECK_OP_SUBI           ;Check next routine
00001372                           608      
00001372                           609  CHECK_OP_SUBI:
00001372  3038 1000                610      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001376  0240 FF00                611      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
0000137A  B07C 0400                612      CMP.W   #$0400,D0               ;Compare the appropriate masked bits
0000137E  6700 013C                613      BEQ     GROUP0_INVALID          ;INVALID OP code found
00001382  6600 0002                614      BNE     CHECK_OP_ADDI           ;Check next routine
00001386                           615  
00001386                           616  CHECK_OP_ADDI:
00001386  3038 1000                617      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000138A  0240 FF00                618      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
0000138E  B07C 0600                619      CMP.W   #$0600,D0               ;Compare the appropriate masked bits
00001392  6700 0128                620      BEQ     GROUP0_INVALID          ;INVALID OP code found
00001396  6600 0002                621      BNE     CHECK_OP_EORI           ;Check next routine 
0000139A                           622  
0000139A                           623  CHECK_OP_EORI:
0000139A  3038 1000                624      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000139E  0240 FF00                625      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
000013A2  B07C 0A00                626      CMP.W   #$0A00,D0               ;Compare the appropriate masked bits
000013A6  6700 0114                627      BEQ     GROUP0_INVALID          ;INVALID OP code found
000013AA  6600 0002                628      BNE     CHECK_OP_STATIC_BTST    ;Check next routine
000013AE                           629      
000013AE                           630  CHECK_OP_STATIC_BTST:
000013AE  3038 1000                631      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000013B2  0240 FFC0                632      ANDI.W  #$FFC0,D0               ;Mask relevant bits to D0
000013B6  B07C 0800                633      CMP.W   #$0800,D0               ;Compare the appropriate masked bits
000013BA  6700 0100                634      BEQ     GROUP0_INVALID          ;INVALID OP code found
000013BE  6600 0002                635      BNE     CHECK_OP_STATIC_BCHG    ;Check next routine
000013C2                           636      
000013C2                           637  CHECK_OP_STATIC_BCHG:
000013C2  3038 1000                638      MOVE.W  CUR_OP_CODE,D0           ;Move current instruction set into D0
000013C6  0240 FFC0                639      ANDI.W  #$FFC0,D0                ;Mask relevant bits to D0
000013CA  B07C 0840                640      CMP.W   #$0840,D0                ;Compare the appropriate masked bits
000013CE  6700 00EC                641      BEQ     GROUP0_INVALID           ;INVALID OP code found
000013D2  6600 0002                642      BNE     CHECK_OP_STATIC_BSET     ;Check next routine
000013D6                           643  
000013D6                           644  CHECK_OP_STATIC_BSET:
000013D6  3038 1000                645      MOVE.W  CUR_OP_CODE,D0           ;Move current instruction set into D0
000013DA  0240 FFC0                646      ANDI.W  #$FFC0,D0                ;Mask relevant bits to D0
000013DE  B07C 08C0                647      CMP.W   #$08C0,D0                ;Compare the appropriate masked bits
000013E2  6700 00D8                648      BEQ     GROUP0_INVALID           ;INVALID OP code found   
000013E6  6600 0002                649      BNE     CHECK_OP_DYNAMIC_BTST    ;Check next routine
000013EA                           650  
000013EA                           651  CHECK_OP_DYNAMIC_BTST:
000013EA  3038 1000                652      MOVE.W  CUR_OP_CODE,D0           ;Move current instruction set into D0
000013EE  0240 F1C0                653      ANDI.W  #$F1C0,D0                ;Mask relevant bits to D0
000013F2  B07C 0100                654      CMP.W   #$0100,D0                ;Compare the appropriate masked bits
000013F6  6700 00C4                655      BEQ     GROUP0_INVALID           ;INVALID OP code found
000013FA  6600 0002                656      BNE     CHECK_OP_DYNAMIC_BCHG    ;Check next routine
000013FE                           657  
000013FE                           658  CHECK_OP_DYNAMIC_BCHG:
000013FE  3038 1000                659      MOVE.W  CUR_OP_CODE,D0           ;Move current instruction set into D0
00001402  0240 F1C0                660      ANDI.W  #$F1C0,D0                ;Mask relevant bits to D0
00001406  B07C 0140                661      CMP.W   #$0140,D0                ;Compare the appropriate masked bits 
0000140A  6700 00B0                662      BEQ     GROUP0_INVALID           ;INVALID OP code found
0000140E  6600 0002                663      BNE     CHECK_OP_DYNAMIC_BSET    ;Check next routine
00001412                           664      
00001412                           665  CHECK_OP_DYNAMIC_BSET:
00001412                           666  
00001412  3038 1000                667      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001416  0240 F1C0                668      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
0000141A  B07C 01C0                669      CMP.W   #$01C0,D0               ;Compare the appropriate masked bits 
0000141E  6700 0006                670      BEQ     BIT_CHECK_MOVEP         ;Check special case for MOVEP
00001422  6600 001C                671      BNE     CHECK_OP_MOVEP          ;Check next routine
00001426                           672  
00001426                           673  BIT_CHECK_MOVEP:
00001426                           674                                      ;This is a special case check for MOVEP
00001426  3038 1000                675      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000142A  323C 000A                676      MOVE.W  #10,D1                  ;Prepare a 10-bit shift
0000142E  E368                     677      LSL.W   D1,D0                   ;Shift out 10 bits left 
00001430  E268                     678      LSR.W   D1,D0                   ;Reposition D0 for last 6 bits
00001432  E648                     679      LSR.W   #3,D0                   ;Shift out 3 bits right, D0 contains bits 5-3
00001434  B07C 0001                680      CMP.W   #$1,D0                  ;Compare bits to D0
00001438  6700 0006                681      BEQ     CHECK_OP_MOVEP          ;If bits are $1 then it's addressing, goto MOVEP
0000143C  6600 007E                682      BNE     GROUP0_INVALID          ;If not then it's DYNAMIC_BSET which is invalid                                                    
00001440                           683      
00001440                           684  CHECK_OP_MOVEP:
00001440  3038 1000                685      MOVE.W  CUR_OP_CODE,D0           ;Move current instruction set into D0
00001444  0240 F138                686      ANDI.W  #$F138,D0                ;Mask relevant bits to D0
00001448  B07C 0108                687      CMP.W   #$0108,D0                ;Compare the appropriate masked bits
0000144C  6700 006E                688      BEQ     GROUP0_INVALID           ;INVALID OP code found
00001450  6600 0002                689      BNE     CHECK_OP_ORI             ;Check next routine
00001454                           690  
00001454                           691  *Supported OP code checks
00001454                           692  CHECK_OP_ORI:
00001454  3038 1000                693      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001458  0240 FF00                694      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
0000145C  B07C 0000                695      CMP.W   #$0000,D0               ;Compare the appropriate masked bits     
00001460  6600 000C                696      BNE     CHECK_OP_CMPI           ;Branch to next comparison if not equal
00001464  4EB9 00001BB0            697      JSR     PRINT_OP_ORI            ;Print the OP code if equal    
0000146A  6000 0054                698      BRA     GROUP0_SUCCESS          ;Finish routine
0000146E                           699      
0000146E                           700  CHECK_OP_CMPI:
0000146E  3038 1000                701      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001472  0240 FF00                702      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001476  B07C 0C00                703      CMP.W   #$0C00,D0               ;Compare the appropriate masked bits   
0000147A  6600 000C                704      BNE     CHECK_OP_STATIC_BCLR    ;Branch to next comparison if not equal       
0000147E  4EB9 00001BBE            705      JSR     PRINT_OP_CMPI           ;Print the OP code if equal
00001484  6000 003A                706      BRA     GROUP0_SUCCESS          ;Finish routine
00001488                           707      
00001488                           708  CHECK_OP_STATIC_BCLR:
00001488  3038 1000                709      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000148C  0240 FF00                710      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001490  B07C 0800                711      CMP.W   #$0800,D0               ;Compare the appropriate masked bits
00001494  6600 000C                712      BNE     CHECK_OP_DYNAMIC_BCLR   ;Branch to next comparison if not equal
00001498  4EB9 00001BCC            713      JSR     PRINT_OP_STATIC_BCLR    ;Print the OP code if equal
0000149E  6000 0020                714      BRA     GROUP0_SUCCESS          ;Finish routine
000014A2                           715      
000014A2                           716  CHECK_OP_DYNAMIC_BCLR:
000014A2  3038 1000                717      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000014A6  0240 0180                718      ANDI.W  #%0000000110000000,D0   ;Do a direct binary bitmask to see which bits are needed
000014AA  B07C 0180                719      CMP.W   #%0000000110000000,D0   ;Compare the expected binary value
000014AE  6600 000C                720      BNE     GROUP0_INVALID          ;If not equal this must be an invalid OP code
000014B2  4EB9 00001BDA            721      JSR     PRINT_OP_DYNAMIC_BCLR   ;Print the OP code if equal
000014B8  6000 0006                722      BRA     GROUP0_SUCCESS          ;Finish routine
000014BC                           723  
000014BC                           724  GROUP0_INVALID:                     ;Checks have been finished, invalid OP code has been found
000014BC  6000 06B8                725      BRA INVALID_OP                  ;INVALID OP code found
000014C0                           726      
000014C0                           727  GROUP0_SUCCESS:                     ;Checks have been finished,a valid OP code has been found
000014C0  4CDF 0003                728      MOVEM.L (SP)+,D0-D1             ;Restore registers
000014C4  4E75                     729      RTS                             ;Return to stack
000014C6                           730      
000014C6                           731  * GROUP_1                      
000014C6                           732  ********************************************************************************
000014C6                           733  * Supported OP code:
000014C6                           734  * MOVE.B: $1, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000014C6                           735  ********************************************************************************
000014C6                           736  C_GROUP_1:
000014C6  48E7 C000                737      MOVEM.L D0-D1,-(SP)             ;Save registers to stack
000014CA                           738  
000014CA                           739  CHECK_OP_MOVE_B:
000014CA  3038 1000                740      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0          
000014CE  0240 F000                741      ANDI.W  #$F000,D0               ;Mask relevant bits to D0
000014D2  B07C 1000                742      CMP.W   #$1000,D0               ;Compare the appropriate masked bits 
000014D6  6600 000C                743      BNE     GROUP1_INVALID          ;Invalid OP code has been found
000014DA  4EB9 00001BE8            744      JSR     PRINT_OP_MOVEB          ;Print the OP code if equal
000014E0  6000 0006                745      BRA     GROUP1_SUCCESS          ;Finish routine
000014E4                           746      
000014E4                           747  GROUP1_INVALID:
000014E4  6000 0690                748      BRA INVALID_OP                  ;Invalid OP code found
000014E8                           749      
000014E8                           750  GROUP1_SUCCESS:
000014E8  4CDF 0003                751      MOVEM.L (SP)+,D0-D1             ;Restore register
000014EC  4E75                     752      RTS                             ;Return to stack
000014EE                           753  * GROUP_2
000014EE                           754  ********************************************************************************
000014EE                           755  * Supported OP codes:
000014EE                           756  * MOVEA.L: $2, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
000014EE                           757  * MOVE.L: $2, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000014EE                           758  ********************************************************************************
000014EE                           759  C_GROUP_2:
000014EE  48E7 E000                760      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
000014F2                           761  
000014F2                           762  CHECK_OP_MOVEA_L:
000014F2  3038 1000                763      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0  
000014F6  0240 F000                764      ANDI.W #$F000,D0                ;Mask relevant bits to D0
000014FA  B07C 2000                765      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
000014FE  4EF9 00001504            766      JMP FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
00001504                           767      
00001504                           768  FIND_MOVEA_L_DIFFERENCE:            ;Finds difference between MOVEA and MOVE
00001504  3038 1000                769      MOVE.W   CUR_OP_CODE,D0         ;Move current OP code into D0
00001508  323C 0007                770      MOVE.W   #7,D1                  ;Prepare 7 bit shift to D1
0000150C  E368                     771      LSL.W    D1,D0                  ;Truncate to find the 3 address mode bits
0000150E  E268                     772      LSR.W    D1,D0                  ;Reposition the bits
00001510  323C 0006                773      MOVE.W   #6,D1                  ;Prepare 6 bit shift to D1
00001514  E268                     774      LSR.W    D1,D0                  ;Truncate to shift 3 bits to a register
00001516  3400                     775      MOVE.W   D0,D2                  ;Move 3 address mode bits into D6
00001518  B47C 0001                776      CMP.W   #$1,D2                  ;Check if the address mode value is MOVEA
0000151C  6600 000C                777      BNE     CHECK_OP_MOVE_L         ;Branch if not equal to check MOVE
00001520  4EB9 00001BF6            778      JSR     PRINT_OP_MOVEA_L        ;Print the OP code if it's a match
00001526  6000 0020                779      BRA     GROUP2_SUCCESS          ;Finish routine
0000152A                           780      
0000152A                           781      
0000152A                           782  CHECK_OP_MOVE_L:
0000152A  3038 1000                783      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000152E  0240 F000                784      ANDI.W #$F000,D0                ;Mask relevant bits to D0
00001532  B07C 2000                785      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
00001536  6600 000C                786      BNE GROUP2_INVALID              ;If not equal, OP code is invalid
0000153A  4EB9 00001C04            787      JSR PRINT_OP_MOVE_L             ;Print out MOVE.L
00001540  6000 0006                788      BRA GROUP2_SUCCESS              ;Finish routine
00001544                           789      
00001544                           790  GROUP2_INVALID:    
00001544  6000 0630                791      BRA INVALID_OP                  ;Invalid OP code found
00001548                           792      
00001548                           793  GROUP2_SUCCESS:
00001548  4CDF 0003                794      MOVEM.L (SP)+,D0-D1             ;Restore register
0000154C  4E75                     795      RTS                             ;Return to stack
0000154E                           796  * GROUP_3
0000154E                           797  ********************************************************************************
0000154E                           798  * Supported OP codes:
0000154E                           799  * MOVEA.W: $3, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
0000154E                           800  * MOVE.W: $3, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
0000154E                           801  ********************************************************************************
0000154E                           802  C_GROUP_3:
0000154E  48E7 E000                803      MOVEM.L D0-D2,-(SP)
00001552                           804  CHECK_OP_MOVEA_W:
00001552  3038 1000                805      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001556  0240 F000                806      ANDI.W   #$F000,D0
0000155A  B07C 3000                807      CMP.W    #$3000,D0
0000155E  4EF9 00001564            808      JMP      FIND_MOVEA_W_DIFFERENCE
00001564                           809  
00001564                           810      
00001564                           811  FIND_MOVEA_W_DIFFERENCE:      ;Finds difference between MOVEA and MOVE
00001564  3038 1000                812      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001568  323C 0007                813      MOVE.W   #7,D1          ;Prepare 7 bit shift to D1
0000156C  E368                     814      LSL.W    D1,D0          ;Truncate to find the 3 address mode bits
0000156E  E268                     815      LSR.W    D1,D0          ;Reposition the bits
00001570  323C 0006                816      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
00001574  E268                     817      LSR.W    D1,D0          ;Truncate to shift 3 bits to a register
00001576  3400                     818      MOVE.W   D0,D2          ;Move 3 address mode bits into D6
00001578  B47C 0001                819      CMP.W    #$1,D2          ;Check if the address mode value is MOVEA
0000157C  6600 000C                820      BNE      CHECK_OP_MOVE_W 
00001580  4EB9 00001C12            821      JSR      PRINT_OP_MOVEA_W  
00001586  6000 0020                822      BRA      GROUP3_SUCCESS
0000158A                           823      
0000158A                           824  CHECK_OP_MOVE_W:
0000158A  3038 1000                825      MOVE.W   CUR_OP_CODE,D0    ;Move current instruction set into D0
0000158E  0240 F000                826      ANDI.W   #$F000,D0
00001592  B07C 3000                827      CMP.W    #$3000,D0
00001596  6600 000C                828      BNE      GROUP3_INVALID
0000159A  4EB9 00001C20            829      JSR      PRINT_OP_MOVE_W
000015A0  6000 0006                830      BRA      GROUP3_SUCCESS
000015A4                           831      
000015A4                           832  GROUP3_INVALID:
000015A4  6000 05D0                833      BRA INVALID_OP
000015A8                           834  
000015A8                           835  GROUP3_SUCCESS:
000015A8  4CDF 0007                836      MOVEM.L (SP)+,D0-D2 
000015AC  4E75                     837      RTS
000015AE                           838  
000015AE                           839  * GROUP_4
000015AE                           840  ********************************************************************************
000015AE                           841  * Supported OP codes:
000015AE                           842  * LEA: $4, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
000015AE                           843  * JSR: $4E, 7-6 %10, 5-3 EA Mode, 2-0 EA Reg 
000015AE                           844  * RTS: $4E75
000015AE                           845  * NEG: $44, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
000015AE                           846  * MOVEM: $4, 11 %1, 10 %D, 9-7 %001, 6 S, 5-3 EA Mode, 2-0 EA Reg
000015AE                           847  * %D = 0 , Register to Memory, 1 Memory to Register
000015AE                           848  * Unsupported OP codes: MOVE_FROM_SR, MOVE_TO_CCR, MOVE_TO_SR, NEGX, CLR, NOT
000015AE                           849  * EXT, NBCD, SWAP, PEA, ILLEGAL, TAS, TST, TRAP, LINK, UNLK, MOVE_USP, RESET,
000015AE                           850  * NOP, STOP, RTE, TRAPV, RTR, JMP, CHK
000015AE                           851  ********************************************************************************
000015AE                           852  C_GROUP_4:
000015AE  2F00                     853      MOVE.L  D0,-(SP)         ;Save registers
000015B0                           854  *Unsupported OP codes to check that are full static bits
000015B0                           855  CHECK_OP_STOP:
000015B0  3038 1000                856      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000015B4  B07C 4E72                857      CMP.W  #$4E72,D0
000015B8  6700 022C                858      BEQ    GROUP4_INVALID
000015BC  6600 0002                859      BNE    CHECK_OP_RESET
000015C0                           860      
000015C0                           861  CHECK_OP_RESET:
000015C0  3038 1000                862      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000015C4  B07C 4E70                863      CMP.W  #$4E70,D0
000015C8  6700 021C                864      BEQ    GROUP4_INVALID
000015CC  6600 0002                865      BNE    CHECK_OP_NOP
000015D0                           866      
000015D0                           867  CHECK_OP_NOP:
000015D0  3038 1000                868      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000015D4  B07C 4E71                869      CMP.W  #$4E71,D0
000015D8  6700 020C                870      BEQ    GROUP4_INVALID 
000015DC  6600 0002                871      BNE    CHECK_OP_ILLEGAL
000015E0                           872      
000015E0                           873  CHECK_OP_ILLEGAL:
000015E0  3038 1000                874      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000015E4  B07C 4AFC                875      CMP.W  #$4AFC,D0
000015E8  6700 01FC                876      BEQ    GROUP4_INVALID
000015EC  6600 0002                877      BNE    CHECK_OP_RTE
000015F0                           878      
000015F0                           879  CHECK_OP_RTE:    
000015F0  3038 1000                880      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000015F4  B07C 4E73                881      CMP.W #$4E73,D0
000015F8  6700 01EC                882      BEQ   GROUP4_INVALID
000015FC  6600 0002                883      BNE   CHECK_OP_TRAPV
00001600                           884      
00001600                           885  CHECK_OP_TRAPV:
00001600  3038 1000                886      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001604  B07C 4E76                887      CMP.W  #$4E76,D0
00001608  6700 01DC                888      BEQ    GROUP4_INVALID
0000160C  6600 0002                889      BNE    CHECK_OP_RTR
00001610                           890      
00001610                           891  CHECK_OP_RTR:
00001610  3038 1000                892      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001614  B07C 4E77                893      CMP.W #$4E77,D0
00001618  6700 01CC                894      BEQ    GROUP4_INVALID
0000161C  6600 0002                895      BNE    CHECK_OP_MOVE_FROM_SR
00001620                           896  
00001620                           897  
00001620                           898  *Unsupported OP codes to check that have partial static bits
00001620                           899  CHECK_OP_MOVE_FROM_SR:
00001620  3038 1000                900      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001624  0240 FFC0                901      ANDI.W #$FFC0,D0
00001628  B07C 40C0                902      CMP.W  #$40C0,D0
0000162C  6700 01B8                903      BEQ    GROUP4_INVALID
00001630  6600 0002                904      BNE    CHECK_OP_MOVE_TO_CCR
00001634                           905      
00001634                           906  CHECK_OP_MOVE_TO_CCR:
00001634  3038 1000                907      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001638  0240 FFC0                908      ANDI.W #$FFC0,D0
0000163C  B07C 44C0                909      CMP.W  #$44C0,D0
00001640  6700 01A4                910      BEQ    GROUP4_INVALID
00001644  6600 0002                911      BNE    CHECK_OP_MOVE_TO_SR
00001648                           912      
00001648                           913  CHECK_OP_MOVE_TO_SR:
00001648  3038 1000                914      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000164C  0240 FFC0                915      ANDI.W #$FFC0,D0
00001650  B07C 46C0                916      CMP.W  #$46C0,D0
00001654  6700 0190                917      BEQ    GROUP4_INVALID
00001658  6600 0002                918      BNE    CHECK_OP_NEGX
0000165C                           919      
0000165C                           920  CHECK_OP_NEGX:
0000165C  3038 1000                921      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001660  0240 FF00                922      ANDI.W #$FF00,D0
00001664  B07C 4000                923      CMP.W  #$4000,D0
00001668  6700 017C                924      BEQ    GROUP4_INVALID
0000166C  6600 0002                925      BNE    CHECK_OP_CLR
00001670                           926      
00001670                           927  CHECK_OP_CLR:
00001670  3038 1000                928      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001674  0240 FF00                929      ANDI.W #$FF00,D0
00001678  B07C 4200                930      CMP.W  #$4200,D0
0000167C  6700 0168                931      BEQ    GROUP4_INVALID
00001680  6600 0002                932      BNE    CHECK_OP_NOT
00001684                           933      
00001684                           934  CHECK_OP_NOT:
00001684  3038 1000                935      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001688  0240 FF00                936      ANDI.W #$FF00,D0
0000168C  B07C 4600                937      CMP.W  #$4600,D0
00001690  6700 0154                938      BEQ    GROUP4_INVALID
00001694  6600 0002                939      BNE    CHECK_OP_EXT
00001698                           940      
00001698                           941  CHECK_OP_EXT:
00001698  3038 1000                942      MOVE.W CUR_OP_CODE,D0    ;This is a special case to check against MOVEM
0000169C  323C 000A                943      MOVE.W #10,D1
000016A0  E3A8                     944      LSL.L  D1,D0
000016A2  E0A8                     945      LSR.L  D0,D0
000016A4  E688                     946      LSR.L  #3,D0
000016A6  B078 0000                947      CMP.W  %000,D0
000016AA                           948      
000016AA  3038 1000                949      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000016AE  0240 FF80                950      ANDI.W #$FF80,D0
000016B2  B07C 4880                951      CMP.W  #$4880,D0
000016B6  6700 012E                952      BEQ    GROUP4_INVALID
000016BA  6600 0002                953      BNE    CHECK_OP_NBCD
000016BE                           954  
000016BE                           955  CHECK_OP_NBCD:
000016BE  3038 1000                956      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000016C2  0240 FFC0                957      ANDI.W #$FFC0,D0
000016C6  B07C 4800                958      CMP.W  #$4800,D0
000016CA  6700 011A                959      BEQ    GROUP4_INVALID
000016CE  6600 0002                960      BNE    CHECK_OP_SWAP
000016D2                           961      
000016D2                           962  CHECK_OP_SWAP:                  ; This must go before CHECK_OP PEA as first 3 nibbles can be equivalent
000016D2  3038 1000                963      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000016D6  0240 FF48                964      ANDI.W #$FF48,D0
000016DA  B07C 4840                965      CMP.W  #$4840,D0
000016DE  6700 0106                966      BEQ    GROUP4_INVALID
000016E2  6600 0002                967      BNE    CHECK_OP_PEA
000016E6                           968   
000016E6                           969  CHECK_OP_PEA:               ; This must go after CHECK_OP_SWAP as first 3 nibbles can be equivalent
000016E6  3038 1000                970      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000016EA  0240 FF40                971      ANDI.W #$FF40,D0
000016EE  B07C 4840                972      CMP.W  #$4840,D0
000016F2  6700 00F2                973      BEQ    GROUP4_INVALID
000016F6  6600 0002                974      BNE    CHECK_OP_TAS
000016FA                           975      
000016FA                           976  CHECK_OP_TAS:
000016FA  3038 1000                977      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000016FE  0240 FFC0                978      ANDI.W #$FFC0,D0
00001702  B07C 4AC0                979      CMP.W  #$4AC0,D0
00001706  6700 00DE                980      BEQ    GROUP4_INVALID
0000170A  6600 0002                981      BNE    CHECK_OP_TST
0000170E                           982  
0000170E                           983  CHECK_OP_TST:               ; This must go after CHECK_OP_TAS as first 2 nibbles are equivalent
0000170E  3038 1000                984      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001712  0240 FF00                985      ANDI.W #$FF00,D0
00001716  B07C 4A00                986      CMP.W  #$4A00,D0
0000171A  6700 00CA                987      BEQ    GROUP4_INVALID
0000171E  6600 0002                988      BNE    CHECK_OP_TRAP
00001722                           989      
00001722                           990  CHECK_OP_TRAP:
00001722  3038 1000                991      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001726  0240 FFF0                992      ANDI.W #$FFF0,D0
0000172A  B07C 4E40                993      CMP.W  #$4E40,D0
0000172E  6700 00B6                994      BEQ    GROUP4_INVALID
00001732  6600 0002                995      BNE    CHECK_OP_LINK
00001736                           996      
00001736                           997  CHECK_OP_LINK:
00001736  3038 1000                998      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000173A  0240 FFF8                999      ANDI.W #$FFF8,D0
0000173E  B07C 4E50               1000      CMP.W  #$4E50,D0
00001742  6700 00A2               1001      BEQ    GROUP4_INVALID
00001746  6600 0002               1002      BNE    CHECK_OP_UNLK
0000174A                          1003  
0000174A                          1004  CHECK_OP_UNLK:
0000174A  3038 1000               1005      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000174E  0240 FFF8               1006      ANDI.W #$FFF8,D0
00001752  B07C 4E58               1007      CMP.W  #$4E58,D0
00001756  6700 008E               1008      BEQ    GROUP4_INVALID
0000175A  6600 0002               1009      BNE    CHECK_OP_MOVE_USP
0000175E                          1010      
0000175E                          1011  CHECK_OP_MOVE_USP:
0000175E  3038 1000               1012      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001762  0240 FFF0               1013      ANDI.W #$FFF0,D0
00001766  B07C 4E60               1014      CMP.W  #$4E60,D0
0000176A  6700 007A               1015      BEQ    GROUP4_INVALID
0000176E  6600 0002               1016      BNE    CHECK_OP_JMP
00001772                          1017  
00001772                          1018  CHECK_OP_JMP:
00001772  3038 1000               1019       MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001776  0240 FFC0               1020       ANDI.W #$FFC0,D0
0000177A  B07C 4EC0               1021       CMP.W  #$4EC0,D0
0000177E  6700 0066               1022       BEQ    GROUP4_INVALID
00001782  6600 0002               1023       BNE    CHECK_OP_CHK
00001786                          1024       
00001786                          1025  CHECK_OP_CHK:
00001786  3038 1000               1026      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
0000178A  0240 F180               1027      ANDI.W  #$F180,D0
0000178E  B07C 4180               1028      CMP.W   #$4180,D0
00001792  6700 03E2               1029      BEQ     INVALID_OP
00001796  6600 0002               1030      BNE     CHECK_OP_RTS
0000179A                          1031  
0000179A                          1032  *Supported OP codes to check
0000179A                          1033  CHECK_OP_RTS:
0000179A  3038 1000               1034      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000179E  B07C 4E75               1035      CMP.W  #$4E75,D0
000017A2  6600 0006               1036      BNE    CHECK_OP_LEA
000017A6  6700 04A2               1037      BEQ    PRINT_OP_RTS
000017AA                          1038      
000017AA                          1039  CHECK_OP_LEA:
000017AA  3038 1000               1040      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000017AE  0240 F1C0               1041      ANDI.W #$F1C0,D0
000017B2  B07C 41C0               1042      CMP.W  #$41C0,D0
000017B6  6600 0006               1043      BNE    CHECK_OP_JSR
000017BA  6700 049C               1044      BEQ    PRINT_OP_LEA
000017BE                          1045      
000017BE                          1046  CHECK_OP_JSR:
000017BE  3038 1000               1047      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000017C2  0240 FFC0               1048      ANDI.W #$FFC0,D0
000017C6  B07C 4E80               1049      CMP.W  #$4E80,D0
000017CA  6600 0006               1050      BNE    CHECK_OP_NEG
000017CE  6700 046C               1051      BEQ    PRINT_OP_JSR
000017D2                          1052      
000017D2                          1053  CHECK_OP_NEG:
000017D2  3038 1000               1054      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000017D6  0240 FF00               1055      ANDI.W #$FF00,D0
000017DA  B07C 4400               1056      CMP.W  #$4400,D0
000017DE  6600 0010               1057      BNE    CHECK_OP_MOVEM
000017E2  6700 0482               1058      BEQ    PRINT_OP_NEG
000017E6                          1059  
000017E6                          1060  GROUP4_INVALID:
000017E6  6000 038E               1061      BRA INVALID_OP
000017EA                          1062  
000017EA                          1063  GROUP4_SUCCESS:
000017EA  4CDF 0001               1064      MOVEM.L (SP)+,D0 
000017EE  4E75                    1065      RTS
000017F0                          1066      
000017F0                          1067  **************** COME BACK TO FINISH UP SIZE **********************************
000017F0                          1068  CHECK_OP_MOVEM:
000017F0  3038 1000               1069      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000017F4  0240 FB80               1070      ANDI.W #$FB80,D0
000017F8  B07C 4880               1071      CMP.W  #$4880,D0
000017FC  6600 0378               1072      BNE    INVALID_OP       ;If no code is found, it is invalid
00001800  6700 0472               1073      BEQ    PRINT_OP_MOVEM_W
00001804                          1074      
00001804                          1075  * GROUP_5
00001804                          1076  ********************************************************************************
00001804                          1077  * Supported OP code:
00001804                          1078  * SUBQ: $5, 11-9 DATA, 8 %1, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001804                          1079  * Unsupported OP codes: ADDQ, Scc, DBcc
00001804                          1080  * Validation checking:
00001804                          1081  * Check against, ADDQ, Scc, DBcc
00001804                          1082  ********************************************************************************
00001804                          1083  C_GROUP_5:
00001804                          1084  
00001804                          1085  *Unsupported OP codes
00001804                          1086  CHECK_OP_ADDQ:
00001804  3038 1000               1087      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001808  0240 F100               1088      ANDI.W #$F100,D0
0000180C  B07C 5100               1089      CMP.W  #$5100,D0
00001810  6700 0364               1090      BEQ    INVALID_OP
00001814  6600 0016               1091      BNE    CHECK_OP_Scc
00001818                          1092      
00001818                          1093  CHECK_OP_DBcc:
00001818  3038 1000               1094      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000181C  0240 F0C8               1095      ANDI.W #$F0C8,D0
00001820  B07C 50C8               1096      CMP.W  #$50C8,D0
00001824  6700 0350               1097      BEQ    INVALID_OP
00001828  6600 0002               1098      BNE    CHECK_OP_Scc 
0000182C                          1099  
0000182C                          1100  CHECK_OP_Scc:
0000182C  3038 1000               1101      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001830  0240 F0C0               1102      ANDI.W #$F0C0,D0 
00001834  B07C 50C0               1103      CMP.W  #$50C0,D0
00001838  6700 033C               1104      BEQ     INVALID_OP
0000183C  6600 0002               1105      BNE     CHECK_OP_SUBQ
00001840                          1106      
00001840                          1107  ;VALID_CHECK_OP_SUBQ:
00001840                          1108  ;    MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001840                          1109  ;    ANDI.W #$F1C0,D0        ;Bitmask check for Scc, DBcc and ADDQ
00001840                          1110  ;    CMP.W  #$51C0,D0        ;This should be the only valid one for SUBQ
00001840                          1111  ;    BEQ    INVALID_OP       ;If not equal it's invalid
00001840                          1112  ;    BNE    CHECK_OP_SUBQ
00001840                          1113  
00001840                          1114  *Supported OP code   
00001840                          1115  CHECK_OP_SUBQ     
00001840  3038 1000               1116      MOVE.W  CUR_OP_CODE,D0  ;Actual check for SUBQ
00001844  0240 F100               1117      ANDI.W #$F100,D0        ;Bitmask check for SUBQ
00001848  B07C 5100               1118      CMP.W  #$5100,D0        ;Compare the proper value
0000184C  6700 0442               1119      BEQ    PRINT_OP_SUBQ    ;If equal print it out
00001850  6600 0324               1120      BNE    INVALID_OP       ;Else the operand is invalid
00001854                          1121      
00001854                          1122  * GROUP_6
00001854                          1123  ********************************************************************************
00001854                          1124  * Supported OP codes
00001854                          1125  * BRA: $60, 7-0 8-Bit Displacement
00001854                          1126  * Bcc: $6, 11-8 Condition, 7-0 8-Bit Displacement
00001854                          1127  *   Branch: <Condition>   
00001854                          1128  *   BCS: %0101          
00001854                          1129  *   BGE: %1100      
00001854                          1130  *   BLT: %1101  
00001854                          1131  *   BVC: %1000
00001854                          1132  *   
00001854                          1133  *   MOVE.W #%0110010100000000   ;BCS
00001854                          1134  *   MOVE.W #%0110110001010101   ;BGE
00001854                          1135  *   MVE.W #%0110110110101010    ;BLT
00001854                          1136  *   MOVE.W #%0110100001010101   ;BVC
00001854                          1137  * Unsupported OP code: BSR
00001854                          1138  ********************************************************************************
00001854                          1139  C_GROUP_6:
00001854                          1140  
00001854                          1141  *Unsupported OP code
00001854                          1142  CHECK_OP_BSR:
00001854  3038 1000               1143      MOVE.W CUR_OP_CODE,D0
00001858  0240 FF00               1144      ANDI.W #$FF00,D0
0000185C  B07C 6100               1145      CMP.W  #$6100,D0
00001860  6700 0314               1146      BEQ     INVALID_OP
00001864  6600 0002               1147      BNE     CHECK_OP_BRA
00001868                          1148      
00001868                          1149  *Supported OP codes
00001868                          1150  CHECK_OP_BRA:
00001868  3038 1000               1151      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0       
0000186C  0240 FF00               1152      ANDI.W #$FF00,D0
00001870  B07C 6000               1153      CMP.W  #$6000,D0
00001874  6700 0460               1154      BEQ     PRINT_OP_BRA
00001878  6600 0002               1155      BNE     CHECK_OP_BCS
0000187C                          1156  
0000187C                          1157  CHECK_OP_BCS:
0000187C  3038 1000               1158      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001880  0240 FF00               1159      ANDI.W #$FF00,D0
00001884  B07C 6500               1160      CMP.W  #$6500,D0 
00001888  6700 0414               1161      BEQ    PRINT_OP_BCS
0000188C  6600 0002               1162      BNE    CHECK_OP_BGE
00001890                          1163      
00001890                          1164  CHECK_OP_BGE:
00001890  3038 1000               1165      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001894  0240 FF00               1166      ANDI.W #$FF00,D0
00001898  B07C 6C00               1167      CMP.W  #$6C00,D0 
0000189C  6700 040E               1168      BEQ    PRINT_OP_BGE
000018A0  6600 0002               1169      BNE    CHECK_OP_BLT
000018A4                          1170      
000018A4                          1171  CHECK_OP_BLT:
000018A4  3038 1000               1172      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000018A8  0240 FF00               1173      ANDI.W #$FF00,D0
000018AC  B07C 6D00               1174      CMP.W  #$6D00,D0 
000018B0  6700 0408               1175      BEQ    PRINT_OP_BLT
000018B4  6600 0002               1176      BNE    CHECK_OP_BVC
000018B8                          1177      
000018B8                          1178  CHECK_OP_BVC:
000018B8  3038 1000               1179      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000018BC  0240 FF00               1180      ANDI.W #$FF00,D0
000018C0  B07C 6800               1181      CMP.W  #$6800,D0 
000018C4  6700 0402               1182      BEQ    PRINT_OP_BVC
000018C8  6600 02AC               1183      BNE    INVALID_OP
000018CC                          1184      
000018CC                          1185      
000018CC                          1186  *GROUP_7
000018CC                          1187  ********************************************************************************
000018CC                          1188  * Currently no OP codes here are supported. MOVEQ is the only code in this group
000018CC                          1189  * Unsupported OP code: MOVEQ
000018CC                          1190  ********************************************************************************
000018CC                          1191  C_GROUP_7:
000018CC                          1192  CHECK_OP_MOVEQ
000018CC  3038 1000               1193      MOVE.W CUR_OP_CODE,D0
000018D0  0240 F100               1194      ANDI.W #$F100,D0
000018D4  B07C 7000               1195      CMP.W  #$7000,D0
000018D8  4EF9 00001B76           1196      JMP    INVALID_OP
000018DE                          1197  
000018DE                          1198  * GROUP_8
000018DE                          1199  ********************************************************************************
000018DE                          1200  * Supported OP code:
000018DE                          1201  * DIVS: $8, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
000018DE                          1202  * OR: $80, 7-6 Size, 5-3 EA Mode, 2-0 EA Register
000018DE                          1203  * Unsupported OP codes: DIVU, SBCD
000018DE                          1204  ********************************************************************************
000018DE                          1205  C_GROUP_8:
000018DE                          1206  
000018DE                          1207  *Unsupported OP codes
000018DE                          1208  CHECK_OP_DIVU:
000018DE  3038 1000               1209      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000018E2  0240 F1C0               1210      ANDI.W #$F1C0,D0
000018E6  B07C 80C0               1211      CMP.W #$80C0,D0
000018EA  6700 028A               1212      BEQ   INVALID_OP
000018EE  6600 0002               1213      BNE   CHECK_OP_SBCD 
000018F2                          1214  
000018F2                          1215  CHECK_OP_SBCD:
000018F2  3038 1000               1216      MOVE.W  CUR_OP_CODE,D0   ;Move current instruction set into D0
000018F6  0240 F100               1217      ANDI.W  #$F100,D0
000018FA  B07C 8100               1218      CMP.W   #$8100,D0
000018FE  6700 0276               1219      BEQ     INVALID_OP
00001902  6600 0002               1220      BNE     CHECK_OP_DIVS
00001906                          1221      
00001906                          1222  *Supported OP codes
00001906                          1223  CHECK_OP_DIVS:
00001906  3038 1000               1224      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
0000190A  0240 F1C0               1225      ANDI.W #$F1C0,D0
0000190E  B07C 81C0               1226      CMP.W #$81C0,D0
00001912  6700 03D0               1227      BEQ PRINT_OP_DIVS
00001916  6600 0002               1228      BNE CHECK_OP_OR
0000191A                          1229      
0000191A                          1230  CHECK_OP_OR:              ;At this point only remaining $8 code is OR
0000191A  4EF9 00001CF2           1231      JMP PRINT_OP_OR
00001920                          1232  * GROUP_9                      
00001920                          1233  ********************************************************************************
00001920                          1234  * Supported OP code:
00001920                          1235  * SUB: $9, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001920                          1236  * Unsupported OP codes: SUBX, SUBA
00001920                          1237  ********************************************************************************
00001920                          1238  C_GROUP_9:
00001920                          1239  
00001920                          1240  CHECK_OP_SUBA:             ;Check SUBA first as it has static bits
00001920  3038 1000               1241      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001924  0240 F0C0               1242      ANDI.W #$F0C0,D0
00001928  B07C 90C0               1243      CMP.W #$90C0,D0
0000192C  6700 0248               1244      BEQ INVALID_OP
00001930  6600 0002               1245      BNE CHECK_OP_SUBX
00001934                          1246  
00001934                          1247  CHECK_OP_SUBX:
00001934  3038 1000               1248      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001938  0240 F130               1249      ANDI.W #$F130,D0
0000193C  B07C 9100               1250      CMP.W #$9100,D0
00001940  6700 0234               1251      BEQ INVALID_OP
00001944  6600 0002               1252      BNE CHECK_OP_SUB
00001948                          1253  
00001948                          1254  CHECK_OP_SUB:           ;At this point only remaining $9 is SUB
00001948  4EF9 00001D00           1255      JMP PRINT_OP_SUB
0000194E                          1256  
0000194E                          1257  *GROUP_A
0000194E                          1258  ********************************************************************************
0000194E                          1259  * Currently no OP codes here are supported. There are no current OP codes here.
0000194E                          1260  ********************************************************************************
0000194E                          1261  C_GROUP_A:
0000194E  4EF9 00001B76           1262      JMP INVALID_OP
00001954                          1263  
00001954                          1264  * GROUP_B                     
00001954                          1265  ********************************************************************************
00001954                          1266  * Supported OP codes:
00001954                          1267  * EOR: $B, 11-9 Reg, 8 %1, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001954                          1268  * CMP: $B, 11-9 Reg, 8 %0, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001954                          1269  * The specific bit difference is listed 
00001954                          1270  * Unsupported OP codes: CMPM, CMPA
00001954                          1271  ********************************************************************************
00001954                          1272  C_GROUP_B:
00001954                          1273  
00001954                          1274  CHECK_OP_CMPM
00001954  3038 1000               1275      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001958  0240 F138               1276      ANDI.W #$F138,D0
0000195C  B07C B108               1277      CMP.W  #$B108,D0
00001960  6700 0214               1278      BEQ INVALID_OP
00001964  6600 0002               1279      BNE CHECK_OP_CMPA
00001968                          1280      
00001968                          1281  CHECK_OP_CMPA:
00001968  3038 1000               1282      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000196C  0240 F0C0               1283      ANDI.W #$F0C0,D0
00001970  B07C B0C0               1284      CMP.W  #$B0C0,D0
00001974  6700 0200               1285      BEQ INVALID_OP
00001978  6600 0002               1286      BNE CHECK_OP_EOR
0000197C                          1287      
0000197C                          1288  CHECK_OP_EOR:
0000197C  3038 1000               1289      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001980  0240 F100               1290      ANDI.W #$F100,D0
00001984  B07C B100               1291      CMP.W #$B100,D0
00001988  6700 0384               1292      BEQ PRINT_OP_EOR
0000198C  6600 0002               1293      BNE CHECK_OP_CMP
00001990                          1294      
00001990                          1295  CHECK_OP_CMP:
00001990  3038 1000               1296      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001994  0240 F100               1297      ANDI.W #$F100,D0
00001998  B07C B000               1298      CMP.W #$B000,D0
0000199C  6700 037E               1299      BEQ PRINT_OP_CMP
000019A0  6600 01D4               1300      BNE INVALID_OP
000019A4                          1301      
000019A4                          1302  * GROUP_C                     
000019A4                          1303  ********************************************************************************
000019A4                          1304  * Supported OP code:
000019A4                          1305  * MULS: $C, 11-8 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
000019A4                          1306  * Note: EXG OP mode has to be 01000, 01001, 10001, as such can never be 11 for
000019A4                          1307  * bits 7-6
000019A4                          1308  * Unsupported OP codes: MULU, ABCD, EXG, AND
000019A4                          1309  ********************************************************************************
000019A4                          1310  C_GROUP_C:
000019A4                          1311  *Unsupported OP codes
000019A4                          1312  CHECK_OP_MULU:
000019A4  3038 1000               1313      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
000019A8  0240 F1C0               1314      ANDI.W  #$F1C0,D0
000019AC  B07C C0C0               1315      CMP.W   #$C0C0,D0
000019B0  6700 01C4               1316      BEQ     INVALID_OP
000019B4  6600 0002               1317      BNE     CHECK_OP_ABCD
000019B8                          1318   
000019B8                          1319  CHECK_OP_ABCD:
000019B8  3038 1000               1320      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
000019BC  0240 F1F0               1321      ANDI.W  #$F1F0,D0
000019C0  B07C C100               1322      CMP.W   #$C100,D0
000019C4  6700 01B0               1323      BEQ     INVALID_OP
000019C8  6600 0002               1324      BNE     CHECK_OP_EXG
000019CC                          1325   
000019CC                          1326  CHECK_OP_EXG:
000019CC  3038 1000               1327      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
000019D0  0240 F130               1328      ANDI.W  #$F130,D0
000019D4  B07C C100               1329      CMP.W   #$C100,D0
000019D8  6700 019C               1330      BEQ     INVALID_OP
000019DC  6600 0016               1331      BNE     CHECK_OP_AND
000019E0                          1332         
000019E0                          1333  *Supported OP code
000019E0                          1334  CHECK_OP_MULS:
000019E0  3038 1000               1335      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000019E4  0240 F1C0               1336      ANDI.W #$F1C0,D0
000019E8  B07C C1C0               1337      CMP.W  #$C1C0,D0
000019EC  6700 033C               1338      BEQ    PRINT_OP_MULS
000019F0  6600 0002               1339      BNE    CHECK_OP_AND          ; OP_AND is completely dynamic outside of first nibble
000019F4                          1340  
000019F4                          1341  *Odd completely dynamic unsupported OP code    
000019F4                          1342  CHECK_OP_AND:                 ;This would be the only possible OP code left after CHECK_OP_MULS
000019F4  3038 1000               1343      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
000019F8  0240 F000               1344      ANDI.W  #$F000,D0
000019FC  B07C C000               1345      CMP.W   #$C000,D0
00001A00  6700 0174               1346      BEQ     INVALID_OP
00001A04                          1347  
00001A04                          1348  * GROUP_D                     
00001A04                          1349  ********************************************************************************
00001A04                          1350  * Supported OP codes:
00001A04                          1351  * ADD: $D, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001A04                          1352  * ADDA: $D, 11- 9 Reg, 8-6 OPMODE, 7-6 %11, 5-3 EA Mode, 2-0 EA Reg
00001A04                          1353  * The specific bit difference is listed out in the OPMODE field.
00001A04                          1354  * Unsupported: ADDX
00001A04                          1355  ********************************************************************************
00001A04                          1356  C_GROUP_D:
00001A04                          1357  
00001A04                          1358  CHECK_OP_ADDX:
00001A04  3038 1000               1359      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A08  0240 F130               1360      ANDI.W #$F130,D0
00001A0C  B07C D100               1361      CMP.W #$D100,D0
00001A10  6700 0164               1362      BEQ   INVALID_OP
00001A14  6600 0002               1363      BNE CHECK_OP_ADDA
00001A18                          1364  
00001A18                          1365  CHECK_OP_ADDA:
00001A18  3038 1000               1366      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A1C  0240 F0C0               1367      ANDI.W #$F0C0,D0
00001A20  B07C D0C0               1368      CMP.W #$D0C0,D0
00001A24  6700 0320               1369      BEQ   PRINT_OP_ADDA
00001A28  6600 0002               1370      BNE   CHECK_OP_ADD
00001A2C                          1371  
00001A2C                          1372  CHECK_OP_ADD:
00001A2C  4EF9 00001D38           1373      JMP PRINT_OP_ADD        ;Only remaining OP in $D is ADD
00001A32                          1374      
00001A32                          1375  * GROUP_E                     
00001A32                          1376  ********************************************************************************
00001A32                          1377  * Supported:
00001A32                          1378  * LSR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00001A32                          1379  * LSL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00001A32                          1380  * ASR: $E, $0, 8 %0, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00001A32                          1381  * ASL: $E, $0, 8 %1, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00001A32                          1382  * ROR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00001A32                          1383  * ROL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00001A32                          1384  * Count/Reg for LSR/LSL refers to shift count, where 0 = shift count of 8, 1-7 
00001A32                          1385  * refers to the respective value when i/r = 0. If i/r = 1, data register in the 
00001A32                          1386  * Count/Reg field specifies the shift count.  
00001A32                          1387  * For directional bit at 8, R = 0, L = 1
00001A32                          1388  * Count/Reg for ROR/ROL specifies rotate count instead of shift count.
00001A32                          1389  *
00001A32                          1390  * Unsupported: ROXL, ROXR
00001A32                          1391  ********************************************************************************
00001A32                          1392  C_GROUP_E:
00001A32                          1393  
00001A32                          1394  CHECK_OP_ROXR_NO_ROT:
00001A32  3038 1000               1395      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A36  0240 F4C0               1396      ANDI.W #$F4C0,D0
00001A3A  B07C E4C0               1397      CMP.W #$E4C0,D0
00001A3E  6700 0136               1398      BEQ   INVALID_OP
00001A42  6600 0002               1399      BNE   CHECK_OP_ROXL_NO_ROT
00001A46                          1400  
00001A46                          1401  CHECK_OP_ROXL_NO_ROT:
00001A46  3038 1000               1402      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A4A  0240 F5C0               1403      ANDI.W #$F5C0,D0
00001A4E  B07C E5C0               1404      CMP.W #$E5C0,D0
00001A52  6700 0122               1405      BEQ   INVALID_OP
00001A56  6600 002A               1406      BNE   CHECK_OP_LSR_NO_ROT
00001A5A                          1407  
00001A5A                          1408  CHECK_OP_ROR_NO_ROT:
00001A5A  3038 1000               1409      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A5E  0240 F7C0               1410      ANDI.W #$F7C0,D0
00001A62  B07C E6C0               1411      CMP.W #$E6C0,D0
00001A66  6700 0332               1412      BEQ   PRINT_OP_ROR
00001A6A  6600 0002               1413      BNE   CHECK_OP_ROL_NO_ROT
00001A6E                          1414      
00001A6E                          1415  CHECK_OP_ROL_NO_ROT:
00001A6E  3038 1000               1416      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A72  0240 F7C0               1417      ANDI.W #$F7C0,D0
00001A76  B07C E7C0               1418      CMP.W #$E7C0,D0
00001A7A  6700 0310               1419      BEQ   PRINT_OP_ROL
00001A7E  6600 0002               1420      BNE   CHECK_OP_LSR_NO_ROT
00001A82                          1421   
00001A82                          1422  CHECK_OP_LSR_NO_ROT:
00001A82  3038 1000               1423      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A86  0240 F2C0               1424      ANDI.W #$F2C0,D0
00001A8A  B07C E2C0               1425      CMP.W #$E2C0,D0
00001A8E  6700 02D2               1426      BEQ   PRINT_OP_LSR
00001A92  6600 0002               1427      BNE   CHECK_OP_LSL_NO_ROT
00001A96                          1428  
00001A96                          1429  CHECK_OP_LSL_NO_ROT:
00001A96  3038 1000               1430      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A9A  0240 F3C0               1431      ANDI.W #$F3C0,D0
00001A9E  B07C E3C0               1432      CMP.W #$E3C0,D0
00001AA2  6700 02B0               1433      BEQ   PRINT_OP_LSL
00001AA6  6600 0016               1434      BNE   CHECK_OP_ASL_NO_ROT
00001AAA                          1435  
00001AAA                          1436  CHECK_OP_ASR_NO_ROT:
00001AAA  3038 1000               1437      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AAE  0240 F1C0               1438      ANDI.W #$F1C0,D0
00001AB2  B07C E0C0               1439      CMP.W #$E0C0,D0
00001AB6  6700 02B8               1440      BEQ   PRINT_OP_ASR
00001ABA  6600 0002               1441      BNE   CHECK_OP_ASL_NO_ROT
00001ABE                          1442  
00001ABE                          1443  CHECK_OP_ASL_NO_ROT:
00001ABE  3038 1000               1444      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AC2  0240 F1C0               1445      ANDI.W #$F1C0,D0
00001AC6  B07C 01C0               1446      CMP.W #$01C0,D0
00001ACA  6700 02B2               1447      BEQ   PRINT_OP_ASL
00001ACE  668A                    1448      BNE   CHECK_OP_ROR_NO_ROT
00001AD0                          1449  
00001AD0                          1450  CHECK_OP_ROXR:
00001AD0  3038 1000               1451      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AD4  0240 F118               1452      ANDI.W #$F118,D0
00001AD8  B07C E010               1453      CMP.W  #$E010,D0
00001ADC  6700 0098               1454      BEQ    INVALID_OP
00001AE0  6600 0002               1455      BNE    CHECK_OP_ROXL
00001AE4                          1456      
00001AE4                          1457  CHECK_OP_ROXL:
00001AE4  3038 1000               1458      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AE8  0240 F118               1459      ANDI.W #$F118,D0
00001AEC  B07C E110               1460      CMP.W  #$E110,D0
00001AF0  6700 0084               1461      BEQ    INVALID_OP
00001AF4  6600 0002               1462      BNE    CHECK_OP_ROR
00001AF8                          1463  
00001AF8                          1464  CHECK_OP_ROR:
00001AF8  3038 1000               1465      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AFC  0240 F118               1466      ANDI.W #$F118,D0
00001B00  B07C E018               1467      CMP.W  #$E018,D0
00001B04  6700 0294               1468      BEQ    PRINT_OP_ROR
00001B08  6600 0002               1469      BNE    CHECK_OP_ROL
00001B0C                          1470  
00001B0C                          1471  CHECK_OP_ROL:
00001B0C  3038 1000               1472      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B10  0240 F118               1473      ANDI.W #$F118,D0
00001B14  B07C E118               1474      CMP.W  #$E118,D0
00001B18  6700 0272               1475      BEQ    PRINT_OP_ROL
00001B1C  6600 0002               1476      BNE    CHECK_OP_LSR
00001B20                          1477      
00001B20                          1478  CHECK_OP_LSR:
00001B20  3038 1000               1479      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B24  0240 F118               1480      ANDI.W #$F118,D0
00001B28  B07C E008               1481      CMP.W  #$E008,D0
00001B2C  6700 0234               1482      BEQ    PRINT_OP_LSR
00001B30  6600 0002               1483      BNE    CHECK_OP_LSL
00001B34                          1484  
00001B34                          1485  CHECK_OP_LSL:
00001B34  3038 1000               1486      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B38  0240 F118               1487      ANDI.W #$F118,D0
00001B3C  B07C E108               1488      CMP.W  #$E108,D0
00001B40  6700 0212               1489      BEQ    PRINT_OP_LSL
00001B44  6600 0002               1490      BNE    CHECK_OP_ASR
00001B48                          1491  
00001B48                          1492  CHECK_OP_ASR:
00001B48  3038 1000               1493      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B4C  0240 F118               1494      ANDI.W #$F118,D0
00001B50  B07C E000               1495      CMP.W  #$E000,D0
00001B54  6700 021A               1496      BEQ    PRINT_OP_ASR
00001B58  6600 0002               1497      BNE    CHECK_OP_ASL
00001B5C                          1498  
00001B5C                          1499  CHECK_OP_ASL:
00001B5C  3038 1000               1500      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B60  0240 F118               1501      ANDI.W #$F118,D0
00001B64  B07C E100               1502      CMP.W  #$E100,D0
00001B68  6700 0214               1503      BEQ    PRINT_OP_ASL
00001B6C  6600 0008               1504      BNE    INVALID_OP      ;Last possible OP code
00001B70                          1505  
00001B70                          1506  
00001B70                          1507  * GROUP_F
00001B70                          1508  ********************************************************************************
00001B70                          1509  * Currently no OP codes here are supported. There are no OP codes here
00001B70                          1510  ********************************************************************************
00001B70                          1511  C_GROUP_F:
00001B70  4EF9 00001B76           1512      JMP INVALID_OP
00001B76                          1513      
00001B76                          1514  * INVALID_OP                     
00001B76                          1515  ********************************************************************************
00001B76                          1516  * Any value that is not covered in the above groups would be considered invalid. 
00001B76                          1517  * The following values in the first nibble would also indicate that the 
00001B76                          1518  * operand codes is already invalid: $7, $A, $F.
00001B76                          1519  * For unsupported OP codes, display DATA $WXYZ   
00001B76                          1520  * THIS WILL NEED TO BE CHANGED TO DISPLAY: 1000 DATA $WXYZ IN THE FUTURE
00001B76                          1521  ********************************************************************************
00001B76                          1522  INVALID_OP:  ; Prints DATA for invalid op
00001B76  43F9 00001DB0           1523      LEA P_INVALID_OP,A1
00001B7C  103C 000D               1524      MOVE.B #13,D0
00001B80  4E4F                    1525      TRAP #15
00001B82  FFFF FFFF               1526      SIMHALT
00001B86                          1527      
00001B86                          1528  READ_NEXT_INSTRUCTION: ; Needs to read next instruction set {PLACEHOLDER}
00001B86  FFFF FFFF               1529      SIMHALT
00001B8A                          1530  
00001B8A                          1531  MAKE_VAL_ASCII:
00001B8A  0C00 0009               1532      CMPI.B  #$9,D0
00001B8E  6E00 0008               1533      BGT     LETTER_ASCII
00001B92  6F00 000A               1534      BLE     NUMBER_ASCII
00001B96  4E75                    1535      RTS
00001B98                          1536      
00001B98                          1537  LETTER_ASCII:
00001B98  0600 0037               1538      ADDI.B #$37,D0 ; A-F
00001B9C  4E75                    1539      RTS
00001B9E                          1540      
00001B9E                          1541  NUMBER_ASCII
00001B9E  0600 0030               1542      ADDI.B #$30,D0 ; 0-9
00001BA2  4E75                    1543      RTS
00001BA4                          1544      
00001BA4                          1545  ADD_PERIOD:
00001BA4  2F00                    1546      MOVE.L D0,-(SP)
00001BA6  103C 0000               1547      MOVE.B #$0,D0
00001BAA  0600 0046               1548      ADDI.B #$46,D0
00001BAE  201F                    1549      MOVE.L (SP)+,D0
00001BB0                          1550  ********************** PRINTING ROUTINES **************************************
00001BB0                          1551  * Description: These routines are to print the associated op codes, by placing
00001BB0                          1552  * them in the appropriate area to the buffer
00001BB0                          1553  *
00001BB0                          1554  * Registers used: A1 for loading, A6 for EA parsing.
00001BB0                          1555  *
00001BB0                          1556  * Precondition: The relevant opcode has been identified correctly.
00001BB0                          1557  *
00001BB0                          1558  * Postcondition: Prints out the associated opcode to the buffer.
00001BB0                          1559  
00001BB0                          1560  * THIS NEEDS TO BE RETOOLED TO PRINT TO BUFFER NOT TO CONSOLE
00001BB0                          1561  *******************************************************************************
00001BB0                          1562  
00001BB0                          1563  ****************************** GROUP 0 **************************************** 
00001BB0                          1564  PRINT_OP_ORI:
00001BB0  43F9 00001DC7           1565      LEA P_OP_ORI,A1
00001BB6  4EB9 00001DA8           1566      JSR PRINT_OP
00001BBC  4E75                    1567      RTS
00001BBE                          1568  PRINT_OP_CMPI:
00001BBE  43F9 00001DCB           1569      LEA P_OP_CMPI,A1
00001BC4  4EB9 00001DA8           1570      JSR PRINT_OP
00001BCA  4E75                    1571      RTS
00001BCC                          1572  PRINT_OP_STATIC_BCLR:
00001BCC  43F9 00001DD0           1573      LEA P_OP_STATIC_BCLR,A1
00001BD2  4EB9 00001DA8           1574      JSR PRINT_OP
00001BD8  4E75                    1575      RTS
00001BDA                          1576  PRINT_OP_DYNAMIC_BCLR:
00001BDA  43F9 00001DD5           1577      LEA P_OP_DYNAMIC_BCLR,A1
00001BE0  4EB9 00001DA8           1578      JSR PRINT_OP
00001BE6  4E75                    1579      RTS
00001BE8                          1580  ******************************* END OF GROUP 0 ********************************
00001BE8                          1581  
00001BE8                          1582  ****************************** GROUP 1 ****************************************    
00001BE8                          1583  PRINT_OP_MOVEB:
00001BE8  43F9 00001DDA           1584      LEA P_OP_MOVEB,A1
00001BEE  4EB9 00001DA8           1585      JSR PRINT_OP
00001BF4  4E75                    1586      RTS
00001BF6                          1587  ******************************* END OF GROUP 1 ********************************
00001BF6                          1588      
00001BF6                          1589  ****************************** GROUP 2 **************************************** 
00001BF6                          1590  PRINT_OP_MOVEA_L:
00001BF6  43F9 00001DE1           1591      LEA P_OP_MOVEA_L,A1
00001BFC  4EB9 00001DA8           1592      JSR PRINT_OP
00001C02  4E75                    1593      RTS
00001C04                          1594  PRINT_OP_MOVE_L:
00001C04  43F9 00001DE9           1595      LEA P_OP_MOVE_L,A1
00001C0A  4EB9 00001DA8           1596      JSR PRINT_OP
00001C10  4E75                    1597      RTS
00001C12                          1598  ******************************* END OF GROUP 2 ********************************
00001C12                          1599      
00001C12                          1600  ****************************** GROUP 3 ****************************************    
00001C12                          1601  PRINT_OP_MOVEA_W:
00001C12  43F9 00001DF0           1602      LEA P_OP_MOVEA_W,A1
00001C18  4EB9 00001DA8           1603      JSR PRINT_OP
00001C1E  4E75                    1604      RTS
00001C20                          1605  PRINT_OP_MOVE_W:
00001C20  43F9 00001DF8           1606      LEA P_OP_MOVE_W,A1
00001C26  4EB9 00001DA8           1607      JSR PRINT_OP
00001C2C  4E75                    1608      RTS
00001C2E                          1609  ******************************* END OF GROUP 3 ********************************
00001C2E                          1610  
00001C2E                          1611  ****************************** GROUP 4 ****************************************
00001C2E                          1612  PRINT_OP_NOP:
00001C2E  43F9 00001E17           1613      LEA P_OP_NOP,A1
00001C34  4EB9 00001DA8           1614      JSR PRINT_OP
00001C3A  4E75                    1615      RTS
00001C3C                          1616  PRINT_OP_JSR:
00001C3C  43F9 00001E13           1617      LEA P_OP_JSR,A1
00001C42  4EB9 00001DA8           1618      JSR PRINT_OP
00001C48  4E75                    1619      RTS
00001C4A                          1620  PRINT_OP_RTS:
00001C4A  43F9 00001E1B           1621      LEA P_OP_RTS,A1
00001C50  4EB9 00001DA8           1622      JSR PRINT_OP
00001C56  4E75                    1623      RTS
00001C58                          1624  PRINT_OP_LEA:
00001C58  43F9 00001E0F           1625      LEA P_OP_LEA,A1
00001C5E  4EB9 00001DA8           1626      JSR PRINT_OP
00001C64  4E75                    1627      RTS
00001C66                          1628  PRINT_OP_NEG:
00001C66  43F9 00001E1F           1629      LEA P_OP_NEG,A1
00001C6C  4EB9 00001DA8           1630      JSR PRINT_OP
00001C72  4E75                    1631      RTS
00001C74                          1632  PRINT_OP_MOVEM_W:
00001C74  43F9 00001DFF           1633      LEA P_OP_MOVEM_W,A1
00001C7A  4EB9 00001DA8           1634      JSR PRINT_OP
00001C80  4E75                    1635      RTS
00001C82                          1636  PRINT_OP_MOVEM_L:
00001C82  43F9 00001E07           1637      LEA P_OP_MOVEM_L,A1
00001C88  4EB9 00001DA8           1638      JSR PRINT_OP
00001C8E  4E75                    1639      RTS
00001C90                          1640  ******************************* END OF GROUP 4 ********************************
00001C90                          1641      
00001C90                          1642  ****************************** GROUP 5 ****************************************
00001C90                          1643  PRINT_OP_SUBQ:
00001C90  43F9 00001E23           1644      LEA P_OP_SUBQ,A1
00001C96  4EB9 00001DA8           1645      JSR PRINT_OP
00001C9C  4E75                    1646      RTS
00001C9E                          1647  ******************************* END OF GROUP 5 ********************************
00001C9E                          1648  
00001C9E                          1649  ****************************** GROUP 6 ****************************************
00001C9E                          1650  PRINT_OP_BCS:
00001C9E  43F9 00001E2C           1651      LEA P_OP_BCS,A1
00001CA4  4EB9 00001DA8           1652      JSR PRINT_OP
00001CAA  4E75                    1653      RTS
00001CAC                          1654  PRINT_OP_BGE:
00001CAC  43F9 00001E30           1655      LEA P_OP_BGE,A1
00001CB2  4EB9 00001DA8           1656      JSR PRINT_OP
00001CB8  4E75                    1657      RTS
00001CBA                          1658  PRINT_OP_BLT:
00001CBA  43F9 00001E34           1659      LEA P_OP_BLT,A1
00001CC0  4EB9 00001DA8           1660      JSR PRINT_OP
00001CC6  4E75                    1661      RTS
00001CC8                          1662  PRINT_OP_BVC:
00001CC8  43F9 00001E38           1663      LEA P_OP_BVC,A1
00001CCE  4EB9 00001DA8           1664      JSR PRINT_OP
00001CD4  4E75                    1665      RTS
00001CD6                          1666  PRINT_OP_BRA:
00001CD6  43F9 00001E28           1667      LEA P_OP_BRA,A1
00001CDC  4EB9 00001DA8           1668      JSR PRINT_OP
00001CE2  4E75                    1669      RTS
00001CE4                          1670  ******************************* END OF GROUP 6 ********************************
00001CE4                          1671  
00001CE4                          1672  ****************************** GROUP 7 ****************************************
00001CE4                          1673  * No currently supported OP codes to print here.
00001CE4                          1674  ******************************* END OF GROUP 7 ********************************
00001CE4                          1675  
00001CE4                          1676  ****************************** GROUP 8 ****************************************
00001CE4                          1677  PRINT_OP_DIVS:
00001CE4  43F9 00001E3C           1678      LEA P_OP_DIVS,A1
00001CEA  4EB9 00001DA8           1679      JSR PRINT_OP
00001CF0  4E75                    1680      RTS
00001CF2                          1681  PRINT_OP_OR:
00001CF2  43F9 00001E41           1682      LEA P_OP_OR,A1
00001CF8  4EB9 00001DA8           1683      JSR PRINT_OP
00001CFE  4E75                    1684      RTS
00001D00                          1685  ******************************* END OF GROUP 8 ********************************
00001D00                          1686  
00001D00                          1687  ****************************** GROUP 9 ****************************************
00001D00                          1688  PRINT_OP_SUB:
00001D00  43F9 00001E44           1689      LEA P_OP_SUB,A1
00001D06  4EB9 00001DA8           1690      JSR PRINT_OP
00001D0C  4E75                    1691      RTS
00001D0E                          1692  ******************************* END OF GROUP 9 ********************************
00001D0E                          1693  
00001D0E                          1694  ****************************** GROUP A ****************************************
00001D0E                          1695  * No currently supported OP codes to print here.
00001D0E                          1696  ******************************* END OF GROUP A ********************************
00001D0E                          1697  
00001D0E                          1698  ****************************** GROUP B ****************************************
00001D0E                          1699  PRINT_OP_EOR:
00001D0E  43F9 00001E48           1700      LEA P_OP_EOR,A1
00001D14  4EB9 00001DA8           1701      JSR PRINT_OP
00001D1A  4E75                    1702      RTS
00001D1C                          1703  PRINT_OP_CMP:
00001D1C  43F9 00001E4C           1704      LEA P_OP_CMP,A1
00001D22  4EB9 00001DA8           1705      JSR PRINT_OP
00001D28  4E75                    1706      RTS
00001D2A                          1707  ******************************* END OF GROUP B ********************************
00001D2A                          1708  
00001D2A                          1709  ****************************** GROUP C ****************************************
00001D2A                          1710  PRINT_OP_MULS:
00001D2A  43F9 00001E50           1711      LEA P_OP_MULS,A1
00001D30  4EB9 00001DA8           1712      JSR PRINT_OP
00001D36  4E75                    1713      RTS
00001D38                          1714  ******************************* END OF GROUP C ********************************
00001D38                          1715  
00001D38                          1716  ****************************** GROUP D ****************************************
00001D38                          1717  PRINT_OP_ADD:
00001D38  43F9 00001E5A           1718      LEA P_OP_ADD,A1
00001D3E  4EB9 00001DA8           1719      JSR PRINT_OP
00001D44  4E75                    1720      RTS
00001D46                          1721  PRINT_OP_ADDA:
00001D46  43F9 00001E55           1722      LEA P_OP_ADDA,A1
00001D4C  4EB9 00001DA8           1723      JSR PRINT_OP
00001D52  4E75                    1724      RTS
00001D54                          1725  
00001D54                          1726  ******************************* END OF GROUP D ********************************
00001D54                          1727  
00001D54                          1728  ****************************** GROUP E ****************************************
00001D54                          1729  PRINT_OP_LSL:
00001D54  43F9 00001E62           1730      LEA P_OP_LSL,A1
00001D5A  4EB9 00001DA8           1731      JSR PRINT_OP
00001D60  4E75                    1732      RTS
00001D62                          1733  PRINT_OP_LSR:
00001D62  43F9 00001E5E           1734      LEA P_OP_LSR,A1
00001D68  4EB9 00001DA8           1735      JSR PRINT_OP
00001D6E  4E75                    1736      RTS
00001D70                          1737  PRINT_OP_ASR:
00001D70  43F9 00001E66           1738      LEA P_OP_ASR,A1
00001D76  4EB9 00001DA8           1739      JSR PRINT_OP
00001D7C  4E75                    1740      RTS
00001D7E                          1741  PRINT_OP_ASL:
00001D7E  43F9 00001E6A           1742      LEA P_OP_ASL,A1
00001D84  4EB9 00001DA8           1743      JSR PRINT_OP
00001D8A  4E75                    1744      RTS
00001D8C                          1745  PRINT_OP_ROL:
00001D8C  43F9 00001E72           1746      LEA P_OP_ROL,A1
00001D92  4EB9 00001DA8           1747      JSR PRINT_OP
00001D98  4E75                    1748      RTS
00001D9A                          1749  PRINT_OP_ROR:
00001D9A  43F9 00001E6E           1750      LEA P_OP_ROR,A1
00001DA0  4EB9 00001DA8           1751      JSR PRINT_OP
00001DA6  4E75                    1752      RTS
00001DA8                          1753  ******************************* END OF GROUP E ********************************
00001DA8                          1754  
00001DA8                          1755  ****************************** GROUP F ****************************************
00001DA8                          1756  * No currently supported OP codes to print here.
00001DA8                          1757  ******************************* END OF GROUP F ********************************
00001DA8                          1758  
00001DA8                          1759  
00001DA8                          1760  
00001DA8                          1761  PRINT_OP:   ;Prints current op code byte
00001DA8                          1762      ;MOVE.W (A4),(A1)       ; NEEDS TO USE G_BUFFER LATER
00001DA8  103C 000D               1763      MOVE.B #13,D0
00001DAC  4E4F                    1764      TRAP #15
00001DAE  4E75                    1765      RTS
00001DB0                          1766  ******************* END OF PRINTING ROUTINES **********************************
00001DB0                          1767  
00001DB0                          1768  ******************* END OF JMP LABELS *****************************************
00001DB0                          1769  
00001DB0                          1770  ******************* DATA CONSTANT PRINTS **************************************
00001DB0                          1771  * Formatting is as follows: P_OP_<OPCODE>, where P = Print, OP = Operation,
00001DB0                          1772  * <OPCODE> is any valid operand
00001DB0                          1773  
00001DB0= 44 41 54 41 00          1774  P_INVALID_OP    DC.B    'DATA',0
00001DB5= 46 6F 75 6E 64 20 ...   1775  OP_FOUND        DC.B    'Found OP',0 ; this should be taken out later
00001DBE= 2E 42 00                1776  P_SIZE_B        DC.B    '.B',0
00001DC1= 2E 57 00                1777  P_SIZE_W        DC.B    '.W',0
00001DC4= 2E 4C 00                1778  P_SIZE_L        DC.B    '.L',0
00001DC7= 4F 52 49 00             1779  P_OP_ORI        DC.B    'ORI',0
00001DCB= 43 4D 50 49 00          1780  P_OP_CMPI       DC.B    'CMPI',0
00001DD0= 42 43 4C 52 00          1781  P_OP_STATIC_BCLR     DC.B    'BCLR',0
00001DD5= 42 43 4C 52 00          1782  P_OP_DYNAMIC_BCLR     DC.B    'BCLR',0
00001DDA= 4D 4F 56 45 2E 42 00    1783  P_OP_MOVEB      DC.B    'MOVE.B',0
00001DE1= 4D 4F 56 45 41 2E ...   1784  P_OP_MOVEA_L    DC.B    'MOVEA.L',0 
00001DE9= 4D 4F 56 45 2E 4C 00    1785  P_OP_MOVE_L     DC.B    'MOVE.L',0
00001DF0= 4D 4F 56 45 41 2E ...   1786  P_OP_MOVEA_W    DC.B    'MOVEA.W',0
00001DF8= 4D 4F 56 45 2E 57 00    1787  P_OP_MOVE_W     DC.B    'MOVE.W',0
00001DFF= 4D 4F 56 45 4D 2E ...   1788  P_OP_MOVEM_W    DC.B    'MOVEM.W',0
00001E07= 4D 4F 56 45 4D 2E ...   1789  P_OP_MOVEM_L    DC.B    'MOVEM.L',0
00001E0F= 4C 45 41 00             1790  P_OP_LEA        DC.B    'LEA',0
00001E13= 4A 53 52 00             1791  P_OP_JSR        DC.B    'JSR',0
00001E17= 4E 4F 50 00             1792  P_OP_NOP        DC.B    'NOP',0
00001E1B= 52 54 53 00             1793  P_OP_RTS        DC.B    'RTS',0
00001E1F= 4E 45 47 00             1794  P_OP_NEG        DC.B    'NEG',0
00001E23= 53 55 42 51 00          1795  P_OP_SUBQ       DC.B    'SUBQ',0
00001E28= 42 52 41 00             1796  P_OP_BRA        DC.B    'BRA',0
00001E2C= 42 43 53 00             1797  P_OP_BCS        DC.B    'BCS',0
00001E30= 42 47 45 00             1798  P_OP_BGE        DC.B    'BGE',0
00001E34= 42 4C 54 00             1799  P_OP_BLT        DC.B    'BLT',0
00001E38= 42 56 43 00             1800  P_OP_BVC        DC.B    'BVC',0
00001E3C= 44 49 56 53 00          1801  P_OP_DIVS       DC.B    'DIVS',0
00001E41= 4F 52 00                1802  P_OP_OR         DC.B    'OR',0
00001E44= 53 55 42 00             1803  P_OP_SUB        DC.B    'SUB',0
00001E48= 45 4F 52 00             1804  P_OP_EOR        DC.B    'EOR',0
00001E4C= 43 4D 50 00             1805  P_OP_CMP        DC.B    'CMP',0
00001E50= 4D 55 4C 53 00          1806  P_OP_MULS       DC.B    'MULS',0
00001E55= 41 44 44 41 00          1807  P_OP_ADDA       DC.B    'ADDA',0
00001E5A= 41 44 44 00             1808  P_OP_ADD        DC.B    'ADD',0
00001E5E= 4C 53 52 00             1809  P_OP_LSR        DC.B    'LSR',0
00001E62= 4C 53 4C 00             1810  P_OP_LSL        DC.B    'LSL',0
00001E66= 41 53 52 00             1811  P_OP_ASR        DC.B    'ASR',0
00001E6A= 41 53 4C 00             1812  P_OP_ASL        DC.B    'ASL',0
00001E6E= 52 4F 52 00             1813  P_OP_ROR        DC.B    'ROR',0
00001E72= 52 4F 4C 00             1814  P_OP_ROL        DC.B    'ROL',0
00001E76                          1815  ***************** END OF DATA CONSTANT PRINTS ***********************************
00001E76                          1816   
00001E76                          1817  
00001E76                          1818  **
00001E76                          1819  * AddStrToBuffer
00001E76                          1820  **
00001E76                          1821  * Adds the given NULL-terminated string to the specified buffer.
00001E76                          1822  *
00001E76                          1823  * Default buffer length is 80 characters, but can be modified in the argument
00001E76                          1824  * variables.
00001E76                          1825  *
00001E76                          1826  * If the buffer length is exceeded, either due to lack of a NULL character or
00001E76                          1827  * an incorrectly specified length, 1 is returned. Otherwise, 0 is returned to
00001E76                          1828  * indicate success.
00001E76                          1829  *
00001E76                          1830  **
00001E76                          1831  * @param Arg_AddStrToBuffer_String              Pointer to string
00001E76                          1832  * @param Arg_AddStrToBuffer_Buffer              Pointer to buffer
00001E76                          1833  * @param Arg_AddStrToBuffer_BufferLength        Length of buffer (default 80 chars)
00001E76                          1834  * @return Ret_AddStrToBuffer_Success            0 if successful, 1 otherwise.
00001E76                          1835  * @branch _AddStrToBuffer_FindBufferNullLoop    Loop to find NULL in buffer
00001E76                          1836  * @branch _AddStrToBuffer_AddLoop               Loop to add string to buffer
00001E76                          1837  * @branch _AddStrToBuffer_Success               Branch when string successfully added
00001E76                          1838  * @branch _AddStrToBuffer_StringLengthExceeded  Branch when length exceeded (either string or buffer)
00001E76                          1839  * @branch _AddStrToBuffer_End                   End of subroutine
00001E76                          1840  **
00001E76                          1841  Arg_AddStrToBuffer_String           DS.L    1
00001E7A                          1842  Arg_AddStrToBuffer_Buffer           DS.L    1
00001E7E= 00000050                1843  Arg_AddStrToBuffer_BufferLength     DC.L    80
00001E82                          1844  Ret_AddStrToBuffer_Success          DS.B    1
00001E83                          1845  
00001E84                          1846  AddStrToBuffer:                     DS.W    0
00001E84  48E7 C0C0               1847      MOVEM.L     D0-D1/A0-A1, -(SP)                  * Backup registers to stack
00001E88                          1848  
00001E88  2078 1E76               1849      MOVE.L      Arg_AddStrToBuffer_String, A0       * Load string pointer
00001E8C  2278 1E7A               1850      MOVE.L      Arg_AddStrToBuffer_Buffer, A1       * Load buffer pointer
00001E90  2038 1E7E               1851      MOVE.L      Arg_AddStrToBuffer_BufferLength, D0 * Load buffer length
00001E94  4278 1E82               1852      CLR.W       Ret_AddStrToBuffer_Success          * Clear success bit
00001E98  4281                    1853      CLR.L       D1                                  * Clear loop counter
00001E9A                          1854  
00001E9A                          1855  _AddStrToBuffer_BufferLoop
00001E9A  0C11 0000               1856      CMPI.B      #0, (A1)                            * If buffer char is NULL
00001E9E  6700 000E               1857      BEQ         _AddStrToBuffer_AddLoop             * Start adding string to bufer
00001EA2                          1858      
00001EA2  B280                    1859      CMP.L       D0, D1                              * If counter >= max length
00001EA4  6C00 0024               1860      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
00001EA8                          1861      
00001EA8  5289                    1862      ADDQ.L      #1, A1                              * Go to next character
00001EAA  5201                    1863      ADDQ.B      #1, D1                              * Increment counter
00001EAC  60EC                    1864      BRA         _AddStrToBuffer_BufferLoop          * Loop back
00001EAE                          1865      
00001EAE                          1866  _AddStrToBuffer_AddLoop
00001EAE  0C10 0000               1867      CMPI.B      #0, (A0)                            * If string char is NULL
00001EB2  6700 000E               1868      BEQ         _AddStrToBuffer_Success             * String successfully added
00001EB6                          1869      
00001EB6  B200                    1870      CMP.B       D0, D1                              * If counter >= max length
00001EB8  6C00 0010               1871      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
00001EBC                          1872      
00001EBC  12D8                    1873      MOVE.B      (A0)+, (A1)+                        * Move string char to buffer char
00001EBE  5201                    1874      ADDQ.B      #1, D1                              * Increment counter
00001EC0  60EC                    1875      BRA         _AddStrToBuffer_AddLoop             * Loop back
00001EC2                          1876  
00001EC2                          1877  _AddStrToBuffer_Success
00001EC2  12BC 0000               1878      MOVE.B      #0, (A1)                            * Add NULL to end of string
00001EC6  6000 0008               1879      BRA         _AddStrToBuffer_End                 * Finish subroutine
00001ECA                          1880  
00001ECA                          1881  _AddStrToBuffer_LengthExceeded
00001ECA  31FC 0001 1E82          1882      MOVE.W      #1, Ret_AddStrToBuffer_Success      * Invalidate success bit
00001ED0                          1883  
00001ED0                          1884  _AddStrToBuffer_End
00001ED0  4CDF 0303               1885      MOVEM.L     (SP)+, D0-D1/A0-A1                  * Restore registers from stack
00001ED4  4E75                    1886      RTS                  
00001ED6                          1887     
00001ED6                          1888      END START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDSTRTOBUFFER      1E84
ADD_PERIOD          1BA4
ARG_ADDSTRTOBUFFER_BUFFER  1E7A
ARG_ADDSTRTOBUFFER_BUFFERLENGTH  1E7E
ARG_ADDSTRTOBUFFER_STRING  1E76
BIT_CHECK_MOVEP     1426
B_BUFFER            1053
CHECK_OP_ABCD       19B8
CHECK_OP_ADD        1A2C
CHECK_OP_ADDA       1A18
CHECK_OP_ADDI       1386
CHECK_OP_ADDQ       1804
CHECK_OP_ADDX       1A04
CHECK_OP_AND        19F4
CHECK_OP_ANDI       135E
CHECK_OP_ANDI_TO_CCR  131E
CHECK_OP_ANDI_TO_SR  132E
CHECK_OP_ASL        1B5C
CHECK_OP_ASL_NO_ROT  1ABE
CHECK_OP_ASR        1B48
CHECK_OP_ASR_NO_ROT  1AAA
CHECK_OP_BCS        187C
CHECK_OP_BGE        1890
CHECK_OP_BLT        18A4
CHECK_OP_BRA        1868
CHECK_OP_BSR        1854
CHECK_OP_BVC        18B8
CHECK_OP_CHK        1786
CHECK_OP_CLR        1670
CHECK_OP_CMP        1990
CHECK_OP_CMPA       1968
CHECK_OP_CMPI       146E
CHECK_OP_CMPM       1954
CHECK_OP_DBCC       1818
CHECK_OP_DIVS       1906
CHECK_OP_DIVU       18DE
CHECK_OP_DYNAMIC_BCHG  13FE
CHECK_OP_DYNAMIC_BCLR  14A2
CHECK_OP_DYNAMIC_BSET  1412
CHECK_OP_DYNAMIC_BTST  13EA
CHECK_OP_EOR        197C
CHECK_OP_EORI       139A
CHECK_OP_EORI_TO_CCR  133E
CHECK_OP_EORI_TO_SR  134E
CHECK_OP_EXG        19CC
CHECK_OP_EXT        1698
CHECK_OP_ILLEGAL    15E0
CHECK_OP_JMP        1772
CHECK_OP_JSR        17BE
CHECK_OP_LEA        17AA
CHECK_OP_LINK       1736
CHECK_OP_LSL        1B34
CHECK_OP_LSL_NO_ROT  1A96
CHECK_OP_LSR        1B20
CHECK_OP_LSR_NO_ROT  1A82
CHECK_OP_MOVEA_L    14F2
CHECK_OP_MOVEA_W    1552
CHECK_OP_MOVEM      17F0
CHECK_OP_MOVEP      1440
CHECK_OP_MOVEQ      18CC
CHECK_OP_MOVE_B     14CA
CHECK_OP_MOVE_FROM_SR  1620
CHECK_OP_MOVE_L     152A
CHECK_OP_MOVE_TO_CCR  1634
CHECK_OP_MOVE_TO_SR  1648
CHECK_OP_MOVE_USP   175E
CHECK_OP_MOVE_W     158A
CHECK_OP_MULS       19E0
CHECK_OP_MULU       19A4
CHECK_OP_NBCD       16BE
CHECK_OP_NEG        17D2
CHECK_OP_NEGX       165C
CHECK_OP_NOP        15D0
CHECK_OP_NOT        1684
CHECK_OP_OR         191A
CHECK_OP_ORI        1454
CHECK_OP_ORI_TO_CCR  12FE
CHECK_OP_ORI_TO_SR  130E
CHECK_OP_PEA        16E6
CHECK_OP_RESET      15C0
CHECK_OP_ROL        1B0C
CHECK_OP_ROL_NO_ROT  1A6E
CHECK_OP_ROR        1AF8
CHECK_OP_ROR_NO_ROT  1A5A
CHECK_OP_ROXL       1AE4
CHECK_OP_ROXL_NO_ROT  1A46
CHECK_OP_ROXR       1AD0
CHECK_OP_ROXR_NO_ROT  1A32
CHECK_OP_RTE        15F0
CHECK_OP_RTR        1610
CHECK_OP_RTS        179A
CHECK_OP_SBCD       18F2
CHECK_OP_SCC        182C
CHECK_OP_STATIC_BCHG  13C2
CHECK_OP_STATIC_BCLR  1488
CHECK_OP_STATIC_BSET  13D6
CHECK_OP_STATIC_BTST  13AE
CHECK_OP_STOP       15B0
CHECK_OP_SUB        1948
CHECK_OP_SUBA       1920
CHECK_OP_SUBI       1372
CHECK_OP_SUBQ       1840
CHECK_OP_SUBX       1934
CHECK_OP_SWAP       16D2
CHECK_OP_TAS        16FA
CHECK_OP_TRAP       1722
CHECK_OP_TRAPV      1600
CHECK_OP_TST        170E
CHECK_OP_UNLK       174A
CUR_OP_CODE         1000
C_GROUP_0           12FA
C_GROUP_1           14C6
C_GROUP_2           14EE
C_GROUP_3           154E
C_GROUP_4           15AE
C_GROUP_5           1804
C_GROUP_6           1854
C_GROUP_7           18CC
C_GROUP_8           18DE
C_GROUP_9           1920
C_GROUP_A           194E
C_GROUP_B           1954
C_GROUP_C           19A4
C_GROUP_D           1A04
C_GROUP_E           1A32
C_GROUP_F           1B70
EA_SIZE             1002
FIND_2_BIT_SIZE_TO_EA  1224
FIND_3_BIT_REG_TO_EA  123A
FIND_MOVEA_L_DIFFERENCE  1504
FIND_MOVEA_W_DIFFERENCE  1564
FIND_TRAILING_BITS_TO_EA  1296
FIRST_3             10A4
FOURTH_3            10A7
GROUP0_INVALID      14BC
GROUP0_SUCCESS      14C0
GROUP1_INVALID      14E4
GROUP1_SUCCESS      14E8
GROUP2_INVALID      1544
GROUP2_SUCCESS      1548
GROUP3_INVALID      15A4
GROUP3_SUCCESS      15A8
GROUP4_INVALID      17E6
GROUP4_SUCCESS      17EA
GROUP_0             10DC
GROUP_1             10EE
GROUP_2             1100
GROUP_3             1112
GROUP_4             1124
GROUP_5             1136
GROUP_6             1148
GROUP_7             115A
GROUP_8             116C
GROUP_9             117E
GROUP_A             1190
GROUP_B             11A2
GROUP_C             11B4
GROUP_D             11C6
GROUP_E             11D8
GROUP_F             11EA
G_BUFFER            1003
INVALID_OP          1B76
LETTER_ASCII        1B98
LOAD_OP_CODE        10CA
MAKE_VAL_ASCII      1B8A
MNEMONIC            10A3
MOVE_AND_MOVEA_PARSE_EA  1250
MOVE_LAST_6_BITS_TO_EA  1202
NUMBER_ASCII        1B9E
OP_FOUND            1DB5
OP_JSR_DONE         11F8
OP_JSR_ROUTINE      10D4
PARSE_EA_CONSTANT_BITS  12AC
PRINT_OP            1DA8
PRINT_OP_ADD        1D38
PRINT_OP_ADDA       1D46
PRINT_OP_ASL        1D7E
PRINT_OP_ASR        1D70
PRINT_OP_BCS        1C9E
PRINT_OP_BGE        1CAC
PRINT_OP_BLT        1CBA
PRINT_OP_BRA        1CD6
PRINT_OP_BVC        1CC8
PRINT_OP_CMP        1D1C
PRINT_OP_CMPI       1BBE
PRINT_OP_DIVS       1CE4
PRINT_OP_DYNAMIC_BCLR  1BDA
PRINT_OP_EOR        1D0E
PRINT_OP_JSR        1C3C
PRINT_OP_LEA        1C58
PRINT_OP_LSL        1D54
PRINT_OP_LSR        1D62
PRINT_OP_MOVEA_L    1BF6
PRINT_OP_MOVEA_W    1C12
PRINT_OP_MOVEB      1BE8
PRINT_OP_MOVEM_L    1C82
PRINT_OP_MOVEM_W    1C74
PRINT_OP_MOVE_L     1C04
PRINT_OP_MOVE_W     1C20
PRINT_OP_MULS       1D2A
PRINT_OP_NEG        1C66
PRINT_OP_NOP        1C2E
PRINT_OP_OR         1CF2
PRINT_OP_ORI        1BB0
PRINT_OP_ROL        1D8C
PRINT_OP_ROR        1D9A
PRINT_OP_RTS        1C4A
PRINT_OP_STATIC_BCLR  1BCC
PRINT_OP_SUB        1D00
PRINT_OP_SUBQ       1C90
P_INVALID_OP        1DB0
P_OP_ADD            1E5A
P_OP_ADDA           1E55
P_OP_ASL            1E6A
P_OP_ASR            1E66
P_OP_BCS            1E2C
P_OP_BGE            1E30
P_OP_BLT            1E34
P_OP_BRA            1E28
P_OP_BVC            1E38
P_OP_CMP            1E4C
P_OP_CMPI           1DCB
P_OP_DIVS           1E3C
P_OP_DYNAMIC_BCLR   1DD5
P_OP_EOR            1E48
P_OP_JSR            1E13
P_OP_LEA            1E0F
P_OP_LSL            1E62
P_OP_LSR            1E5E
P_OP_MOVEA_L        1DE1
P_OP_MOVEA_L_A_L    10B4
P_OP_MOVEA_L_T      10A8
P_OP_MOVEA_W        1DF0
P_OP_MOVEB          1DDA
P_OP_MOVEM_L        1E07
P_OP_MOVEM_W        1DFF
P_OP_MOVE_L         1DE9
P_OP_MOVE_W         1DF8
P_OP_MULS           1E50
P_OP_NEG            1E1F
P_OP_NOP            1E17
P_OP_OR             1E41
P_OP_ORI            1DC7
P_OP_ROL            1E72
P_OP_ROR            1E6E
P_OP_RTS            1E1B
P_OP_STATIC_BCLR    1DD0
P_OP_SUB            1E44
P_OP_SUBQ           1E23
P_SIZE_B            1DBE
P_SIZE_L            1DC4
P_SIZE_W            1DC1
READ_NEXT_INSTRUCTION  1B86
RET_ADDSTRTOBUFFER_SUCCESS  1E82
SECOND_3            10A5
START               10BC
THIRD_3             10A6
_ADDSTRTOBUFFER_ADDLOOP  1EAE
_ADDSTRTOBUFFER_BUFFERLOOP  1E9A
_ADDSTRTOBUFFER_END  1ED0
_ADDSTRTOBUFFER_LENGTHEXCEEDED  1ECA
_ADDSTRTOBUFFER_SUCCESS  1EC2
