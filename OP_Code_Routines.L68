000010C0 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/11/2019 9:41:54 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OP Code routines for Disassembler
00000000                             3  * Written by : Daniel Yan
00000000                             4  * Date       : 2/28/2019, Updated 3/9/2019
00000000                             5  
00000000                             6  * Description: Op code determining to identify values
00000000                             7  
00000000                             8  
00000000                             9  ;FAHAD CODE
00000000                            10  ; ORG place for G_BUFFER
00000000                            11  ; ORG place for CUR_OP_CODE
00000000                            12  ; ORG place for VALID_OP_CODE
00000000                            13  ; ORG place for all other constants
00000000                            14  ; ORG START $1000
00000000                            15  ; WE NEED TO SEE APPROX HOW MUCH ADDRESS SPACE ALL OUR ROUTINES COVER
00000000                            16  ; ORG OUR CONSTANTS/BUFFERS AT A SAFE DISTANCE BETWEEN ROUTINES AND TEST PROGRAM
00000000                            17  
00000000                            18  ; MEMORY_ADDRESS OPCODE $HEX_VALUE
00000000                            19  ;G_BUFFER
00000000                            20  ; 1254 MOVEA.L A3,A6, $3ASD
00000000                            21  ; 1254 RTS $4E75
00000000                            22  ;B_BUFFER
00000000                            23  ; 1254 DATA $CURRENT_OP
00000000                            24  
00000000                            25  ; JSR INVALID_OP
00000000                            26  ; 
00000000                            27  
00000000                            28  ; 8800 MOVEA.L A3,A6 $3FCA
00000000                            29  ; 8800 DATA $3FCA
00000000                            30  
00001000                            31    ORG $1000 ; Start at Address $1000
00001000                            32  CUR_OP_CODE DS.W 1  ; Current OP Code Word
00001002                            33  EA_SIZE     DS.B 1
00001003                            34  G_BUFFER    DS.B 80
00001053                            35  B_BUFFER    DS.B 80
000010A3                            36  MNEMONIC    DS.B 1
000010A4                            37  FIRST_3     DS.B 1
000010A5                            38  SECOND_3    DS.B 1
000010A6                            39  THIRD_3     DS.B 1
000010A7                            40  FOURTH_3    DS.B 1
000010A8                            41  
000010A8= 4D4F5645 412E4C00 ...     42  P_OP_MOVEA_L_T  DC.L    'MOVEA.L',0
000010B4= 412E4C00 00000000         43  P_OP_MOVEA_L_A_L DC.L   'A.L',0
000010BC  49F8 1003                 44      LEA G_BUFFER,A4
000010C0                            45      
000010C0                            46  
000010C0                            47  START
000010C0                            48      ; Start the op code routine
000010C0                            49      ;LEA G_BUFFER, A4
000010C0  18BC 0000                 50      MOVE.B #0, (A4)
000010C4                            51      
000010C4                            52      ;MOVE.L (A5)+, D0
000010C4                            53      
000010C4                            54      ; Load the message onto A4
000010C4                            55      ;MOVE.L #P_OP_MOVEA_L_T, Arg_AddStrToBuffer_String
000010C4                            56      ;MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer 
000010C4                            57      
000010C4                            58      
000010C4                            59      ;JSR AddStrToBuffer
000010C4                            60      ;LEA G_BUFFER, A4   ; Load the value of the message onto the G_BUFFER
000010C4                            61      ;MOVE.L P_OP_MOVEA_L_T,(A4)+
000010C4                            62      ;MOVE.L P_OP_MOVEA_L_A_L,(A4)+
000010C4                            63      
000010C4                            64      
000010C4                            65      
000010C4                            66  
000010C4                            67      ; AFTER THIS POINT THE BUFFER HAS THIS 'MOVE' + 'A.L'          ; Increment 4 spaces in the address
000010C4                            68      
000010C4                            69      
000010C4                            70         
000010C4                            71      
000010C4                            72     
000010C4                            73     ;This is the right area for pointer now, however when I add here it can't go
000010C4                            74     ;back 
000010C4                            75  *********************************************************************************
000010C4                            76  * Here I'm attempting to 'skip' forward in the address to find the proper location for the string
000010C4                            77  * In the prior command 'LEA P_OP_MOVEA_L,A4' I have loaded 'MOVE' into address space. I cannot move
000010C4                            78  * more than 4 bytes (long) at a single time, so I need to move 'A.L' after which is 3 more bytes
000010C4                            79  * So what I need to do is LOAD 'MOVE' into the address space, skip 4 bytes, then load 'A.L' right
000010C4                            80  * after 'MOVE'. So this would show 'MOVEA.L' in the address space. Which then Denny can load his stuff
000010C4                            81  * after mine.
000010C4                            82  *
000010C4                            83  *In the ideal world this would look something like: P_OP_MOVEA_L then P_OP_A_L then _P_OP_TAB
000010C4                            84  * which would appear as 'MOVEA.L    ' in the address space. This would require 4 increments
000010C4                            85  * after MOVE, then 'A.L' being inserted, then 3 increments (or 7 from start) for the tab
000010C4                            86  ********************************************************************************* 
000010C4                            87      
000010C4                            88      ;ADD.L $FFFF,G_BUFFER_PREP
000010C4                            89      ;LEA P_OP_A_L,A1
000010C4                            90      ;MOVE.L (A4),G_BUFFER_PREP
000010C4                            91      
000010C4                            92  ***************************** Input Tests ********************************************
000010C4                            93      ;MOVE.W #%0000100010000010,CUR_OP_CODE       ;Static BCLR
000010C4                            94      ;MOVE.W #%0000111110001110,CUR_OP_CODE       ;Dynamic BCLR
000010C4                            95      ;MOVE.W #%0000000001000001,CUR_OP_CODE       ;ORI.W D1
000010C4                            96          
000010C4                            97      ;MOVE.W #%0000111110001110,CUR_OP_CODE              ;Dynamic BCLR
000010C4                            98      ;IN HEX $018E. D7 = 110, D6 = 001, D4 = %110, D5 = 7, (A6) = %0000
000010C4                            99      ;MOVE.W #%0000100010001110,CUR_OP_CODE              ;Static BCLR
000010C4                           100      ;IN HEX $018E. D7 = 110, D6 = 001, D4 = %110, D5 = 7, (A6) = %0000
000010C4                           101     
000010C4                           102      ;MOVE.W  #$018E,CUR_OP_CODE                        ;Dynamic BCLR in hex
000010C4                           103      ;MOVE.W  #$02FF,CUR_OP_CODE                         ;INVALID_OP code
000010C4                           104      ;MOVE.W #%0000110001010111,CUR_OP_CODE
000010C4                           105      ;MOVE.W #%0010011001001101,CUR_OP_CODE                       ;MOVEA  
000010C4                           106       ;MOVE.W #%0010001001001101,CUR_OP_CODE              ;MOVEA.L A5,A1
000010C4                           107      ;MOVE.W CUR_OP_CODE,(A6)
000010C4                           108      ;MOVE.W #$264D
000010C4                           109      ;Expected values:
000010C4                           110      ;D7, DST REG:   011
000010C4                           111      ;D6, DST MODE:  001
000010C4                           112      ;D5, SRC REG:   101
000010C4                           113      ;D4, SRC MODE:  001
000010C4                           114      ;CHECK IF DST MODE IS %111 or SRC MODE IS %111 for MOVE
000010C4                           115      ;(A3), DST TRAIL:  001
000010C4                           116      ;(A2), SRC TRAIL: ONLY FOR MOVE
000010C4                           117      ;MOVE.W #%0010000000001101,CUR_OP_CODE              ;MOVE.L A5,A1
000010C4                           118      ;MOVE.W #%0011011001001101,CUR_OP_CODE              ;MOVEA.W A5,A1
000010C4  31FC 967D 1000           119      MOVE.W #%1001011001111101,CUR_OP_CODE               ;MOVE TO TEST EA PARSE
000010CA  4EB9 000012BE            120      JSR PARSE_EA_CONSTANT_BITS
000010D0                           121      ;MOVE.W #%0011000000001101,CUR_OP_CODE              ;MOVE.W A5,A1
000010D0                           122      ;MOVE.W #%0000000001000001,CUR_OP_CODE              ;ORI.W D1
000010D0                           123      ;MOVE.W CUR_OP_CODE,A6                       ;Loading memory space to address register
000010D0                           124      ;MOVE.W CUR_OP_CODE,(A6)                     ;Loading memory value to address value
000010D0                           125   
000010D0                           126      ****GROUP 4 tests****
000010D0                           127      ;MOVE.W #$4E75,CUR_OP_CODE                            ;RTS
000010D0                           128      ;MOVE.W #$4E71,CUR_OP_CODE                            ;NOP
000010D0                           129      ;MOVE.W #$4415,CUR_OP_CODE                            ;NEG.L D5
000010D0                           130      ;MOVE.W #$43CC,CUR_OP_CODE                            ;LEA A1,A6
000010D0                           131      ;MOVE.W #%0100100010001110,CUR_OP_CODE
000010D0                           132      ;MOVE.W #$488E,CUR_OP_CODE                            ;MOVEM.W Reg to Mem, A6
000010D0                           133      ;MOVE.W #$4C8E,CUR_OP_CODE                             ;MOVEM.W Mem to Reg, A6
000010D0                           134      ;MOVE.W #$4E95,CUR_OP_CODE                            ;JSR (A5)               
000010D0                           135      ****GROUP 5 tests****
000010D0                           136      ;MOVE.W #%0101111110001111
000010D0                           137      
000010D0                           138      *****GROUP 5 TESTS****
000010D0                           139      ;#%0101111100000101, SUBQ.B D5
000010D0                           140      ;MOVE.W #$5F05,CUR_OP_CODE ; for SUBQ.B D5
000010D0                           141      ;#%0101111110001110, SUBQ.L A6 
000010D0                           142      ;MOVE.W #$5F8E,CUR_OP_CODE
000010D0                           143      ******GROUP 5 VALIDATION TESTS**********
000010D0                           144      ;MOVE.W #%0101111000001110,CUR_OP_CODE  ; ADDQ
000010D0                           145      ;MOVE.W #%0101010011000110,CUR_OP_CODE ; Scc
000010D0                           146      ;MOVE.W #%0101010011001110,CUR_OP_CODE ; DBcc
000010D0                           147     
000010D0                           148      *****GROUP 6 TESTS********* BCS,BGE,BLT,BVC
000010D0                           149      ; DISPLACEMENT, $00 is 16 bits, $FF is 32 bits
000010D0                           150      ; DISPLACEMENT = Last 8 bits
000010D0  31FC C0AA 1000           151      MOVE.W #%01100000010101010,CUR_OP_CODE   ;BRA
000010D6                           152      ;MOVE.W #%0110010100000000,CUR_OP_CODE   ;BCS
000010D6                           153      ;MOVE.W #%0110110001010101,CUR_OP_CODE   ;BGE
000010D6                           154      ;MOVE.W #%0110110110101010,CUR_OP_CODE   ;BLT
000010D6                           155      ;MOVE.W #%0110100001010101,CUR_OP_CODE   ;BVC
000010D6                           156  ************************************************************************************
000010D6                           157  
000010D6                           158  *-----------------------------------------------------------
000010D6                           159  *First Nibble Values (15-12)
000010D6                           160  *Value                  Operations
000010D6                           161  *$0                     GROUP_0: ORI,BCLR (static and dynamic),CMPI --- Partial, needs SIZE print for ORI, BCLR, CMPI
000010D6                           162  *$1                     GROUP_1: MOVE.B                             --- Partial, needs trailing bits
000010D6                           163  *$2                     GROUP_2: MOVE.L, MOVEA.L                    --- Partial, needs trailing bits
000010D6                           164  *$3                     GROUP_3: MOVE.W, MOVEA.W                    --- Partial, needs trailing bits
000010D6                           165  *$4                     GROUP_4: LEA,JSR,RTS,NEG,MOVEM              --- Partial, needs SIZE print for NEG, MOVE
000010D6                           166  *$5                     GROUP_5: SUBQ                               --- Partial, needs SIZE pri
000010D6                           167  *$6                     GROUP_6: Bcc(BCS,BGE,BLT,BVC), BRA          --- Not started
000010D6                           168  *$7                     GROUP_7: INVALID_OP                         --- DONE
000010D6                           169  *$8                     GROUP_8: DIVS, OR                           --- Not started
000010D6                           170  *$9                     GROUP_9: SUB                                --- Not started
000010D6                           171  *$A                     GROUP_A: INVALID_OP                         --- DONE
000010D6                           172  *$B                     GROUP_B: EOR, CMP                           --- Not started
000010D6                           173  *$C                     GROUP_C: MULS                               --- Not started
000010D6                           174  *$D                     GROUP_D: ADD, ADDA                          --- Not started
000010D6                           175  *$E                     GROUP_E: LSR, LSL, ASR, ASL, ROL, ROR       --- Not started
000010D6                           176  *$F                     GROUP_F: INVALID_OP                         --- DONE
000010D6                           177  
000010D6                           178  
000010D6                           179  * OP_JSR_Routine
000010D6                           180  **********************************************************************************
000010D6                           181  * Description: Catalog all supported OP codes into groupings based on their hex
000010D6                           182  * values. Sort the supported OP codes by looking at the first nibble for their
000010D6                           183  * grouping value. Call underlying subroutines for further identification of the
000010D6                           184  * op code.
000010D6                           185  *
000010D6                           186  * Registers used: A6,D0,D1 
000010D6                           187  *
000010D6                           188  * Precondition: Instruction set (size Word) has been loaded in the appropriate
000010D6                           189  * address to be parsed and read.
000010D6                           190  
000010D6                           191  * Postcondition: OP code has been identified as either valid or invalid. If it is
000010D6                           192  * valid, it is stored into A6 and EA parsing methods are called to pass needed
000010D6                           193  * information to EA. If invalid, DATA output will be utilized to indicate so.
000010D6                           194  **********************************************************************************
000010D6                           195  * These valid operand codes refer to the basic supported operand codes
000010D6                           196  * Groups refer to the first nibble value that is supported by the operand
000010D6                           197  LOAD_OP_CODE:
000010D6  3038 1000                198      MOVE.W CUR_OP_CODE,D0
000010DA  3CB8 1000                199      MOVE.W CUR_OP_CODE,(A6)
000010DE  3016                     200      MOVE.W (A6),D0          ;Load current instruction set into D0
000010E0  4EB9 000010E6            201      JSR OP_JSR_Routine      ;Use the JSR routine to identify the op code
000010E6                           202  OP_JSR_Routine:
000010E6  48E7 C000                203      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
000010EA  720C                     204      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
000010EC  E2A8                     205      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
000010EE                           206  
000010EE                           207  GROUP_0:                ;$0| ORI, BCLR (static and dynamic), CMPI                  
000010EE  B03C 0000                208      CMP.B   #$0,D0                 ;Compare first nibble
000010F2  6600 000C                209      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
000010F6  4EB9 00001320            210      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
000010FC  6000 010C                211      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001100                           212      
00001100                           213  GROUP_1:                ;$1| MOVE.B
00001100  B03C 0001                214      CMP.B   #$1,D0                 ;Compare first nibble
00001104  6600 000C                215      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
00001108  4EB9 00001396            216      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
0000110E  6000 00FA                217      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001112                           218  
00001112                           219  GROUP_2:                ;$2| MOVE.L, MOVEA.L
00001112  B03C 0002                220      CMP.B   #$2,D0                 ;Compare first nibble
00001116  6600 000C                221      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
0000111A  4EB9 000013AC            222      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
00001120  6000 00E8                223      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001124                           224  
00001124                           225  GROUP_3:                ;$3| MOVE.W, MOVEA.W
00001124  B03C 0003                226      CMP.B   #$3,D0                 ;Compare first nibble
00001128  6600 000C                227      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
0000112C  4EB9 000013F2            228      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
00001132  6000 00D6                229      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001136                           230  
00001136                           231  GROUP_4:                ;$4| LEA, JSR, RTS, NEG, MOVEM
00001136  B03C 0004                232      CMP.B   #$4,D0                 ;Compare first nibble
0000113A  6600 000C                233      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
0000113E  4EB9 0000143C            234      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
00001144  6000 00C4                235      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001148                           236  
00001148                           237  
00001148                           238  GROUP_5:                ;$5| SUBQ
00001148  B03C 0005                239      CMP.B   #$5,D0                 ;Compare first nibble
0000114C  6600 000C                240      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
00001150  4EB9 000014AC            241      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
00001156  6000 00B2                242      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000115A                           243  
0000115A                           244  
0000115A                           245  GROUP_6:                ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
0000115A  B03C 0006                246      CMP.B   #$6,D0                 ;Compare first nibble
0000115E  6600 000C                247      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
00001162  4EB9 000014D4            248      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
00001168  6000 00A0                249      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000116C                           250  
0000116C                           251  
0000116C                           252  GROUP_7:                ;$7| Display: DATA, $WXYZ (Unsupported)
0000116C  B03C 0007                253      CMP.B   #$7,D0                 ;Compare first nibble
00001170  6600 000C                254      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
00001174  4EB9 000014D8            255      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
0000117A  6000 008E                256      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000117E                           257  
0000117E                           258  
0000117E                           259  GROUP_8:                ;$8| DIVS, OR
0000117E  B03C 0008                260      CMP.B   #$8,D0                 ;Compare first nibble
00001182  6600 000C                261      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
00001186  4EB9 000014DE            262      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
0000118C  6000 007C                263      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001190                           264  
00001190                           265  
00001190                           266  GROUP_9:                ;$9| SUB
00001190  B03C 0009                267      CMP.B   #$9,D0                 ;Compare first nibble
00001194  6600 000C                268      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
00001198  4EB9 000014DE            269      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
0000119E  6000 006A                270      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011A2                           271  
000011A2                           272  
000011A2                           273  GROUP_A:                ;$A| Display: DATA, $WXYZ (Unsupported)
000011A2  B03C 000A                274      CMP.B   #$A,D0                 ;Compare first nibble
000011A6  6600 000C                275      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
000011AA  4EB9 000014DE            276      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
000011B0  6000 0058                277      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011B4                           278  
000011B4                           279  
000011B4                           280  GROUP_B:                ;$B| EOR, CMP
000011B4  B03C 000B                281      CMP.B   #$B,D0                 ;Compare first nibble
000011B8  6600 000C                282      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
000011BC  4EB9 000014E4            283      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
000011C2  6000 0046                284      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011C6                           285  
000011C6                           286  
000011C6                           287  GROUP_C:                ;$C| MULS
000011C6  B03C 000C                288      CMP.B   #$C,D0                 ;Compare first nibble
000011CA  6600 000C                289      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
000011CE  4EB9 000014E4            290      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
000011D4  6000 0034                291      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011D8                           292  
000011D8                           293  
000011D8                           294  GROUP_D:                 ;$D| ADD, ADDA
000011D8  B03C 000D                295      CMP.B   #$D,D0                 ;Compare first nibble
000011DC  6600 000C                296      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
000011E0  4EB9 000014E4            297      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
000011E6  6000 0022                298      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011EA                           299  
000011EA                           300  
000011EA                           301  GROUP_E:                ;$E| LSR, LSL, ASR, ASL, ROL, ROR
000011EA  B03C 000E                302      CMP.B   #$E,D0                 ;Compare first nibble
000011EE  6600 000C                303      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
000011F2  4EB9 000014E4            304      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
000011F8  6000 0010                305      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011FC                           306  
000011FC                           307  
000011FC                           308  GROUP_F:                ;$F| Display: DATA, $WXYZ (Unsupported)
000011FC  B03C 000F                309      CMP.B   #$F,D0                 ;Compare first nibble
00001200  4EB9 000014E4            310      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
00001206  6000 0002                311      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000120A                           312  
0000120A                           313  
0000120A                           314  OP_JSR_DONE:
0000120A  4CDF 0003                315           MOVEM.L (SP)+,D0-D1       ;Recover register D0
0000120E  4EF9 000014FA            316           JMP READ_NEXT_INSTRUCTION
00001214                           317  **********************************************************************************
00001214                           318  
00001214                           319  ********** EA Parsing ************************************************************
00001214                           320  
00001214                           321  * MOVE_LAST_6_BITS_TO_EA
00001214                           322  **********************************************************************************
00001214                           323  * Description: For OP codes with the last 6 bits specified as EA Mode and EA Reg,
00001214                           324  * the last 6 bits will be parsed and moved into the appropriate registers.
00001214                           325  *
00001214                           326  * Registers used: A6,D0,D1,D6,D7 
00001214                           327  
00001214                           328  * Precondition: OP code has been identified with only the last 6 bits for EA,
00001214                           329  * current instruction set is stored into A6.
00001214                           330  
00001214                           331  * Postcondition: Last 6 bits of instruction bit has been isolated and stored. Bits
00001214                           332  * for EA Mode have been stored in D7, Bits for EA Reg been stored in D6.
00001214                           333  **********************************************************************************
00001214                           334  MOVE_LAST_6_BITS_TO_EA:      ;Move last 6 bits from EA field to relevant registers
00001214                           335     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001214  3038 1000                336      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
00001218  323C 000A                337      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
0000121C  E368                     338      LSL.W   D1,D0            ;Truncate to find the last 6 bits
0000121E  E268                     339      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
00001220  3E00                     340      MOVE.W  D0,D7            ;Move last 6 bits into D7
00001222  323C 0003                341      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
00001226  E26F                     342      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
00001228  3C07                     343      MOVE.W  D7,D6            ;Move the 'upper' 3 bits into D6
0000122A  323C 000D                344      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
0000122E  E368                     345      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
00001230  E268                     346      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001232  3E00                     347      MOVE.W  D0,D7            ;Move the 'lower' 3 bits into D7
00001234                           348     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
00001234  4E75                     349      RTS                      ;Return to stack
00001236                           350      
00001236                           351  * FIND_2_BIT_SIZE_TO_EA
00001236                           352  **********************************************************************************
00001236                           353  * Description: For OP codes with 2 bit size fields, the 2 relevant bits (7-6) will 
00001236                           354  * be parsed and moved to the appropriate registers.
00001236                           355  *
00001236                           356  * Registers used: A6,D0,D1,D5
00001236                           357  *
00001236                           358  * Precondition: OP code has been identified with 2 size bit field for EA, current
00001236                           359  * instruction set for OP code is stored in to A6.
00001236                           360  *
00001236                           361  * Postcondition: 2 bit size field has been isolated and stored into D5.
00001236                           362  **********************************************************************************
00001236                           363  FIND_2_BIT_SIZE_TO_EA:      ;Move the 2 bit size field relevant register
00001236                           364     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
00001236  3038 1000                365      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
0000123A  323C 0008                366      MOVE.W   #8,D1          ;Prepare 8 bit shift to D1
0000123E  E368                     367      LSL.W    D1,D0          ;Truncate to find the 2 size bits
00001240  E268                     368      LSR.W    D1,D0          ;Reposition the bits
00001242  323C 0006                369      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
00001246  E268                     370      LSR.W    D1,D0          ;Truncate to shift 2 bits to a byte
00001248  3800                     371      MOVE.W   D0,D4          ;Move 2 size bits into D5
0000124A                           372    ;  MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
0000124A  4E75                     373      RTS                     ;Return to stack
0000124C                           374  **********************************************************************************
0000124C                           375  
0000124C                           376  * FIND_3_BIT_REG_TO_EA
0000124C                           377  **********************************************************************************
0000124C                           378  * Description: OP codes with a dynamic 3 bit register in bits 11-9 will be parsed
0000124C                           379  * and have those 3 bits isolated and moved to the appropriate registers.
0000124C                           380  *
0000124C                           381  * Registers used: A6,D0,D1,D5
0000124C                           382  *
0000124C                           383  * Precondition: OP code has been identified with a dynamic 3 bit register in bits
0000124C                           384  * 11-9.
0000124C                           385  *
0000124C                           386  * Postcondition: 3 bit dynamic register has been isolated and stored into D4.
0000124C                           387  **********************************************************************************
0000124C                           388  FIND_3_BIT_REG_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
0000124C                           389     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
0000124C  3038 1000                390      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
00001250  323C 0004                391      MOVE.W   #4,D1          ;Prepare 4 bit shift to D1
00001254  E368                     392      LSL.W    D1,D0          ;Truncate to find the 2 size bits
00001256  E268                     393      LSR.W    D1,D0          ;Reposition the bits
00001258  323C 0009                394      MOVE.W   #9,D1          ;Prepare 9 bit shift to D1
0000125C  E268                     395      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
0000125E  3A00                     396      MOVE.W   D0,D5          ;Move 3 register bits into D4
00001260                           397     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
00001260  4E75                     398      RTS                     ;Return to stack
00001262                           399  **********************************************************************************
00001262                           400  
00001262                           401  * MOVE_AND_MOVEA_PARSE_EA
00001262                           402  **********************************************************************************
00001262                           403  * Description: Special parsing for the SRC and DST Mode/Reg for MOVE/MOVE
00001262                           404  *
00001262                           405  * Registers used: A6,D0,D1,D7,D6,D5,D4
00001262                           406  *
00001262                           407  * Precondition: OP code has been identified with either MOVE or MOVEA
00001262                           408  *
00001262                           409  * Postcondition: Store all relevant EA bits into associated register.
00001262                           410  **********************************************************************************
00001262                           411  MOVE_AND_MOVEA_PARSE_EA:       ;Move the 3 bit dynamic register bits to proper register
00001262                           412     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001262  3038 1000                413      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
00001266  323C 000A                414      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
0000126A  E368                     415      LSL.W   D1,D0            ;Truncate to find the last 6 bits
0000126C  E268                     416      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
0000126E  3E00                     417      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
00001270  323C 0003                418      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
00001274  E26F                     419      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
00001276  3A07                     420      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
00001278  323C 000D                421      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
0000127C  E368                     422      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
0000127E  E268                     423      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001280  3800                     424      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
00001282                           425      **************MOVING SOURCE*********** TO BE DONE LATER
00001282                           426      ; MOVE.W #%0011 011 001 001 101,(A6)              ;MOVEA.W A5,A3
00001282                           427      ; MOVE.W #%0010 011 001 001 101,D0                ;MOVEA.L A5,A3
00001282                           428       ;Expected values:
00001282                           429      ;D7, DST REG:   011
00001282                           430      ;D6, DST MODE:  001
00001282                           431      ;D5, SRC MODE:  001
00001282                           432      ;D4, SRC REG:   101
00001282                           433      ;00011001
00001282  3038 1000                434      MOVE.W CUR_OP_CODE,D0     ;Move current OP code into D0     
00001286  323C 0004                435      MOVE.W  #4,D1             ;Prepare 4 bit shift to D1
0000128A  E368                     436      LSL.W   D1,D0             ;Truncate to find bits 11-6
0000128C  E268                     437      LSR.W   D1,D0             ;Reposition bits
0000128E  323C 0006                438      MOVE.W  #6,D1             ;Prepare 6 bit shift to D1
00001292  E268                     439      LSR.W   D1,D0             ;Truncate the SRC Reg/Mode bits
00001294  323C 0003                440      MOVE.W  #3,D1             ;Prepare a 3 bit shift to D1 for DST Reg/Mode
00001298  3C00                     441      MOVE.W  D0,D6             ;Copy over the current 6 bits to D6
0000129A  E268                     442      LSR.W   D1,D0             ;Truncate DST Mode  
0000129C  3E00                     443      MOVE.W  D0,D7             ;Move DST Reg to D7
0000129E  323C 000D                444      MOVE.W  #13,D1             
000012A2  E36E                     445      LSL.W   D1,D6             ;Truncate 13 bits in D6
000012A4  E26E                     446      LSR.W   D1,D6             ;Reposition D6
000012A6                           447                                ;D6 now contains the DST Reg
000012A6                           448     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
000012A6  4E75                     449      RTS                     ;Return to stack
000012A8                           450  **********************************************************************************
000012A8                           451  
000012A8                           452  *FIND_TRAILING_BITS_TO_EA
000012A8                           453  **********************************************************************************
000012A8                           454  FIND_TRAILING_BITS_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
000012A8                           455     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
000012A8  3038 1000                456      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
000012AC  323C 0007                457      MOVE.W   #7,D1          ;Prepare 4 bit shift to D1
000012B0  E368                     458      LSL.W    D1,D0          ;Truncate to find the 2 size bits
000012B2  E268                     459      LSR.W    D1,D0          ;Reposition the bits
000012B4  323C 0006                460      MOVE.W   #6,D1          ;Prepare 9 bit shift to D1
000012B8  E268                     461      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
000012BA  3680                     462      MOVE.W   D0,(A3)          ;Move 3 register bits into D4
000012BC                           463     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
000012BC  4E75                     464      RTS                    ;Return to stack
000012BE                           465  **********************************************************************************
000012BE                           466  
000012BE                           467  *PARSE_EA_CONSTANT_BITS
000012BE                           468  **********************************************************************************
000012BE                           469  PARSE_EA_CONSTANT_BITS:
000012BE                           470  ;MNEMONIC    DS.B 1
000012BE                           471  ;FIRST_3     DS.B 1
000012BE                           472  ;SECOND_3    DS.B 1
000012BE                           473  ;THIRD_3     DS.B 1
000012BE                           474  ;FOURTH_3    DS.B 1
000012BE                           475  ;MOVE.W #%1001 011 001 111 101,CUR_OP_CODE
000012BE                           476      *MNEMONIC SHIFT
000012BE  3038 1000                477      MOVE.W CUR_OP_CODE,D0
000012C2  323C 000C                478      MOVE.W #12,D1
000012C6  E268                     479      LSR.W D1,D0
000012C8  11C0 10A3                480      MOVE.B D0,MNEMONIC
000012CC  1438 10A3                481      MOVE.B MNEMONIC,D2
000012D0                           482      *FIRST_3 SHIFT
000012D0  323C 0009                483      MOVE.W #9,D1
000012D4  3038 1000                484      MOVE.W CUR_OP_CODE,D0
000012D8  E948                     485      LSL.W #4,D0
000012DA  E848                     486      LSR.W #4,D0
000012DC  E268                     487      LSR.W  D1,D0
000012DE  11C0 10A4                488      MOVE.B D0,FIRST_3
000012E2  1638 10A4                489      MOVE.B FIRST_3,D3
000012E6                           490      *SECOND_3 SHIFT
000012E6  3038 1000                491      MOVE.W CUR_OP_CODE,D0
000012EA  EF48                     492      LSL.W #7,D0
000012EC  EE48                     493      LSR.W #7,D0
000012EE  EC48                     494      LSR.W #6,D0
000012F0  11C0 10A5                495      MOVE.B D0,SECOND_3
000012F4  1838 10A5                496      MOVE.B SECOND_3,D4
000012F8                           497      *THIRD_3 SHIFT
000012F8  3038 1000                498      MOVE.W CUR_OP_CODE,D0
000012FC  E648                     499      LSR.W #3,D0
000012FE  323C 000D                500      MOVE.W #13,D1
00001302  E368                     501      LSL.W D1,D0
00001304  E268                     502      LSR.W D1,D0
00001306  11C0 10A6                503      MOVE.B D0,THIRD_3
0000130A  1A38 10A6                504      MOVE.B THIRD_3,D5
0000130E                           505      *FOURTH_3 SHIFT
0000130E  3038 1000                506      MOVE.W CUR_OP_CODE,D0
00001312  E368                     507      LSL.W D1,D0
00001314  E268                     508      LSR.W D1,D0
00001316  11C0 10A7                509      MOVE.B D0,FOURTH_3
0000131A  1C38 10A7                510      MOVE.B FOURTH_3,D6
0000131E                           511      
0000131E  365D                     512      MOVE.W (A5)+,A3
00001320                           513  
00001320                           514  
00001320                           515  
00001320                           516  
00001320                           517  ********** End of EA Parsing *****************************************************
00001320                           518  
00001320                           519  *******************JMP LABELS ****************************************************
00001320                           520  * Labelling for group codes will be in the following format
00001320                           521  
00001320                           522  * <JMP Labelname>
00001320                           523  ********************************************************************************
00001320                           524  * Checking List Order (If more than one value)
00001320                           525  * Operand1 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
00001320                           526  * Operand2 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
00001320                           527  
00001320                           528  * Where a-b will refer to the bit corresponding bit value in the instruction
00001320                           529  * format, and a specifier will be attached such as Size, EA Mode, SRC Reg, etc
00001320                           530  * to clarify what a specific bit range means.
00001320                           531  * Checking order refers to what order the checks will be performed in. 
00001320                           532  * Any other code outside of the listed ones will be INVALID_OP.
00001320                           533  ********************************************************************************
00001320                           534  
00001320                           535  ********************************************************************************
00001320                           536  * Global Field Descriptions
00001320                           537  * Size Field: Byte = 00 Word = 01 Long = 10
00001320                           538  * EA Mode: Refer to EA Address Modes
00001320                           539  * EA Reg: 3-bit input that is mapped to the respective binary value
00001320                           540  ********************************************************************************
00001320                           541  
00001320                           542  * GROUP_0                      
00001320                           543  ********************************************************************************
00001320                           544  * Description: Checks for the following listed OP codes to be present or not
00001320                           545  *
00001320                           546  * ORI: $00, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001320                           547  * CMPI: $0C, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001320                           548  * Dynamic BCLR: $0, 11-9 Register, 8-6 %110, 5-3 EA Mode, 2-0 EA Reg
00001320                           549  * Static BCLR: $01, 7-6 10, 5-3 EA Mode, 2-0 EA Reg
00001320                           550  *
00001320                           551  * Precondition: First nibble has been identified as $0
00001320                           552  * Postcondition: Parses proper OP code with a nibble value of $0 or finds an
00001320                           553  * invalid OP code. After a successful parse loading for EA values will be done
00001320                           554  * through a subroutine.
00001320                           555  ********************************************************************************
00001320                           556  C_GROUP_0:
00001320  48E7 C000                557      MOVEM.L D0-D1, -(SP) ; Backup registers
00001324                           558      
00001324                           559  CHECK_OP_ORI:
00001324  3038 1000                560      MOVE.W  CUR_OP_CODE,D0         ;Move current instruction set into D
00001328  0240 FF00                561      ANDI.W  #$FF00,D0       ;Mask relevant bits to D0
0000132C  B07C 0000                562      CMP.W   #$0000,D0       ;Compare the appropriate masked bits     
00001330  6600 0010                563      BNE     CHECK_OP_CMPI   ;Branch to next comparison if not equal
00001334  4EB9 00001524            564      JSR     PRINT_OP_ORI    ;Print the OP code if equal
0000133A  4EB8 1236                565      JSR     FIND_2_BIT_SIZE_TO_EA         
0000133E  6000 0054                566      BRA     CG0_C           ;Finish routine
00001342                           567  CHECK_OP_CMPI:
00001342  3038 1000                568      MOVE.W  CUR_OP_CODE,D0         ;Move current instruction set into D
00001346  0240 FF00                569      ANDI.W  #$FF00,D0       ;Mask relevant bits to D0
0000134A  B07C 0C00                570      CMP.W   #$0C00,D0       ;Compare the appropriate masked bits   
0000134E  6600 000C                571      BNE     CHECK_OP_S_BCLR ;Branch to next comparison if not equal       
00001352  4EB9 00001532            572      JSR     PRINT_OP_CMPI   ;Print the OP code if equal
00001358  6000 003A                573      BRA     CG0_C           ;Finish routine
0000135C                           574  CHECK_OP_S_BCLR:
0000135C  3038 1000                575      MOVE.W  CUR_OP_CODE,D0         ;Move current instruction set into D
00001360  0240 FF00                576      ANDI.W  #$FF00,D0       ;Mask relevant bits to D0
00001364  B07C 0800                577      CMP.W   #$0800,D0       ;Compare the appropriate masked bits
00001368  6600 000C                578      BNE     CHECK_OP_D_BCLR ;Branch to next comparison if not equal
0000136C  4EB9 0000154C            579      JSR     PRINT_OP_S_BCLR ;Print the OP code if equal
00001372                           580      ;MOVEM.L (SP)+,D6-D7     ;POP STACK
00001372  6000 0020                581      BRA     CG0_C           ;Finish routine
00001376                           582  CHECK_OP_D_BCLR:
00001376  3038 1000                583      MOVE.W  CUR_OP_CODE,D0                ;Move current instruction set into D
0000137A  0240 0180                584      ANDI.W  #%0000000110000000,D0 ;Do a direct binary bitmask to see which bits are needed
0000137E  B07C 0180                585      CMP.W   #%0000000110000000,D0 ;Compare the expected binary value
00001382  6600 000C                586      BNE     CG0_F                 ;If not equal this must be an invalid OP code
00001386  4EB9 0000156A            587      JSR     PRINT_OP_D_BCLR       ;Print the OP code if equal
0000138C  6000 0006                588      BRA     CG0_C                ;Finish routine
00001390                           589  CG0_F:                       ;Checks have been finished, invalid OP code has been found
00001390  6000 0158                590      BRA INVALID_OP    
00001394                           591  CG0_C:                       ;Checks have been finished,a valid OP code has been found
00001394  4E75                     592      RTS                      ;Return to stack
00001396                           593      
00001396                           594  * GROUP_1                      
00001396                           595  ********************************************************************************
00001396                           596  * MOVE.B: $1, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
00001396                           597  ********************************************************************************
00001396                           598  C_GROUP_1:
00001396                           599  
00001396                           600  CHECK_OP_MOVE_B:
00001396  3038 1000                601      MOVE.W  CUR_OP_CODE,D0                  ;Move current instruction set into D0          
0000139A  0240 FF00                602      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
0000139E  B07C 1000                603      CMP.W #$1000,D0                 ;Compare the appropriate masked bits 
000013A2  6600 0146                604      BNE INVALID_OP                  ;Invalid OP code has been found
000013A6  6700 01E0                605      BEQ PRINT_OP_MOVEB              ;Print the OP code if equal
000013AA  4E75                     606      RTS                             ;Return to stack
000013AC                           607  * GROUP_2
000013AC                           608  ********************************************************************************
000013AC                           609  * MOVEA.L: $2, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
000013AC                           610  * MOVE.L: $2, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000013AC                           611  ********************************************************************************
000013AC                           612  C_GROUP_2:
000013AC                           613  
000013AC                           614  CHECK_OP_MOVEA_L:
000013AC  3038 1000                615      MOVE.W CUR_OP_CODE,D0                  ;Move current instruction set into D0  
000013B0  0240 FF00                616      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
000013B4  B07C 2000                617      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
000013B8  6000 0002                618      BRA FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
000013BC                           619  
000013BC                           620      
000013BC                           621  FIND_MOVEA_L_DIFFERENCE:    ;Finds difference between MOVEA and MOVE
000013BC  3038 1000                622      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
000013C0  323C 0007                623      MOVE.W   #7,D1          ;Prepare 7 bit shift to D1
000013C4  E368                     624      LSL.W    D1,D0          ;Truncate to find the 3 address mode bits
000013C6  E268                     625      LSR.W    D1,D0          ;Reposition the bits
000013C8  323C 0006                626      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
000013CC  E268                     627      LSR.W    D1,D0          ;Truncate to shift 3 bits to a register
000013CE  3C00                     628      MOVE.W   D0,D6          ;Move 3 address mode bits into D6
000013D0  BC7C 0001                629      CMP.W   #$1,D6          ;Check if the address mode value is MOVEA
000013D4  6600 0006                630      BNE     CHECK_OP_MOVE_L  ;Branch if not equal to check MOVE
000013D8  6700 01C4                631      BEQ     PRINT_OP_MOVEA_L ;Print out the MOVEA address 
000013DC                           632      
000013DC                           633  CHECK_OP_MOVE_L:
000013DC  3038 1000                634      MOVE.W CUR_OP_CODE,D0
000013E0  0240 FF00                635      ANDI.W #$FF00,D0
000013E4  B07C 2000                636      CMP.W #$2000,D0
000013E8  6600 0100                637      BNE INVALID_OP
000013EC  6700 01C6                638      BEQ PRINT_OP_MOVE_L
000013F0  4E75                     639      RTS
000013F2                           640      
000013F2                           641  * GROUP_3
000013F2                           642  ********************************************************************************
000013F2                           643  * MOVEA.W: $3, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
000013F2                           644  * MOVE.W: $3, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000013F2                           645  ********************************************************************************
000013F2                           646  C_GROUP_3:
000013F2                           647  
000013F2                           648  CHECK_OP_MOVEA_W:
000013F2  3038 1000                649      MOVE.W CUR_OP_CODE,D0
000013F6  0240 FF00                650      ANDI.W #$FF00,D0
000013FA  B07C 3000                651      CMP.W #$3000,D0
000013FE  6000 0002                652      BRA FIND_MOVEA_W_DIFFERENCE
00001402                           653  
00001402                           654      
00001402                           655  FIND_MOVEA_W_DIFFERENCE:      ;Finds difference between MOVEA and MOVE
00001402  3038 1000                656      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
00001406  323C 0007                657      MOVE.W   #7,D1          ;Prepare 7 bit shift to D1
0000140A  E368                     658      LSL.W    D1,D0          ;Truncate to find the 3 address mode bits
0000140C  E268                     659      LSR.W    D1,D0          ;Reposition the bits
0000140E  323C 0006                660      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
00001412  E268                     661      LSR.W    D1,D0          ;Truncate to shift 3 bits to a register
00001414  3C00                     662      MOVE.W   D0,D6          ;Move 3 address mode bits into D6
00001416  BC7C 0001                663      CMP.W   #$1,D6          ;Check if the address mode value is MOVEA
0000141A  4EB8 1262                664      JSR     MOVE_AND_MOVEA_PARSE_EA
0000141E  6600 0006                665      BNE     CHECK_OP_MOVE_W 
00001422  6700 01A6                666      BEQ     PRINT_OP_MOVEA_W  
00001426                           667      
00001426                           668  CHECK_OP_MOVE_W:
00001426  3038 1000                669      MOVE.W CUR_OP_CODE,D0
0000142A  0240 FF00                670      ANDI.W #$FF00,D0
0000142E  B07C 3000                671      CMP.W #$3000,D0
00001432  6600 00B6                672      BNE INVALID_OP
00001436  6700 01A8                673      BEQ PRINT_OP_MOVE_W
0000143A  4E75                     674      RTS
0000143C                           675  
0000143C                           676  * GROUP_4
0000143C                           677  ********************************************************************************
0000143C                           678  * LEA: $4, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
0000143C                           679  * JSR: $4E, 7-6 %10, 5-3 EA Mode, 2-0 EA Reg 
0000143C                           680  * RTS: $4E75
0000143C                           681  * NEG: $44, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
0000143C                           682  * MOVEM: $4, 11 %1, 10 %D, 9-7 %001, 6 S, 5-3 EA Mode, 2-0 EA Reg
0000143C                           683  * %D = 0 , Register to Memory, 1 Memory to Register
0000143C                           684  ********************************************************************************
0000143C                           685  C_GROUP_4:
0000143C                           686  CHECK_OP_RTS:
0000143C  3038 1000                687      MOVE.W CUR_OP_CODE,D0
00001440  B07C 4E75                688      CMP.W  #$4E75,D0
00001444  6600 0006                689      BNE    CHECK_OP_NOP
00001448  6700 01C8                690      BEQ    PRINT_OP_RTS
0000144C                           691      
0000144C                           692  CHECK_OP_NOP:
0000144C  3038 1000                693      MOVE.W CUR_OP_CODE,D0
00001450  B07C 4E71                694      CMP.W  #$4E71,D0
00001454  6600 0006                695      BNE    CHECK_OP_LEA
00001458  6700 019C                696      BEQ    PRINT_OP_NOP
0000145C                           697      
0000145C                           698  CHECK_OP_LEA:
0000145C  3038 1000                699      MOVE.W CUR_OP_CODE,D0
00001460  0240 F1C0                700      ANDI.W #$F1C0,D0
00001464  B07C 41C0                701      CMP.W  #$41C0,D0
00001468  6600 0006                702      BNE    CHECK_OP_JSR
0000146C  6700 01B2                703      BEQ    PRINT_OP_LEA
00001470                           704      
00001470                           705  CHECK_OP_JSR:
00001470  3038 1000                706      MOVE.W CUR_OP_CODE,D0
00001474  0240 FFC0                707      ANDI.W #$FFC0,D0
00001478  B07C 4E80                708      CMP.W  #$4E80,D0
0000147C  6600 0006                709      BNE    CHECK_OP_NEG
00001480  6700 0182                710      BEQ    PRINT_OP_JSR
00001484                           711      
00001484                           712  CHECK_OP_NEG:
00001484  3038 1000                713      MOVE.W CUR_OP_CODE,D0
00001488  0240 FF00                714      ANDI.W #$FF00,D0
0000148C  B07C 4400                715      CMP.W  #$4400,D0
00001490  6600 0006                716      BNE    CHECK_OP_MOVEM
00001494  6700 0198                717      BEQ    PRINT_OP_NEG
00001498                           718  **************** COME BACK TO FINISH UP SIZE **********************************
00001498                           719  CHECK_OP_MOVEM:
00001498  3038 1000                720      MOVE.W CUR_OP_CODE,D0
0000149C  0240 FB80                721      ANDI.W #$FB80,D0
000014A0  B07C 4880                722      CMP.W  #$4880,D0
000014A4  6600 0044                723      BNE    INVALID_OP
000014A8  6700 0192                724      BEQ    PRINT_OP_MOVEM_W
000014AC                           725      
000014AC                           726  * GROUP_5
000014AC                           727  ********************************************************************************
000014AC                           728  * SUBQ: $5, 11-9 DATA, 8 %1, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
000014AC                           729  * Validation checking:
000014AC                           730  * Check against, ADDQ, Scc, DBcc
000014AC                           731  ********************************************************************************
000014AC                           732  C_GROUP_5:
000014AC                           733  
000014AC                           734  VALID_CHECK_OP_SUBQ:
000014AC  3038 1000                735      MOVE.W CUR_OP_CODE,D0
000014B0  0240 F1C0                736      ANDI.W #$F1C0,D0        ;Bitmask check for Scc, DBcc and ADDQ
000014B4  B07C 51C0                737      CMP.W  #$51C0,D0        ;This should be the only valid one for SUBQ
000014B8  6700 0030                738      BEQ    INVALID_OP       ;If not equal it's invalid
000014BC  6600 0002                739      BNE    CHECK_OP_SUBQ
000014C0                           740  CHECK_OP_SUBQ     
000014C0  3038 1000                741      MOVE.W  CUR_OP_CODE,D0  ;Actual check for SUBQ
000014C4  0240 F100                742      ANDI.W #$F100,D0        ;Bitmask check for SUBQ
000014C8  B07C 5100                743      CMP.W  #$5100,D0        ;Compare the proper value
000014CC  6700 018A                744      BEQ    PRINT_OP_SUBQ    ;If equal print it out
000014D0  6600 0018                745      BNE    INVALID_OP       ;Else the operand is invalid
000014D4                           746      
000014D4                           747  * GROUP_6
000014D4                           748  ********************************************************************************
000014D4                           749  * BRA: $60, 7-0 8-Bit Displacement
000014D4                           750  * Bcc: $6, 11-8 Condition, 7-0 8-Bit Displacement
000014D4                           751  *   Branch: <Condition>   
000014D4                           752  *   BCS: %0101          
000014D4                           753  *   BGE: %1100      
000014D4                           754  *   BLT: %1101  
000014D4                           755  *   BVC: %1000
000014D4                           756  *   
000014D4                           757  *   MOVE.W #%0110010100000000   ;BCS
000014D4                           758  *   MOVE.W #%0110110001010101   ;BGE
000014D4                           759  *   MVE.W #%0110110110101010    BLT
000014D4                           760  *   MOVE.W #%0110100001010101   ;BVC
000014D4                           761  ********************************************************************************
000014D4                           762  C_GROUP_6:
000014D4                           763  
000014D4                           764  CHECK_OP_BRA:
000014D4  3038 1000                765      MOVE.W CUR_OP_CODE,D0
000014D8                           766     ; ANDI.W 
000014D8                           767  
000014D8                           768  CHECK_OP_BCS:
000014D8                           769  
000014D8                           770  CHECK_OP_BGE:
000014D8                           771  
000014D8                           772  CHECK_OP_BLT:
000014D8                           773  
000014D8                           774  CHECK_OP_BVC:
000014D8                           775  
000014D8                           776  *GROUP_7
000014D8                           777  ********************************************************************************
000014D8                           778  * Currently no OP codes here are supported.
000014D8                           779  ********************************************************************************
000014D8                           780  C_GROUP_7:
000014D8  4EB9 000014EA            781      JSR INVALID_OP
000014DE                           782  
000014DE                           783  * GROUP_8
000014DE                           784  ********************************************************************************
000014DE                           785  * DIVS: $8, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
000014DE                           786  * OR: $80, 7-6 Size, 5-3 EA Mode, 2-0 EA Register
000014DE                           787  ********************************************************************************
000014DE                           788  C_GROUP_8:
000014DE                           789  
000014DE                           790  CHECK_OP_DIVS:
000014DE                           791  
000014DE                           792  CHECK_OP_OR:
000014DE                           793  
000014DE                           794  * GROUP_9                      
000014DE                           795  ********************************************************************************
000014DE                           796  * SUB: $9, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
000014DE                           797  ********************************************************************************
000014DE                           798  C_GROUP_9:
000014DE                           799  
000014DE                           800  CHECK_OP_SUB:
000014DE                           801  
000014DE                           802  *GROUP_A
000014DE                           803  ********************************************************************************
000014DE                           804  * Currently no OP codes here are supported.
000014DE                           805  ********************************************************************************
000014DE                           806  C_GROUP_A:
000014DE  4EB9 000014EA            807      JSR INVALID_OP
000014E4                           808  
000014E4                           809  * GROUP_B                     
000014E4                           810  ********************************************************************************
000014E4                           811  * EOR: $B, 11-9 Reg, 8 %1, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
000014E4                           812  * CMP: $B, 11-9 Reg, 8 %0, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
000014E4                           813  * The specific bit difference is listed 
000014E4                           814  ********************************************************************************
000014E4                           815  C_GROUP_B:
000014E4                           816  
000014E4                           817  CHECK_OP_EOR:
000014E4                           818  
000014E4                           819  CHECK_OP_CMP:
000014E4                           820  
000014E4                           821  * GROUP_C                     
000014E4                           822  ********************************************************************************
000014E4                           823  * MULS: $C, 11-8 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
000014E4                           824  ********************************************************************************
000014E4                           825  C_GROUP_C:
000014E4                           826  
000014E4                           827  CHECK_OP_MULS:
000014E4                           828  
000014E4                           829  * GROUP_D                     
000014E4                           830  ********************************************************************************
000014E4                           831  * ADD: $D, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
000014E4                           832  * ADDA: $D, 11- 9 Reg, 8-6 OPMODE, 7-6 %11, 5-3 EA Mode, 2-0 EA Reg
000014E4                           833  * The specific bit difference is listed out in the OPMODE field.
000014E4                           834  ********************************************************************************
000014E4                           835  C_GROUP_D:
000014E4                           836  
000014E4                           837  CHECK_OP_ADDA:
000014E4                           838  
000014E4                           839  CHECK_OP_ADD:
000014E4                           840  
000014E4                           841  * GROUP_E                     
000014E4                           842  ********************************************************************************
000014E4                           843  * LSR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
000014E4                           844  * LSL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
000014E4                           845  * ASR: $E, $0, 8 %0, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
000014E4                           846  * ASL: $E, $0, 8 %1, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
000014E4                           847  * ROR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
000014E4                           848  * ROL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
000014E4                           849  * Count/Reg for LSR/LSL refers to shift count, where 0 = shift count of 8, 1-7 
000014E4                           850  * refers to the respective value when i/r = 0. If i/r = 1, data register in the 
000014E4                           851  * Count/Reg field specifies the shift count.  
000014E4                           852  * 
000014E4                           853  * Count/Reg for ROR/ROL specifies rotate count instead of shift count.
000014E4                           854  ********************************************************************************
000014E4                           855  C_GROUP_E:
000014E4                           856  
000014E4                           857  CHECK_OP_LSR:
000014E4                           858  
000014E4                           859  CHECK_OP_LSL:
000014E4                           860  
000014E4                           861  CHECK_OP_ASL:
000014E4                           862  
000014E4                           863  CHECK_OP_ASR:
000014E4                           864  
000014E4                           865  CHECK_OP_ROL:
000014E4                           866  
000014E4                           867  CHECK_OP_ROR:
000014E4                           868  
000014E4                           869  * GROUP_F
000014E4                           870  ********************************************************************************
000014E4                           871  * Currently no OP codes here are supported.
000014E4                           872  ********************************************************************************
000014E4                           873  C_GROUP_F:
000014E4  4EB9 000014EA            874      JSR INVALID_OP
000014EA                           875      
000014EA                           876  * INVALID_OP                     
000014EA                           877  ********************************************************************************
000014EA                           878  * Any value that is not covered in the above groups would be considered invalid. 
000014EA                           879  * The following values in the first nibble would also indicate that the 
000014EA                           880  * operand codes is already invalid: $7, $A, $F.
000014EA                           881  * For unsupported OP codes, display DATA $WXYZ   
000014EA                           882  * THIS WILL NEED TO BE CHANGED TO DISPLAY: 1000 DATA $WXYZ IN THE FUTURE
000014EA                           883  ********************************************************************************
000014EA                           884  INVALID_OP:  ; Prints DATA for invalid op
000014EA  43F9 00001778            885      LEA P_INVALID_OP,A1
000014F0  103C 000D                886      MOVE.B #13,D0
000014F4  4E4F                     887      TRAP #15
000014F6  FFFF FFFF                888      SIMHALT
000014FA                           889  READ_NEXT_INSTRUCTION: ; Needs to read next instruction set {PLACEHOLDER}
000014FA  FFFF FFFF                890      SIMHALT
000014FE                           891  
000014FE                           892  MAKE_VAL_ASCII:
000014FE  0C00 0009                893      CMPI.B  #$9,D0
00001502  6E00 0008                894      BGT     LETTER_ASCII
00001506  6F00 000A                895      BLE     NUMBER_ASCII
0000150A  4E75                     896      RTS
0000150C                           897      
0000150C                           898  LETTER_ASCII:
0000150C  0600 0037                899      ADDI.B #$37,D0 ; A-F
00001510  4E75                     900      RTS
00001512                           901      
00001512                           902  NUMBER_ASCII
00001512  0600 0030                903      ADDI.B #$30,D0 ; 0-9
00001516  4E75                     904      RTS
00001518                           905      
00001518                           906  ADD_PERIOD:
00001518  2F00                     907      MOVE.L D0,-(SP)
0000151A  103C 0000                908      MOVE.B #$0,D0
0000151E  0600 0046                909      ADDI.B #$46,D0
00001522  201F                     910      MOVE.L (SP)+,D0
00001524                           911  ********************** PRINTING ROUTINES **************************************
00001524                           912  * Description: These routines are to print the associated op codes, by placing
00001524                           913  * them in the appropriate area to the buffer
00001524                           914  *
00001524                           915  * Registers used: A1 for loading, A6 for EA parsing.
00001524                           916  *
00001524                           917  * Precondition: The relevant opcode has been identified correctly.
00001524                           918  *
00001524                           919  * Postcondition: Prints out the associated opcode to the buffer.
00001524                           920  *******************************************************************************
00001524                           921  
00001524                           922  ****************************** GROUP 0 **************************************** 
00001524                           923  PRINT_OP_ORI:
00001524  43F9 0000178F            924      LEA P_OP_ORI,A1
0000152A  4EB9 00001770            925      JSR PRINT_OP
00001530  4E75                     926      RTS
00001532                           927  PRINT_OP_CMPI:
00001532  4EB8 124C                928      JSR FIND_3_BIT_REG_TO_EA
00001536  4EB8 1236                929      JSR FIND_2_BIT_SIZE_TO_EA
0000153A  4EB8 1214                930      JSR MOVE_LAST_6_BITS_TO_EA
0000153E  43F9 00001793            931      LEA P_OP_CMPI,A1
00001544  4EB9 00001770            932      JSR PRINT_OP
0000154A  4E75                     933      RTS
0000154C                           934  PRINT_OP_S_BCLR:
0000154C  4EB8 1214                935      JSR MOVE_LAST_6_BITS_TO_EA
00001550  4EB8 124C                936      JSR FIND_3_BIT_REG_TO_EA
00001554  3CBC 0000                937      MOVE.W #$0,(A6)
00001558  383C 0000                938      MOVE.W #%000, D4
0000155C  43F9 00001798            939      LEA P_OP_S_BCLR,A1
00001562  4EB9 00001770            940      JSR PRINT_OP
00001568  4E75                     941      RTS
0000156A                           942  PRINT_OP_D_BCLR:
0000156A  4EB8 1214                943      JSR MOVE_LAST_6_BITS_TO_EA
0000156E  4EB8 124C                944      JSR FIND_3_BIT_REG_TO_EA
00001572  3CBC 0000                945      MOVE.W #$0,(A6)
00001576  383C 0006                946      MOVE.W #%110, D4
0000157A  43F9 0000179D            947      LEA P_OP_D_BCLR,A1
00001580  4EB9 00001770            948      JSR PRINT_OP
00001586  4E75                     949      RTS
00001588                           950  ******************************* END OF GROUP 0 ********************************
00001588                           951  
00001588                           952  ****************************** GROUP 1 ****************************************    
00001588                           953  PRINT_OP_MOVEB:
00001588  4EB8 1262                954      JSR MOVE_AND_MOVEA_PARSE_EA
0000158C  3CBC 0001                955      MOVE.W #$1,(A6)
00001590  43F9 000017A2            956      LEA P_OP_MOVEB,A1
00001596  4EB9 00001770            957      JSR PRINT_OP
0000159C  4E75                     958      RTS
0000159E                           959  ******************************* END OF GROUP 1 ********************************
0000159E                           960      
0000159E                           961  ****************************** GROUP 2 **************************************** 
0000159E                           962  PRINT_OP_MOVEA_L:
0000159E  4EB8 1262                963      JSR MOVE_AND_MOVEA_PARSE_EA
000015A2  3CBC 0002                964      MOVE.W #$2,(A6)
000015A6  43F9 000017A9            965      LEA P_OP_MOVEA_L,A1
000015AC                           966      ;MOVE.L A1,G_BUFFER_PREP
000015AC                           967      ;MOVE.B (A1)+,D0
000015AC                           968      ;CMPI.B #$FF,D0
000015AC                           969      ;BNE MAKE_VAL_ASCII
000015AC                           970      ;MOVE.W P_OP_MOVEA_L,(A4)+
000015AC  4EB9 00001770            971      JSR PRINT_OP
000015B2  4E75                     972      RTS
000015B4                           973  PRINT_OP_MOVE_L:
000015B4  4EB8 1262                974      JSR MOVE_AND_MOVEA_PARSE_EA
000015B8  3CBC 0002                975      MOVE.W #$2,(A6)
000015BC  43F9 000017B1            976      LEA P_OP_MOVE_L,A1
000015C2  4EB9 00001770            977      JSR PRINT_OP
000015C8  4E75                     978      RTS
000015CA                           979  ******************************* END OF GROUP 2 ********************************
000015CA                           980      
000015CA                           981  ****************************** GROUP 3 ****************************************    
000015CA                           982  PRINT_OP_MOVEA_W:
000015CA  4EB8 1262                983      JSR MOVE_AND_MOVEA_PARSE_EA
000015CE  3CBC 0003                984      MOVE.W #$3,(A6)
000015D2  43F9 000017B8            985      LEA P_OP_MOVEA_W,A1
000015D8  4EB9 00001770            986      JSR PRINT_OP
000015DE  4E75                     987      RTS
000015E0                           988  PRINT_OP_MOVE_W:
000015E0  4EB8 1262                989      JSR MOVE_AND_MOVEA_PARSE_EA
000015E4  3CBC 0003                990      MOVE.W #$3,(A6)
000015E8  43F9 000017C0            991      LEA P_OP_MOVE_W,A1
000015EE  4EB9 00001770            992      JSR PRINT_OP
000015F4  4E75                     993      RTS
000015F6                           994  ******************************* END OF GROUP 3 ********************************
000015F6                           995  
000015F6                           996  ****************************** GROUP 4 ****************************************
000015F6                           997  PRINT_OP_NOP:
000015F6  43F9 000017DF            998      LEA P_OP_NOP,A1
000015FC  4EB9 00001770            999      JSR PRINT_OP
00001602  4E75                    1000      RTS
00001604                          1001  PRINT_OP_JSR:
00001604  43F9 000017DB           1002      LEA P_OP_JSR,A1
0000160A  4EB9 00001770           1003      JSR PRINT_OP
00001610  4E75                    1004      RTS
00001612                          1005  PRINT_OP_RTS:
00001612  43F9 000017E3           1006      LEA P_OP_RTS,A1
00001618  4EB9 00001770           1007      JSR PRINT_OP
0000161E  4E75                    1008      RTS
00001620                          1009  PRINT_OP_LEA:
00001620  43F9 000017D7           1010      LEA P_OP_LEA,A1
00001626  4EB9 00001770           1011      JSR PRINT_OP
0000162C  4E75                    1012      RTS
0000162E                          1013  PRINT_OP_NEG:
0000162E  43F9 000017E7           1014      LEA P_OP_NEG,A1
00001634  4EB9 00001770           1015      JSR PRINT_OP
0000163A  4E75                    1016      RTS
0000163C                          1017  PRINT_OP_MOVEM_W:
0000163C  43F9 000017C7           1018      LEA P_OP_MOVEM_W,A1
00001642  4EB9 00001770           1019      JSR PRINT_OP
00001648  4E75                    1020      RTS
0000164A                          1021  PRINT_OP_MOVEM_L:
0000164A  43F9 000017CF           1022      LEA P_OP_MOVEM_L,A1
00001650  4EB9 00001770           1023      JSR PRINT_OP
00001656  4E75                    1024      RTS
00001658                          1025  ******************************* END OF GROUP 4 ********************************
00001658                          1026      
00001658                          1027  ****************************** GROUP 5 ****************************************
00001658                          1028  PRINT_OP_SUBQ:
00001658  43F9 000017EB           1029      LEA P_OP_SUBQ,A1
0000165E  4EB9 00001770           1030      JSR PRINT_OP
00001664  4E75                    1031      RTS
00001666                          1032  ******************************* END OF GROUP 5 ********************************
00001666                          1033  
00001666                          1034  ****************************** GROUP 6 ****************************************
00001666                          1035  PRINT_OP_BCS:
00001666  43F9 000017F4           1036      LEA P_OP_BCS,A1
0000166C  4EB9 00001770           1037      JSR PRINT_OP
00001672  4E75                    1038      RTS
00001674                          1039  PRINT_OP_BGE:
00001674  43F9 000017F8           1040      LEA P_OP_BGE,A1
0000167A  4EB9 00001770           1041      JSR PRINT_OP
00001680  4E75                    1042      RTS
00001682                          1043  PRINT_OP_BLT:
00001682  43F9 000017FC           1044      LEA P_OP_BLT,A1
00001688  4EB9 00001770           1045      JSR PRINT_OP
0000168E  4E75                    1046      RTS
00001690                          1047  PRINT_OP_BVC:
00001690  43F9 00001800           1048      LEA P_OP_BVC,A1
00001696  4EB9 00001770           1049      JSR PRINT_OP
0000169C  4E75                    1050      RTS
0000169E                          1051  PRINT_OP_BRA:
0000169E  43F9 000017F0           1052      LEA P_OP_BRA,A1
000016A4  4EB9 00001770           1053      JSR PRINT_OP
000016AA  4E75                    1054      RTS
000016AC                          1055  ******************************* END OF GROUP 6 ********************************
000016AC                          1056  
000016AC                          1057  ****************************** GROUP 7 ****************************************
000016AC                          1058  * No currently supported OP codes to print here.
000016AC                          1059  ******************************* END OF GROUP 7 ********************************
000016AC                          1060  
000016AC                          1061  ****************************** GROUP 8 ****************************************
000016AC                          1062  PRINT_OP_DIVS:
000016AC  43F9 00001804           1063      LEA P_OP_DIVS,A1
000016B2  4EB9 00001770           1064      JSR PRINT_OP
000016B8  4E75                    1065      RTS
000016BA                          1066  PRINT_OP_OR:
000016BA  43F9 00001809           1067      LEA P_OP_OR,A1
000016C0  4EB9 00001770           1068      JSR PRINT_OP
000016C6  4E75                    1069      RTS
000016C8                          1070  ******************************* END OF GROUP 8 ********************************
000016C8                          1071  
000016C8                          1072  ****************************** GROUP 9 ****************************************
000016C8                          1073  PRINT_OP_SUB:
000016C8  43F9 0000180C           1074      LEA P_OP_SUB,A1
000016CE  4EB9 00001770           1075      JSR PRINT_OP
000016D4  4E75                    1076      RTS
000016D6                          1077  ******************************* END OF GROUP 9 ********************************
000016D6                          1078  
000016D6                          1079  ****************************** GROUP A ****************************************
000016D6                          1080  * No currently supported OP codes to print here.
000016D6                          1081  ******************************* END OF GROUP A ********************************
000016D6                          1082  
000016D6                          1083  ****************************** GROUP B ****************************************
000016D6                          1084  PRINT_OP_EOR:
000016D6  43F9 00001810           1085      LEA P_OP_EOR,A1
000016DC  4EB9 00001770           1086      JSR PRINT_OP
000016E2  4E75                    1087      RTS
000016E4                          1088  PRINT_OP_CMP:
000016E4  43F9 00001814           1089      LEA P_OP_CMP,A1
000016EA  4EB9 00001770           1090      JSR PRINT_OP
000016F0  4E75                    1091      RTS
000016F2                          1092  ******************************* END OF GROUP B ********************************
000016F2                          1093  
000016F2                          1094  ****************************** GROUP C ****************************************
000016F2                          1095  PRINT_OP_MULS:
000016F2  43F9 00001818           1096      LEA P_OP_MULS,A1
000016F8  4EB9 00001770           1097      JSR PRINT_OP
000016FE  4E75                    1098      RTS
00001700                          1099  ******************************* END OF GROUP C ********************************
00001700                          1100  
00001700                          1101  ****************************** GROUP D ****************************************
00001700                          1102  PRINT_OP_ADD:
00001700  43F9 00001822           1103      LEA P_OP_ADD,A1
00001706  4EB9 00001770           1104      JSR PRINT_OP
0000170C  4E75                    1105      RTS
0000170E                          1106  PRINT_OP_ADDA:
0000170E  43F9 0000181D           1107      LEA P_OP_ADDA,A1
00001714  4EB9 00001770           1108      JSR PRINT_OP
0000171A  4E75                    1109      RTS
0000171C                          1110  
0000171C                          1111  ******************************* END OF GROUP D ********************************
0000171C                          1112  
0000171C                          1113  ****************************** GROUP E ****************************************
0000171C                          1114  PRINT_OP_LSL:
0000171C  43F9 0000182A           1115      LEA P_OP_LSL,A1
00001722  4EB9 00001770           1116      JSR PRINT_OP
00001728  4E75                    1117      RTS
0000172A                          1118  PRINT_OP_LSR:
0000172A  43F9 00001826           1119      LEA P_OP_LSR,A1
00001730  4EB9 00001770           1120      JSR PRINT_OP
00001736  4E75                    1121      RTS
00001738                          1122  PRINT_OP_ASR:
00001738  43F9 0000182E           1123      LEA P_OP_ASR,A1
0000173E  4EB9 00001770           1124      JSR PRINT_OP
00001744  4E75                    1125      RTS
00001746                          1126  PRINT_OP_ASL:
00001746  43F9 00001832           1127      LEA P_OP_ASL,A1
0000174C  4EB9 00001770           1128      JSR PRINT_OP
00001752  4E75                    1129      RTS
00001754                          1130  PRINT_OP_ROL:
00001754  43F9 0000183A           1131      LEA P_OP_ROL,A1
0000175A  4EB9 00001770           1132      JSR PRINT_OP
00001760  4E75                    1133      RTS
00001762                          1134  PRINT_OP_ROR:
00001762  43F9 00001836           1135      LEA P_OP_ROR,A1
00001768  4EB9 00001770           1136      JSR PRINT_OP
0000176E  4E75                    1137      RTS
00001770                          1138  ******************************* END OF GROUP E ********************************
00001770                          1139  
00001770                          1140  ****************************** GROUP F ****************************************
00001770                          1141  * No currently supported OP codes to print here.
00001770                          1142  ******************************* END OF GROUP F ********************************
00001770                          1143  
00001770                          1144  
00001770                          1145  
00001770                          1146  PRINT_OP:   ;Prints current op code byte
00001770                          1147      ;MOVE.W (A4),(A1)       ; NEEDS TO USE G_BUFFER LATER
00001770  103C 000D               1148      MOVE.B #13,D0
00001774  4E4F                    1149      TRAP #15
00001776  4E75                    1150      RTS
00001778                          1151  ******************* END OF PRINTING ROUTINES **********************************
00001778                          1152  
00001778                          1153  ******************* END OF JMP LABELS *****************************************
00001778                          1154  
00001778                          1155  ******************* DATA CONSTANT PRINTS **************************************
00001778                          1156  * Formatting is as follows: P_OP_<OPCODE>, where P = Print, OP = Operation,
00001778                          1157  * <OPCODE> is any valid operand
00001778                          1158  
00001778= 44 41 54 41 00          1159  P_INVALID_OP    DC.B    'DATA',0
0000177D= 46 6F 75 6E 64 20 ...   1160  OP_FOUND        DC.B    'Found OP',0 ; this should be taken out later
00001786= 2E 42 00                1161  P_SIZE_B        DC.B    '.B',0
00001789= 2E 57 00                1162  P_SIZE_W        DC.B    '.W',0
0000178C= 2E 4C 00                1163  P_SIZE_L        DC.B    '.L',0
0000178F= 4F 52 49 00             1164  P_OP_ORI        DC.B    'ORI',0
00001793= 43 4D 50 49 00          1165  P_OP_CMPI       DC.B    'CMPI',0
00001798= 42 43 4C 52 00          1166  P_OP_S_BCLR     DC.B    'BCLR',0
0000179D= 42 43 4C 52 00          1167  P_OP_D_BCLR     DC.B    'BCLR',0
000017A2= 4D 4F 56 45 2E 42 00    1168  P_OP_MOVEB      DC.B    'MOVE.B',0
000017A9= 4D 4F 56 45 41 2E ...   1169  P_OP_MOVEA_L    DC.B    'MOVEA.L',0 
000017B1= 4D 4F 56 45 2E 4C 00    1170  P_OP_MOVE_L     DC.B    'MOVE.L',0
000017B8= 4D 4F 56 45 41 2E ...   1171  P_OP_MOVEA_W    DC.B    'MOVEA.W',0
000017C0= 4D 4F 56 45 2E 57 00    1172  P_OP_MOVE_W     DC.B    'MOVE.W',0
000017C7= 4D 4F 56 45 4D 2E ...   1173  P_OP_MOVEM_W    DC.B    'MOVEM.W',0
000017CF= 4D 4F 56 45 4D 2E ...   1174  P_OP_MOVEM_L    DC.B    'MOVEM.L',0
000017D7= 4C 45 41 00             1175  P_OP_LEA        DC.B    'LEA',0
000017DB= 4A 53 52 00             1176  P_OP_JSR        DC.B    'JSR',0
000017DF= 4E 4F 50 00             1177  P_OP_NOP        DC.B    'NOP',0
000017E3= 52 54 53 00             1178  P_OP_RTS        DC.B    'RTS',0
000017E7= 4E 45 47 00             1179  P_OP_NEG        DC.B    'NEG',0
000017EB= 53 55 42 51 00          1180  P_OP_SUBQ       DC.B    'SUBQ',0
000017F0= 42 52 41 00             1181  P_OP_BRA        DC.B    'BRA',0
000017F4= 42 43 53 00             1182  P_OP_BCS        DC.B    'BCS',0
000017F8= 42 47 45 00             1183  P_OP_BGE        DC.B    'BGE',0
000017FC= 42 4C 54 00             1184  P_OP_BLT        DC.B    'BLT',0
00001800= 42 56 43 00             1185  P_OP_BVC        DC.B    'BVC',0
00001804= 44 49 56 53 00          1186  P_OP_DIVS       DC.B    'DIVS',0
00001809= 4F 52 00                1187  P_OP_OR         DC.B    'OR',0
0000180C= 53 55 42 00             1188  P_OP_SUB        DC.B    'SUB',0
00001810= 45 4F 52 00             1189  P_OP_EOR        DC.B    'EOR',0
00001814= 43 4D 50 00             1190  P_OP_CMP        DC.B    'CMP',0
00001818= 4D 55 4C 53 00          1191  P_OP_MULS       DC.B    'MULS',0
0000181D= 41 44 44 41 00          1192  P_OP_ADDA       DC.B    'ADDA',0
00001822= 41 44 44 00             1193  P_OP_ADD        DC.B    'ADD',0
00001826= 4C 53 52 00             1194  P_OP_LSR        DC.B    'LSR',0
0000182A= 4C 53 4C 00             1195  P_OP_LSL        DC.B    'LSL',0
0000182E= 41 53 52 00             1196  P_OP_ASR        DC.B    'ASR',0
00001832= 41 53 4C 00             1197  P_OP_ASL        DC.B    'ASL',0
00001836= 52 4F 52 00             1198  P_OP_ROR        DC.B    'ROR',0
0000183A= 52 4F 4C 00             1199  P_OP_ROL        DC.B    'ROL',0
0000183E                          1200  ***************** END OF DATA CONSTANT PRINTS ***********************************
0000183E                          1201   
0000183E                          1202  
0000183E                          1203  **
0000183E                          1204  * AddStrToBuffer
0000183E                          1205  **
0000183E                          1206  * Adds the given NULL-terminated string to the specified buffer.
0000183E                          1207  *
0000183E                          1208  * Default buffer length is 80 characters, but can be modified in the argument
0000183E                          1209  * variables.
0000183E                          1210  *
0000183E                          1211  * If the buffer length is exceeded, either due to lack of a NULL character or
0000183E                          1212  * an incorrectly specified length, 1 is returned. Otherwise, 0 is returned to
0000183E                          1213  * indicate success.
0000183E                          1214  *
0000183E                          1215  **
0000183E                          1216  * @param Arg_AddStrToBuffer_String              Pointer to string
0000183E                          1217  * @param Arg_AddStrToBuffer_Buffer              Pointer to buffer
0000183E                          1218  * @param Arg_AddStrToBuffer_BufferLength        Length of buffer (default 80 chars)
0000183E                          1219  * @return Ret_AddStrToBuffer_Success            0 if successful, 1 otherwise.
0000183E                          1220  * @branch _AddStrToBuffer_FindBufferNullLoop    Loop to find NULL in buffer
0000183E                          1221  * @branch _AddStrToBuffer_AddLoop               Loop to add string to buffer
0000183E                          1222  * @branch _AddStrToBuffer_Success               Branch when string successfully added
0000183E                          1223  * @branch _AddStrToBuffer_StringLengthExceeded  Branch when length exceeded (either string or buffer)
0000183E                          1224  * @branch _AddStrToBuffer_End                   End of subroutine
0000183E                          1225  **
0000183E                          1226  Arg_AddStrToBuffer_String           DS.L    1
00001842                          1227  Arg_AddStrToBuffer_Buffer           DS.L    1
00001846= 00000050                1228  Arg_AddStrToBuffer_BufferLength     DC.L    80
0000184A                          1229  Ret_AddStrToBuffer_Success          DS.B    1
0000184B                          1230  
0000184C                          1231  AddStrToBuffer:                     DS.W    0
0000184C  48E7 C0C0               1232      MOVEM.L     D0-D1/A0-A1, -(SP)                  * Backup registers to stack
00001850                          1233  
00001850  2078 183E               1234      MOVE.L      Arg_AddStrToBuffer_String, A0       * Load string pointer
00001854  2278 1842               1235      MOVE.L      Arg_AddStrToBuffer_Buffer, A1       * Load buffer pointer
00001858  2038 1846               1236      MOVE.L      Arg_AddStrToBuffer_BufferLength, D0 * Load buffer length
0000185C  4278 184A               1237      CLR.W       Ret_AddStrToBuffer_Success          * Clear success bit
00001860  4281                    1238      CLR.L       D1                                  * Clear loop counter
00001862                          1239  
00001862                          1240  _AddStrToBuffer_BufferLoop
00001862  0C11 0000               1241      CMPI.B      #0, (A1)                            * If buffer char is NULL
00001866  6700 000E               1242      BEQ         _AddStrToBuffer_AddLoop             * Start adding string to bufer
0000186A                          1243      
0000186A  B280                    1244      CMP.L       D0, D1                              * If counter >= max length
0000186C  6C00 0024               1245      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
00001870                          1246      
00001870  5289                    1247      ADDQ.L      #1, A1                              * Go to next character
00001872  5201                    1248      ADDQ.B      #1, D1                              * Increment counter
00001874  60EC                    1249      BRA         _AddStrToBuffer_BufferLoop          * Loop back
00001876                          1250      
00001876                          1251  _AddStrToBuffer_AddLoop
00001876  0C10 0000               1252      CMPI.B      #0, (A0)                            * If string char is NULL
0000187A  6700 000E               1253      BEQ         _AddStrToBuffer_Success             * String successfully added
0000187E                          1254      
0000187E  B200                    1255      CMP.B       D0, D1                              * If counter >= max length
00001880  6C00 0010               1256      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
00001884                          1257      
00001884  12D8                    1258      MOVE.B      (A0)+, (A1)+                        * Move string char to buffer char
00001886  5201                    1259      ADDQ.B      #1, D1                              * Increment counter
00001888  60EC                    1260      BRA         _AddStrToBuffer_AddLoop             * Loop back
0000188A                          1261  
0000188A                          1262  _AddStrToBuffer_Success
0000188A  12BC 0000               1263      MOVE.B      #0, (A1)                            * Add NULL to end of string
0000188E  6000 0008               1264      BRA         _AddStrToBuffer_End                 * Finish subroutine
00001892                          1265  
00001892                          1266  _AddStrToBuffer_LengthExceeded
00001892  31FC 0001 184A          1267      MOVE.W      #1, Ret_AddStrToBuffer_Success      * Invalidate success bit
00001898                          1268  
00001898                          1269  _AddStrToBuffer_End
00001898  4CDF 0303               1270      MOVEM.L     (SP)+, D0-D1/A0-A1                  * Restore registers from stack
0000189C  4E75                    1271      RTS                  
0000189E                          1272     
0000189E                          1273      END START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDSTRTOBUFFER      184C
ADD_PERIOD          1518
ARG_ADDSTRTOBUFFER_BUFFER  1842
ARG_ADDSTRTOBUFFER_BUFFERLENGTH  1846
ARG_ADDSTRTOBUFFER_STRING  183E
B_BUFFER            1053
CG0_C               1394
CG0_F               1390
CHECK_OP_ADD        14E4
CHECK_OP_ADDA       14E4
CHECK_OP_ASL        14E4
CHECK_OP_ASR        14E4
CHECK_OP_BCS        14D8
CHECK_OP_BGE        14D8
CHECK_OP_BLT        14D8
CHECK_OP_BRA        14D4
CHECK_OP_BVC        14D8
CHECK_OP_CMP        14E4
CHECK_OP_CMPI       1342
CHECK_OP_DIVS       14DE
CHECK_OP_D_BCLR     1376
CHECK_OP_EOR        14E4
CHECK_OP_JSR        1470
CHECK_OP_LEA        145C
CHECK_OP_LSL        14E4
CHECK_OP_LSR        14E4
CHECK_OP_MOVEA_L    13AC
CHECK_OP_MOVEA_W    13F2
CHECK_OP_MOVEM      1498
CHECK_OP_MOVE_B     1396
CHECK_OP_MOVE_L     13DC
CHECK_OP_MOVE_W     1426
CHECK_OP_MULS       14E4
CHECK_OP_NEG        1484
CHECK_OP_NOP        144C
CHECK_OP_OR         14DE
CHECK_OP_ORI        1324
CHECK_OP_ROL        14E4
CHECK_OP_ROR        14E4
CHECK_OP_RTS        143C
CHECK_OP_SUB        14DE
CHECK_OP_SUBQ       14C0
CHECK_OP_S_BCLR     135C
CUR_OP_CODE         1000
C_GROUP_0           1320
C_GROUP_1           1396
C_GROUP_2           13AC
C_GROUP_3           13F2
C_GROUP_4           143C
C_GROUP_5           14AC
C_GROUP_6           14D4
C_GROUP_7           14D8
C_GROUP_8           14DE
C_GROUP_9           14DE
C_GROUP_A           14DE
C_GROUP_B           14E4
C_GROUP_C           14E4
C_GROUP_D           14E4
C_GROUP_E           14E4
C_GROUP_F           14E4
EA_SIZE             1002
FIND_2_BIT_SIZE_TO_EA  1236
FIND_3_BIT_REG_TO_EA  124C
FIND_MOVEA_L_DIFFERENCE  13BC
FIND_MOVEA_W_DIFFERENCE  1402
FIND_TRAILING_BITS_TO_EA  12A8
FIRST_3             10A4
FOURTH_3            10A7
GROUP_0             10EE
GROUP_1             1100
GROUP_2             1112
GROUP_3             1124
GROUP_4             1136
GROUP_5             1148
GROUP_6             115A
GROUP_7             116C
GROUP_8             117E
GROUP_9             1190
GROUP_A             11A2
GROUP_B             11B4
GROUP_C             11C6
GROUP_D             11D8
GROUP_E             11EA
GROUP_F             11FC
G_BUFFER            1003
INVALID_OP          14EA
LETTER_ASCII        150C
LOAD_OP_CODE        10D6
MAKE_VAL_ASCII      14FE
MNEMONIC            10A3
MOVE_AND_MOVEA_PARSE_EA  1262
MOVE_LAST_6_BITS_TO_EA  1214
NUMBER_ASCII        1512
OP_FOUND            177D
OP_JSR_DONE         120A
OP_JSR_ROUTINE      10E6
PARSE_EA_CONSTANT_BITS  12BE
PRINT_OP            1770
PRINT_OP_ADD        1700
PRINT_OP_ADDA       170E
PRINT_OP_ASL        1746
PRINT_OP_ASR        1738
PRINT_OP_BCS        1666
PRINT_OP_BGE        1674
PRINT_OP_BLT        1682
PRINT_OP_BRA        169E
PRINT_OP_BVC        1690
PRINT_OP_CMP        16E4
PRINT_OP_CMPI       1532
PRINT_OP_DIVS       16AC
PRINT_OP_D_BCLR     156A
PRINT_OP_EOR        16D6
PRINT_OP_JSR        1604
PRINT_OP_LEA        1620
PRINT_OP_LSL        171C
PRINT_OP_LSR        172A
PRINT_OP_MOVEA_L    159E
PRINT_OP_MOVEA_W    15CA
PRINT_OP_MOVEB      1588
PRINT_OP_MOVEM_L    164A
PRINT_OP_MOVEM_W    163C
PRINT_OP_MOVE_L     15B4
PRINT_OP_MOVE_W     15E0
PRINT_OP_MULS       16F2
PRINT_OP_NEG        162E
PRINT_OP_NOP        15F6
PRINT_OP_OR         16BA
PRINT_OP_ORI        1524
PRINT_OP_ROL        1754
PRINT_OP_ROR        1762
PRINT_OP_RTS        1612
PRINT_OP_SUB        16C8
PRINT_OP_SUBQ       1658
PRINT_OP_S_BCLR     154C
P_INVALID_OP        1778
P_OP_ADD            1822
P_OP_ADDA           181D
P_OP_ASL            1832
P_OP_ASR            182E
P_OP_BCS            17F4
P_OP_BGE            17F8
P_OP_BLT            17FC
P_OP_BRA            17F0
P_OP_BVC            1800
P_OP_CMP            1814
P_OP_CMPI           1793
P_OP_DIVS           1804
P_OP_D_BCLR         179D
P_OP_EOR            1810
P_OP_JSR            17DB
P_OP_LEA            17D7
P_OP_LSL            182A
P_OP_LSR            1826
P_OP_MOVEA_L        17A9
P_OP_MOVEA_L_A_L    10B4
P_OP_MOVEA_L_T      10A8
P_OP_MOVEA_W        17B8
P_OP_MOVEB          17A2
P_OP_MOVEM_L        17CF
P_OP_MOVEM_W        17C7
P_OP_MOVE_L         17B1
P_OP_MOVE_W         17C0
P_OP_MULS           1818
P_OP_NEG            17E7
P_OP_NOP            17DF
P_OP_OR             1809
P_OP_ORI            178F
P_OP_ROL            183A
P_OP_ROR            1836
P_OP_RTS            17E3
P_OP_SUB            180C
P_OP_SUBQ           17EB
P_OP_S_BCLR         1798
P_SIZE_B            1786
P_SIZE_L            178C
P_SIZE_W            1789
READ_NEXT_INSTRUCTION  14FA
RET_ADDSTRTOBUFFER_SUCCESS  184A
SECOND_3            10A5
START               10C0
THIRD_3             10A6
VALID_CHECK_OP_SUBQ  14AC
_ADDSTRTOBUFFER_ADDLOOP  1876
_ADDSTRTOBUFFER_BUFFERLOOP  1862
_ADDSTRTOBUFFER_END  1898
_ADDSTRTOBUFFER_LENGTHEXCEEDED  1892
_ADDSTRTOBUFFER_SUCCESS  188A
