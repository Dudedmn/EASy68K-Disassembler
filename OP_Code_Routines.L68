00000000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/17/2019 12:15:35 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OP Code routines for Disassembler
00000000                             3  * Written by : Daniel Yan
00000000                             4  * Date       : 2/28/2019, Updated 3/16/2019
00000000                             5  
00000000                             6  * Description: Disassembler routines to identify any valid
00000000                             7  * OP code dependent on current supported list.
00000000                             8  *------------------------------------------------------------
00000000                             9  OP_SIZE         DS.B    1   ;This constant refers to the size of the current OP code 
00000001                            10  MNEMONIC        DS.B    1   ;Constant for EA, first 4 bits (15-12) of a 4 hex OP code
00000002                            11  FIRST_3         DS.B    1   ;Constant for EA, 3 bits (11-9) of a 4 hex OP code
00000003                            12  SECOND_3        DS.B    1   ;Constant for EA, 3 bits (8-6) of a 4 hex OP code
00000004                            13  THIRD_3         DS.B    1   ;Constant for EA, 3 bits (5-3) of a 4 hex OP code
00000005                            14  FOURTH_3        DS.B    1   ;Constant for EA, 3 bits (2-0) of a 4 hex OP code
00000006                            15  
00000006                            16  ************************************************************************************
00000006                            17  * PRINTING BUFFER FUNCTION HAS BEEN FINISHED
00000006                            18  * STATUS: 
00000006                            19  * IDENTIFICATION FOR ALL OP CODES:      DONE
00000006                            20  * VALIDATION TESTING FOR ALL OP CODES:  DONE
00000006                            21  * PRINTING ALL OP CODES TO BUFFER:      DONE
00000006                            22  * PRINTING SIZE BITS OF ALL OP CODES:   DONE
00000006                            23  *-----------------------------------------------------------
00000006                            24  *First Nibble Values (15-12)
00000006                            25  *Value                  Operations
00000006                            26  *$0                     GROUP_0: ORI,BCLR (static and dynamic),CMPI --- DONE
00000006                            27  *$1                     GROUP_1: MOVE.B                             --- DONE
00000006                            28  *$2                     GROUP_2: MOVE.L, MOVEA.L                    --- DONE
00000006                            29  *$3                     GROUP_3: MOVE.W, MOVEA.W                    --- DONE
00000006                            30  *$4                     GROUP_4: LEA,JSR,RTS,NEG,MOVEM              --- DONE
00000006                            31  *$5                     GROUP_5: SUBQ                               --- DONE
00000006                            32  *$6                     GROUP_6: Bcc(BCS,BGE,BLT,BVC), BRA          --- DONE
00000006                            33  *$7                     GROUP_7: INVALID_OP                         --- DONE
00000006                            34  *$8                     GROUP_8: DIVS, OR                           --- DONE
00000006                            35  *$9                     GROUP_9: SUB                                --- DONE
00000006                            36  *$A                     GROUP_A: INVALID_OP                         --- DONE
00000006                            37  *$B                     GROUP_B: EOR, CMP                           --- DONE
00000006                            38  *$C                     GROUP_C: MULS                               --- DONE
00000006                            39  *$D                     GROUP_D: ADD, ADDA                          --- DONE
00000006                            40  *$E                     GROUP_E: LSR, LSL, ASR, ASL, ROL, ROR       --- DONE
00000006                            41  *$F                     GROUP_F: INVALID_OP                         --- DONE
00000006                            42  
00000006                            43  
00000006                            44  * OP_JSR_Routine
00000006                            45  **********************************************************************************
00000006                            46  * Description: Catalog all supported OP codes into groupings based on their hex
00000006                            47  * values. Sort the supported OP codes by looking at the first nibble for their
00000006                            48  * grouping value. Call underlying subroutines for further identification of the
00000006                            49  * op code.
00000006                            50  *
00000006                            51  * Registers used: A6,D0,D1 
00000006                            52  *
00000006                            53  * Precondition: Instruction set (size Word) has been loaded in the appropriate
00000006                            54  * address to be parsed and read.
00000006                            55  
00000006                            56  * Postcondition: OP code has been identified as either valid or invalid. If it is
00000006                            57  * valid, it is stored into A6 and EA parsing methods are called to pass needed
00000006                            58  * information to EA. If invalid, DATA output will be utilized to indicate so.
00000006                            59  **********************************************************************************
00000006                            60  * These valid operand codes refer to the basic supported operand codes
00000006                            61  * Groups refer to the first nibble value that is supported by the operand
00000006                            62  
00000006                            63  OP_JSR_Routine:
00000006  48E7 C000                 64      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
Line 65 ERROR: Undefined symbol
0000000A  3039 004DBD16             65      MOVE.W CUR_OP_CODE,D0
Line 66 ERROR: Undefined symbol
00000010  13FC 0001 005455B8        66      MOVE.B #1,IS_VALID
00000018  720C                      67      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
0000001A  E2A8                      68      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
0000001C                            69  
0000001C                            70  GROUP_0:                ;$0| ORI, BCLR (static and dynamic), CMPI                  
0000001C  B03C 0000                 71      CMP.B   #$0,D0                 ;Compare first nibble
00000020  6600 000C                 72      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
00000024  4EB9 0000026A             73      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
0000002A  6000 010C                 74      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000002E                            75      
0000002E                            76  GROUP_1:                ;$1| MOVE.B
0000002E  B03C 0001                 77      CMP.B   #$1,D0                 ;Compare first nibble
00000032  6600 000C                 78      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
00000036  4EB9 00000474             79      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
0000003C  6000 00FA                 80      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000040                            81  
00000040                            82  GROUP_2:                ;$2| MOVE.L, MOVEA.L
00000040  B03C 0002                 83      CMP.B   #$2,D0                 ;Compare first nibble
00000044  6600 000C                 84      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
00000048  4EB9 000004A0             85      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
0000004E  6000 00E8                 86      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000052                            87  
00000052                            88  GROUP_3:                ;$3| MOVE.W, MOVEA.W
00000052  B03C 0003                 89      CMP.B   #$3,D0                 ;Compare first nibble
00000056  6600 000C                 90      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
0000005A  4EB9 00000508             91      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
00000060  6000 00D6                 92      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000064                            93  
00000064                            94  GROUP_4:                ;$4| LEA, JSR, RTS, NEG, MOVEM
00000064  B03C 0004                 95      CMP.B   #$4,D0                 ;Compare first nibble
00000068  6600 000C                 96      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
0000006C  4EB9 00000570             97      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
00000072  6000 00C4                 98      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000076                            99  
00000076                           100  
00000076                           101  GROUP_5:                ;$5| SUBQ
00000076  B03C 0005                102      CMP.B   #$5,D0                 ;Compare first nibble
0000007A  6600 000C                103      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
0000007E  4EB9 0000083C            104      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
00000084  6000 00B2                105      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000088                           106  
00000088                           107  
00000088                           108  GROUP_6:                ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
00000088  B03C 0006                109      CMP.B   #$6,D0                 ;Compare first nibble
0000008C  6600 000C                110      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
00000090  4EB9 000008AE            111      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
00000096  6000 00A0                112      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000009A                           113  
0000009A                           114  
0000009A                           115  GROUP_7:                ;$7| Display: DATA, $WXYZ (Unsupported)
0000009A  B03C 0007                116      CMP.B   #$7,D0                 ;Compare first nibble
0000009E  6600 000C                117      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
000000A2  4EB9 00000A10            118      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
000000A8  6000 008E                119      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000AC                           120  
000000AC                           121  
000000AC                           122  GROUP_8:                ;$8| DIVS, OR
000000AC  B03C 0008                123      CMP.B   #$8,D0                 ;Compare first nibble
000000B0  6600 000C                124      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
000000B4  4EB9 00000A32            125      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
000000BA  6000 007C                126      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000BE                           127  
000000BE                           128  
000000BE                           129  GROUP_9:                ;$9| SUB
000000BE  B03C 0009                130      CMP.B   #$9,D0                 ;Compare first nibble
000000C2  6600 000C                131      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
000000C6  4EB9 00000A98            132      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
000000CC  6000 006A                133      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000D0                           134  
000000D0                           135  
000000D0                           136  GROUP_A:                ;$A| Display: DATA, $WXYZ (Unsupported)
000000D0  B03C 000A                137      CMP.B   #$A,D0                 ;Compare first nibble
000000D4  6600 000C                138      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
000000D8  4EB9 00000B10            139      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
000000DE  6000 0058                140      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000E2                           141  
000000E2                           142  
000000E2                           143  GROUP_B:                ;$B| EOR, CMP
000000E2  B03C 000B                144      CMP.B   #$B,D0                 ;Compare first nibble
000000E6  6600 000C                145      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
000000EA  4EB9 00000B18            146      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
000000F0  6000 0046                147      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000F4                           148  
000000F4                           149  
000000F4                           150  GROUP_C:                ;$C| MULS
000000F4  B03C 000C                151      CMP.B   #$C,D0                 ;Compare first nibble
000000F8  6600 000C                152      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
000000FC  4EB9 00000B94            153      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
00000102  6000 0034                154      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000106                           155  
00000106                           156  
00000106                           157  GROUP_D:                 ;$D| ADD, ADDA
00000106  B03C 000D                158      CMP.B   #$D,D0                 ;Compare first nibble
0000010A  6600 000C                159      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
0000010E  4EB9 00000C22            160      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
00000114  6000 0022                161      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000118                           162  
00000118                           163  
00000118                           164  GROUP_E:                ;$E| LSR, LSL, ASR, ASL, ROL, ROR
00000118  B03C 000E                165      CMP.B   #$E,D0                 ;Compare first nibble
0000011C  6600 000C                166      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
00000120  4EB9 00000C88            167      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
00000126  6000 0010                168      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000012A                           169  
0000012A                           170  
0000012A                           171  GROUP_F:                ;$F| Display: DATA, $WXYZ (Unsupported)
0000012A  B03C 000F                172      CMP.B   #$F,D0                 ;Compare first nibble
0000012E  4EB9 00000E58            173      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
00000134  6000 0002                174      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000138                           175  
00000138                           176  
00000138                           177  OP_JSR_DONE:
00000138  4CDF 0003                178           MOVEM.L (SP)+,D0-D1       ;Recover register D0
0000013C  4EB9 00000142            179           JSR    check_NOP
00000142                           180  check_NOP                           ;THIS IS A TEMPORARY ROUTINE MADE FOR NOP until EA UPDATES NOP validity
Line 181 ERROR: Undefined symbol
00000142  0C79 4E71 005455B8       181           CMP.W #$4E71,CUR_OP_CODE
Line 182 ERROR: Undefined symbol
0000014A  6700 BBCA                182           BEQ    check_print
0000014E  6600 0002                183           BNE    normal_CHECK
00000152                           184  normal_CHECK         
Line 185 ERROR: Undefined symbol
00000152  0C39 0001 005455B8       185           CMP.B #1,IS_VALID
Line 186 ERROR: Undefined symbol
0000015A  6700 BBBA                186           BEQ    main_EA             ;This runs EA's routines after OP code portion is finished
Line 187 ERROR: Undefined symbol
0000015E  6600 BBB6                187           BNE    check_print
00000162                           188  **********************************************************************************    
00000162                           189  * FIND_2_BIT_SIZE_7_TO_6
00000162                           190  **********************************************************************************
00000162                           191  * Description: For OP codes with 2 bit size fields, the 2 relevant bits (7-6) will 
00000162                           192  * be parsed and moved to the appropriate registers.
00000162                           193  *
00000162                           194  * Registers used: D0,D1
00000162                           195  *
00000162                           196  * Precondition: OP code has been identified with 2 size bit field for CUR_OP_CODE.
00000162                           197  *
00000162                           198  * Postcondition: 2 bit size field has been isolated and stored into OP_SIZE.
00000162                           199  **********************************************************************************
00000162                           200  FIND_2_BIT_SIZE_7_TO_6:         ;Move the 2 bit size field relevant register
00000162  48E7 C000                201      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
Line 202 ERROR: Undefined symbol
00000166  3039 004DBD16            202      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
0000016C  323C 0008                203      MOVE.W   #8,D1              ;Prepare 8 bit shift to D1
00000170  E368                     204      LSL.W    D1,D0              ;Truncate to find the 2 size bits
00000172  E268                     205      LSR.W    D1,D0              ;Reposition the bits
00000174  323C 0006                206      MOVE.W   #6,D1              ;Prepare 6 bit shift to D1
00000178  E268                     207      LSR.W    D1,D0              ;Truncate to shift 2 bits to a byte
0000017A  11C0 0000                208      MOVE.B   D0,OP_SIZE         ;Move 2 size bits into OP_SIZE
0000017E  4CDF 0003                209      MOVEM.L (SP)+,D0-D1         ;Restore registers
00000182  4E75                     210      RTS                         ;Return to stack
00000184                           211  **********************************************************************************
00000184                           212  
00000184                           213  * FIND_1_BIT_SIZE_6
00000184                           214  **********************************************************************************
00000184                           215  * Description: For OP codes with 1 bit size fields, the 1 relevant bit 6 will 
00000184                           216  * be parsed and moved to the appropriate registers.
00000184                           217  * This particular size parsing is used for MOVEM
00000184                           218  *
00000184                           219  * Registers used: D0,D1
00000184                           220  *
00000184                           221  * Precondition: OP code has been identified with 1 size bit field for CUR_OP_CODE.
00000184                           222  *
00000184                           223  * Postcondition: 1 bit size field has been isolated and stored into OP_SIZE.
00000184                           224  **********************************************************************************
00000184                           225  FIND_1_BIT_SIZE_6:              ;Move the 1 bit size field relevant register
00000184  48E7 C000                226      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
Line 227 ERROR: Undefined symbol
00000188  3039 004DBD16            227      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
0000018E  323C 0009                228      MOVE.W   #9,D1              ;Prepare 9 bit shift to D1
00000192  E368                     229      LSL.W    D1,D0              ;Truncate to find the size bit
00000194  E268                     230      LSR.W    D1,D0              ;Reposition the bits
00000196  323C 0006                231      MOVE.W   #6,D1              ;Prepare 6 bit shift to D1
0000019A  E268                     232      LSR.W    D1,D0              ;Truncate to shift 1 bit to a byte
0000019C  11C0 0000                233      MOVE.B   D0,OP_SIZE         ;Move 1 size bit into OP_SIZE
000001A0  4CDF 0003                234      MOVEM.L (SP)+,D0-D1         ;Restore registers
000001A4  4E75                     235      RTS                         ;Return to stack
000001A6                           236  **********************************************************************************
000001A6                           237  
000001A6                           238  * FIND_1_BIT_SIZE_8
000001A6                           239  **********************************************************************************
000001A6                           240  * Description: For OP codes with 1 bit size fields, the 1 relevant bit 8 will 
000001A6                           241  * be parsed and moved to the appropriate registers.
000001A6                           242  * This particular size parsing is used for ADDA
000001A6                           243  *
000001A6                           244  * Registers used: D0,D1
000001A6                           245  *
000001A6                           246  * Precondition: OP code has been identified with 1 size bit field for CUR_OP_CODE.
000001A6                           247  *
000001A6                           248  * Postcondition: 1 bit size field has been isolated and stored into OP_SIZE.
000001A6                           249  *
000001A6                           250  **********************************************************************************
000001A6                           251  FIND_1_BIT_SIZE_8:         ;Move the 1 bit size field relevant register
000001A6  48E7 C000                252      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
Line 253 ERROR: Undefined symbol
000001AA  3039 004DBD16            253      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
000001B0  323C 0007                254      MOVE.W   #7,D1              ;Prepare 7 bit shift to D1
000001B4  E368                     255      LSL.W    D1,D0              ;Truncate to find the 1 size bit
000001B6  E268                     256      LSR.W    D1,D0              ;Reposition the bits
000001B8  323C 0008                257      MOVE.W   #8,D1              ;Prepare 8 bit shift to D1
000001BC  E268                     258      LSR.W    D1,D0              ;Truncate to shift 1 bit to a byte
000001BE  11C0 0000                259      MOVE.B   D0,OP_SIZE         ;Move 1 size bit into OP_SIZE
000001C2  4CDF 0003                260      MOVEM.L (SP)+,D0-D1         ;Restore registers
000001C6  4E75                     261      RTS                         ;Return to stack
000001C8                           262  **********************************************************************************
000001C8                           263  
000001C8                           264  * MOVE_AND_MOVEA_PARSE_EA
000001C8                           265  **********************************************************************************
000001C8                           266  * Description: Special parsing for the SRC and DST Mode/Reg for MOVE/MOVE
000001C8                           267  *
000001C8                           268  * Registers used: A6,D0,D1,D7,D6,D5,D4
000001C8                           269  *
000001C8                           270  * Precondition: OP code has been identified with either MOVE or MOVEA
000001C8                           271  *
000001C8                           272  * Postcondition: Store all relevant EA bits into associated register.
000001C8                           273  **********************************************************************************
000001C8                           274  MOVE_AND_MOVEA_PARSE_EA:       ;Move the 3 bit dynamic register bits to proper register
000001C8                           275     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
Line 276 ERROR: Undefined symbol
000001C8  3039 004DBD16            276      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
000001CE  323C 000A                277      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
000001D2  E368                     278      LSL.W   D1,D0            ;Truncate to find the last 6 bits
000001D4  E268                     279      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
000001D6  3E00                     280      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
000001D8  323C 0003                281      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
000001DC  E26F                     282      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
000001DE  3A07                     283      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
000001E0  323C 000D                284      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
000001E4  E368                     285      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
000001E6  E268                     286      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
000001E8  3800                     287      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
000001EA                           288  ****MOVING_SOURCE***********
Line 289 ERROR: Undefined symbol
000001EA  3039 004DBD16            289      MOVE.W CUR_OP_CODE,D0     ;Move current OP code into D0     
000001F0  323C 0004                290      MOVE.W  #4,D1             ;Prepare 4 bit shift to D1
000001F4  E368                     291      LSL.W   D1,D0             ;Truncate to find bits 11-6
000001F6  E268                     292      LSR.W   D1,D0             ;Reposition bits
000001F8  323C 0006                293      MOVE.W  #6,D1             ;Prepare 6 bit shift to D1
000001FC  E268                     294      LSR.W   D1,D0             ;Truncate the SRC Reg/Mode bits
000001FE  323C 0003                295      MOVE.W  #3,D1             ;Prepare a 3 bit shift to D1 for DST Reg/Mode
00000202  3C00                     296      MOVE.W  D0,D6             ;Copy over the current 6 bits to D6
00000204  E268                     297      LSR.W   D1,D0             ;Truncate DST Mode  
00000206  3E00                     298      MOVE.W  D0,D7             ;Move DST Reg to D7
00000208  323C 000D                299      MOVE.W  #13,D1             
0000020C  E36E                     300      LSL.W   D1,D6             ;Truncate 13 bits in D6
0000020E  E26E                     301      LSR.W   D1,D6             ;Reposition D6
00000210                           302                                ;D6 now contains the DST Reg
00000210                           303     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
00000210  4E75                     304      RTS                     ;Return to stack
00000212                           305  **********************************************************************************
00000212                           306  ********** EA Parsing ************************************************************
00000212                           307  *PARSE_EA_CONSTANT_BITS
00000212                           308  **********************************************************************************
00000212                           309  * Definition: Uses CUR_OP_CODE to shift the proper bits into the global constants
00000212                           310  * used for EA (MNEMONIC,FIRST_3,SECOND_3,THIRD_3,FOURTH_3. Where MNEMONIC refers
00000212                           311  * to the first 4 bits of CUR_OP_CODE (15-12), FIRST_3 refers to the first group
00000212                           312  * of 3 bits (11-9), SECOND_3 refers to the second group of 3 bits (8-6), THIRD_3
00000212                           313  * refers to the third group of 3 bits (5-3), and FOURTH_3 refers to the fourth
00000212                           314  * group of 3 bits (2-0). Shifts CUR_OP_CODE bits to initialize constants.
00000212                           315  *
00000212                           316  * Registers used: D0,D1
00000212                           317  *
00000212                           318  * Precondition: CUR_OP_CODE has been set with an 4 hex instruction set
00000212                           319  * 
00000212                           320  * Postcondition: MNEMONIC, FIRST_3, SECOND_3, THIRD_3, FOURTH_3 have been set
00000212                           321  * to the corresponding values.
00000212                           322  **********************************************************************************
00000212                           323  PARSE_EA_CONSTANT_BITS:
00000212                           324      *MNEMONIC SHIFT
Line 325 ERROR: Undefined symbol
00000212  3039 004DBD16            325      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D0
00000218  323C 000C                326      MOVE.W #12,D1               ;Prepare a bit shift of 12 into D1
0000021C  E268                     327      LSR.W D1,D0                 ;Shift 12 bits from D0 right
0000021E  11C0 0001                328      MOVE.B D0,MNEMONIC          ;Set MNEMONIC to D0
00000222                           329      *FIRST_3 SHIFT
00000222  323C 0009                330      MOVE.W #9,D1                ;Prepare a bit shift of 9 into D1
Line 331 ERROR: Undefined symbol
00000226  3039 004DBD16            331      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
0000022C  E948                     332      LSL.W #4,D0                 ;Shift out bits 15-12 in D0
0000022E  E848                     333      LSR.W #4,D0                 ;Reposition D0
00000230  E268                     334      LSR.W  D1,D0                ;Shift D0 9 bits right
00000232  11C0 0002                335      MOVE.B D0,FIRST_3           ;Set FIRST_3 to D0
00000236                           336      *SECOND_3 SHIFT
Line 337 ERROR: Undefined symbol
00000236  3039 004DBD16            337      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
0000023C  EF48                     338      LSL.W #7,D0                 ;Shift out bits 15-9 in D0
0000023E  EE48                     339      LSR.W #7,D0                 ;Reposition D0
00000240  EC48                     340      LSR.W #6,D0                 ;Shift D0 6 bits right
00000242  11C0 0003                341      MOVE.B D0,SECOND_3          ;Set SECOND_3 to D0
00000246                           342      *THIRD_3 SHIFT
Line 343 ERROR: Undefined symbol
00000246  3039 004DBD16            343      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
0000024C  E648                     344      LSR.W #3,D0                 ;Shift D0 3 bits right
0000024E  323C 000D                345      MOVE.W #13,D1               ;Prepare a 13 bit shift into D1
00000252  E368                     346      LSL.W D1,D0                 ;Truncate first 13 bits of D0
00000254  E268                     347      LSR.W D1,D0                 ;Reposition D0
00000256  11C0 0004                348      MOVE.B D0,THIRD_3           ;Set THIRD_3 to D0
0000025A                           349      *FOURTH_3 SHIFT
Line 350 ERROR: Undefined symbol
0000025A  3039 004DBD16            350      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
00000260  E368                     351      LSL.W D1,D0                 ;Grab the fourth 3-bit group
00000262  E268                     352      LSR.W D1,D0                 ;Shift D0 back into position
00000264  11C0 0005                353      MOVE.B D0,FOURTH_3          ;Set FOURTH_3 to Do
00000268  4E75                     354      RTS                         ;Return to stack
0000026A                           355  **********************************************************************************
0000026A                           356  ********** End of EA Parsing *****************************************************
0000026A                           357  
0000026A                           358  *******************JMP LABELS ****************************************************
0000026A                           359  * Labelling for group codes will be in the following format
0000026A                           360  
0000026A                           361  * <JMP Labelname>
0000026A                           362  ********************************************************************************
0000026A                           363  * Checking List Order (If more than one value)
0000026A                           364  * Operand1 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
0000026A                           365  * Operand2 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
0000026A                           366  
0000026A                           367  * Where a-b will refer to the bit corresponding bit value in the instruction
0000026A                           368  * format, and a specifier will be attached such as Size, EA Mode, SRC Reg, etc
0000026A                           369  * to clarify what a specific bit range means.
0000026A                           370  * Checking order refers to what order the checks will be performed in. 
0000026A                           371  * Any other code outside of the listed ones will be INVALID_OP.
0000026A                           372  ********************************************************************************
0000026A                           373  
0000026A                           374  ********************************************************************************
0000026A                           375  * Global Field Descriptions
0000026A                           376  * Size Field: Byte = 00 Word = 01 Long = 10
0000026A                           377  * EA Mode: Refer to EA Address Modes
0000026A                           378  * EA Reg: 3-bit input that is mapped to the respective binary value
0000026A                           379  ********************************************************************************
0000026A                           380  
0000026A                           381  * GROUP_0                      
0000026A                           382  ********************************************************************************
0000026A                           383  * Description: Checks for the following listed OP codes to be present or not
0000026A                           384  * Supported OP codes:
0000026A                           385  * ORI: $00, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
0000026A                           386  * CMPI: $0C, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
0000026A                           387  * Dynamic BCLR: $0, 11-9 Register, 8-6 %110, 5-3 EA Mode, 2-0 EA Reg
0000026A                           388  * Static BCLR: $01, 7-6 10, 5-3 EA Mode, 2-0 EA Reg
0000026A                           389  *
0000026A                           390  * Registers used: D0
0000026A                           391  *
0000026A                           392  * Precondition: First nibble has been identified as $0
0000026A                           393  *
0000026A                           394  * Postcondition: Parses proper OP code with a nibble value of $0 or finds an
0000026A                           395  * invalid OP code. After a successful parse loading for EA values will be done
0000026A                           396  * through a subroutine.
0000026A                           397  * 
0000026A                           398  * Unsupported OP codes:
0000026A                           399  * ORI_TO_CCR, ORI_TO_SR, ANDI_TO_CCR, ANDI_TO_SR, ANDI, SUBI, ADDI, EORI_TO_CCR
0000026A                           400  * EORI_TO_SR, EORI, STATIC_BTST, STATIC_BCHG, STATIC_BSET, DYNAMIC_BTST,
0000026A                           401  * DYNAMIC_BCHG, DYNAMIC_BSET, MOVEP 
0000026A                           402  ********************************************************************************
0000026A                           403  C_GROUP_0:
0000026A  48E7 C000                404      MOVEM.L D0-D1, -(SP)            ;Backup registers
0000026E                           405      
0000026E                           406  *Unsupported OP codes that are fully static in bits
0000026E                           407  CHECK_OP_ORI_TO_CCR:
Line 408 ERROR: Undefined symbol
0000026E  3039 004DBD16            408      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000274  B07C 003C                409      CMP.W #$003C,D0                 ;Compare the direct full bits
00000278  6700 01EE                410      BEQ GROUP0_INVALID              ;INVALID OP code found
0000027C  6600 0002                411      BNE CHECK_OP_ORI_TO_SR          ;Check next routine
00000280                           412      
00000280                           413  CHECK_OP_ORI_TO_SR:
Line 414 ERROR: Undefined symbol
00000280  3039 004DBD16            414      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000286  B07C 007C                415      CMP.W #$007C,D0                 ;Compare the direct full bits
0000028A  6700 01DC                416      BEQ GROUP0_INVALID              ;INVALID OP code found
0000028E  6600 0002                417      BNE CHECK_OP_ANDI_TO_CCR        ;Check next routine
00000292                           418      
00000292                           419  CHECK_OP_ANDI_TO_CCR:
Line 420 ERROR: Undefined symbol
00000292  3039 004DBD16            420      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000298  B07C 023C                421      CMP.W #$023C,D0                 ;Compare the direct full bits
0000029C  6700 01CA                422      BEQ GROUP0_INVALID              ;INVALID OP code found
000002A0  6600 0002                423      BNE CHECK_OP_ANDI_TO_SR         ;Check next routine
000002A4                           424      
000002A4                           425  CHECK_OP_ANDI_TO_SR:
Line 426 ERROR: Undefined symbol
000002A4  3039 004DBD16            426      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002AA  B07C 027C                427      CMP.W #$027C,D0                 ;Compare the direct full bits
000002AE  6700 01B8                428      BEQ GROUP0_INVALID              ;INVALID OP code found
000002B2  6600 0002                429      BNE CHECK_OP_EORI_TO_CCR                ;Check next routine
000002B6                           430  
000002B6                           431  CHECK_OP_EORI_TO_CCR:
Line 432 ERROR: Undefined symbol
000002B6  3039 004DBD16            432      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002BC  B07C 0A3C                433      CMP.W #$0A3C,D0                 ;Compare the direct full bits
000002C0  6700 01A6                434      BEQ GROUP0_INVALID              ;INVALID OP code found
000002C4  6600 0002                435      BNE CHECK_OP_EORI_TO_SR         ;Check next routine
000002C8                           436      
000002C8                           437  CHECK_OP_EORI_TO_SR:
Line 438 ERROR: Undefined symbol
000002C8  3039 004DBD16            438      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002CE  B07C 0A7C                439      CMP.W #$0A7C,D0                 ;Compare the direct full bits
000002D2  6700 0194                440      BEQ GROUP0_INVALID              ;INVALID OP code found
000002D6  6600 0002                441      BNE CHECK_OP_ANDI               ;Check next routine
000002DA                           442      
000002DA                           443  *Unsupported OP codes to check with partial static bits
000002DA                           444  CHECK_OP_ANDI:
Line 445 ERROR: Undefined symbol
000002DA  3039 004DBD16            445      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002E0  0240 FF00                446      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
000002E4  B07C 0200                447      CMP.W #$0200,D0                 ;Compare the appropriate masked bits
000002E8  6700 017E                448      BEQ GROUP0_INVALID              ;INVALID OP code found
000002EC  6600 0002                449      BNE CHECK_OP_SUBI               Check next routine
000002F0                           450      
000002F0                           451  CHECK_OP_SUBI:
Line 452 ERROR: Undefined symbol
000002F0  3039 004DBD16            452      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002F6  0240 FF00                453      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
000002FA  B07C 0400                454      CMP.W #$0400,D0                 ;Compare the appropriate masked bits
000002FE  6700 0168                455      BEQ GROUP0_INVALID              ;INVALID OP code found
00000302  6600 0002                456      BNE CHECK_OP_ADDI               ;Check next routine
00000306                           457  
00000306                           458  CHECK_OP_ADDI:
Line 459 ERROR: Undefined symbol
00000306  3039 004DBD16            459      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000030C  0240 FF00                460      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00000310  B07C 0600                461      CMP.W #$0600,D0                 ;Compare the appropriate masked bits
00000314  6700 0152                462      BEQ GROUP0_INVALID              ;INVALID OP code found
00000318  6600 0002                463      BNE CHECK_OP_EORI               ;Check next routine 
0000031C                           464  
0000031C                           465  CHECK_OP_EORI:
Line 466 ERROR: Undefined symbol
0000031C  3039 004DBD16            466      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000322  0240 FF00                467      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00000326  B07C 0A00                468      CMP.W #$0A00,D0                 ;Compare the appropriate masked bits
0000032A  6700 013C                469      BEQ GROUP0_INVALID              ;INVALID OP code found
0000032E  6600 0002                470      BNE CHECK_OP_STATIC_BTST        ;Check next routine
00000332                           471      
00000332                           472  CHECK_OP_STATIC_BTST:
Line 473 ERROR: Undefined symbol
00000332  3039 004DBD16            473      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000338  0240 FFC0                474      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
0000033C  B07C 0800                475      CMP.W #$0800,D0                 ;Compare the appropriate masked bits
00000340  6700 0126                476      BEQ GROUP0_INVALID              ;INVALID OP code found
00000344  6600 0002                477      BNE CHECK_OP_STATIC_BCHG        ;Check next routine
00000348                           478      
00000348                           479  CHECK_OP_STATIC_BCHG:
Line 480 ERROR: Undefined symbol
00000348  3039 004DBD16            480      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000034E  0240 FFC0                481      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00000352  B07C 0840                482      CMP.W #$0840,D0                 ;Compare the appropriate masked bits
00000356  6700 0110                483      BEQ GROUP0_INVALID              ;INVALID OP code found
0000035A  6600 0002                484      BNE CHECK_OP_STATIC_BSET        ;Check next routine
0000035E                           485  
0000035E                           486  CHECK_OP_STATIC_BSET:
Line 487 ERROR: Undefined symbol
0000035E  3039 004DBD16            487      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000364  0240 FFC0                488      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00000368  B07C 08C0                489      CMP.W #$08C0,D0                 ;Compare the appropriate masked bits
0000036C  6700 00FA                490      BEQ GROUP0_INVALID              ;INVALID OP code found   
00000370  6600 0002                491      BNE CHECK_OP_DYNAMIC_BTST       ;Check next routine
00000374                           492  
00000374                           493  CHECK_OP_DYNAMIC_BTST:
Line 494 ERROR: Undefined symbol
00000374  3039 004DBD16            494      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000037A  0240 F1C0                495      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
0000037E  B07C 0100                496      CMP.W #$0100,D0                 ;Compare the appropriate masked bits
00000382  6700 00E4                497      BEQ GROUP0_INVALID              ;INVALID OP code found
00000386  6600 0002                498      BNE CHECK_OP_DYNAMIC_BCHG       ;Check next routine
0000038A                           499  
0000038A                           500  CHECK_OP_DYNAMIC_BCHG:
Line 501 ERROR: Undefined symbol
0000038A  3039 004DBD16            501      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000390  0240 F1C0                502      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
00000394  B07C 0140                503      CMP.W #$0140,D0                 ;Compare the appropriate masked bits 
00000398  6700 00CE                504      BEQ GROUP0_INVALID              ;INVALID OP code found
0000039C  6600 0002                505      BNE CHECK_OP_DYNAMIC_BSET       ;Check next routine
000003A0                           506      
000003A0                           507  CHECK_OP_DYNAMIC_BSET:
000003A0                           508  
Line 509 ERROR: Undefined symbol
000003A0  3039 004DBD16            509      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000003A6  0240 F1C0                510      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
000003AA  B07C 01C0                511      CMP.W   #$01C0,D0               ;Compare the appropriate masked bits 
000003AE  6700 0006                512      BEQ     BIT_CHECK_MOVEP         ;Check special case for MOVEP
000003B2  6600 001E                513      BNE     CHECK_OP_MOVEP          ;Check next routine
000003B6                           514  
000003B6                           515  BIT_CHECK_MOVEP:                                ;This is a special case check for MOVEP
Line 516 ERROR: Undefined symbol
000003B6  3039 004DBD16            516      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000003BC  323C 000A                517      MOVE.W  #10,D1                  ;Prepare a 10-bit shift
000003C0  E368                     518      LSL.W   D1,D0                   ;Shift out 10 bits left 
000003C2  E268                     519      LSR.W   D1,D0                   ;Reposition D0 for last 6 bits
000003C4  E648                     520      LSR.W   #3,D0                   ;Shift out 3 bits right, D0 contains bits 5-3
000003C6  B07C 0001                521      CMP.W   #$1,D0                  ;Compare bits to D0
000003CA  6700 0006                522      BEQ     CHECK_OP_MOVEP          ;If bits are $1 then it's addressing, goto MOVEP
000003CE  6600 0098                523      BNE     GROUP0_INVALID          ;If not then it's DYNAMIC_BSET which is invalid
000003D2                           524      
000003D2                           525  CHECK_OP_MOVEP:
Line 526 ERROR: Undefined symbol
000003D2  3039 004DBD16            526      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000003D8  0240 F138                527      ANDI.W #$F138,D0                ;Mask relevant bits to D0
000003DC  B07C 0108                528      CMP.W #$0108,D0                 ;Compare the appropriate masked bits
000003E0  6700 0A7E                529      BEQ INVALID_OP                  ;INVALID OP code found
000003E4  6600 0002                530      BNE CHECK_OP_ORI                ;Check next routine
000003E8                           531  
000003E8                           532  *Supported OP code checks
000003E8                           533  CHECK_OP_ORI:
Line 534 ERROR: Undefined symbol
000003E8  3039 004DBD16            534      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000003EE  0240 FF00                535      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
000003F2  B07C 0000                536      CMP.W   #$0000,D0               ;Compare the appropriate masked bits     
000003F6  6600 0010                537      BNE     CHECK_OP_CMPI           ;Branch to next comparison if not equal
000003FA  4EB8 0162                538      JSR     FIND_2_BIT_SIZE_7_TO_6
000003FE  4EB9 00000E7C            539      JSR     PRINT_OP_ORI            ;Print the OP code if equal    
00000404  6000 0068                540      BRA     GROUP0_SUCCESS          ;Finish routine
00000408                           541      
00000408                           542  CHECK_OP_CMPI:
Line 543 ERROR: Undefined symbol
00000408  3039 004DBD16            543      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000040E  0240 FF00                544      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00000412  B07C 0C00                545      CMP.W   #$0C00,D0               ;Compare the appropriate masked bits   
00000416  6600 0010                546      BNE     CHECK_OP_STATIC_BCLR    ;Branch to next comparison if not equal       
0000041A  4EB8 0162                547      JSR     FIND_2_BIT_SIZE_7_TO_6
0000041E  4EB9 00000E92            548      JSR     PRINT_OP_CMPI           ;Print the OP code if equal
00000424  6000 0048                549      BRA     GROUP0_SUCCESS          ;Finish routine
00000428                           550      
00000428                           551  CHECK_OP_STATIC_BCLR:
Line 552 ERROR: Undefined symbol
00000428  3039 004DBD16            552      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000042E  0240 FF00                553      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00000432  B07C 0800                554      CMP.W   #$0800,D0               ;Compare the appropriate masked bits
00000436  6600 0010                555      BNE     CHECK_OP_DYNAMIC_BCLR   ;Branch to next comparison if not equal
0000043A  4EB8 0162                556      JSR     FIND_2_BIT_SIZE_7_TO_6
0000043E  4EB9 00000EA8            557      JSR     PRINT_OP_STATIC_BCLR    ;Print the OP code if equal
00000444  6000 0028                558      BRA     GROUP0_SUCCESS          ;Finish routine
00000448                           559      
00000448                           560  CHECK_OP_DYNAMIC_BCLR:
Line 561 ERROR: Undefined symbol
00000448  3039 004DBD16            561      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000044E  0240 0180                562      ANDI.W  #$0180,D0               ;Mask relevant bits to D0
00000452  B07C 0180                563      CMP.W   #$0180,D0               ;Compare the appropriate masked bits
00000456  6600 0010                564      BNE     GROUP0_INVALID          ;If not equal this must be an invalid OP code
0000045A  4EB8 0162                565      JSR     FIND_2_BIT_SIZE_7_TO_6
0000045E  4EB9 00000EBE            566      JSR     PRINT_OP_DYNAMIC_BCLR   ;Print the OP code if equal
00000464  6000 0008                567      BRA     GROUP0_SUCCESS          ;Finish routine
00000468                           568  
00000468                           569  GROUP0_INVALID:                     ;Checks have been finished, invalid OP code has been found
00000468  4EB9 00000E60            570      JSR INVALID_OP                  ;INVALID OP code found
0000046E                           571  GROUP0_SUCCESS:                     ;Checks have been finished,a valid OP code has been found
0000046E  4CDF 0003                572      MOVEM.L (SP)+,D0-D1             ;Restore registers
00000472  4E75                     573      RTS                             ;Return to stack
00000474                           574      
00000474                           575  * GROUP_1                      
00000474                           576  ********************************************************************************
00000474                           577  * Supported OP code:
00000474                           578  * MOVE.B: $1, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
00000474                           579  ********************************************************************************
00000474                           580  C_GROUP_1:
00000474  48E7 C000                581      MOVEM.L D0-D1,-(SP)             ;Save registers to stack
00000478                           582  
00000478                           583  CHECK_OP_MOVE_B:
Line 584 ERROR: Undefined symbol
00000478  3039 004DBD16            584      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0          
0000047E  0240 F000                585      ANDI.W  #$F000,D0               ;Mask relevant bits to D0
00000482  B07C 1000                586      CMP.W   #$1000,D0               ;Compare the appropriate masked bits 
00000486  6600 000C                587      BNE     GROUP1_INVALID          ;Invalid OP code has been found
0000048A  4EB9 00000ED4            588      JSR     PRINT_OP_MOVEB          ;Print the OP code if equal
00000490  6000 0008                589      BRA     GROUP1_SUCCESS          ;Finish routine
00000494                           590      
00000494                           591  GROUP1_INVALID:
00000494  4EB9 00000E60            592      JSR INVALID_OP                  ;Invalid OP code found
0000049A                           593  GROUP1_SUCCESS:
0000049A  4CDF 0003                594      MOVEM.L (SP)+,D0-D1             ;Restore register
0000049E  4E75                     595      RTS                             ;Return to stack
000004A0                           596  * GROUP_2
000004A0                           597  ********************************************************************************
000004A0                           598  * Supported OP codes:
000004A0                           599  * MOVEA.L: $2, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
000004A0                           600  * MOVE.L: $2, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000004A0                           601  ********************************************************************************
000004A0                           602  C_GROUP_2:
000004A0  48E7 E000                603      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
000004A4                           604  
000004A4                           605  CHECK_OP_MOVEA_L:
Line 606 ERROR: Undefined symbol
000004A4  3039 004DBD16            606      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0  
000004AA  0240 F000                607      ANDI.W #$F000,D0                ;Mask relevant bits to D0
000004AE  B07C 2000                608      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
000004B2  4EF9 000004B8            609      JMP FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
000004B8                           610      
000004B8                           611  FIND_MOVEA_L_DIFFERENCE:            ;Finds difference between MOVEA and MOVE
Line 612 ERROR: Undefined symbol
000004B8  3039 004DBD16            612      MOVE.W   CUR_OP_CODE,D0         ;Move current OP code into D0
000004BE  323C 0007                613      MOVE.W   #7,D1                  ;Prepare 7 bit shift to D1
000004C2  E368                     614      LSL.W    D1,D0                  ;Truncate to find the 3 address mode bits
000004C4  E268                     615      LSR.W    D1,D0                  ;Reposition the bits
000004C6  323C 0006                616      MOVE.W   #6,D1                  ;Prepare 6 bit shift to D1
000004CA  E268                     617      LSR.W    D1,D0                  ;Truncate to shift 3 bits to a register
000004CC  3400                     618      MOVE.W   D0,D2                  ;Move 3 address mode bits into D6
000004CE  B47C 0001                619      CMP.W   #$1,D2                  ;Check if the address mode value is MOVEA
000004D2  6600 000C                620      BNE     CHECK_OP_MOVE_L         ;Branch if not equal to check MOVE
000004D6  4EB9 00000EE4            621      JSR     PRINT_OP_MOVEA_L        ;Print the OP code if it's a match
000004DC  6000 0024                622      BRA     GROUP2_SUCCESS          ;Finish routine
000004E0                           623      
000004E0                           624      
000004E0                           625  CHECK_OP_MOVE_L:
Line 626 ERROR: Undefined symbol
000004E0  3039 004DBD16            626      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000004E6  0240 F000                627      ANDI.W #$F000,D0                ;Mask relevant bits to D0
000004EA  B07C 2000                628      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
000004EE  6600 000C                629      BNE GROUP2_INVALID              ;If not equal, OP code is invalid
000004F2  4EB9 00000EF4            630      JSR PRINT_OP_MOVE_L             ;Print out MOVE.L
000004F8  6000 0008                631      BRA GROUP2_SUCCESS              ;Finish routine
000004FC                           632      
000004FC                           633  GROUP2_INVALID:    
000004FC  4EB9 00000E60            634      JSR INVALID_OP                  ;Invalid OP code found
00000502                           635  GROUP2_SUCCESS:
00000502  4CDF 0007                636      MOVEM.L (SP)+,D0-D2             ;Restore register
00000506  4E75                     637      RTS                             ;Return to stack
00000508                           638  * GROUP_3
00000508                           639  ********************************************************************************
00000508                           640  * Supported OP codes:
00000508                           641  * MOVEA.W: $3, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
00000508                           642  * MOVE.W: $3, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
00000508                           643  ********************************************************************************
00000508                           644  C_GROUP_3:
00000508  48E7 E000                645      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
0000050C                           646      
0000050C                           647  CHECK_OP_MOVEA_W:
Line 648 ERROR: Undefined symbol
0000050C  3039 004DBD16            648      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00000512  0240 F000                649      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00000516  B07C 3000                650      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
0000051A  4EF9 00000520            651      JMP      FIND_MOVEA_W_DIFF     ;Custom routine to differentiate MOVE and MOVEA
00000520                           652  
00000520                           653      
00000520                           654  FIND_MOVEA_W_DIFF:                 ;Finds difference between MOVEA and MOVE
Line 655 ERROR: Undefined symbol
00000520  3039 004DBD16            655      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00000526  323C 0007                656      MOVE.W   #7,D1                 ;Prepare 7 bit shift to D1
0000052A  E368                     657      LSL.W    D1,D0                 ;Truncate to find the 3 address mode bits
0000052C  E268                     658      LSR.W    D1,D0                 ;Reposition the bits
0000052E  323C 0006                659      MOVE.W   #6,D1                 ;Prepare 6 bit shift to D1
00000532  E268                     660      LSR.W    D1,D0                 ;Truncate to shift 3 bits to a register
00000534  3400                     661      MOVE.W   D0,D2                 ;Move 3 address mode bits into D6
00000536  B47C 0001                662      CMP.W    #$1,D2                ;Check if the address mode value is MOVEA
0000053A  6600 000C                663      BNE      CHECK_OP_MOVE_W       ;If bits do not match, try MOVE 
0000053E  4EB9 00000F04            664      JSR      PRINT_OP_MOVEA_W      ;Print the OP code if it's a match
00000544  6000 0024                665      BRA      GROUP3_SUCCESS        ;Finish routine
00000548                           666      
00000548                           667  CHECK_OP_MOVE_W:
Line 668 ERROR: Undefined symbol
00000548  3039 004DBD16            668      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
0000054E  0240 F000                669      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00000552  B07C 3000                670      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
00000556  6600 000C                671      BNE      GROUP3_INVALID        ;INVALID OP code found
0000055A  4EB9 00000F14            672      JSR      PRINT_OP_MOVE_W       ;Print the OP code if it's a match
00000560  6000 0008                673      BRA      GROUP3_SUCCESS        ;Finish routine
00000564                           674      
00000564                           675  GROUP3_INVALID:
00000564  4EB9 00000E60            676      JSR INVALID_OP                 ;INVALID OP code found
0000056A                           677  GROUP3_SUCCESS:
0000056A  4CDF 0007                678      MOVEM.L (SP)+,D0-D2            ;Restore registers from stack
0000056E  4E75                     679      RTS                            ;Return to stack
00000570                           680  
00000570                           681  * GROUP_4
00000570                           682  ********************************************************************************
00000570                           683  * Supported OP codes:
00000570                           684  * LEA: $4, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00000570                           685  * JSR: $4E, 7-6 %10, 5-3 EA Mode, 2-0 EA Reg 
00000570                           686  * RTS: $4E75
00000570                           687  * NEG: $44, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00000570                           688  * MOVEM: $4, 11 %1, 10 %D, 9-7 %001, 6 S, 5-3 EA Mode, 2-0 EA Reg
00000570                           689  * %D = 0 , Register to Memory, 1 Memory to Register
00000570                           690  * Unsupported OP codes: MOVE_FROM_SR, MOVE_TO_CCR, MOVE_TO_SR, NEGX, CLR, NOT
00000570                           691  * EXT, NBCD, SWAP, PEA, ILLEGAL, TAS, TST, TRAP, LINK, UNLK, MOVE_USP, RESET,
00000570                           692  * NOP, STOP, RTE, TRAPV, RTR, JMP, CHK
00000570                           693  ********************************************************************************
00000570                           694  C_GROUP_4:
00000570  2F00                     695      MOVE.L  D0,-(SP)            ;Save registers
00000572                           696      
00000572                           697  *Unsupported OP codes to check that are full static bits
00000572                           698  CHECK_OP_STOP:
Line 699 ERROR: Undefined symbol
00000572  3039 004DBD16            699      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000578  B07C 4E72                700      CMP.W  #$4E72,D0                ;Compare the appropriate bits
0000057C  6700 02AC                701      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000580  6600 0002                702      BNE    CHECK_OP_RESET           ;Check next OP code
00000584                           703      
00000584                           704  CHECK_OP_RESET:
Line 705 ERROR: Undefined symbol
00000584  3039 004DBD16            705      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000058A  B07C 4E70                706      CMP.W  #$4E70,D0                ;Compare the appropriate bits
0000058E  6700 029A                707      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000592  6600 0002                708      BNE    CHECK_OP_ILLEGAL         ;Check next OP code
00000596                           709          
00000596                           710  CHECK_OP_ILLEGAL:
Line 711 ERROR: Undefined symbol
00000596  3039 004DBD16            711      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000059C  B07C 4AFC                712      CMP.W  #$4AFC,D0                ;Compare the appropriate bits
000005A0  6700 0288                713      BEQ    GROUP4_INVALID           ;INVALID OP code found
000005A4  6600 0002                714      BNE    CHECK_OP_RTE             ;Check next OP code
000005A8                           715      
000005A8                           716  CHECK_OP_RTE:    
Line 717 ERROR: Undefined symbol
000005A8  3039 004DBD16            717      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005AE  B07C 4E73                718      CMP.W #$4E73,D0                 ;Compare the appropriate bits
000005B2  6700 0276                719      BEQ   GROUP4_INVALID            ;INVALID OP code found
000005B6  6600 0002                720      BNE   CHECK_OP_TRAPV            ;Check next OP code
000005BA                           721      
000005BA                           722  CHECK_OP_TRAPV:
Line 723 ERROR: Undefined symbol
000005BA  3039 004DBD16            723      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005C0  B07C 4E76                724      CMP.W  #$4E76,D0                ;Compare the appropriate bits
000005C4  6700 0264                725      BEQ    GROUP4_INVALID           ;INVALID OP code found
000005C8  6600 0002                726      BNE    CHECK_OP_RTR             ;Check next OP code
000005CC                           727      
000005CC                           728  CHECK_OP_RTR:
Line 729 ERROR: Undefined symbol
000005CC  3039 004DBD16            729      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005D2  B07C 4E77                730      CMP.W #$4E77,D0                 ;Compare the appropriate bits
000005D6  6700 0252                731      BEQ    GROUP4_INVALID           ;INVALID OP code found
000005DA  6600 0002                732      BNE    CHECK_OP_MOVE_FROM_SR    ;Check next OP code
000005DE                           733  
000005DE                           734  
000005DE                           735  *Unsupported OP codes to check that have partial static bits
000005DE                           736  CHECK_OP_MOVE_FROM_SR:
Line 737 ERROR: Undefined symbol
000005DE  3039 004DBD16            737      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005E4  0240 FFC0                738      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
000005E8  B07C 40C0                739      CMP.W  #$40C0,D0                ;Compare the appropriate masked bits
000005EC  6700 023C                740      BEQ    GROUP4_INVALID           ;INVALID OP code found  
000005F0  6600 0002                741      BNE    CHECK_OP_MOVE_TO_CCR     ;Check next OP code
000005F4                           742      
000005F4                           743  CHECK_OP_MOVE_TO_CCR:
Line 744 ERROR: Undefined symbol
000005F4  3039 004DBD16            744      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005FA  0240 FFC0                745      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
000005FE  B07C 44C0                746      CMP.W  #$44C0,D0                ;Compare the appropriate masked bits
00000602  6700 0226                747      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000606  6600 0002                748      BNE    CHECK_OP_MOVE_TO_SR      ;Check next OP code
0000060A                           749      
0000060A                           750  CHECK_OP_MOVE_TO_SR:
Line 751 ERROR: Undefined symbol
0000060A  3039 004DBD16            751      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000610  0240 FFC0                752      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00000614  B07C 46C0                753      CMP.W  #$46C0,D0                ;Compare the appropriate masked bits
00000618  6700 0210                754      BEQ    GROUP4_INVALID           ;INVALID OP code found
0000061C  6600 0002                755      BNE    CHECK_OP_NEGX            ;Check next OP code
00000620                           756      
00000620                           757  CHECK_OP_NEGX:
Line 758 ERROR: Undefined symbol
00000620  3039 004DBD16            758      MOVE.W CUR_OP_CODE,D0            ;Move current instruction set into D0
00000626  0240 FF00                759      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
0000062A  B07C 4000                760      CMP.W  #$4000,D0                ;Compare the appropriate masked bits
0000062E  6700 01FA                761      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000632  6600 0002                762      BNE    CHECK_OP_CLR             ;Check next OP code
00000636                           763      
00000636                           764  CHECK_OP_CLR:
Line 765 ERROR: Undefined symbol
00000636  3039 004DBD16            765      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000063C  0240 FF00                766      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00000640  B07C 4200                767      CMP.W  #$4200,D0                ;Compare the appropriate masked bits
00000644  6700 01E4                768      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000648  6600 0002                769      BNE    CHECK_OP_NOT             ;Check next OP code
0000064C                           770      
0000064C                           771  CHECK_OP_NOT:
Line 772 ERROR: Undefined symbol
0000064C  3039 004DBD16            772      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000652  0240 FF00                773      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00000656  B07C 4600                774      CMP.W  #$4600,D0                ;Compare the appropriate masked bits
0000065A  6700 01CE                775      BEQ    GROUP4_INVALID           ;INVALID OP code found
0000065E  6600 0002                776      BNE    CHECK_OP_EXT             ;Check next OP code
00000662                           777      
00000662                           778  CHECK_OP_EXT:
Line 779 ERROR: Undefined symbol
00000662  3039 004DBD16            779      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000668  0240 FF88                780      ANDI.W #$FF88,D0                ;Mask relevant bits to D0
0000066C  B07C 4880                781      CMP.W  #$4880,D0                ;Compare the appropriate masked bits
00000670  6700 01B8                782      BEQ    GROUP4_INVALID           ;INVALID OP code BIT_CHECK_EXT
00000674  6600 001E                783      BNE    CHECK_OP_NBCD            ;Check next OP code
00000678                           784  
00000678                           785  BIT_CHECK_EXT:    
Line 786 ERROR: Undefined symbol
00000678  3039 004DBD16            786      MOVE.W CUR_OP_CODE,D0           ;This is a special case to check against MOVEM
0000067E  323C 000A                787      MOVE.W #10,D1                   ;Prepare a 10 bit shift into D1
00000682  E368                     788      LSL.W  D1,D0                    ;Shift D0 left 10 bits
00000684  E068                     789      LSR.W  D0,D0                    ;Reposition D0
00000686  E648                     790      LSR.W  #3,D0                    ;Shift D0 3 bits
00000688  B078 0000                791      CMP.W  %000,D0                  ;Check the specific bits needed to differentiate EXT
0000068C  6700 019C                792      BEQ    GROUP4_INVALID           ;This means that this OP code is EXT
00000690  6600 017C                793      BNE    CHECK_OP_MOVEM           ;This is the only other possibility 
00000694                           794      
00000694                           795  CHECK_OP_NBCD:
Line 796 ERROR: Undefined symbol
00000694  3039 004DBD16            796      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000069A  0240 FFC0                797      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0           
0000069E  B07C 4800                798      CMP.W  #$4800,D0                ;Compare the appropriate masked bits
000006A2  6700 0186                799      BEQ    GROUP4_INVALID           ;INVALID OP code
000006A6  6600 0002                800      BNE    CHECK_OP_SWAP            ;Check next OP code
000006AA                           801      
000006AA                           802  CHECK_OP_SWAP:                      ; This must go before CHECK_OP PEA as first 3 nibbles can be equivalent
Line 803 ERROR: Undefined symbol
000006AA  3039 004DBD16            803      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000006B0  0240 FF48                804      ANDI.W #$FF48,D0                ;Mask relevant bits to D0
000006B4  B07C 4840                805      CMP.W  #$4840,D0                ;Compare the appropriate masked bits
000006B8  6700 0170                806      BEQ    GROUP4_INVALID           ;INVALID OP code
000006BC  6600 0002                807      BNE    CHECK_OP_PEA             ;Check next OP code
000006C0                           808   
000006C0                           809  CHECK_OP_PEA:                       ;This must go after CHECK_OP_SWAP as first 3 nibbles can be equivalent
Line 810 ERROR: Undefined symbol
000006C0  3039 004DBD16            810      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000006C6  0240 FF40                811      ANDI.W #$FF40,D0                ;Mask relevant bits to D0
000006CA  B07C 4840                812      CMP.W  #$4840,D0                ;Compare the appropriate masked bits
000006CE  6700 015A                813      BEQ    GROUP4_INVALID           ;INVALID OP code
000006D2  6600 0002                814      BNE    CHECK_OP_TAS             ;Check next OP code
000006D6                           815      
000006D6                           816  CHECK_OP_TAS:
Line 817 ERROR: Undefined symbol
000006D6  3039 004DBD16            817      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000006DC  0240 FFC0                818      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
000006E0  B07C 4AC0                819      CMP.W  #$4AC0,D0                ;Compare the appropriate masked bits
000006E4  6700 0144                820      BEQ    GROUP4_INVALID           ;INVALID OP code
000006E8  6600 0002                821      BNE    CHECK_OP_TST             ;Check next OP code
000006EC                           822  
000006EC                           823  CHECK_OP_TST:                       ;This must go after CHECK_OP_TAS as first 2 nibbles are equivalent
Line 824 ERROR: Undefined symbol
000006EC  3039 004DBD16            824      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000006F2  0240 FF00                825      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
000006F6  B07C 4A00                826      CMP.W  #$4A00,D0                ;Compare the appropriate masked bits
000006FA  6700 012E                827      BEQ    GROUP4_INVALID           ;INVALID OP code
000006FE  6600 0002                828      BNE    CHECK_OP_TRAP            ;Check next OP code
00000702                           829      
00000702                           830  CHECK_OP_TRAP:
Line 831 ERROR: Undefined symbol
00000702  3039 004DBD16            831      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000708  0240 FFF0                832      ANDI.W #$FFF0,D0                ;Mask relevant bits to D0
0000070C  B07C 4E40                833      CMP.W  #$4E40,D0                ;Compare the appropriate masked bits
00000710  6700 0118                834      BEQ    GROUP4_INVALID           ;INVALID OP code
00000714  6600 0002                835      BNE    CHECK_OP_LINK            ;Check next OP code
00000718                           836      
00000718                           837  CHECK_OP_LINK:
Line 838 ERROR: Undefined symbol
00000718  3039 004DBD16            838      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000071E  0240 FFF8                839      ANDI.W #$FFF8,D0                ;Mask relevant bits to D0
00000722  B07C 4E50                840      CMP.W  #$4E50,D0                ;Compare the appropriate masked bits
00000726  6700 0102                841      BEQ    GROUP4_INVALID           ;INVALID OP code
0000072A  6600 0002                842      BNE    CHECK_OP_UNLK            ;Check next OP code
0000072E                           843  
0000072E                           844  CHECK_OP_UNLK:
Line 845 ERROR: Undefined symbol
0000072E  3039 004DBD16            845      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000734  0240 FFF8                846      ANDI.W #$FFF8,D0                ;Mask relevant bits to D0
00000738  B07C 4E58                847      CMP.W  #$4E58,D0                ;Compare the appropriate masked bits
0000073C  6700 00EC                848      BEQ    GROUP4_INVALID           ;INVALID OP code
00000740  6600 0002                849      BNE    CHECK_OP_MOVE_USP        ;Check next OP
00000744                           850      
00000744                           851  CHECK_OP_MOVE_USP:
Line 852 ERROR: Undefined symbol
00000744  3039 004DBD16            852      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000074A  0240 FFF0                853      ANDI.W #$FFF0,D0                ;Mask relevant bits to D0
0000074E  B07C 4E60                854      CMP.W  #$4E60,D0                ;Compare the appropriate masked bits
00000752  6700 00D6                855      BEQ    GROUP4_INVALID           ;INVALID OP code
00000756  6600 0002                856      BNE    CHECK_OP_JMP             ;Check next OP
0000075A                           857  
0000075A                           858  CHECK_OP_JMP:
Line 859 ERROR: Undefined symbol
0000075A  3039 004DBD16            859       MOVE.W CUR_OP_CODE,D0          ;Move current instruction set into D0
00000760  0240 FFC0                860       ANDI.W #$FFC0,D0               ;Mask relevant bits to D0
00000764  B07C 4EC0                861       CMP.W  #$4EC0,D0               ;Compare the appropriate masked bits
00000768  6700 00C0                862       BEQ    GROUP4_INVALID          ;INVALID OP code
0000076C  6600 0002                863       BNE    CHECK_OP_CHK            ;Check next OP code
00000770                           864       
00000770                           865  CHECK_OP_CHK:
Line 866 ERROR: Undefined symbol
00000770  3039 004DBD16            866      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000776  0240 F1C0                867      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
0000077A  B07C 4180                868      CMP.W   #$4180,D0               ;Compare the appropriate masked bits
0000077E  6700 06E0                869      BEQ     INVALID_OP              ;INVALID OP code
00000782  6600 0002                870      BNE     CHECK_OP_NOP            ;Check next OP code
00000786                           871  
00000786                           872  *Supported OP codes to check
00000786                           873  CHECK_OP_NOP:                       ;While this code is not in the supported docs, Nash covered it in class and expects it to be implemented
Line 874 ERROR: Undefined symbol
00000786  3039 004DBD16            874      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000078C  B07C 4E71                875      CMP.W  #$4E71,D0                ;Compare the appropriate bits
00000790  6600 000C                876      BNE    CHECK_OP_RTS             ;Check next OP code
00000794  4EB9 00000F44            877      JSR    PRINT_OP_NOP             ;Print out OP code
0000079A  6000 009A                878      BRA    GROUP4_SUCCESS           ;Finish routine
0000079E                           879      
0000079E                           880  CHECK_OP_RTS:
Line 881 ERROR: Undefined symbol
0000079E  3039 004DBD16            881      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000007A4  B07C 4E75                882      CMP.W  #$4E75,D0                ;Mask exact bits for RTS    
000007A8  6600 000C                883      BNE    CHECK_OP_LEA             ;If it's equal check next code
000007AC  4EB9 00000F34            884      JSR    PRINT_OP_RTS             ;Print out OP code
000007B2  6000 0082                885      BRA    GROUP4_SUCCESS           ;Finish routine
000007B6                           886   
000007B6                           887  CHECK_OP_LEA:
Line 888 ERROR: Undefined symbol
000007B6  3039 004DBD16            888      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000007BC  0240 F1C0                889      ANDI.W #$F1C0,D0                ;Mask appropriate bits
000007C0  B07C 41C0                890      CMP.W  #$41C0,D0                ;Compare masked bits
000007C4  6600 000C                891      BNE    CHECK_OP_JSR             ;Check next OP code
000007C8  4EB9 00000F54            892      JSR    PRINT_OP_LEA             ;Print out OP code
000007CE  6000 0066                893      BRA    GROUP4_SUCCESS           ;Finish routine
000007D2                           894   
000007D2                           895  CHECK_OP_JSR:
Line 896 ERROR: Undefined symbol
000007D2  3039 004DBD16            896      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000007D8  0240 FFC0                897      ANDI.W #$FFC0,D0                ;Mask appropriate bits
000007DC  B07C 4E80                898      CMP.W  #$4E80,D0                ;Compare masked bits
000007E0  6600 000C                899      BNE    CHECK_OP_NEG             ;Check next OP code
000007E4  4EB9 00000F24            900      JSR    PRINT_OP_JSR             ;Print out OP code
000007EA  6000 004A                901      BRA    GROUP4_SUCCESS           ;Finish routine
000007EE                           902      
000007EE                           903  CHECK_OP_NEG:
Line 904 ERROR: Undefined symbol
000007EE  3039 004DBD16            904      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000007F4  0240 FF00                905      ANDI.W #$FF00,D0                ;Mask appropriate bits
000007F8  B07C 4400                906      CMP.W  #$4400,D0                ;Compare masked bits
000007FC  6600 0010                907      BNE    CHECK_OP_MOVEM           ;Check next OP code
00000800  4EB8 0162                908      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Find size field
00000804  4EB9 00000F6A            909      JSR    PRINT_OP_NEG             ;Print out OP code
0000080A  6000 002A                910      BRA    GROUP4_SUCCESS           ;Finish routine
0000080E                           911      
0000080E                           912  CHECK_OP_MOVEM:
Line 913 ERROR: Undefined symbol
0000080E  3039 004DBD16            913      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000814  0240 FB80                914      ANDI.W #$FB80,D0                ;Mask appropriate bits
00000818  B07C 4880                915      CMP.W  #$4880,D0                ;Compare masked bits
0000081C  6600 0642                916      BNE    INVALID_OP               ;If no code is found, it is invalid
00000820  4EB9 00000F80            917      JSR    PRINT_OP_MOVEM_W         ;Print out OP code
00000826  6000 000E                918      BRA    GROUP4_SUCCESS           ;Finish routine
0000082A                           919      
0000082A                           920  GROUP4_INVALID:
0000082A  4EB9 00000E60            921      JSR INVALID_OP                  ;INVALID op code has been found, set IS_VALID to 0
00000830  4EF9 00000836            922      JMP GROUP4_SUCCESS 
00000836                           923  GROUP4_SUCCESS:
00000836  4CDF 0001                924      MOVEM.L (SP)+,D0                ;Restore saved registers
0000083A  4E75                     925      RTS                             ;Return to stack
0000083C                           926  * GROUP_5
0000083C                           927  ********************************************************************************
0000083C                           928  * Supported OP code:
0000083C                           929  * SUBQ: $5, 11-9 DATA, 8 %1, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
0000083C                           930  * Unsupported OP codes: ADDQ, Scc, DBcc
0000083C                           931  * Validation checking:
0000083C                           932  * Check against, ADDQ, Scc, DBcc
0000083C                           933  ********************************************************************************
0000083C                           934  C_GROUP_5:
0000083C  48E7 8000                935      MOVEM.L D0,-(SP)                ;Save registers to stack
00000840                           936  *Unsupported OP codes
00000840                           937  CHECK_OP_DBcc:                      ;These are ordered first due to checking bits 7-6
Line 938 ERROR: Undefined symbol
00000840  3039 004DBD16            938      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000846  0240 F0C8                939      ANDI.W #$F0C8,D0                ;Mask appropriate bits
0000084A  B07C 50C8                940      CMP.W  #$50C8,D0                ;Compare appropriate masked bits
0000084E  6700 0052                941      BEQ    GROUP5_INVALID           ;INVALID op code found
00000852  6600 0002                942      BNE    CHECK_OP_Scc             ;Check next OP code
00000856                           943  
00000856                           944  CHECK_OP_Scc:
Line 945 ERROR: Undefined symbol
00000856  3039 004DBD16            945      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000085C  0240 F0C0                946      ANDI.W #$F0C0,D0                ;Mask appropriate bits
00000860  B07C 50C0                947      CMP.W  #$50C0,D0                ;Compare appropriate masked bits
00000864  6700 003C                948      BEQ     GROUP5_INVALID          ;INVALID OP code found
00000868  6600 0002                949      BNE     CHECK_OP_ADDQ           ;Check next OP code
0000086C                           950  
0000086C                           951  CHECK_OP_ADDQ:
Line 952 ERROR: Undefined symbol
0000086C  3039 004DBD16            952      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000872  0240 F100                953      ANDI.W #$F100,D0                ;Mask appropriate bits
00000876  B07C 5000                954      CMP.W  #$5000,D0                ;Compare appropriate masked bits
0000087A  6700 0026                955      BEQ    GROUP5_INVALID           ;INVALID OP code found
0000087E  6600 0002                956      BNE    CHECK_OP_SUBQ            ;Check next OP code
00000882                           957  
00000882                           958  *Supported OP code   
00000882                           959  CHECK_OP_SUBQ     
Line 960 ERROR: Undefined symbol
00000882  3039 004DBD16            960      MOVE.W  CUR_OP_CODE,D0          ;Actual check for SUBQ
00000888  0240 F100                961      ANDI.W #$F100,D0                ;Bitmask check for SUBQ
0000088C  B07C 5100                962      CMP.W  #$5100,D0                ;Compare the proper value
00000890  6600 0010                963      BNE    GROUP5_INVALID           ;Else the operand is invalid
00000894  4EB8 0162                964      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Find size bit to print
00000898  4EB9 00000FA0            965      JSR    PRINT_OP_SUBQ            ;If equal print it out
0000089E  6000 0008                966      BRA    GROUP5_SUCCESS           ;Finish routine
000008A2                           967      
000008A2                           968  GROUP5_INVALID: 
000008A2  4EB9 00000E60            969      JSR INVALID_OP                  ;INVALID OP has been found, set IS_VALID to 0
000008A8                           970  GROUP5_SUCCESS:
000008A8  4CDF 0001                971      MOVEM.L (SP)+,D0                ;Restore registers from stack
000008AC  4E75                     972      RTS                             ;Return to stack
000008AE                           973      
000008AE                           974  * GROUP_6
000008AE                           975  ********************************************************************************
000008AE                           976  * Supported OP codes
000008AE                           977  * BRA: $60, 7-0 8-Bit Displacement
000008AE                           978  * Bcc: $6, 11-8 Condition, 7-0 8-Bit Displacement
000008AE                           979  *   Branch: <Condition>   
000008AE                           980  *   BCS: %0101          
000008AE                           981  *   BGE: %1100      
000008AE                           982  *   BLT: %1101  
000008AE                           983  *   BVC: %1000
000008AE                           984  *   
000008AE                           985  *   MOVE.W #%0110010100000000   ;BCS
000008AE                           986  *   MOVE.W #%0110110001010101   ;BGE
000008AE                           987  *   MVE.W #%0110110110101010    ;BLT
000008AE                           988  *   MOVE.W #%0110100001010101   ;BVC
000008AE                           989  * Unsupported OP code: BSR
000008AE                           990  ********************************************************************************
000008AE                           991  C_GROUP_6:
000008AE  48E7 8000                992      MOVEM.L D0,-(SP)            ;Save register to stack
000008B2                           993  *Unsupported OP code
000008B2                           994  CHECK_OP_BSR:
Line 995 ERROR: Undefined symbol
000008B2  3039 004DBD16            995      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set to D0
000008B8  0240 FF00                996      ANDI.W  #$FF00,D0           ;Mask appropriate bits
000008BC  B07C 6100                997      CMP.W   #$6100,D0           ;Compare masked bits
000008C0  6700 0142                998      BEQ     GROUP6_INVALID      ;INVALID OP code found
000008C4  6600 0002                999      BNE     CHECK_OP_BGT        ;Check next OP code
000008C8                          1000      
000008C8                          1001  CHECK_OP_BGT:
Line 1002 ERROR: Undefined symbol
000008C8  3039 004DBD16           1002      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000008CE  0240 FF00               1003      ANDI.W #$FF00,D0            ;Mask appropriate bits
000008D2  B07C 6E00               1004      CMP.W  #$6E00,D0            ;Compare masked bits
000008D6  6700 012C               1005      BEQ    GROUP6_INVALID       ;INVALID OP code found
000008DA  6600 0002               1006      BNE    CHECK_OP_BCC         ;Check next OP code
000008DE                          1007  
000008DE                          1008  CHECK_OP_BCC:
Line 1009 ERROR: Undefined symbol
000008DE  3039 004DBD16           1009      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000008E4  0240 FF00               1010      ANDI.W #$FF00,D0            ;Mask appropriate bits
000008E8  B07C 6400               1011      CMP.W  #$6400,D0            ;Compare masked bits
000008EC  6700 0116               1012      BEQ    GROUP6_INVALID       ;INVALID OP code found
000008F0  6600 0002               1013      BNE    CHECK_OP_BEQ         ;Check next OP code 
000008F4                          1014  
000008F4                          1015  CHECK_OP_BEQ:
Line 1016 ERROR: Undefined symbol
000008F4  3039 004DBD16           1016      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000008FA  0240 FF00               1017      ANDI.W #$FF00,D0            ;Mask appropriate bits
000008FE  B07C 6700               1018      CMP.W  #$6700,D0            ;Compare masked bits
00000902  6700 0100               1019      BEQ    GROUP6_INVALID       ;INVALID OP code found
00000906  6600 0002               1020      BNE    CHECK_OP_BHI         ;Check next OP code
0000090A                          1021  
0000090A                          1022  CHECK_OP_BHI:
Line 1023 ERROR: Undefined symbol
0000090A  3039 004DBD16           1023      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00000910  0240 FF00               1024      ANDI.W #$FF00,D0            ;Mask appropriate bits
00000914  B07C 6200               1025      CMP.W  #$6200,D0            ;Compare masked bits
00000918  6700 00EA               1026      BEQ    GROUP6_INVALID       ;INVALID OP code found
0000091C  6600 0002               1027      BNE    CHECK_OP_BLS         ;Check next OP code
00000920                          1028  
00000920                          1029  CHECK_OP_BLS:
Line 1030 ERROR: Undefined symbol
00000920  3039 004DBD16           1030      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00000926  0240 FF00               1031      ANDI.W #$FF00,D0            ;Mask appropriate bits
0000092A  B07C 6300               1032      CMP.W  #$6300,D0            ;Compare masked bits
0000092E  6700 00D4               1033      BEQ    GROUP6_INVALID       ;INVALID OP code found
00000932  6600 0002               1034      BNE    CHECK_OP_BMI         ;Check next OP code
00000936                          1035  
00000936                          1036  CHECK_OP_BMI:
Line 1037 ERROR: Undefined symbol
00000936  3039 004DBD16           1037      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
0000093C  0240 FF00               1038      ANDI.W #$FF00,D0            ;Mask appropriate bits
00000940  B07C 6B00               1039      CMP.W  #$6B00,D0            ;Compare masked bits
00000944  6700 00BE               1040      BEQ    GROUP6_INVALID       ;INVALID OP code found
00000948  6600 0002               1041      BNE    CHECK_OP_BNE         ;Check next OP code
0000094C                          1042  
0000094C                          1043  CHECK_OP_BNE:
Line 1044 ERROR: Undefined symbol
0000094C  3039 004DBD16           1044      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00000952  0240 FF00               1045      ANDI.W #$FF00,D0            ;Mask appropriate bits
00000956  B07C 6600               1046      CMP.W  #$6600,D0            ;Compare masked bits
0000095A  6700 00A8               1047      BEQ    GROUP6_INVALID       ;INVALID OP code found
0000095E  6600 0002               1048      BNE    CHECK_OP_BPL         ;Check next OP code    
00000962                          1049  
00000962                          1050  CHECK_OP_BPL:
Line 1051 ERROR: Undefined symbol
00000962  3039 004DBD16           1051      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00000968  0240 FF00               1052      ANDI.W #$FF00,D0            ;Mask appropriate bits
0000096C  B07C 6A00               1053      CMP.W  #$6A00,D0            ;Compare masked bits
00000970  6700 0092               1054      BEQ    GROUP6_INVALID       ;INVALID OP code found
00000974  6600 0002               1055      BNE    CHECK_OP_BRA         ;Check next OP code 
00000978                          1056  
00000978                          1057  
00000978                          1058  *Supported OP codes
00000978                          1059  CHECK_OP_BRA:
Line 1060 ERROR: Undefined symbol
00000978  3039 004DBD16           1060      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D0       
0000097E  0240 FF00               1061      ANDI.W  #$FF00,D0           ;Mask appropriate bits
00000982  B07C 6000               1062      CMP.W   #$6000,D0           ;Compare masked bits
00000986  6600 000C               1063      BNE     CHECK_OP_BCS        ;Check next OP code
0000098A  4EB9 0000100E           1064      JSR     PRINT_OP_BRA        ;Print out OP code
00000990  6000 0078               1065      BRA     GROUP6_SUCCESS      ;Finish routine
00000994                          1066      
00000994                          1067  CHECK_OP_BCS:
Line 1068 ERROR: Undefined symbol
00000994  3039 004DBD16           1068      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
0000099A  0240 FF00               1069      ANDI.W #$FF00,D0            ;Mask appropriate bits
0000099E  B07C 6500               1070      CMP.W  #$6500,D0            ;Compare masked bits
000009A2  6600 000C               1071      BNE    CHECK_OP_BGE         ;Check next OP code
000009A6  4EB9 00000FB6           1072      JSR    PRINT_OP_BCS         ;Print out OP code
000009AC  6000 005C               1073      BRA    GROUP6_SUCCESS       ;Finish routine
000009B0                          1074  
000009B0                          1075      
000009B0                          1076  CHECK_OP_BGE:
Line 1077 ERROR: Undefined symbol
000009B0  3039 004DBD16           1077      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000009B6  0240 FF00               1078      ANDI.W #$FF00,D0            ;Mask appropriate bits
000009BA  B07C 6C00               1079      CMP.W  #$6C00,D0            ;Compare masked bits
000009BE  6600 000C               1080      BNE    CHECK_OP_BLT         ;Check next OP code
000009C2  4EB9 00000FCC           1081      JSR    PRINT_OP_BGE         ;Print out OP code
000009C8  6000 0040               1082      BRA    GROUP6_SUCCESS       ;Finish routine
000009CC                          1083      
000009CC                          1084      
000009CC                          1085  CHECK_OP_BLT:
Line 1086 ERROR: Undefined symbol
000009CC  3039 004DBD16           1086      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000009D2  0240 FF00               1087      ANDI.W #$FF00,D0            ;Mask appropriate bits
000009D6  B07C 6D00               1088      CMP.W  #$6D00,D0            ;Compare masked bits
000009DA  6600 000C               1089      BNE    CHECK_OP_BVC         ;Check next OP code
000009DE  4EB9 00000FE2           1090      JSR    PRINT_OP_BLT         ;Print out OP code
000009E4  6000 0024               1091      BRA    GROUP6_SUCCESS       ;Finish routine
000009E8                          1092      
000009E8                          1093  CHECK_OP_BVC:
Line 1094 ERROR: Undefined symbol
000009E8  3039 004DBD16           1094      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000009EE  0240 FF00               1095      ANDI.W #$FF00,D0            ;Mask appropriate bits
000009F2  B07C 6800               1096      CMP.W  #$6800,D0            ;Compare masked bits
000009F6  6600 000C               1097      BNE    GROUP6_INVALID       ;Check next OP code
000009FA  4EB9 00000FF8           1098      JSR    PRINT_OP_BVC         ;Print out OP code
00000A00  6000 0008               1099      BRA    GROUP6_SUCCESS       ;Finish routine
00000A04                          1100      
00000A04                          1101  GROUP6_INVALID:
00000A04  4EB9 00000E60           1102      JSR    INVALID_OP           ;INVALID OP code found, set IS_VALID to 0
00000A0A                          1103  GROUP6_SUCCESS:
00000A0A  4CDF 0001               1104      MOVEM.L (SP)+,D0            ;Restore registers from stack
00000A0E  4E75                    1105      RTS                         ;Return from stack
00000A10                          1106      
00000A10                          1107  *GROUP_7
00000A10                          1108  ********************************************************************************
00000A10                          1109  * Currently no OP codes here are supported. MOVEQ is the only code in this group
00000A10                          1110  * Unsupported OP code: MOVEQ
00000A10                          1111  ********************************************************************************
00000A10                          1112  C_GROUP_7:
00000A10  48E7 8000               1113      MOVEM.L D0,-(SP)            ;Save register to stack
00000A14                          1114  *Unsupported OP code
00000A14                          1115  CHECK_OP_MOVEQ
Line 1116 ERROR: Undefined symbol
00000A14  3039 004DBD16           1116      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set to D0
00000A1A  0240 F100               1117      ANDI.W #$F100,D0            ;Mask appropriate bits
00000A1E  B07C 7000               1118      CMP.W  #$7000,D0            ;Compare masked bits
00000A22  6000 0002               1119      BRA    GROUP7_INVALID       ;INVALID OP code found
00000A26                          1120  
00000A26                          1121  GROUP7_INVALID:
00000A26  4EB9 00000E60           1122      JSR INVALID_OP              ;INVALID OP code found, set IS_VALID to 0
00000A2C                          1123  GROUP7_SUCCESS:    
00000A2C  4CDF 0001               1124      MOVEM.L (SP)+,D0            ;Restore registers from stack
00000A30  4E75                    1125      RTS                         ;Return from stack
00000A32                          1126  * GROUP_8
00000A32                          1127  ********************************************************************************
00000A32                          1128  * Supported OP code:
00000A32                          1129  * DIVS: $8, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00000A32                          1130  * OR: $80, 7-6 Size, 5-3 EA Mode, 2-0 EA Register
00000A32                          1131  * Unsupported OP codes: DIVU, SBCD
00000A32                          1132  ********************************************************************************
00000A32                          1133  C_GROUP_8:
00000A32  48E7 8000               1134      MOVEM.L D0,-(SP)
00000A36                          1135  *Unsupported OP codes
00000A36                          1136  CHECK_OP_DIVU:
Line 1137 ERROR: Undefined symbol
00000A36  3039 004DBD16           1137      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000A3C  0240 F1C0               1138      ANDI.W  #$F1C0,D0                   ;Mask appropriate bits
00000A40  B07C 80C0               1139      CMP.W   #$80C0,D0                   ;Compare masked bits
00000A44  6700 0046               1140      BEQ     GROUP8_INVALID              ;INVALID OP code found
00000A48  6600 0002               1141      BNE     CHECK_OP_SBCD               ;Check next OP code
00000A4C                          1142  
00000A4C                          1143  CHECK_OP_SBCD:
Line 1144 ERROR: Undefined symbol
00000A4C  3039 004DBD16           1144      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000A52  0240 F1F0               1145      ANDI.W  #$F1F0,D0                   ;Mask appropriate bits
00000A56  B07C 8100               1146      CMP.W   #$8100,D0                   ;Compare masked bits
00000A5A  6700 0030               1147      BEQ     GROUP8_INVALID              ;INVALID OP code found
00000A5E  6600 0002               1148      BNE     CHECK_OP_DIVS               ;Check next OP code
00000A62                          1149      
00000A62                          1150  *Supported OP codes
00000A62                          1151  CHECK_OP_DIVS:
Line 1152 ERROR: Undefined symbol
00000A62  3039 004DBD16           1152      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000A68  0240 F1C0               1153      ANDI.W  #$F1C0,D0                   ;Mask appropriate bits
00000A6C  B07C 81C0               1154      CMP.W   #$81C0,D0                   ;Compare masked bits
00000A70  6600 000C               1155      BNE     CHECK_OP_OR                 ;Check next OP code
00000A74  4EB9 00001024           1156      JSR     PRINT_OP_DIVS               ;OP Code found
00000A7A  6000 0016               1157      BRA     GROUP8_SUCCESS
00000A7E                          1158  CHECK_OP_OR:                            ;At this point only remaining $8 code is OR
00000A7E  4EB8 0162               1159      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Finding size bit to print out
00000A82  4EB9 00001034           1160      JSR     PRINT_OP_OR                 ;Print out OR
00000A88  6000 0008               1161      BRA     GROUP8_SUCCESS              ;Finish routine
00000A8C                          1162  GROUP8_INVALID:
00000A8C  4EB9 00000E60           1163       JSR     INVALID_OP                 ;INVALID OP code found, set IS_VALID to 0
00000A92                          1164  GROUP8_SUCCESS:
00000A92  4CDF 0001               1165       MOVEM.L (SP)+,D0                   ;Restore register from stack
00000A96  4E75                    1166       RTS                                ;Return to stack
00000A98                          1167       
00000A98                          1168  * GROUP_9                      
00000A98                          1169  ********************************************************************************
00000A98                          1170  * Supported OP code:
00000A98                          1171  * SUB: $9, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00000A98                          1172  * Unsupported OP codes: SUBX, SUBA
00000A98                          1173  ********************************************************************************
00000A98                          1174  C_GROUP_9:
00000A98  48E7 C000               1175      MOVEM.L D0-D1,-(SP)                 ;Save the registers
00000A9C                          1176  *Unsupported OP codes
00000A9C                          1177  CHECK_SIZE_BIT_FOR_SUB:
00000A9C  4EB8 0162               1178      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find the size bits in 7-6
00000AA0  0C38 0003 0000          1179      CMP.B   #%11,OP_SIZE                ;If the bits are %11, it has to be SUBA
00000AA6  6700 0006               1180      BEQ     CHECK_OP_SUBA               ;If the bits equal it must be SUBA
00000AAA  6600 0018               1181      BNE     CHECK_OP_SUBX               ;If the bits are not equal it could be SUBX
00000AAE                          1182      
00000AAE                          1183  CHECK_OP_SUBA:                          ;Check SUBA first as it has static bits
Line 1184 ERROR: Undefined symbol
00000AAE  3039 004DBD16           1184      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000AB4  0240 F0C0               1185      ANDI.W  #$F0C0,D0                   ;Mask appropriate bits
00000AB8  B07C 90C0               1186      CMP.W   #$90C0,D0                   ;Compare masked bits
00000ABC  6700 0046               1187      BEQ     GROUP9_INVALID              ;INVALID OP has been found
00000AC0  6600 0002               1188      BNE     CHECK_OP_SUBX               ;Check next OP
00000AC4                          1189  
00000AC4                          1190  CHECK_OP_SUBX:
Line 1191 ERROR: Undefined symbol
00000AC4  3039 004DBD16           1191      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000ACA  0240 F130               1192      ANDI.W  #$F130,D0                   ;Mask appropriate bits
00000ACE  B07C 9100               1193      CMP.W   #$9100,D0                   ;Compare masked bits
00000AD2  6000 0002               1194      BRA     BIT_CHECK_SUBX              ;Checking if this code is SUBX through bit shifts
00000AD6                          1195      
00000AD6                          1196  BIT_CHECK_SUBX:    
Line 1197 ERROR: Undefined symbol
00000AD6  3039 004DBD16           1197      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000ADC  323C 0007               1198      MOVE.W  #7,D1                       ;Prepare a shift of 7 bits into D1
00000AE0  E368                    1199      LSL.W   D1,D0                       ;Shift left 7 bits truncate 15-9 bits
00000AE2  E268                    1200      LSR.W   D1,D0                       ;Reposition D0
00000AE4  E848                    1201      LSR.W   #4,D0                       ;Truncate 4 right most bits to
00000AE6  0240 FF13               1202      ANDI.W  #$FF13,D0                   ;Compare remaining static bits
00000AEA  B07C 0010               1203      CMP.W   #$0010,D0                   ;If equal to this value it's SUBX
00000AEE  6700 0014               1204      BEQ     GROUP9_INVALID              ;INVALID OP code found
00000AF2  6600 0002               1205      BNE     CHECK_OP_SUB                ;Not can only be SUB here
00000AF6                          1206      
00000AF6                          1207  *Supported OP code 
00000AF6                          1208  CHECK_OP_SUB:                           ;At this point only remaining $9 is SUB
00000AF6  4EB8 0162               1209      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find the size bit to print out
00000AFA  4EB9 0000104A           1210      JSR     PRINT_OP_SUB                ;Print out SUB
00000B00  6000 0008               1211      BRA     GROUP9_SUCCESS              ;Finish routine
00000B04                          1212      
00000B04                          1213  GROUP9_INVALID:
00000B04  4EB9 00000E60           1214       JSR     INVALID_OP                 ;INVALID OP code found, set IS_VALID to 0
00000B0A                          1215  GROUP9_SUCCESS: 
00000B0A  4CDF 0003               1216      MOVEM.L (SP)+,D0-D1                 ;Restore registers
00000B0E  4E75                    1217      RTS                                 ;Return to stack
00000B10                          1218  
00000B10                          1219  *GROUP_A
00000B10                          1220  ********************************************************************************
00000B10                          1221  * Currently no OP codes here are supported. There are no current OP codes here.
00000B10                          1222  ********************************************************************************
00000B10                          1223  C_GROUP_A:
00000B10  4EB9 00000E60           1224      JSR INVALID_OP                      ;INVALID OP code found, set IS_VALID to 0
00000B16  4E75                    1225      RTS                                 ;Return to stack
00000B18                          1226      
00000B18                          1227  * GROUP_B                     
00000B18                          1228  ********************************************************************************
00000B18                          1229  * Supported OP codes:
00000B18                          1230  * EOR: $B, 11-9 Reg, 8 %1, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00000B18                          1231  * CMP: $B, 11-9 Reg, 8 %0, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00000B18                          1232  * The specific bit difference is listed 
00000B18                          1233  * Unsupported OP codes: CMPM, CMPA
00000B18                          1234  ********************************************************************************
00000B18                          1235  C_GROUP_B:
00000B18  48E7 8000               1236      MOVEM.L D0,-(SP)                    ;Save current registers to stack
00000B1C                          1237  *Unsupported OP codes    
00000B1C                          1238  CHECK_OP_CMPM
Line 1239 ERROR: Undefined symbol
00000B1C  3039 004DBD16           1239      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000B22  0240 F138               1240      ANDI.W  #$F138,D0                   ;Mask appropriate bits
00000B26  B07C B108               1241      CMP.W   #$B108,D0                   ;Compare masked bits
00000B2A  6700 005C               1242      BEQ     GROUPB_INVALID              ;INVALID OP found
00000B2E  6600 0002               1243      BNE     CHECK_OP_CMPA               ;Check next OP
00000B32                          1244      
00000B32                          1245  CHECK_OP_CMPA:
Line 1246 ERROR: Undefined symbol
00000B32  3039 004DBD16           1246      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000B38  0240 F0C0               1247      ANDI.W  #$F0C0,D0                   ;Mask appropriate bits
00000B3C  B07C B0C0               1248      CMP.W   #$B0C0,D0                   ;Compare masked bits
00000B40  6700 0046               1249      BEQ     GROUPB_INVALID              ;INVALID OP found
00000B44  6600 0002               1250      BNE     CHECK_OP_EOR                ;Check next OP
00000B48                          1251  
00000B48                          1252  *Supported OP codes    
00000B48                          1253  CHECK_OP_EOR:
Line 1254 ERROR: Undefined symbol
00000B48  3039 004DBD16           1254      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000B4E  0240 F100               1255      ANDI.W  #$F100,D0                   ;Mask appropriate bits
00000B52  B07C B100               1256      CMP.W   #$B100,D0                   ;Compare masked bits
00000B56  6600 0010               1257      BNE     CHECK_OP_CMP                ;Check next OP 
00000B5A  4EB8 0162               1258      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find size bit field to print out size
00000B5E  4EB9 00001060           1259      JSR     PRINT_OP_EOR                ;Print out OP code
00000B64  6000 0028               1260      BRA     GROUPB_SUCCESS              ;Finish routine
00000B68                          1261      
00000B68                          1262  CHECK_OP_CMP:
Line 1263 ERROR: Undefined symbol
00000B68  3039 004DBD16           1263      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000B6E  0240 F100               1264      ANDI.W  #$F100,D0                   ;Mask appropriate bits
00000B72  B07C B000               1265      CMP.W   #$B000,D0                   ;Compare masked bits
00000B76  6600 0010               1266      BNE     GROUPB_INVALID              ;INVALID OP code found
00000B7A  4EB8 0162               1267      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find size bit field to print out size
00000B7E  4EB9 00001076           1268      JSR     PRINT_OP_CMP                ;Print out OP code
00000B84  6000 0008               1269      BRA     GROUPB_SUCCESS              ;Finish routine
00000B88                          1270      
00000B88                          1271  GROUPB_INVALID:
00000B88  4EB9 00000E60           1272      JSR     INVALID_OP                  ;INVALID OP has been found, set IS_VALID to 0
00000B8E                          1273  GROUPB_SUCCESS:
00000B8E  4CDF 0001               1274      MOVEM.L (SP)+,D0                    ;Restore registers from stack
00000B92  4E75                    1275      RTS                                 ;Return to stack
00000B94                          1276  * GROUP_C                     
00000B94                          1277  ********************************************************************************
00000B94                          1278  * Supported OP code:
00000B94                          1279  * MULS: $C, 11-8 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00000B94                          1280  * Note: EXG OP mode has to be 01000, 01001, 10001, as such can never be 11 for
00000B94                          1281  * bits 7-6
00000B94                          1282  * Unsupported OP codes: MULU, ABCD, EXG, AND
00000B94                          1283  ********************************************************************************
00000B94                          1284  C_GROUP_C:
00000B94                          1285  *Unsupported OP codes
00000B94  48E7 C000               1286      MOVEM.L D0-D1,-(SP)
00000B98                          1287      
00000B98                          1288  CHECK_OP_MULU:
Line 1289 ERROR: Undefined symbol
00000B98  3039 004DBD16           1289      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00000B9E  0240 F1C0               1290      ANDI.W  #$F1C0,D0
00000BA2  B07C C0C0               1291      CMP.W   #$C0C0,D0
00000BA6  6700 006E               1292      BEQ     GROUPC_INVALID
00000BAA  6600 0002               1293      BNE     CHECK_OP_ABCD
00000BAE                          1294   
00000BAE                          1295  CHECK_OP_ABCD:
Line 1296 ERROR: Undefined symbol
00000BAE  3039 004DBD16           1296      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00000BB4  0240 F1F0               1297      ANDI.W  #$F1F0,D0
00000BB8  B07C C100               1298      CMP.W   #$C100,D0
00000BBC  6700 0058               1299      BEQ     GROUPC_INVALID
00000BC0  6600 0002               1300      BNE     CHECK_OP_EXG
00000BC4                          1301   
00000BC4                          1302  CHECK_OP_EXG:
00000BC4  6000 0002               1303      BRA     BIT_CHECK_EXG       ;Always do bit check here
00000BC8                          1304                          
00000BC8                          1305  BIT_CHECK_EXG:                 ;Checks the OP mode bits 7-6 which cannot be 11 for EXG
Line 1306 ERROR: Undefined symbol
00000BC8  3039 004DBD16           1306      MOVE.W  CUR_OP_CODE,D0
00000BCE  323C 0007               1307      MOVE.W  #7,D1
00000BD2  E368                    1308      LSL.W   D1,D0
00000BD4  E268                    1309      LSR.W   D1,D0
00000BD6  E848                    1310      LSR.W   #4,D0
00000BD8  0240 FF83               1311      ANDI.W  #$FF83,D0
00000BDC  B07C 0010               1312      CMP.W   #$0010,D0          ;Bit mask static EXG bits
00000BE0  6700 0034               1313      BEQ     GROUPC_INVALID     ;If this equals, then OP must be EXG
00000BE4  6600 0002               1314      BNE     CHECK_OP_MULS      ;Otherwise it's MULS
00000BE8                          1315  *Supported OP code
00000BE8                          1316  CHECK_OP_MULS:
Line 1317 ERROR: Undefined symbol
00000BE8  3039 004DBD16           1317      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00000BEE  0240 F1C0               1318      ANDI.W #$F1C0,D0
00000BF2  B07C C1C0               1319      CMP.W  #$C1C0,D0
00000BF6  6600 000C               1320      BNE    CHECK_OP_AND          ; OP_AND is completely dynamic outside of first nibble
00000BFA  4EB9 0000108C           1321      JSR    PRINT_OP_MULS
00000C00  6000 001A               1322      BRA    GROUPC_SUCCESS
00000C04                          1323  *Odd completely dynamic unsupported OP code    
00000C04                          1324  CHECK_OP_AND:                 ;This would be the only possible OP code left after CHECK_OP_MULS
Line 1325 ERROR: Undefined symbol
00000C04  3039 004DBD16           1325      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00000C0A  0240 F000               1326      ANDI.W  #$F000,D0
00000C0E  B07C C000               1327      CMP.W   #$C000,D0
00000C12  6000 0002               1328      BRA    GROUPC_INVALID    
00000C16                          1329  GROUPC_INVALID:
00000C16  4EB9 00000E60           1330      JSR     INVALID_OP
00000C1C                          1331  GROUPC_SUCCESS:
00000C1C  4CDF 0003               1332      MOVEM.L (SP)+,D0-D1
00000C20  4E75                    1333      RTS
00000C22                          1334      
00000C22                          1335  * GROUP_D                     
00000C22                          1336  ********************************************************************************
00000C22                          1337  * Supported OP codes:
00000C22                          1338  * ADD: $D, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00000C22                          1339  * ADDA: $D, 11- 9 Reg, 8-6 OPMODE, 7-6 %11, 5-3 EA Mode, 2-0 EA Reg
00000C22                          1340  * The specific bit difference is listed out in the OPMODE field.
00000C22                          1341  * Unsupported: ADDX
00000C22                          1342  ********************************************************************************
00000C22                          1343  C_GROUP_D:
00000C22  48E7 8000               1344      MOVEM.L D0,-(SP)                ;Save registers to stack
00000C26                          1345  *Unsupported OP codes
00000C26                          1346  BIT_SIZE_CHECK
Line 1347 ERROR: Undefined symbol
00000C26  3039 004DBD16           1347      MOVE    CUR_OP_CODE,D0          ;Move current instruction set into D0
00000C2C  4EB8 0162               1348      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Specific size bit checking to see if it's 11
00000C30  0C38 0003 0000          1349      CMP.B   #%11,OP_SIZE            ;If it's %11 it cannot be ADDX and is either ADDA or ADD
00000C36  6700 0026               1350      BEQ     CHECK_OP_ADDA           ;If it's equal check ADDA
00000C3A  6600 0002               1351      BNE     CHECK_OP_ADDX           ;If it's not equal check ADDX
00000C3E                          1352      
00000C3E                          1353  CHECK_OP_ADDX:
Line 1354 ERROR: Undefined symbol
00000C3E  3039 004DBD16           1354      MOVE    CUR_OP_CODE,D0
00000C44  0240 F130               1355      ANDI.W #$F130,D0                ;Mask appropriate bits
00000C48  B07C D100               1356      CMP.W  #$D100,D0                ;Compare masked bits
00000C4C  6700 002E               1357      BEQ    GROUPD_INVALID           ;INVALID OP code found
00000C50  6600 0002               1358      BNE    CHECK_OP_ADD             ;Check next OP code
00000C54                          1359      
00000C54                          1360  *Supported OP codes
00000C54                          1361  CHECK_OP_ADD:
00000C54  4EB9 0000109C           1362      JSR PRINT_OP_ADD                ;Only remaining OP in $D is ADD at this point
00000C5A  6000 0026               1363      BRA GROUPD_SUCCESS              ;Finish routine
00000C5E                          1364  
00000C5E                          1365  CHECK_OP_ADDA:
Line 1366 ERROR: Undefined symbol
00000C5E  3039 004DBD16           1366      MOVE    CUR_OP_CODE,D0          ;Move current instruction set into D0
00000C64  0240 F0C0               1367      ANDI.W #$F0C0,D0                ;Mask applicable bits
00000C68  B07C D0C0               1368      CMP.W  #$D0C0,D0                ;Compare masked bits
00000C6C  66E6                    1369      BNE    CHECK_OP_ADD             ;Check next OP code
00000C6E  4EB8 01A6               1370      JSR    FIND_1_BIT_SIZE_8        ;Size bit to print
00000C72  4EB9 000010B2           1371      JSR    PRINT_OP_ADDA            ;Print out OP code
00000C78  6000 0008               1372      BRA    GROUPD_SUCCESS           ;Finish routine
00000C7C                          1373      
00000C7C                          1374  GROUPD_INVALID:
00000C7C  4EB9 00000E60           1375      JSR INVALID_OP                  ;INVALID OP code found
00000C82                          1376  GROUPD_SUCCESS:
00000C82  4CDF 0001               1377      MOVEM.L (SP)+,D0                ;Restore registers from stack
00000C86  4E75                    1378      RTS                             ;Return to stack
00000C88                          1379      
00000C88                          1380  * GROUP_E                     
00000C88                          1381  ********************************************************************************
00000C88                          1382  * Supported:
00000C88                          1383  * LSR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00000C88                          1384  * LSL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00000C88                          1385  * ASR: $E, $0, 8 %0, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00000C88                          1386  * ASL: $E, $0, 8 %1, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00000C88                          1387  * ROR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00000C88                          1388  * ROL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00000C88                          1389  * Count/Reg for LSR/LSL refers to shift count, where 0 = shift count of 8, 1-7 
00000C88                          1390  * refers to the respective value when i/r = 0. If i/r = 1, data register in the 
00000C88                          1391  * Count/Reg field specifies the shift count.  
00000C88                          1392  * For directional bit at 8, R = 0, L = 1
00000C88                          1393  * Count/Reg for ROR/ROL specifies rotate count instead of shift count.
00000C88                          1394  *
00000C88                          1395  * Split into ROT and NO_ROT groups first to make identifying easier.
00000C88                          1396  * Unsupported: ROXL, ROXR
00000C88                          1397  ********************************************************************************
00000C88                          1398  C_GROUP_E:
00000C88  48E7 8000               1399      MOVEM.L D0,-(SP)
00000C8C                          1400  *Unsupported OP codes
00000C8C                          1401  CHECK_OP_ROXR_NO_ROT:
Line 1402 ERROR: Undefined symbol
00000C8C  3039 004DBD16           1402      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000C92  0240 FFC0               1403      ANDI.W #$FFC0,D0
00000C96  B07C E4C0               1404      CMP.W  #$E4C0,D0
00000C9A  6700 01B0               1405      BEQ    GROUPE_INVALID
00000C9E  6600 0002               1406      BNE    CHECK_OP_ROXL_NO_ROT
00000CA2                          1407  
00000CA2                          1408  CHECK_OP_ROXL_NO_ROT:
Line 1409 ERROR: Undefined symbol
00000CA2  3039 004DBD16           1409      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000CA8  0240 FFC0               1410      ANDI.W #$FFC0,D0
00000CAC  B07C E5C0               1411      CMP.W  #$E5C0,D0
00000CB0  6700 019A               1412      BEQ    GROUPE_INVALID
00000CB4  6600 0002               1413      BNE    CHECK_OP_ROR_NO_ROT
00000CB8                          1414  
00000CB8                          1415  *Supported OP codes
00000CB8                          1416  CHECK_OP_ROR_NO_ROT:
Line 1417 ERROR: Undefined symbol
00000CB8  3039 004DBD16           1417      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000CBE  0240 FFC0               1418      ANDI.W #$FFC0,D0
00000CC2  B07C E6C0               1419      CMP.W  #$E6C0,D0
00000CC6  6600 000C               1420      BNE    CHECK_OP_ROL_NO_ROT
00000CCA  4EB9 00001136           1421      JSR    PRINT_OP_ROR
00000CD0  6000 0180               1422      BRA    GROUPE_SUCCESS
00000CD4                          1423      
00000CD4                          1424  CHECK_OP_ROL_NO_ROT:
Line 1425 ERROR: Undefined symbol
00000CD4  3039 004DBD16           1425      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000CDA  0240 FFC0               1426      ANDI.W #$FFC0,D0
00000CDE  B07C E7C0               1427      CMP.W  #$E7C0,D0
00000CE2  6600 000C               1428      BNE    CHECK_OP_LSR_NO_ROT
00000CE6  4EB9 00001120           1429      JSR    PRINT_OP_ROL
00000CEC  6000 0164               1430      BRA    GROUPE_SUCCESS
00000CF0                          1431   
00000CF0                          1432  CHECK_OP_LSR_NO_ROT:
Line 1433 ERROR: Undefined symbol
00000CF0  3039 004DBD16           1433      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000CF6  0240 FFC0               1434      ANDI.W #$FFC0,D0
00000CFA  B07C E2C0               1435      CMP.W  #$E2C0,D0
00000CFE  6600 000C               1436      BNE    CHECK_OP_LSL_NO_ROT
00000D02  4EB9 000010DE           1437      JSR    PRINT_OP_LSR
00000D08  6000 0148               1438      BRA    GROUPE_SUCCESS
00000D0C                          1439  
00000D0C                          1440  CHECK_OP_LSL_NO_ROT:
Line 1441 ERROR: Undefined symbol
00000D0C  3039 004DBD16           1441      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000D12  0240 FFC0               1442      ANDI.W #$FFC0,D0
00000D16  B07C E3C0               1443      CMP.W  #$E3C0,D0
00000D1A  6600 000C               1444      BNE    CHECK_OP_ASR_NO_ROT
00000D1E  4EB9 000010C8           1445      JSR    PRINT_OP_LSL
00000D24  6000 012C               1446      BRA    GROUPE_SUCCESS
00000D28                          1447  
00000D28                          1448  CHECK_OP_ASR_NO_ROT:
Line 1449 ERROR: Undefined symbol
00000D28  3039 004DBD16           1449      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000D2E  0240 FFC0               1450      ANDI.W #$FFC0,D0
00000D32  B07C E0C0               1451      CMP.W  #$E0C0,D0
00000D36  6600 000C               1452      BNE    CHECK_OP_ASL_NO_ROT
00000D3A  4EB9 000010F4           1453      JSR    PRINT_OP_ASR
00000D40  6000 0110               1454      BRA    GROUPE_SUCCESS
00000D44                          1455              
00000D44                          1456  CHECK_OP_ASL_NO_ROT:
Line 1457 ERROR: Undefined symbol
00000D44  3039 004DBD16           1457      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000D4A  0240 FFC0               1458      ANDI.W #$FFC0,D0
00000D4E  B07C E1C0               1459      CMP.W  #$E1C0,D0
00000D52  6600 000C               1460      BNE    CHECK_OP_ROXR
00000D56  4EB9 0000110A           1461      JSR    PRINT_OP_ASL
00000D5C  6000 00F4               1462      BRA    GROUPE_SUCCESS
00000D60                          1463  
00000D60                          1464  *Unsupported OP codes
00000D60                          1465  CHECK_OP_ROXR:
Line 1466 ERROR: Undefined symbol
00000D60  3039 004DBD16           1466      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000D66  0240 F118               1467      ANDI.W #$F118,D0
00000D6A  B07C E010               1468      CMP.W  #$E010,D0
00000D6E  6700 00DC               1469      BEQ    GROUPE_INVALID
00000D72  6600 0002               1470      BNE    CHECK_OP_ROXL
00000D76                          1471      
00000D76                          1472  CHECK_OP_ROXL:
Line 1473 ERROR: Undefined symbol
00000D76  3039 004DBD16           1473      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000D7C  0240 F118               1474      ANDI.W #$F118,D0
00000D80  B07C E110               1475      CMP.W  #$E110,D0
00000D84  6700 00C6               1476      BEQ    GROUPE_INVALID
00000D88  6600 0002               1477      BNE    CHECK_OP_ROR
00000D8C                          1478      
00000D8C                          1479  *Supported OP codes
00000D8C                          1480  CHECK_OP_ROR:
Line 1481 ERROR: Undefined symbol
00000D8C  3039 004DBD16           1481      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000D92  0240 F118               1482      ANDI.W #$F118,D0
00000D96  B07C E018               1483      CMP.W  #$E018,D0
00000D9A  6600 0010               1484      BNE    CHECK_OP_ROL
00000D9E  4EB8 0162               1485      JSR    FIND_2_BIT_SIZE_7_TO_6     
00000DA2  4EB9 00001136           1486      JSR    PRINT_OP_ROR
00000DA8  6000 00A8               1487      BRA    GROUPE_SUCCESS
00000DAC                          1488  
00000DAC                          1489  CHECK_OP_ROL:
Line 1490 ERROR: Undefined symbol
00000DAC  3039 004DBD16           1490      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000DB2  0240 F118               1491      ANDI.W #$F118,D0
00000DB6  B07C E118               1492      CMP.W  #$E118,D0
00000DBA  6600 0010               1493      BNE    CHECK_OP_LSR
00000DBE  4EB8 0162               1494      JSR    FIND_2_BIT_SIZE_7_TO_6     
00000DC2  4EB9 00001120           1495      JSR    PRINT_OP_ROL
00000DC8  6000 0088               1496      BRA    GROUPE_SUCCESS
00000DCC                          1497      
00000DCC                          1498  CHECK_OP_LSR:
Line 1499 ERROR: Undefined symbol
00000DCC  3039 004DBD16           1499      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000DD2  0240 F118               1500      ANDI.W #$F118,D0
00000DD6  B07C E008               1501      CMP.W  #$E008,D0
00000DDA  6600 0010               1502      BNE    CHECK_OP_LSL
00000DDE  4EB8 0162               1503      JSR    FIND_2_BIT_SIZE_7_TO_6     
00000DE2  4EB9 000010DE           1504      JSR    PRINT_OP_LSR
00000DE8  6000 0068               1505      BRA    GROUPE_SUCCESS
00000DEC                          1506  
00000DEC                          1507  CHECK_OP_LSL:
Line 1508 ERROR: Undefined symbol
00000DEC  3039 004DBD16           1508      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000DF2  0240 F118               1509      ANDI.W #$F118,D0
00000DF6  B07C E108               1510      CMP.W  #$E108,D0
00000DFA  6600 0010               1511      BNE    CHECK_OP_ASR
00000DFE  4EB8 0162               1512      JSR    FIND_2_BIT_SIZE_7_TO_6     
00000E02  4EB9 000010C8           1513      JSR    PRINT_OP_LSL
00000E08  6000 0048               1514      BRA    GROUPE_SUCCESS
00000E0C                          1515  
00000E0C                          1516  CHECK_OP_ASR:
Line 1517 ERROR: Undefined symbol
00000E0C  3039 004DBD16           1517      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000E12  0240 F118               1518      ANDI.W #$F118,D0
00000E16  B07C E000               1519      CMP.W  #$E000,D0
00000E1A  6600 0010               1520      BNE    CHECK_OP_ASL
00000E1E  4EB8 0162               1521      JSR    FIND_2_BIT_SIZE_7_TO_6     
00000E22  4EB9 000010F4           1522      JSR    PRINT_OP_ASR
00000E28  6000 0028               1523      BRA    GROUPE_SUCCESS
00000E2C                          1524  
00000E2C                          1525  CHECK_OP_ASL:
Line 1526 ERROR: Undefined symbol
00000E2C  3039 004DBD16           1526      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000E32  0240 F118               1527      ANDI.W #$F118,D0
00000E36  B07C E100               1528      CMP.W  #$E100,D0
00000E3A  6600 0010               1529      BNE    GROUPE_INVALID      ;Last possible OP code
00000E3E  4EB8 0162               1530      JSR    FIND_2_BIT_SIZE_7_TO_6     
00000E42  4EB9 0000110A           1531      JSR    PRINT_OP_ASL
00000E48  6000 0008               1532      BRA    GROUPE_SUCCESS
00000E4C                          1533  
00000E4C                          1534  GROUPE_INVALID:
00000E4C  4EB9 00000E60           1535      JSR     INVALID_OP
00000E52                          1536  GROUPE_SUCCESS:
00000E52  4CDF 0001               1537      MOVEM.L (SP)+,D0
00000E56  4E75                    1538      RTS
00000E58                          1539  * GROUP_F
00000E58                          1540  ********************************************************************************
00000E58                          1541  * Currently no OP codes here are supported. There are no OP codes here
00000E58                          1542  ********************************************************************************
00000E58                          1543  C_GROUP_F:
00000E58  4EB9 00000E60           1544      JSR INVALID_OP
00000E5E  4E75                    1545      RTS
00000E60                          1546      
00000E60                          1547  * INVALID_OP                     
00000E60                          1548  ********************************************************************************
00000E60                          1549  * Any value that is not covered in the above groups would be considered invalid. 
00000E60                          1550  * The following values in the first nibble would also indicate that the 
00000E60                          1551  * operand codes is already invalid: $7, $A, $F.
00000E60                          1552  * For unsupported OP codes, display DATA $WXYZ   
00000E60                          1553  * THIS WILL NEED TO BE CHANGED TO DISPLAY: 1000 DATA $WXYZ IN THE FUTURE
00000E60                          1554  ********************************************************************************
00000E60                          1555  INVALID_OP:  ; ONLY SETS IS_VALID TO 0
Line 1556 ERROR: Undefined symbol
00000E60  13FC 0000 005455B8      1556      MOVE.B #0,IS_VALID
00000E68  4E75                    1557      RTS
00000E6A                          1558  
00000E6A                          1559  ********************** PRINTING ROUTINES **************************************
00000E6A                          1560  * Description: These routines are to print the associated op codes, by placing
00000E6A                          1561  * them in the appropriate area to the buffer
00000E6A                          1562  *
00000E6A                          1563  * Registers used: A1 for loading, A6 for EA parsing.
00000E6A                          1564  *
00000E6A                          1565  * Precondition: The relevant opcode has been identified correctly.
00000E6A                          1566  *
00000E6A                          1567  * Postcondition: Prints out the associated opcode to the buffer.
00000E6A                          1568  
00000E6A                          1569  * THIS NEEDS TO BE RETOOLED TO PRINT TO BUFFER NOT TO CONSOLE
00000E6A                          1570  *******************************************************************************
00000E6A                          1571  
00000E6A                          1572  * Prints the loaded item into G_BUFFER
00000E6A                          1573  PRINT_TO_BUFFER:
Line 1574 ERROR: Undefined symbol
00000E6A  23FC 004DBD16 005455B8  1574      MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer
Line 1575 ERROR: Undefined symbol
00000E74  4EB9 004DBD16           1575      JSR AddStrToBuffer
00000E7A  4E75                    1576      RTS
00000E7C                          1577      
00000E7C                          1578  ****************************** GROUP 0 **************************************** 
00000E7C                          1579  PRINT_OP_ORI:
Line 1580 ERROR: Undefined symbol
00000E7C  23FC 000011C1 005455B8  1580      MOVE.L #P_OP_ORI, Arg_AddStrToBuffer_String
00000E86  4EB8 0E6A               1581      JSR PRINT_TO_BUFFER
00000E8A  4EB9 0000117C           1582      JSR PRINT_OP_SIZE
00000E90  4E75                    1583      RTS
00000E92                          1584  PRINT_OP_CMPI:
Line 1585 ERROR: Undefined symbol
00000E92  23FC 000011C8 005455B8  1585      MOVE.L #P_OP_CMPI, Arg_AddStrToBuffer_String
00000E9C  4EB8 0E6A               1586      JSR PRINT_TO_BUFFER
00000EA0  4EB9 0000117C           1587      JSR PRINT_OP_SIZE
00000EA6  4E75                    1588      RTS
00000EA8                          1589  PRINT_OP_STATIC_BCLR:
Line 1590 ERROR: Undefined symbol
00000EA8  23FC 000011D0 005455B8  1590      MOVE.L #P_OP_BCLR, Arg_AddStrToBuffer_String
00000EB2  4EB8 0E6A               1591      JSR PRINT_TO_BUFFER
00000EB6  4EB9 0000117C           1592      JSR PRINT_OP_SIZE
00000EBC  4E75                    1593      RTS
00000EBE                          1594      
00000EBE                          1595  PRINT_OP_DYNAMIC_BCLR:
Line 1596 ERROR: Undefined symbol
00000EBE  23FC 000011D0 005455B8  1596      MOVE.L #P_OP_BCLR, Arg_AddStrToBuffer_String
00000EC8  4EB8 0E6A               1597      JSR PRINT_TO_BUFFER
00000ECC  4EB9 0000117C           1598      JSR PRINT_OP_SIZE
00000ED2  4E75                    1599      RTS
00000ED4                          1600  ******************************* END OF GROUP 0 ********************************
00000ED4                          1601  
00000ED4                          1602  ****************************** GROUP 1 ****************************************    
00000ED4                          1603  PRINT_OP_MOVEB:
Line 1604 ERROR: Undefined symbol
00000ED4  23FC 000011D8 005455B8  1604      MOVE.L #P_OP_MOVEB, Arg_AddStrToBuffer_String
00000EDE  4EB8 0E6A               1605      JSR PRINT_TO_BUFFER
00000EE2  4E75                    1606      RTS
00000EE4                          1607  ******************************* END OF GROUP 1 ********************************
00000EE4                          1608      
00000EE4                          1609  ****************************** GROUP 2 **************************************** 
00000EE4                          1610  PRINT_OP_MOVEA_L:
Line 1611 ERROR: Undefined symbol
00000EE4  23FC 000011E3 005455B8  1611      MOVE.L #P_OP_MOVEA_L, Arg_AddStrToBuffer_String
00000EEE  4EB8 0E6A               1612      JSR PRINT_TO_BUFFER
00000EF2  4E75                    1613      RTS
00000EF4                          1614  PRINT_OP_MOVE_L:
Line 1615 ERROR: Undefined symbol
00000EF4  23FC 000011EF 005455B8  1615      MOVE.L #P_OP_MOVE_L, Arg_AddStrToBuffer_String
00000EFE  4EB8 0E6A               1616      JSR PRINT_TO_BUFFER
00000F02  4E75                    1617      RTS
00000F04                          1618  ******************************* END OF GROUP 2 ********************************
00000F04                          1619      
00000F04                          1620  ****************************** GROUP 3 ****************************************    
00000F04                          1621  PRINT_OP_MOVEA_W:
Line 1622 ERROR: Undefined symbol
00000F04  23FC 000011FA 005455B8  1622      MOVE.L #P_OP_MOVEA_W, Arg_AddStrToBuffer_String
00000F0E  4EB8 0E6A               1623      JSR PRINT_TO_BUFFER
00000F12  4E75                    1624      RTS
00000F14                          1625  PRINT_OP_MOVE_W:
Line 1626 ERROR: Undefined symbol
00000F14  23FC 00001206 005455B8  1626      MOVE.L #P_OP_MOVE_W, Arg_AddStrToBuffer_String
00000F1E  4EB8 0E6A               1627      JSR PRINT_TO_BUFFER
00000F22  4E75                    1628      RTS
00000F24                          1629  ******************************* END OF GROUP 3 ********************************
00000F24                          1630  
00000F24                          1631  ****************************** GROUP 4 ****************************************
00000F24                          1632  PRINT_OP_JSR:
Line 1633 ERROR: Undefined symbol
00000F24  23FC 00001230 005455B8  1633      MOVE.L #P_OP_JSR, Arg_AddStrToBuffer_String
00000F2E  4EB8 0E6A               1634      JSR PRINT_TO_BUFFER
00000F32  4E75                    1635      RTS
00000F34                          1636  PRINT_OP_RTS:
Line 1637 ERROR: Undefined symbol
00000F34  23FC 0000123E 005455B8  1637      MOVE.L #P_OP_RTS, Arg_AddStrToBuffer_String
00000F3E  4EB8 0E6A               1638      JSR PRINT_TO_BUFFER
00000F42  4E75                    1639      RTS
00000F44                          1640  PRINT_OP_NOP:
Line 1641 ERROR: Undefined symbol
00000F44  23FC 00001237 005455B8  1641      MOVE.L #P_OP_NOP, Arg_AddStrToBuffer_String
00000F4E  4EB8 0E6A               1642      JSR PRINT_TO_BUFFER
00000F52  4E75                    1643      RTS
00000F54                          1644  PRINT_OP_LEA:
Line 1645 ERROR: Undefined symbol
00000F54  23FC 00001229 005455B8  1645      MOVE.L #P_OP_LEA, Arg_AddStrToBuffer_String
00000F5E  4EB8 0E6A               1646      JSR PRINT_TO_BUFFER
00000F62  4EB9 0000117C           1647      JSR PRINT_OP_SIZE
00000F68  4E75                    1648      RTS
00000F6A                          1649  PRINT_OP_NEG:
Line 1650 ERROR: Undefined symbol
00000F6A  23FC 00001245 005455B8  1650      MOVE.L #P_OP_NEG, Arg_AddStrToBuffer_String
00000F74  4EB8 0E6A               1651      JSR PRINT_TO_BUFFER
00000F78  4EB9 0000117C           1652      JSR PRINT_OP_SIZE
00000F7E  4E75                    1653      RTS
00000F80                          1654  PRINT_OP_MOVEM_W:
Line 1655 ERROR: Undefined symbol
00000F80  23FC 00001211 005455B8  1655      MOVE.L #P_OP_MOVEM_W, Arg_AddStrToBuffer_String
00000F8A  4EB8 0E6A               1656      JSR PRINT_TO_BUFFER
00000F8E  4E75                    1657      RTS
00000F90                          1658  PRINT_OP_MOVEM_L:
Line 1659 ERROR: Undefined symbol
00000F90  23FC 0000121D 005455B8  1659      MOVE.L #P_OP_MOVEM_L, Arg_AddStrToBuffer_String
00000F9A  4EB8 0E6A               1660      JSR PRINT_TO_BUFFER
00000F9E  4E75                    1661      RTS
00000FA0                          1662  ******************************* END OF GROUP 4 ********************************
00000FA0                          1663      
00000FA0                          1664  ****************************** GROUP 5 ****************************************
00000FA0                          1665  PRINT_OP_SUBQ:
Line 1666 ERROR: Undefined symbol
00000FA0  23FC 0000124C 005455B8  1666      MOVE.L #P_OP_SUBQ, Arg_AddStrToBuffer_String
00000FAA  4EB8 0E6A               1667      JSR PRINT_TO_BUFFER
00000FAE  4EB9 0000117C           1668      JSR PRINT_OP_SIZE
00000FB4  4E75                    1669      RTS
00000FB6                          1670  ******************************* END OF GROUP 5 ********************************
00000FB6                          1671  
00000FB6                          1672  ****************************** GROUP 6 ****************************************
00000FB6                          1673  PRINT_OP_BCS:
Line 1674 ERROR: Undefined symbol
00000FB6  23FC 0000125B 005455B8  1674      MOVE.L #P_OP_BCS, Arg_AddStrToBuffer_String
00000FC0  4EB8 0E6A               1675      JSR PRINT_TO_BUFFER
00000FC4  4EB9 0000117C           1676      JSR PRINT_OP_SIZE
00000FCA  4E75                    1677      RTS
00000FCC                          1678  PRINT_OP_BGE:
Line 1679 ERROR: Undefined symbol
00000FCC  23FC 00001262 005455B8  1679      MOVE.L #P_OP_BGE, Arg_AddStrToBuffer_String
00000FD6  4EB8 0E6A               1680      JSR PRINT_TO_BUFFER
00000FDA  4EB9 0000117C           1681      JSR PRINT_OP_SIZE
00000FE0  4E75                    1682      RTS
00000FE2                          1683  PRINT_OP_BLT:
Line 1684 ERROR: Undefined symbol
00000FE2  23FC 00001269 005455B8  1684      MOVE.L #P_OP_BLT, Arg_AddStrToBuffer_String
00000FEC  4EB8 0E6A               1685      JSR PRINT_TO_BUFFER
00000FF0  4EB9 0000117C           1686      JSR PRINT_OP_SIZE
00000FF6  4E75                    1687      RTS
00000FF8                          1688  PRINT_OP_BVC:
Line 1689 ERROR: Undefined symbol
00000FF8  23FC 00001270 005455B8  1689      MOVE.L #P_OP_BVC, Arg_AddStrToBuffer_String
00001002  4EB8 0E6A               1690      JSR PRINT_TO_BUFFER
00001006  4EB9 0000117C           1691      JSR PRINT_OP_SIZE
0000100C  4E75                    1692      RTS
0000100E                          1693  PRINT_OP_BRA:
Line 1694 ERROR: Undefined symbol
0000100E  23FC 00001254 005455B8  1694      MOVE.L #P_OP_BRA, Arg_AddStrToBuffer_String
00001018  4EB8 0E6A               1695      JSR PRINT_TO_BUFFER
0000101C  4EB9 0000117C           1696      JSR PRINT_OP_SIZE
00001022  4E75                    1697      RTS
00001024                          1698  ******************************* END OF GROUP 6 ********************************
00001024                          1699  
00001024                          1700  ****************************** GROUP 7 ****************************************
00001024                          1701  * No currently supported OP codes to print here.
00001024                          1702  ******************************* END OF GROUP 7 ********************************
00001024                          1703  
00001024                          1704  ****************************** GROUP 8 ****************************************
00001024                          1705  PRINT_OP_DIVS:
Line 1706 ERROR: Undefined symbol
00001024  23FC 00001277 005455B8  1706      MOVE.L #P_OP_DIVS, Arg_AddStrToBuffer_String
0000102E  4EB8 0E6A               1707      JSR PRINT_TO_BUFFER
00001032  4E75                    1708      RTS
00001034                          1709  PRINT_OP_OR:
Line 1710 ERROR: Undefined symbol
00001034  23FC 00001282 005455B8  1710      MOVE.L #P_OP_OR, Arg_AddStrToBuffer_String
0000103E  4EB8 0E6A               1711      JSR PRINT_TO_BUFFER
00001042  4EB9 0000117C           1712      JSR PRINT_OP_SIZE
00001048  4E75                    1713      RTS
0000104A                          1714  ******************************* END OF GROUP 8 ********************************
0000104A                          1715  
0000104A                          1716  ****************************** GROUP 9 ****************************************
0000104A                          1717  PRINT_OP_SUB:
Line 1718 ERROR: Undefined symbol
0000104A  23FC 00001288 005455B8  1718      MOVE.L #P_OP_SUB, Arg_AddStrToBuffer_String
00001054  4EB8 0E6A               1719      JSR PRINT_TO_BUFFER
00001058  4EB9 0000117C           1720      JSR PRINT_OP_SIZE
0000105E  4E75                    1721      RTS
00001060                          1722  ******************************* END OF GROUP 9 ********************************
00001060                          1723  
00001060                          1724  ****************************** GROUP A ****************************************
00001060                          1725  * No currently supported OP codes to print here.
00001060                          1726  ******************************* END OF GROUP A ********************************
00001060                          1727  
00001060                          1728  ****************************** GROUP B ****************************************
00001060                          1729  PRINT_OP_EOR:
Line 1730 ERROR: Undefined symbol
00001060  23FC 0000128F 005455B8  1730      MOVE.L #P_OP_EOR, Arg_AddStrToBuffer_String
0000106A  4EB8 0E6A               1731      JSR PRINT_TO_BUFFER
0000106E  4EB9 0000117C           1732      JSR PRINT_OP_SIZE
00001074  4E75                    1733      RTS
00001076                          1734  PRINT_OP_CMP:
Line 1735 ERROR: Undefined symbol
00001076  23FC 00001296 005455B8  1735      MOVE.L #P_OP_CMP, Arg_AddStrToBuffer_String
00001080  4EB8 0E6A               1736      JSR PRINT_TO_BUFFER
00001084  4EB9 0000117C           1737      JSR PRINT_OP_SIZE
0000108A  4E75                    1738      RTS
0000108C                          1739  ******************************* END OF GROUP B ********************************
0000108C                          1740  
0000108C                          1741  ****************************** GROUP C ****************************************
0000108C                          1742  PRINT_OP_MULS:
Line 1743 ERROR: Undefined symbol
0000108C  23FC 0000129D 005455B8  1743      MOVE.L #P_OP_MULS, Arg_AddStrToBuffer_String
00001096  4EB8 0E6A               1744      JSR PRINT_TO_BUFFER
0000109A  4E75                    1745      RTS
0000109C                          1746  ******************************* END OF GROUP C ********************************
0000109C                          1747  
0000109C                          1748  ****************************** GROUP D ****************************************
0000109C                          1749  PRINT_OP_ADD:
Line 1750 ERROR: Undefined symbol
0000109C  23FC 000012B0 005455B8  1750      MOVE.L #P_OP_ADD, Arg_AddStrToBuffer_String
000010A6  4EB8 0E6A               1751      JSR PRINT_TO_BUFFER
000010AA  4EB9 0000117C           1752      JSR PRINT_OP_SIZE
000010B0  4E75                    1753      RTS
000010B2                          1754  PRINT_OP_ADDA:
Line 1755 ERROR: Undefined symbol
000010B2  23FC 000012A8 005455B8  1755      MOVE.L #P_OP_ADDA, Arg_AddStrToBuffer_String
000010BC  4EB8 0E6A               1756      JSR PRINT_TO_BUFFER
000010C0  4EB9 00001196           1757      JSR PRINT_OP_SIZE_ADDA
000010C6  4E75                    1758      RTS
000010C8                          1759  
000010C8                          1760  ******************************* END OF GROUP D ********************************
000010C8                          1761  
000010C8                          1762  ****************************** GROUP E ****************************************
000010C8                          1763  PRINT_OP_LSL:
Line 1764 ERROR: Undefined symbol
000010C8  23FC 000012BE 005455B8  1764      MOVE.L #P_OP_LSL, Arg_AddStrToBuffer_String
000010D2  4EB8 0E6A               1765      JSR PRINT_TO_BUFFER
000010D6  4EB9 0000117C           1766      JSR PRINT_OP_SIZE
000010DC  4E75                    1767      RTS
000010DE                          1768  PRINT_OP_LSR:
Line 1769 ERROR: Undefined symbol
000010DE  23FC 000012B7 005455B8  1769      MOVE.L #P_OP_LSR, Arg_AddStrToBuffer_String
000010E8  4EB8 0E6A               1770      JSR PRINT_TO_BUFFER
000010EC  4EB9 0000117C           1771      JSR PRINT_OP_SIZE
000010F2  4E75                    1772      RTS
000010F4                          1773  PRINT_OP_ASR:
Line 1774 ERROR: Undefined symbol
000010F4  23FC 000012C5 005455B8  1774      MOVE.L #P_OP_ASR, Arg_AddStrToBuffer_String
000010FE  4EB8 0E6A               1775      JSR PRINT_TO_BUFFER
00001102  4EB9 0000117C           1776      JSR PRINT_OP_SIZE
00001108  4E75                    1777      RTS
0000110A                          1778  PRINT_OP_ASL:
Line 1779 ERROR: Undefined symbol
0000110A  23FC 000012CC 005455B8  1779      MOVE.L #P_OP_ASL, Arg_AddStrToBuffer_String
00001114  4EB8 0E6A               1780      JSR PRINT_TO_BUFFER
00001118  4EB9 0000117C           1781      JSR PRINT_OP_SIZE
0000111E  4E75                    1782      RTS
00001120                          1783  PRINT_OP_ROL:
Line 1784 ERROR: Undefined symbol
00001120  23FC 000012DA 005455B8  1784      MOVE.L #P_OP_ROL, Arg_AddStrToBuffer_String
0000112A  4EB8 0E6A               1785      JSR PRINT_TO_BUFFER
0000112E  4EB9 0000117C           1786      JSR PRINT_OP_SIZE
00001134  4E75                    1787      RTS
00001136                          1788  PRINT_OP_ROR:
Line 1789 ERROR: Undefined symbol
00001136  23FC 000012D3 005455B8  1789      MOVE.L #P_OP_ROR, Arg_AddStrToBuffer_String
00001140  4EB8 0E6A               1790      JSR PRINT_TO_BUFFER
00001144  4EB9 0000117C           1791      JSR PRINT_OP_SIZE
0000114A  4E75                    1792      RTS
0000114C                          1793  ******************************* END OF GROUP E ********************************
0000114C                          1794  
0000114C                          1795  ****************************** GROUP F ****************************************
0000114C                          1796  * No currently supported OP codes to print here.
0000114C                          1797  ******************************* END OF GROUP F ********************************
0000114C                          1798  
0000114C                          1799  ****************************** SIZE PRINTS ************************************
0000114C                          1800  PRINT_SIZE_BYTE:
Line 1801 ERROR: Undefined symbol
0000114C  23FC 000011B5 005455B8  1801      MOVE.L #P_SIZE_B, Arg_AddStrToBuffer_String
00001156  4EB8 0E6A               1802      JSR PRINT_TO_BUFFER
0000115A  4E75                    1803      RTS    
0000115C                          1804  
0000115C                          1805  PRINT_SIZE_WORD:
Line 1806 ERROR: Undefined symbol
0000115C  23FC 000011B9 005455B8  1806      MOVE.L #P_SIZE_W, Arg_AddStrToBuffer_String
00001166  4EB8 0E6A               1807      JSR PRINT_TO_BUFFER
0000116A  4E75                    1808      RTS
0000116C                          1809      
0000116C                          1810  PRINT_SIZE_LONG:
Line 1811 ERROR: Undefined symbol
0000116C  23FC 000011BD 005455B8  1811      MOVE.L #P_SIZE_L, Arg_AddStrToBuffer_String
00001176  4EB8 0E6A               1812      JSR PRINT_TO_BUFFER
0000117A  4E75                    1813      RTS
0000117C                          1814  
0000117C                          1815  PRINT_OP_SIZE:                     ;Prints current OP code byte size if applicable
0000117C  0C38 0000 0000          1816      CMP.B  #%00,OP_SIZE         ;Checks for byte size
00001182  67C8                    1817      BEQ    PRINT_SIZE_BYTE      ;Print .B to buffer
00001184  0C38 0001 0000          1818      CMP.B  #%01,OP_SIZE         ;Check for word size
0000118A  67D0                    1819      BEQ    PRINT_SIZE_WORD      ;Print .W to buffer
0000118C  0C38 0002 0000          1820      CMP.B  #%10,OP_SIZE         ;Check for long size
00001192  67D8                    1821      BEQ    PRINT_SIZE_LONG      ;Print .L to buffer
00001194  4E75                    1822      RTS
00001196                          1823      
00001196                          1824  PRINT_OP_SIZE_ADDA:                  ;Special  print for ADDA
00001196  0C38 0000 0000          1825      CMP.B #%0,OP_SIZE
0000119C  67BE                    1826      BEQ    PRINT_SIZE_WORD
0000119E  66CC                    1827      BNE    PRINT_SIZE_LONG
000011A0                          1828      
000011A0                          1829  ******************* END OF SIZE PRINTS ****************************************
000011A0                          1830  
000011A0                          1831  ******************* END OF PRINTING ROUTINES **********************************
000011A0                          1832  
000011A0                          1833  ******************* END OF JMP LABELS *****************************************
000011A0                          1834  
000011A0                          1835  ******************* DATA CONSTANT PRINTS **************************************
000011A0                          1836  * Formatting is as follows: P_OP_<OPCODE>, where P = Print, OP = Operation,
000011A0                          1837  * <OPCODE> is any valid operand
000011A0                          1838  
000011A0= 20 20 20 44 41 54 ...   1839  P_INVALID_OP    DC.B    '   DATA   $',0
000011AC= 46 6F 75 6E 64 20 ...   1840  OP_FOUND        DC.B    'Found OP',0 ; this should be taken out later
000011B5= 2E 42 20 00             1841  P_SIZE_B        DC.B    '.B ',0
000011B9= 2E 57 20 00             1842  P_SIZE_W        DC.B    '.W ',0
000011BD= 2E 4C 20 00             1843  P_SIZE_L        DC.B    '.L ',0
000011C1= 20 20 20 4F 52 49 00    1844  P_OP_ORI        DC.B    '   ORI',0
000011C8= 20 20 20 43 4D 50 ...   1845  P_OP_CMPI       DC.B    '   CMPI',0
000011D0= 20 20 20 42 43 4C ...   1846  P_OP_BCLR       DC.B    '   BCLR',0
000011D8= 20 20 20 4D 4F 56 ...   1847  P_OP_MOVEB      DC.B    '   MOVE.B ',0
000011E3= 20 20 20 4D 4F 56 ...   1848  P_OP_MOVEA_L    DC.B    '   MOVEA.L ',0 
000011EF= 20 20 20 4D 4F 56 ...   1849  P_OP_MOVE_L     DC.B    '   MOVE.L ',0
000011FA= 20 20 20 4D 4F 56 ...   1850  P_OP_MOVEA_W    DC.B    '   MOVEA.W ',0
00001206= 20 20 20 4D 4F 56 ...   1851  P_OP_MOVE_W     DC.B    '   MOVE.W ',0
00001211= 20 20 20 4D 4F 56 ...   1852  P_OP_MOVEM_W    DC.B    '   MOVEM.W ',0
0000121D= 20 20 20 4D 4F 56 ...   1853  P_OP_MOVEM_L    DC.B    '   MOVEM.L ',0
00001229= 20 20 20 4C 45 41 00    1854  P_OP_LEA        DC.B    '   LEA',0
00001230= 20 20 20 4A 53 52 00    1855  P_OP_JSR        DC.B    '   JSR',0
00001237= 20 20 20 4E 4F 50 00    1856  P_OP_NOP        DC.B    '   NOP',0
0000123E= 20 20 20 52 54 53 00    1857  P_OP_RTS        DC.B    '   RTS',0
00001245= 20 20 20 4E 45 47 00    1858  P_OP_NEG        DC.B    '   NEG',0
0000124C= 20 20 20 53 55 42 ...   1859  P_OP_SUBQ       DC.B    '   SUBQ',0
00001254= 20 20 20 42 52 41 00    1860  P_OP_BRA        DC.B    '   BRA',0
0000125B= 20 20 20 42 43 53 00    1861  P_OP_BCS        DC.B    '   BCS',0
00001262= 20 20 20 42 47 45 00    1862  P_OP_BGE        DC.B    '   BGE',0
00001269= 20 20 20 42 4C 54 00    1863  P_OP_BLT        DC.B    '   BLT',0
00001270= 20 20 20 42 56 43 00    1864  P_OP_BVC        DC.B    '   BVC',0
00001277= 20 20 20 44 49 56 ...   1865  P_OP_DIVS       DC.B    '   DIVS.W ',0
00001282= 20 20 20 4F 52 00       1866  P_OP_OR         DC.B    '   OR',0
00001288= 20 20 20 53 55 42 00    1867  P_OP_SUB        DC.B    '   SUB',0
0000128F= 20 20 20 45 4F 52 00    1868  P_OP_EOR        DC.B    '   EOR',0
00001296= 20 20 20 43 4D 50 00    1869  P_OP_CMP        DC.B    '   CMP',0
0000129D= 20 20 20 4D 55 4C ...   1870  P_OP_MULS       DC.B    '   MULS.W ',0
000012A8= 20 20 20 41 44 44 ...   1871  P_OP_ADDA       DC.B    '   ADDA',0
000012B0= 20 20 20 41 44 44 00    1872  P_OP_ADD        DC.B    '   ADD',0
000012B7= 20 20 20 4C 53 52 00    1873  P_OP_LSR        DC.B    '   LSR',0
000012BE= 20 20 20 4C 53 4C 00    1874  P_OP_LSL        DC.B    '   LSL',0
000012C5= 20 20 20 41 53 52 00    1875  P_OP_ASR        DC.B    '   ASR',0
000012CC= 20 20 20 41 53 4C 00    1876  P_OP_ASL        DC.B    '   ASL',0
000012D3= 20 20 20 52 4F 52 00    1877  P_OP_ROR        DC.B    '   ROR',0
000012DA= 20 20 20 52 4F 4C 00    1878  P_OP_ROL        DC.B    '   ROL',0
000012E1                          1879  ***************** END OF DATA CONSTANT PRINTS ***********************************
000012E1                          1880   
000012E1                          1881  
000012E1                          1882  
000012E1                          1883  
000012E1                          1884  
000012E1                          1885  
000012E1                          1886  
000012E1                          1887  
000012E1                          1888  
000012E1                          1889  
000012E1                          1890  
000012E1                          1891  
000012E1                          1892  
Line 1893 WARNING: END directive missing, starting address not set

172 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BIT_CHECK_EXG       BC8
BIT_CHECK_EXT       678
BIT_CHECK_MOVEP     3B6
BIT_CHECK_SUBX      AD6
BIT_SIZE_CHECK      C26
CHECK_NOP           142
CHECK_OP_ABCD       BAE
CHECK_OP_ADD        C54
CHECK_OP_ADDA       C5E
CHECK_OP_ADDI       306
CHECK_OP_ADDQ       86C
CHECK_OP_ADDX       C3E
CHECK_OP_AND        C04
CHECK_OP_ANDI       2DA
CHECK_OP_ANDI_TO_CCR  292
CHECK_OP_ANDI_TO_SR  2A4
CHECK_OP_ASL        E2C
CHECK_OP_ASL_NO_ROT  D44
CHECK_OP_ASR        E0C
CHECK_OP_ASR_NO_ROT  D28
CHECK_OP_BCC        8DE
CHECK_OP_BCS        994
CHECK_OP_BEQ        8F4
CHECK_OP_BGE        9B0
CHECK_OP_BGT        8C8
CHECK_OP_BHI        90A
CHECK_OP_BLS        920
CHECK_OP_BLT        9CC
CHECK_OP_BMI        936
CHECK_OP_BNE        94C
CHECK_OP_BPL        962
CHECK_OP_BRA        978
CHECK_OP_BSR        8B2
CHECK_OP_BVC        9E8
CHECK_OP_CHK        770
CHECK_OP_CLR        636
CHECK_OP_CMP        B68
CHECK_OP_CMPA       B32
CHECK_OP_CMPI       408
CHECK_OP_CMPM       B1C
CHECK_OP_DBCC       840
CHECK_OP_DIVS       A62
CHECK_OP_DIVU       A36
CHECK_OP_DYNAMIC_BCHG  38A
CHECK_OP_DYNAMIC_BCLR  448
CHECK_OP_DYNAMIC_BSET  3A0
CHECK_OP_DYNAMIC_BTST  374
CHECK_OP_EOR        B48
CHECK_OP_EORI       31C
CHECK_OP_EORI_TO_CCR  2B6
CHECK_OP_EORI_TO_SR  2C8
CHECK_OP_EXG        BC4
CHECK_OP_EXT        662
CHECK_OP_ILLEGAL    596
CHECK_OP_JMP        75A
CHECK_OP_JSR        7D2
CHECK_OP_LEA        7B6
CHECK_OP_LINK       718
CHECK_OP_LSL        DEC
CHECK_OP_LSL_NO_ROT  D0C
CHECK_OP_LSR        DCC
CHECK_OP_LSR_NO_ROT  CF0
CHECK_OP_MOVEA_L    4A4
CHECK_OP_MOVEA_W    50C
CHECK_OP_MOVEM      80E
CHECK_OP_MOVEP      3D2
CHECK_OP_MOVEQ      A14
CHECK_OP_MOVE_B     478
CHECK_OP_MOVE_FROM_SR  5DE
CHECK_OP_MOVE_L     4E0
CHECK_OP_MOVE_TO_CCR  5F4
CHECK_OP_MOVE_TO_SR  60A
CHECK_OP_MOVE_USP   744
CHECK_OP_MOVE_W     548
CHECK_OP_MULS       BE8
CHECK_OP_MULU       B98
CHECK_OP_NBCD       694
CHECK_OP_NEG        7EE
CHECK_OP_NEGX       620
CHECK_OP_NOP        786
CHECK_OP_NOT        64C
CHECK_OP_OR         A7E
CHECK_OP_ORI        3E8
CHECK_OP_ORI_TO_CCR  26E
CHECK_OP_ORI_TO_SR  280
CHECK_OP_PEA        6C0
CHECK_OP_RESET      584
CHECK_OP_ROL        DAC
CHECK_OP_ROL_NO_ROT  CD4
CHECK_OP_ROR        D8C
CHECK_OP_ROR_NO_ROT  CB8
CHECK_OP_ROXL       D76
CHECK_OP_ROXL_NO_ROT  CA2
CHECK_OP_ROXR       D60
CHECK_OP_ROXR_NO_ROT  C8C
CHECK_OP_RTE        5A8
CHECK_OP_RTR        5CC
CHECK_OP_RTS        79E
CHECK_OP_SBCD       A4C
CHECK_OP_SCC        856
CHECK_OP_STATIC_BCHG  348
CHECK_OP_STATIC_BCLR  428
CHECK_OP_STATIC_BSET  35E
CHECK_OP_STATIC_BTST  332
CHECK_OP_STOP       572
CHECK_OP_SUB        AF6
CHECK_OP_SUBA       AAE
CHECK_OP_SUBI       2F0
CHECK_OP_SUBQ       882
CHECK_OP_SUBX       AC4
CHECK_OP_SWAP       6AA
CHECK_OP_TAS        6D6
CHECK_OP_TRAP       702
CHECK_OP_TRAPV      5BA
CHECK_OP_TST        6EC
CHECK_OP_UNLK       72E
CHECK_SIZE_BIT_FOR_SUB  A9C
C_GROUP_0           26A
C_GROUP_1           474
C_GROUP_2           4A0
C_GROUP_3           508
C_GROUP_4           570
C_GROUP_5           83C
C_GROUP_6           8AE
C_GROUP_7           A10
C_GROUP_8           A32
C_GROUP_9           A98
C_GROUP_A           B10
C_GROUP_B           B18
C_GROUP_C           B94
C_GROUP_D           C22
C_GROUP_E           C88
C_GROUP_F           E58
FIND_1_BIT_SIZE_6   184
FIND_1_BIT_SIZE_8   1A6
FIND_2_BIT_SIZE_7_TO_6  162
FIND_MOVEA_L_DIFFERENCE  4B8
FIND_MOVEA_W_DIFF   520
FIRST_3             2
FOURTH_3            5
GROUP0_INVALID      468
GROUP0_SUCCESS      46E
GROUP1_INVALID      494
GROUP1_SUCCESS      49A
GROUP2_INVALID      4FC
GROUP2_SUCCESS      502
GROUP3_INVALID      564
GROUP3_SUCCESS      56A
GROUP4_INVALID      82A
GROUP4_SUCCESS      836
GROUP5_INVALID      8A2
GROUP5_SUCCESS      8A8
GROUP6_INVALID      A04
GROUP6_SUCCESS      A0A
GROUP7_INVALID      A26
GROUP7_SUCCESS      A2C
GROUP8_INVALID      A8C
GROUP8_SUCCESS      A92
GROUP9_INVALID      B04
GROUP9_SUCCESS      B0A
GROUPB_INVALID      B88
GROUPB_SUCCESS      B8E
GROUPC_INVALID      C16
GROUPC_SUCCESS      C1C
GROUPD_INVALID      C7C
GROUPD_SUCCESS      C82
GROUPE_INVALID      E4C
GROUPE_SUCCESS      E52
GROUP_0             1C
GROUP_1             2E
GROUP_2             40
GROUP_3             52
GROUP_4             64
GROUP_5             76
GROUP_6             88
GROUP_7             9A
GROUP_8             AC
GROUP_9             BE
GROUP_A             D0
GROUP_B             E2
GROUP_C             F4
GROUP_D             106
GROUP_E             118
GROUP_F             12A
INVALID_OP          E60
MNEMONIC            1
MOVE_AND_MOVEA_PARSE_EA  1C8
NORMAL_CHECK        152
OP_FOUND            11AC
OP_JSR_DONE         138
OP_JSR_ROUTINE      6
OP_SIZE             0
PARSE_EA_CONSTANT_BITS  212
PRINT_OP_ADD        109C
PRINT_OP_ADDA       10B2
PRINT_OP_ASL        110A
PRINT_OP_ASR        10F4
PRINT_OP_BCS        FB6
PRINT_OP_BGE        FCC
PRINT_OP_BLT        FE2
PRINT_OP_BRA        100E
PRINT_OP_BVC        FF8
PRINT_OP_CMP        1076
PRINT_OP_CMPI       E92
PRINT_OP_DIVS       1024
PRINT_OP_DYNAMIC_BCLR  EBE
PRINT_OP_EOR        1060
PRINT_OP_JSR        F24
PRINT_OP_LEA        F54
PRINT_OP_LSL        10C8
PRINT_OP_LSR        10DE
PRINT_OP_MOVEA_L    EE4
PRINT_OP_MOVEA_W    F04
PRINT_OP_MOVEB      ED4
PRINT_OP_MOVEM_L    F90
PRINT_OP_MOVEM_W    F80
PRINT_OP_MOVE_L     EF4
PRINT_OP_MOVE_W     F14
PRINT_OP_MULS       108C
PRINT_OP_NEG        F6A
PRINT_OP_NOP        F44
PRINT_OP_OR         1034
PRINT_OP_ORI        E7C
PRINT_OP_ROL        1120
PRINT_OP_ROR        1136
PRINT_OP_RTS        F34
PRINT_OP_SIZE       117C
PRINT_OP_SIZE_ADDA  1196
PRINT_OP_STATIC_BCLR  EA8
PRINT_OP_SUB        104A
PRINT_OP_SUBQ       FA0
PRINT_SIZE_BYTE     114C
PRINT_SIZE_LONG     116C
PRINT_SIZE_WORD     115C
PRINT_TO_BUFFER     E6A
P_INVALID_OP        11A0
P_OP_ADD            12B0
P_OP_ADDA           12A8
P_OP_ASL            12CC
P_OP_ASR            12C5
P_OP_BCLR           11D0
P_OP_BCS            125B
P_OP_BGE            1262
P_OP_BLT            1269
P_OP_BRA            1254
P_OP_BVC            1270
P_OP_CMP            1296
P_OP_CMPI           11C8
P_OP_DIVS           1277
P_OP_EOR            128F
P_OP_JSR            1230
P_OP_LEA            1229
P_OP_LSL            12BE
P_OP_LSR            12B7
P_OP_MOVEA_L        11E3
P_OP_MOVEA_W        11FA
P_OP_MOVEB          11D8
P_OP_MOVEM_L        121D
P_OP_MOVEM_W        1211
P_OP_MOVE_L         11EF
P_OP_MOVE_W         1206
P_OP_MULS           129D
P_OP_NEG            1245
P_OP_NOP            1237
P_OP_OR             1282
P_OP_ORI            11C1
P_OP_ROL            12DA
P_OP_ROR            12D3
P_OP_RTS            123E
P_OP_SUB            1288
P_OP_SUBQ           124C
P_SIZE_B            11B5
P_SIZE_L            11BD
P_SIZE_W            11B9
SECOND_3            3
THIRD_3             4
