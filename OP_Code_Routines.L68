000010BC Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/12/2019 4:35:06 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OP Code routines for Disassembler
00000000                             3  * Written by : Daniel Yan
00000000                             4  * Date       : 2/28/2019, Updated 3/12/2019
00000000                             5  
00000000                             6  * Description: Disassembler routines to identify any valid
00000000                             7  * OP code dependent on current supported list.
00000000                             8  *------------------------------------------------------------
00001000                             9    ORG $1000 ; Start at Address $1000
00001000                            10  CUR_OP_CODE DS.W 1  ; Current OP Code Word
00001002                            11  EA_SIZE     DS.B 1
00001003                            12  G_BUFFER    DS.B 80
00001053                            13  B_BUFFER    DS.B 80
000010A3                            14  MNEMONIC    DS.B 1
000010A4                            15  FIRST_3     DS.B 1
000010A5                            16  SECOND_3    DS.B 1
000010A6                            17  THIRD_3     DS.B 1
000010A7                            18  FOURTH_3    DS.B 1
000010A8                            19  
000010A8= 4D4F5645 412E4C00 ...     20  P_OP_MOVEA_L_T  DC.L    'MOVEA.L',0
000010B4= 412E4C00 00000000         21  P_OP_MOVEA_L_A_L DC.L   'A.L',0
000010BC                            22      
000010BC                            23  
000010BC                            24  START
000010BC  49F8 1003                 25      LEA G_BUFFER,A4
000010C0  18BC 0000                 26      MOVE.B #0, (A4)
000010C4                            27      
000010C4                            28      ;MOVE.L (A5)+, D0
000010C4                            29  ************** BUFFER PRINTING/LOADING EXAMPLES *************************************
000010C4                            30      ; Load the message onto A4
000010C4                            31      ;MOVE.L #P_OP_MOVEA_L_T, Arg_AddStrToBuffer_String
000010C4                            32      ;MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer 
000010C4                            33      ;JSR AddStrToBuffer
000010C4                            34      ;LEA G_BUFFER, A4   ; Load the value of the message onto the G_BUFFER
000010C4                            35      ;MOVE.L P_OP_MOVEA_L_T,(A4)+
000010C4                            36      ;MOVE.L P_OP_MOVEA_L_A_L,(A4)+
000010C4                            37      
000010C4                            38  ***************************** Input Tests ********************************************
000010C4                            39      ***GROUP 0 tests**** SUPPORTED: ORI, BCLR (static, dynamic), CMPI
000010C4                            40      ;MOVE.W #%0000000000111100,CUR_OP_CODE      ;ORI TO CCR             SHOULD FAIL
000010C4                            41      ;MOVE.W #%0000000001111100,CUR_OP_CODE      ;ORI TO SR              SHOULD FAIL
000010C4                            42      ;MOVE.W #%0000000010000101,CUR_OP_CODE      ;ORI.W D5               SHOULD PASS
000010C4                            43      ;MOVE.W #%0000001001111100,CUR_OP_CODE      ;ANDI TO CCR            SHOULD FAIL
000010C4                            44      ;MOVE.W #%0000001001111100,CUR_OP_CODE      ;ANDI TO SR             SHOULD FAIL
000010C4                            45      ;MOVE.W #%0000001010000101,CUR_OP_CODE      ;ANDI.W D5              SHOULD FAIL
000010C4                            46      ;MOVE.W #%0000010010000101,CUR_OP_CODE      ;SUBI.W D5              SHOULD FAIL
000010C4                            47      ;MOVE.W #%0000011010000101,CUR_OP_CODE      ;ADDI.W D5              SHOULD FAIL
000010C4                            48      ;MOVE.W #%0000101000111100,CUR_OP_CODE      ;EORI TO CCR            SHOULD FAIL
000010C4                            49      ;MOVE.W #%0000101001111100,CUR_OP_CODE      ;EORI TO SR             SHOULD FAIL
000010C4                            50      ;MOVE.W #%0000101010000101,CUR_OP_CODE      ;EORI.W D5              SHOULD FAIL
000010C4                            51      ;MOVE.W #%0000110010000101,CUR_OP_CODE      ;CMPI.L D5              SHOULD PASS
000010C4                            52      ;MOVE.W #%0000100000000101,CUR_OP_CODE      ;STATIC BTST.B D5       SHOULD FAIL
000010C4                            53      ;MOVE.W #%0000100001000101,CUR_OP_CODE      ;STATIC BCHG.B D5       SHOULD FAIL
000010C4                            54      *MOVE.W #%0000100010000101,CUR_OP_CODE      ;STATIC BCLR D5         SHOULD PASS
000010C4                            55      ;MOVE.W #%0000100011000101,CUR_OP_CODE      ;STATIC BSET.B D5       SHOULD FAIL
000010C4                            56      ;MOVE.W #%0000111100000101,CUR_OP_CODE      ;DYNAMIC BTST.B D7,D5   SHOULD FAIL
000010C4                            57      ;MOVE.W #%0000111101000101,CUR_OP_CODE      ;DYNAMIC BCHG.B,D7,D5   SHOULD FAIL
000010C4                            58      ;MOVE.W #%0000101110000111,CUR_OP_CODE      ;DYNAMIC BCLR.B D7,D5   SHOULD PASS
000010C4                            59      ;MOVE.W #%0000111111000101,CUR_OP_CODE      ;DYNAMIC BSET.B D7,D5   SHOULD FAIL
000010C4                            60      ;MOVE.W #%0000111111001101,CUR_OP_CODE      ;MOVEP.L MEM TO REG, A5 SHOULD FAIL, MADE A SPECIAL CASE FOR DYNAMIC BSET BIT SHIFTING
000010C4                            61          
000010C4                            62      ***GROUP 1 tests**** SUPPORTED: MOVE.B
000010C4                            63      ;MOVE.W #%0001101000000111,CUR_OP_CODE       ;MOVE.B D5,D7           SHOULD PASS
000010C4                            64      
000010C4                            65      ***GROUP 2 tests**** SUPPORTED: MOVEA.L, MOVE.L
000010C4  31FC 2A07 1000            66      MOVE.W #%0010101000000111,CUR_OP_CODE       ;MOVE.L D5,D7           SHOULD PASS
000010CA                            67      ;MOVE.W #%0010101001000111,CUR_OP_CODE       ;MOVEA.L D5,D7          SHOULD PASS
000010CA                            68          
000010CA                            69      ***GROUP 3 tests**** SUPPORTED: MOVEA.W, MOVE.W
000010CA                            70      ;MOVE.W #%0011101000000111,CUR_OP_CODE       ;MOVE.W D5,D7           SHOULD PASS
000010CA                            71      ;MOVE.W #%0011101001000111,CUR_OP_CODE       ;MOVEA.W D5,D7          SHOULD PASS
000010CA                            72      
000010CA                            73      ***CATEGORIZE THESE TESTS INTO APPROPRIATE AREA****************
000010CA                            74      ;MOVE.W #%0000100010000010,CUR_OP_CODE       ;Static BCLR
000010CA                            75      ;MOVE.W #%0000111110001110,CUR_OP_CODE       ;Dynamic BCLR
000010CA                            76      ;MOVE.W #%0000000001000001,CUR_OP_CODE       ;ORI.W D1
000010CA                            77          
000010CA                            78      ;MOVE.W #%0000111110001110,CUR_OP_CODE              ;Dynamic BCLR
000010CA                            79      ;IN HEX $018E. D7 = 110, D6 = 001, D4 = %110, D5 = 7, (A6) = %0000
000010CA                            80      ;MOVE.W #%0000100010001110,CUR_OP_CODE              ;Static BCLR
000010CA                            81      ;IN HEX $018E. D7 = 110, D6 = 001, D4 = %110, D5 = 7, (A6) = %0000
000010CA                            82     
000010CA                            83      ;MOVE.W  #$018E,CUR_OP_CODE                        ;Dynamic BCLR in hex
000010CA                            84      ;MOVE.W  #$02FF,CUR_OP_CODE                         ;INVALID_OP code
000010CA                            85      ;MOVE.W #%0000110001010111,CUR_OP_CODE
000010CA                            86      ;MOVE.W #%0010011001001101,CUR_OP_CODE                       ;MOVEA  
000010CA                            87       ;MOVE.W #%0010001001001101,CUR_OP_CODE              ;MOVEA.L A5,A1
000010CA                            88      ;MOVE.W CUR_OP_CODE,(A6)
000010CA                            89      ;MOVE.W #$264D
000010CA                            90      ;Expected values:
000010CA                            91      ;D7, DST REG:   011
000010CA                            92      ;D6, DST MODE:  001
000010CA                            93      ;D5, SRC REG:   101
000010CA                            94      ;D4, SRC MODE:  001
000010CA                            95      ;CHECK IF DST MODE IS %111 or SRC MODE IS %111 for MOVE
000010CA                            96      ;(A3), DST TRAIL:  001
000010CA                            97      ;(A2), SRC TRAIL: ONLY FOR MOVE
000010CA                            98      ;MOVE.W #%0010000000001101,CUR_OP_CODE              ;MOVE.L A5,A1
000010CA                            99      ;MOVE.W #%0011011001001101,CUR_OP_CODE              ;MOVEA.W A5,A1
000010CA                           100      ;MOVE.W #%1001011001111101,CUR_OP_CODE               ;MOVE TO TEST PARSE_EA_CONSTANT_BITS
000010CA                           101      ;MOVE.W #%0011000000001101,CUR_OP_CODE              ;MOVE.W A5,A1
000010CA                           102      ;MOVE.W #%0000000001000001,CUR_OP_CODE              ;ORI.W D1
000010CA                           103      ;MOVE.W CUR_OP_CODE,A6                              ;Loading memory space to address register
000010CA                           104      ;MOVE.W CUR_OP_CODE,(A6)                            ;Loading memory value to address value
000010CA                           105      ***CATEGORIZE THESE TESTS INTO APPROPRIATE AREA***************
000010CA                           106      
000010CA                           107      
000010CA                           108      ****GROUP 4 tests**** SUPPORTED: LEA, JSR, RTS, NEG, MOVEM
000010CA                           109      ;MOVE.W #$4E75,CUR_OP_CODE                            ;RTS
000010CA                           110      ;MOVE.W #$4E71,CUR_OP_CODE                            ;NOP
000010CA                           111      ;MOVE.W #$4415,CUR_OP_CODE                            ;NEG.L D5
000010CA                           112      ;MOVE.W #$43CC,CUR_OP_CODE                            ;LEA A1,A6
000010CA                           113      ;MOVE.W #%0100100010001110,CUR_OP_CODE
000010CA                           114      ;MOVE.W #$488E,CUR_OP_CODE                            ;MOVEM.W Reg to Mem, A6
000010CA                           115      ;MOVE.W #$4C8E,CUR_OP_CODE                            ;MOVEM.W Mem to Reg, A6
000010CA                           116      ;MOVE.W #$4E95,CUR_OP_CODE                            ;JSR (A5)               
000010CA                           117      ****GROUP 5 tests****
000010CA                           118      ;MOVE.W #%0101111110001111
000010CA                           119      
000010CA                           120      *****GROUP 5 TESTS**** SUPPORTED: SUBQ
000010CA                           121      ;#%0101111100000101, SUBQ.B D5
000010CA                           122      ;MOVE.W #$5F05,CUR_OP_CODE ; for SUBQ.B D5
000010CA                           123      ;#%0101111110001110, SUBQ.L A6 
000010CA                           124      ;MOVE.W #$5F8E,CUR_OP_CODE
000010CA                           125      ******GROUP 5 VALIDATION TESTS**********
000010CA                           126      ;MOVE.W #%0101111000001110,CUR_OP_CODE  ; ADDQ
000010CA                           127      ;MOVE.W #%0101010011000110,CUR_OP_CODE ; Scc
000010CA                           128      ;MOVE.W #%0101010011001110,CUR_OP_CODE ; DBcc
000010CA                           129     
000010CA                           130      *****GROUP 6 TESTS********* SUPPORTED: BCS,BGE,BLT,BVC
000010CA                           131      ; DISPLACEMENT, $00 is 16 bits, $FF is 32 bits
000010CA                           132      ; DISPLACEMENT = Last 8 bits
000010CA                           133      ;MOVE.W #%0110000001010101,CUR_OP_CODE   ;BRA
000010CA                           134      ;MOVE.W #%0110010100000001,CUR_OP_CODE   ;BCS
000010CA                           135      ;MOVE.W #%0110110001010100,CUR_OP_CODE   ;BGE
000010CA                           136      ;MOVE.W #%0110110110101010,CUR_OP_CODE   ;BLT
000010CA                           137      ;MOVE.W #%0110100001010100,CUR_OP_CODE   ;BVC
000010CA                           138      
000010CA                           139      *****GROUP 7 TESTS**********        ;Should be ALL INVALID
000010CA                           140      
000010CA                           141      *****GROUP 8 TESTS********** SUPPORTED: DIVS, OR
000010CA                           142      
000010CA                           143      *****GROUP 9 TESTS********** SUPPORTED: SUB
000010CA                           144      
000010CA                           145      *****GROUP A TESTS**********        ;Should be ALL INVALID
000010CA                           146      
000010CA                           147      *****GROUP B TESTS********** SUPPORTED: EOR, CMP
000010CA                           148      
000010CA                           149      *****GROUP C TESTS********** SUPPORTED: MULS
000010CA                           150      
000010CA                           151      *****GROUP D TESTS********** SUPPORTED: ADD, ADDA
000010CA                           152      
000010CA                           153      *****GROUP E TESTS********** SUPPORTED: LSX, ASX, ROX
000010CA                           154      
000010CA                           155      *****GROUP F TESTS**********        ;Should be ALL INVALID
000010CA                           156      
000010CA                           157      
000010CA                           158      
000010CA                           159  ************************************************************************************
000010CA                           160  * PRINTING BUFFER FUNCTION HAS BEEN FINISHED
000010CA                           161  *-----------------------------------------------------------
000010CA                           162  *First Nibble Values (15-12)
000010CA                           163  *Value                  Operations
000010CA                           164  *$0                     GROUP_0: ORI,BCLR (static and dynamic),CMPI --- DONE, need validation testing
000010CA                           165  *$1                     GROUP_1: MOVE.B                             --- DONE, need validation testing
000010CA                           166  *$2                     GROUP_2: MOVE.L, MOVEA.L                    --- DONE, need validation testing
000010CA                           167  *$3                     GROUP_3: MOVE.W, MOVEA.W                    --- Partial, needs trailing bits
000010CA                           168  *$4                     GROUP_4: LEA,JSR,RTS,NEG,MOVEM              --- Partial, needs SIZE print for NEG, MOVE
000010CA                           169  *$5                     GROUP_5: SUBQ                               --- Partial, needs SIZE pri
000010CA                           170  *$6                     GROUP_6: Bcc(BCS,BGE,BLT,BVC), BRA          --- Not started
000010CA                           171  *$7                     GROUP_7: INVALID_OP                         --- DONE
000010CA                           172  *$8                     GROUP_8: DIVS, OR                           --- Not started
000010CA                           173  *$9                     GROUP_9: SUB                                --- Not started
000010CA                           174  *$A                     GROUP_A: INVALID_OP                         --- DONE
000010CA                           175  *$B                     GROUP_B: EOR, CMP                           --- Not started
000010CA                           176  *$C                     GROUP_C: MULS                               --- Not started
000010CA                           177  *$D                     GROUP_D: ADD, ADDA                          --- Not started
000010CA                           178  *$E                     GROUP_E: LSR, LSL, ASR, ASL, ROL, ROR       --- Not started
000010CA                           179  *$F                     GROUP_F: INVALID_OP                         --- DONE
000010CA                           180  
000010CA                           181  
000010CA                           182  * OP_JSR_Routine
000010CA                           183  **********************************************************************************
000010CA                           184  * Description: Catalog all supported OP codes into groupings based on their hex
000010CA                           185  * values. Sort the supported OP codes by looking at the first nibble for their
000010CA                           186  * grouping value. Call underlying subroutines for further identification of the
000010CA                           187  * op code.
000010CA                           188  *
000010CA                           189  * Registers used: A6,D0,D1 
000010CA                           190  *
000010CA                           191  * Precondition: Instruction set (size Word) has been loaded in the appropriate
000010CA                           192  * address to be parsed and read.
000010CA                           193  
000010CA                           194  * Postcondition: OP code has been identified as either valid or invalid. If it is
000010CA                           195  * valid, it is stored into A6 and EA parsing methods are called to pass needed
000010CA                           196  * information to EA. If invalid, DATA output will be utilized to indicate so.
000010CA                           197  **********************************************************************************
000010CA                           198  * These valid operand codes refer to the basic supported operand codes
000010CA                           199  * Groups refer to the first nibble value that is supported by the operand
000010CA                           200  LOAD_OP_CODE:
000010CA  3038 1000                201      MOVE.W CUR_OP_CODE,D0
000010CE  4EB9 000010D4            202      JSR OP_JSR_Routine      ;Use the JSR routine to identify the op code
000010D4                           203  OP_JSR_Routine:
000010D4  48E7 C000                204      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
000010D8  720C                     205      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
000010DA  E2A8                     206      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
000010DC                           207  
000010DC                           208  GROUP_0:                ;$0| ORI, BCLR (static and dynamic), CMPI                  
000010DC  B03C 0000                209      CMP.B   #$0,D0                 ;Compare first nibble
000010E0  6600 000C                210      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
000010E4  4EB9 000012FA            211      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
000010EA  6000 010C                212      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000010EE                           213      
000010EE                           214  GROUP_1:                ;$1| MOVE.B
000010EE  B03C 0001                215      CMP.B   #$1,D0                 ;Compare first nibble
000010F2  6600 000C                216      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
000010F6  4EB9 000014C2            217      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
000010FC  6000 00FA                218      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001100                           219  
00001100                           220  GROUP_2:                ;$2| MOVE.L, MOVEA.L
00001100  B03C 0002                221      CMP.B   #$2,D0                 ;Compare first nibble
00001104  6600 000C                222      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
00001108  4EB9 000014EA            223      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
0000110E  6000 00E8                224      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001112                           225  
00001112                           226  GROUP_3:                ;$3| MOVE.W, MOVEA.W
00001112  B03C 0003                227      CMP.B   #$3,D0                 ;Compare first nibble
00001116  6600 000C                228      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
0000111A  4EB9 0000154A            229      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
00001120  6000 00D6                230      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001124                           231  
00001124                           232  GROUP_4:                ;$4| LEA, JSR, RTS, NEG, MOVEM
00001124  B03C 0004                233      CMP.B   #$4,D0                 ;Compare first nibble
00001128  6600 000C                234      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
0000112C  4EB9 000015AA            235      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
00001132  6000 00C4                236      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001136                           237  
00001136                           238  
00001136                           239  GROUP_5:                ;$5| SUBQ
00001136  B03C 0005                240      CMP.B   #$5,D0                 ;Compare first nibble
0000113A  6600 000C                241      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
0000113E  4EB9 000017E2            242      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
00001144  6000 00B2                243      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001148                           244  
00001148                           245  
00001148                           246  GROUP_6:                ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
00001148  B03C 0006                247      CMP.B   #$6,D0                 ;Compare first nibble
0000114C  6600 000C                248      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
00001150  4EB9 00001832            249      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
00001156  6000 00A0                250      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000115A                           251  
0000115A                           252  
0000115A                           253  GROUP_7:                ;$7| Display: DATA, $WXYZ (Unsupported)
0000115A  B03C 0007                254      CMP.B   #$7,D0                 ;Compare first nibble
0000115E  6600 000C                255      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
00001162  4EB9 000018AA            256      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
00001168  6000 008E                257      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000116C                           258  
0000116C                           259  
0000116C                           260  GROUP_8:                ;$8| DIVS, OR
0000116C  B03C 0008                261      CMP.B   #$8,D0                 ;Compare first nibble
00001170  6600 000C                262      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
00001174  4EB9 000018BC            263      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
0000117A  6000 007C                264      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000117E                           265  
0000117E                           266  
0000117E                           267  GROUP_9:                ;$9| SUB
0000117E  B03C 0009                268      CMP.B   #$9,D0                 ;Compare first nibble
00001182  6600 000C                269      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
00001186  4EB9 000018FE            270      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
0000118C  6000 006A                271      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001190                           272  
00001190                           273  
00001190                           274  GROUP_A:                ;$A| Display: DATA, $WXYZ (Unsupported)
00001190  B03C 000A                275      CMP.B   #$A,D0                 ;Compare first nibble
00001194  6600 000C                276      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
00001198  4EB9 0000192C            277      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
0000119E  6000 0058                278      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011A2                           279  
000011A2                           280  
000011A2                           281  GROUP_B:                ;$B| EOR, CMP
000011A2  B03C 000B                282      CMP.B   #$B,D0                 ;Compare first nibble
000011A6  6600 000C                283      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
000011AA  4EB9 00001932            284      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
000011B0  6000 0046                285      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011B4                           286  
000011B4                           287  
000011B4                           288  GROUP_C:                ;$C| MULS
000011B4  B03C 000C                289      CMP.B   #$C,D0                 ;Compare first nibble
000011B8  6600 000C                290      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
000011BC  4EB9 00001982            291      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
000011C2  6000 0034                292      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011C6                           293  
000011C6                           294  
000011C6                           295  GROUP_D:                 ;$D| ADD, ADDA
000011C6  B03C 000D                296      CMP.B   #$D,D0                 ;Compare first nibble
000011CA  6600 000C                297      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
000011CE  4EB9 000019E2            298      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
000011D4  6000 0022                299      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011D8                           300  
000011D8                           301  
000011D8                           302  GROUP_E:                ;$E| LSR, LSL, ASR, ASL, ROL, ROR
000011D8  B03C 000E                303      CMP.B   #$E,D0                 ;Compare first nibble
000011DC  6600 000C                304      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
000011E0  4EB9 00001A10            305      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
000011E6  6000 0010                306      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011EA                           307  
000011EA                           308  
000011EA                           309  GROUP_F:                ;$F| Display: DATA, $WXYZ (Unsupported)
000011EA  B03C 000F                310      CMP.B   #$F,D0                 ;Compare first nibble
000011EE  4EB9 00001B4E            311      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
000011F4  6000 0002                312      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011F8                           313  
000011F8                           314  
000011F8                           315  OP_JSR_DONE:
000011F8  4CDF 0003                316           MOVEM.L (SP)+,D0-D1       ;Recover register D0
000011FC  4EF9 00001B64            317           JMP READ_NEXT_INSTRUCTION
00001202                           318  **********************************************************************************
00001202                           319  
00001202                           320  ********** EA Parsing ************************************************************
00001202                           321  
00001202                           322  * MOVE_LAST_6_BITS_TO_EA
00001202                           323  **********************************************************************************
00001202                           324  * Description: For OP codes with the last 6 bits specified as EA Mode and EA Reg,
00001202                           325  * the last 6 bits will be parsed and moved into the appropriate registers.
00001202                           326  *
00001202                           327  * Registers used: A6,D0,D1,D6,D7 
00001202                           328  
00001202                           329  * Precondition: OP code has been identified with only the last 6 bits for EA,
00001202                           330  * current instruction set is stored into A6.
00001202                           331  
00001202                           332  * Postcondition: Last 6 bits of instruction bit has been isolated and stored. Bits
00001202                           333  * for EA Mode have been stored in D7, Bits for EA Reg been stored in D6.
00001202                           334  **********************************************************************************
00001202                           335  MOVE_LAST_6_BITS_TO_EA:      ;Move last 6 bits from EA field to relevant registers
00001202                           336     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001202  3038 1000                337      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
00001206  323C 000A                338      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
0000120A  E368                     339      LSL.W   D1,D0            ;Truncate to find the last 6 bits
0000120C  E268                     340      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
0000120E  3E00                     341      MOVE.W  D0,D7            ;Move last 6 bits into D7
00001210  323C 0003                342      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
00001214  E26F                     343      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
00001216  3C07                     344      MOVE.W  D7,D6            ;Move the 'upper' 3 bits into D6
00001218  323C 000D                345      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
0000121C  E368                     346      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
0000121E  E268                     347      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001220  3E00                     348      MOVE.W  D0,D7            ;Move the 'lower' 3 bits into D7
00001222                           349     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
00001222  4E75                     350      RTS                      ;Return to stack
00001224                           351      
00001224                           352  * FIND_2_BIT_SIZE_TO_EA
00001224                           353  **********************************************************************************
00001224                           354  * Description: For OP codes with 2 bit size fields, the 2 relevant bits (7-6) will 
00001224                           355  * be parsed and moved to the appropriate registers.
00001224                           356  *
00001224                           357  * Registers used: A6,D0,D1,D5
00001224                           358  *
00001224                           359  * Precondition: OP code has been identified with 2 size bit field for EA, current
00001224                           360  * instruction set for OP code is stored in to A6.
00001224                           361  *
00001224                           362  * Postcondition: 2 bit size field has been isolated and stored into D5.
00001224                           363  **********************************************************************************
00001224                           364  FIND_2_BIT_SIZE_TO_EA:      ;Move the 2 bit size field relevant register
00001224                           365     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
00001224  3038 1000                366      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
00001228  323C 0008                367      MOVE.W   #8,D1          ;Prepare 8 bit shift to D1
0000122C  E368                     368      LSL.W    D1,D0          ;Truncate to find the 2 size bits
0000122E  E268                     369      LSR.W    D1,D0          ;Reposition the bits
00001230  323C 0006                370      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
00001234  E268                     371      LSR.W    D1,D0          ;Truncate to shift 2 bits to a byte
00001236  3800                     372      MOVE.W   D0,D4          ;Move 2 size bits into D5
00001238                           373    ;  MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
00001238  4E75                     374      RTS                     ;Return to stack
0000123A                           375  **********************************************************************************
0000123A                           376  
0000123A                           377  * FIND_3_BIT_REG_TO_EA
0000123A                           378  **********************************************************************************
0000123A                           379  * Description: OP codes with a dynamic 3 bit register in bits 11-9 will be parsed
0000123A                           380  * and have those 3 bits isolated and moved to the appropriate registers.
0000123A                           381  *
0000123A                           382  * Registers used: A6,D0,D1,D5
0000123A                           383  *
0000123A                           384  * Precondition: OP code has been identified with a dynamic 3 bit register in bits
0000123A                           385  * 11-9.
0000123A                           386  *
0000123A                           387  * Postcondition: 3 bit dynamic register has been isolated and stored into D4.
0000123A                           388  **********************************************************************************
0000123A                           389  FIND_3_BIT_REG_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
0000123A                           390     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
0000123A  3038 1000                391      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
0000123E  323C 0004                392      MOVE.W   #4,D1          ;Prepare 4 bit shift to D1
00001242  E368                     393      LSL.W    D1,D0          ;Truncate to find the 2 size bits
00001244  E268                     394      LSR.W    D1,D0          ;Reposition the bits
00001246  323C 0009                395      MOVE.W   #9,D1          ;Prepare 9 bit shift to D1
0000124A  E268                     396      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
0000124C  3A00                     397      MOVE.W   D0,D5          ;Move 3 register bits into D4
0000124E                           398     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
0000124E  4E75                     399      RTS                     ;Return to stack
00001250                           400  **********************************************************************************
00001250                           401  
00001250                           402  * MOVE_AND_MOVEA_PARSE_EA
00001250                           403  **********************************************************************************
00001250                           404  * Description: Special parsing for the SRC and DST Mode/Reg for MOVE/MOVE
00001250                           405  *
00001250                           406  * Registers used: A6,D0,D1,D7,D6,D5,D4
00001250                           407  *
00001250                           408  * Precondition: OP code has been identified with either MOVE or MOVEA
00001250                           409  *
00001250                           410  * Postcondition: Store all relevant EA bits into associated register.
00001250                           411  **********************************************************************************
00001250                           412  MOVE_AND_MOVEA_PARSE_EA:       ;Move the 3 bit dynamic register bits to proper register
00001250                           413     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001250  3038 1000                414      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
00001254  323C 000A                415      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
00001258  E368                     416      LSL.W   D1,D0            ;Truncate to find the last 6 bits
0000125A  E268                     417      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
0000125C  3E00                     418      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
0000125E  323C 0003                419      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
00001262  E26F                     420      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
00001264  3A07                     421      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
00001266  323C 000D                422      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
0000126A  E368                     423      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
0000126C  E268                     424      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
0000126E  3800                     425      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
00001270                           426      **************MOVING SOURCE*********** TO BE DONE LATER
00001270                           427      ; MOVE.W #%0011 011 001 001 101,(A6)              ;MOVEA.W A5,A3
00001270                           428      ; MOVE.W #%0010 011 001 001 101,D0                ;MOVEA.L A5,A3
00001270                           429       ;Expected values:
00001270                           430      ;D7, DST REG:   011
00001270                           431      ;D6, DST MODE:  001
00001270                           432      ;D5, SRC MODE:  001
00001270                           433      ;D4, SRC REG:   101
00001270                           434      ;00011001
00001270  3038 1000                435      MOVE.W CUR_OP_CODE,D0     ;Move current OP code into D0     
00001274  323C 0004                436      MOVE.W  #4,D1             ;Prepare 4 bit shift to D1
00001278  E368                     437      LSL.W   D1,D0             ;Truncate to find bits 11-6
0000127A  E268                     438      LSR.W   D1,D0             ;Reposition bits
0000127C  323C 0006                439      MOVE.W  #6,D1             ;Prepare 6 bit shift to D1
00001280  E268                     440      LSR.W   D1,D0             ;Truncate the SRC Reg/Mode bits
00001282  323C 0003                441      MOVE.W  #3,D1             ;Prepare a 3 bit shift to D1 for DST Reg/Mode
00001286  3C00                     442      MOVE.W  D0,D6             ;Copy over the current 6 bits to D6
00001288  E268                     443      LSR.W   D1,D0             ;Truncate DST Mode  
0000128A  3E00                     444      MOVE.W  D0,D7             ;Move DST Reg to D7
0000128C  323C 000D                445      MOVE.W  #13,D1             
00001290  E36E                     446      LSL.W   D1,D6             ;Truncate 13 bits in D6
00001292  E26E                     447      LSR.W   D1,D6             ;Reposition D6
00001294                           448                                ;D6 now contains the DST Reg
00001294                           449     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
00001294  4E75                     450      RTS                     ;Return to stack
00001296                           451  **********************************************************************************
00001296                           452  
00001296                           453  *FIND_TRAILING_BITS_TO_EA
00001296                           454  **********************************************************************************
00001296                           455  FIND_TRAILING_BITS_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
00001296                           456     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
00001296  3038 1000                457      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
0000129A  323C 0007                458      MOVE.W   #7,D1          ;Prepare 4 bit shift to D1
0000129E  E368                     459      LSL.W    D1,D0          ;Truncate to find the 2 size bits
000012A0  E268                     460      LSR.W    D1,D0          ;Reposition the bits
000012A2  323C 0006                461      MOVE.W   #6,D1          ;Prepare 9 bit shift to D1
000012A6  E268                     462      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
000012A8  3680                     463      MOVE.W   D0,(A3)          ;Move 3 register bits into D4
000012AA                           464     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
000012AA  4E75                     465      RTS                    ;Return to stack
000012AC                           466  **********************************************************************************
000012AC                           467  
000012AC                           468  *PARSE_EA_CONSTANT_BITS
000012AC                           469  **********************************************************************************
000012AC                           470  * Definition: Uses CUR_OP_CODE to shift the proper bits into the global constants
000012AC                           471  * used for EA (MNEMONIC,FIRST_3,SECOND_3,THIRD_3,FOURTH_3. Where MNEMONIC refers
000012AC                           472  * to the first 4 bits of CUR_OP_CODE (15-12), FIRST_3 refers to the first group
000012AC                           473  * of 3 bits (11-9), SECOND_3 refers to the second group of 3 bits (8-6), THIRD_3
000012AC                           474  * refers to the third group of 3 bits (5-3), and FOURTH_3 refers to the fourth
000012AC                           475  * group of 3 bits (2-0). Shifts CUR_OP_CODE bits to initialize constants.
000012AC                           476  *
000012AC                           477  * Registers used: D0,D1
000012AC                           478  *
000012AC                           479  * Precondition: CUR_OP_CODE has been set with an 4 hex instruction set
000012AC                           480  * 
000012AC                           481  * Postcondition: MNEMONIC, FIRST_3, SECOND_3, THIRD_3, FOURTH_3 have been set
000012AC                           482  * to the corresponding values.
000012AC                           483  **********************************************************************************
000012AC                           484  PARSE_EA_CONSTANT_BITS:
000012AC                           485      *MNEMONIC SHIFT
000012AC  3038 1000                486      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D0
000012B0  323C 000C                487      MOVE.W #12,D1               ;Prepare a bit shift of 12 into D1
000012B4  E268                     488      LSR.W D1,D0                 ;Shift 12 bits from D0 right
000012B6  11C0 10A3                489      MOVE.B D0,MNEMONIC          ;Set MNEMONIC to D0
000012BA                           490      *FIRST_3 SHIFT
000012BA  323C 0009                491      MOVE.W #9,D1                ;Prepare a bit shift of 9 into D1
000012BE  3038 1000                492      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012C2  E948                     493      LSL.W #4,D0                 ;Shift out bits 15-12 in D0
000012C4  E848                     494      LSR.W #4,D0                 ;Reposition D0
000012C6  E268                     495      LSR.W  D1,D0                ;Shift D0 9 bits right
000012C8  11C0 10A4                496      MOVE.B D0,FIRST_3           ;Set FIRST_3 to D0
000012CC                           497      *SECOND_3 SHIFT
000012CC  3038 1000                498      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012D0  EF48                     499      LSL.W #7,D0                 ;Shift out bits 15-9 in D0
000012D2  EE48                     500      LSR.W #7,D0                 ;Reposition D0
000012D4  EC48                     501      LSR.W #6,D0                 ;Shift D0 6 bits right
000012D6  11C0 10A5                502      MOVE.B D0,SECOND_3          ;Set SECOND_3 to D0
000012DA                           503      *THIRD_3 SHIFT
000012DA  3038 1000                504      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012DE  E648                     505      LSR.W #3,D0                 ;Shift D0 3 bits right
000012E0  323C 000D                506      MOVE.W #13,D1               ;Prepare a 13 bit shift into D1
000012E4  E368                     507      LSL.W D1,D0                 ;Truncate first 13 bits of D0
000012E6  E268                     508      LSR.W D1,D0                 ;Reposition D0
000012E8  11C0 10A6                509      MOVE.B D0,THIRD_3           ;Set THIRD_3 to D0
000012EC                           510      *FOURTH_3 SHIFT
000012EC  3038 1000                511      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012F0  E368                     512      LSL.W D1,D0                 ;Grab the fourth 3-bit group
000012F2  E268                     513      LSR.W D1,D0                 ;Shift D0 back into position
000012F4  11C0 10A7                514      MOVE.B D0,FOURTH_3          ;Set FOURTH_3 to Do
000012F8  4E75                     515      RTS                         ;Return to stack
000012FA                           516  **********************************************************************************
000012FA                           517  ********** End of EA Parsing *****************************************************
000012FA                           518  
000012FA                           519  *******************JMP LABELS ****************************************************
000012FA                           520  * Labelling for group codes will be in the following format
000012FA                           521  
000012FA                           522  * <JMP Labelname>
000012FA                           523  ********************************************************************************
000012FA                           524  * Checking List Order (If more than one value)
000012FA                           525  * Operand1 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
000012FA                           526  * Operand2 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
000012FA                           527  
000012FA                           528  * Where a-b will refer to the bit corresponding bit value in the instruction
000012FA                           529  * format, and a specifier will be attached such as Size, EA Mode, SRC Reg, etc
000012FA                           530  * to clarify what a specific bit range means.
000012FA                           531  * Checking order refers to what order the checks will be performed in. 
000012FA                           532  * Any other code outside of the listed ones will be INVALID_OP.
000012FA                           533  ********************************************************************************
000012FA                           534  
000012FA                           535  ********************************************************************************
000012FA                           536  * Global Field Descriptions
000012FA                           537  * Size Field: Byte = 00 Word = 01 Long = 10
000012FA                           538  * EA Mode: Refer to EA Address Modes
000012FA                           539  * EA Reg: 3-bit input that is mapped to the respective binary value
000012FA                           540  ********************************************************************************
000012FA                           541  
000012FA                           542  * GROUP_0                      
000012FA                           543  ********************************************************************************
000012FA                           544  * Description: Checks for the following listed OP codes to be present or not
000012FA                           545  * Supported OP codes:
000012FA                           546  * ORI: $00, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
000012FA                           547  * CMPI: $0C, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
000012FA                           548  * Dynamic BCLR: $0, 11-9 Register, 8-6 %110, 5-3 EA Mode, 2-0 EA Reg
000012FA                           549  * Static BCLR: $01, 7-6 10, 5-3 EA Mode, 2-0 EA Reg
000012FA                           550  *
000012FA                           551  * Registers used: D0
000012FA                           552  *
000012FA                           553  * Precondition: First nibble has been identified as $0
000012FA                           554  *
000012FA                           555  * Postcondition: Parses proper OP code with a nibble value of $0 or finds an
000012FA                           556  * invalid OP code. After a successful parse loading for EA values will be done
000012FA                           557  * through a subroutine.
000012FA                           558  * 
000012FA                           559  * Unsupported OP codes:
000012FA                           560  * ORI_TO_CCR, ORI_TO_SR, ANDI_TO_CCR, ANDI_TO_SR, ANDI, SUBI, ADDI, EORI_TO_CCR
000012FA                           561  * EORI_TO_SR, EORI, STATIC_BTST, STATIC_BCHG, STATIC_BSET, DYNAMIC_BTST,
000012FA                           562  * DYNAMIC_BCHG, DYNAMIC_BSET, MOVEP 
000012FA                           563  ********************************************************************************
000012FA                           564  C_GROUP_0:
000012FA  48E7 C000                565      MOVEM.L D0-D1, -(SP)        ;Backup registers
000012FE                           566  *Unsupported OP codes that are fully static in bits
000012FE                           567  CHECK_OP_ORI_TO_CCR:
000012FE  3038 1000                568      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
00001302  B07C 003C                569      CMP.W #$003C,D0            ;Compare the direct full bits
00001306  6700 01B0                570      BEQ GROUP0_INVALID         ;INVALID OP code found
0000130A  6600 0002                571      BNE CHECK_OP_ORI_TO_SR     ;Check next routine
0000130E                           572      
0000130E                           573  CHECK_OP_ORI_TO_SR:
0000130E  3038 1000                574      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
00001312  B07C 007C                575      CMP.W #$007C,D0            ;Compare the direct full bits
00001316  6700 01A0                576      BEQ GROUP0_INVALID         ;INVALID OP code found
0000131A  6600 0002                577      BNE CHECK_OP_ANDI_TO_CCR   ;Check next routine
0000131E                           578      
0000131E                           579  CHECK_OP_ANDI_TO_CCR:
0000131E  3038 1000                580      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
00001322  B07C 023C                581      CMP.W #$023C,D0            ;Compare the direct full bits
00001326  6700 0190                582      BEQ GROUP0_INVALID         ;INVALID OP code found
0000132A  6600 0002                583      BNE CHECK_OP_ANDI_TO_SR    ;Check next routine
0000132E                           584      
0000132E                           585  CHECK_OP_ANDI_TO_SR:
0000132E  3038 1000                586      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
00001332  B07C 027C                587      CMP.W #$027C,D0            ;Compare the direct full bits
00001336  6700 0180                588      BEQ GROUP0_INVALID         ;INVALID OP code found
0000133A  6600 0022                589      BNE CHECK_OP_ANDI          ;Check next routine
0000133E                           590  
0000133E                           591  
0000133E                           592  CHECK_OP_EORI_TO_CCR:
0000133E  3038 1000                593      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
00001342  B07C 0A3C                594      CMP.W #$0A3C,D0            ;Compare the direct full bits
00001346  6700 0170                595      BEQ GROUP0_INVALID         ;INVALID OP code found
0000134A  6600 0002                596      BNE CHECK_OP_EORI_TO_SR    ;Check next routine
0000134E                           597      
0000134E                           598  CHECK_OP_EORI_TO_SR:
0000134E  3038 1000                599      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
00001352  B07C 0A7C                600      CMP.W #$0A7C,D0            ;Compare the direct full bits
00001356  6700 0160                601      BEQ GROUP0_INVALID         ;INVALID OP code found
0000135A  6600 0002                602      BNE CHECK_OP_ANDI          ;Check next routine
0000135E                           603      
0000135E                           604  *Unsupported OP codes to check with partial static bits
0000135E                           605  CHECK_OP_ANDI:
0000135E  3038 1000                606      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
00001362  0240 FF00                607      ANDI.W #$FF00,D0           ;Mask relevant bits to D0
00001366  B07C 0200                608      CMP.W #$0200,D0            ;Compare the appropriate masked bits
0000136A  6700 014C                609      BEQ GROUP0_INVALID         ;INVALID OP code found
0000136E  6600 0002                610      BNE CHECK_OP_SUBI          ;Check next routine
00001372                           611      
00001372                           612  CHECK_OP_SUBI:
00001372  3038 1000                613      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
00001376  0240 FF00                614      ANDI.W #$FF00,D0           ;Mask relevant bits to D0
0000137A  B07C 0400                615      CMP.W #$0400,D0            ;Compare the appropriate masked bits
0000137E  6700 0138                616      BEQ GROUP0_INVALID         ;INVALID OP code found
00001382  6600 0002                617      BNE CHECK_OP_ADDI          ;Check next routine
00001386                           618  
00001386                           619  CHECK_OP_ADDI:
00001386  3038 1000                620      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
0000138A  0240 FF00                621      ANDI.W #$FF00,D0           ;Mask relevant bits to D0
0000138E  B07C 0600                622      CMP.W #$0600,D0            ;Compare the appropriate masked bits
00001392  6700 0124                623      BEQ GROUP0_INVALID         ;INVALID OP code found
00001396  6600 0002                624      BNE CHECK_OP_EORI          ;Check next routine 
0000139A                           625  
0000139A                           626  CHECK_OP_EORI:
0000139A  3038 1000                627      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
0000139E  0240 FF00                628      ANDI.W #$FF00,D0           ;Mask relevant bits to D0
000013A2  B07C 0A00                629      CMP.W #$0A00,D0            ;Compare the appropriate masked bits
000013A6  6700 0110                630      BEQ GROUP0_INVALID         ;INVALID OP code found
000013AA  6600 0002                631      BNE CHECK_OP_STATIC_BTST   ;Check next routine
000013AE                           632      
000013AE                           633  CHECK_OP_STATIC_BTST:
000013AE  3038 1000                634      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
000013B2  0240 FFC0                635      ANDI.W #$FFC0,D0           ;Mask relevant bits to D0
000013B6  B07C 0800                636      CMP.W #$0800,D0            ;Compare the appropriate masked bits
000013BA  6700 00FC                637      BEQ GROUP0_INVALID         ;INVALID OP code found
000013BE  6600 0002                638      BNE CHECK_OP_STATIC_BCHG   ;Check next routine
000013C2                           639      
000013C2                           640  CHECK_OP_STATIC_BCHG:
000013C2  3038 1000                641      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
000013C6  0240 FFC0                642      ANDI.W #$FFC0,D0           ;Mask relevant bits to D0
000013CA  B07C 0840                643      CMP.W #$0840,D0            ;Compare the appropriate masked bits
000013CE  6700 00E8                644      BEQ GROUP0_INVALID         ;INVALID OP code found
000013D2  6600 0002                645      BNE CHECK_OP_STATIC_BSET   ;Check next routine
000013D6                           646  
000013D6                           647  CHECK_OP_STATIC_BSET:
000013D6  3038 1000                648      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
000013DA  0240 FFC0                649      ANDI.W #$FFC0,D0           ;Mask relevant bits to D0
000013DE  B07C 08C0                650      CMP.W #$08C0,D0            ;Compare the appropriate masked bits
000013E2  6700 00D4                651      BEQ GROUP0_INVALID         ;INVALID OP code found   
000013E6  6600 0002                652      BNE CHECK_OP_DYNAMIC_BTST  ;Check next routine
000013EA                           653  
000013EA                           654  CHECK_OP_DYNAMIC_BTST:
000013EA  3038 1000                655      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
000013EE  0240 F1C0                656      ANDI.W #$F1C0,D0           ;Mask relevant bits to D0
000013F2  B07C 0100                657      CMP.W #$0100,D0            ;Compare the appropriate masked bits
000013F6  6700 00C0                658      BEQ GROUP0_INVALID         ;INVALID OP code found
000013FA  6600 0002                659      BNE CHECK_OP_DYNAMIC_BCHG  ;Check next routine
000013FE                           660  
000013FE                           661  CHECK_OP_DYNAMIC_BCHG:
000013FE  3038 1000                662      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001402  0240 F1C0                663      ANDI.W #$F1C0,D0            ;Mask relevant bits to D0
00001406  B07C 0140                664      CMP.W #$0140,D0             ;Compare the appropriate masked bits 
0000140A  6700 00AC                665      BEQ GROUP0_INVALID          ;INVALID OP code found
0000140E  6600 0002                666      BNE CHECK_OP_DYNAMIC_BSET   ;Check next routine
00001412                           667      
00001412                           668  CHECK_OP_DYNAMIC_BSET:
00001412                           669                                  ;This is a special case check for MOVEP
00001412  3038 1000                670      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D0
00001416  323C 000A                671      MOVE.W  #10,D1              ;Prepare a 10-bit shift
0000141A  E368                     672      LSL.W   D1,D0               ;Shift out 10 bits left 
0000141C  E268                     673      LSR.W   D1,D0               ;Reposition D0 for last 6 bits
0000141E  E648                     674      LSR.W   #3,D0               ;Shift out 3 bits right, D0 contains bits 5-3
00001420  B07C 0001                675      CMP.W   #$1,D0              ;Compare bits to D0
00001424  6700 0016                676      BEQ     CHECK_OP_MOVEP      ;If bits are $1 then it's addressing, goto MOVEP
00001428                           677                                  ;Standard bitmask check                         
00001428  3038 1000                678      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D0
0000142C  0240 F1C0                679      ANDI.W  #$F1C0,D0           ;Mask relevant bits to D0
00001430  B07C 01C0                680      CMP.W   #$01C0,D0           ;Compare the appropriate masked bits 
00001434  6700 0082                681      BEQ     GROUP0_INVALID      ;INVALID OP code found
00001438  6600 0002                682      BNE     CHECK_OP_MOVEP      ;Check next routine
0000143C                           683      
0000143C                           684  CHECK_OP_MOVEP:
0000143C  3038 1000                685      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001440  0240 F138                686      ANDI.W #$F138,D0            ;Mask relevant bits to D0
00001444  B07C 0108                687      CMP.W #$0108,D0             ;Compare the appropriate masked bits
00001448  6700 070A                688      BEQ INVALID_OP              ;INVALID OP code found
0000144C  6600 0002                689      BNE CHECK_OP_ORI            ;Check next routine
00001450                           690  
00001450                           691  *Supported OP code checks
00001450                           692  CHECK_OP_ORI:
00001450  3038 1000                693      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001454  0240 FF00                694      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001458  B07C 0000                695      CMP.W   #$0000,D0               ;Compare the appropriate masked bits     
0000145C  6600 000C                696      BNE     CHECK_OP_CMPI           ;Branch to next comparison if not equal
00001460  4EB9 00001B8E            697      JSR     PRINT_OP_ORI            ;Print the OP code if equal    
00001466  6000 0054                698      BRA     GROUP0_SUCCESS          ;Finish routine
0000146A                           699      
0000146A                           700  CHECK_OP_CMPI:
0000146A  3038 1000                701      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000146E  0240 FF00                702      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001472  B07C 0C00                703      CMP.W   #$0C00,D0               ;Compare the appropriate masked bits   
00001476  6600 000C                704      BNE     CHECK_OP_STATIC_BCLR    ;Branch to next comparison if not equal       
0000147A  4EB9 00001B9C            705      JSR     PRINT_OP_CMPI           ;Print the OP code if equal
00001480  6000 003A                706      BRA     GROUP0_SUCCESS          ;Finish routine
00001484                           707      
00001484                           708  CHECK_OP_STATIC_BCLR:
00001484  3038 1000                709      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001488  0240 FF00                710      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
0000148C  B07C 0800                711      CMP.W   #$0800,D0               ;Compare the appropriate masked bits
00001490  6600 000C                712      BNE     CHECK_OP_DYNAMIC_BCLR   ;Branch to next comparison if not equal
00001494  4EB9 00001BAA            713      JSR     PRINT_OP_STATIC_BCLR    ;Print the OP code if equal
0000149A  6000 0020                714      BRA     GROUP0_SUCCESS          ;Finish routine
0000149E                           715      
0000149E                           716  CHECK_OP_DYNAMIC_BCLR:
0000149E  3038 1000                717      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000014A2  0240 0180                718      ANDI.W  #%0000000110000000,D0   ;Do a direct binary bitmask to see which bits are needed
000014A6  B07C 0180                719      CMP.W   #%0000000110000000,D0   ;Compare the expected binary value
000014AA  6600 000C                720      BNE     GROUP0_INVALID          ;If not equal this must be an invalid OP code
000014AE  4EB9 00001BB8            721      JSR     PRINT_OP_DYNAMIC_BCLR   ;Print the OP code if equal
000014B4  6000 0006                722      BRA     GROUP0_SUCCESS          ;Finish routine
000014B8                           723  
000014B8                           724  GROUP0_INVALID:                     ;Checks have been finished, invalid OP code has been found
000014B8  6000 069A                725      BRA INVALID_OP                  ;INVALID OP code found
000014BC                           726      
000014BC                           727  GROUP0_SUCCESS:                     ;Checks have been finished,a valid OP code has been found
000014BC  4CDF 0003                728      MOVEM.L (SP)+,D0-D1             ;Restore registers
000014C0  4E75                     729      RTS                             ;Return to stack
000014C2                           730      
000014C2                           731  * GROUP_1                      
000014C2                           732  ********************************************************************************
000014C2                           733  * Supported OP code:
000014C2                           734  * MOVE.B: $1, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000014C2                           735  ********************************************************************************
000014C2                           736  C_GROUP_1:
000014C2  48E7 C000                737      MOVEM.L D0-D1,-(SP)             ;Save registers to stack
000014C6                           738  
000014C6                           739  CHECK_OP_MOVE_B:
000014C6  3038 1000                740      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0          
000014CA  0240 F000                741      ANDI.W  #$F000,D0               ;Mask relevant bits to D0
000014CE  B07C 1000                742      CMP.W   #$1000,D0               ;Compare the appropriate masked bits 
000014D2  6600 000C                743      BNE     GROUP1_INVALID          ;Invalid OP code has been found
000014D6  4EB9 00001BC6            744      JSR     PRINT_OP_MOVEB          ;Print the OP code if equal
000014DC  6000 0006                745      BRA     GROUP1_SUCCESS          ;Finish routine
000014E0                           746      
000014E0                           747  GROUP1_INVALID:
000014E0  6000 0672                748      BRA INVALID_OP                  ;Invalid OP code found
000014E4                           749      
000014E4                           750  GROUP1_SUCCESS:
000014E4  4CDF 0003                751      MOVEM.L (SP)+,D0-D1             ;Restore register
000014E8  4E75                     752      RTS                             ;Return to stack
000014EA                           753  * GROUP_2
000014EA                           754  ********************************************************************************
000014EA                           755  * Supported OP codes:
000014EA                           756  * MOVEA.L: $2, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
000014EA                           757  * MOVE.L: $2, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000014EA                           758  ********************************************************************************
000014EA                           759  C_GROUP_2:
000014EA  48E7 E000                760      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
000014EE                           761  
000014EE                           762  CHECK_OP_MOVEA_L:
000014EE  3038 1000                763      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0  
000014F2  0240 F000                764      ANDI.W #$F000,D0                ;Mask relevant bits to D0
000014F6  B07C 2000                765      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
000014FA  4EF9 00001500            766      JMP FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
00001500                           767      
00001500                           768  FIND_MOVEA_L_DIFFERENCE:            ;Finds difference between MOVEA and MOVE
00001500  3038 1000                769      MOVE.W   CUR_OP_CODE,D0         ;Move current OP code into D0
00001504  323C 0007                770      MOVE.W   #7,D1                  ;Prepare 7 bit shift to D1
00001508  E368                     771      LSL.W    D1,D0                  ;Truncate to find the 3 address mode bits
0000150A  E268                     772      LSR.W    D1,D0                  ;Reposition the bits
0000150C  323C 0006                773      MOVE.W   #6,D1                  ;Prepare 6 bit shift to D1
00001510  E268                     774      LSR.W    D1,D0                  ;Truncate to shift 3 bits to a register
00001512  3400                     775      MOVE.W   D0,D2                  ;Move 3 address mode bits into D6
00001514  B47C 0001                776      CMP.W   #$1,D2                  ;Check if the address mode value is MOVEA
00001518  6600 000C                777      BNE     CHECK_OP_MOVE_L         ;Branch if not equal to check MOVE
0000151C  4EB9 00001BD4            778      JSR     PRINT_OP_MOVEA_L        ;Print the OP code if it's a match
00001522  6000 0020                779      BRA     GROUP2_SUCCESS          ;Finish routine
00001526                           780      
00001526                           781      
00001526                           782  CHECK_OP_MOVE_L:
00001526  3038 1000                783      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000152A  0240 F000                784      ANDI.W #$F000,D0                ;Mask relevant bits to D0
0000152E  B07C 2000                785      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
00001532  6600 000C                786      BNE GROUP2_INVALID              ;If not equal, OP code is invalid
00001536  4EB9 00001BE2            787      JSR PRINT_OP_MOVE_L             ;Print out MOVE.L
0000153C  6000 0006                788      BRA GROUP2_SUCCESS              ;Finish routine
00001540                           789      
00001540                           790  GROUP2_INVALID:    
00001540  6000 0612                791      BRA INVALID_OP                  ;Invalid OP code found
00001544                           792      
00001544                           793  GROUP2_SUCCESS:
00001544  4CDF 0003                794      MOVEM.L (SP)+,D0-D1             ;Restore register
00001548  4E75                     795      RTS                             ;Return to stack
0000154A                           796  * GROUP_3
0000154A                           797  ********************************************************************************
0000154A                           798  * Supported OP codes:
0000154A                           799  * MOVEA.W: $3, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
0000154A                           800  * MOVE.W: $3, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
0000154A                           801  ********************************************************************************
0000154A                           802  C_GROUP_3:
0000154A  48E7 E000                803      MOVEM.L D0-D2,-(SP)
0000154E                           804  CHECK_OP_MOVEA_W:
0000154E  3038 1000                805      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001552  0240 F000                806      ANDI.W   #$F000,D0
00001556  B07C 3000                807      CMP.W    #$3000,D0
0000155A  4EF9 00001560            808      JMP      FIND_MOVEA_W_DIFFERENCE
00001560                           809  
00001560                           810      
00001560                           811  FIND_MOVEA_W_DIFFERENCE:      ;Finds difference between MOVEA and MOVE
00001560  3038 1000                812      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001564  323C 0007                813      MOVE.W   #7,D1          ;Prepare 7 bit shift to D1
00001568  E368                     814      LSL.W    D1,D0          ;Truncate to find the 3 address mode bits
0000156A  E268                     815      LSR.W    D1,D0          ;Reposition the bits
0000156C  323C 0006                816      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
00001570  E268                     817      LSR.W    D1,D0          ;Truncate to shift 3 bits to a register
00001572  3400                     818      MOVE.W   D0,D2          ;Move 3 address mode bits into D6
00001574  B47C 0001                819      CMP.W    #$1,D2          ;Check if the address mode value is MOVEA
00001578  6600 000C                820      BNE      CHECK_OP_MOVE_W 
0000157C  4EB9 00001BF0            821      JSR      PRINT_OP_MOVEA_W  
00001582  6000 0020                822      BRA      GROUP3_SUCCESS
00001586                           823      
00001586                           824  CHECK_OP_MOVE_W:
00001586  3038 1000                825      MOVE.W   CUR_OP_CODE,D0    ;Move current instruction set into D0
0000158A  0240 F000                826      ANDI.W   #$F000,D0
0000158E  B07C 3000                827      CMP.W    #$3000,D0
00001592  6600 000C                828      BNE      GROUP3_INVALID
00001596  4EB9 00001BFE            829      JSR      PRINT_OP_MOVE_W
0000159C  6000 0006                830      BRA      GROUP3_SUCCESS
000015A0                           831      
000015A0                           832  GROUP3_INVALID:
000015A0  6000 05B2                833      BRA INVALID_OP
000015A4                           834  
000015A4                           835  GROUP3_SUCCESS:
000015A4  4CDF 0007                836      MOVEM.L (SP)+,D0-D2 
000015A8  4E75                     837      RTS
000015AA                           838  
000015AA                           839  * GROUP_4
000015AA                           840  ********************************************************************************
000015AA                           841  * Supported OP codes:
000015AA                           842  * LEA: $4, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
000015AA                           843  * JSR: $4E, 7-6 %10, 5-3 EA Mode, 2-0 EA Reg 
000015AA                           844  * RTS: $4E75
000015AA                           845  * NEG: $44, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
000015AA                           846  * MOVEM: $4, 11 %1, 10 %D, 9-7 %001, 6 S, 5-3 EA Mode, 2-0 EA Reg
000015AA                           847  * %D = 0 , Register to Memory, 1 Memory to Register
000015AA                           848  * Unsupported OP codes: MOVE_FROM_SR, MOVE_TO_CCR, MOVE_TO_SR, NEGX, CLR, NOT
000015AA                           849  * EXT, NBCD, SWAP, PEA, ILLEGAL, TAS, TST, TRAP, LINK, UNLK, MOVE_USP, RESET,
000015AA                           850  * NOP, STOP, RTE, TRAPV, RTR, JMP, CHK
000015AA                           851  ********************************************************************************
000015AA                           852  C_GROUP_4:
000015AA                           853  *Unsupported OP codes to check that are full static bits
000015AA                           854  CHECK_OP_STOP:
000015AA  3038 1000                855      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000015AE  B07C 4E72                856      CMP.W  #$4E72,D0
000015B2  6700 05A0                857      BEQ    INVALID_OP
000015B6  6600 0002                858      BNE    CHECK_OP_RESET
000015BA                           859      
000015BA                           860  CHECK_OP_RESET:
000015BA  3038 1000                861      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000015BE  B07C 4E70                862      CMP.W  #$4E70,D0
000015C2  6700 0590                863      BEQ    INVALID_OP
000015C6  6600 0002                864      BNE    CHECK_OP_NOP
000015CA                           865      
000015CA                           866  CHECK_OP_NOP:
000015CA  3038 1000                867      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000015CE  B07C 4E71                868      CMP.W  #$4E71,D0
000015D2  6700 0580                869      BEQ    INVALID_OP 
000015D6  6600 0002                870      BNE    CHECK_OP_ILLEGAL
000015DA                           871      
000015DA                           872  CHECK_OP_ILLEGAL:
000015DA  3038 1000                873      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000015DE  B07C 4AFC                874      CMP.W  #$4AFC,D0
000015E2  6700 0570                875      BEQ    INVALID_OP
000015E6  6600 0046                876      BNE    CHECK_OP_MOVE_FROM_CCR
000015EA                           877      
000015EA                           878  CHECK_OP_RTE:    
000015EA  3038 1000                879      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000015EE  B07C 4E73                880      CMP.W #$4E73,D0
000015F2  6700 0560                881      BEQ   INVALID_OP
000015F6  6600 0002                882      BNE   CHECK_OP_TRAPV
000015FA                           883      
000015FA                           884  CHECK_OP_TRAPV:
000015FA  3038 1000                885      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000015FE  B07C 4E76                886      CMP.W  #$4E76,D0
00001602  6700 0550                887      BEQ    INVALID_OP
00001606  6600 0002                888      BNE    CHECK_OP_RTR
0000160A                           889      
0000160A                           890  CHECK_OP_RTR:
0000160A  3038 1000                891      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000160E  B07C 4E77                892      CMP.W #$4E77,D0
00001612  6700 0540                893      BEQ    INVALID_OP
00001616  6600 0002                894      BNE    CHECK_OP_MOVE_FROM_SR
0000161A                           895  
0000161A                           896  
0000161A                           897  *Unsupported OP codes to check that have partial static bits
0000161A                           898  CHECK_OP_MOVE_FROM_SR:
0000161A  3038 1000                899      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000161E  0240 FFC0                900      ANDI.W #$FFC0,D0
00001622  B07C 40C0                901      CMP.W  #$40C0,D0
00001626  6700 052C                902      BEQ    INVALID_OP
0000162A  6600 0002                903      BNE    CHECK_OP_MOVE_FROM_CCR
0000162E                           904      
0000162E                           905  CHECK_OP_MOVE_FROM_CCR:
0000162E  3038 1000                906      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001632  0240 FFC0                907      ANDI.W #$FFC0,D0
00001636  B07C 44C0                908      CMP.W  #$44C0,D0
0000163A  6700 0518                909      BEQ    INVALID_OP
0000163E  6600 0002                910      BNE    CHECK_OP_MOVE_TO_SR
00001642                           911      
00001642                           912  CHECK_OP_MOVE_TO_SR:
00001642  3038 1000                913      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001646  0240 FFC0                914      ANDI.W #$FFC0,D0
0000164A  B07C 46C0                915      CMP.W  #$46C0,D0
0000164E  6700 0504                916      BEQ    INVALID_OP
00001652  6600 0002                917      BNE    CHECK_OP_NEGX
00001656                           918      
00001656                           919  CHECK_OP_NEGX:
00001656  3038 1000                920      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000165A  0240 FF00                921      ANDI.W #$FF00,D0
0000165E  B07C 4000                922      CMP.W  #$4000,D0
00001662  6700 04F0                923      BEQ    INVALID_OP
00001666  6600 0002                924      BNE    CHECK_OP_CLR
0000166A                           925      
0000166A                           926  CHECK_OP_CLR:
0000166A  3038 1000                927      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000166E  0240 FF00                928      ANDI.W #$FF00,D0
00001672  B07C 4200                929      CMP.W  #$4200,D0
00001676  6700 04DC                930      BEQ    INVALID_OP
0000167A  6600 0002                931      BNE    CHECK_OP_NOT
0000167E                           932      
0000167E                           933  CHECK_OP_NOT:
0000167E  3038 1000                934      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001682  0240 FF00                935      ANDI.W #$FF00,D0
00001686  B07C 4600                936      CMP.W  #$4600,D0
0000168A  6700 04C8                937      BEQ    INVALID_OP
0000168E  6600 0002                938      BNE    CHECK_OP_EXT
00001692                           939      
00001692                           940  CHECK_OP_EXT:
00001692  3038 1000                941      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001696  0240 FFF8                942      ANDI.W #$FFF8,D0
0000169A  B07C 4E80                943      CMP.W  #$4E80,D0
0000169E  6700 04B4                944      BEQ    INVALID_OP
000016A2  6600 0002                945      BNE    CHECK_OP_NBCD
000016A6                           946  
000016A6                           947  CHECK_OP_NBCD:
000016A6  3038 1000                948      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000016AA  0240 FFC0                949      ANDI.W #$FFC0,D0
000016AE  B07C 4800                950      CMP.W  #$4800,D0
000016B2  6700 04A0                951      BEQ    INVALID_OP
000016B6  6600 0002                952      BNE    CHECK_OP_SWAP
000016BA                           953      
000016BA                           954  CHECK_OP_SWAP:                  ; This must go before CHECK_OP PEA as first 3 nibbles can be equivalent
000016BA  3038 1000                955      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000016BE  0240 FF48                956      ANDI.W #$FF48,D0
000016C2  B07C 4840                957      CMP.W  #$4840,D0
000016C6  6700 048C                958      BEQ    INVALID_OP
000016CA  6600 0002                959      BNE    CHECK_OP_PEA
000016CE                           960   
000016CE                           961  CHECK_OP_PEA:               ; This must go after CHECK_OP_SWAP as first 3 nibbles can be equivalent
000016CE  3038 1000                962      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000016D2  0240 FF40                963      ANDI.W #$FF40,D0
000016D6  B07C 4840                964      CMP.W  #$4840,D0
000016DA  6700 0478                965      BEQ    INVALID_OP
000016DE  6600 0002                966      BNE    CHECK_OP_TAS
000016E2                           967      
000016E2                           968  CHECK_OP_TAS:
000016E2  3038 1000                969      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000016E6  0240 FFC0                970      ANDI.W #$FFC0,D0
000016EA  B07C 45C0                971      CMP.W  #$45C0,D0
000016EE  6700 0464                972      BEQ    INVALID_OP
000016F2  6600 0002                973      BNE    CHECK_OP_TST
000016F6                           974  
000016F6                           975  CHECK_OP_TST:               ; This must go after CHECK_OP_TAS as first 2 nibbles are equivalent
000016F6  3038 1000                976      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000016FA  0240 FF00                977      ANDI.W #$FF00,D0
000016FE  B07C 4500                978      CMP.W  #$4500,D0
00001702  6700 0450                979      BEQ    INVALID_OP
00001706  6600 0002                980      BNE    CHECK_OP_TRAP
0000170A                           981      
0000170A                           982  CHECK_OP_TRAP:
0000170A  3038 1000                983      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000170E  0240 FFF0                984      ANDI.W #$FFF0,D0
00001712  B07C 4E40                985      CMP.W  #$4E40,D0
00001716  6700 043C                986      BEQ    INVALID_OP
0000171A  6600 0002                987      BNE    CHECK_OP_LINK
0000171E                           988      
0000171E                           989  CHECK_OP_LINK:
0000171E  3038 1000                990      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001722  0240 FFF8                991      ANDI.W #$FFF8,D0
00001726  B07C 4E50                992      CMP.W  #$4E50,D0
0000172A  6700 0428                993      BEQ    INVALID_OP
0000172E  6600 0002                994      BNE    CHECK_OP_UNLK
00001732                           995  
00001732                           996  CHECK_OP_UNLK:
00001732  3038 1000                997      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001736  0240 FFF8                998      ANDI.W #$FFF8,D0
0000173A  B07C 4E58                999      CMP.W  #$4E58,D0
0000173E  6700 0414               1000      BEQ    INVALID_OP
00001742  6600 0002               1001      BNE    CHECK_OP_MOVE_USP
00001746                          1002      
00001746                          1003  CHECK_OP_MOVE_USP:
00001746  3038 1000               1004      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000174A  0240 FFF0               1005      ANDI.W #$FFF0,D0
0000174E  B07C 4E60               1006      CMP.W  #$4E60,D0
00001752  6700 0400               1007      BEQ    INVALID_OP
00001756  6600 002A               1008      BNE    CHECK_OP_RTS
0000175A                          1009  
0000175A                          1010  CHECK_OP_JMP:
0000175A  3038 1000               1011       MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000175E  0240 FFC0               1012       ANDI.W #$FFC0,D0
00001762  B07C 4EC0               1013       CMP.W  #$4EC0,D0
00001766  6700 03EC               1014       BEQ    INVALID_OP
0000176A  6600 0002               1015       BNE    CHECK_OP_CHK
0000176E                          1016       
0000176E                          1017  CHECK_OP_CHK:
0000176E  3038 1000               1018      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001772  0240 F180               1019      ANDI.W  #$F180,D0
00001776  B07C 4180               1020      CMP.W   #$4180,D0
0000177A  6700 03D8               1021      BEQ     INVALID_OP
0000177E  6600 0002               1022      BNE     CHECK_OP_RTS
00001782                          1023  
00001782                          1024  *Supported OP codes to check
00001782                          1025  CHECK_OP_RTS:
00001782  3038 1000               1026      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001786  B07C 4E75               1027      CMP.W  #$4E75,D0
0000178A  6600 FE3E               1028      BNE    CHECK_OP_NOP
0000178E  6700 0498               1029      BEQ    PRINT_OP_RTS
00001792                          1030      
00001792                          1031  CHECK_OP_LEA:
00001792  3038 1000               1032      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001796  0240 F1C0               1033      ANDI.W #$F1C0,D0
0000179A  B07C 41C0               1034      CMP.W  #$41C0,D0
0000179E  6600 0006               1035      BNE    CHECK_OP_JSR
000017A2  6700 0492               1036      BEQ    PRINT_OP_LEA
000017A6                          1037      
000017A6                          1038  CHECK_OP_JSR:
000017A6  3038 1000               1039      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000017AA  0240 FFC0               1040      ANDI.W #$FFC0,D0
000017AE  B07C 4E80               1041      CMP.W  #$4E80,D0
000017B2  6600 0006               1042      BNE    CHECK_OP_NEG
000017B6  6700 0462               1043      BEQ    PRINT_OP_JSR
000017BA                          1044      
000017BA                          1045  CHECK_OP_NEG:
000017BA  3038 1000               1046      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000017BE  0240 FF00               1047      ANDI.W #$FF00,D0
000017C2  B07C 4400               1048      CMP.W  #$4400,D0
000017C6  6600 0006               1049      BNE    CHECK_OP_MOVEM
000017CA  6700 0478               1050      BEQ    PRINT_OP_NEG
000017CE                          1051      
000017CE                          1052  **************** COME BACK TO FINISH UP SIZE **********************************
000017CE                          1053  CHECK_OP_MOVEM:
000017CE  3038 1000               1054      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000017D2  0240 FB80               1055      ANDI.W #$FB80,D0
000017D6  B07C 4880               1056      CMP.W  #$4880,D0
000017DA  6600 0378               1057      BNE    INVALID_OP       ;If no code is found, it is invalid
000017DE  6700 0472               1058      BEQ    PRINT_OP_MOVEM_W
000017E2                          1059      
000017E2                          1060  * GROUP_5
000017E2                          1061  ********************************************************************************
000017E2                          1062  * Supported OP code:
000017E2                          1063  * SUBQ: $5, 11-9 DATA, 8 %1, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
000017E2                          1064  * Unsupported OP codes: ADDQ, Scc, DBcc
000017E2                          1065  * Validation checking:
000017E2                          1066  * Check against, ADDQ, Scc, DBcc
000017E2                          1067  ********************************************************************************
000017E2                          1068  C_GROUP_5:
000017E2                          1069  
000017E2                          1070  *Unsupported OP codes
000017E2                          1071  CHECK_OP_ADDQ:
000017E2  3038 1000               1072      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000017E6  0240 F100               1073      ANDI.W #$F100,D0
000017EA  B07C 5100               1074      CMP.W  #$5100,D0
000017EE  6700 0364               1075      BEQ    INVALID_OP
000017F2  6600 0016               1076      BNE    CHECK_OP_Scc
000017F6                          1077      
000017F6                          1078  CHECK_OP_DBcc:
000017F6  3038 1000               1079      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000017FA  0240 F0C8               1080      ANDI.W #$F0C8,D0
000017FE  B07C 50C8               1081      CMP.W  #$50C8,D0
00001802  6700 0350               1082      BEQ    INVALID_OP
00001806  6600 0002               1083      BNE    CHECK_OP_Scc 
0000180A                          1084  
0000180A                          1085  CHECK_OP_Scc:
0000180A  3038 1000               1086      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000180E  0240 F0C0               1087      ANDI.W #$F0C0,D0 
00001812  B07C 50C0               1088      CMP.W  #$50C0,D0
00001816  6700 033C               1089      BEQ     INVALID_OP
0000181A  6600 0002               1090      BNE     CHECK_OP_SUBQ
0000181E                          1091      
0000181E                          1092  ;VALID_CHECK_OP_SUBQ:
0000181E                          1093  ;    MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
0000181E                          1094  ;    ANDI.W #$F1C0,D0        ;Bitmask check for Scc, DBcc and ADDQ
0000181E                          1095  ;    CMP.W  #$51C0,D0        ;This should be the only valid one for SUBQ
0000181E                          1096  ;    BEQ    INVALID_OP       ;If not equal it's invalid
0000181E                          1097  ;    BNE    CHECK_OP_SUBQ
0000181E                          1098  
0000181E                          1099  *Supported OP code   
0000181E                          1100  CHECK_OP_SUBQ     
0000181E  3038 1000               1101      MOVE.W  CUR_OP_CODE,D0  ;Actual check for SUBQ
00001822  0240 F100               1102      ANDI.W #$F100,D0        ;Bitmask check for SUBQ
00001826  B07C 5100               1103      CMP.W  #$5100,D0        ;Compare the proper value
0000182A  6700 0442               1104      BEQ    PRINT_OP_SUBQ    ;If equal print it out
0000182E  6600 0324               1105      BNE    INVALID_OP       ;Else the operand is invalid
00001832                          1106      
00001832                          1107  * GROUP_6
00001832                          1108  ********************************************************************************
00001832                          1109  * Supported OP codes
00001832                          1110  * BRA: $60, 7-0 8-Bit Displacement
00001832                          1111  * Bcc: $6, 11-8 Condition, 7-0 8-Bit Displacement
00001832                          1112  *   Branch: <Condition>   
00001832                          1113  *   BCS: %0101          
00001832                          1114  *   BGE: %1100      
00001832                          1115  *   BLT: %1101  
00001832                          1116  *   BVC: %1000
00001832                          1117  *   
00001832                          1118  *   MOVE.W #%0110010100000000   ;BCS
00001832                          1119  *   MOVE.W #%0110110001010101   ;BGE
00001832                          1120  *   MVE.W #%0110110110101010    ;BLT
00001832                          1121  *   MOVE.W #%0110100001010101   ;BVC
00001832                          1122  * Unsupported OP code: BSR
00001832                          1123  ********************************************************************************
00001832                          1124  C_GROUP_6:
00001832                          1125  
00001832                          1126  *Unsupported OP code
00001832                          1127  CHECK_OP_BSR:
00001832  3038 1000               1128      MOVE.W CUR_OP_CODE,D0
00001836  0240 FF00               1129      ANDI.W #$FF00,D0
0000183A  B07C 6100               1130      CMP.W  #$6100,D0
0000183E  6700 0314               1131      BEQ     INVALID_OP
00001842  6600 0002               1132      BNE     CHECK_OP_BRA
00001846                          1133      
00001846                          1134  *Supported OP codes
00001846                          1135  CHECK_OP_BRA:
00001846  3038 1000               1136      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0       
0000184A  0240 FF00               1137      ANDI.W #$FF00,D0
0000184E  B07C 6000               1138      CMP.W  #$6000,D0
00001852  6700 0460               1139      BEQ     PRINT_OP_BRA
00001856  6600 0002               1140      BNE     CHECK_OP_BCS
0000185A                          1141  
0000185A                          1142  CHECK_OP_BCS:
0000185A  3038 1000               1143      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
0000185E  0240 FF00               1144      ANDI.W #$FF00,D0
00001862  B07C 6500               1145      CMP.W  #$6500,D0 
00001866  6700 0414               1146      BEQ    PRINT_OP_BCS
0000186A  6600 0002               1147      BNE    CHECK_OP_BGE
0000186E                          1148      
0000186E                          1149  CHECK_OP_BGE:
0000186E  3038 1000               1150      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001872  0240 FF00               1151      ANDI.W #$FF00,D0
00001876  B07C 6C00               1152      CMP.W  #$6C00,D0 
0000187A  6700 040E               1153      BEQ    PRINT_OP_BGE
0000187E  6600 0002               1154      BNE    CHECK_OP_BLT
00001882                          1155      
00001882                          1156  CHECK_OP_BLT:
00001882  3038 1000               1157      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001886  0240 FF00               1158      ANDI.W #$FF00,D0
0000188A  B07C 6D00               1159      CMP.W  #$6D00,D0 
0000188E  6700 0408               1160      BEQ    PRINT_OP_BLT
00001892  6600 0002               1161      BNE    CHECK_OP_BVC
00001896                          1162      
00001896                          1163  CHECK_OP_BVC:
00001896  3038 1000               1164      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
0000189A  0240 FF00               1165      ANDI.W #$FF00,D0
0000189E  B07C 6800               1166      CMP.W  #$6800,D0 
000018A2  6700 0402               1167      BEQ    PRINT_OP_BVC
000018A6  6600 02AC               1168      BNE    INVALID_OP
000018AA                          1169      
000018AA                          1170      
000018AA                          1171  *GROUP_7
000018AA                          1172  ********************************************************************************
000018AA                          1173  * Currently no OP codes here are supported. MOVEQ is the only code in this group
000018AA                          1174  * Unsupported OP code: MOVEQ
000018AA                          1175  ********************************************************************************
000018AA                          1176  C_GROUP_7:
000018AA                          1177  CHECK_OP_MOVEQ
000018AA  3038 1000               1178      MOVE.W CUR_OP_CODE,D0
000018AE  0240 F100               1179      ANDI.W #$F100,D0
000018B2  B07C 7000               1180      CMP.W  #$7000,D0
000018B6  4EF9 00001B54           1181      JMP    INVALID_OP
000018BC                          1182  
000018BC                          1183  * GROUP_8
000018BC                          1184  ********************************************************************************
000018BC                          1185  * Supported OP code:
000018BC                          1186  * DIVS: $8, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
000018BC                          1187  * OR: $80, 7-6 Size, 5-3 EA Mode, 2-0 EA Register
000018BC                          1188  * Unsupported OP codes: DIVU, SBCD
000018BC                          1189  ********************************************************************************
000018BC                          1190  C_GROUP_8:
000018BC                          1191  
000018BC                          1192  *Unsupported OP codes
000018BC                          1193  CHECK_OP_DIVU:
000018BC  3038 1000               1194      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000018C0  0240 F1C0               1195      ANDI.W #$F1C0,D0
000018C4  B07C 80C0               1196      CMP.W #$80C0,D0
000018C8  6700 028A               1197      BEQ   INVALID_OP
000018CC  6600 0002               1198      BNE   CHECK_OP_SBCD 
000018D0                          1199  
000018D0                          1200  CHECK_OP_SBCD:
000018D0  3038 1000               1201      MOVE.W  CUR_OP_CODE,D0   ;Move current instruction set into D0
000018D4  0240 F100               1202      ANDI.W  #$F100,D0
000018D8  B07C 8100               1203      CMP.W   #$8100,D0
000018DC  6700 0276               1204      BEQ     INVALID_OP
000018E0  6600 0002               1205      BNE     CHECK_OP_DIVS
000018E4                          1206      
000018E4                          1207  *Supported OP codes
000018E4                          1208  CHECK_OP_DIVS:
000018E4  3038 1000               1209      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000018E8  0240 F1C0               1210      ANDI.W #$F1C0,D0
000018EC  B07C 81C0               1211      CMP.W #$81C0,D0
000018F0  6700 03D0               1212      BEQ PRINT_OP_DIVS
000018F4  6600 0002               1213      BNE CHECK_OP_OR
000018F8                          1214      
000018F8                          1215  CHECK_OP_OR:              ;At this point only remaining $8 code is OR
000018F8  4EF9 00001CD0           1216      JMP PRINT_OP_OR
000018FE                          1217  * GROUP_9                      
000018FE                          1218  ********************************************************************************
000018FE                          1219  * Supported OP code:
000018FE                          1220  * SUB: $9, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
000018FE                          1221  * Unsupported OP codes: SUBX, SUBA
000018FE                          1222  ********************************************************************************
000018FE                          1223  C_GROUP_9:
000018FE                          1224  
000018FE                          1225  CHECK_OP_SUBA:             ;Check SUBA first as it has static bits
000018FE  3038 1000               1226      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001902  0240 F0C0               1227      ANDI.W #$F0C0,D0
00001906  B07C 90C0               1228      CMP.W #$90C0,D0
0000190A  6700 0248               1229      BEQ INVALID_OP
0000190E  6600 0002               1230      BNE CHECK_OP_SUBX
00001912                          1231  
00001912                          1232  CHECK_OP_SUBX:
00001912  3038 1000               1233      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001916  0240 F130               1234      ANDI.W #$F130,D0
0000191A  B07C 9100               1235      CMP.W #$9100,D0
0000191E  6700 0234               1236      BEQ INVALID_OP
00001922  6600 0002               1237      BNE CHECK_OP_SUB
00001926                          1238  
00001926                          1239  CHECK_OP_SUB:           ;At this point only remaining $9 is SUB
00001926  4EF9 00001CDE           1240      JMP PRINT_OP_SUB
0000192C                          1241  
0000192C                          1242  *GROUP_A
0000192C                          1243  ********************************************************************************
0000192C                          1244  * Currently no OP codes here are supported. There are no current OP codes here.
0000192C                          1245  ********************************************************************************
0000192C                          1246  C_GROUP_A:
0000192C  4EF9 00001B54           1247      JMP INVALID_OP
00001932                          1248  
00001932                          1249  * GROUP_B                     
00001932                          1250  ********************************************************************************
00001932                          1251  * Supported OP codes:
00001932                          1252  * EOR: $B, 11-9 Reg, 8 %1, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001932                          1253  * CMP: $B, 11-9 Reg, 8 %0, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001932                          1254  * The specific bit difference is listed 
00001932                          1255  * Unsupported OP codes: CMPM, CMPA
00001932                          1256  ********************************************************************************
00001932                          1257  C_GROUP_B:
00001932                          1258  
00001932                          1259  CHECK_OP_CMPM
00001932  3038 1000               1260      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001936  0240 F138               1261      ANDI.W #$F138,D0
0000193A  B07C B108               1262      CMP.W  #$B108,D0
0000193E  6700 0214               1263      BEQ INVALID_OP
00001942  6600 0002               1264      BNE CHECK_OP_CMPA
00001946                          1265      
00001946                          1266  CHECK_OP_CMPA:
00001946  3038 1000               1267      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000194A  0240 F0C0               1268      ANDI.W #$F0C0,D0
0000194E  B07C B0C0               1269      CMP.W  #$B0C0,D0
00001952  6700 0200               1270      BEQ INVALID_OP
00001956  6600 0002               1271      BNE CHECK_OP_EOR
0000195A                          1272      
0000195A                          1273  CHECK_OP_EOR:
0000195A  3038 1000               1274      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000195E  0240 F100               1275      ANDI.W #$F100,D0
00001962  B07C B100               1276      CMP.W #$B100,D0
00001966  6700 0384               1277      BEQ PRINT_OP_EOR
0000196A  6600 0002               1278      BNE CHECK_OP_CMP
0000196E                          1279      
0000196E                          1280  CHECK_OP_CMP:
0000196E  3038 1000               1281      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001972  0240 F100               1282      ANDI.W #$F100,D0
00001976  B07C B000               1283      CMP.W #$B000,D0
0000197A  6700 037E               1284      BEQ PRINT_OP_CMP
0000197E  6600 01D4               1285      BNE INVALID_OP
00001982                          1286      
00001982                          1287  * GROUP_C                     
00001982                          1288  ********************************************************************************
00001982                          1289  * Supported OP code:
00001982                          1290  * MULS: $C, 11-8 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00001982                          1291  * Note: EXG OP mode has to be 01000, 01001, 10001, as such can never be 11 for
00001982                          1292  * bits 7-6
00001982                          1293  * Unsupported OP codes: MULU, ABCD, EXG, AND
00001982                          1294  ********************************************************************************
00001982                          1295  C_GROUP_C:
00001982                          1296  *Unsupported OP codes
00001982                          1297  CHECK_OP_MULU:
00001982  3038 1000               1298      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001986  0240 F1C0               1299      ANDI.W  #$F1C0,D0
0000198A  B07C C0C0               1300      CMP.W   #$C0C0,D0
0000198E  6700 01C4               1301      BEQ     INVALID_OP
00001992  6600 0002               1302      BNE     CHECK_OP_ABCD
00001996                          1303   
00001996                          1304  CHECK_OP_ABCD:
00001996  3038 1000               1305      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
0000199A  0240 F1F0               1306      ANDI.W  #$F1F0,D0
0000199E  B07C C100               1307      CMP.W   #$C100,D0
000019A2  6700 01B0               1308      BEQ     INVALID_OP
000019A6  6600 0002               1309      BNE     CHECK_OP_EXG
000019AA                          1310   
000019AA                          1311  CHECK_OP_EXG:
000019AA  3038 1000               1312      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
000019AE  0240 F130               1313      ANDI.W  #$F130,D0
000019B2  B07C C100               1314      CMP.W   #$C100,D0
000019B6  6700 019C               1315      BEQ     INVALID_OP
000019BA  6600 0016               1316      BNE     CHECK_OP_AND
000019BE                          1317         
000019BE                          1318  *Supported OP code
000019BE                          1319  CHECK_OP_MULS:
000019BE  3038 1000               1320      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000019C2  0240 F1C0               1321      ANDI.W #$F1C0,D0
000019C6  B07C C1C0               1322      CMP.W  #$C1C0,D0
000019CA  6700 033C               1323      BEQ    PRINT_OP_MULS
000019CE  6600 0002               1324      BNE    CHECK_OP_AND          ; OP_AND is completely dynamic outside of first nibble
000019D2                          1325  
000019D2                          1326  *Odd completely dynamic unsupported OP code    
000019D2                          1327  CHECK_OP_AND:                 ;This would be the only possible OP code left after CHECK_OP_MULS
000019D2  3038 1000               1328      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
000019D6  0240 F000               1329      ANDI.W  #$F000,D0
000019DA  B07C C000               1330      CMP.W   #$C000,D0
000019DE  6700 0174               1331      BEQ     INVALID_OP
000019E2                          1332  
000019E2                          1333  * GROUP_D                     
000019E2                          1334  ********************************************************************************
000019E2                          1335  * Supported OP codes:
000019E2                          1336  * ADD: $D, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
000019E2                          1337  * ADDA: $D, 11- 9 Reg, 8-6 OPMODE, 7-6 %11, 5-3 EA Mode, 2-0 EA Reg
000019E2                          1338  * The specific bit difference is listed out in the OPMODE field.
000019E2                          1339  * Unsupported: ADDX
000019E2                          1340  ********************************************************************************
000019E2                          1341  C_GROUP_D:
000019E2                          1342  
000019E2                          1343  CHECK_OP_ADDX:
000019E2  3038 1000               1344      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000019E6  0240 F130               1345      ANDI.W #$F130,D0
000019EA  B07C D100               1346      CMP.W #$D100,D0
000019EE  6700 0164               1347      BEQ   INVALID_OP
000019F2  6600 0002               1348      BNE CHECK_OP_ADDA
000019F6                          1349  
000019F6                          1350  CHECK_OP_ADDA:
000019F6  3038 1000               1351      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000019FA  0240 F0C0               1352      ANDI.W #$F0C0,D0
000019FE  B07C D0C0               1353      CMP.W #$D0C0,D0
00001A02  6700 0320               1354      BEQ   PRINT_OP_ADDA
00001A06  6600 0002               1355      BNE   CHECK_OP_ADD
00001A0A                          1356  
00001A0A                          1357  CHECK_OP_ADD:
00001A0A  4EF9 00001D16           1358      JMP PRINT_OP_ADD        ;Only remaining OP in $D is ADD
00001A10                          1359      
00001A10                          1360  * GROUP_E                     
00001A10                          1361  ********************************************************************************
00001A10                          1362  * Supported:
00001A10                          1363  * LSR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00001A10                          1364  * LSL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00001A10                          1365  * ASR: $E, $0, 8 %0, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00001A10                          1366  * ASL: $E, $0, 8 %1, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00001A10                          1367  * ROR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00001A10                          1368  * ROL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00001A10                          1369  * Count/Reg for LSR/LSL refers to shift count, where 0 = shift count of 8, 1-7 
00001A10                          1370  * refers to the respective value when i/r = 0. If i/r = 1, data register in the 
00001A10                          1371  * Count/Reg field specifies the shift count.  
00001A10                          1372  * For directional bit at 8, R = 0, L = 1
00001A10                          1373  * Count/Reg for ROR/ROL specifies rotate count instead of shift count.
00001A10                          1374  *
00001A10                          1375  * Unsupported: ROXL, ROXR
00001A10                          1376  ********************************************************************************
00001A10                          1377  C_GROUP_E:
00001A10                          1378  
00001A10                          1379  CHECK_OP_ROXR_NO_ROT:
00001A10  3038 1000               1380      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A14  0240 F4C0               1381      ANDI.W #$F4C0,D0
00001A18  B07C E4C0               1382      CMP.W #$E4C0,D0
00001A1C  6700 0136               1383      BEQ   INVALID_OP
00001A20  6600 0002               1384      BNE   CHECK_OP_ROXL_NO_ROT
00001A24                          1385  
00001A24                          1386  CHECK_OP_ROXL_NO_ROT:
00001A24  3038 1000               1387      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A28  0240 F5C0               1388      ANDI.W #$F5C0,D0
00001A2C  B07C E5C0               1389      CMP.W #$E5C0,D0
00001A30  6700 0122               1390      BEQ   INVALID_OP
00001A34  6600 002A               1391      BNE   CHECK_OP_LSR_NO_ROT
00001A38                          1392  
00001A38                          1393  CHECK_OP_ROR_NO_ROT:
00001A38  3038 1000               1394      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A3C  0240 F7C0               1395      ANDI.W #$F7C0,D0
00001A40  B07C E6C0               1396      CMP.W #$E6C0,D0
00001A44  6700 0332               1397      BEQ   PRINT_OP_ROR
00001A48  6600 0002               1398      BNE   CHECK_OP_ROL_NO_ROT
00001A4C                          1399      
00001A4C                          1400  CHECK_OP_ROL_NO_ROT:
00001A4C  3038 1000               1401      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A50  0240 F7C0               1402      ANDI.W #$F7C0,D0
00001A54  B07C E7C0               1403      CMP.W #$E7C0,D0
00001A58  6700 0310               1404      BEQ   PRINT_OP_ROL
00001A5C  6600 0002               1405      BNE   CHECK_OP_LSR_NO_ROT
00001A60                          1406   
00001A60                          1407  CHECK_OP_LSR_NO_ROT:
00001A60  3038 1000               1408      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A64  0240 F2C0               1409      ANDI.W #$F2C0,D0
00001A68  B07C E2C0               1410      CMP.W #$E2C0,D0
00001A6C  6700 02D2               1411      BEQ   PRINT_OP_LSR
00001A70  6600 0002               1412      BNE   CHECK_OP_LSL_NO_ROT
00001A74                          1413  
00001A74                          1414  CHECK_OP_LSL_NO_ROT:
00001A74  3038 1000               1415      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A78  0240 F3C0               1416      ANDI.W #$F3C0,D0
00001A7C  B07C E3C0               1417      CMP.W #$E3C0,D0
00001A80  6700 02B0               1418      BEQ   PRINT_OP_LSL
00001A84  6600 0016               1419      BNE   CHECK_OP_ASL_NO_ROT
00001A88                          1420  
00001A88                          1421  CHECK_OP_ASR_NO_ROT:
00001A88  3038 1000               1422      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A8C  0240 F1C0               1423      ANDI.W #$F1C0,D0
00001A90  B07C E0C0               1424      CMP.W #$E0C0,D0
00001A94  6700 02B8               1425      BEQ   PRINT_OP_ASR
00001A98  6600 0002               1426      BNE   CHECK_OP_ASL_NO_ROT
00001A9C                          1427  
00001A9C                          1428  CHECK_OP_ASL_NO_ROT:
00001A9C  3038 1000               1429      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AA0  0240 F1C0               1430      ANDI.W #$F1C0,D0
00001AA4  B07C 01C0               1431      CMP.W #$01C0,D0
00001AA8  6700 02B2               1432      BEQ   PRINT_OP_ASL
00001AAC  668A                    1433      BNE   CHECK_OP_ROR_NO_ROT
00001AAE                          1434  
00001AAE                          1435  CHECK_OP_ROXR:
00001AAE  3038 1000               1436      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AB2  0240 F118               1437      ANDI.W #$F118,D0
00001AB6  B07C E010               1438      CMP.W  #$E010,D0
00001ABA  6700 0098               1439      BEQ    INVALID_OP
00001ABE  6600 0002               1440      BNE    CHECK_OP_ROXL
00001AC2                          1441      
00001AC2                          1442  CHECK_OP_ROXL:
00001AC2  3038 1000               1443      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AC6  0240 F118               1444      ANDI.W #$F118,D0
00001ACA  B07C E110               1445      CMP.W  #$E110,D0
00001ACE  6700 0084               1446      BEQ    INVALID_OP
00001AD2  6600 0002               1447      BNE    CHECK_OP_ROR
00001AD6                          1448  
00001AD6                          1449  CHECK_OP_ROR:
00001AD6  3038 1000               1450      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001ADA  0240 F118               1451      ANDI.W #$F118,D0
00001ADE  B07C E018               1452      CMP.W  #$E018,D0
00001AE2  6700 0294               1453      BEQ    PRINT_OP_ROR
00001AE6  6600 0002               1454      BNE    CHECK_OP_ROL
00001AEA                          1455  
00001AEA                          1456  CHECK_OP_ROL:
00001AEA  3038 1000               1457      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AEE  0240 F118               1458      ANDI.W #$F118,D0
00001AF2  B07C E118               1459      CMP.W  #$E118,D0
00001AF6  6700 0272               1460      BEQ    PRINT_OP_ROL
00001AFA  6600 0002               1461      BNE    CHECK_OP_LSR
00001AFE                          1462      
00001AFE                          1463  CHECK_OP_LSR:
00001AFE  3038 1000               1464      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B02  0240 F118               1465      ANDI.W #$F118,D0
00001B06  B07C E008               1466      CMP.W  #$E008,D0
00001B0A  6700 0234               1467      BEQ    PRINT_OP_LSR
00001B0E  6600 0002               1468      BNE    CHECK_OP_LSL
00001B12                          1469  
00001B12                          1470  CHECK_OP_LSL:
00001B12  3038 1000               1471      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B16  0240 F118               1472      ANDI.W #$F118,D0
00001B1A  B07C E108               1473      CMP.W  #$E108,D0
00001B1E  6700 0212               1474      BEQ    PRINT_OP_LSL
00001B22  6600 0002               1475      BNE    CHECK_OP_ASR
00001B26                          1476  
00001B26                          1477  CHECK_OP_ASR:
00001B26  3038 1000               1478      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B2A  0240 F118               1479      ANDI.W #$F118,D0
00001B2E  B07C E000               1480      CMP.W  #$E000,D0
00001B32  6700 021A               1481      BEQ    PRINT_OP_ASR
00001B36  6600 0002               1482      BNE    CHECK_OP_ASL
00001B3A                          1483  
00001B3A                          1484  CHECK_OP_ASL:
00001B3A  3038 1000               1485      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B3E  0240 F118               1486      ANDI.W #$F118,D0
00001B42  B07C E100               1487      CMP.W  #$E100,D0
00001B46  6700 0214               1488      BEQ    PRINT_OP_ASL
00001B4A  6600 0008               1489      BNE    INVALID_OP      ;Last possible OP code
00001B4E                          1490  
00001B4E                          1491  
00001B4E                          1492  * GROUP_F
00001B4E                          1493  ********************************************************************************
00001B4E                          1494  * Currently no OP codes here are supported. There are no OP codes here
00001B4E                          1495  ********************************************************************************
00001B4E                          1496  C_GROUP_F:
00001B4E  4EF9 00001B54           1497      JMP INVALID_OP
00001B54                          1498      
00001B54                          1499  * INVALID_OP                     
00001B54                          1500  ********************************************************************************
00001B54                          1501  * Any value that is not covered in the above groups would be considered invalid. 
00001B54                          1502  * The following values in the first nibble would also indicate that the 
00001B54                          1503  * operand codes is already invalid: $7, $A, $F.
00001B54                          1504  * For unsupported OP codes, display DATA $WXYZ   
00001B54                          1505  * THIS WILL NEED TO BE CHANGED TO DISPLAY: 1000 DATA $WXYZ IN THE FUTURE
00001B54                          1506  ********************************************************************************
00001B54                          1507  INVALID_OP:  ; Prints DATA for invalid op
00001B54  43F9 00001D8E           1508      LEA P_INVALID_OP,A1
00001B5A  103C 000D               1509      MOVE.B #13,D0
00001B5E  4E4F                    1510      TRAP #15
00001B60  FFFF FFFF               1511      SIMHALT
00001B64                          1512      
00001B64                          1513  READ_NEXT_INSTRUCTION: ; Needs to read next instruction set {PLACEHOLDER}
00001B64  FFFF FFFF               1514      SIMHALT
00001B68                          1515  
00001B68                          1516  MAKE_VAL_ASCII:
00001B68  0C00 0009               1517      CMPI.B  #$9,D0
00001B6C  6E00 0008               1518      BGT     LETTER_ASCII
00001B70  6F00 000A               1519      BLE     NUMBER_ASCII
00001B74  4E75                    1520      RTS
00001B76                          1521      
00001B76                          1522  LETTER_ASCII:
00001B76  0600 0037               1523      ADDI.B #$37,D0 ; A-F
00001B7A  4E75                    1524      RTS
00001B7C                          1525      
00001B7C                          1526  NUMBER_ASCII
00001B7C  0600 0030               1527      ADDI.B #$30,D0 ; 0-9
00001B80  4E75                    1528      RTS
00001B82                          1529      
00001B82                          1530  ADD_PERIOD:
00001B82  2F00                    1531      MOVE.L D0,-(SP)
00001B84  103C 0000               1532      MOVE.B #$0,D0
00001B88  0600 0046               1533      ADDI.B #$46,D0
00001B8C  201F                    1534      MOVE.L (SP)+,D0
00001B8E                          1535  ********************** PRINTING ROUTINES **************************************
00001B8E                          1536  * Description: These routines are to print the associated op codes, by placing
00001B8E                          1537  * them in the appropriate area to the buffer
00001B8E                          1538  *
00001B8E                          1539  * Registers used: A1 for loading, A6 for EA parsing.
00001B8E                          1540  *
00001B8E                          1541  * Precondition: The relevant opcode has been identified correctly.
00001B8E                          1542  *
00001B8E                          1543  * Postcondition: Prints out the associated opcode to the buffer.
00001B8E                          1544  
00001B8E                          1545  * THIS NEEDS TO BE RETOOLED TO PRINT TO BUFFER NOT TO CONSOLE
00001B8E                          1546  *******************************************************************************
00001B8E                          1547  
00001B8E                          1548  ****************************** GROUP 0 **************************************** 
00001B8E                          1549  PRINT_OP_ORI:
00001B8E  43F9 00001DA5           1550      LEA P_OP_ORI,A1
00001B94  4EB9 00001D86           1551      JSR PRINT_OP
00001B9A  4E75                    1552      RTS
00001B9C                          1553  PRINT_OP_CMPI:
00001B9C  43F9 00001DA9           1554      LEA P_OP_CMPI,A1
00001BA2  4EB9 00001D86           1555      JSR PRINT_OP
00001BA8  4E75                    1556      RTS
00001BAA                          1557  PRINT_OP_STATIC_BCLR:
00001BAA  43F9 00001DAE           1558      LEA P_OP_STATIC_BCLR,A1
00001BB0  4EB9 00001D86           1559      JSR PRINT_OP
00001BB6  4E75                    1560      RTS
00001BB8                          1561  PRINT_OP_DYNAMIC_BCLR:
00001BB8  43F9 00001DB3           1562      LEA P_OP_DYNAMIC_BCLR,A1
00001BBE  4EB9 00001D86           1563      JSR PRINT_OP
00001BC4  4E75                    1564      RTS
00001BC6                          1565  ******************************* END OF GROUP 0 ********************************
00001BC6                          1566  
00001BC6                          1567  ****************************** GROUP 1 ****************************************    
00001BC6                          1568  PRINT_OP_MOVEB:
00001BC6  43F9 00001DB8           1569      LEA P_OP_MOVEB,A1
00001BCC  4EB9 00001D86           1570      JSR PRINT_OP
00001BD2  4E75                    1571      RTS
00001BD4                          1572  ******************************* END OF GROUP 1 ********************************
00001BD4                          1573      
00001BD4                          1574  ****************************** GROUP 2 **************************************** 
00001BD4                          1575  PRINT_OP_MOVEA_L:
00001BD4  43F9 00001DBF           1576      LEA P_OP_MOVEA_L,A1
00001BDA  4EB9 00001D86           1577      JSR PRINT_OP
00001BE0  4E75                    1578      RTS
00001BE2                          1579  PRINT_OP_MOVE_L:
00001BE2  43F9 00001DC7           1580      LEA P_OP_MOVE_L,A1
00001BE8  4EB9 00001D86           1581      JSR PRINT_OP
00001BEE  4E75                    1582      RTS
00001BF0                          1583  ******************************* END OF GROUP 2 ********************************
00001BF0                          1584      
00001BF0                          1585  ****************************** GROUP 3 ****************************************    
00001BF0                          1586  PRINT_OP_MOVEA_W:
00001BF0  43F9 00001DCE           1587      LEA P_OP_MOVEA_W,A1
00001BF6  4EB9 00001D86           1588      JSR PRINT_OP
00001BFC  4E75                    1589      RTS
00001BFE                          1590  PRINT_OP_MOVE_W:
00001BFE  43F9 00001DD6           1591      LEA P_OP_MOVE_W,A1
00001C04  4EB9 00001D86           1592      JSR PRINT_OP
00001C0A  4E75                    1593      RTS
00001C0C                          1594  ******************************* END OF GROUP 3 ********************************
00001C0C                          1595  
00001C0C                          1596  ****************************** GROUP 4 ****************************************
00001C0C                          1597  PRINT_OP_NOP:
00001C0C  43F9 00001DF5           1598      LEA P_OP_NOP,A1
00001C12  4EB9 00001D86           1599      JSR PRINT_OP
00001C18  4E75                    1600      RTS
00001C1A                          1601  PRINT_OP_JSR:
00001C1A  43F9 00001DF1           1602      LEA P_OP_JSR,A1
00001C20  4EB9 00001D86           1603      JSR PRINT_OP
00001C26  4E75                    1604      RTS
00001C28                          1605  PRINT_OP_RTS:
00001C28  43F9 00001DF9           1606      LEA P_OP_RTS,A1
00001C2E  4EB9 00001D86           1607      JSR PRINT_OP
00001C34  4E75                    1608      RTS
00001C36                          1609  PRINT_OP_LEA:
00001C36  43F9 00001DED           1610      LEA P_OP_LEA,A1
00001C3C  4EB9 00001D86           1611      JSR PRINT_OP
00001C42  4E75                    1612      RTS
00001C44                          1613  PRINT_OP_NEG:
00001C44  43F9 00001DFD           1614      LEA P_OP_NEG,A1
00001C4A  4EB9 00001D86           1615      JSR PRINT_OP
00001C50  4E75                    1616      RTS
00001C52                          1617  PRINT_OP_MOVEM_W:
00001C52  43F9 00001DDD           1618      LEA P_OP_MOVEM_W,A1
00001C58  4EB9 00001D86           1619      JSR PRINT_OP
00001C5E  4E75                    1620      RTS
00001C60                          1621  PRINT_OP_MOVEM_L:
00001C60  43F9 00001DE5           1622      LEA P_OP_MOVEM_L,A1
00001C66  4EB9 00001D86           1623      JSR PRINT_OP
00001C6C  4E75                    1624      RTS
00001C6E                          1625  ******************************* END OF GROUP 4 ********************************
00001C6E                          1626      
00001C6E                          1627  ****************************** GROUP 5 ****************************************
00001C6E                          1628  PRINT_OP_SUBQ:
00001C6E  43F9 00001E01           1629      LEA P_OP_SUBQ,A1
00001C74  4EB9 00001D86           1630      JSR PRINT_OP
00001C7A  4E75                    1631      RTS
00001C7C                          1632  ******************************* END OF GROUP 5 ********************************
00001C7C                          1633  
00001C7C                          1634  ****************************** GROUP 6 ****************************************
00001C7C                          1635  PRINT_OP_BCS:
00001C7C  43F9 00001E0A           1636      LEA P_OP_BCS,A1
00001C82  4EB9 00001D86           1637      JSR PRINT_OP
00001C88  4E75                    1638      RTS
00001C8A                          1639  PRINT_OP_BGE:
00001C8A  43F9 00001E0E           1640      LEA P_OP_BGE,A1
00001C90  4EB9 00001D86           1641      JSR PRINT_OP
00001C96  4E75                    1642      RTS
00001C98                          1643  PRINT_OP_BLT:
00001C98  43F9 00001E12           1644      LEA P_OP_BLT,A1
00001C9E  4EB9 00001D86           1645      JSR PRINT_OP
00001CA4  4E75                    1646      RTS
00001CA6                          1647  PRINT_OP_BVC:
00001CA6  43F9 00001E16           1648      LEA P_OP_BVC,A1
00001CAC  4EB9 00001D86           1649      JSR PRINT_OP
00001CB2  4E75                    1650      RTS
00001CB4                          1651  PRINT_OP_BRA:
00001CB4  43F9 00001E06           1652      LEA P_OP_BRA,A1
00001CBA  4EB9 00001D86           1653      JSR PRINT_OP
00001CC0  4E75                    1654      RTS
00001CC2                          1655  ******************************* END OF GROUP 6 ********************************
00001CC2                          1656  
00001CC2                          1657  ****************************** GROUP 7 ****************************************
00001CC2                          1658  * No currently supported OP codes to print here.
00001CC2                          1659  ******************************* END OF GROUP 7 ********************************
00001CC2                          1660  
00001CC2                          1661  ****************************** GROUP 8 ****************************************
00001CC2                          1662  PRINT_OP_DIVS:
00001CC2  43F9 00001E1A           1663      LEA P_OP_DIVS,A1
00001CC8  4EB9 00001D86           1664      JSR PRINT_OP
00001CCE  4E75                    1665      RTS
00001CD0                          1666  PRINT_OP_OR:
00001CD0  43F9 00001E1F           1667      LEA P_OP_OR,A1
00001CD6  4EB9 00001D86           1668      JSR PRINT_OP
00001CDC  4E75                    1669      RTS
00001CDE                          1670  ******************************* END OF GROUP 8 ********************************
00001CDE                          1671  
00001CDE                          1672  ****************************** GROUP 9 ****************************************
00001CDE                          1673  PRINT_OP_SUB:
00001CDE  43F9 00001E22           1674      LEA P_OP_SUB,A1
00001CE4  4EB9 00001D86           1675      JSR PRINT_OP
00001CEA  4E75                    1676      RTS
00001CEC                          1677  ******************************* END OF GROUP 9 ********************************
00001CEC                          1678  
00001CEC                          1679  ****************************** GROUP A ****************************************
00001CEC                          1680  * No currently supported OP codes to print here.
00001CEC                          1681  ******************************* END OF GROUP A ********************************
00001CEC                          1682  
00001CEC                          1683  ****************************** GROUP B ****************************************
00001CEC                          1684  PRINT_OP_EOR:
00001CEC  43F9 00001E26           1685      LEA P_OP_EOR,A1
00001CF2  4EB9 00001D86           1686      JSR PRINT_OP
00001CF8  4E75                    1687      RTS
00001CFA                          1688  PRINT_OP_CMP:
00001CFA  43F9 00001E2A           1689      LEA P_OP_CMP,A1
00001D00  4EB9 00001D86           1690      JSR PRINT_OP
00001D06  4E75                    1691      RTS
00001D08                          1692  ******************************* END OF GROUP B ********************************
00001D08                          1693  
00001D08                          1694  ****************************** GROUP C ****************************************
00001D08                          1695  PRINT_OP_MULS:
00001D08  43F9 00001E2E           1696      LEA P_OP_MULS,A1
00001D0E  4EB9 00001D86           1697      JSR PRINT_OP
00001D14  4E75                    1698      RTS
00001D16                          1699  ******************************* END OF GROUP C ********************************
00001D16                          1700  
00001D16                          1701  ****************************** GROUP D ****************************************
00001D16                          1702  PRINT_OP_ADD:
00001D16  43F9 00001E38           1703      LEA P_OP_ADD,A1
00001D1C  4EB9 00001D86           1704      JSR PRINT_OP
00001D22  4E75                    1705      RTS
00001D24                          1706  PRINT_OP_ADDA:
00001D24  43F9 00001E33           1707      LEA P_OP_ADDA,A1
00001D2A  4EB9 00001D86           1708      JSR PRINT_OP
00001D30  4E75                    1709      RTS
00001D32                          1710  
00001D32                          1711  ******************************* END OF GROUP D ********************************
00001D32                          1712  
00001D32                          1713  ****************************** GROUP E ****************************************
00001D32                          1714  PRINT_OP_LSL:
00001D32  43F9 00001E40           1715      LEA P_OP_LSL,A1
00001D38  4EB9 00001D86           1716      JSR PRINT_OP
00001D3E  4E75                    1717      RTS
00001D40                          1718  PRINT_OP_LSR:
00001D40  43F9 00001E3C           1719      LEA P_OP_LSR,A1
00001D46  4EB9 00001D86           1720      JSR PRINT_OP
00001D4C  4E75                    1721      RTS
00001D4E                          1722  PRINT_OP_ASR:
00001D4E  43F9 00001E44           1723      LEA P_OP_ASR,A1
00001D54  4EB9 00001D86           1724      JSR PRINT_OP
00001D5A  4E75                    1725      RTS
00001D5C                          1726  PRINT_OP_ASL:
00001D5C  43F9 00001E48           1727      LEA P_OP_ASL,A1
00001D62  4EB9 00001D86           1728      JSR PRINT_OP
00001D68  4E75                    1729      RTS
00001D6A                          1730  PRINT_OP_ROL:
00001D6A  43F9 00001E50           1731      LEA P_OP_ROL,A1
00001D70  4EB9 00001D86           1732      JSR PRINT_OP
00001D76  4E75                    1733      RTS
00001D78                          1734  PRINT_OP_ROR:
00001D78  43F9 00001E4C           1735      LEA P_OP_ROR,A1
00001D7E  4EB9 00001D86           1736      JSR PRINT_OP
00001D84  4E75                    1737      RTS
00001D86                          1738  ******************************* END OF GROUP E ********************************
00001D86                          1739  
00001D86                          1740  ****************************** GROUP F ****************************************
00001D86                          1741  * No currently supported OP codes to print here.
00001D86                          1742  ******************************* END OF GROUP F ********************************
00001D86                          1743  
00001D86                          1744  
00001D86                          1745  
00001D86                          1746  PRINT_OP:   ;Prints current op code byte
00001D86                          1747      ;MOVE.W (A4),(A1)       ; NEEDS TO USE G_BUFFER LATER
00001D86  103C 000D               1748      MOVE.B #13,D0
00001D8A  4E4F                    1749      TRAP #15
00001D8C  4E75                    1750      RTS
00001D8E                          1751  ******************* END OF PRINTING ROUTINES **********************************
00001D8E                          1752  
00001D8E                          1753  ******************* END OF JMP LABELS *****************************************
00001D8E                          1754  
00001D8E                          1755  ******************* DATA CONSTANT PRINTS **************************************
00001D8E                          1756  * Formatting is as follows: P_OP_<OPCODE>, where P = Print, OP = Operation,
00001D8E                          1757  * <OPCODE> is any valid operand
00001D8E                          1758  
00001D8E= 44 41 54 41 00          1759  P_INVALID_OP    DC.B    'DATA',0
00001D93= 46 6F 75 6E 64 20 ...   1760  OP_FOUND        DC.B    'Found OP',0 ; this should be taken out later
00001D9C= 2E 42 00                1761  P_SIZE_B        DC.B    '.B',0
00001D9F= 2E 57 00                1762  P_SIZE_W        DC.B    '.W',0
00001DA2= 2E 4C 00                1763  P_SIZE_L        DC.B    '.L',0
00001DA5= 4F 52 49 00             1764  P_OP_ORI        DC.B    'ORI',0
00001DA9= 43 4D 50 49 00          1765  P_OP_CMPI       DC.B    'CMPI',0
00001DAE= 42 43 4C 52 00          1766  P_OP_STATIC_BCLR     DC.B    'BCLR',0
00001DB3= 42 43 4C 52 00          1767  P_OP_DYNAMIC_BCLR     DC.B    'BCLR',0
00001DB8= 4D 4F 56 45 2E 42 00    1768  P_OP_MOVEB      DC.B    'MOVE.B',0
00001DBF= 4D 4F 56 45 41 2E ...   1769  P_OP_MOVEA_L    DC.B    'MOVEA.L',0 
00001DC7= 4D 4F 56 45 2E 4C 00    1770  P_OP_MOVE_L     DC.B    'MOVE.L',0
00001DCE= 4D 4F 56 45 41 2E ...   1771  P_OP_MOVEA_W    DC.B    'MOVEA.W',0
00001DD6= 4D 4F 56 45 2E 57 00    1772  P_OP_MOVE_W     DC.B    'MOVE.W',0
00001DDD= 4D 4F 56 45 4D 2E ...   1773  P_OP_MOVEM_W    DC.B    'MOVEM.W',0
00001DE5= 4D 4F 56 45 4D 2E ...   1774  P_OP_MOVEM_L    DC.B    'MOVEM.L',0
00001DED= 4C 45 41 00             1775  P_OP_LEA        DC.B    'LEA',0
00001DF1= 4A 53 52 00             1776  P_OP_JSR        DC.B    'JSR',0
00001DF5= 4E 4F 50 00             1777  P_OP_NOP        DC.B    'NOP',0
00001DF9= 52 54 53 00             1778  P_OP_RTS        DC.B    'RTS',0
00001DFD= 4E 45 47 00             1779  P_OP_NEG        DC.B    'NEG',0
00001E01= 53 55 42 51 00          1780  P_OP_SUBQ       DC.B    'SUBQ',0
00001E06= 42 52 41 00             1781  P_OP_BRA        DC.B    'BRA',0
00001E0A= 42 43 53 00             1782  P_OP_BCS        DC.B    'BCS',0
00001E0E= 42 47 45 00             1783  P_OP_BGE        DC.B    'BGE',0
00001E12= 42 4C 54 00             1784  P_OP_BLT        DC.B    'BLT',0
00001E16= 42 56 43 00             1785  P_OP_BVC        DC.B    'BVC',0
00001E1A= 44 49 56 53 00          1786  P_OP_DIVS       DC.B    'DIVS',0
00001E1F= 4F 52 00                1787  P_OP_OR         DC.B    'OR',0
00001E22= 53 55 42 00             1788  P_OP_SUB        DC.B    'SUB',0
00001E26= 45 4F 52 00             1789  P_OP_EOR        DC.B    'EOR',0
00001E2A= 43 4D 50 00             1790  P_OP_CMP        DC.B    'CMP',0
00001E2E= 4D 55 4C 53 00          1791  P_OP_MULS       DC.B    'MULS',0
00001E33= 41 44 44 41 00          1792  P_OP_ADDA       DC.B    'ADDA',0
00001E38= 41 44 44 00             1793  P_OP_ADD        DC.B    'ADD',0
00001E3C= 4C 53 52 00             1794  P_OP_LSR        DC.B    'LSR',0
00001E40= 4C 53 4C 00             1795  P_OP_LSL        DC.B    'LSL',0
00001E44= 41 53 52 00             1796  P_OP_ASR        DC.B    'ASR',0
00001E48= 41 53 4C 00             1797  P_OP_ASL        DC.B    'ASL',0
00001E4C= 52 4F 52 00             1798  P_OP_ROR        DC.B    'ROR',0
00001E50= 52 4F 4C 00             1799  P_OP_ROL        DC.B    'ROL',0
00001E54                          1800  ***************** END OF DATA CONSTANT PRINTS ***********************************
00001E54                          1801   
00001E54                          1802  
00001E54                          1803  **
00001E54                          1804  * AddStrToBuffer
00001E54                          1805  **
00001E54                          1806  * Adds the given NULL-terminated string to the specified buffer.
00001E54                          1807  *
00001E54                          1808  * Default buffer length is 80 characters, but can be modified in the argument
00001E54                          1809  * variables.
00001E54                          1810  *
00001E54                          1811  * If the buffer length is exceeded, either due to lack of a NULL character or
00001E54                          1812  * an incorrectly specified length, 1 is returned. Otherwise, 0 is returned to
00001E54                          1813  * indicate success.
00001E54                          1814  *
00001E54                          1815  **
00001E54                          1816  * @param Arg_AddStrToBuffer_String              Pointer to string
00001E54                          1817  * @param Arg_AddStrToBuffer_Buffer              Pointer to buffer
00001E54                          1818  * @param Arg_AddStrToBuffer_BufferLength        Length of buffer (default 80 chars)
00001E54                          1819  * @return Ret_AddStrToBuffer_Success            0 if successful, 1 otherwise.
00001E54                          1820  * @branch _AddStrToBuffer_FindBufferNullLoop    Loop to find NULL in buffer
00001E54                          1821  * @branch _AddStrToBuffer_AddLoop               Loop to add string to buffer
00001E54                          1822  * @branch _AddStrToBuffer_Success               Branch when string successfully added
00001E54                          1823  * @branch _AddStrToBuffer_StringLengthExceeded  Branch when length exceeded (either string or buffer)
00001E54                          1824  * @branch _AddStrToBuffer_End                   End of subroutine
00001E54                          1825  **
00001E54                          1826  Arg_AddStrToBuffer_String           DS.L    1
00001E58                          1827  Arg_AddStrToBuffer_Buffer           DS.L    1
00001E5C= 00000050                1828  Arg_AddStrToBuffer_BufferLength     DC.L    80
00001E60                          1829  Ret_AddStrToBuffer_Success          DS.B    1
00001E61                          1830  
00001E62                          1831  AddStrToBuffer:                     DS.W    0
00001E62  48E7 C0C0               1832      MOVEM.L     D0-D1/A0-A1, -(SP)                  * Backup registers to stack
00001E66                          1833  
00001E66  2078 1E54               1834      MOVE.L      Arg_AddStrToBuffer_String, A0       * Load string pointer
00001E6A  2278 1E58               1835      MOVE.L      Arg_AddStrToBuffer_Buffer, A1       * Load buffer pointer
00001E6E  2038 1E5C               1836      MOVE.L      Arg_AddStrToBuffer_BufferLength, D0 * Load buffer length
00001E72  4278 1E60               1837      CLR.W       Ret_AddStrToBuffer_Success          * Clear success bit
00001E76  4281                    1838      CLR.L       D1                                  * Clear loop counter
00001E78                          1839  
00001E78                          1840  _AddStrToBuffer_BufferLoop
00001E78  0C11 0000               1841      CMPI.B      #0, (A1)                            * If buffer char is NULL
00001E7C  6700 000E               1842      BEQ         _AddStrToBuffer_AddLoop             * Start adding string to bufer
00001E80                          1843      
00001E80  B280                    1844      CMP.L       D0, D1                              * If counter >= max length
00001E82  6C00 0024               1845      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
00001E86                          1846      
00001E86  5289                    1847      ADDQ.L      #1, A1                              * Go to next character
00001E88  5201                    1848      ADDQ.B      #1, D1                              * Increment counter
00001E8A  60EC                    1849      BRA         _AddStrToBuffer_BufferLoop          * Loop back
00001E8C                          1850      
00001E8C                          1851  _AddStrToBuffer_AddLoop
00001E8C  0C10 0000               1852      CMPI.B      #0, (A0)                            * If string char is NULL
00001E90  6700 000E               1853      BEQ         _AddStrToBuffer_Success             * String successfully added
00001E94                          1854      
00001E94  B200                    1855      CMP.B       D0, D1                              * If counter >= max length
00001E96  6C00 0010               1856      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
00001E9A                          1857      
00001E9A  12D8                    1858      MOVE.B      (A0)+, (A1)+                        * Move string char to buffer char
00001E9C  5201                    1859      ADDQ.B      #1, D1                              * Increment counter
00001E9E  60EC                    1860      BRA         _AddStrToBuffer_AddLoop             * Loop back
00001EA0                          1861  
00001EA0                          1862  _AddStrToBuffer_Success
00001EA0  12BC 0000               1863      MOVE.B      #0, (A1)                            * Add NULL to end of string
00001EA4  6000 0008               1864      BRA         _AddStrToBuffer_End                 * Finish subroutine
00001EA8                          1865  
00001EA8                          1866  _AddStrToBuffer_LengthExceeded
00001EA8  31FC 0001 1E60          1867      MOVE.W      #1, Ret_AddStrToBuffer_Success      * Invalidate success bit
00001EAE                          1868  
00001EAE                          1869  _AddStrToBuffer_End
00001EAE  4CDF 0303               1870      MOVEM.L     (SP)+, D0-D1/A0-A1                  * Restore registers from stack
00001EB2  4E75                    1871      RTS                  
00001EB4                          1872     
00001EB4                          1873      END START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDSTRTOBUFFER      1E62
ADD_PERIOD          1B82
ARG_ADDSTRTOBUFFER_BUFFER  1E58
ARG_ADDSTRTOBUFFER_BUFFERLENGTH  1E5C
ARG_ADDSTRTOBUFFER_STRING  1E54
B_BUFFER            1053
CHECK_OP_ABCD       1996
CHECK_OP_ADD        1A0A
CHECK_OP_ADDA       19F6
CHECK_OP_ADDI       1386
CHECK_OP_ADDQ       17E2
CHECK_OP_ADDX       19E2
CHECK_OP_AND        19D2
CHECK_OP_ANDI       135E
CHECK_OP_ANDI_TO_CCR  131E
CHECK_OP_ANDI_TO_SR  132E
CHECK_OP_ASL        1B3A
CHECK_OP_ASL_NO_ROT  1A9C
CHECK_OP_ASR        1B26
CHECK_OP_ASR_NO_ROT  1A88
CHECK_OP_BCS        185A
CHECK_OP_BGE        186E
CHECK_OP_BLT        1882
CHECK_OP_BRA        1846
CHECK_OP_BSR        1832
CHECK_OP_BVC        1896
CHECK_OP_CHK        176E
CHECK_OP_CLR        166A
CHECK_OP_CMP        196E
CHECK_OP_CMPA       1946
CHECK_OP_CMPI       146A
CHECK_OP_CMPM       1932
CHECK_OP_DBCC       17F6
CHECK_OP_DIVS       18E4
CHECK_OP_DIVU       18BC
CHECK_OP_DYNAMIC_BCHG  13FE
CHECK_OP_DYNAMIC_BCLR  149E
CHECK_OP_DYNAMIC_BSET  1412
CHECK_OP_DYNAMIC_BTST  13EA
CHECK_OP_EOR        195A
CHECK_OP_EORI       139A
CHECK_OP_EORI_TO_CCR  133E
CHECK_OP_EORI_TO_SR  134E
CHECK_OP_EXG        19AA
CHECK_OP_EXT        1692
CHECK_OP_ILLEGAL    15DA
CHECK_OP_JMP        175A
CHECK_OP_JSR        17A6
CHECK_OP_LEA        1792
CHECK_OP_LINK       171E
CHECK_OP_LSL        1B12
CHECK_OP_LSL_NO_ROT  1A74
CHECK_OP_LSR        1AFE
CHECK_OP_LSR_NO_ROT  1A60
CHECK_OP_MOVEA_L    14EE
CHECK_OP_MOVEA_W    154E
CHECK_OP_MOVEM      17CE
CHECK_OP_MOVEP      143C
CHECK_OP_MOVEQ      18AA
CHECK_OP_MOVE_B     14C6
CHECK_OP_MOVE_FROM_CCR  162E
CHECK_OP_MOVE_FROM_SR  161A
CHECK_OP_MOVE_L     1526
CHECK_OP_MOVE_TO_SR  1642
CHECK_OP_MOVE_USP   1746
CHECK_OP_MOVE_W     1586
CHECK_OP_MULS       19BE
CHECK_OP_MULU       1982
CHECK_OP_NBCD       16A6
CHECK_OP_NEG        17BA
CHECK_OP_NEGX       1656
CHECK_OP_NOP        15CA
CHECK_OP_NOT        167E
CHECK_OP_OR         18F8
CHECK_OP_ORI        1450
CHECK_OP_ORI_TO_CCR  12FE
CHECK_OP_ORI_TO_SR  130E
CHECK_OP_PEA        16CE
CHECK_OP_RESET      15BA
CHECK_OP_ROL        1AEA
CHECK_OP_ROL_NO_ROT  1A4C
CHECK_OP_ROR        1AD6
CHECK_OP_ROR_NO_ROT  1A38
CHECK_OP_ROXL       1AC2
CHECK_OP_ROXL_NO_ROT  1A24
CHECK_OP_ROXR       1AAE
CHECK_OP_ROXR_NO_ROT  1A10
CHECK_OP_RTE        15EA
CHECK_OP_RTR        160A
CHECK_OP_RTS        1782
CHECK_OP_SBCD       18D0
CHECK_OP_SCC        180A
CHECK_OP_STATIC_BCHG  13C2
CHECK_OP_STATIC_BCLR  1484
CHECK_OP_STATIC_BSET  13D6
CHECK_OP_STATIC_BTST  13AE
CHECK_OP_STOP       15AA
CHECK_OP_SUB        1926
CHECK_OP_SUBA       18FE
CHECK_OP_SUBI       1372
CHECK_OP_SUBQ       181E
CHECK_OP_SUBX       1912
CHECK_OP_SWAP       16BA
CHECK_OP_TAS        16E2
CHECK_OP_TRAP       170A
CHECK_OP_TRAPV      15FA
CHECK_OP_TST        16F6
CHECK_OP_UNLK       1732
CUR_OP_CODE         1000
C_GROUP_0           12FA
C_GROUP_1           14C2
C_GROUP_2           14EA
C_GROUP_3           154A
C_GROUP_4           15AA
C_GROUP_5           17E2
C_GROUP_6           1832
C_GROUP_7           18AA
C_GROUP_8           18BC
C_GROUP_9           18FE
C_GROUP_A           192C
C_GROUP_B           1932
C_GROUP_C           1982
C_GROUP_D           19E2
C_GROUP_E           1A10
C_GROUP_F           1B4E
EA_SIZE             1002
FIND_2_BIT_SIZE_TO_EA  1224
FIND_3_BIT_REG_TO_EA  123A
FIND_MOVEA_L_DIFFERENCE  1500
FIND_MOVEA_W_DIFFERENCE  1560
FIND_TRAILING_BITS_TO_EA  1296
FIRST_3             10A4
FOURTH_3            10A7
GROUP0_INVALID      14B8
GROUP0_SUCCESS      14BC
GROUP1_INVALID      14E0
GROUP1_SUCCESS      14E4
GROUP2_INVALID      1540
GROUP2_SUCCESS      1544
GROUP3_INVALID      15A0
GROUP3_SUCCESS      15A4
GROUP_0             10DC
GROUP_1             10EE
GROUP_2             1100
GROUP_3             1112
GROUP_4             1124
GROUP_5             1136
GROUP_6             1148
GROUP_7             115A
GROUP_8             116C
GROUP_9             117E
GROUP_A             1190
GROUP_B             11A2
GROUP_C             11B4
GROUP_D             11C6
GROUP_E             11D8
GROUP_F             11EA
G_BUFFER            1003
INVALID_OP          1B54
LETTER_ASCII        1B76
LOAD_OP_CODE        10CA
MAKE_VAL_ASCII      1B68
MNEMONIC            10A3
MOVE_AND_MOVEA_PARSE_EA  1250
MOVE_LAST_6_BITS_TO_EA  1202
NUMBER_ASCII        1B7C
OP_FOUND            1D93
OP_JSR_DONE         11F8
OP_JSR_ROUTINE      10D4
PARSE_EA_CONSTANT_BITS  12AC
PRINT_OP            1D86
PRINT_OP_ADD        1D16
PRINT_OP_ADDA       1D24
PRINT_OP_ASL        1D5C
PRINT_OP_ASR        1D4E
PRINT_OP_BCS        1C7C
PRINT_OP_BGE        1C8A
PRINT_OP_BLT        1C98
PRINT_OP_BRA        1CB4
PRINT_OP_BVC        1CA6
PRINT_OP_CMP        1CFA
PRINT_OP_CMPI       1B9C
PRINT_OP_DIVS       1CC2
PRINT_OP_DYNAMIC_BCLR  1BB8
PRINT_OP_EOR        1CEC
PRINT_OP_JSR        1C1A
PRINT_OP_LEA        1C36
PRINT_OP_LSL        1D32
PRINT_OP_LSR        1D40
PRINT_OP_MOVEA_L    1BD4
PRINT_OP_MOVEA_W    1BF0
PRINT_OP_MOVEB      1BC6
PRINT_OP_MOVEM_L    1C60
PRINT_OP_MOVEM_W    1C52
PRINT_OP_MOVE_L     1BE2
PRINT_OP_MOVE_W     1BFE
PRINT_OP_MULS       1D08
PRINT_OP_NEG        1C44
PRINT_OP_NOP        1C0C
PRINT_OP_OR         1CD0
PRINT_OP_ORI        1B8E
PRINT_OP_ROL        1D6A
PRINT_OP_ROR        1D78
PRINT_OP_RTS        1C28
PRINT_OP_STATIC_BCLR  1BAA
PRINT_OP_SUB        1CDE
PRINT_OP_SUBQ       1C6E
P_INVALID_OP        1D8E
P_OP_ADD            1E38
P_OP_ADDA           1E33
P_OP_ASL            1E48
P_OP_ASR            1E44
P_OP_BCS            1E0A
P_OP_BGE            1E0E
P_OP_BLT            1E12
P_OP_BRA            1E06
P_OP_BVC            1E16
P_OP_CMP            1E2A
P_OP_CMPI           1DA9
P_OP_DIVS           1E1A
P_OP_DYNAMIC_BCLR   1DB3
P_OP_EOR            1E26
P_OP_JSR            1DF1
P_OP_LEA            1DED
P_OP_LSL            1E40
P_OP_LSR            1E3C
P_OP_MOVEA_L        1DBF
P_OP_MOVEA_L_A_L    10B4
P_OP_MOVEA_L_T      10A8
P_OP_MOVEA_W        1DCE
P_OP_MOVEB          1DB8
P_OP_MOVEM_L        1DE5
P_OP_MOVEM_W        1DDD
P_OP_MOVE_L         1DC7
P_OP_MOVE_W         1DD6
P_OP_MULS           1E2E
P_OP_NEG            1DFD
P_OP_NOP            1DF5
P_OP_OR             1E1F
P_OP_ORI            1DA5
P_OP_ROL            1E50
P_OP_ROR            1E4C
P_OP_RTS            1DF9
P_OP_STATIC_BCLR    1DAE
P_OP_SUB            1E22
P_OP_SUBQ           1E01
P_SIZE_B            1D9C
P_SIZE_L            1DA2
P_SIZE_W            1D9F
READ_NEXT_INSTRUCTION  1B64
RET_ADDSTRTOBUFFER_SUCCESS  1E60
SECOND_3            10A5
START               10BC
THIRD_3             10A6
_ADDSTRTOBUFFER_ADDLOOP  1E8C
_ADDSTRTOBUFFER_BUFFERLOOP  1E78
_ADDSTRTOBUFFER_END  1EAE
_ADDSTRTOBUFFER_LENGTHEXCEEDED  1EA8
_ADDSTRTOBUFFER_SUCCESS  1EA0
