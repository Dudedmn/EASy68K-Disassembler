000010C0 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/12/2019 9:29:40 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OP Code routines for Disassembler
00000000                             3  * Written by : Daniel Yan
00000000                             4  * Date       : 2/28/2019, Updated 3/9/2019
00000000                             5  
00000000                             6  * Description: Op code determining to identify values
00000000                             7  
00000000                             8  
00000000                             9  ;FAHAD CODE
00000000                            10  ; ORG place for G_BUFFER
00000000                            11  ; ORG place for CUR_OP_CODE
00000000                            12  ; ORG place for VALID_OP_CODE
00000000                            13  ; ORG place for all other constants
00000000                            14  ; ORG START $1000
00000000                            15  ; WE NEED TO SEE APPROX HOW MUCH ADDRESS SPACE ALL OUR ROUTINES COVER
00000000                            16  ; ORG OUR CONSTANTS/BUFFERS AT A SAFE DISTANCE BETWEEN ROUTINES AND TEST PROGRAM
00000000                            17  
00000000                            18  ; MEMORY_ADDRESS OPCODE $HEX_VALUE
00000000                            19  ;G_BUFFER
00000000                            20  ; 1254 MOVEA.L A3,A6, $3ASD
00000000                            21  ; 1254 RTS $4E75
00000000                            22  ;B_BUFFER
00000000                            23  ; 1254 DATA $CURRENT_OP
00000000                            24  
00000000                            25  ; JSR INVALID_OP
00000000                            26  ; 
00000000                            27  
00000000                            28  ; 8800 MOVEA.L A3,A6 $3FCA
00000000                            29  ; 8800 DATA $3FCA
00000000                            30  
00001000                            31    ORG $1000 ; Start at Address $1000
00001000                            32  CUR_OP_CODE DS.W 1  ; Current OP Code Word
00001002                            33  EA_SIZE     DS.B 1
00001003                            34  G_BUFFER    DS.B 80
00001053                            35  B_BUFFER    DS.B 80
000010A3                            36  MNEMONIC    DS.B 1
000010A4                            37  FIRST_3     DS.B 1
000010A5                            38  SECOND_3    DS.B 1
000010A6                            39  THIRD_3     DS.B 1
000010A7                            40  FOURTH_3    DS.B 1
000010A8                            41  
000010A8= 4D4F5645 412E4C00 ...     42  P_OP_MOVEA_L_T  DC.L    'MOVEA.L',0
000010B4= 412E4C00 00000000         43  P_OP_MOVEA_L_A_L DC.L   'A.L',0
000010BC  49F8 1003                 44      LEA G_BUFFER,A4
000010C0                            45      
000010C0                            46  
000010C0                            47  START
000010C0                            48      ; Start the op code routine
000010C0                            49      ;LEA G_BUFFER, A4
000010C0  18BC 0000                 50      MOVE.B #0, (A4)
000010C4                            51      
000010C4                            52      ;MOVE.L (A5)+, D0
000010C4                            53      
000010C4                            54      ; Load the message onto A4
000010C4                            55      ;MOVE.L #P_OP_MOVEA_L_T, Arg_AddStrToBuffer_String
000010C4                            56      ;MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer 
000010C4                            57      
000010C4                            58      
000010C4                            59      ;JSR AddStrToBuffer
000010C4                            60      ;LEA G_BUFFER, A4   ; Load the value of the message onto the G_BUFFER
000010C4                            61      ;MOVE.L P_OP_MOVEA_L_T,(A4)+
000010C4                            62      ;MOVE.L P_OP_MOVEA_L_A_L,(A4)+
000010C4                            63      
000010C4                            64      
000010C4                            65      
000010C4                            66  
000010C4                            67      ; AFTER THIS POINT THE BUFFER HAS THIS 'MOVE' + 'A.L'          ; Increment 4 spaces in the address
000010C4                            68      
000010C4                            69      
000010C4                            70         
000010C4                            71      
000010C4                            72     
000010C4                            73     ;This is the right area for pointer now, however when I add here it can't go
000010C4                            74     ;back 
000010C4                            75  *********************************************************************************
000010C4                            76  * Here I'm attempting to 'skip' forward in the address to find the proper location for the string
000010C4                            77  * In the prior command 'LEA P_OP_MOVEA_L,A4' I have loaded 'MOVE' into address space. I cannot move
000010C4                            78  * more than 4 bytes (long) at a single time, so I need to move 'A.L' after which is 3 more bytes
000010C4                            79  * So what I need to do is LOAD 'MOVE' into the address space, skip 4 bytes, then load 'A.L' right
000010C4                            80  * after 'MOVE'. So this would show 'MOVEA.L' in the address space. Which then Denny can load his stuff
000010C4                            81  * after mine.
000010C4                            82  *
000010C4                            83  *In the ideal world this would look something like: P_OP_MOVEA_L then P_OP_A_L then _P_OP_TAB
000010C4                            84  * which would appear as 'MOVEA.L    ' in the address space. This would require 4 increments
000010C4                            85  * after MOVE, then 'A.L' being inserted, then 3 increments (or 7 from start) for the tab
000010C4                            86  ********************************************************************************* 
000010C4                            87      
000010C4                            88      ;ADD.L $FFFF,G_BUFFER_PREP
000010C4                            89      ;LEA P_OP_A_L,A1
000010C4                            90      ;MOVE.L (A4),G_BUFFER_PREP
000010C4                            91      
000010C4                            92  ***************************** Input Tests ********************************************
000010C4                            93      ;MOVE.W #%0000100010000010,CUR_OP_CODE       ;Static BCLR
000010C4                            94      ;MOVE.W #%0000111110001110,CUR_OP_CODE       ;Dynamic BCLR
000010C4                            95      ;MOVE.W #%0000000001000001,CUR_OP_CODE       ;ORI.W D1
000010C4                            96          
000010C4                            97      ;MOVE.W #%0000111110001110,CUR_OP_CODE              ;Dynamic BCLR
000010C4                            98      ;IN HEX $018E. D7 = 110, D6 = 001, D4 = %110, D5 = 7, (A6) = %0000
000010C4                            99      ;MOVE.W #%0000100010001110,CUR_OP_CODE              ;Static BCLR
000010C4                           100      ;IN HEX $018E. D7 = 110, D6 = 001, D4 = %110, D5 = 7, (A6) = %0000
000010C4                           101     
000010C4                           102      ;MOVE.W  #$018E,CUR_OP_CODE                        ;Dynamic BCLR in hex
000010C4                           103      ;MOVE.W  #$02FF,CUR_OP_CODE                         ;INVALID_OP code
000010C4                           104      ;MOVE.W #%0000110001010111,CUR_OP_CODE
000010C4                           105      ;MOVE.W #%0010011001001101,CUR_OP_CODE                       ;MOVEA  
000010C4                           106       ;MOVE.W #%0010001001001101,CUR_OP_CODE              ;MOVEA.L A5,A1
000010C4                           107      ;MOVE.W CUR_OP_CODE,(A6)
000010C4                           108      ;MOVE.W #$264D
000010C4                           109      ;Expected values:
000010C4                           110      ;D7, DST REG:   011
000010C4                           111      ;D6, DST MODE:  001
000010C4                           112      ;D5, SRC REG:   101
000010C4                           113      ;D4, SRC MODE:  001
000010C4                           114      ;CHECK IF DST MODE IS %111 or SRC MODE IS %111 for MOVE
000010C4                           115      ;(A3), DST TRAIL:  001
000010C4                           116      ;(A2), SRC TRAIL: ONLY FOR MOVE
000010C4                           117      ;MOVE.W #%0010000000001101,CUR_OP_CODE              ;MOVE.L A5,A1
000010C4                           118      ;MOVE.W #%0011011001001101,CUR_OP_CODE              ;MOVEA.W A5,A1
000010C4                           119      ;MOVE.W #%1001011001111101,CUR_OP_CODE               ;MOVE TO TEST PARSE_EA_CONSTANT_BITS
000010C4                           120      ;MOVE.W #%0011000000001101,CUR_OP_CODE              ;MOVE.W A5,A1
000010C4                           121      ;MOVE.W #%0000000001000001,CUR_OP_CODE              ;ORI.W D1
000010C4                           122      ;MOVE.W CUR_OP_CODE,A6                              ;Loading memory space to address register
000010C4                           123      ;MOVE.W CUR_OP_CODE,(A6)                            ;Loading memory value to address value
000010C4                           124   
000010C4                           125      ****GROUP 4 tests****
000010C4                           126      ;MOVE.W #$4E75,CUR_OP_CODE                            ;RTS
000010C4                           127      ;MOVE.W #$4E71,CUR_OP_CODE                            ;NOP
000010C4                           128      ;MOVE.W #$4415,CUR_OP_CODE                            ;NEG.L D5
000010C4                           129      ;MOVE.W #$43CC,CUR_OP_CODE                            ;LEA A1,A6
000010C4                           130      ;MOVE.W #%0100100010001110,CUR_OP_CODE
000010C4                           131      ;MOVE.W #$488E,CUR_OP_CODE                            ;MOVEM.W Reg to Mem, A6
000010C4                           132      ;MOVE.W #$4C8E,CUR_OP_CODE                            ;MOVEM.W Mem to Reg, A6
000010C4                           133      ;MOVE.W #$4E95,CUR_OP_CODE                            ;JSR (A5)               
000010C4                           134      ****GROUP 5 tests****
000010C4                           135      ;MOVE.W #%0101111110001111
000010C4                           136      
000010C4                           137      *****GROUP 5 TESTS****
000010C4                           138      ;#%0101111100000101, SUBQ.B D5
000010C4                           139      ;MOVE.W #$5F05,CUR_OP_CODE ; for SUBQ.B D5
000010C4                           140      ;#%0101111110001110, SUBQ.L A6 
000010C4                           141      ;MOVE.W #$5F8E,CUR_OP_CODE
000010C4                           142      ******GROUP 5 VALIDATION TESTS**********
000010C4                           143      ;MOVE.W #%0101111000001110,CUR_OP_CODE  ; ADDQ
000010C4                           144      ;MOVE.W #%0101010011000110,CUR_OP_CODE ; Scc
000010C4                           145      ;MOVE.W #%0101010011001110,CUR_OP_CODE ; DBcc
000010C4                           146     
000010C4                           147      *****GROUP 6 TESTS********* SUPPORTED: BCS,BGE,BLT,BVC
000010C4                           148      ; DISPLACEMENT, $00 is 16 bits, $FF is 32 bits
000010C4                           149      ; DISPLACEMENT = Last 8 bits
000010C4                           150      ;MOVE.W #%0110000001010101,CUR_OP_CODE   ;BRA
000010C4                           151      ;MOVE.W #%0110010100000001,CUR_OP_CODE   ;BCS
000010C4                           152      ;MOVE.W #%0110110001010100,CUR_OP_CODE   ;BGE
000010C4  31FC 6DAA 1000           153      MOVE.W #%0110110110101010,CUR_OP_CODE   ;BLT
000010CA                           154      ;MOVE.W #%0110100001010100,CUR_OP_CODE   ;BVC
000010CA                           155      
000010CA                           156      *****GROUP 7 TESTS**********        ;Should be ALL INVALID
000010CA                           157      
000010CA                           158      *****GROUP 8 TESTS********** SUPPORTED: DIVS, OR
000010CA                           159      
000010CA                           160      *****GROUP 9 TESTS********** SUPPORTED: SUB
000010CA                           161      
000010CA                           162      *****GROUP A TESTS**********        ;Should be ALL INVALID
000010CA                           163      
000010CA                           164      *****GROUP B TESTS********** SUPPORTED: EOR, CMP
000010CA                           165      
000010CA                           166      *****GROUP C TESTS********** SUPPORTED: MULS
000010CA                           167      
000010CA                           168      *****GROUP D TESTS********** SUPPORTED: ADD, ADDA
000010CA                           169      
000010CA                           170      *****GROUP E TESTS********** SUPPORTED: LSX, ASX, ROX
000010CA                           171      
000010CA                           172      *****GROUP F TESTS**********        ;Should be ALL INVALID
000010CA                           173      
000010CA                           174      
000010CA                           175      
000010CA                           176  ************************************************************************************
000010CA                           177  * PRINTING BUFFER FUNCTION HAS BEEN FINISHED
000010CA                           178  *-----------------------------------------------------------
000010CA                           179  *First Nibble Values (15-12)
000010CA                           180  *Value                  Operations
000010CA                           181  *$0                     GROUP_0: ORI,BCLR (static and dynamic),CMPI --- DONE, need validation testing
000010CA                           182  *$1                     GROUP_1: MOVE.B                             --- DONE, need validation testing
000010CA                           183  *$2                     GROUP_2: MOVE.L, MOVEA.L                    --- DONE, need validation testing
000010CA                           184  *$3                     GROUP_3: MOVE.W, MOVEA.W                    --- Partial, needs trailing bits
000010CA                           185  *$4                     GROUP_4: LEA,JSR,RTS,NEG,MOVEM              --- Partial, needs SIZE print for NEG, MOVE
000010CA                           186  *$5                     GROUP_5: SUBQ                               --- Partial, needs SIZE pri
000010CA                           187  *$6                     GROUP_6: Bcc(BCS,BGE,BLT,BVC), BRA          --- Not started
000010CA                           188  *$7                     GROUP_7: INVALID_OP                         --- DONE
000010CA                           189  *$8                     GROUP_8: DIVS, OR                           --- Not started
000010CA                           190  *$9                     GROUP_9: SUB                                --- Not started
000010CA                           191  *$A                     GROUP_A: INVALID_OP                         --- DONE
000010CA                           192  *$B                     GROUP_B: EOR, CMP                           --- Not started
000010CA                           193  *$C                     GROUP_C: MULS                               --- Not started
000010CA                           194  *$D                     GROUP_D: ADD, ADDA                          --- Not started
000010CA                           195  *$E                     GROUP_E: LSR, LSL, ASR, ASL, ROL, ROR       --- Not started
000010CA                           196  *$F                     GROUP_F: INVALID_OP                         --- DONE
000010CA                           197  
000010CA                           198  
000010CA                           199  * OP_JSR_Routine
000010CA                           200  **********************************************************************************
000010CA                           201  * Description: Catalog all supported OP codes into groupings based on their hex
000010CA                           202  * values. Sort the supported OP codes by looking at the first nibble for their
000010CA                           203  * grouping value. Call underlying subroutines for further identification of the
000010CA                           204  * op code.
000010CA                           205  *
000010CA                           206  * Registers used: A6,D0,D1 
000010CA                           207  *
000010CA                           208  * Precondition: Instruction set (size Word) has been loaded in the appropriate
000010CA                           209  * address to be parsed and read.
000010CA                           210  
000010CA                           211  * Postcondition: OP code has been identified as either valid or invalid. If it is
000010CA                           212  * valid, it is stored into A6 and EA parsing methods are called to pass needed
000010CA                           213  * information to EA. If invalid, DATA output will be utilized to indicate so.
000010CA                           214  **********************************************************************************
000010CA                           215  * These valid operand codes refer to the basic supported operand codes
000010CA                           216  * Groups refer to the first nibble value that is supported by the operand
000010CA                           217  LOAD_OP_CODE:
000010CA  3038 1000                218      MOVE.W CUR_OP_CODE,D0
000010CE  3CB8 1000                219      MOVE.W CUR_OP_CODE,(A6)
000010D2  3016                     220      MOVE.W (A6),D0          ;Load current instruction set into D0
000010D4  4EB9 000010DA            221      JSR OP_JSR_Routine      ;Use the JSR routine to identify the op code
000010DA                           222  OP_JSR_Routine:
000010DA  48E7 C000                223      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
000010DE  720C                     224      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
000010E0  E2A8                     225      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
000010E2                           226  
000010E2                           227  GROUP_0:                ;$0| ORI, BCLR (static and dynamic), CMPI                  
000010E2  B03C 0000                228      CMP.B   #$0,D0                 ;Compare first nibble
000010E6  6600 000C                229      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
000010EA  4EB9 00001300            230      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
000010F0  6000 010C                231      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000010F4                           232      
000010F4                           233  GROUP_1:                ;$1| MOVE.B
000010F4  B03C 0001                234      CMP.B   #$1,D0                 ;Compare first nibble
000010F8  6600 000C                235      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
000010FC  4EB9 00001372            236      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
00001102  6000 00FA                237      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001106                           238  
00001106                           239  GROUP_2:                ;$2| MOVE.L, MOVEA.L
00001106  B03C 0002                240      CMP.B   #$2,D0                 ;Compare first nibble
0000110A  6600 000C                241      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
0000110E  4EB9 00001388            242      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
00001114  6000 00E8                243      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001118                           244  
00001118                           245  GROUP_3:                ;$3| MOVE.W, MOVEA.W
00001118  B03C 0003                246      CMP.B   #$3,D0                 ;Compare first nibble
0000111C  6600 000C                247      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
00001120  4EB9 000013CE            248      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
00001126  6000 00D6                249      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000112A                           250  
0000112A                           251  GROUP_4:                ;$4| LEA, JSR, RTS, NEG, MOVEM
0000112A  B03C 0004                252      CMP.B   #$4,D0                 ;Compare first nibble
0000112E  6600 000C                253      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
00001132  4EB9 00001414            254      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
00001138  6000 00C4                255      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000113C                           256  
0000113C                           257  
0000113C                           258  GROUP_5:                ;$5| SUBQ
0000113C  B03C 0005                259      CMP.B   #$5,D0                 ;Compare first nibble
00001140  6600 000C                260      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
00001144  4EB9 00001484            261      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
0000114A  6000 00B2                262      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000114E                           263  
0000114E                           264  
0000114E                           265  GROUP_6:                ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
0000114E  B03C 0006                266      CMP.B   #$6,D0                 ;Compare first nibble
00001152  6600 000C                267      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
00001156  4EB9 000014AC            268      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
0000115C  6000 00A0                269      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001160                           270  
00001160                           271  
00001160                           272  GROUP_7:                ;$7| Display: DATA, $WXYZ (Unsupported)
00001160  B03C 0007                273      CMP.B   #$7,D0                 ;Compare first nibble
00001164  6600 000C                274      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
00001168  4EB9 00001510            275      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
0000116E  6000 008E                276      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001172                           277  
00001172                           278  
00001172                           279  GROUP_8:                ;$8| DIVS, OR
00001172  B03C 0008                280      CMP.B   #$8,D0                 ;Compare first nibble
00001176  6600 000C                281      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
0000117A  4EB9 00001516            282      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
00001180  6000 007C                283      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001184                           284  
00001184                           285  
00001184                           286  GROUP_9:                ;$9| SUB
00001184  B03C 0009                287      CMP.B   #$9,D0                 ;Compare first nibble
00001188  6600 000C                288      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
0000118C  4EB9 00001558            289      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
00001192  6000 006A                290      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001196                           291  
00001196                           292  
00001196                           293  GROUP_A:                ;$A| Display: DATA, $WXYZ (Unsupported)
00001196  B03C 000A                294      CMP.B   #$A,D0                 ;Compare first nibble
0000119A  6600 000C                295      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
0000119E  4EB9 00001586            296      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
000011A4  6000 0058                297      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011A8                           298  
000011A8                           299  
000011A8                           300  GROUP_B:                ;$B| EOR, CMP
000011A8  B03C 000B                301      CMP.B   #$B,D0                 ;Compare first nibble
000011AC  6600 000C                302      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
000011B0  4EB9 0000158C            303      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
000011B6  6000 0046                304      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011BA                           305  
000011BA                           306  
000011BA                           307  GROUP_C:                ;$C| MULS
000011BA  B03C 000C                308      CMP.B   #$C,D0                 ;Compare first nibble
000011BE  6600 000C                309      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
000011C2  4EB9 000015DC            310      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
000011C8  6000 0034                311      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011CC                           312  
000011CC                           313  
000011CC                           314  GROUP_D:                 ;$D| ADD, ADDA
000011CC  B03C 000D                315      CMP.B   #$D,D0                 ;Compare first nibble
000011D0  6600 000C                316      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
000011D4  4EB9 000015F0            317      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
000011DA  6000 0022                318      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011DE                           319  
000011DE                           320  
000011DE                           321  GROUP_E:                ;$E| LSR, LSL, ASR, ASL, ROL, ROR
000011DE  B03C 000E                322      CMP.B   #$E,D0                 ;Compare first nibble
000011E2  6600 000C                323      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
000011E6  4EB9 0000161E            324      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
000011EC  6000 0010                325      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011F0                           326  
000011F0                           327  
000011F0                           328  GROUP_F:                ;$F| Display: DATA, $WXYZ (Unsupported)
000011F0  B03C 000F                329      CMP.B   #$F,D0                 ;Compare first nibble
000011F4  4EB9 0000175C            330      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
000011FA  6000 0002                331      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011FE                           332  
000011FE                           333  
000011FE                           334  OP_JSR_DONE:
000011FE  4CDF 0003                335           MOVEM.L (SP)+,D0-D1       ;Recover register D0
00001202  4EF9 00001772            336           JMP READ_NEXT_INSTRUCTION
00001208                           337  **********************************************************************************
00001208                           338  
00001208                           339  ********** EA Parsing ************************************************************
00001208                           340  
00001208                           341  * MOVE_LAST_6_BITS_TO_EA
00001208                           342  **********************************************************************************
00001208                           343  * Description: For OP codes with the last 6 bits specified as EA Mode and EA Reg,
00001208                           344  * the last 6 bits will be parsed and moved into the appropriate registers.
00001208                           345  *
00001208                           346  * Registers used: A6,D0,D1,D6,D7 
00001208                           347  
00001208                           348  * Precondition: OP code has been identified with only the last 6 bits for EA,
00001208                           349  * current instruction set is stored into A6.
00001208                           350  
00001208                           351  * Postcondition: Last 6 bits of instruction bit has been isolated and stored. Bits
00001208                           352  * for EA Mode have been stored in D7, Bits for EA Reg been stored in D6.
00001208                           353  **********************************************************************************
00001208                           354  MOVE_LAST_6_BITS_TO_EA:      ;Move last 6 bits from EA field to relevant registers
00001208                           355     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001208  3038 1000                356      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
0000120C  323C 000A                357      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
00001210  E368                     358      LSL.W   D1,D0            ;Truncate to find the last 6 bits
00001212  E268                     359      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
00001214  3E00                     360      MOVE.W  D0,D7            ;Move last 6 bits into D7
00001216  323C 0003                361      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
0000121A  E26F                     362      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
0000121C  3C07                     363      MOVE.W  D7,D6            ;Move the 'upper' 3 bits into D6
0000121E  323C 000D                364      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
00001222  E368                     365      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
00001224  E268                     366      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001226  3E00                     367      MOVE.W  D0,D7            ;Move the 'lower' 3 bits into D7
00001228                           368     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
00001228  4E75                     369      RTS                      ;Return to stack
0000122A                           370      
0000122A                           371  * FIND_2_BIT_SIZE_TO_EA
0000122A                           372  **********************************************************************************
0000122A                           373  * Description: For OP codes with 2 bit size fields, the 2 relevant bits (7-6) will 
0000122A                           374  * be parsed and moved to the appropriate registers.
0000122A                           375  *
0000122A                           376  * Registers used: A6,D0,D1,D5
0000122A                           377  *
0000122A                           378  * Precondition: OP code has been identified with 2 size bit field for EA, current
0000122A                           379  * instruction set for OP code is stored in to A6.
0000122A                           380  *
0000122A                           381  * Postcondition: 2 bit size field has been isolated and stored into D5.
0000122A                           382  **********************************************************************************
0000122A                           383  FIND_2_BIT_SIZE_TO_EA:      ;Move the 2 bit size field relevant register
0000122A                           384     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
0000122A  3038 1000                385      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
0000122E  323C 0008                386      MOVE.W   #8,D1          ;Prepare 8 bit shift to D1
00001232  E368                     387      LSL.W    D1,D0          ;Truncate to find the 2 size bits
00001234  E268                     388      LSR.W    D1,D0          ;Reposition the bits
00001236  323C 0006                389      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
0000123A  E268                     390      LSR.W    D1,D0          ;Truncate to shift 2 bits to a byte
0000123C  3800                     391      MOVE.W   D0,D4          ;Move 2 size bits into D5
0000123E                           392    ;  MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
0000123E  4E75                     393      RTS                     ;Return to stack
00001240                           394  **********************************************************************************
00001240                           395  
00001240                           396  * FIND_3_BIT_REG_TO_EA
00001240                           397  **********************************************************************************
00001240                           398  * Description: OP codes with a dynamic 3 bit register in bits 11-9 will be parsed
00001240                           399  * and have those 3 bits isolated and moved to the appropriate registers.
00001240                           400  *
00001240                           401  * Registers used: A6,D0,D1,D5
00001240                           402  *
00001240                           403  * Precondition: OP code has been identified with a dynamic 3 bit register in bits
00001240                           404  * 11-9.
00001240                           405  *
00001240                           406  * Postcondition: 3 bit dynamic register has been isolated and stored into D4.
00001240                           407  **********************************************************************************
00001240                           408  FIND_3_BIT_REG_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
00001240                           409     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
00001240  3038 1000                410      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
00001244  323C 0004                411      MOVE.W   #4,D1          ;Prepare 4 bit shift to D1
00001248  E368                     412      LSL.W    D1,D0          ;Truncate to find the 2 size bits
0000124A  E268                     413      LSR.W    D1,D0          ;Reposition the bits
0000124C  323C 0009                414      MOVE.W   #9,D1          ;Prepare 9 bit shift to D1
00001250  E268                     415      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
00001252  3A00                     416      MOVE.W   D0,D5          ;Move 3 register bits into D4
00001254                           417     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
00001254  4E75                     418      RTS                     ;Return to stack
00001256                           419  **********************************************************************************
00001256                           420  
00001256                           421  * MOVE_AND_MOVEA_PARSE_EA
00001256                           422  **********************************************************************************
00001256                           423  * Description: Special parsing for the SRC and DST Mode/Reg for MOVE/MOVE
00001256                           424  *
00001256                           425  * Registers used: A6,D0,D1,D7,D6,D5,D4
00001256                           426  *
00001256                           427  * Precondition: OP code has been identified with either MOVE or MOVEA
00001256                           428  *
00001256                           429  * Postcondition: Store all relevant EA bits into associated register.
00001256                           430  **********************************************************************************
00001256                           431  MOVE_AND_MOVEA_PARSE_EA:       ;Move the 3 bit dynamic register bits to proper register
00001256                           432     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001256  3038 1000                433      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
0000125A  323C 000A                434      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
0000125E  E368                     435      LSL.W   D1,D0            ;Truncate to find the last 6 bits
00001260  E268                     436      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
00001262  3E00                     437      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
00001264  323C 0003                438      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
00001268  E26F                     439      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
0000126A  3A07                     440      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
0000126C  323C 000D                441      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
00001270  E368                     442      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
00001272  E268                     443      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001274  3800                     444      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
00001276                           445      **************MOVING SOURCE*********** TO BE DONE LATER
00001276                           446      ; MOVE.W #%0011 011 001 001 101,(A6)              ;MOVEA.W A5,A3
00001276                           447      ; MOVE.W #%0010 011 001 001 101,D0                ;MOVEA.L A5,A3
00001276                           448       ;Expected values:
00001276                           449      ;D7, DST REG:   011
00001276                           450      ;D6, DST MODE:  001
00001276                           451      ;D5, SRC MODE:  001
00001276                           452      ;D4, SRC REG:   101
00001276                           453      ;00011001
00001276  3038 1000                454      MOVE.W CUR_OP_CODE,D0     ;Move current OP code into D0     
0000127A  323C 0004                455      MOVE.W  #4,D1             ;Prepare 4 bit shift to D1
0000127E  E368                     456      LSL.W   D1,D0             ;Truncate to find bits 11-6
00001280  E268                     457      LSR.W   D1,D0             ;Reposition bits
00001282  323C 0006                458      MOVE.W  #6,D1             ;Prepare 6 bit shift to D1
00001286  E268                     459      LSR.W   D1,D0             ;Truncate the SRC Reg/Mode bits
00001288  323C 0003                460      MOVE.W  #3,D1             ;Prepare a 3 bit shift to D1 for DST Reg/Mode
0000128C  3C00                     461      MOVE.W  D0,D6             ;Copy over the current 6 bits to D6
0000128E  E268                     462      LSR.W   D1,D0             ;Truncate DST Mode  
00001290  3E00                     463      MOVE.W  D0,D7             ;Move DST Reg to D7
00001292  323C 000D                464      MOVE.W  #13,D1             
00001296  E36E                     465      LSL.W   D1,D6             ;Truncate 13 bits in D6
00001298  E26E                     466      LSR.W   D1,D6             ;Reposition D6
0000129A                           467                                ;D6 now contains the DST Reg
0000129A                           468     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
0000129A  4E75                     469      RTS                     ;Return to stack
0000129C                           470  **********************************************************************************
0000129C                           471  
0000129C                           472  *FIND_TRAILING_BITS_TO_EA
0000129C                           473  **********************************************************************************
0000129C                           474  FIND_TRAILING_BITS_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
0000129C                           475     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
0000129C  3038 1000                476      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
000012A0  323C 0007                477      MOVE.W   #7,D1          ;Prepare 4 bit shift to D1
000012A4  E368                     478      LSL.W    D1,D0          ;Truncate to find the 2 size bits
000012A6  E268                     479      LSR.W    D1,D0          ;Reposition the bits
000012A8  323C 0006                480      MOVE.W   #6,D1          ;Prepare 9 bit shift to D1
000012AC  E268                     481      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
000012AE  3680                     482      MOVE.W   D0,(A3)          ;Move 3 register bits into D4
000012B0                           483     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
000012B0  4E75                     484      RTS                    ;Return to stack
000012B2                           485  **********************************************************************************
000012B2                           486  
000012B2                           487  *PARSE_EA_CONSTANT_BITS
000012B2                           488  **********************************************************************************
000012B2                           489  * Definition: Uses CUR_OP_CODE to shift the proper bits into the global constants
000012B2                           490  * used for EA (MNEMONIC,FIRST_3,SECOND_3,THIRD_3,FOURTH_3. Where MNEMONIC refers
000012B2                           491  * to the first 4 bits of CUR_OP_CODE (15-12), FIRST_3 refers to the first group
000012B2                           492  * of 3 bits (11-9), SECOND_3 refers to the second group of 3 bits (8-6), THIRD_3
000012B2                           493  * refers to the third group of 3 bits (5-3), and FOURTH_3 refers to the fourth
000012B2                           494  * group of 3 bits (2-0). Shifts CUR_OP_CODE bits to initialize constants.
000012B2                           495  *
000012B2                           496  * Registers used: D0,D1
000012B2                           497  *
000012B2                           498  * Precondition: CUR_OP_CODE has been set with an 4 hex instruction set
000012B2                           499  * 
000012B2                           500  * Postcondition: MNEMONIC, FIRST_3, SECOND_3, THIRD_3, FOURTH_3 have been set
000012B2                           501  * to the corresponding values.
000012B2                           502  **********************************************************************************
000012B2                           503  PARSE_EA_CONSTANT_BITS:
000012B2                           504      *MNEMONIC SHIFT
000012B2  3038 1000                505      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D0
000012B6  323C 000C                506      MOVE.W #12,D1               ;Prepare a bit shift of 12 into D1
000012BA  E268                     507      LSR.W D1,D0                 ;Shift 12 bits from D0 right
000012BC  11C0 10A3                508      MOVE.B D0,MNEMONIC          ;Set MNEMONIC to D0
000012C0                           509      *FIRST_3 SHIFT
000012C0  323C 0009                510      MOVE.W #9,D1                ;Prepare a bit shift of 9 into D1
000012C4  3038 1000                511      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012C8  E948                     512      LSL.W #4,D0                 ;Shift out bits 15-12 in D0
000012CA  E848                     513      LSR.W #4,D0                 ;Reposition D0
000012CC  E268                     514      LSR.W  D1,D0                ;Shift D0 9 bits right
000012CE  11C0 10A4                515      MOVE.B D0,FIRST_3           ;Set FIRST_3 to D0
000012D2                           516      *SECOND_3 SHIFT
000012D2  3038 1000                517      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012D6  EF48                     518      LSL.W #7,D0                 ;Shift out bits 15-9 in D0
000012D8  EE48                     519      LSR.W #7,D0                 ;Reposition D0
000012DA  EC48                     520      LSR.W #6,D0                 ;Shift D0 6 bits right
000012DC  11C0 10A5                521      MOVE.B D0,SECOND_3          ;Set SECOND_3 to D0
000012E0                           522      *THIRD_3 SHIFT
000012E0  3038 1000                523      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012E4  E648                     524      LSR.W #3,D0                 ;Shift D0 3 bits right
000012E6  323C 000D                525      MOVE.W #13,D1               ;Prepare a 13 bit shift into D1
000012EA  E368                     526      LSL.W D1,D0                 ;Truncate first 13 bits of D0
000012EC  E268                     527      LSR.W D1,D0                 ;Reposition D0
000012EE  11C0 10A6                528      MOVE.B D0,THIRD_3           ;Set THIRD_3 to D0
000012F2                           529      *FOURTH_3 SHIFT
000012F2  3038 1000                530      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012F6  E368                     531      LSL.W D1,D0                 ;Grab the fourth 3-bit group
000012F8  E268                     532      LSR.W D1,D0                 ;Shift D0 back into position
000012FA  11C0 10A7                533      MOVE.B D0,FOURTH_3          ;Set FOURTH_3 to Do
000012FE  4E75                     534      RTS                         ;Return to stack
00001300                           535  **********************************************************************************
00001300                           536  ********** End of EA Parsing *****************************************************
00001300                           537  
00001300                           538  *******************JMP LABELS ****************************************************
00001300                           539  * Labelling for group codes will be in the following format
00001300                           540  
00001300                           541  * <JMP Labelname>
00001300                           542  ********************************************************************************
00001300                           543  * Checking List Order (If more than one value)
00001300                           544  * Operand1 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
00001300                           545  * Operand2 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
00001300                           546  
00001300                           547  * Where a-b will refer to the bit corresponding bit value in the instruction
00001300                           548  * format, and a specifier will be attached such as Size, EA Mode, SRC Reg, etc
00001300                           549  * to clarify what a specific bit range means.
00001300                           550  * Checking order refers to what order the checks will be performed in. 
00001300                           551  * Any other code outside of the listed ones will be INVALID_OP.
00001300                           552  ********************************************************************************
00001300                           553  
00001300                           554  ********************************************************************************
00001300                           555  * Global Field Descriptions
00001300                           556  * Size Field: Byte = 00 Word = 01 Long = 10
00001300                           557  * EA Mode: Refer to EA Address Modes
00001300                           558  * EA Reg: 3-bit input that is mapped to the respective binary value
00001300                           559  ********************************************************************************
00001300                           560  
00001300                           561  * GROUP_0                      
00001300                           562  ********************************************************************************
00001300                           563  * Description: Checks for the following listed OP codes to be present or not
00001300                           564  *
00001300                           565  * ORI: $00, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001300                           566  * CMPI: $0C, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001300                           567  * Dynamic BCLR: $0, 11-9 Register, 8-6 %110, 5-3 EA Mode, 2-0 EA Reg
00001300                           568  * Static BCLR: $01, 7-6 10, 5-3 EA Mode, 2-0 EA Reg
00001300                           569  *
00001300                           570  * Registers used: D0
00001300                           571  *
00001300                           572  * Precondition: First nibble has been identified as $0
00001300                           573  *
00001300                           574  * Postcondition: Parses proper OP code with a nibble value of $0 or finds an
00001300                           575  * invalid OP code. After a successful parse loading for EA values will be done
00001300                           576  * through a subroutine.
00001300                           577  ********************************************************************************
00001300                           578  C_GROUP_0:
00001300  48E7 C000                579      MOVEM.L D0-D1, -(SP)        ;Backup registers
00001304                           580      
00001304                           581  CHECK_OP_ORI:
00001304  3038 1000                582      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D
00001308  0240 FF00                583      ANDI.W  #$FF00,D0           ;Mask relevant bits to D0
0000130C  B07C 0000                584      CMP.W   #$0000,D0           ;Compare the appropriate masked bits     
00001310  6600 000C                585      BNE     CHECK_OP_CMPI       ;Branch to next comparison if not equal
00001314  4EB9 0000179C            586      JSR     PRINT_OP_ORI        ;Print the OP code if equal    
0000131A  6000 0054                587      BRA     CG0_C               ;Finish routine
0000131E                           588  CHECK_OP_CMPI:
0000131E  3038 1000                589      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D
00001322  0240 FF00                590      ANDI.W  #$FF00,D0           ;Mask relevant bits to D0
00001326  B07C 0C00                591      CMP.W   #$0C00,D0           ;Compare the appropriate masked bits   
0000132A  6600 000C                592      BNE     CHECK_OP_S_BCLR     ;Branch to next comparison if not equal       
0000132E  4EB9 000017AA            593      JSR     PRINT_OP_CMPI       ;Print the OP code if equal
00001334  6000 003A                594      BRA     CG0_C               ;Finish routine
00001338                           595  CHECK_OP_S_BCLR:
00001338  3038 1000                596      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D
0000133C  0240 FF00                597      ANDI.W  #$FF00,D0           ;Mask relevant bits to D0
00001340  B07C 0800                598      CMP.W   #$0800,D0           ;Compare the appropriate masked bits
00001344  6600 000C                599      BNE     CHECK_OP_D_BCLR     ;Branch to next comparison if not equal
00001348  4EB9 000017B8            600      JSR     PRINT_OP_S_BCLR     ;Print the OP code if equal
0000134E                           601      ;MOVEM.L (SP)+,D6-D7        ;POP STACK
0000134E  6000 0020                602      BRA     CG0_C               ;Finish routine
00001352                           603  CHECK_OP_D_BCLR:
00001352  3038 1000                604      MOVE.W  CUR_OP_CODE,D0        ;Move current instruction set into D
00001356  0240 0180                605      ANDI.W  #%0000000110000000,D0 ;Do a direct binary bitmask to see which bits are needed
0000135A  B07C 0180                606      CMP.W   #%0000000110000000,D0 ;Compare the expected binary value
0000135E  6600 000C                607      BNE     CG0_F                 ;If not equal this must be an invalid OP code
00001362  4EB9 000017C6            608      JSR     PRINT_OP_D_BCLR       ;Print the OP code if equal
00001368  6000 0006                609      BRA     CG0_C                 ;Finish routine
0000136C                           610  CG0_F:                            ;Checks have been finished, invalid OP code has been found
0000136C  6000 03F4                611      BRA INVALID_OP    
00001370                           612  CG0_C:                            ;Checks have been finished,a valid OP code has been found
00001370  4E75                     613      RTS                           ;Return to stack
00001372                           614      
00001372                           615  * GROUP_1                      
00001372                           616  ********************************************************************************
00001372                           617  * MOVE.B: $1, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
00001372                           618  ********************************************************************************
00001372                           619  C_GROUP_1:
00001372                           620  
00001372                           621  CHECK_OP_MOVE_B:
00001372  3038 1000                622      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0          
00001376  0240 FF00                623      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
0000137A  B07C 1000                624      CMP.W #$1000,D0                 ;Compare the appropriate masked bits 
0000137E  6600 03E2                625      BNE INVALID_OP                  ;Invalid OP code has been found
00001382  6700 0450                626      BEQ PRINT_OP_MOVEB              ;Print the OP code if equal
00001386  4E75                     627      RTS                             ;Return to stack
00001388                           628  * GROUP_2
00001388                           629  ********************************************************************************
00001388                           630  * MOVEA.L: $2, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
00001388                           631  * MOVE.L: $2, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
00001388                           632  ********************************************************************************
00001388                           633  C_GROUP_2:
00001388                           634  
00001388                           635  CHECK_OP_MOVEA_L:
00001388  3038 1000                636      MOVE.W CUR_OP_CODE,D0                  ;Move current instruction set into D0  
0000138C  0240 FF00                637      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001390  B07C 2000                638      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
00001394  6000 0002                639      BRA FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
00001398                           640  
00001398                           641      
00001398                           642  FIND_MOVEA_L_DIFFERENCE:    ;Finds difference between MOVEA and MOVE
00001398  3038 1000                643      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
0000139C  323C 0007                644      MOVE.W   #7,D1          ;Prepare 7 bit shift to D1
000013A0  E368                     645      LSL.W    D1,D0          ;Truncate to find the 3 address mode bits
000013A2  E268                     646      LSR.W    D1,D0          ;Reposition the bits
000013A4  323C 0006                647      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
000013A8  E268                     648      LSR.W    D1,D0          ;Truncate to shift 3 bits to a register
000013AA  3C00                     649      MOVE.W   D0,D6          ;Move 3 address mode bits into D6
000013AC  BC7C 0001                650      CMP.W   #$1,D6          ;Check if the address mode value is MOVEA
000013B0  6600 0006                651      BNE     CHECK_OP_MOVE_L  ;Branch if not equal to check MOVE
000013B4  6700 042C                652      BEQ     PRINT_OP_MOVEA_L ;Print out the MOVEA address 
000013B8                           653      
000013B8                           654  CHECK_OP_MOVE_L:
000013B8  3038 1000                655      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000013BC  0240 FF00                656      ANDI.W #$FF00,D0
000013C0  B07C 2000                657      CMP.W #$2000,D0
000013C4  6600 039C                658      BNE INVALID_OP
000013C8  6700 0426                659      BEQ PRINT_OP_MOVE_L
000013CC  4E75                     660      RTS
000013CE                           661      
000013CE                           662  * GROUP_3
000013CE                           663  ********************************************************************************
000013CE                           664  * MOVEA.W: $3, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
000013CE                           665  * MOVE.W: $3, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000013CE                           666  ********************************************************************************
000013CE                           667  C_GROUP_3:
000013CE                           668  
000013CE                           669  CHECK_OP_MOVEA_W:
000013CE  3038 1000                670      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000013D2  0240 FF00                671      ANDI.W #$FF00,D0
000013D6  B07C 3000                672      CMP.W #$3000,D0
000013DA  6000 0002                673      BRA FIND_MOVEA_W_DIFFERENCE
000013DE                           674  
000013DE                           675      
000013DE                           676  FIND_MOVEA_W_DIFFERENCE:      ;Finds difference between MOVEA and MOVE
000013DE  3038 1000                677      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
000013E2  323C 0007                678      MOVE.W   #7,D1          ;Prepare 7 bit shift to D1
000013E6  E368                     679      LSL.W    D1,D0          ;Truncate to find the 3 address mode bits
000013E8  E268                     680      LSR.W    D1,D0          ;Reposition the bits
000013EA  323C 0006                681      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
000013EE  E268                     682      LSR.W    D1,D0          ;Truncate to shift 3 bits to a register
000013F0  3C00                     683      MOVE.W   D0,D6          ;Move 3 address mode bits into D6
000013F2  BC7C 0001                684      CMP.W   #$1,D6          ;Check if the address mode value is MOVEA
000013F6  6600 0006                685      BNE     CHECK_OP_MOVE_W 
000013FA  6700 0402                686      BEQ     PRINT_OP_MOVEA_W  
000013FE                           687      
000013FE                           688  CHECK_OP_MOVE_W:
000013FE  3038 1000                689      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001402  0240 FF00                690      ANDI.W #$FF00,D0
00001406  B07C 3000                691      CMP.W #$3000,D0
0000140A  6600 0356                692      BNE INVALID_OP
0000140E  6700 03FC                693      BEQ PRINT_OP_MOVE_W
00001412  4E75                     694      RTS
00001414                           695  
00001414                           696  * GROUP_4
00001414                           697  ********************************************************************************
00001414                           698  * LEA: $4, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00001414                           699  * JSR: $4E, 7-6 %10, 5-3 EA Mode, 2-0 EA Reg 
00001414                           700  * RTS: $4E75
00001414                           701  * NEG: $44, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001414                           702  * MOVEM: $4, 11 %1, 10 %D, 9-7 %001, 6 S, 5-3 EA Mode, 2-0 EA Reg
00001414                           703  * %D = 0 , Register to Memory, 1 Memory to Register
00001414                           704  ********************************************************************************
00001414                           705  C_GROUP_4:
00001414                           706  CHECK_OP_RTS:
00001414  3038 1000                707      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001418  B07C 4E75                708      CMP.W  #$4E75,D0
0000141C  6600 0006                709      BNE    CHECK_OP_NOP
00001420  6700 0414                710      BEQ    PRINT_OP_RTS
00001424                           711      
00001424                           712  CHECK_OP_NOP:
00001424  3038 1000                713      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001428  B07C 4E71                714      CMP.W  #$4E71,D0
0000142C  6600 0006                715      BNE    CHECK_OP_LEA
00001430  6700 03E8                716      BEQ    PRINT_OP_NOP
00001434                           717      
00001434                           718  CHECK_OP_LEA:
00001434  3038 1000                719      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001438  0240 F1C0                720      ANDI.W #$F1C0,D0
0000143C  B07C 41C0                721      CMP.W  #$41C0,D0
00001440  6600 0006                722      BNE    CHECK_OP_JSR
00001444  6700 03FE                723      BEQ    PRINT_OP_LEA
00001448                           724      
00001448                           725  CHECK_OP_JSR:
00001448  3038 1000                726      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
0000144C  0240 FFC0                727      ANDI.W #$FFC0,D0
00001450  B07C 4E80                728      CMP.W  #$4E80,D0
00001454  6600 0006                729      BNE    CHECK_OP_NEG
00001458  6700 03CE                730      BEQ    PRINT_OP_JSR
0000145C                           731      
0000145C                           732  CHECK_OP_NEG:
0000145C  3038 1000                733      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001460  0240 FF00                734      ANDI.W #$FF00,D0
00001464  B07C 4400                735      CMP.W  #$4400,D0
00001468  6600 0006                736      BNE    CHECK_OP_MOVEM
0000146C  6700 03E4                737      BEQ    PRINT_OP_NEG
00001470                           738  **************** COME BACK TO FINISH UP SIZE **********************************
00001470                           739  CHECK_OP_MOVEM:
00001470  3038 1000                740      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001474  0240 FB80                741      ANDI.W #$FB80,D0
00001478  B07C 4880                742      CMP.W  #$4880,D0
0000147C  6600 02E4                743      BNE    INVALID_OP
00001480  6700 03DE                744      BEQ    PRINT_OP_MOVEM_W
00001484                           745      
00001484                           746  * GROUP_5
00001484                           747  ********************************************************************************
00001484                           748  * SUBQ: $5, 11-9 DATA, 8 %1, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001484                           749  * Validation checking:
00001484                           750  * Check against, ADDQ, Scc, DBcc
00001484                           751  ********************************************************************************
00001484                           752  C_GROUP_5:
00001484                           753  
00001484                           754  VALID_CHECK_OP_SUBQ:
00001484  3038 1000                755      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001488  0240 F1C0                756      ANDI.W #$F1C0,D0        ;Bitmask check for Scc, DBcc and ADDQ
0000148C  B07C 51C0                757      CMP.W  #$51C0,D0        ;This should be the only valid one for SUBQ
00001490  6700 02D0                758      BEQ    INVALID_OP       ;If not equal it's invalid
00001494  6600 0002                759      BNE    CHECK_OP_SUBQ
00001498                           760  CHECK_OP_SUBQ     
00001498  3038 1000                761      MOVE.W  CUR_OP_CODE,D0  ;Actual check for SUBQ
0000149C  0240 F100                762      ANDI.W #$F100,D0        ;Bitmask check for SUBQ
000014A0  B07C 5100                763      CMP.W  #$5100,D0        ;Compare the proper value
000014A4  6700 03D6                764      BEQ    PRINT_OP_SUBQ    ;If equal print it out
000014A8  6600 02B8                765      BNE    INVALID_OP       ;Else the operand is invalid
000014AC                           766      
000014AC                           767  * GROUP_6
000014AC                           768  ********************************************************************************
000014AC                           769  * BRA: $60, 7-0 8-Bit Displacement
000014AC                           770  * Bcc: $6, 11-8 Condition, 7-0 8-Bit Displacement
000014AC                           771  *   Branch: <Condition>   
000014AC                           772  *   BCS: %0101          
000014AC                           773  *   BGE: %1100      
000014AC                           774  *   BLT: %1101  
000014AC                           775  *   BVC: %1000
000014AC                           776  *   
000014AC                           777  *   MOVE.W #%0110010100000000   ;BCS
000014AC                           778  *   MOVE.W #%0110110001010101   ;BGE
000014AC                           779  *   MVE.W #%0110110110101010    ;BLT
000014AC                           780  *   MOVE.W #%0110100001010101   ;BVC
000014AC                           781  ********************************************************************************
000014AC                           782  C_GROUP_6:
000014AC                           783  
000014AC                           784  CHECK_OP_BRA:
000014AC  3038 1000                785      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0       
000014B0  0240 FF00                786      ANDI.W #$FF00,D0
000014B4  B07C 6000                787      CMP.W  #$6000,D0
000014B8  6700 0408                788      BEQ     PRINT_OP_BRA
000014BC  6600 0002                789      BNE     CHECK_OP_BCS
000014C0                           790  
000014C0                           791  CHECK_OP_BCS:
000014C0  3038 1000                792      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000014C4  0240 FF00                793      ANDI.W #$FF00,D0
000014C8  B07C 6500                794      CMP.W  #$6500,D0 
000014CC  6700 03BC                795      BEQ    PRINT_OP_BCS
000014D0  6600 0002                796      BNE    CHECK_OP_BGE
000014D4                           797      
000014D4                           798  CHECK_OP_BGE:
000014D4  3038 1000                799      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000014D8  0240 FF00                800      ANDI.W #$FF00,D0
000014DC  B07C 6C00                801      CMP.W  #$6C00,D0 
000014E0  6700 03B6                802      BEQ    PRINT_OP_BGE
000014E4  6600 0002                803      BNE    CHECK_OP_BLT
000014E8                           804      
000014E8                           805  CHECK_OP_BLT:
000014E8  3038 1000                806      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000014EC  0240 FF00                807      ANDI.W #$FF00,D0
000014F0  B07C 6D00                808      CMP.W  #$6D00,D0 
000014F4  6700 03B0                809      BEQ    PRINT_OP_BLT
000014F8  6600 0002                810      BNE    CHECK_OP_BVC
000014FC                           811      
000014FC                           812  CHECK_OP_BVC:
000014FC  3038 1000                813      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001500  0240 FF00                814      ANDI.W #$FF00,D0
00001504  B07C 6800                815      CMP.W  #$6800,D0 
00001508  6700 03AA                816      BEQ    PRINT_OP_BVC
0000150C  6600 0254                817      BNE    INVALID_OP
00001510                           818      
00001510                           819      
00001510                           820  *GROUP_7
00001510                           821  ********************************************************************************
00001510                           822  * Currently no OP codes here are supported.
00001510                           823  ********************************************************************************
00001510                           824  C_GROUP_7:
00001510  4EF9 00001762            825      JMP INVALID_OP
00001516                           826  
00001516                           827  * GROUP_8
00001516                           828  ********************************************************************************
00001516                           829  * Supported:
00001516                           830  * DIVS: $8, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00001516                           831  * OR: $80, 7-6 Size, 5-3 EA Mode, 2-0 EA Register
00001516                           832  * Unsupported: DIVU, SBCD
00001516                           833  ********************************************************************************
00001516                           834  C_GROUP_8:
00001516                           835  
00001516                           836  CHECK_OP_DIVS:
00001516  3038 1000                837      MOVE CUR_OP_CODE,D0   ;Move current instruction set into D0
0000151A  0240 F1C0                838      ANDI.W #$F1C0,D0
0000151E  B07C 81C0                839      CMP.W #$81C0,D0
00001522  6700 03AC                840      BEQ PRINT_OP_DIVS
00001526  6600 002A                841      BNE CHECK_OP_OR
0000152A                           842      
0000152A                           843  CHECK_OP_DIVU:
0000152A  3038 1000                844      MOVE CUR_OP_CODE,D0   ;Move current instruction set into D0
0000152E  0240 F1C0                845      ANDI.W #$F1C0,D0
00001532  B07C 80C0                846      CMP.W #$80C0,D0
00001536  6700 022A                847      BEQ INVALID_OP
0000153A  6600 0002                848      BNE CHECK_OP_SBCD
0000153E                           849      
0000153E                           850  CHECK_OP_SBCD:
0000153E  3038 1000                851      MOVE CUR_OP_CODE,D0   ;Move current instruction set into D0
00001542  0240 F100                852      ANDI.W #$F100,D0
00001546  B07C 8100                853      CMP.W #$8100,D0
0000154A  6700 0216                854      BEQ INVALID_OP
0000154E  6600 0002                855      BNE CHECK_OP_OR
00001552                           856      
00001552                           857  CHECK_OP_OR:              ;At this point only remaining $8 code is OR
00001552  4EF9 000018DE            858      JMP PRINT_OP_OR
00001558                           859  * GROUP_9                      
00001558                           860  ********************************************************************************
00001558                           861  * Supported
00001558                           862  * SUB: $9, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001558                           863  * Unsupported: SUBX, SUBA
00001558                           864  ********************************************************************************
00001558                           865  C_GROUP_9:
00001558                           866  
00001558                           867  CHECK_OP_SUBA:             ;Check SUBA first as it has static bits
00001558  3038 1000                868      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000155C  0240 F0C0                869      ANDI.W #$F0C0,D0
00001560  B07C 90C0                870      CMP.W #$90C0,D0
00001564  6700 01FC                871      BEQ INVALID_OP
00001568  6600 0002                872      BNE CHECK_OP_SUBX
0000156C                           873  
0000156C                           874  CHECK_OP_SUBX:
0000156C  3038 1000                875      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001570  0240 F130                876      ANDI.W #$F130,D0
00001574  B07C 9100                877      CMP.W #$9100,D0
00001578  6700 01E8                878      BEQ INVALID_OP
0000157C  6600 0002                879      BNE CHECK_OP_SUB
00001580                           880  
00001580                           881  CHECK_OP_SUB:           ;At this point only remaining $9 is SUB
00001580  4EF9 000018EC            882      JMP PRINT_OP_SUB
00001586                           883  
00001586                           884  *GROUP_A
00001586                           885  ********************************************************************************
00001586                           886  * Currently no OP codes here are supported. There are no current OP codes here.
00001586                           887  ********************************************************************************
00001586                           888  C_GROUP_A:
00001586  4EF9 00001762            889      JMP INVALID_OP
0000158C                           890  
0000158C                           891  * GROUP_B                     
0000158C                           892  ********************************************************************************
0000158C                           893  * Supported:
0000158C                           894  * EOR: $B, 11-9 Reg, 8 %1, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
0000158C                           895  * CMP: $B, 11-9 Reg, 8 %0, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
0000158C                           896  * The specific bit difference is listed 
0000158C                           897  * Unsupported: CMPM, CMPA
0000158C                           898  ********************************************************************************
0000158C                           899  C_GROUP_B:
0000158C                           900  
0000158C                           901  CHECK_OP_CMPM
0000158C  3038 1000                902      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001590  0240 F138                903      ANDI.W #$F138,D0
00001594  B07C B108                904      CMP.W  #$B108,D0
00001598  6700 01C8                905      BEQ INVALID_OP
0000159C  6600 0002                906      BNE CHECK_OP_CMPA
000015A0                           907      
000015A0                           908  CHECK_OP_CMPA:
000015A0  3038 1000                909      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000015A4  0240 F0C0                910      ANDI.W #$F0C0,D0
000015A8  B07C B0C0                911      CMP.W  #$B0C0,D0
000015AC  6700 01B4                912      BEQ INVALID_OP
000015B0  6600 0002                913      BNE CHECK_OP_EOR
000015B4                           914      
000015B4                           915  CHECK_OP_EOR:
000015B4  3038 1000                916      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000015B8  0240 F100                917      ANDI.W #$F100,D0
000015BC  B07C B100                918      CMP.W #$B100,D0
000015C0  6700 0338                919      BEQ PRINT_OP_EOR
000015C4  6600 0002                920      BNE CHECK_OP_CMP
000015C8                           921      
000015C8                           922  CHECK_OP_CMP:
000015C8  3038 1000                923      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000015CC  0240 F100                924      ANDI.W #$F100,D0
000015D0  B07C B000                925      CMP.W #$B000,D0
000015D4  6700 0332                926      BEQ PRINT_OP_CMP
000015D8  6600 0188                927      BNE INVALID_OP
000015DC                           928      
000015DC                           929  * GROUP_C                     
000015DC                           930  ********************************************************************************
000015DC                           931  * Supported:
000015DC                           932  * MULS: $C, 11-8 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
000015DC                           933  * Unsupported: MULU, ABCD, EXG, AND
000015DC                           934  * Note: EXG OP mode has to be 01000, 01001, 10001, as such can never be 11 for
000015DC                           935  * bits 7-6
000015DC                           936  ********************************************************************************
000015DC                           937  C_GROUP_C:
000015DC                           938  
000015DC                           939  CHECK_OP_MULS:
000015DC  3038 1000                940      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000015E0  0240 F1C0                941      ANDI.W #$F1C0,D0
000015E4  B07C C1C0                942      CMP.W #$C1C0,D0
000015E8  6700 032C                943      BEQ PRINT_OP_MULS
000015EC  6600 0174                944      BNE INVALID_OP          ; This can only be the supported operand
000015F0                           945  
000015F0                           946  * GROUP_D                     
000015F0                           947  ********************************************************************************
000015F0                           948  * Supported:
000015F0                           949  * ADD: $D, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
000015F0                           950  * ADDA: $D, 11- 9 Reg, 8-6 OPMODE, 7-6 %11, 5-3 EA Mode, 2-0 EA Reg
000015F0                           951  * The specific bit difference is listed out in the OPMODE field.
000015F0                           952  * Unsupported: ADDX
000015F0                           953  ********************************************************************************
000015F0                           954  C_GROUP_D:
000015F0                           955  
000015F0                           956  CHECK_OP_ADDX:
000015F0  3038 1000                957      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000015F4  0240 F130                958      ANDI.W #$F130,D0
000015F8  B07C D100                959      CMP.W #$D100,D0
000015FC  6700 0164                960      BEQ   INVALID_OP
00001600  6600 0002                961      BNE CHECK_OP_ADDA
00001604                           962  
00001604                           963  CHECK_OP_ADDA:
00001604  3038 1000                964      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001608  0240 F0C0                965      ANDI.W #$F0C0,D0
0000160C  B07C D0C0                966      CMP.W #$D0C0,D0
00001610  6700 0320                967      BEQ   PRINT_OP_ADDA
00001614  6600 0002                968      BNE   CHECK_OP_ADD
00001618                           969  
00001618                           970  CHECK_OP_ADD:
00001618  4EF9 00001924            971      JMP PRINT_OP_ADD        ;Only remaining OP in $D is ADD
0000161E                           972  * GROUP_E                     
0000161E                           973  ********************************************************************************
0000161E                           974  * Supported:
0000161E                           975  * LSR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
0000161E                           976  * LSL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
0000161E                           977  * ASR: $E, $0, 8 %0, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
0000161E                           978  * ASL: $E, $0, 8 %1, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
0000161E                           979  * ROR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
0000161E                           980  * ROL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
0000161E                           981  * Count/Reg for LSR/LSL refers to shift count, where 0 = shift count of 8, 1-7 
0000161E                           982  * refers to the respective value when i/r = 0. If i/r = 1, data register in the 
0000161E                           983  * Count/Reg field specifies the shift count.  
0000161E                           984  * For directional bit at 8, R = 0, L = 1
0000161E                           985  * Count/Reg for ROR/ROL specifies rotate count instead of shift count.
0000161E                           986  *
0000161E                           987  * Unsupported: ROXL, ROXR
0000161E                           988  ********************************************************************************
0000161E                           989  C_GROUP_E:
0000161E                           990  
0000161E                           991  CHECK_OP_ROXR_NO_ROT:
0000161E  3038 1000                992      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001622  0240 F4C0                993      ANDI.W #$F4C0,D0
00001626  B07C E4C0                994      CMP.W #$E4C0,D0
0000162A  6700 0136                995      BEQ   INVALID_OP
0000162E  6600 0002                996      BNE   CHECK_OP_ROXL_NO_ROT
00001632                           997  
00001632                           998  CHECK_OP_ROXL_NO_ROT:
00001632  3038 1000                999      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001636  0240 F5C0               1000      ANDI.W #$F5C0,D0
0000163A  B07C E5C0               1001      CMP.W #$E5C0,D0
0000163E  6700 0122               1002      BEQ   INVALID_OP
00001642  6600 002A               1003      BNE   CHECK_OP_LSR_NO_ROT
00001646                          1004  
00001646                          1005  CHECK_OP_ROR_NO_ROT:
00001646  3038 1000               1006      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000164A  0240 F7C0               1007      ANDI.W #$F7C0,D0
0000164E  B07C E6C0               1008      CMP.W #$E6C0,D0
00001652  6700 0332               1009      BEQ   PRINT_OP_ROR
00001656  6600 0002               1010      BNE   CHECK_OP_ROL_NO_ROT
0000165A                          1011      
0000165A                          1012  CHECK_OP_ROL_NO_ROT:
0000165A  3038 1000               1013      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000165E  0240 F7C0               1014      ANDI.W #$F7C0,D0
00001662  B07C E7C0               1015      CMP.W #$E7C0,D0
00001666  6700 0310               1016      BEQ   PRINT_OP_ROL
0000166A  6600 0002               1017      BNE   CHECK_OP_LSR_NO_ROT
0000166E                          1018   
0000166E                          1019  CHECK_OP_LSR_NO_ROT:
0000166E  3038 1000               1020      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001672  0240 F2C0               1021      ANDI.W #$F2C0,D0
00001676  B07C E2C0               1022      CMP.W #$E2C0,D0
0000167A  6700 02D2               1023      BEQ   PRINT_OP_LSR
0000167E  6600 0002               1024      BNE   CHECK_OP_LSL_NO_ROT
00001682                          1025  
00001682                          1026  CHECK_OP_LSL_NO_ROT:
00001682  3038 1000               1027      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001686  0240 F3C0               1028      ANDI.W #$F3C0,D0
0000168A  B07C E3C0               1029      CMP.W #$E3C0,D0
0000168E  6700 02B0               1030      BEQ   PRINT_OP_LSL
00001692  6600 0016               1031      BNE   CHECK_OP_ASL_NO_ROT
00001696                          1032  
00001696                          1033  CHECK_OP_ASR_NO_ROT:
00001696  3038 1000               1034      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000169A  0240 F1C0               1035      ANDI.W #$F1C0,D0
0000169E  B07C E0C0               1036      CMP.W #$E0C0,D0
000016A2  6700 02B8               1037      BEQ   PRINT_OP_ASR
000016A6  6600 0002               1038      BNE   CHECK_OP_ASL_NO_ROT
000016AA                          1039  
000016AA                          1040  CHECK_OP_ASL_NO_ROT:
000016AA  3038 1000               1041      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000016AE  0240 F1C0               1042      ANDI.W #$F1C0,D0
000016B2  B07C 01C0               1043      CMP.W #$01C0,D0
000016B6  6700 02B2               1044      BEQ   PRINT_OP_ASL
000016BA  668A                    1045      BNE   CHECK_OP_ROR_NO_ROT
000016BC                          1046  
000016BC                          1047  CHECK_OP_ROXR:
000016BC  3038 1000               1048      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000016C0  0240 F118               1049      ANDI.W #$F118,D0
000016C4  B07C E010               1050      CMP.W  #$E010,D0
000016C8  6700 0098               1051      BEQ    INVALID_OP
000016CC  6600 0002               1052      BNE    CHECK_OP_ROXL
000016D0                          1053      
000016D0                          1054  CHECK_OP_ROXL:
000016D0  3038 1000               1055      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000016D4  0240 F118               1056      ANDI.W #$F118,D0
000016D8  B07C E110               1057      CMP.W  #$E110,D0
000016DC  6700 0084               1058      BEQ    INVALID_OP
000016E0  6600 0002               1059      BNE    CHECK_OP_ROR
000016E4                          1060  
000016E4                          1061  CHECK_OP_ROR:
000016E4  3038 1000               1062      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000016E8  0240 F118               1063      ANDI.W #$F118,D0
000016EC  B07C E018               1064      CMP.W  #$E018,D0
000016F0  6700 0294               1065      BEQ    PRINT_OP_ROR
000016F4  6600 0002               1066      BNE    CHECK_OP_ROL
000016F8                          1067  
000016F8                          1068  CHECK_OP_ROL:
000016F8  3038 1000               1069      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000016FC  0240 F118               1070      ANDI.W #$F118,D0
00001700  B07C E118               1071      CMP.W  #$E118,D0
00001704  6700 0272               1072      BEQ    PRINT_OP_ROL
00001708  6600 0002               1073      BNE    CHECK_OP_LSR
0000170C                          1074      
0000170C                          1075  CHECK_OP_LSR:
0000170C  3038 1000               1076      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001710  0240 F118               1077      ANDI.W #$F118,D0
00001714  B07C E008               1078      CMP.W  #$E008,D0
00001718  6700 0234               1079      BEQ    PRINT_OP_LSR
0000171C  6600 0002               1080      BNE    CHECK_OP_LSL
00001720                          1081  
00001720                          1082  CHECK_OP_LSL:
00001720  3038 1000               1083      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001724  0240 F118               1084      ANDI.W #$F118,D0
00001728  B07C E108               1085      CMP.W  #$E108,D0
0000172C  6700 0212               1086      BEQ    PRINT_OP_LSL
00001730  6600 0002               1087      BNE    CHECK_OP_ASR
00001734                          1088  
00001734                          1089  CHECK_OP_ASR:
00001734  3038 1000               1090      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001738  0240 F118               1091      ANDI.W #$F118,D0
0000173C  B07C E000               1092      CMP.W  #$E000,D0
00001740  6700 021A               1093      BEQ    PRINT_OP_ASR
00001744  6600 0002               1094      BNE    CHECK_OP_ASL
00001748                          1095  
00001748                          1096  CHECK_OP_ASL:
00001748  3038 1000               1097      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000174C  0240 F118               1098      ANDI.W #$F118,D0
00001750  B07C E100               1099      CMP.W  #$E100,D0
00001754  6700 0214               1100      BEQ    PRINT_OP_ASL
00001758  6600 0008               1101      BNE    INVALID_OP      ;Last possible OP code
0000175C                          1102  
0000175C                          1103  
0000175C                          1104  * GROUP_F
0000175C                          1105  ********************************************************************************
0000175C                          1106  * Currently no OP codes here are supported. There are no OP codes here
0000175C                          1107  ********************************************************************************
0000175C                          1108  C_GROUP_F:
0000175C  4EF9 00001762           1109      JMP INVALID_OP
00001762                          1110      
00001762                          1111  * INVALID_OP                     
00001762                          1112  ********************************************************************************
00001762                          1113  * Any value that is not covered in the above groups would be considered invalid. 
00001762                          1114  * The following values in the first nibble would also indicate that the 
00001762                          1115  * operand codes is already invalid: $7, $A, $F.
00001762                          1116  * For unsupported OP codes, display DATA $WXYZ   
00001762                          1117  * THIS WILL NEED TO BE CHANGED TO DISPLAY: 1000 DATA $WXYZ IN THE FUTURE
00001762                          1118  ********************************************************************************
00001762                          1119  INVALID_OP:  ; Prints DATA for invalid op
00001762  43F9 0000199C           1120      LEA P_INVALID_OP,A1
00001768  103C 000D               1121      MOVE.B #13,D0
0000176C  4E4F                    1122      TRAP #15
0000176E  FFFF FFFF               1123      SIMHALT
00001772                          1124  READ_NEXT_INSTRUCTION: ; Needs to read next instruction set {PLACEHOLDER}
00001772  FFFF FFFF               1125      SIMHALT
00001776                          1126  
00001776                          1127  MAKE_VAL_ASCII:
00001776  0C00 0009               1128      CMPI.B  #$9,D0
0000177A  6E00 0008               1129      BGT     LETTER_ASCII
0000177E  6F00 000A               1130      BLE     NUMBER_ASCII
00001782  4E75                    1131      RTS
00001784                          1132      
00001784                          1133  LETTER_ASCII:
00001784  0600 0037               1134      ADDI.B #$37,D0 ; A-F
00001788  4E75                    1135      RTS
0000178A                          1136      
0000178A                          1137  NUMBER_ASCII
0000178A  0600 0030               1138      ADDI.B #$30,D0 ; 0-9
0000178E  4E75                    1139      RTS
00001790                          1140      
00001790                          1141  ADD_PERIOD:
00001790  2F00                    1142      MOVE.L D0,-(SP)
00001792  103C 0000               1143      MOVE.B #$0,D0
00001796  0600 0046               1144      ADDI.B #$46,D0
0000179A  201F                    1145      MOVE.L (SP)+,D0
0000179C                          1146  ********************** PRINTING ROUTINES **************************************
0000179C                          1147  * Description: These routines are to print the associated op codes, by placing
0000179C                          1148  * them in the appropriate area to the buffer
0000179C                          1149  *
0000179C                          1150  * Registers used: A1 for loading, A6 for EA parsing.
0000179C                          1151  *
0000179C                          1152  * Precondition: The relevant opcode has been identified correctly.
0000179C                          1153  *
0000179C                          1154  * Postcondition: Prints out the associated opcode to the buffer.
0000179C                          1155  
0000179C                          1156  * THIS NEEDS TO BE RETOOLED TO PRINT TO BUFFER NOT TO CONSOLE
0000179C                          1157  *******************************************************************************
0000179C                          1158  
0000179C                          1159  ****************************** GROUP 0 **************************************** 
0000179C                          1160  PRINT_OP_ORI:
0000179C  43F9 000019B3           1161      LEA P_OP_ORI,A1
000017A2  4EB9 00001994           1162      JSR PRINT_OP
000017A8  4E75                    1163      RTS
000017AA                          1164  PRINT_OP_CMPI:
000017AA  43F9 000019B7           1165      LEA P_OP_CMPI,A1
000017B0  4EB9 00001994           1166      JSR PRINT_OP
000017B6  4E75                    1167      RTS
000017B8                          1168  PRINT_OP_S_BCLR:
000017B8  43F9 000019BC           1169      LEA P_OP_S_BCLR,A1
000017BE  4EB9 00001994           1170      JSR PRINT_OP
000017C4  4E75                    1171      RTS
000017C6                          1172  PRINT_OP_D_BCLR:
000017C6  43F9 000019C1           1173      LEA P_OP_D_BCLR,A1
000017CC  4EB9 00001994           1174      JSR PRINT_OP
000017D2  4E75                    1175      RTS
000017D4                          1176  ******************************* END OF GROUP 0 ********************************
000017D4                          1177  
000017D4                          1178  ****************************** GROUP 1 ****************************************    
000017D4                          1179  PRINT_OP_MOVEB:
000017D4  43F9 000019C6           1180      LEA P_OP_MOVEB,A1
000017DA  4EB9 00001994           1181      JSR PRINT_OP
000017E0  4E75                    1182      RTS
000017E2                          1183  ******************************* END OF GROUP 1 ********************************
000017E2                          1184      
000017E2                          1185  ****************************** GROUP 2 **************************************** 
000017E2                          1186  PRINT_OP_MOVEA_L:
000017E2  43F9 000019CD           1187      LEA P_OP_MOVEA_L,A1
000017E8  4EB9 00001994           1188      JSR PRINT_OP
000017EE  4E75                    1189      RTS
000017F0                          1190  PRINT_OP_MOVE_L:
000017F0  43F9 000019D5           1191      LEA P_OP_MOVE_L,A1
000017F6  4EB9 00001994           1192      JSR PRINT_OP
000017FC  4E75                    1193      RTS
000017FE                          1194  ******************************* END OF GROUP 2 ********************************
000017FE                          1195      
000017FE                          1196  ****************************** GROUP 3 ****************************************    
000017FE                          1197  PRINT_OP_MOVEA_W:
000017FE  43F9 000019DC           1198      LEA P_OP_MOVEA_W,A1
00001804  4EB9 00001994           1199      JSR PRINT_OP
0000180A  4E75                    1200      RTS
0000180C                          1201  PRINT_OP_MOVE_W:
0000180C  43F9 000019E4           1202      LEA P_OP_MOVE_W,A1
00001812  4EB9 00001994           1203      JSR PRINT_OP
00001818  4E75                    1204      RTS
0000181A                          1205  ******************************* END OF GROUP 3 ********************************
0000181A                          1206  
0000181A                          1207  ****************************** GROUP 4 ****************************************
0000181A                          1208  PRINT_OP_NOP:
0000181A  43F9 00001A03           1209      LEA P_OP_NOP,A1
00001820  4EB9 00001994           1210      JSR PRINT_OP
00001826  4E75                    1211      RTS
00001828                          1212  PRINT_OP_JSR:
00001828  43F9 000019FF           1213      LEA P_OP_JSR,A1
0000182E  4EB9 00001994           1214      JSR PRINT_OP
00001834  4E75                    1215      RTS
00001836                          1216  PRINT_OP_RTS:
00001836  43F9 00001A07           1217      LEA P_OP_RTS,A1
0000183C  4EB9 00001994           1218      JSR PRINT_OP
00001842  4E75                    1219      RTS
00001844                          1220  PRINT_OP_LEA:
00001844  43F9 000019FB           1221      LEA P_OP_LEA,A1
0000184A  4EB9 00001994           1222      JSR PRINT_OP
00001850  4E75                    1223      RTS
00001852                          1224  PRINT_OP_NEG:
00001852  43F9 00001A0B           1225      LEA P_OP_NEG,A1
00001858  4EB9 00001994           1226      JSR PRINT_OP
0000185E  4E75                    1227      RTS
00001860                          1228  PRINT_OP_MOVEM_W:
00001860  43F9 000019EB           1229      LEA P_OP_MOVEM_W,A1
00001866  4EB9 00001994           1230      JSR PRINT_OP
0000186C  4E75                    1231      RTS
0000186E                          1232  PRINT_OP_MOVEM_L:
0000186E  43F9 000019F3           1233      LEA P_OP_MOVEM_L,A1
00001874  4EB9 00001994           1234      JSR PRINT_OP
0000187A  4E75                    1235      RTS
0000187C                          1236  ******************************* END OF GROUP 4 ********************************
0000187C                          1237      
0000187C                          1238  ****************************** GROUP 5 ****************************************
0000187C                          1239  PRINT_OP_SUBQ:
0000187C  43F9 00001A0F           1240      LEA P_OP_SUBQ,A1
00001882  4EB9 00001994           1241      JSR PRINT_OP
00001888  4E75                    1242      RTS
0000188A                          1243  ******************************* END OF GROUP 5 ********************************
0000188A                          1244  
0000188A                          1245  ****************************** GROUP 6 ****************************************
0000188A                          1246  PRINT_OP_BCS:
0000188A  43F9 00001A18           1247      LEA P_OP_BCS,A1
00001890  4EB9 00001994           1248      JSR PRINT_OP
00001896  4E75                    1249      RTS
00001898                          1250  PRINT_OP_BGE:
00001898  43F9 00001A1C           1251      LEA P_OP_BGE,A1
0000189E  4EB9 00001994           1252      JSR PRINT_OP
000018A4  4E75                    1253      RTS
000018A6                          1254  PRINT_OP_BLT:
000018A6  43F9 00001A20           1255      LEA P_OP_BLT,A1
000018AC  4EB9 00001994           1256      JSR PRINT_OP
000018B2  4E75                    1257      RTS
000018B4                          1258  PRINT_OP_BVC:
000018B4  43F9 00001A24           1259      LEA P_OP_BVC,A1
000018BA  4EB9 00001994           1260      JSR PRINT_OP
000018C0  4E75                    1261      RTS
000018C2                          1262  PRINT_OP_BRA:
000018C2  43F9 00001A14           1263      LEA P_OP_BRA,A1
000018C8  4EB9 00001994           1264      JSR PRINT_OP
000018CE  4E75                    1265      RTS
000018D0                          1266  ******************************* END OF GROUP 6 ********************************
000018D0                          1267  
000018D0                          1268  ****************************** GROUP 7 ****************************************
000018D0                          1269  * No currently supported OP codes to print here.
000018D0                          1270  ******************************* END OF GROUP 7 ********************************
000018D0                          1271  
000018D0                          1272  ****************************** GROUP 8 ****************************************
000018D0                          1273  PRINT_OP_DIVS:
000018D0  43F9 00001A28           1274      LEA P_OP_DIVS,A1
000018D6  4EB9 00001994           1275      JSR PRINT_OP
000018DC  4E75                    1276      RTS
000018DE                          1277  PRINT_OP_OR:
000018DE  43F9 00001A2D           1278      LEA P_OP_OR,A1
000018E4  4EB9 00001994           1279      JSR PRINT_OP
000018EA  4E75                    1280      RTS
000018EC                          1281  ******************************* END OF GROUP 8 ********************************
000018EC                          1282  
000018EC                          1283  ****************************** GROUP 9 ****************************************
000018EC                          1284  PRINT_OP_SUB:
000018EC  43F9 00001A30           1285      LEA P_OP_SUB,A1
000018F2  4EB9 00001994           1286      JSR PRINT_OP
000018F8  4E75                    1287      RTS
000018FA                          1288  ******************************* END OF GROUP 9 ********************************
000018FA                          1289  
000018FA                          1290  ****************************** GROUP A ****************************************
000018FA                          1291  * No currently supported OP codes to print here.
000018FA                          1292  ******************************* END OF GROUP A ********************************
000018FA                          1293  
000018FA                          1294  ****************************** GROUP B ****************************************
000018FA                          1295  PRINT_OP_EOR:
000018FA  43F9 00001A34           1296      LEA P_OP_EOR,A1
00001900  4EB9 00001994           1297      JSR PRINT_OP
00001906  4E75                    1298      RTS
00001908                          1299  PRINT_OP_CMP:
00001908  43F9 00001A38           1300      LEA P_OP_CMP,A1
0000190E  4EB9 00001994           1301      JSR PRINT_OP
00001914  4E75                    1302      RTS
00001916                          1303  ******************************* END OF GROUP B ********************************
00001916                          1304  
00001916                          1305  ****************************** GROUP C ****************************************
00001916                          1306  PRINT_OP_MULS:
00001916  43F9 00001A3C           1307      LEA P_OP_MULS,A1
0000191C  4EB9 00001994           1308      JSR PRINT_OP
00001922  4E75                    1309      RTS
00001924                          1310  ******************************* END OF GROUP C ********************************
00001924                          1311  
00001924                          1312  ****************************** GROUP D ****************************************
00001924                          1313  PRINT_OP_ADD:
00001924  43F9 00001A46           1314      LEA P_OP_ADD,A1
0000192A  4EB9 00001994           1315      JSR PRINT_OP
00001930  4E75                    1316      RTS
00001932                          1317  PRINT_OP_ADDA:
00001932  43F9 00001A41           1318      LEA P_OP_ADDA,A1
00001938  4EB9 00001994           1319      JSR PRINT_OP
0000193E  4E75                    1320      RTS
00001940                          1321  
00001940                          1322  ******************************* END OF GROUP D ********************************
00001940                          1323  
00001940                          1324  ****************************** GROUP E ****************************************
00001940                          1325  PRINT_OP_LSL:
00001940  43F9 00001A4E           1326      LEA P_OP_LSL,A1
00001946  4EB9 00001994           1327      JSR PRINT_OP
0000194C  4E75                    1328      RTS
0000194E                          1329  PRINT_OP_LSR:
0000194E  43F9 00001A4A           1330      LEA P_OP_LSR,A1
00001954  4EB9 00001994           1331      JSR PRINT_OP
0000195A  4E75                    1332      RTS
0000195C                          1333  PRINT_OP_ASR:
0000195C  43F9 00001A52           1334      LEA P_OP_ASR,A1
00001962  4EB9 00001994           1335      JSR PRINT_OP
00001968  4E75                    1336      RTS
0000196A                          1337  PRINT_OP_ASL:
0000196A  43F9 00001A56           1338      LEA P_OP_ASL,A1
00001970  4EB9 00001994           1339      JSR PRINT_OP
00001976  4E75                    1340      RTS
00001978                          1341  PRINT_OP_ROL:
00001978  43F9 00001A5E           1342      LEA P_OP_ROL,A1
0000197E  4EB9 00001994           1343      JSR PRINT_OP
00001984  4E75                    1344      RTS
00001986                          1345  PRINT_OP_ROR:
00001986  43F9 00001A5A           1346      LEA P_OP_ROR,A1
0000198C  4EB9 00001994           1347      JSR PRINT_OP
00001992  4E75                    1348      RTS
00001994                          1349  ******************************* END OF GROUP E ********************************
00001994                          1350  
00001994                          1351  ****************************** GROUP F ****************************************
00001994                          1352  * No currently supported OP codes to print here.
00001994                          1353  ******************************* END OF GROUP F ********************************
00001994                          1354  
00001994                          1355  
00001994                          1356  
00001994                          1357  PRINT_OP:   ;Prints current op code byte
00001994                          1358      ;MOVE.W (A4),(A1)       ; NEEDS TO USE G_BUFFER LATER
00001994  103C 000D               1359      MOVE.B #13,D0
00001998  4E4F                    1360      TRAP #15
0000199A  4E75                    1361      RTS
0000199C                          1362  ******************* END OF PRINTING ROUTINES **********************************
0000199C                          1363  
0000199C                          1364  ******************* END OF JMP LABELS *****************************************
0000199C                          1365  
0000199C                          1366  ******************* DATA CONSTANT PRINTS **************************************
0000199C                          1367  * Formatting is as follows: P_OP_<OPCODE>, where P = Print, OP = Operation,
0000199C                          1368  * <OPCODE> is any valid operand
0000199C                          1369  
0000199C= 44 41 54 41 00          1370  P_INVALID_OP    DC.B    'DATA',0
000019A1= 46 6F 75 6E 64 20 ...   1371  OP_FOUND        DC.B    'Found OP',0 ; this should be taken out later
000019AA= 2E 42 00                1372  P_SIZE_B        DC.B    '.B',0
000019AD= 2E 57 00                1373  P_SIZE_W        DC.B    '.W',0
000019B0= 2E 4C 00                1374  P_SIZE_L        DC.B    '.L',0
000019B3= 4F 52 49 00             1375  P_OP_ORI        DC.B    'ORI',0
000019B7= 43 4D 50 49 00          1376  P_OP_CMPI       DC.B    'CMPI',0
000019BC= 42 43 4C 52 00          1377  P_OP_S_BCLR     DC.B    'BCLR',0
000019C1= 42 43 4C 52 00          1378  P_OP_D_BCLR     DC.B    'BCLR',0
000019C6= 4D 4F 56 45 2E 42 00    1379  P_OP_MOVEB      DC.B    'MOVE.B',0
000019CD= 4D 4F 56 45 41 2E ...   1380  P_OP_MOVEA_L    DC.B    'MOVEA.L',0 
000019D5= 4D 4F 56 45 2E 4C 00    1381  P_OP_MOVE_L     DC.B    'MOVE.L',0
000019DC= 4D 4F 56 45 41 2E ...   1382  P_OP_MOVEA_W    DC.B    'MOVEA.W',0
000019E4= 4D 4F 56 45 2E 57 00    1383  P_OP_MOVE_W     DC.B    'MOVE.W',0
000019EB= 4D 4F 56 45 4D 2E ...   1384  P_OP_MOVEM_W    DC.B    'MOVEM.W',0
000019F3= 4D 4F 56 45 4D 2E ...   1385  P_OP_MOVEM_L    DC.B    'MOVEM.L',0
000019FB= 4C 45 41 00             1386  P_OP_LEA        DC.B    'LEA',0
000019FF= 4A 53 52 00             1387  P_OP_JSR        DC.B    'JSR',0
00001A03= 4E 4F 50 00             1388  P_OP_NOP        DC.B    'NOP',0
00001A07= 52 54 53 00             1389  P_OP_RTS        DC.B    'RTS',0
00001A0B= 4E 45 47 00             1390  P_OP_NEG        DC.B    'NEG',0
00001A0F= 53 55 42 51 00          1391  P_OP_SUBQ       DC.B    'SUBQ',0
00001A14= 42 52 41 00             1392  P_OP_BRA        DC.B    'BRA',0
00001A18= 42 43 53 00             1393  P_OP_BCS        DC.B    'BCS',0
00001A1C= 42 47 45 00             1394  P_OP_BGE        DC.B    'BGE',0
00001A20= 42 4C 54 00             1395  P_OP_BLT        DC.B    'BLT',0
00001A24= 42 56 43 00             1396  P_OP_BVC        DC.B    'BVC',0
00001A28= 44 49 56 53 00          1397  P_OP_DIVS       DC.B    'DIVS',0
00001A2D= 4F 52 00                1398  P_OP_OR         DC.B    'OR',0
00001A30= 53 55 42 00             1399  P_OP_SUB        DC.B    'SUB',0
00001A34= 45 4F 52 00             1400  P_OP_EOR        DC.B    'EOR',0
00001A38= 43 4D 50 00             1401  P_OP_CMP        DC.B    'CMP',0
00001A3C= 4D 55 4C 53 00          1402  P_OP_MULS       DC.B    'MULS',0
00001A41= 41 44 44 41 00          1403  P_OP_ADDA       DC.B    'ADDA',0
00001A46= 41 44 44 00             1404  P_OP_ADD        DC.B    'ADD',0
00001A4A= 4C 53 52 00             1405  P_OP_LSR        DC.B    'LSR',0
00001A4E= 4C 53 4C 00             1406  P_OP_LSL        DC.B    'LSL',0
00001A52= 41 53 52 00             1407  P_OP_ASR        DC.B    'ASR',0
00001A56= 41 53 4C 00             1408  P_OP_ASL        DC.B    'ASL',0
00001A5A= 52 4F 52 00             1409  P_OP_ROR        DC.B    'ROR',0
00001A5E= 52 4F 4C 00             1410  P_OP_ROL        DC.B    'ROL',0
00001A62                          1411  ***************** END OF DATA CONSTANT PRINTS ***********************************
00001A62                          1412   
00001A62                          1413  
00001A62                          1414  **
00001A62                          1415  * AddStrToBuffer
00001A62                          1416  **
00001A62                          1417  * Adds the given NULL-terminated string to the specified buffer.
00001A62                          1418  *
00001A62                          1419  * Default buffer length is 80 characters, but can be modified in the argument
00001A62                          1420  * variables.
00001A62                          1421  *
00001A62                          1422  * If the buffer length is exceeded, either due to lack of a NULL character or
00001A62                          1423  * an incorrectly specified length, 1 is returned. Otherwise, 0 is returned to
00001A62                          1424  * indicate success.
00001A62                          1425  *
00001A62                          1426  **
00001A62                          1427  * @param Arg_AddStrToBuffer_String              Pointer to string
00001A62                          1428  * @param Arg_AddStrToBuffer_Buffer              Pointer to buffer
00001A62                          1429  * @param Arg_AddStrToBuffer_BufferLength        Length of buffer (default 80 chars)
00001A62                          1430  * @return Ret_AddStrToBuffer_Success            0 if successful, 1 otherwise.
00001A62                          1431  * @branch _AddStrToBuffer_FindBufferNullLoop    Loop to find NULL in buffer
00001A62                          1432  * @branch _AddStrToBuffer_AddLoop               Loop to add string to buffer
00001A62                          1433  * @branch _AddStrToBuffer_Success               Branch when string successfully added
00001A62                          1434  * @branch _AddStrToBuffer_StringLengthExceeded  Branch when length exceeded (either string or buffer)
00001A62                          1435  * @branch _AddStrToBuffer_End                   End of subroutine
00001A62                          1436  **
00001A62                          1437  Arg_AddStrToBuffer_String           DS.L    1
00001A66                          1438  Arg_AddStrToBuffer_Buffer           DS.L    1
00001A6A= 00000050                1439  Arg_AddStrToBuffer_BufferLength     DC.L    80
00001A6E                          1440  Ret_AddStrToBuffer_Success          DS.B    1
00001A6F                          1441  
00001A70                          1442  AddStrToBuffer:                     DS.W    0
00001A70  48E7 C0C0               1443      MOVEM.L     D0-D1/A0-A1, -(SP)                  * Backup registers to stack
00001A74                          1444  
00001A74  2078 1A62               1445      MOVE.L      Arg_AddStrToBuffer_String, A0       * Load string pointer
00001A78  2278 1A66               1446      MOVE.L      Arg_AddStrToBuffer_Buffer, A1       * Load buffer pointer
00001A7C  2038 1A6A               1447      MOVE.L      Arg_AddStrToBuffer_BufferLength, D0 * Load buffer length
00001A80  4278 1A6E               1448      CLR.W       Ret_AddStrToBuffer_Success          * Clear success bit
00001A84  4281                    1449      CLR.L       D1                                  * Clear loop counter
00001A86                          1450  
00001A86                          1451  _AddStrToBuffer_BufferLoop
00001A86  0C11 0000               1452      CMPI.B      #0, (A1)                            * If buffer char is NULL
00001A8A  6700 000E               1453      BEQ         _AddStrToBuffer_AddLoop             * Start adding string to bufer
00001A8E                          1454      
00001A8E  B280                    1455      CMP.L       D0, D1                              * If counter >= max length
00001A90  6C00 0024               1456      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
00001A94                          1457      
00001A94  5289                    1458      ADDQ.L      #1, A1                              * Go to next character
00001A96  5201                    1459      ADDQ.B      #1, D1                              * Increment counter
00001A98  60EC                    1460      BRA         _AddStrToBuffer_BufferLoop          * Loop back
00001A9A                          1461      
00001A9A                          1462  _AddStrToBuffer_AddLoop
00001A9A  0C10 0000               1463      CMPI.B      #0, (A0)                            * If string char is NULL
00001A9E  6700 000E               1464      BEQ         _AddStrToBuffer_Success             * String successfully added
00001AA2                          1465      
00001AA2  B200                    1466      CMP.B       D0, D1                              * If counter >= max length
00001AA4  6C00 0010               1467      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
00001AA8                          1468      
00001AA8  12D8                    1469      MOVE.B      (A0)+, (A1)+                        * Move string char to buffer char
00001AAA  5201                    1470      ADDQ.B      #1, D1                              * Increment counter
00001AAC  60EC                    1471      BRA         _AddStrToBuffer_AddLoop             * Loop back
00001AAE                          1472  
00001AAE                          1473  _AddStrToBuffer_Success
00001AAE  12BC 0000               1474      MOVE.B      #0, (A1)                            * Add NULL to end of string
00001AB2  6000 0008               1475      BRA         _AddStrToBuffer_End                 * Finish subroutine
00001AB6                          1476  
00001AB6                          1477  _AddStrToBuffer_LengthExceeded
00001AB6  31FC 0001 1A6E          1478      MOVE.W      #1, Ret_AddStrToBuffer_Success      * Invalidate success bit
00001ABC                          1479  
00001ABC                          1480  _AddStrToBuffer_End
00001ABC  4CDF 0303               1481      MOVEM.L     (SP)+, D0-D1/A0-A1                  * Restore registers from stack
00001AC0  4E75                    1482      RTS                  
00001AC2                          1483     
00001AC2                          1484      END START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDSTRTOBUFFER      1A70
ADD_PERIOD          1790
ARG_ADDSTRTOBUFFER_BUFFER  1A66
ARG_ADDSTRTOBUFFER_BUFFERLENGTH  1A6A
ARG_ADDSTRTOBUFFER_STRING  1A62
B_BUFFER            1053
CG0_C               1370
CG0_F               136C
CHECK_OP_ADD        1618
CHECK_OP_ADDA       1604
CHECK_OP_ADDX       15F0
CHECK_OP_ASL        1748
CHECK_OP_ASL_NO_ROT  16AA
CHECK_OP_ASR        1734
CHECK_OP_ASR_NO_ROT  1696
CHECK_OP_BCS        14C0
CHECK_OP_BGE        14D4
CHECK_OP_BLT        14E8
CHECK_OP_BRA        14AC
CHECK_OP_BVC        14FC
CHECK_OP_CMP        15C8
CHECK_OP_CMPA       15A0
CHECK_OP_CMPI       131E
CHECK_OP_CMPM       158C
CHECK_OP_DIVS       1516
CHECK_OP_DIVU       152A
CHECK_OP_D_BCLR     1352
CHECK_OP_EOR        15B4
CHECK_OP_JSR        1448
CHECK_OP_LEA        1434
CHECK_OP_LSL        1720
CHECK_OP_LSL_NO_ROT  1682
CHECK_OP_LSR        170C
CHECK_OP_LSR_NO_ROT  166E
CHECK_OP_MOVEA_L    1388
CHECK_OP_MOVEA_W    13CE
CHECK_OP_MOVEM      1470
CHECK_OP_MOVE_B     1372
CHECK_OP_MOVE_L     13B8
CHECK_OP_MOVE_W     13FE
CHECK_OP_MULS       15DC
CHECK_OP_NEG        145C
CHECK_OP_NOP        1424
CHECK_OP_OR         1552
CHECK_OP_ORI        1304
CHECK_OP_ROL        16F8
CHECK_OP_ROL_NO_ROT  165A
CHECK_OP_ROR        16E4
CHECK_OP_ROR_NO_ROT  1646
CHECK_OP_ROXL       16D0
CHECK_OP_ROXL_NO_ROT  1632
CHECK_OP_ROXR       16BC
CHECK_OP_ROXR_NO_ROT  161E
CHECK_OP_RTS        1414
CHECK_OP_SBCD       153E
CHECK_OP_SUB        1580
CHECK_OP_SUBA       1558
CHECK_OP_SUBQ       1498
CHECK_OP_SUBX       156C
CHECK_OP_S_BCLR     1338
CUR_OP_CODE         1000
C_GROUP_0           1300
C_GROUP_1           1372
C_GROUP_2           1388
C_GROUP_3           13CE
C_GROUP_4           1414
C_GROUP_5           1484
C_GROUP_6           14AC
C_GROUP_7           1510
C_GROUP_8           1516
C_GROUP_9           1558
C_GROUP_A           1586
C_GROUP_B           158C
C_GROUP_C           15DC
C_GROUP_D           15F0
C_GROUP_E           161E
C_GROUP_F           175C
EA_SIZE             1002
FIND_2_BIT_SIZE_TO_EA  122A
FIND_3_BIT_REG_TO_EA  1240
FIND_MOVEA_L_DIFFERENCE  1398
FIND_MOVEA_W_DIFFERENCE  13DE
FIND_TRAILING_BITS_TO_EA  129C
FIRST_3             10A4
FOURTH_3            10A7
GROUP_0             10E2
GROUP_1             10F4
GROUP_2             1106
GROUP_3             1118
GROUP_4             112A
GROUP_5             113C
GROUP_6             114E
GROUP_7             1160
GROUP_8             1172
GROUP_9             1184
GROUP_A             1196
GROUP_B             11A8
GROUP_C             11BA
GROUP_D             11CC
GROUP_E             11DE
GROUP_F             11F0
G_BUFFER            1003
INVALID_OP          1762
LETTER_ASCII        1784
LOAD_OP_CODE        10CA
MAKE_VAL_ASCII      1776
MNEMONIC            10A3
MOVE_AND_MOVEA_PARSE_EA  1256
MOVE_LAST_6_BITS_TO_EA  1208
NUMBER_ASCII        178A
OP_FOUND            19A1
OP_JSR_DONE         11FE
OP_JSR_ROUTINE      10DA
PARSE_EA_CONSTANT_BITS  12B2
PRINT_OP            1994
PRINT_OP_ADD        1924
PRINT_OP_ADDA       1932
PRINT_OP_ASL        196A
PRINT_OP_ASR        195C
PRINT_OP_BCS        188A
PRINT_OP_BGE        1898
PRINT_OP_BLT        18A6
PRINT_OP_BRA        18C2
PRINT_OP_BVC        18B4
PRINT_OP_CMP        1908
PRINT_OP_CMPI       17AA
PRINT_OP_DIVS       18D0
PRINT_OP_D_BCLR     17C6
PRINT_OP_EOR        18FA
PRINT_OP_JSR        1828
PRINT_OP_LEA        1844
PRINT_OP_LSL        1940
PRINT_OP_LSR        194E
PRINT_OP_MOVEA_L    17E2
PRINT_OP_MOVEA_W    17FE
PRINT_OP_MOVEB      17D4
PRINT_OP_MOVEM_L    186E
PRINT_OP_MOVEM_W    1860
PRINT_OP_MOVE_L     17F0
PRINT_OP_MOVE_W     180C
PRINT_OP_MULS       1916
PRINT_OP_NEG        1852
PRINT_OP_NOP        181A
PRINT_OP_OR         18DE
PRINT_OP_ORI        179C
PRINT_OP_ROL        1978
PRINT_OP_ROR        1986
PRINT_OP_RTS        1836
PRINT_OP_SUB        18EC
PRINT_OP_SUBQ       187C
PRINT_OP_S_BCLR     17B8
P_INVALID_OP        199C
P_OP_ADD            1A46
P_OP_ADDA           1A41
P_OP_ASL            1A56
P_OP_ASR            1A52
P_OP_BCS            1A18
P_OP_BGE            1A1C
P_OP_BLT            1A20
P_OP_BRA            1A14
P_OP_BVC            1A24
P_OP_CMP            1A38
P_OP_CMPI           19B7
P_OP_DIVS           1A28
P_OP_D_BCLR         19C1
P_OP_EOR            1A34
P_OP_JSR            19FF
P_OP_LEA            19FB
P_OP_LSL            1A4E
P_OP_LSR            1A4A
P_OP_MOVEA_L        19CD
P_OP_MOVEA_L_A_L    10B4
P_OP_MOVEA_L_T      10A8
P_OP_MOVEA_W        19DC
P_OP_MOVEB          19C6
P_OP_MOVEM_L        19F3
P_OP_MOVEM_W        19EB
P_OP_MOVE_L         19D5
P_OP_MOVE_W         19E4
P_OP_MULS           1A3C
P_OP_NEG            1A0B
P_OP_NOP            1A03
P_OP_OR             1A2D
P_OP_ORI            19B3
P_OP_ROL            1A5E
P_OP_ROR            1A5A
P_OP_RTS            1A07
P_OP_SUB            1A30
P_OP_SUBQ           1A0F
P_OP_S_BCLR         19BC
P_SIZE_B            19AA
P_SIZE_L            19B0
P_SIZE_W            19AD
READ_NEXT_INSTRUCTION  1772
RET_ADDSTRTOBUFFER_SUCCESS  1A6E
SECOND_3            10A5
START               10C0
THIRD_3             10A6
VALID_CHECK_OP_SUBQ  1484
_ADDSTRTOBUFFER_ADDLOOP  1A9A
_ADDSTRTOBUFFER_BUFFERLOOP  1A86
_ADDSTRTOBUFFER_END  1ABC
_ADDSTRTOBUFFER_LENGTHEXCEEDED  1AB6
_ADDSTRTOBUFFER_SUCCESS  1AAE
