000010C0 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/11/2019 10:09:21 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OP Code routines for Disassembler
00000000                             3  * Written by : Daniel Yan
00000000                             4  * Date       : 2/28/2019, Updated 3/9/2019
00000000                             5  
00000000                             6  * Description: Op code determining to identify values
00000000                             7  
00000000                             8  
00000000                             9  ;FAHAD CODE
00000000                            10  ; ORG place for G_BUFFER
00000000                            11  ; ORG place for CUR_OP_CODE
00000000                            12  ; ORG place for VALID_OP_CODE
00000000                            13  ; ORG place for all other constants
00000000                            14  ; ORG START $1000
00000000                            15  ; WE NEED TO SEE APPROX HOW MUCH ADDRESS SPACE ALL OUR ROUTINES COVER
00000000                            16  ; ORG OUR CONSTANTS/BUFFERS AT A SAFE DISTANCE BETWEEN ROUTINES AND TEST PROGRAM
00000000                            17  
00000000                            18  ; MEMORY_ADDRESS OPCODE $HEX_VALUE
00000000                            19  ;G_BUFFER
00000000                            20  ; 1254 MOVEA.L A3,A6, $3ASD
00000000                            21  ; 1254 RTS $4E75
00000000                            22  ;B_BUFFER
00000000                            23  ; 1254 DATA $CURRENT_OP
00000000                            24  
00000000                            25  ; JSR INVALID_OP
00000000                            26  ; 
00000000                            27  
00000000                            28  ; 8800 MOVEA.L A3,A6 $3FCA
00000000                            29  ; 8800 DATA $3FCA
00000000                            30  
00001000                            31    ORG $1000 ; Start at Address $1000
00001000                            32  CUR_OP_CODE DS.W 1  ; Current OP Code Word
00001002                            33  EA_SIZE     DS.B 1
00001003                            34  G_BUFFER    DS.B 80
00001053                            35  B_BUFFER    DS.B 80
000010A3                            36  MNEMONIC    DS.B 1
000010A4                            37  FIRST_3     DS.B 1
000010A5                            38  SECOND_3    DS.B 1
000010A6                            39  THIRD_3     DS.B 1
000010A7                            40  FOURTH_3    DS.B 1
000010A8                            41  
000010A8= 4D4F5645 412E4C00 ...     42  P_OP_MOVEA_L_T  DC.L    'MOVEA.L',0
000010B4= 412E4C00 00000000         43  P_OP_MOVEA_L_A_L DC.L   'A.L',0
000010BC  49F8 1003                 44      LEA G_BUFFER,A4
000010C0                            45      
000010C0                            46  
000010C0                            47  START
000010C0                            48      ; Start the op code routine
000010C0                            49      ;LEA G_BUFFER, A4
000010C0  18BC 0000                 50      MOVE.B #0, (A4)
000010C4                            51      
000010C4                            52      ;MOVE.L (A5)+, D0
000010C4                            53      
000010C4                            54      ; Load the message onto A4
000010C4                            55      ;MOVE.L #P_OP_MOVEA_L_T, Arg_AddStrToBuffer_String
000010C4                            56      ;MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer 
000010C4                            57      
000010C4                            58      
000010C4                            59      ;JSR AddStrToBuffer
000010C4                            60      ;LEA G_BUFFER, A4   ; Load the value of the message onto the G_BUFFER
000010C4                            61      ;MOVE.L P_OP_MOVEA_L_T,(A4)+
000010C4                            62      ;MOVE.L P_OP_MOVEA_L_A_L,(A4)+
000010C4                            63      
000010C4                            64      
000010C4                            65      
000010C4                            66  
000010C4                            67      ; AFTER THIS POINT THE BUFFER HAS THIS 'MOVE' + 'A.L'          ; Increment 4 spaces in the address
000010C4                            68      
000010C4                            69      
000010C4                            70         
000010C4                            71      
000010C4                            72     
000010C4                            73     ;This is the right area for pointer now, however when I add here it can't go
000010C4                            74     ;back 
000010C4                            75  *********************************************************************************
000010C4                            76  * Here I'm attempting to 'skip' forward in the address to find the proper location for the string
000010C4                            77  * In the prior command 'LEA P_OP_MOVEA_L,A4' I have loaded 'MOVE' into address space. I cannot move
000010C4                            78  * more than 4 bytes (long) at a single time, so I need to move 'A.L' after which is 3 more bytes
000010C4                            79  * So what I need to do is LOAD 'MOVE' into the address space, skip 4 bytes, then load 'A.L' right
000010C4                            80  * after 'MOVE'. So this would show 'MOVEA.L' in the address space. Which then Denny can load his stuff
000010C4                            81  * after mine.
000010C4                            82  *
000010C4                            83  *In the ideal world this would look something like: P_OP_MOVEA_L then P_OP_A_L then _P_OP_TAB
000010C4                            84  * which would appear as 'MOVEA.L    ' in the address space. This would require 4 increments
000010C4                            85  * after MOVE, then 'A.L' being inserted, then 3 increments (or 7 from start) for the tab
000010C4                            86  ********************************************************************************* 
000010C4                            87      
000010C4                            88      ;ADD.L $FFFF,G_BUFFER_PREP
000010C4                            89      ;LEA P_OP_A_L,A1
000010C4                            90      ;MOVE.L (A4),G_BUFFER_PREP
000010C4                            91      
000010C4                            92  ***************************** Input Tests ********************************************
000010C4                            93      ;MOVE.W #%0000100010000010,CUR_OP_CODE       ;Static BCLR
000010C4                            94      ;MOVE.W #%0000111110001110,CUR_OP_CODE       ;Dynamic BCLR
000010C4                            95      ;MOVE.W #%0000000001000001,CUR_OP_CODE       ;ORI.W D1
000010C4                            96          
000010C4                            97      ;MOVE.W #%0000111110001110,CUR_OP_CODE              ;Dynamic BCLR
000010C4                            98      ;IN HEX $018E. D7 = 110, D6 = 001, D4 = %110, D5 = 7, (A6) = %0000
000010C4                            99      ;MOVE.W #%0000100010001110,CUR_OP_CODE              ;Static BCLR
000010C4                           100      ;IN HEX $018E. D7 = 110, D6 = 001, D4 = %110, D5 = 7, (A6) = %0000
000010C4                           101     
000010C4                           102      ;MOVE.W  #$018E,CUR_OP_CODE                        ;Dynamic BCLR in hex
000010C4                           103      ;MOVE.W  #$02FF,CUR_OP_CODE                         ;INVALID_OP code
000010C4                           104      ;MOVE.W #%0000110001010111,CUR_OP_CODE
000010C4                           105      ;MOVE.W #%0010011001001101,CUR_OP_CODE                       ;MOVEA  
000010C4                           106       ;MOVE.W #%0010001001001101,CUR_OP_CODE              ;MOVEA.L A5,A1
000010C4                           107      ;MOVE.W CUR_OP_CODE,(A6)
000010C4                           108      ;MOVE.W #$264D
000010C4                           109      ;Expected values:
000010C4                           110      ;D7, DST REG:   011
000010C4                           111      ;D6, DST MODE:  001
000010C4                           112      ;D5, SRC REG:   101
000010C4                           113      ;D4, SRC MODE:  001
000010C4                           114      ;CHECK IF DST MODE IS %111 or SRC MODE IS %111 for MOVE
000010C4                           115      ;(A3), DST TRAIL:  001
000010C4                           116      ;(A2), SRC TRAIL: ONLY FOR MOVE
000010C4                           117      ;MOVE.W #%0010000000001101,CUR_OP_CODE              ;MOVE.L A5,A1
000010C4                           118      ;MOVE.W #%0011011001001101,CUR_OP_CODE              ;MOVEA.W A5,A1
000010C4                           119      ;MOVE.W #%1001011001111101,CUR_OP_CODE               ;MOVE TO TEST PARSE_EA_CONSTANT_BITS
000010C4                           120      ;MOVE.W #%0011000000001101,CUR_OP_CODE              ;MOVE.W A5,A1
000010C4                           121      ;MOVE.W #%0000000001000001,CUR_OP_CODE              ;ORI.W D1
000010C4                           122      ;MOVE.W CUR_OP_CODE,A6                       ;Loading memory space to address register
000010C4                           123      ;MOVE.W CUR_OP_CODE,(A6)                     ;Loading memory value to address value
000010C4                           124   
000010C4                           125      ****GROUP 4 tests****
000010C4                           126      ;MOVE.W #$4E75,CUR_OP_CODE                            ;RTS
000010C4                           127      ;MOVE.W #$4E71,CUR_OP_CODE                            ;NOP
000010C4                           128      ;MOVE.W #$4415,CUR_OP_CODE                            ;NEG.L D5
000010C4                           129      ;MOVE.W #$43CC,CUR_OP_CODE                            ;LEA A1,A6
000010C4                           130      ;MOVE.W #%0100100010001110,CUR_OP_CODE
000010C4                           131      ;MOVE.W #$488E,CUR_OP_CODE                            ;MOVEM.W Reg to Mem, A6
000010C4                           132      ;MOVE.W #$4C8E,CUR_OP_CODE                             ;MOVEM.W Mem to Reg, A6
000010C4                           133      ;MOVE.W #$4E95,CUR_OP_CODE                            ;JSR (A5)               
000010C4                           134      ****GROUP 5 tests****
000010C4                           135      ;MOVE.W #%0101111110001111
000010C4                           136      
000010C4                           137      *****GROUP 5 TESTS****
000010C4                           138      ;#%0101111100000101, SUBQ.B D5
000010C4                           139      ;MOVE.W #$5F05,CUR_OP_CODE ; for SUBQ.B D5
000010C4                           140      ;#%0101111110001110, SUBQ.L A6 
000010C4                           141      ;MOVE.W #$5F8E,CUR_OP_CODE
000010C4                           142      ******GROUP 5 VALIDATION TESTS**********
000010C4                           143      ;MOVE.W #%0101111000001110,CUR_OP_CODE  ; ADDQ
000010C4                           144      ;MOVE.W #%0101010011000110,CUR_OP_CODE ; Scc
000010C4                           145      ;MOVE.W #%0101010011001110,CUR_OP_CODE ; DBcc
000010C4                           146     
000010C4                           147      *****GROUP 6 TESTS********* BCS,BGE,BLT,BVC
000010C4                           148      ; DISPLACEMENT, $00 is 16 bits, $FF is 32 bits
000010C4                           149      ; DISPLACEMENT = Last 8 bits
000010C4                           150      ;MOVE.W #%0110000001010101,CUR_OP_CODE   ;BRA
000010C4                           151      ;MOVE.W #%0110010100000001,CUR_OP_CODE   ;BCS
000010C4                           152      ;MOVE.W #%0110110001010100,CUR_OP_CODE   ;BGE
000010C4  31FC 6DAA 1000           153      MOVE.W #%0110110110101010,CUR_OP_CODE   ;BLT
000010CA                           154      ;MOVE.W #%0110100001010100,CUR_OP_CODE   ;BVC
000010CA                           155  ************************************************************************************
000010CA                           156  
000010CA                           157  *-----------------------------------------------------------
000010CA                           158  *First Nibble Values (15-12)
000010CA                           159  *Value                  Operations
000010CA                           160  *$0                     GROUP_0: ORI,BCLR (static and dynamic),CMPI --- Partial, needs SIZE print for ORI, BCLR, CMPI
000010CA                           161  *$1                     GROUP_1: MOVE.B                             --- Partial, needs trailing bits
000010CA                           162  *$2                     GROUP_2: MOVE.L, MOVEA.L                    --- Partial, needs trailing bits
000010CA                           163  *$3                     GROUP_3: MOVE.W, MOVEA.W                    --- Partial, needs trailing bits
000010CA                           164  *$4                     GROUP_4: LEA,JSR,RTS,NEG,MOVEM              --- Partial, needs SIZE print for NEG, MOVE
000010CA                           165  *$5                     GROUP_5: SUBQ                               --- Partial, needs SIZE pri
000010CA                           166  *$6                     GROUP_6: Bcc(BCS,BGE,BLT,BVC), BRA          --- Not started
000010CA                           167  *$7                     GROUP_7: INVALID_OP                         --- DONE
000010CA                           168  *$8                     GROUP_8: DIVS, OR                           --- Not started
000010CA                           169  *$9                     GROUP_9: SUB                                --- Not started
000010CA                           170  *$A                     GROUP_A: INVALID_OP                         --- DONE
000010CA                           171  *$B                     GROUP_B: EOR, CMP                           --- Not started
000010CA                           172  *$C                     GROUP_C: MULS                               --- Not started
000010CA                           173  *$D                     GROUP_D: ADD, ADDA                          --- Not started
000010CA                           174  *$E                     GROUP_E: LSR, LSL, ASR, ASL, ROL, ROR       --- Not started
000010CA                           175  *$F                     GROUP_F: INVALID_OP                         --- DONE
000010CA                           176  
000010CA                           177  
000010CA                           178  * OP_JSR_Routine
000010CA                           179  **********************************************************************************
000010CA                           180  * Description: Catalog all supported OP codes into groupings based on their hex
000010CA                           181  * values. Sort the supported OP codes by looking at the first nibble for their
000010CA                           182  * grouping value. Call underlying subroutines for further identification of the
000010CA                           183  * op code.
000010CA                           184  *
000010CA                           185  * Registers used: A6,D0,D1 
000010CA                           186  *
000010CA                           187  * Precondition: Instruction set (size Word) has been loaded in the appropriate
000010CA                           188  * address to be parsed and read.
000010CA                           189  
000010CA                           190  * Postcondition: OP code has been identified as either valid or invalid. If it is
000010CA                           191  * valid, it is stored into A6 and EA parsing methods are called to pass needed
000010CA                           192  * information to EA. If invalid, DATA output will be utilized to indicate so.
000010CA                           193  **********************************************************************************
000010CA                           194  * These valid operand codes refer to the basic supported operand codes
000010CA                           195  * Groups refer to the first nibble value that is supported by the operand
000010CA                           196  LOAD_OP_CODE:
000010CA  3038 1000                197      MOVE.W CUR_OP_CODE,D0
000010CE  3CB8 1000                198      MOVE.W CUR_OP_CODE,(A6)
000010D2  3016                     199      MOVE.W (A6),D0          ;Load current instruction set into D0
000010D4  4EB9 000010DA            200      JSR OP_JSR_Routine      ;Use the JSR routine to identify the op code
000010DA                           201  OP_JSR_Routine:
000010DA  48E7 C000                202      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
000010DE  720C                     203      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
000010E0  E2A8                     204      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
000010E2                           205  
000010E2                           206  GROUP_0:                ;$0| ORI, BCLR (static and dynamic), CMPI                  
000010E2  B03C 0000                207      CMP.B   #$0,D0                 ;Compare first nibble
000010E6  6600 000C                208      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
000010EA  4EB9 00001300            209      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
000010F0  6000 010C                210      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000010F4                           211      
000010F4                           212  GROUP_1:                ;$1| MOVE.B
000010F4  B03C 0001                213      CMP.B   #$1,D0                 ;Compare first nibble
000010F8  6600 000C                214      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
000010FC  4EB9 00001376            215      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
00001102  6000 00FA                216      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001106                           217  
00001106                           218  GROUP_2:                ;$2| MOVE.L, MOVEA.L
00001106  B03C 0002                219      CMP.B   #$2,D0                 ;Compare first nibble
0000110A  6600 000C                220      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
0000110E  4EB9 0000138C            221      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
00001114  6000 00E8                222      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001118                           223  
00001118                           224  GROUP_3:                ;$3| MOVE.W, MOVEA.W
00001118  B03C 0003                225      CMP.B   #$3,D0                 ;Compare first nibble
0000111C  6600 000C                226      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
00001120  4EB9 000013D2            227      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
00001126  6000 00D6                228      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000112A                           229  
0000112A                           230  GROUP_4:                ;$4| LEA, JSR, RTS, NEG, MOVEM
0000112A  B03C 0004                231      CMP.B   #$4,D0                 ;Compare first nibble
0000112E  6600 000C                232      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
00001132  4EB9 0000141C            233      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
00001138  6000 00C4                234      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000113C                           235  
0000113C                           236  
0000113C                           237  GROUP_5:                ;$5| SUBQ
0000113C  B03C 0005                238      CMP.B   #$5,D0                 ;Compare first nibble
00001140  6600 000C                239      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
00001144  4EB9 0000148C            240      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
0000114A  6000 00B2                241      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000114E                           242  
0000114E                           243  
0000114E                           244  GROUP_6:                ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
0000114E  B03C 0006                245      CMP.B   #$6,D0                 ;Compare first nibble
00001152  6600 000C                246      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
00001156  4EB9 000014B4            247      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
0000115C  6000 00A0                248      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001160                           249  
00001160                           250  
00001160                           251  GROUP_7:                ;$7| Display: DATA, $WXYZ (Unsupported)
00001160  B03C 0007                252      CMP.B   #$7,D0                 ;Compare first nibble
00001164  6600 000C                253      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
00001168  4EB9 00001518            254      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
0000116E  6000 008E                255      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001172                           256  
00001172                           257  
00001172                           258  GROUP_8:                ;$8| DIVS, OR
00001172  B03C 0008                259      CMP.B   #$8,D0                 ;Compare first nibble
00001176  6600 000C                260      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
0000117A  4EB9 0000151E            261      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
00001180  6000 007C                262      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001184                           263  
00001184                           264  
00001184                           265  GROUP_9:                ;$9| SUB
00001184  B03C 0009                266      CMP.B   #$9,D0                 ;Compare first nibble
00001188  6600 000C                267      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
0000118C  4EB9 0000151E            268      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
00001192  6000 006A                269      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001196                           270  
00001196                           271  
00001196                           272  GROUP_A:                ;$A| Display: DATA, $WXYZ (Unsupported)
00001196  B03C 000A                273      CMP.B   #$A,D0                 ;Compare first nibble
0000119A  6600 000C                274      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
0000119E  4EB9 0000151E            275      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
000011A4  6000 0058                276      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011A8                           277  
000011A8                           278  
000011A8                           279  GROUP_B:                ;$B| EOR, CMP
000011A8  B03C 000B                280      CMP.B   #$B,D0                 ;Compare first nibble
000011AC  6600 000C                281      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
000011B0  4EB9 00001524            282      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
000011B6  6000 0046                283      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011BA                           284  
000011BA                           285  
000011BA                           286  GROUP_C:                ;$C| MULS
000011BA  B03C 000C                287      CMP.B   #$C,D0                 ;Compare first nibble
000011BE  6600 000C                288      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
000011C2  4EB9 00001524            289      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
000011C8  6000 0034                290      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011CC                           291  
000011CC                           292  
000011CC                           293  GROUP_D:                 ;$D| ADD, ADDA
000011CC  B03C 000D                294      CMP.B   #$D,D0                 ;Compare first nibble
000011D0  6600 000C                295      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
000011D4  4EB9 00001524            296      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
000011DA  6000 0022                297      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011DE                           298  
000011DE                           299  
000011DE                           300  GROUP_E:                ;$E| LSR, LSL, ASR, ASL, ROL, ROR
000011DE  B03C 000E                301      CMP.B   #$E,D0                 ;Compare first nibble
000011E2  6600 000C                302      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
000011E6  4EB9 00001524            303      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
000011EC  6000 0010                304      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011F0                           305  
000011F0                           306  
000011F0                           307  GROUP_F:                ;$F| Display: DATA, $WXYZ (Unsupported)
000011F0  B03C 000F                308      CMP.B   #$F,D0                 ;Compare first nibble
000011F4  4EB9 00001524            309      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
000011FA  6000 0002                310      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011FE                           311  
000011FE                           312  
000011FE                           313  OP_JSR_DONE:
000011FE  4CDF 0003                314           MOVEM.L (SP)+,D0-D1       ;Recover register D0
00001202  4EF9 0000153A            315           JMP READ_NEXT_INSTRUCTION
00001208                           316  **********************************************************************************
00001208                           317  
00001208                           318  ********** EA Parsing ************************************************************
00001208                           319  
00001208                           320  * MOVE_LAST_6_BITS_TO_EA
00001208                           321  **********************************************************************************
00001208                           322  * Description: For OP codes with the last 6 bits specified as EA Mode and EA Reg,
00001208                           323  * the last 6 bits will be parsed and moved into the appropriate registers.
00001208                           324  *
00001208                           325  * Registers used: A6,D0,D1,D6,D7 
00001208                           326  
00001208                           327  * Precondition: OP code has been identified with only the last 6 bits for EA,
00001208                           328  * current instruction set is stored into A6.
00001208                           329  
00001208                           330  * Postcondition: Last 6 bits of instruction bit has been isolated and stored. Bits
00001208                           331  * for EA Mode have been stored in D7, Bits for EA Reg been stored in D6.
00001208                           332  **********************************************************************************
00001208                           333  MOVE_LAST_6_BITS_TO_EA:      ;Move last 6 bits from EA field to relevant registers
00001208                           334     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001208  3038 1000                335      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
0000120C  323C 000A                336      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
00001210  E368                     337      LSL.W   D1,D0            ;Truncate to find the last 6 bits
00001212  E268                     338      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
00001214  3E00                     339      MOVE.W  D0,D7            ;Move last 6 bits into D7
00001216  323C 0003                340      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
0000121A  E26F                     341      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
0000121C  3C07                     342      MOVE.W  D7,D6            ;Move the 'upper' 3 bits into D6
0000121E  323C 000D                343      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
00001222  E368                     344      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
00001224  E268                     345      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001226  3E00                     346      MOVE.W  D0,D7            ;Move the 'lower' 3 bits into D7
00001228                           347     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
00001228  4E75                     348      RTS                      ;Return to stack
0000122A                           349      
0000122A                           350  * FIND_2_BIT_SIZE_TO_EA
0000122A                           351  **********************************************************************************
0000122A                           352  * Description: For OP codes with 2 bit size fields, the 2 relevant bits (7-6) will 
0000122A                           353  * be parsed and moved to the appropriate registers.
0000122A                           354  *
0000122A                           355  * Registers used: A6,D0,D1,D5
0000122A                           356  *
0000122A                           357  * Precondition: OP code has been identified with 2 size bit field for EA, current
0000122A                           358  * instruction set for OP code is stored in to A6.
0000122A                           359  *
0000122A                           360  * Postcondition: 2 bit size field has been isolated and stored into D5.
0000122A                           361  **********************************************************************************
0000122A                           362  FIND_2_BIT_SIZE_TO_EA:      ;Move the 2 bit size field relevant register
0000122A                           363     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
0000122A  3038 1000                364      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
0000122E  323C 0008                365      MOVE.W   #8,D1          ;Prepare 8 bit shift to D1
00001232  E368                     366      LSL.W    D1,D0          ;Truncate to find the 2 size bits
00001234  E268                     367      LSR.W    D1,D0          ;Reposition the bits
00001236  323C 0006                368      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
0000123A  E268                     369      LSR.W    D1,D0          ;Truncate to shift 2 bits to a byte
0000123C  3800                     370      MOVE.W   D0,D4          ;Move 2 size bits into D5
0000123E                           371    ;  MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
0000123E  4E75                     372      RTS                     ;Return to stack
00001240                           373  **********************************************************************************
00001240                           374  
00001240                           375  * FIND_3_BIT_REG_TO_EA
00001240                           376  **********************************************************************************
00001240                           377  * Description: OP codes with a dynamic 3 bit register in bits 11-9 will be parsed
00001240                           378  * and have those 3 bits isolated and moved to the appropriate registers.
00001240                           379  *
00001240                           380  * Registers used: A6,D0,D1,D5
00001240                           381  *
00001240                           382  * Precondition: OP code has been identified with a dynamic 3 bit register in bits
00001240                           383  * 11-9.
00001240                           384  *
00001240                           385  * Postcondition: 3 bit dynamic register has been isolated and stored into D4.
00001240                           386  **********************************************************************************
00001240                           387  FIND_3_BIT_REG_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
00001240                           388     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
00001240  3038 1000                389      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
00001244  323C 0004                390      MOVE.W   #4,D1          ;Prepare 4 bit shift to D1
00001248  E368                     391      LSL.W    D1,D0          ;Truncate to find the 2 size bits
0000124A  E268                     392      LSR.W    D1,D0          ;Reposition the bits
0000124C  323C 0009                393      MOVE.W   #9,D1          ;Prepare 9 bit shift to D1
00001250  E268                     394      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
00001252  3A00                     395      MOVE.W   D0,D5          ;Move 3 register bits into D4
00001254                           396     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
00001254  4E75                     397      RTS                     ;Return to stack
00001256                           398  **********************************************************************************
00001256                           399  
00001256                           400  * MOVE_AND_MOVEA_PARSE_EA
00001256                           401  **********************************************************************************
00001256                           402  * Description: Special parsing for the SRC and DST Mode/Reg for MOVE/MOVE
00001256                           403  *
00001256                           404  * Registers used: A6,D0,D1,D7,D6,D5,D4
00001256                           405  *
00001256                           406  * Precondition: OP code has been identified with either MOVE or MOVEA
00001256                           407  *
00001256                           408  * Postcondition: Store all relevant EA bits into associated register.
00001256                           409  **********************************************************************************
00001256                           410  MOVE_AND_MOVEA_PARSE_EA:       ;Move the 3 bit dynamic register bits to proper register
00001256                           411     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001256  3038 1000                412      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
0000125A  323C 000A                413      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
0000125E  E368                     414      LSL.W   D1,D0            ;Truncate to find the last 6 bits
00001260  E268                     415      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
00001262  3E00                     416      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
00001264  323C 0003                417      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
00001268  E26F                     418      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
0000126A  3A07                     419      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
0000126C  323C 000D                420      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
00001270  E368                     421      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
00001272  E268                     422      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001274  3800                     423      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
00001276                           424      **************MOVING SOURCE*********** TO BE DONE LATER
00001276                           425      ; MOVE.W #%0011 011 001 001 101,(A6)              ;MOVEA.W A5,A3
00001276                           426      ; MOVE.W #%0010 011 001 001 101,D0                ;MOVEA.L A5,A3
00001276                           427       ;Expected values:
00001276                           428      ;D7, DST REG:   011
00001276                           429      ;D6, DST MODE:  001
00001276                           430      ;D5, SRC MODE:  001
00001276                           431      ;D4, SRC REG:   101
00001276                           432      ;00011001
00001276  3038 1000                433      MOVE.W CUR_OP_CODE,D0     ;Move current OP code into D0     
0000127A  323C 0004                434      MOVE.W  #4,D1             ;Prepare 4 bit shift to D1
0000127E  E368                     435      LSL.W   D1,D0             ;Truncate to find bits 11-6
00001280  E268                     436      LSR.W   D1,D0             ;Reposition bits
00001282  323C 0006                437      MOVE.W  #6,D1             ;Prepare 6 bit shift to D1
00001286  E268                     438      LSR.W   D1,D0             ;Truncate the SRC Reg/Mode bits
00001288  323C 0003                439      MOVE.W  #3,D1             ;Prepare a 3 bit shift to D1 for DST Reg/Mode
0000128C  3C00                     440      MOVE.W  D0,D6             ;Copy over the current 6 bits to D6
0000128E  E268                     441      LSR.W   D1,D0             ;Truncate DST Mode  
00001290  3E00                     442      MOVE.W  D0,D7             ;Move DST Reg to D7
00001292  323C 000D                443      MOVE.W  #13,D1             
00001296  E36E                     444      LSL.W   D1,D6             ;Truncate 13 bits in D6
00001298  E26E                     445      LSR.W   D1,D6             ;Reposition D6
0000129A                           446                                ;D6 now contains the DST Reg
0000129A                           447     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
0000129A  4E75                     448      RTS                     ;Return to stack
0000129C                           449  **********************************************************************************
0000129C                           450  
0000129C                           451  *FIND_TRAILING_BITS_TO_EA
0000129C                           452  **********************************************************************************
0000129C                           453  FIND_TRAILING_BITS_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
0000129C                           454     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
0000129C  3038 1000                455      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
000012A0  323C 0007                456      MOVE.W   #7,D1          ;Prepare 4 bit shift to D1
000012A4  E368                     457      LSL.W    D1,D0          ;Truncate to find the 2 size bits
000012A6  E268                     458      LSR.W    D1,D0          ;Reposition the bits
000012A8  323C 0006                459      MOVE.W   #6,D1          ;Prepare 9 bit shift to D1
000012AC  E268                     460      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
000012AE  3680                     461      MOVE.W   D0,(A3)          ;Move 3 register bits into D4
000012B0                           462     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
000012B0  4E75                     463      RTS                    ;Return to stack
000012B2                           464  **********************************************************************************
000012B2                           465  
000012B2                           466  *PARSE_EA_CONSTANT_BITS
000012B2                           467  **********************************************************************************
000012B2                           468  * Definition: Uses CUR_OP_CODE to shift the proper bits into the global constants
000012B2                           469  * used for EA (MNEMONIC,FIRST_3,SECOND_3,THIRD_3,FOURTH_3. Where MNEMONIC refers
000012B2                           470  * to the first 4 bits of CUR_OP_CODE (15-12), FIRST_3 refers to the first group
000012B2                           471  * of 3 bits (11-9), SECOND_3 refers to the second group of 3 bits (8-6), THIRD_3
000012B2                           472  * refers to the third group of 3 bits (5-3), and FOURTH_3 refers to the fourth
000012B2                           473  * group of 3 bits (2-0). Shifts CUR_OP_CODE bits to initialize constants.
000012B2                           474  *
000012B2                           475  * Registers used: D0,D1
000012B2                           476  *
000012B2                           477  * Precondition: CUR_OP_CODE has been set with an 4 hex instruction set
000012B2                           478  * 
000012B2                           479  * Postcondition: MNEMONIC, FIRST_3, SECOND_3, THIRD_3, FOURTH_3 have been set
000012B2                           480  * to the corresponding values.
000012B2                           481  **********************************************************************************
000012B2                           482  PARSE_EA_CONSTANT_BITS:
000012B2                           483      *MNEMONIC SHIFT
000012B2  3038 1000                484      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D0
000012B6  323C 000C                485      MOVE.W #12,D1               ;Prepare a bit shift of 12 into D1
000012BA  E268                     486      LSR.W D1,D0                 ;Shift 12 bits from D0 right
000012BC  11C0 10A3                487      MOVE.B D0,MNEMONIC          ;Set MNEMONIC to D0
000012C0                           488      *FIRST_3 SHIFT
000012C0  323C 0009                489      MOVE.W #9,D1                ;Prepare a bit shift of 9 into D1
000012C4  3038 1000                490      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012C8  E948                     491      LSL.W #4,D0                 ;Shift out bits 15-12 in D0
000012CA  E848                     492      LSR.W #4,D0                 ;Reposition D0
000012CC  E268                     493      LSR.W  D1,D0                ;Shift D0 9 bits right
000012CE  11C0 10A4                494      MOVE.B D0,FIRST_3           ;Set FIRST_3 to D0
000012D2                           495      *SECOND_3 SHIFT
000012D2  3038 1000                496      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012D6  EF48                     497      LSL.W #7,D0                 ;Shift out bits 15-9 in D0
000012D8  EE48                     498      LSR.W #7,D0                 ;Reposition D0
000012DA  EC48                     499      LSR.W #6,D0                 ;Shift D0 6 bits right
000012DC  11C0 10A5                500      MOVE.B D0,SECOND_3          ;Set SECOND_3 to D0
000012E0                           501      *THIRD_3 SHIFT
000012E0  3038 1000                502      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012E4  E648                     503      LSR.W #3,D0                 ;Shift D0 3 bits right
000012E6  323C 000D                504      MOVE.W #13,D1               ;Prepare a 13 bit shift into D1
000012EA  E368                     505      LSL.W D1,D0                 ;Truncate first 13 bits of D0
000012EC  E268                     506      LSR.W D1,D0                 ;Reposition D0
000012EE  11C0 10A6                507      MOVE.B D0,THIRD_3           ;Set THIRD_3 to D0
000012F2                           508      *FOURTH_3 SHIFT
000012F2  3038 1000                509      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012F6  E368                     510      LSL.W D1,D0                 ;Grab the fourth 3-bit group
000012F8  E268                     511      LSR.W D1,D0                 ;Shift D0 back into position
000012FA  11C0 10A7                512      MOVE.B D0,FOURTH_3          ;Set FOURTH_3 to Do
000012FE  4E75                     513      RTS                         ;Return to stack
00001300                           514  **********************************************************************************
00001300                           515  ********** End of EA Parsing *****************************************************
00001300                           516  
00001300                           517  *******************JMP LABELS ****************************************************
00001300                           518  * Labelling for group codes will be in the following format
00001300                           519  
00001300                           520  * <JMP Labelname>
00001300                           521  ********************************************************************************
00001300                           522  * Checking List Order (If more than one value)
00001300                           523  * Operand1 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
00001300                           524  * Operand2 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
00001300                           525  
00001300                           526  * Where a-b will refer to the bit corresponding bit value in the instruction
00001300                           527  * format, and a specifier will be attached such as Size, EA Mode, SRC Reg, etc
00001300                           528  * to clarify what a specific bit range means.
00001300                           529  * Checking order refers to what order the checks will be performed in. 
00001300                           530  * Any other code outside of the listed ones will be INVALID_OP.
00001300                           531  ********************************************************************************
00001300                           532  
00001300                           533  ********************************************************************************
00001300                           534  * Global Field Descriptions
00001300                           535  * Size Field: Byte = 00 Word = 01 Long = 10
00001300                           536  * EA Mode: Refer to EA Address Modes
00001300                           537  * EA Reg: 3-bit input that is mapped to the respective binary value
00001300                           538  ********************************************************************************
00001300                           539  
00001300                           540  * GROUP_0                      
00001300                           541  ********************************************************************************
00001300                           542  * Description: Checks for the following listed OP codes to be present or not
00001300                           543  *
00001300                           544  * ORI: $00, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001300                           545  * CMPI: $0C, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001300                           546  * Dynamic BCLR: $0, 11-9 Register, 8-6 %110, 5-3 EA Mode, 2-0 EA Reg
00001300                           547  * Static BCLR: $01, 7-6 10, 5-3 EA Mode, 2-0 EA Reg
00001300                           548  *
00001300                           549  * Precondition: First nibble has been identified as $0
00001300                           550  * Postcondition: Parses proper OP code with a nibble value of $0 or finds an
00001300                           551  * invalid OP code. After a successful parse loading for EA values will be done
00001300                           552  * through a subroutine.
00001300                           553  ********************************************************************************
00001300                           554  C_GROUP_0:
00001300  48E7 C000                555      MOVEM.L D0-D1, -(SP) ; Backup registers
00001304                           556      
00001304                           557  CHECK_OP_ORI:
00001304  3038 1000                558      MOVE.W  CUR_OP_CODE,D0         ;Move current instruction set into D
00001308  0240 FF00                559      ANDI.W  #$FF00,D0       ;Mask relevant bits to D0
0000130C  B07C 0000                560      CMP.W   #$0000,D0       ;Compare the appropriate masked bits     
00001310  6600 0010                561      BNE     CHECK_OP_CMPI   ;Branch to next comparison if not equal
00001314  4EB9 00001564            562      JSR     PRINT_OP_ORI    ;Print the OP code if equal
0000131A  4EB8 122A                563      JSR     FIND_2_BIT_SIZE_TO_EA         
0000131E  6000 0054                564      BRA     CG0_C           ;Finish routine
00001322                           565  CHECK_OP_CMPI:
00001322  3038 1000                566      MOVE.W  CUR_OP_CODE,D0         ;Move current instruction set into D
00001326  0240 FF00                567      ANDI.W  #$FF00,D0       ;Mask relevant bits to D0
0000132A  B07C 0C00                568      CMP.W   #$0C00,D0       ;Compare the appropriate masked bits   
0000132E  6600 000C                569      BNE     CHECK_OP_S_BCLR ;Branch to next comparison if not equal       
00001332  4EB9 00001572            570      JSR     PRINT_OP_CMPI   ;Print the OP code if equal
00001338  6000 003A                571      BRA     CG0_C           ;Finish routine
0000133C                           572  CHECK_OP_S_BCLR:
0000133C  3038 1000                573      MOVE.W  CUR_OP_CODE,D0         ;Move current instruction set into D
00001340  0240 FF00                574      ANDI.W  #$FF00,D0       ;Mask relevant bits to D0
00001344  B07C 0800                575      CMP.W   #$0800,D0       ;Compare the appropriate masked bits
00001348  6600 000C                576      BNE     CHECK_OP_D_BCLR ;Branch to next comparison if not equal
0000134C  4EB9 0000158C            577      JSR     PRINT_OP_S_BCLR ;Print the OP code if equal
00001352                           578      ;MOVEM.L (SP)+,D6-D7     ;POP STACK
00001352  6000 0020                579      BRA     CG0_C           ;Finish routine
00001356                           580  CHECK_OP_D_BCLR:
00001356  3038 1000                581      MOVE.W  CUR_OP_CODE,D0                ;Move current instruction set into D
0000135A  0240 0180                582      ANDI.W  #%0000000110000000,D0 ;Do a direct binary bitmask to see which bits are needed
0000135E  B07C 0180                583      CMP.W   #%0000000110000000,D0 ;Compare the expected binary value
00001362  6600 000C                584      BNE     CG0_F                 ;If not equal this must be an invalid OP code
00001366  4EB9 000015AA            585      JSR     PRINT_OP_D_BCLR       ;Print the OP code if equal
0000136C  6000 0006                586      BRA     CG0_C                ;Finish routine
00001370                           587  CG0_F:                       ;Checks have been finished, invalid OP code has been found
00001370  6000 01B8                588      BRA INVALID_OP    
00001374                           589  CG0_C:                       ;Checks have been finished,a valid OP code has been found
00001374  4E75                     590      RTS                      ;Return to stack
00001376                           591      
00001376                           592  * GROUP_1                      
00001376                           593  ********************************************************************************
00001376                           594  * MOVE.B: $1, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
00001376                           595  ********************************************************************************
00001376                           596  C_GROUP_1:
00001376                           597  
00001376                           598  CHECK_OP_MOVE_B:
00001376  3038 1000                599      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0          
0000137A  0240 FF00                600      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
0000137E  B07C 1000                601      CMP.W #$1000,D0                 ;Compare the appropriate masked bits 
00001382  6600 01A6                602      BNE INVALID_OP                  ;Invalid OP code has been found
00001386  6700 0240                603      BEQ PRINT_OP_MOVEB              ;Print the OP code if equal
0000138A  4E75                     604      RTS                             ;Return to stack
0000138C                           605  * GROUP_2
0000138C                           606  ********************************************************************************
0000138C                           607  * MOVEA.L: $2, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
0000138C                           608  * MOVE.L: $2, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
0000138C                           609  ********************************************************************************
0000138C                           610  C_GROUP_2:
0000138C                           611  
0000138C                           612  CHECK_OP_MOVEA_L:
0000138C  3038 1000                613      MOVE.W CUR_OP_CODE,D0                  ;Move current instruction set into D0  
00001390  0240 FF00                614      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001394  B07C 2000                615      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
00001398  6000 0002                616      BRA FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
0000139C                           617  
0000139C                           618      
0000139C                           619  FIND_MOVEA_L_DIFFERENCE:    ;Finds difference between MOVEA and MOVE
0000139C  3038 1000                620      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
000013A0  323C 0007                621      MOVE.W   #7,D1          ;Prepare 7 bit shift to D1
000013A4  E368                     622      LSL.W    D1,D0          ;Truncate to find the 3 address mode bits
000013A6  E268                     623      LSR.W    D1,D0          ;Reposition the bits
000013A8  323C 0006                624      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
000013AC  E268                     625      LSR.W    D1,D0          ;Truncate to shift 3 bits to a register
000013AE  3C00                     626      MOVE.W   D0,D6          ;Move 3 address mode bits into D6
000013B0  BC7C 0001                627      CMP.W   #$1,D6          ;Check if the address mode value is MOVEA
000013B4  6600 0006                628      BNE     CHECK_OP_MOVE_L  ;Branch if not equal to check MOVE
000013B8  6700 0224                629      BEQ     PRINT_OP_MOVEA_L ;Print out the MOVEA address 
000013BC                           630      
000013BC                           631  CHECK_OP_MOVE_L:
000013BC  3038 1000                632      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000013C0  0240 FF00                633      ANDI.W #$FF00,D0
000013C4  B07C 2000                634      CMP.W #$2000,D0
000013C8  6600 0160                635      BNE INVALID_OP
000013CC  6700 0226                636      BEQ PRINT_OP_MOVE_L
000013D0  4E75                     637      RTS
000013D2                           638      
000013D2                           639  * GROUP_3
000013D2                           640  ********************************************************************************
000013D2                           641  * MOVEA.W: $3, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
000013D2                           642  * MOVE.W: $3, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000013D2                           643  ********************************************************************************
000013D2                           644  C_GROUP_3:
000013D2                           645  
000013D2                           646  CHECK_OP_MOVEA_W:
000013D2  3038 1000                647      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000013D6  0240 FF00                648      ANDI.W #$FF00,D0
000013DA  B07C 3000                649      CMP.W #$3000,D0
000013DE  6000 0002                650      BRA FIND_MOVEA_W_DIFFERENCE
000013E2                           651  
000013E2                           652      
000013E2                           653  FIND_MOVEA_W_DIFFERENCE:      ;Finds difference between MOVEA and MOVE
000013E2  3038 1000                654      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
000013E6  323C 0007                655      MOVE.W   #7,D1          ;Prepare 7 bit shift to D1
000013EA  E368                     656      LSL.W    D1,D0          ;Truncate to find the 3 address mode bits
000013EC  E268                     657      LSR.W    D1,D0          ;Reposition the bits
000013EE  323C 0006                658      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
000013F2  E268                     659      LSR.W    D1,D0          ;Truncate to shift 3 bits to a register
000013F4  3C00                     660      MOVE.W   D0,D6          ;Move 3 address mode bits into D6
000013F6  BC7C 0001                661      CMP.W   #$1,D6          ;Check if the address mode value is MOVEA
000013FA  4EB8 1256                662      JSR     MOVE_AND_MOVEA_PARSE_EA
000013FE  6600 0006                663      BNE     CHECK_OP_MOVE_W 
00001402  6700 0206                664      BEQ     PRINT_OP_MOVEA_W  
00001406                           665      
00001406                           666  CHECK_OP_MOVE_W:
00001406  3038 1000                667      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000140A  0240 FF00                668      ANDI.W #$FF00,D0
0000140E  B07C 3000                669      CMP.W #$3000,D0
00001412  6600 0116                670      BNE INVALID_OP
00001416  6700 0208                671      BEQ PRINT_OP_MOVE_W
0000141A  4E75                     672      RTS
0000141C                           673  
0000141C                           674  * GROUP_4
0000141C                           675  ********************************************************************************
0000141C                           676  * LEA: $4, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
0000141C                           677  * JSR: $4E, 7-6 %10, 5-3 EA Mode, 2-0 EA Reg 
0000141C                           678  * RTS: $4E75
0000141C                           679  * NEG: $44, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
0000141C                           680  * MOVEM: $4, 11 %1, 10 %D, 9-7 %001, 6 S, 5-3 EA Mode, 2-0 EA Reg
0000141C                           681  * %D = 0 , Register to Memory, 1 Memory to Register
0000141C                           682  ********************************************************************************
0000141C                           683  C_GROUP_4:
0000141C                           684  CHECK_OP_RTS:
0000141C  3038 1000                685      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001420  B07C 4E75                686      CMP.W  #$4E75,D0
00001424  6600 0006                687      BNE    CHECK_OP_NOP
00001428  6700 0228                688      BEQ    PRINT_OP_RTS
0000142C                           689      
0000142C                           690  CHECK_OP_NOP:
0000142C  3038 1000                691      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001430  B07C 4E71                692      CMP.W  #$4E71,D0
00001434  6600 0006                693      BNE    CHECK_OP_LEA
00001438  6700 01FC                694      BEQ    PRINT_OP_NOP
0000143C                           695      
0000143C                           696  CHECK_OP_LEA:
0000143C  3038 1000                697      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001440  0240 F1C0                698      ANDI.W #$F1C0,D0
00001444  B07C 41C0                699      CMP.W  #$41C0,D0
00001448  6600 0006                700      BNE    CHECK_OP_JSR
0000144C  6700 0212                701      BEQ    PRINT_OP_LEA
00001450                           702      
00001450                           703  CHECK_OP_JSR:
00001450  3038 1000                704      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001454  0240 FFC0                705      ANDI.W #$FFC0,D0
00001458  B07C 4E80                706      CMP.W  #$4E80,D0
0000145C  6600 0006                707      BNE    CHECK_OP_NEG
00001460  6700 01E2                708      BEQ    PRINT_OP_JSR
00001464                           709      
00001464                           710  CHECK_OP_NEG:
00001464  3038 1000                711      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001468  0240 FF00                712      ANDI.W #$FF00,D0
0000146C  B07C 4400                713      CMP.W  #$4400,D0
00001470  6600 0006                714      BNE    CHECK_OP_MOVEM
00001474  6700 01F8                715      BEQ    PRINT_OP_NEG
00001478                           716  **************** COME BACK TO FINISH UP SIZE **********************************
00001478                           717  CHECK_OP_MOVEM:
00001478  3038 1000                718      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
0000147C  0240 FB80                719      ANDI.W #$FB80,D0
00001480  B07C 4880                720      CMP.W  #$4880,D0
00001484  6600 00A4                721      BNE    INVALID_OP
00001488  6700 01F2                722      BEQ    PRINT_OP_MOVEM_W
0000148C                           723      
0000148C                           724  * GROUP_5
0000148C                           725  ********************************************************************************
0000148C                           726  * SUBQ: $5, 11-9 DATA, 8 %1, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
0000148C                           727  * Validation checking:
0000148C                           728  * Check against, ADDQ, Scc, DBcc
0000148C                           729  ********************************************************************************
0000148C                           730  C_GROUP_5:
0000148C                           731  
0000148C                           732  VALID_CHECK_OP_SUBQ:
0000148C  3038 1000                733      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001490  0240 F1C0                734      ANDI.W #$F1C0,D0        ;Bitmask check for Scc, DBcc and ADDQ
00001494  B07C 51C0                735      CMP.W  #$51C0,D0        ;This should be the only valid one for SUBQ
00001498  6700 0090                736      BEQ    INVALID_OP       ;If not equal it's invalid
0000149C  6600 0002                737      BNE    CHECK_OP_SUBQ
000014A0                           738  CHECK_OP_SUBQ     
000014A0  3038 1000                739      MOVE.W  CUR_OP_CODE,D0  ;Actual check for SUBQ
000014A4  0240 F100                740      ANDI.W #$F100,D0        ;Bitmask check for SUBQ
000014A8  B07C 5100                741      CMP.W  #$5100,D0        ;Compare the proper value
000014AC  6700 01EA                742      BEQ    PRINT_OP_SUBQ    ;If equal print it out
000014B0  6600 0078                743      BNE    INVALID_OP       ;Else the operand is invalid
000014B4                           744      
000014B4                           745  * GROUP_6
000014B4                           746  ********************************************************************************
000014B4                           747  * BRA: $60, 7-0 8-Bit Displacement
000014B4                           748  * Bcc: $6, 11-8 Condition, 7-0 8-Bit Displacement
000014B4                           749  *   Branch: <Condition>   
000014B4                           750  *   BCS: %0101          
000014B4                           751  *   BGE: %1100      
000014B4                           752  *   BLT: %1101  
000014B4                           753  *   BVC: %1000
000014B4                           754  *   
000014B4                           755  *   MOVE.W #%0110010100000000   ;BCS
000014B4                           756  *   MOVE.W #%0110110001010101   ;BGE
000014B4                           757  *   MVE.W #%0110110110101010    BLT
000014B4                           758  *   MOVE.W #%0110100001010101   ;BVC
000014B4                           759  ********************************************************************************
000014B4                           760  C_GROUP_6:
000014B4                           761  
000014B4                           762  CHECK_OP_BRA:
000014B4  3038 1000                763      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0       
000014B8  0240 FF00                764      ANDI.W #$FF00,D0
000014BC  B07C 6000                765      CMP.W  #$6000,D0
000014C0  6700 021C                766      BEQ     PRINT_OP_BRA
000014C4  6600 0002                767      BNE     CHECK_OP_BCS
000014C8                           768  
000014C8                           769  CHECK_OP_BCS:
000014C8  3038 1000                770      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000014CC  0240 FF00                771      ANDI.W #$FF00,D0
000014D0  B07C 6500                772      CMP.W  #$6500,D0 
000014D4  6700 01D0                773      BEQ    PRINT_OP_BCS
000014D8  6600 0002                774      BNE    CHECK_OP_BGE
000014DC                           775      
000014DC                           776  CHECK_OP_BGE:
000014DC  3038 1000                777      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000014E0  0240 FF00                778      ANDI.W #$FF00,D0
000014E4  B07C 6C00                779      CMP.W  #$6C00,D0 
000014E8  6700 01CA                780      BEQ    PRINT_OP_BGE
000014EC  6600 0002                781      BNE    CHECK_OP_BLT
000014F0                           782      
000014F0                           783  CHECK_OP_BLT:
000014F0  3038 1000                784      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000014F4  0240 FF00                785      ANDI.W #$FF00,D0
000014F8  B07C 6D00                786      CMP.W  #$6D00,D0 
000014FC  6700 01C4                787      BEQ    PRINT_OP_BLT
00001500  6600 0002                788      BNE    CHECK_OP_BVC
00001504                           789      
00001504                           790  CHECK_OP_BVC:
00001504  3038 1000                791      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001508  0240 FF00                792      ANDI.W #$FF00,D0
0000150C  B07C 6800                793      CMP.W  #$6800,D0 
00001510  6700 01BE                794      BEQ    PRINT_OP_BVC
00001514  6600 0014                795      BNE    INVALID_OP
00001518                           796      
00001518                           797      
00001518                           798  *GROUP_7
00001518                           799  ********************************************************************************
00001518                           800  * Currently no OP codes here are supported.
00001518                           801  ********************************************************************************
00001518                           802  C_GROUP_7:
00001518  4EB9 0000152A            803      JSR INVALID_OP
0000151E                           804  
0000151E                           805  * GROUP_8
0000151E                           806  ********************************************************************************
0000151E                           807  * DIVS: $8, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
0000151E                           808  * OR: $80, 7-6 Size, 5-3 EA Mode, 2-0 EA Register
0000151E                           809  ********************************************************************************
0000151E                           810  C_GROUP_8:
0000151E                           811  
0000151E                           812  CHECK_OP_DIVS:
0000151E                           813  
0000151E                           814  CHECK_OP_OR:
0000151E                           815  
0000151E                           816  * GROUP_9                      
0000151E                           817  ********************************************************************************
0000151E                           818  * SUB: $9, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
0000151E                           819  ********************************************************************************
0000151E                           820  C_GROUP_9:
0000151E                           821  
0000151E                           822  CHECK_OP_SUB:
0000151E                           823  
0000151E                           824  *GROUP_A
0000151E                           825  ********************************************************************************
0000151E                           826  * Currently no OP codes here are supported.
0000151E                           827  ********************************************************************************
0000151E                           828  C_GROUP_A:
0000151E  4EB9 0000152A            829      JSR INVALID_OP
00001524                           830  
00001524                           831  * GROUP_B                     
00001524                           832  ********************************************************************************
00001524                           833  * EOR: $B, 11-9 Reg, 8 %1, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001524                           834  * CMP: $B, 11-9 Reg, 8 %0, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001524                           835  * The specific bit difference is listed 
00001524                           836  ********************************************************************************
00001524                           837  C_GROUP_B:
00001524                           838  
00001524                           839  CHECK_OP_EOR:
00001524                           840  
00001524                           841  CHECK_OP_CMP:
00001524                           842  
00001524                           843  * GROUP_C                     
00001524                           844  ********************************************************************************
00001524                           845  * MULS: $C, 11-8 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00001524                           846  ********************************************************************************
00001524                           847  C_GROUP_C:
00001524                           848  
00001524                           849  CHECK_OP_MULS:
00001524                           850  
00001524                           851  * GROUP_D                     
00001524                           852  ********************************************************************************
00001524                           853  * ADD: $D, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001524                           854  * ADDA: $D, 11- 9 Reg, 8-6 OPMODE, 7-6 %11, 5-3 EA Mode, 2-0 EA Reg
00001524                           855  * The specific bit difference is listed out in the OPMODE field.
00001524                           856  ********************************************************************************
00001524                           857  C_GROUP_D:
00001524                           858  
00001524                           859  CHECK_OP_ADDA:
00001524                           860  
00001524                           861  CHECK_OP_ADD:
00001524                           862  
00001524                           863  * GROUP_E                     
00001524                           864  ********************************************************************************
00001524                           865  * LSR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00001524                           866  * LSL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00001524                           867  * ASR: $E, $0, 8 %0, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00001524                           868  * ASL: $E, $0, 8 %1, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00001524                           869  * ROR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00001524                           870  * ROL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00001524                           871  * Count/Reg for LSR/LSL refers to shift count, where 0 = shift count of 8, 1-7 
00001524                           872  * refers to the respective value when i/r = 0. If i/r = 1, data register in the 
00001524                           873  * Count/Reg field specifies the shift count.  
00001524                           874  * 
00001524                           875  * Count/Reg for ROR/ROL specifies rotate count instead of shift count.
00001524                           876  ********************************************************************************
00001524                           877  C_GROUP_E:
00001524                           878  
00001524                           879  CHECK_OP_LSR:
00001524                           880  
00001524                           881  CHECK_OP_LSL:
00001524                           882  
00001524                           883  CHECK_OP_ASL:
00001524                           884  
00001524                           885  CHECK_OP_ASR:
00001524                           886  
00001524                           887  CHECK_OP_ROL:
00001524                           888  
00001524                           889  CHECK_OP_ROR:
00001524                           890  
00001524                           891  * GROUP_F
00001524                           892  ********************************************************************************
00001524                           893  * Currently no OP codes here are supported.
00001524                           894  ********************************************************************************
00001524                           895  C_GROUP_F:
00001524  4EB9 0000152A            896      JSR INVALID_OP
0000152A                           897      
0000152A                           898  * INVALID_OP                     
0000152A                           899  ********************************************************************************
0000152A                           900  * Any value that is not covered in the above groups would be considered invalid. 
0000152A                           901  * The following values in the first nibble would also indicate that the 
0000152A                           902  * operand codes is already invalid: $7, $A, $F.
0000152A                           903  * For unsupported OP codes, display DATA $WXYZ   
0000152A                           904  * THIS WILL NEED TO BE CHANGED TO DISPLAY: 1000 DATA $WXYZ IN THE FUTURE
0000152A                           905  ********************************************************************************
0000152A                           906  INVALID_OP:  ; Prints DATA for invalid op
0000152A  43F9 000017B8            907      LEA P_INVALID_OP,A1
00001530  103C 000D                908      MOVE.B #13,D0
00001534  4E4F                     909      TRAP #15
00001536  FFFF FFFF                910      SIMHALT
0000153A                           911  READ_NEXT_INSTRUCTION: ; Needs to read next instruction set {PLACEHOLDER}
0000153A  FFFF FFFF                912      SIMHALT
0000153E                           913  
0000153E                           914  MAKE_VAL_ASCII:
0000153E  0C00 0009                915      CMPI.B  #$9,D0
00001542  6E00 0008                916      BGT     LETTER_ASCII
00001546  6F00 000A                917      BLE     NUMBER_ASCII
0000154A  4E75                     918      RTS
0000154C                           919      
0000154C                           920  LETTER_ASCII:
0000154C  0600 0037                921      ADDI.B #$37,D0 ; A-F
00001550  4E75                     922      RTS
00001552                           923      
00001552                           924  NUMBER_ASCII
00001552  0600 0030                925      ADDI.B #$30,D0 ; 0-9
00001556  4E75                     926      RTS
00001558                           927      
00001558                           928  ADD_PERIOD:
00001558  2F00                     929      MOVE.L D0,-(SP)
0000155A  103C 0000                930      MOVE.B #$0,D0
0000155E  0600 0046                931      ADDI.B #$46,D0
00001562  201F                     932      MOVE.L (SP)+,D0
00001564                           933  ********************** PRINTING ROUTINES **************************************
00001564                           934  * Description: These routines are to print the associated op codes, by placing
00001564                           935  * them in the appropriate area to the buffer
00001564                           936  *
00001564                           937  * Registers used: A1 for loading, A6 for EA parsing.
00001564                           938  *
00001564                           939  * Precondition: The relevant opcode has been identified correctly.
00001564                           940  *
00001564                           941  * Postcondition: Prints out the associated opcode to the buffer.
00001564                           942  *******************************************************************************
00001564                           943  
00001564                           944  ****************************** GROUP 0 **************************************** 
00001564                           945  PRINT_OP_ORI:
00001564  43F9 000017CF            946      LEA P_OP_ORI,A1
0000156A  4EB9 000017B0            947      JSR PRINT_OP
00001570  4E75                     948      RTS
00001572                           949  PRINT_OP_CMPI:
00001572  4EB8 1240                950      JSR FIND_3_BIT_REG_TO_EA
00001576  4EB8 122A                951      JSR FIND_2_BIT_SIZE_TO_EA
0000157A  4EB8 1208                952      JSR MOVE_LAST_6_BITS_TO_EA
0000157E  43F9 000017D3            953      LEA P_OP_CMPI,A1
00001584  4EB9 000017B0            954      JSR PRINT_OP
0000158A  4E75                     955      RTS
0000158C                           956  PRINT_OP_S_BCLR:
0000158C  4EB8 1208                957      JSR MOVE_LAST_6_BITS_TO_EA
00001590  4EB8 1240                958      JSR FIND_3_BIT_REG_TO_EA
00001594  3CBC 0000                959      MOVE.W #$0,(A6)
00001598  383C 0000                960      MOVE.W #%000, D4
0000159C  43F9 000017D8            961      LEA P_OP_S_BCLR,A1
000015A2  4EB9 000017B0            962      JSR PRINT_OP
000015A8  4E75                     963      RTS
000015AA                           964  PRINT_OP_D_BCLR:
000015AA  4EB8 1208                965      JSR MOVE_LAST_6_BITS_TO_EA
000015AE  4EB8 1240                966      JSR FIND_3_BIT_REG_TO_EA
000015B2  3CBC 0000                967      MOVE.W #$0,(A6)
000015B6  383C 0006                968      MOVE.W #%110, D4
000015BA  43F9 000017DD            969      LEA P_OP_D_BCLR,A1
000015C0  4EB9 000017B0            970      JSR PRINT_OP
000015C6  4E75                     971      RTS
000015C8                           972  ******************************* END OF GROUP 0 ********************************
000015C8                           973  
000015C8                           974  ****************************** GROUP 1 ****************************************    
000015C8                           975  PRINT_OP_MOVEB:
000015C8  4EB8 1256                976      JSR MOVE_AND_MOVEA_PARSE_EA
000015CC  3CBC 0001                977      MOVE.W #$1,(A6)
000015D0  43F9 000017E2            978      LEA P_OP_MOVEB,A1
000015D6  4EB9 000017B0            979      JSR PRINT_OP
000015DC  4E75                     980      RTS
000015DE                           981  ******************************* END OF GROUP 1 ********************************
000015DE                           982      
000015DE                           983  ****************************** GROUP 2 **************************************** 
000015DE                           984  PRINT_OP_MOVEA_L:
000015DE  4EB8 1256                985      JSR MOVE_AND_MOVEA_PARSE_EA
000015E2  3CBC 0002                986      MOVE.W #$2,(A6)
000015E6  43F9 000017E9            987      LEA P_OP_MOVEA_L,A1
000015EC                           988      ;MOVE.L A1,G_BUFFER_PREP
000015EC                           989      ;MOVE.B (A1)+,D0
000015EC                           990      ;CMPI.B #$FF,D0
000015EC                           991      ;BNE MAKE_VAL_ASCII
000015EC                           992      ;MOVE.W P_OP_MOVEA_L,(A4)+
000015EC  4EB9 000017B0            993      JSR PRINT_OP
000015F2  4E75                     994      RTS
000015F4                           995  PRINT_OP_MOVE_L:
000015F4  4EB8 1256                996      JSR MOVE_AND_MOVEA_PARSE_EA
000015F8  3CBC 0002                997      MOVE.W #$2,(A6)
000015FC  43F9 000017F1            998      LEA P_OP_MOVE_L,A1
00001602  4EB9 000017B0            999      JSR PRINT_OP
00001608  4E75                    1000      RTS
0000160A                          1001  ******************************* END OF GROUP 2 ********************************
0000160A                          1002      
0000160A                          1003  ****************************** GROUP 3 ****************************************    
0000160A                          1004  PRINT_OP_MOVEA_W:
0000160A  4EB8 1256               1005      JSR MOVE_AND_MOVEA_PARSE_EA
0000160E  3CBC 0003               1006      MOVE.W #$3,(A6)
00001612  43F9 000017F8           1007      LEA P_OP_MOVEA_W,A1
00001618  4EB9 000017B0           1008      JSR PRINT_OP
0000161E  4E75                    1009      RTS
00001620                          1010  PRINT_OP_MOVE_W:
00001620  4EB8 1256               1011      JSR MOVE_AND_MOVEA_PARSE_EA
00001624  3CBC 0003               1012      MOVE.W #$3,(A6)
00001628  43F9 00001800           1013      LEA P_OP_MOVE_W,A1
0000162E  4EB9 000017B0           1014      JSR PRINT_OP
00001634  4E75                    1015      RTS
00001636                          1016  ******************************* END OF GROUP 3 ********************************
00001636                          1017  
00001636                          1018  ****************************** GROUP 4 ****************************************
00001636                          1019  PRINT_OP_NOP:
00001636  43F9 0000181F           1020      LEA P_OP_NOP,A1
0000163C  4EB9 000017B0           1021      JSR PRINT_OP
00001642  4E75                    1022      RTS
00001644                          1023  PRINT_OP_JSR:
00001644  43F9 0000181B           1024      LEA P_OP_JSR,A1
0000164A  4EB9 000017B0           1025      JSR PRINT_OP
00001650  4E75                    1026      RTS
00001652                          1027  PRINT_OP_RTS:
00001652  43F9 00001823           1028      LEA P_OP_RTS,A1
00001658  4EB9 000017B0           1029      JSR PRINT_OP
0000165E  4E75                    1030      RTS
00001660                          1031  PRINT_OP_LEA:
00001660  43F9 00001817           1032      LEA P_OP_LEA,A1
00001666  4EB9 000017B0           1033      JSR PRINT_OP
0000166C  4E75                    1034      RTS
0000166E                          1035  PRINT_OP_NEG:
0000166E  43F9 00001827           1036      LEA P_OP_NEG,A1
00001674  4EB9 000017B0           1037      JSR PRINT_OP
0000167A  4E75                    1038      RTS
0000167C                          1039  PRINT_OP_MOVEM_W:
0000167C  43F9 00001807           1040      LEA P_OP_MOVEM_W,A1
00001682  4EB9 000017B0           1041      JSR PRINT_OP
00001688  4E75                    1042      RTS
0000168A                          1043  PRINT_OP_MOVEM_L:
0000168A  43F9 0000180F           1044      LEA P_OP_MOVEM_L,A1
00001690  4EB9 000017B0           1045      JSR PRINT_OP
00001696  4E75                    1046      RTS
00001698                          1047  ******************************* END OF GROUP 4 ********************************
00001698                          1048      
00001698                          1049  ****************************** GROUP 5 ****************************************
00001698                          1050  PRINT_OP_SUBQ:
00001698  43F9 0000182B           1051      LEA P_OP_SUBQ,A1
0000169E  4EB9 000017B0           1052      JSR PRINT_OP
000016A4  4E75                    1053      RTS
000016A6                          1054  ******************************* END OF GROUP 5 ********************************
000016A6                          1055  
000016A6                          1056  ****************************** GROUP 6 ****************************************
000016A6                          1057  PRINT_OP_BCS:
000016A6  43F9 00001834           1058      LEA P_OP_BCS,A1
000016AC  4EB9 000017B0           1059      JSR PRINT_OP
000016B2  4E75                    1060      RTS
000016B4                          1061  PRINT_OP_BGE:
000016B4  43F9 00001838           1062      LEA P_OP_BGE,A1
000016BA  4EB9 000017B0           1063      JSR PRINT_OP
000016C0  4E75                    1064      RTS
000016C2                          1065  PRINT_OP_BLT:
000016C2  43F9 0000183C           1066      LEA P_OP_BLT,A1
000016C8  4EB9 000017B0           1067      JSR PRINT_OP
000016CE  4E75                    1068      RTS
000016D0                          1069  PRINT_OP_BVC:
000016D0  43F9 00001840           1070      LEA P_OP_BVC,A1
000016D6  4EB9 000017B0           1071      JSR PRINT_OP
000016DC  4E75                    1072      RTS
000016DE                          1073  PRINT_OP_BRA:
000016DE  43F9 00001830           1074      LEA P_OP_BRA,A1
000016E4  4EB9 000017B0           1075      JSR PRINT_OP
000016EA  4E75                    1076      RTS
000016EC                          1077  ******************************* END OF GROUP 6 ********************************
000016EC                          1078  
000016EC                          1079  ****************************** GROUP 7 ****************************************
000016EC                          1080  * No currently supported OP codes to print here.
000016EC                          1081  ******************************* END OF GROUP 7 ********************************
000016EC                          1082  
000016EC                          1083  ****************************** GROUP 8 ****************************************
000016EC                          1084  PRINT_OP_DIVS:
000016EC  43F9 00001844           1085      LEA P_OP_DIVS,A1
000016F2  4EB9 000017B0           1086      JSR PRINT_OP
000016F8  4E75                    1087      RTS
000016FA                          1088  PRINT_OP_OR:
000016FA  43F9 00001849           1089      LEA P_OP_OR,A1
00001700  4EB9 000017B0           1090      JSR PRINT_OP
00001706  4E75                    1091      RTS
00001708                          1092  ******************************* END OF GROUP 8 ********************************
00001708                          1093  
00001708                          1094  ****************************** GROUP 9 ****************************************
00001708                          1095  PRINT_OP_SUB:
00001708  43F9 0000184C           1096      LEA P_OP_SUB,A1
0000170E  4EB9 000017B0           1097      JSR PRINT_OP
00001714  4E75                    1098      RTS
00001716                          1099  ******************************* END OF GROUP 9 ********************************
00001716                          1100  
00001716                          1101  ****************************** GROUP A ****************************************
00001716                          1102  * No currently supported OP codes to print here.
00001716                          1103  ******************************* END OF GROUP A ********************************
00001716                          1104  
00001716                          1105  ****************************** GROUP B ****************************************
00001716                          1106  PRINT_OP_EOR:
00001716  43F9 00001850           1107      LEA P_OP_EOR,A1
0000171C  4EB9 000017B0           1108      JSR PRINT_OP
00001722  4E75                    1109      RTS
00001724                          1110  PRINT_OP_CMP:
00001724  43F9 00001854           1111      LEA P_OP_CMP,A1
0000172A  4EB9 000017B0           1112      JSR PRINT_OP
00001730  4E75                    1113      RTS
00001732                          1114  ******************************* END OF GROUP B ********************************
00001732                          1115  
00001732                          1116  ****************************** GROUP C ****************************************
00001732                          1117  PRINT_OP_MULS:
00001732  43F9 00001858           1118      LEA P_OP_MULS,A1
00001738  4EB9 000017B0           1119      JSR PRINT_OP
0000173E  4E75                    1120      RTS
00001740                          1121  ******************************* END OF GROUP C ********************************
00001740                          1122  
00001740                          1123  ****************************** GROUP D ****************************************
00001740                          1124  PRINT_OP_ADD:
00001740  43F9 00001862           1125      LEA P_OP_ADD,A1
00001746  4EB9 000017B0           1126      JSR PRINT_OP
0000174C  4E75                    1127      RTS
0000174E                          1128  PRINT_OP_ADDA:
0000174E  43F9 0000185D           1129      LEA P_OP_ADDA,A1
00001754  4EB9 000017B0           1130      JSR PRINT_OP
0000175A  4E75                    1131      RTS
0000175C                          1132  
0000175C                          1133  ******************************* END OF GROUP D ********************************
0000175C                          1134  
0000175C                          1135  ****************************** GROUP E ****************************************
0000175C                          1136  PRINT_OP_LSL:
0000175C  43F9 0000186A           1137      LEA P_OP_LSL,A1
00001762  4EB9 000017B0           1138      JSR PRINT_OP
00001768  4E75                    1139      RTS
0000176A                          1140  PRINT_OP_LSR:
0000176A  43F9 00001866           1141      LEA P_OP_LSR,A1
00001770  4EB9 000017B0           1142      JSR PRINT_OP
00001776  4E75                    1143      RTS
00001778                          1144  PRINT_OP_ASR:
00001778  43F9 0000186E           1145      LEA P_OP_ASR,A1
0000177E  4EB9 000017B0           1146      JSR PRINT_OP
00001784  4E75                    1147      RTS
00001786                          1148  PRINT_OP_ASL:
00001786  43F9 00001872           1149      LEA P_OP_ASL,A1
0000178C  4EB9 000017B0           1150      JSR PRINT_OP
00001792  4E75                    1151      RTS
00001794                          1152  PRINT_OP_ROL:
00001794  43F9 0000187A           1153      LEA P_OP_ROL,A1
0000179A  4EB9 000017B0           1154      JSR PRINT_OP
000017A0  4E75                    1155      RTS
000017A2                          1156  PRINT_OP_ROR:
000017A2  43F9 00001876           1157      LEA P_OP_ROR,A1
000017A8  4EB9 000017B0           1158      JSR PRINT_OP
000017AE  4E75                    1159      RTS
000017B0                          1160  ******************************* END OF GROUP E ********************************
000017B0                          1161  
000017B0                          1162  ****************************** GROUP F ****************************************
000017B0                          1163  * No currently supported OP codes to print here.
000017B0                          1164  ******************************* END OF GROUP F ********************************
000017B0                          1165  
000017B0                          1166  
000017B0                          1167  
000017B0                          1168  PRINT_OP:   ;Prints current op code byte
000017B0                          1169      ;MOVE.W (A4),(A1)       ; NEEDS TO USE G_BUFFER LATER
000017B0  103C 000D               1170      MOVE.B #13,D0
000017B4  4E4F                    1171      TRAP #15
000017B6  4E75                    1172      RTS
000017B8                          1173  ******************* END OF PRINTING ROUTINES **********************************
000017B8                          1174  
000017B8                          1175  ******************* END OF JMP LABELS *****************************************
000017B8                          1176  
000017B8                          1177  ******************* DATA CONSTANT PRINTS **************************************
000017B8                          1178  * Formatting is as follows: P_OP_<OPCODE>, where P = Print, OP = Operation,
000017B8                          1179  * <OPCODE> is any valid operand
000017B8                          1180  
000017B8= 44 41 54 41 00          1181  P_INVALID_OP    DC.B    'DATA',0
000017BD= 46 6F 75 6E 64 20 ...   1182  OP_FOUND        DC.B    'Found OP',0 ; this should be taken out later
000017C6= 2E 42 00                1183  P_SIZE_B        DC.B    '.B',0
000017C9= 2E 57 00                1184  P_SIZE_W        DC.B    '.W',0
000017CC= 2E 4C 00                1185  P_SIZE_L        DC.B    '.L',0
000017CF= 4F 52 49 00             1186  P_OP_ORI        DC.B    'ORI',0
000017D3= 43 4D 50 49 00          1187  P_OP_CMPI       DC.B    'CMPI',0
000017D8= 42 43 4C 52 00          1188  P_OP_S_BCLR     DC.B    'BCLR',0
000017DD= 42 43 4C 52 00          1189  P_OP_D_BCLR     DC.B    'BCLR',0
000017E2= 4D 4F 56 45 2E 42 00    1190  P_OP_MOVEB      DC.B    'MOVE.B',0
000017E9= 4D 4F 56 45 41 2E ...   1191  P_OP_MOVEA_L    DC.B    'MOVEA.L',0 
000017F1= 4D 4F 56 45 2E 4C 00    1192  P_OP_MOVE_L     DC.B    'MOVE.L',0
000017F8= 4D 4F 56 45 41 2E ...   1193  P_OP_MOVEA_W    DC.B    'MOVEA.W',0
00001800= 4D 4F 56 45 2E 57 00    1194  P_OP_MOVE_W     DC.B    'MOVE.W',0
00001807= 4D 4F 56 45 4D 2E ...   1195  P_OP_MOVEM_W    DC.B    'MOVEM.W',0
0000180F= 4D 4F 56 45 4D 2E ...   1196  P_OP_MOVEM_L    DC.B    'MOVEM.L',0
00001817= 4C 45 41 00             1197  P_OP_LEA        DC.B    'LEA',0
0000181B= 4A 53 52 00             1198  P_OP_JSR        DC.B    'JSR',0
0000181F= 4E 4F 50 00             1199  P_OP_NOP        DC.B    'NOP',0
00001823= 52 54 53 00             1200  P_OP_RTS        DC.B    'RTS',0
00001827= 4E 45 47 00             1201  P_OP_NEG        DC.B    'NEG',0
0000182B= 53 55 42 51 00          1202  P_OP_SUBQ       DC.B    'SUBQ',0
00001830= 42 52 41 00             1203  P_OP_BRA        DC.B    'BRA',0
00001834= 42 43 53 00             1204  P_OP_BCS        DC.B    'BCS',0
00001838= 42 47 45 00             1205  P_OP_BGE        DC.B    'BGE',0
0000183C= 42 4C 54 00             1206  P_OP_BLT        DC.B    'BLT',0
00001840= 42 56 43 00             1207  P_OP_BVC        DC.B    'BVC',0
00001844= 44 49 56 53 00          1208  P_OP_DIVS       DC.B    'DIVS',0
00001849= 4F 52 00                1209  P_OP_OR         DC.B    'OR',0
0000184C= 53 55 42 00             1210  P_OP_SUB        DC.B    'SUB',0
00001850= 45 4F 52 00             1211  P_OP_EOR        DC.B    'EOR',0
00001854= 43 4D 50 00             1212  P_OP_CMP        DC.B    'CMP',0
00001858= 4D 55 4C 53 00          1213  P_OP_MULS       DC.B    'MULS',0
0000185D= 41 44 44 41 00          1214  P_OP_ADDA       DC.B    'ADDA',0
00001862= 41 44 44 00             1215  P_OP_ADD        DC.B    'ADD',0
00001866= 4C 53 52 00             1216  P_OP_LSR        DC.B    'LSR',0
0000186A= 4C 53 4C 00             1217  P_OP_LSL        DC.B    'LSL',0
0000186E= 41 53 52 00             1218  P_OP_ASR        DC.B    'ASR',0
00001872= 41 53 4C 00             1219  P_OP_ASL        DC.B    'ASL',0
00001876= 52 4F 52 00             1220  P_OP_ROR        DC.B    'ROR',0
0000187A= 52 4F 4C 00             1221  P_OP_ROL        DC.B    'ROL',0
0000187E                          1222  ***************** END OF DATA CONSTANT PRINTS ***********************************
0000187E                          1223   
0000187E                          1224  
0000187E                          1225  **
0000187E                          1226  * AddStrToBuffer
0000187E                          1227  **
0000187E                          1228  * Adds the given NULL-terminated string to the specified buffer.
0000187E                          1229  *
0000187E                          1230  * Default buffer length is 80 characters, but can be modified in the argument
0000187E                          1231  * variables.
0000187E                          1232  *
0000187E                          1233  * If the buffer length is exceeded, either due to lack of a NULL character or
0000187E                          1234  * an incorrectly specified length, 1 is returned. Otherwise, 0 is returned to
0000187E                          1235  * indicate success.
0000187E                          1236  *
0000187E                          1237  **
0000187E                          1238  * @param Arg_AddStrToBuffer_String              Pointer to string
0000187E                          1239  * @param Arg_AddStrToBuffer_Buffer              Pointer to buffer
0000187E                          1240  * @param Arg_AddStrToBuffer_BufferLength        Length of buffer (default 80 chars)
0000187E                          1241  * @return Ret_AddStrToBuffer_Success            0 if successful, 1 otherwise.
0000187E                          1242  * @branch _AddStrToBuffer_FindBufferNullLoop    Loop to find NULL in buffer
0000187E                          1243  * @branch _AddStrToBuffer_AddLoop               Loop to add string to buffer
0000187E                          1244  * @branch _AddStrToBuffer_Success               Branch when string successfully added
0000187E                          1245  * @branch _AddStrToBuffer_StringLengthExceeded  Branch when length exceeded (either string or buffer)
0000187E                          1246  * @branch _AddStrToBuffer_End                   End of subroutine
0000187E                          1247  **
0000187E                          1248  Arg_AddStrToBuffer_String           DS.L    1
00001882                          1249  Arg_AddStrToBuffer_Buffer           DS.L    1
00001886= 00000050                1250  Arg_AddStrToBuffer_BufferLength     DC.L    80
0000188A                          1251  Ret_AddStrToBuffer_Success          DS.B    1
0000188B                          1252  
0000188C                          1253  AddStrToBuffer:                     DS.W    0
0000188C  48E7 C0C0               1254      MOVEM.L     D0-D1/A0-A1, -(SP)                  * Backup registers to stack
00001890                          1255  
00001890  2078 187E               1256      MOVE.L      Arg_AddStrToBuffer_String, A0       * Load string pointer
00001894  2278 1882               1257      MOVE.L      Arg_AddStrToBuffer_Buffer, A1       * Load buffer pointer
00001898  2038 1886               1258      MOVE.L      Arg_AddStrToBuffer_BufferLength, D0 * Load buffer length
0000189C  4278 188A               1259      CLR.W       Ret_AddStrToBuffer_Success          * Clear success bit
000018A0  4281                    1260      CLR.L       D1                                  * Clear loop counter
000018A2                          1261  
000018A2                          1262  _AddStrToBuffer_BufferLoop
000018A2  0C11 0000               1263      CMPI.B      #0, (A1)                            * If buffer char is NULL
000018A6  6700 000E               1264      BEQ         _AddStrToBuffer_AddLoop             * Start adding string to bufer
000018AA                          1265      
000018AA  B280                    1266      CMP.L       D0, D1                              * If counter >= max length
000018AC  6C00 0024               1267      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
000018B0                          1268      
000018B0  5289                    1269      ADDQ.L      #1, A1                              * Go to next character
000018B2  5201                    1270      ADDQ.B      #1, D1                              * Increment counter
000018B4  60EC                    1271      BRA         _AddStrToBuffer_BufferLoop          * Loop back
000018B6                          1272      
000018B6                          1273  _AddStrToBuffer_AddLoop
000018B6  0C10 0000               1274      CMPI.B      #0, (A0)                            * If string char is NULL
000018BA  6700 000E               1275      BEQ         _AddStrToBuffer_Success             * String successfully added
000018BE                          1276      
000018BE  B200                    1277      CMP.B       D0, D1                              * If counter >= max length
000018C0  6C00 0010               1278      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
000018C4                          1279      
000018C4  12D8                    1280      MOVE.B      (A0)+, (A1)+                        * Move string char to buffer char
000018C6  5201                    1281      ADDQ.B      #1, D1                              * Increment counter
000018C8  60EC                    1282      BRA         _AddStrToBuffer_AddLoop             * Loop back
000018CA                          1283  
000018CA                          1284  _AddStrToBuffer_Success
000018CA  12BC 0000               1285      MOVE.B      #0, (A1)                            * Add NULL to end of string
000018CE  6000 0008               1286      BRA         _AddStrToBuffer_End                 * Finish subroutine
000018D2                          1287  
000018D2                          1288  _AddStrToBuffer_LengthExceeded
000018D2  31FC 0001 188A          1289      MOVE.W      #1, Ret_AddStrToBuffer_Success      * Invalidate success bit
000018D8                          1290  
000018D8                          1291  _AddStrToBuffer_End
000018D8  4CDF 0303               1292      MOVEM.L     (SP)+, D0-D1/A0-A1                  * Restore registers from stack
000018DC  4E75                    1293      RTS                  
000018DE                          1294     
000018DE                          1295      END START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDSTRTOBUFFER      188C
ADD_PERIOD          1558
ARG_ADDSTRTOBUFFER_BUFFER  1882
ARG_ADDSTRTOBUFFER_BUFFERLENGTH  1886
ARG_ADDSTRTOBUFFER_STRING  187E
B_BUFFER            1053
CG0_C               1374
CG0_F               1370
CHECK_OP_ADD        1524
CHECK_OP_ADDA       1524
CHECK_OP_ASL        1524
CHECK_OP_ASR        1524
CHECK_OP_BCS        14C8
CHECK_OP_BGE        14DC
CHECK_OP_BLT        14F0
CHECK_OP_BRA        14B4
CHECK_OP_BVC        1504
CHECK_OP_CMP        1524
CHECK_OP_CMPI       1322
CHECK_OP_DIVS       151E
CHECK_OP_D_BCLR     1356
CHECK_OP_EOR        1524
CHECK_OP_JSR        1450
CHECK_OP_LEA        143C
CHECK_OP_LSL        1524
CHECK_OP_LSR        1524
CHECK_OP_MOVEA_L    138C
CHECK_OP_MOVEA_W    13D2
CHECK_OP_MOVEM      1478
CHECK_OP_MOVE_B     1376
CHECK_OP_MOVE_L     13BC
CHECK_OP_MOVE_W     1406
CHECK_OP_MULS       1524
CHECK_OP_NEG        1464
CHECK_OP_NOP        142C
CHECK_OP_OR         151E
CHECK_OP_ORI        1304
CHECK_OP_ROL        1524
CHECK_OP_ROR        1524
CHECK_OP_RTS        141C
CHECK_OP_SUB        151E
CHECK_OP_SUBQ       14A0
CHECK_OP_S_BCLR     133C
CUR_OP_CODE         1000
C_GROUP_0           1300
C_GROUP_1           1376
C_GROUP_2           138C
C_GROUP_3           13D2
C_GROUP_4           141C
C_GROUP_5           148C
C_GROUP_6           14B4
C_GROUP_7           1518
C_GROUP_8           151E
C_GROUP_9           151E
C_GROUP_A           151E
C_GROUP_B           1524
C_GROUP_C           1524
C_GROUP_D           1524
C_GROUP_E           1524
C_GROUP_F           1524
EA_SIZE             1002
FIND_2_BIT_SIZE_TO_EA  122A
FIND_3_BIT_REG_TO_EA  1240
FIND_MOVEA_L_DIFFERENCE  139C
FIND_MOVEA_W_DIFFERENCE  13E2
FIND_TRAILING_BITS_TO_EA  129C
FIRST_3             10A4
FOURTH_3            10A7
GROUP_0             10E2
GROUP_1             10F4
GROUP_2             1106
GROUP_3             1118
GROUP_4             112A
GROUP_5             113C
GROUP_6             114E
GROUP_7             1160
GROUP_8             1172
GROUP_9             1184
GROUP_A             1196
GROUP_B             11A8
GROUP_C             11BA
GROUP_D             11CC
GROUP_E             11DE
GROUP_F             11F0
G_BUFFER            1003
INVALID_OP          152A
LETTER_ASCII        154C
LOAD_OP_CODE        10CA
MAKE_VAL_ASCII      153E
MNEMONIC            10A3
MOVE_AND_MOVEA_PARSE_EA  1256
MOVE_LAST_6_BITS_TO_EA  1208
NUMBER_ASCII        1552
OP_FOUND            17BD
OP_JSR_DONE         11FE
OP_JSR_ROUTINE      10DA
PARSE_EA_CONSTANT_BITS  12B2
PRINT_OP            17B0
PRINT_OP_ADD        1740
PRINT_OP_ADDA       174E
PRINT_OP_ASL        1786
PRINT_OP_ASR        1778
PRINT_OP_BCS        16A6
PRINT_OP_BGE        16B4
PRINT_OP_BLT        16C2
PRINT_OP_BRA        16DE
PRINT_OP_BVC        16D0
PRINT_OP_CMP        1724
PRINT_OP_CMPI       1572
PRINT_OP_DIVS       16EC
PRINT_OP_D_BCLR     15AA
PRINT_OP_EOR        1716
PRINT_OP_JSR        1644
PRINT_OP_LEA        1660
PRINT_OP_LSL        175C
PRINT_OP_LSR        176A
PRINT_OP_MOVEA_L    15DE
PRINT_OP_MOVEA_W    160A
PRINT_OP_MOVEB      15C8
PRINT_OP_MOVEM_L    168A
PRINT_OP_MOVEM_W    167C
PRINT_OP_MOVE_L     15F4
PRINT_OP_MOVE_W     1620
PRINT_OP_MULS       1732
PRINT_OP_NEG        166E
PRINT_OP_NOP        1636
PRINT_OP_OR         16FA
PRINT_OP_ORI        1564
PRINT_OP_ROL        1794
PRINT_OP_ROR        17A2
PRINT_OP_RTS        1652
PRINT_OP_SUB        1708
PRINT_OP_SUBQ       1698
PRINT_OP_S_BCLR     158C
P_INVALID_OP        17B8
P_OP_ADD            1862
P_OP_ADDA           185D
P_OP_ASL            1872
P_OP_ASR            186E
P_OP_BCS            1834
P_OP_BGE            1838
P_OP_BLT            183C
P_OP_BRA            1830
P_OP_BVC            1840
P_OP_CMP            1854
P_OP_CMPI           17D3
P_OP_DIVS           1844
P_OP_D_BCLR         17DD
P_OP_EOR            1850
P_OP_JSR            181B
P_OP_LEA            1817
P_OP_LSL            186A
P_OP_LSR            1866
P_OP_MOVEA_L        17E9
P_OP_MOVEA_L_A_L    10B4
P_OP_MOVEA_L_T      10A8
P_OP_MOVEA_W        17F8
P_OP_MOVEB          17E2
P_OP_MOVEM_L        180F
P_OP_MOVEM_W        1807
P_OP_MOVE_L         17F1
P_OP_MOVE_W         1800
P_OP_MULS           1858
P_OP_NEG            1827
P_OP_NOP            181F
P_OP_OR             1849
P_OP_ORI            17CF
P_OP_ROL            187A
P_OP_ROR            1876
P_OP_RTS            1823
P_OP_SUB            184C
P_OP_SUBQ           182B
P_OP_S_BCLR         17D8
P_SIZE_B            17C6
P_SIZE_L            17CC
P_SIZE_W            17C9
READ_NEXT_INSTRUCTION  153A
RET_ADDSTRTOBUFFER_SUCCESS  188A
SECOND_3            10A5
START               10C0
THIRD_3             10A6
VALID_CHECK_OP_SUBQ  148C
_ADDSTRTOBUFFER_ADDLOOP  18B6
_ADDSTRTOBUFFER_BUFFERLOOP  18A2
_ADDSTRTOBUFFER_END  18D8
_ADDSTRTOBUFFER_LENGTHEXCEEDED  18D2
_ADDSTRTOBUFFER_SUCCESS  18CA
