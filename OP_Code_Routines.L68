00000000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/17/2019 12:19:55 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OP Code routines for Disassembler
00000000                             3  * Written by : Daniel Yan
00000000                             4  * Date       : 2/28/2019, Updated 3/16/2019
00000000                             5  
00000000                             6  * Description: Disassembler routines to identify any valid
00000000                             7  * OP code dependent on current supported list.
00000000                             8  *------------------------------------------------------------
00000000                             9  OP_SIZE         DS.B    1   ;This constant refers to the size of the current OP code 
00000001                            10  MNEMONIC        DS.B    1   ;Constant for EA, first 4 bits (15-12) of a 4 hex OP code
00000002                            11  FIRST_3         DS.B    1   ;Constant for EA, 3 bits (11-9) of a 4 hex OP code
00000003                            12  SECOND_3        DS.B    1   ;Constant for EA, 3 bits (8-6) of a 4 hex OP code
00000004                            13  THIRD_3         DS.B    1   ;Constant for EA, 3 bits (5-3) of a 4 hex OP code
00000005                            14  FOURTH_3        DS.B    1   ;Constant for EA, 3 bits (2-0) of a 4 hex OP code
00000006                            15  
00000006                            16  ************************************************************************************
00000006                            17  * PRINTING BUFFER FUNCTION HAS BEEN FINISHED
00000006                            18  * STATUS: 
00000006                            19  * IDENTIFICATION FOR ALL OP CODES:      DONE
00000006                            20  * VALIDATION TESTING FOR ALL OP CODES:  DONE
00000006                            21  * PRINTING ALL OP CODES TO BUFFER:      DONE
00000006                            22  * PRINTING SIZE BITS OF ALL OP CODES:   DONE
00000006                            23  *-----------------------------------------------------------
00000006                            24  *First Nibble Values (15-12)
00000006                            25  *Value                  Operations
00000006                            26  *$0                     GROUP_0: ORI,BCLR (static and dynamic),CMPI --- DONE
00000006                            27  *$1                     GROUP_1: MOVE.B                             --- DONE
00000006                            28  *$2                     GROUP_2: MOVE.L, MOVEA.L                    --- DONE
00000006                            29  *$3                     GROUP_3: MOVE.W, MOVEA.W                    --- DONE
00000006                            30  *$4                     GROUP_4: LEA,JSR,RTS,NEG,MOVEM              --- DONE
00000006                            31  *$5                     GROUP_5: SUBQ                               --- DONE
00000006                            32  *$6                     GROUP_6: Bcc(BCS,BGE,BLT,BVC), BRA          --- DONE
00000006                            33  *$7                     GROUP_7: INVALID_OP                         --- DONE
00000006                            34  *$8                     GROUP_8: DIVS, OR                           --- DONE
00000006                            35  *$9                     GROUP_9: SUB                                --- DONE
00000006                            36  *$A                     GROUP_A: INVALID_OP                         --- DONE
00000006                            37  *$B                     GROUP_B: EOR, CMP                           --- DONE
00000006                            38  *$C                     GROUP_C: MULS                               --- DONE
00000006                            39  *$D                     GROUP_D: ADD, ADDA                          --- DONE
00000006                            40  *$E                     GROUP_E: LSR, LSL, ASR, ASL, ROL, ROR       --- DONE
00000006                            41  *$F                     GROUP_F: INVALID_OP                         --- DONE
00000006                            42  
00000006                            43  
00000006                            44  * OP_JSR_Routine
00000006                            45  **********************************************************************************
00000006                            46  * Description: Catalog all supported OP codes into groupings based on their hex
00000006                            47  * values. Sort the supported OP codes by looking at the first nibble for their
00000006                            48  * grouping value. Call underlying subroutines for further identification of the
00000006                            49  * op code.
00000006                            50  *
00000006                            51  * Registers used: A6,D0,D1 
00000006                            52  *
00000006                            53  * Precondition: Instruction set (size Word) has been loaded in the appropriate
00000006                            54  * address to be parsed and read.
00000006                            55  
00000006                            56  * Postcondition: OP code has been identified as either valid or invalid. If it is
00000006                            57  * valid, it is stored into A6 and EA parsing methods are called to pass needed
00000006                            58  * information to EA. If invalid, DATA output will be utilized to indicate so.
00000006                            59  **********************************************************************************
00000006                            60  * These valid operand codes refer to the basic supported operand codes
00000006                            61  * Groups refer to the first nibble value that is supported by the operand
00000006                            62  
00000006                            63  OP_JSR_Routine:
00000006  48E7 C000                 64      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
Line 65 ERROR: Undefined symbol
0000000A  3039 004DBD16             65      MOVE.W CUR_OP_CODE,D0
Line 66 ERROR: Undefined symbol
00000010  13FC 0001 005455B8        66      MOVE.B #1,IS_VALID
00000018  720C                      67      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
0000001A  E2A8                      68      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
0000001C                            69  
0000001C                            70  GROUP_0:                ;$0| ORI, BCLR (static and dynamic), CMPI                  
0000001C  B03C 0000                 71      CMP.B   #$0,D0                 ;Compare first nibble
00000020  6600 000C                 72      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
00000024  4EB9 0000026A             73      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
0000002A  6000 010C                 74      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000002E                            75      
0000002E                            76  GROUP_1:                ;$1| MOVE.B
0000002E  B03C 0001                 77      CMP.B   #$1,D0                 ;Compare first nibble
00000032  6600 000C                 78      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
00000036  4EB9 00000474             79      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
0000003C  6000 00FA                 80      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000040                            81  
00000040                            82  GROUP_2:                ;$2| MOVE.L, MOVEA.L
00000040  B03C 0002                 83      CMP.B   #$2,D0                 ;Compare first nibble
00000044  6600 000C                 84      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
00000048  4EB9 000004A0             85      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
0000004E  6000 00E8                 86      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000052                            87  
00000052                            88  GROUP_3:                ;$3| MOVE.W, MOVEA.W
00000052  B03C 0003                 89      CMP.B   #$3,D0                 ;Compare first nibble
00000056  6600 000C                 90      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
0000005A  4EB9 00000508             91      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
00000060  6000 00D6                 92      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000064                            93  
00000064                            94  GROUP_4:                ;$4| LEA, JSR, RTS, NEG, MOVEM
00000064  B03C 0004                 95      CMP.B   #$4,D0                 ;Compare first nibble
00000068  6600 000C                 96      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
0000006C  4EB9 00000570             97      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
00000072  6000 00C4                 98      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000076                            99  
00000076                           100  
00000076                           101  GROUP_5:                ;$5| SUBQ
00000076  B03C 0005                102      CMP.B   #$5,D0                 ;Compare first nibble
0000007A  6600 000C                103      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
0000007E  4EB9 0000083C            104      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
00000084  6000 00B2                105      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000088                           106  
00000088                           107  
00000088                           108  GROUP_6:                ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
00000088  B03C 0006                109      CMP.B   #$6,D0                 ;Compare first nibble
0000008C  6600 000C                110      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
00000090  4EB9 000008AE            111      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
00000096  6000 00A0                112      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000009A                           113  
0000009A                           114  
0000009A                           115  GROUP_7:                ;$7| Display: DATA, $WXYZ (Unsupported)
0000009A  B03C 0007                116      CMP.B   #$7,D0                 ;Compare first nibble
0000009E  6600 000C                117      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
000000A2  4EB9 00000960            118      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
000000A8  6000 008E                119      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000AC                           120  
000000AC                           121  
000000AC                           122  GROUP_8:                ;$8| DIVS, OR
000000AC  B03C 0008                123      CMP.B   #$8,D0                 ;Compare first nibble
000000B0  6600 000C                124      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
000000B4  4EB9 00000986            125      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
000000BA  6000 007C                126      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000BE                           127  
000000BE                           128  
000000BE                           129  GROUP_9:                ;$9| SUB
000000BE  B03C 0009                130      CMP.B   #$9,D0                 ;Compare first nibble
000000C2  6600 000C                131      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
000000C6  4EB9 000009EC            132      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
000000CC  6000 006A                133      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000D0                           134  
000000D0                           135  
000000D0                           136  GROUP_A:                ;$A| Display: DATA, $WXYZ (Unsupported)
000000D0  B03C 000A                137      CMP.B   #$A,D0                 ;Compare first nibble
000000D4  6600 000C                138      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
000000D8  4EB9 00000A52            139      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
000000DE  6000 0058                140      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000E2                           141  
000000E2                           142  
000000E2                           143  GROUP_B:                ;$B| EOR, CMP
000000E2  B03C 000B                144      CMP.B   #$B,D0                 ;Compare first nibble
000000E6  6600 000C                145      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
000000EA  4EB9 00000A5A            146      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
000000F0  6000 0046                147      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000F4                           148  
000000F4                           149  
000000F4                           150  GROUP_C:                ;$C| MULS
000000F4  B03C 000C                151      CMP.B   #$C,D0                 ;Compare first nibble
000000F8  6600 000C                152      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
000000FC  4EB9 00000AD6            153      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
00000102  6000 0034                154      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000106                           155  
00000106                           156  
00000106                           157  GROUP_D:                 ;$D| ADD, ADDA
00000106  B03C 000D                158      CMP.B   #$D,D0                 ;Compare first nibble
0000010A  6600 000C                159      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
0000010E  4EB9 00000B82            160      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
00000114  6000 0022                161      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000118                           162  
00000118                           163  
00000118                           164  GROUP_E:                ;$E| LSR, LSL, ASR, ASL, ROL, ROR
00000118  B03C 000E                165      CMP.B   #$E,D0                 ;Compare first nibble
0000011C  6600 000C                166      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
00000120  4EB9 00000BD6            167      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
00000126  6000 0010                168      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000012A                           169  
0000012A                           170  
0000012A                           171  GROUP_F:                ;$F| Display: DATA, $WXYZ (Unsupported)
0000012A  B03C 000F                172      CMP.B   #$F,D0                 ;Compare first nibble
0000012E  4EB9 00000DA6            173      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
00000134  6000 0002                174      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000138                           175  
00000138                           176  
00000138                           177  OP_JSR_DONE:
00000138  4CDF 0003                178           MOVEM.L (SP)+,D0-D1       ;Recover register D0
0000013C  4EB9 00000142            179           JSR    check_NOP
00000142                           180  check_NOP                           ;THIS IS A TEMPORARY ROUTINE MADE FOR NOP until EA UPDATES NOP validity
Line 181 ERROR: Undefined symbol
00000142  0C79 4E71 005455B8       181           CMP.W #$4E71,CUR_OP_CODE
Line 182 ERROR: Undefined symbol
0000014A  6700 BBCA                182           BEQ    check_print
0000014E  6600 0002                183           BNE    normal_CHECK
00000152                           184  normal_CHECK         
Line 185 ERROR: Undefined symbol
00000152  0C39 0001 005455B8       185           CMP.B #1,IS_VALID
Line 186 ERROR: Undefined symbol
0000015A  6700 BBBA                186           BEQ    main_EA
Line 187 ERROR: Undefined symbol
0000015E  6600 BBB6                187           BNE    check_print
00000162                           188           ;JMP EA_ROUTINE        ;This runs EA's routines after OP code portion is finished
00000162                           189  **********************************************************************************    
00000162                           190  * FIND_2_BIT_SIZE_7_TO_6
00000162                           191  **********************************************************************************
00000162                           192  * Description: For OP codes with 2 bit size fields, the 2 relevant bits (7-6) will 
00000162                           193  * be parsed and moved to the appropriate registers.
00000162                           194  *
00000162                           195  * Registers used: D0,D1
00000162                           196  *
00000162                           197  * Precondition: OP code has been identified with 2 size bit field for CUR_OP_CODE.
00000162                           198  *
00000162                           199  * Postcondition: 2 bit size field has been isolated and stored into OP_SIZE.
00000162                           200  **********************************************************************************
00000162                           201  FIND_2_BIT_SIZE_7_TO_6:         ;Move the 2 bit size field relevant register
00000162  48E7 C000                202      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
Line 203 ERROR: Undefined symbol
00000166  3039 004DBD16            203      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
0000016C  323C 0008                204      MOVE.W   #8,D1              ;Prepare 8 bit shift to D1
00000170  E368                     205      LSL.W    D1,D0              ;Truncate to find the 2 size bits
00000172  E268                     206      LSR.W    D1,D0              ;Reposition the bits
00000174  323C 0006                207      MOVE.W   #6,D1              ;Prepare 6 bit shift to D1
00000178  E268                     208      LSR.W    D1,D0              ;Truncate to shift 2 bits to a byte
0000017A  11C0 0000                209      MOVE.B   D0,OP_SIZE         ;Move 2 size bits into OP_SIZE
0000017E  4CDF 0003                210      MOVEM.L (SP)+,D0-D1         ;Restore registers
00000182  4E75                     211      RTS                         ;Return to stack
00000184                           212  **********************************************************************************
00000184                           213  
00000184                           214  * FIND_1_BIT_SIZE_6
00000184                           215  **********************************************************************************
00000184                           216  * Description: For OP codes with 1 bit size fields, the 1 relevant bit 6 will 
00000184                           217  * be parsed and moved to the appropriate registers.
00000184                           218  * This particular size parsing is used for MOVEM
00000184                           219  *
00000184                           220  * Registers used: D0,D1
00000184                           221  *
00000184                           222  * Precondition: OP code has been identified with 1 size bit field for CUR_OP_CODE.
00000184                           223  *
00000184                           224  * Postcondition: 1 bit size field has been isolated and stored into OP_SIZE.
00000184                           225  **********************************************************************************
00000184                           226  FIND_1_BIT_SIZE_6:              ;Move the 1 bit size field relevant register
00000184  48E7 C000                227      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
Line 228 ERROR: Undefined symbol
00000188  3039 004DBD16            228      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
0000018E  323C 0009                229      MOVE.W   #9,D1              ;Prepare 9 bit shift to D1
00000192  E368                     230      LSL.W    D1,D0              ;Truncate to find the size bit
00000194  E268                     231      LSR.W    D1,D0              ;Reposition the bits
00000196  323C 0006                232      MOVE.W   #6,D1              ;Prepare 6 bit shift to D1
0000019A  E268                     233      LSR.W    D1,D0              ;Truncate to shift 1 bit to a byte
0000019C  11C0 0000                234      MOVE.B   D0,OP_SIZE         ;Move 1 size bit into OP_SIZE
000001A0  4CDF 0003                235      MOVEM.L (SP)+,D0-D1         ;Restore registers
000001A4  4E75                     236      RTS                         ;Return to stack
000001A6                           237  **********************************************************************************
000001A6                           238  
000001A6                           239  * FIND_1_BIT_SIZE_8
000001A6                           240  **********************************************************************************
000001A6                           241  * Description: For OP codes with 1 bit size fields, the 1 relevant bit 8 will 
000001A6                           242  * be parsed and moved to the appropriate registers.
000001A6                           243  * This particular size parsing is used for ADDA
000001A6                           244  *
000001A6                           245  * Registers used: D0,D1
000001A6                           246  *
000001A6                           247  * Precondition: OP code has been identified with 1 size bit field for CUR_OP_CODE.
000001A6                           248  *
000001A6                           249  * Postcondition: 1 bit size field has been isolated and stored into OP_SIZE.
000001A6                           250  *
000001A6                           251  **********************************************************************************
000001A6                           252  FIND_1_BIT_SIZE_8:         ;Move the 1 bit size field relevant register
000001A6  48E7 C000                253      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
Line 254 ERROR: Undefined symbol
000001AA  3039 004DBD16            254      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
000001B0  323C 0007                255      MOVE.W   #7,D1              ;Prepare 7 bit shift to D1
000001B4  E368                     256      LSL.W    D1,D0              ;Truncate to find the 1 size bit
000001B6  E268                     257      LSR.W    D1,D0              ;Reposition the bits
000001B8  323C 0008                258      MOVE.W   #8,D1              ;Prepare 8 bit shift to D1
000001BC  E268                     259      LSR.W    D1,D0              ;Truncate to shift 1 bit to a byte
000001BE  11C0 0000                260      MOVE.B   D0,OP_SIZE         ;Move 1 size bit into OP_SIZE
000001C2  4CDF 0003                261      MOVEM.L (SP)+,D0-D1         ;Restore registers
000001C6  4E75                     262      RTS                         ;Return to stack
000001C8                           263  **********************************************************************************
000001C8                           264  
000001C8                           265  * MOVE_AND_MOVEA_PARSE_EA
000001C8                           266  **********************************************************************************
000001C8                           267  * Description: Special parsing for the SRC and DST Mode/Reg for MOVE/MOVE
000001C8                           268  *
000001C8                           269  * Registers used: A6,D0,D1,D7,D6,D5,D4
000001C8                           270  *
000001C8                           271  * Precondition: OP code has been identified with either MOVE or MOVEA
000001C8                           272  *
000001C8                           273  * Postcondition: Store all relevant EA bits into associated register.
000001C8                           274  **********************************************************************************
000001C8                           275  MOVE_AND_MOVEA_PARSE_EA:       ;Move the 3 bit dynamic register bits to proper register
000001C8                           276     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
Line 277 ERROR: Undefined symbol
000001C8  3039 004DBD16            277      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
000001CE  323C 000A                278      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
000001D2  E368                     279      LSL.W   D1,D0            ;Truncate to find the last 6 bits
000001D4  E268                     280      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
000001D6  3E00                     281      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
000001D8  323C 0003                282      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
000001DC  E26F                     283      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
000001DE  3A07                     284      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
000001E0  323C 000D                285      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
000001E4  E368                     286      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
000001E6  E268                     287      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
000001E8  3800                     288      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
000001EA                           289  ****MOVING_SOURCE***********
Line 290 ERROR: Undefined symbol
000001EA  3039 004DBD16            290      MOVE.W CUR_OP_CODE,D0     ;Move current OP code into D0     
000001F0  323C 0004                291      MOVE.W  #4,D1             ;Prepare 4 bit shift to D1
000001F4  E368                     292      LSL.W   D1,D0             ;Truncate to find bits 11-6
000001F6  E268                     293      LSR.W   D1,D0             ;Reposition bits
000001F8  323C 0006                294      MOVE.W  #6,D1             ;Prepare 6 bit shift to D1
000001FC  E268                     295      LSR.W   D1,D0             ;Truncate the SRC Reg/Mode bits
000001FE  323C 0003                296      MOVE.W  #3,D1             ;Prepare a 3 bit shift to D1 for DST Reg/Mode
00000202  3C00                     297      MOVE.W  D0,D6             ;Copy over the current 6 bits to D6
00000204  E268                     298      LSR.W   D1,D0             ;Truncate DST Mode  
00000206  3E00                     299      MOVE.W  D0,D7             ;Move DST Reg to D7
00000208  323C 000D                300      MOVE.W  #13,D1             
0000020C  E36E                     301      LSL.W   D1,D6             ;Truncate 13 bits in D6
0000020E  E26E                     302      LSR.W   D1,D6             ;Reposition D6
00000210                           303                                ;D6 now contains the DST Reg
00000210                           304     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
00000210  4E75                     305      RTS                     ;Return to stack
00000212                           306  **********************************************************************************
00000212                           307  ********** EA Parsing ************************************************************
00000212                           308  *PARSE_EA_CONSTANT_BITS
00000212                           309  **********************************************************************************
00000212                           310  * Definition: Uses CUR_OP_CODE to shift the proper bits into the global constants
00000212                           311  * used for EA (MNEMONIC,FIRST_3,SECOND_3,THIRD_3,FOURTH_3. Where MNEMONIC refers
00000212                           312  * to the first 4 bits of CUR_OP_CODE (15-12), FIRST_3 refers to the first group
00000212                           313  * of 3 bits (11-9), SECOND_3 refers to the second group of 3 bits (8-6), THIRD_3
00000212                           314  * refers to the third group of 3 bits (5-3), and FOURTH_3 refers to the fourth
00000212                           315  * group of 3 bits (2-0). Shifts CUR_OP_CODE bits to initialize constants.
00000212                           316  *
00000212                           317  * Registers used: D0,D1
00000212                           318  *
00000212                           319  * Precondition: CUR_OP_CODE has been set with an 4 hex instruction set
00000212                           320  * 
00000212                           321  * Postcondition: MNEMONIC, FIRST_3, SECOND_3, THIRD_3, FOURTH_3 have been set
00000212                           322  * to the corresponding values.
00000212                           323  **********************************************************************************
00000212                           324  PARSE_EA_CONSTANT_BITS:
00000212                           325      *MNEMONIC SHIFT
Line 326 ERROR: Undefined symbol
00000212  3039 004DBD16            326      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D0
00000218  323C 000C                327      MOVE.W #12,D1               ;Prepare a bit shift of 12 into D1
0000021C  E268                     328      LSR.W D1,D0                 ;Shift 12 bits from D0 right
0000021E  11C0 0001                329      MOVE.B D0,MNEMONIC          ;Set MNEMONIC to D0
00000222                           330      *FIRST_3 SHIFT
00000222  323C 0009                331      MOVE.W #9,D1                ;Prepare a bit shift of 9 into D1
Line 332 ERROR: Undefined symbol
00000226  3039 004DBD16            332      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
0000022C  E948                     333      LSL.W #4,D0                 ;Shift out bits 15-12 in D0
0000022E  E848                     334      LSR.W #4,D0                 ;Reposition D0
00000230  E268                     335      LSR.W  D1,D0                ;Shift D0 9 bits right
00000232  11C0 0002                336      MOVE.B D0,FIRST_3           ;Set FIRST_3 to D0
00000236                           337      *SECOND_3 SHIFT
Line 338 ERROR: Undefined symbol
00000236  3039 004DBD16            338      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
0000023C  EF48                     339      LSL.W #7,D0                 ;Shift out bits 15-9 in D0
0000023E  EE48                     340      LSR.W #7,D0                 ;Reposition D0
00000240  EC48                     341      LSR.W #6,D0                 ;Shift D0 6 bits right
00000242  11C0 0003                342      MOVE.B D0,SECOND_3          ;Set SECOND_3 to D0
00000246                           343      *THIRD_3 SHIFT
Line 344 ERROR: Undefined symbol
00000246  3039 004DBD16            344      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
0000024C  E648                     345      LSR.W #3,D0                 ;Shift D0 3 bits right
0000024E  323C 000D                346      MOVE.W #13,D1               ;Prepare a 13 bit shift into D1
00000252  E368                     347      LSL.W D1,D0                 ;Truncate first 13 bits of D0
00000254  E268                     348      LSR.W D1,D0                 ;Reposition D0
00000256  11C0 0004                349      MOVE.B D0,THIRD_3           ;Set THIRD_3 to D0
0000025A                           350      *FOURTH_3 SHIFT
Line 351 ERROR: Undefined symbol
0000025A  3039 004DBD16            351      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
00000260  E368                     352      LSL.W D1,D0                 ;Grab the fourth 3-bit group
00000262  E268                     353      LSR.W D1,D0                 ;Shift D0 back into position
00000264  11C0 0005                354      MOVE.B D0,FOURTH_3          ;Set FOURTH_3 to Do
00000268  4E75                     355      RTS                         ;Return to stack
0000026A                           356  **********************************************************************************
0000026A                           357  ********** End of EA Parsing *****************************************************
0000026A                           358  
0000026A                           359  *******************JMP LABELS ****************************************************
0000026A                           360  * Labelling for group codes will be in the following format
0000026A                           361  
0000026A                           362  * <JMP Labelname>
0000026A                           363  ********************************************************************************
0000026A                           364  * Checking List Order (If more than one value)
0000026A                           365  * Operand1 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
0000026A                           366  * Operand2 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
0000026A                           367  
0000026A                           368  * Where a-b will refer to the bit corresponding bit value in the instruction
0000026A                           369  * format, and a specifier will be attached such as Size, EA Mode, SRC Reg, etc
0000026A                           370  * to clarify what a specific bit range means.
0000026A                           371  * Checking order refers to what order the checks will be performed in. 
0000026A                           372  * Any other code outside of the listed ones will be INVALID_OP.
0000026A                           373  ********************************************************************************
0000026A                           374  
0000026A                           375  ********************************************************************************
0000026A                           376  * Global Field Descriptions
0000026A                           377  * Size Field: Byte = 00 Word = 01 Long = 10
0000026A                           378  * EA Mode: Refer to EA Address Modes
0000026A                           379  * EA Reg: 3-bit input that is mapped to the respective binary value
0000026A                           380  ********************************************************************************
0000026A                           381  
0000026A                           382  * GROUP_0                      
0000026A                           383  ********************************************************************************
0000026A                           384  * Description: Checks for the following listed OP codes to be present or not
0000026A                           385  * Supported OP codes:
0000026A                           386  * ORI: $00, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
0000026A                           387  * CMPI: $0C, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
0000026A                           388  * Dynamic BCLR: $0, 11-9 Register, 8-6 %110, 5-3 EA Mode, 2-0 EA Reg
0000026A                           389  * Static BCLR: $01, 7-6 10, 5-3 EA Mode, 2-0 EA Reg
0000026A                           390  *
0000026A                           391  * Registers used: D0
0000026A                           392  *
0000026A                           393  * Precondition: First nibble has been identified as $0
0000026A                           394  *
0000026A                           395  * Postcondition: Parses proper OP code with a nibble value of $0 or finds an
0000026A                           396  * invalid OP code. After a successful parse loading for EA values will be done
0000026A                           397  * through a subroutine.
0000026A                           398  * 
0000026A                           399  * Unsupported OP codes:
0000026A                           400  * ORI_TO_CCR, ORI_TO_SR, ANDI_TO_CCR, ANDI_TO_SR, ANDI, SUBI, ADDI, EORI_TO_CCR
0000026A                           401  * EORI_TO_SR, EORI, STATIC_BTST, STATIC_BCHG, STATIC_BSET, DYNAMIC_BTST,
0000026A                           402  * DYNAMIC_BCHG, DYNAMIC_BSET, MOVEP 
0000026A                           403  ********************************************************************************
0000026A                           404  C_GROUP_0:
0000026A  48E7 C000                405      MOVEM.L D0-D1, -(SP)            ;Backup registers
0000026E                           406      
0000026E                           407  *Unsupported OP codes that are fully static in bits
0000026E                           408  CHECK_OP_ORI_TO_CCR:
Line 409 ERROR: Undefined symbol
0000026E  3039 004DBD16            409      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000274  B07C 003C                410      CMP.W #$003C,D0                 ;Compare the direct full bits
00000278  6700 01EE                411      BEQ GROUP0_INVALID              ;INVALID OP code found
0000027C  6600 0002                412      BNE CHECK_OP_ORI_TO_SR          ;Check next routine
00000280                           413      
00000280                           414  CHECK_OP_ORI_TO_SR:
Line 415 ERROR: Undefined symbol
00000280  3039 004DBD16            415      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000286  B07C 007C                416      CMP.W #$007C,D0                 ;Compare the direct full bits
0000028A  6700 01DC                417      BEQ GROUP0_INVALID              ;INVALID OP code found
0000028E  6600 0002                418      BNE CHECK_OP_ANDI_TO_CCR        ;Check next routine
00000292                           419      
00000292                           420  CHECK_OP_ANDI_TO_CCR:
Line 421 ERROR: Undefined symbol
00000292  3039 004DBD16            421      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000298  B07C 023C                422      CMP.W #$023C,D0                 ;Compare the direct full bits
0000029C  6700 01CA                423      BEQ GROUP0_INVALID              ;INVALID OP code found
000002A0  6600 0002                424      BNE CHECK_OP_ANDI_TO_SR         ;Check next routine
000002A4                           425      
000002A4                           426  CHECK_OP_ANDI_TO_SR:
Line 427 ERROR: Undefined symbol
000002A4  3039 004DBD16            427      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002AA  B07C 027C                428      CMP.W #$027C,D0                 ;Compare the direct full bits
000002AE  6700 01B8                429      BEQ GROUP0_INVALID              ;INVALID OP code found
000002B2  6600 0002                430      BNE CHECK_OP_EORI_TO_CCR                ;Check next routine
000002B6                           431  
000002B6                           432  CHECK_OP_EORI_TO_CCR:
Line 433 ERROR: Undefined symbol
000002B6  3039 004DBD16            433      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002BC  B07C 0A3C                434      CMP.W #$0A3C,D0                 ;Compare the direct full bits
000002C0  6700 01A6                435      BEQ GROUP0_INVALID              ;INVALID OP code found
000002C4  6600 0002                436      BNE CHECK_OP_EORI_TO_SR         ;Check next routine
000002C8                           437      
000002C8                           438  CHECK_OP_EORI_TO_SR:
Line 439 ERROR: Undefined symbol
000002C8  3039 004DBD16            439      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002CE  B07C 0A7C                440      CMP.W #$0A7C,D0                 ;Compare the direct full bits
000002D2  6700 0194                441      BEQ GROUP0_INVALID              ;INVALID OP code found
000002D6  6600 0002                442      BNE CHECK_OP_ANDI               ;Check next routine
000002DA                           443      
000002DA                           444  *Unsupported OP codes to check with partial static bits
000002DA                           445  CHECK_OP_ANDI:
Line 446 ERROR: Undefined symbol
000002DA  3039 004DBD16            446      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002E0  0240 FF00                447      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
000002E4  B07C 0200                448      CMP.W #$0200,D0                 ;Compare the appropriate masked bits
000002E8  6700 017E                449      BEQ GROUP0_INVALID              ;INVALID OP code found
000002EC  6600 0002                450      BNE CHECK_OP_SUBI               Check next routine
000002F0                           451      
000002F0                           452  CHECK_OP_SUBI:
Line 453 ERROR: Undefined symbol
000002F0  3039 004DBD16            453      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002F6  0240 FF00                454      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
000002FA  B07C 0400                455      CMP.W #$0400,D0                 ;Compare the appropriate masked bits
000002FE  6700 0168                456      BEQ GROUP0_INVALID              ;INVALID OP code found
00000302  6600 0002                457      BNE CHECK_OP_ADDI               ;Check next routine
00000306                           458  
00000306                           459  CHECK_OP_ADDI:
Line 460 ERROR: Undefined symbol
00000306  3039 004DBD16            460      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000030C  0240 FF00                461      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00000310  B07C 0600                462      CMP.W #$0600,D0                 ;Compare the appropriate masked bits
00000314  6700 0152                463      BEQ GROUP0_INVALID              ;INVALID OP code found
00000318  6600 0002                464      BNE CHECK_OP_EORI               ;Check next routine 
0000031C                           465  
0000031C                           466  CHECK_OP_EORI:
Line 467 ERROR: Undefined symbol
0000031C  3039 004DBD16            467      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000322  0240 FF00                468      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00000326  B07C 0A00                469      CMP.W #$0A00,D0                 ;Compare the appropriate masked bits
0000032A  6700 013C                470      BEQ GROUP0_INVALID              ;INVALID OP code found
0000032E  6600 0002                471      BNE CHECK_OP_STATIC_BTST        ;Check next routine
00000332                           472      
00000332                           473  CHECK_OP_STATIC_BTST:
Line 474 ERROR: Undefined symbol
00000332  3039 004DBD16            474      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000338  0240 FFC0                475      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
0000033C  B07C 0800                476      CMP.W #$0800,D0                 ;Compare the appropriate masked bits
00000340  6700 0126                477      BEQ GROUP0_INVALID              ;INVALID OP code found
00000344  6600 0002                478      BNE CHECK_OP_STATIC_BCHG        ;Check next routine
00000348                           479      
00000348                           480  CHECK_OP_STATIC_BCHG:
Line 481 ERROR: Undefined symbol
00000348  3039 004DBD16            481      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000034E  0240 FFC0                482      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00000352  B07C 0840                483      CMP.W #$0840,D0                 ;Compare the appropriate masked bits
00000356  6700 0110                484      BEQ GROUP0_INVALID              ;INVALID OP code found
0000035A  6600 0002                485      BNE CHECK_OP_STATIC_BSET        ;Check next routine
0000035E                           486  
0000035E                           487  CHECK_OP_STATIC_BSET:
Line 488 ERROR: Undefined symbol
0000035E  3039 004DBD16            488      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000364  0240 FFC0                489      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00000368  B07C 08C0                490      CMP.W #$08C0,D0                 ;Compare the appropriate masked bits
0000036C  6700 00FA                491      BEQ GROUP0_INVALID              ;INVALID OP code found   
00000370  6600 0002                492      BNE CHECK_OP_DYNAMIC_BTST       ;Check next routine
00000374                           493  
00000374                           494  CHECK_OP_DYNAMIC_BTST:
Line 495 ERROR: Undefined symbol
00000374  3039 004DBD16            495      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000037A  0240 F1C0                496      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
0000037E  B07C 0100                497      CMP.W #$0100,D0                 ;Compare the appropriate masked bits
00000382  6700 00E4                498      BEQ GROUP0_INVALID              ;INVALID OP code found
00000386  6600 0002                499      BNE CHECK_OP_DYNAMIC_BCHG       ;Check next routine
0000038A                           500  
0000038A                           501  CHECK_OP_DYNAMIC_BCHG:
Line 502 ERROR: Undefined symbol
0000038A  3039 004DBD16            502      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000390  0240 F1C0                503      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
00000394  B07C 0140                504      CMP.W #$0140,D0                 ;Compare the appropriate masked bits 
00000398  6700 00CE                505      BEQ GROUP0_INVALID              ;INVALID OP code found
0000039C  6600 0002                506      BNE CHECK_OP_DYNAMIC_BSET       ;Check next routine
000003A0                           507      
000003A0                           508  CHECK_OP_DYNAMIC_BSET:
000003A0                           509  
Line 510 ERROR: Undefined symbol
000003A0  3039 004DBD16            510      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000003A6  0240 F1C0                511      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
000003AA  B07C 01C0                512      CMP.W   #$01C0,D0               ;Compare the appropriate masked bits 
000003AE  6700 0006                513      BEQ     BIT_CHECK_MOVEP         ;Check special case for MOVEP
000003B2  6600 001E                514      BNE     CHECK_OP_MOVEP          ;Check next routine
000003B6                           515  
000003B6                           516  BIT_CHECK_MOVEP:                                ;This is a special case check for MOVEP
Line 517 ERROR: Undefined symbol
000003B6  3039 004DBD16            517      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000003BC  323C 000A                518      MOVE.W  #10,D1                  ;Prepare a 10-bit shift
000003C0  E368                     519      LSL.W   D1,D0                   ;Shift out 10 bits left 
000003C2  E268                     520      LSR.W   D1,D0                   ;Reposition D0 for last 6 bits
000003C4  E648                     521      LSR.W   #3,D0                   ;Shift out 3 bits right, D0 contains bits 5-3
000003C6  B07C 0001                522      CMP.W   #$1,D0                  ;Compare bits to D0
000003CA  6700 0006                523      BEQ     CHECK_OP_MOVEP          ;If bits are $1 then it's addressing, goto MOVEP
000003CE  6600 0098                524      BNE     GROUP0_INVALID          ;If not then it's DYNAMIC_BSET which is invalid
000003D2                           525      
000003D2                           526  CHECK_OP_MOVEP:
Line 527 ERROR: Undefined symbol
000003D2  3039 004DBD16            527      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000003D8  0240 F138                528      ANDI.W #$F138,D0                ;Mask relevant bits to D0
000003DC  B07C 0108                529      CMP.W #$0108,D0                 ;Compare the appropriate masked bits
000003E0  6700 09CC                530      BEQ INVALID_OP                  ;INVALID OP code found
000003E4  6600 0002                531      BNE CHECK_OP_ORI                ;Check next routine
000003E8                           532  
000003E8                           533  *Supported OP code checks
000003E8                           534  CHECK_OP_ORI:
Line 535 ERROR: Undefined symbol
000003E8  3039 004DBD16            535      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000003EE  0240 FF00                536      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
000003F2  B07C 0000                537      CMP.W   #$0000,D0               ;Compare the appropriate masked bits     
000003F6  6600 0010                538      BNE     CHECK_OP_CMPI           ;Branch to next comparison if not equal
000003FA  4EB8 0162                539      JSR     FIND_2_BIT_SIZE_7_TO_6
000003FE  4EB9 00000DCA            540      JSR     PRINT_OP_ORI            ;Print the OP code if equal    
00000404  6000 0068                541      BRA     GROUP0_SUCCESS          ;Finish routine
00000408                           542      
00000408                           543  CHECK_OP_CMPI:
Line 544 ERROR: Undefined symbol
00000408  3039 004DBD16            544      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000040E  0240 FF00                545      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00000412  B07C 0C00                546      CMP.W   #$0C00,D0               ;Compare the appropriate masked bits   
00000416  6600 0010                547      BNE     CHECK_OP_STATIC_BCLR    ;Branch to next comparison if not equal       
0000041A  4EB8 0162                548      JSR     FIND_2_BIT_SIZE_7_TO_6
0000041E  4EB9 00000DE0            549      JSR     PRINT_OP_CMPI           ;Print the OP code if equal
00000424  6000 0048                550      BRA     GROUP0_SUCCESS          ;Finish routine
00000428                           551      
00000428                           552  CHECK_OP_STATIC_BCLR:
Line 553 ERROR: Undefined symbol
00000428  3039 004DBD16            553      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000042E  0240 FF00                554      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00000432  B07C 0800                555      CMP.W   #$0800,D0               ;Compare the appropriate masked bits
00000436  6600 0010                556      BNE     CHECK_OP_DYNAMIC_BCLR   ;Branch to next comparison if not equal
0000043A  4EB8 0162                557      JSR     FIND_2_BIT_SIZE_7_TO_6
0000043E  4EB9 00000DF6            558      JSR     PRINT_OP_STATIC_BCLR    ;Print the OP code if equal
00000444  6000 0028                559      BRA     GROUP0_SUCCESS          ;Finish routine
00000448                           560      
00000448                           561  CHECK_OP_DYNAMIC_BCLR:
Line 562 ERROR: Undefined symbol
00000448  3039 004DBD16            562      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000044E  0240 0180                563      ANDI.W  #$0180,D0               ;Mask relevant bits to D0
00000452  B07C 0180                564      CMP.W   #$0180,D0               ;Compare the appropriate masked bits
00000456  6600 0010                565      BNE     GROUP0_INVALID          ;If not equal this must be an invalid OP code
0000045A  4EB8 0162                566      JSR     FIND_2_BIT_SIZE_7_TO_6
0000045E  4EB9 00000E0C            567      JSR     PRINT_OP_DYNAMIC_BCLR   ;Print the OP code if equal
00000464  6000 0008                568      BRA     GROUP0_SUCCESS          ;Finish routine
00000468                           569  
00000468                           570  GROUP0_INVALID:                     ;Checks have been finished, invalid OP code has been found
00000468  4EB9 00000DAE            571      JSR INVALID_OP                  ;INVALID OP code found
0000046E                           572  GROUP0_SUCCESS:                     ;Checks have been finished,a valid OP code has been found
0000046E  4CDF 0003                573      MOVEM.L (SP)+,D0-D1             ;Restore registers
00000472  4E75                     574      RTS                             ;Return to stack
00000474                           575      
00000474                           576  * GROUP_1                      
00000474                           577  ********************************************************************************
00000474                           578  * Supported OP code:
00000474                           579  * MOVE.B: $1, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
00000474                           580  ********************************************************************************
00000474                           581  C_GROUP_1:
00000474  48E7 C000                582      MOVEM.L D0-D1,-(SP)             ;Save registers to stack
00000478                           583  
00000478                           584  CHECK_OP_MOVE_B:
Line 585 ERROR: Undefined symbol
00000478  3039 004DBD16            585      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0          
0000047E  0240 F000                586      ANDI.W  #$F000,D0               ;Mask relevant bits to D0
00000482  B07C 1000                587      CMP.W   #$1000,D0               ;Compare the appropriate masked bits 
00000486  6600 000C                588      BNE     GROUP1_INVALID          ;Invalid OP code has been found
0000048A  4EB9 00000E22            589      JSR     PRINT_OP_MOVEB          ;Print the OP code if equal
00000490  6000 0008                590      BRA     GROUP1_SUCCESS          ;Finish routine
00000494                           591      
00000494                           592  GROUP1_INVALID:
00000494  4EB9 00000DAE            593      JSR INVALID_OP                  ;Invalid OP code found
0000049A                           594  GROUP1_SUCCESS:
0000049A  4CDF 0003                595      MOVEM.L (SP)+,D0-D1             ;Restore register
0000049E  4E75                     596      RTS                             ;Return to stack
000004A0                           597  * GROUP_2
000004A0                           598  ********************************************************************************
000004A0                           599  * Supported OP codes:
000004A0                           600  * MOVEA.L: $2, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
000004A0                           601  * MOVE.L: $2, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000004A0                           602  ********************************************************************************
000004A0                           603  C_GROUP_2:
000004A0  48E7 E000                604      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
000004A4                           605  
000004A4                           606  CHECK_OP_MOVEA_L:
Line 607 ERROR: Undefined symbol
000004A4  3039 004DBD16            607      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0  
000004AA  0240 F000                608      ANDI.W #$F000,D0                ;Mask relevant bits to D0
000004AE  B07C 2000                609      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
000004B2  4EF9 000004B8            610      JMP FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
000004B8                           611      
000004B8                           612  FIND_MOVEA_L_DIFFERENCE:            ;Finds difference between MOVEA and MOVE
Line 613 ERROR: Undefined symbol
000004B8  3039 004DBD16            613      MOVE.W   CUR_OP_CODE,D0         ;Move current OP code into D0
000004BE  323C 0007                614      MOVE.W   #7,D1                  ;Prepare 7 bit shift to D1
000004C2  E368                     615      LSL.W    D1,D0                  ;Truncate to find the 3 address mode bits
000004C4  E268                     616      LSR.W    D1,D0                  ;Reposition the bits
000004C6  323C 0006                617      MOVE.W   #6,D1                  ;Prepare 6 bit shift to D1
000004CA  E268                     618      LSR.W    D1,D0                  ;Truncate to shift 3 bits to a register
000004CC  3400                     619      MOVE.W   D0,D2                  ;Move 3 address mode bits into D6
000004CE  B47C 0001                620      CMP.W   #$1,D2                  ;Check if the address mode value is MOVEA
000004D2  6600 000C                621      BNE     CHECK_OP_MOVE_L         ;Branch if not equal to check MOVE
000004D6  4EB9 00000E32            622      JSR     PRINT_OP_MOVEA_L        ;Print the OP code if it's a match
000004DC  6000 0024                623      BRA     GROUP2_SUCCESS          ;Finish routine
000004E0                           624      
000004E0                           625      
000004E0                           626  CHECK_OP_MOVE_L:
Line 627 ERROR: Undefined symbol
000004E0  3039 004DBD16            627      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000004E6  0240 F000                628      ANDI.W #$F000,D0                ;Mask relevant bits to D0
000004EA  B07C 2000                629      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
000004EE  6600 000C                630      BNE GROUP2_INVALID              ;If not equal, OP code is invalid
000004F2  4EB9 00000E42            631      JSR PRINT_OP_MOVE_L             ;Print out MOVE.L
000004F8  6000 0008                632      BRA GROUP2_SUCCESS              ;Finish routine
000004FC                           633      
000004FC                           634  GROUP2_INVALID:    
000004FC  4EB9 00000DAE            635      JSR INVALID_OP                  ;Invalid OP code found
00000502                           636  GROUP2_SUCCESS:
00000502  4CDF 0007                637      MOVEM.L (SP)+,D0-D2             ;Restore register
00000506  4E75                     638      RTS                             ;Return to stack
00000508                           639  * GROUP_3
00000508                           640  ********************************************************************************
00000508                           641  * Supported OP codes:
00000508                           642  * MOVEA.W: $3, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
00000508                           643  * MOVE.W: $3, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
00000508                           644  ********************************************************************************
00000508                           645  C_GROUP_3:
00000508  48E7 E000                646      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
0000050C                           647      
0000050C                           648  CHECK_OP_MOVEA_W:
Line 649 ERROR: Undefined symbol
0000050C  3039 004DBD16            649      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00000512  0240 F000                650      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00000516  B07C 3000                651      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
0000051A  4EF9 00000520            652      JMP      FIND_MOVEA_W_DIFF     ;Custom routine to differentiate MOVE and MOVEA
00000520                           653  
00000520                           654      
00000520                           655  FIND_MOVEA_W_DIFF:                 ;Finds difference between MOVEA and MOVE
Line 656 ERROR: Undefined symbol
00000520  3039 004DBD16            656      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00000526  323C 0007                657      MOVE.W   #7,D1                 ;Prepare 7 bit shift to D1
0000052A  E368                     658      LSL.W    D1,D0                 ;Truncate to find the 3 address mode bits
0000052C  E268                     659      LSR.W    D1,D0                 ;Reposition the bits
0000052E  323C 0006                660      MOVE.W   #6,D1                 ;Prepare 6 bit shift to D1
00000532  E268                     661      LSR.W    D1,D0                 ;Truncate to shift 3 bits to a register
00000534  3400                     662      MOVE.W   D0,D2                 ;Move 3 address mode bits into D6
00000536  B47C 0001                663      CMP.W    #$1,D2                ;Check if the address mode value is MOVEA
0000053A  6600 000C                664      BNE      CHECK_OP_MOVE_W       ;If bits do not match, try MOVE 
0000053E  4EB9 00000E52            665      JSR      PRINT_OP_MOVEA_W      ;Print the OP code if it's a match
00000544  6000 0024                666      BRA      GROUP3_SUCCESS        ;Finish routine
00000548                           667      
00000548                           668  CHECK_OP_MOVE_W:
Line 669 ERROR: Undefined symbol
00000548  3039 004DBD16            669      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
0000054E  0240 F000                670      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00000552  B07C 3000                671      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
00000556  6600 000C                672      BNE      GROUP3_INVALID        ;INVALID OP code found
0000055A  4EB9 00000E62            673      JSR      PRINT_OP_MOVE_W       ;Print the OP code if it's a match
00000560  6000 0008                674      BRA      GROUP3_SUCCESS        ;Finish routine
00000564                           675      
00000564                           676  GROUP3_INVALID:
00000564  4EB9 00000DAE            677      JSR INVALID_OP                 ;INVALID OP code found
0000056A                           678  GROUP3_SUCCESS:
0000056A  4CDF 0007                679      MOVEM.L (SP)+,D0-D2            ;Restore registers from stack
0000056E  4E75                     680      RTS                            ;Return to stack
00000570                           681  
00000570                           682  * GROUP_4
00000570                           683  ********************************************************************************
00000570                           684  * Supported OP codes:
00000570                           685  * LEA: $4, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00000570                           686  * JSR: $4E, 7-6 %10, 5-3 EA Mode, 2-0 EA Reg 
00000570                           687  * RTS: $4E75
00000570                           688  * NEG: $44, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00000570                           689  * MOVEM: $4, 11 %1, 10 %D, 9-7 %001, 6 S, 5-3 EA Mode, 2-0 EA Reg
00000570                           690  * %D = 0 , Register to Memory, 1 Memory to Register
00000570                           691  * Unsupported OP codes: MOVE_FROM_SR, MOVE_TO_CCR, MOVE_TO_SR, NEGX, CLR, NOT
00000570                           692  * EXT, NBCD, SWAP, PEA, ILLEGAL, TAS, TST, TRAP, LINK, UNLK, MOVE_USP, RESET,
00000570                           693  * NOP, STOP, RTE, TRAPV, RTR, JMP, CHK
00000570                           694  ********************************************************************************
00000570                           695  C_GROUP_4:
00000570  2F00                     696      MOVE.L  D0,-(SP)            ;Save registers
00000572                           697      
00000572                           698  *Unsupported OP codes to check that are full static bits
00000572                           699  CHECK_OP_STOP:
Line 700 ERROR: Undefined symbol
00000572  3039 004DBD16            700      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000578  B07C 4E72                701      CMP.W  #$4E72,D0                ;Compare the appropriate bits
0000057C  6700 02AC                702      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000580  6600 0002                703      BNE    CHECK_OP_RESET           ;Check next OP code
00000584                           704      
00000584                           705  CHECK_OP_RESET:
Line 706 ERROR: Undefined symbol
00000584  3039 004DBD16            706      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000058A  B07C 4E70                707      CMP.W  #$4E70,D0                ;Compare the appropriate bits
0000058E  6700 029A                708      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000592  6600 0002                709      BNE    CHECK_OP_ILLEGAL         ;Check next OP code
00000596                           710          
00000596                           711  CHECK_OP_ILLEGAL:
Line 712 ERROR: Undefined symbol
00000596  3039 004DBD16            712      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000059C  B07C 4AFC                713      CMP.W  #$4AFC,D0                ;Compare the appropriate bits
000005A0  6700 0288                714      BEQ    GROUP4_INVALID           ;INVALID OP code found
000005A4  6600 0002                715      BNE    CHECK_OP_RTE             ;Check next OP code
000005A8                           716      
000005A8                           717  CHECK_OP_RTE:    
Line 718 ERROR: Undefined symbol
000005A8  3039 004DBD16            718      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005AE  B07C 4E73                719      CMP.W #$4E73,D0                 ;Compare the appropriate bits
000005B2  6700 0276                720      BEQ   GROUP4_INVALID            ;INVALID OP code found
000005B6  6600 0002                721      BNE   CHECK_OP_TRAPV            ;Check next OP code
000005BA                           722      
000005BA                           723  CHECK_OP_TRAPV:
Line 724 ERROR: Undefined symbol
000005BA  3039 004DBD16            724      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005C0  B07C 4E76                725      CMP.W  #$4E76,D0                ;Compare the appropriate bits
000005C4  6700 0264                726      BEQ    GROUP4_INVALID           ;INVALID OP code found
000005C8  6600 0002                727      BNE    CHECK_OP_RTR             ;Check next OP code
000005CC                           728      
000005CC                           729  CHECK_OP_RTR:
Line 730 ERROR: Undefined symbol
000005CC  3039 004DBD16            730      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005D2  B07C 4E77                731      CMP.W #$4E77,D0                 ;Compare the appropriate bits
000005D6  6700 0252                732      BEQ    GROUP4_INVALID           ;INVALID OP code found
000005DA  6600 0002                733      BNE    CHECK_OP_MOVE_FROM_SR    ;Check next OP code
000005DE                           734  
000005DE                           735  
000005DE                           736  *Unsupported OP codes to check that have partial static bits
000005DE                           737  CHECK_OP_MOVE_FROM_SR:
Line 738 ERROR: Undefined symbol
000005DE  3039 004DBD16            738      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005E4  0240 FFC0                739      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
000005E8  B07C 40C0                740      CMP.W  #$40C0,D0                ;Compare the appropriate masked bits
000005EC  6700 023C                741      BEQ    GROUP4_INVALID           ;INVALID OP code found  
000005F0  6600 0002                742      BNE    CHECK_OP_MOVE_TO_CCR     ;Check next OP code
000005F4                           743      
000005F4                           744  CHECK_OP_MOVE_TO_CCR:
Line 745 ERROR: Undefined symbol
000005F4  3039 004DBD16            745      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005FA  0240 FFC0                746      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
000005FE  B07C 44C0                747      CMP.W  #$44C0,D0                ;Compare the appropriate masked bits
00000602  6700 0226                748      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000606  6600 0002                749      BNE    CHECK_OP_MOVE_TO_SR      ;Check next OP code
0000060A                           750      
0000060A                           751  CHECK_OP_MOVE_TO_SR:
Line 752 ERROR: Undefined symbol
0000060A  3039 004DBD16            752      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000610  0240 FFC0                753      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00000614  B07C 46C0                754      CMP.W  #$46C0,D0                ;Compare the appropriate masked bits
00000618  6700 0210                755      BEQ    GROUP4_INVALID           ;INVALID OP code found
0000061C  6600 0002                756      BNE    CHECK_OP_NEGX            ;Check next OP code
00000620                           757      
00000620                           758  CHECK_OP_NEGX:
Line 759 ERROR: Undefined symbol
00000620  3039 004DBD16            759      MOVE.W CUR_OP_CODE,D0            ;Move current instruction set into D0
00000626  0240 FF00                760      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
0000062A  B07C 4000                761      CMP.W  #$4000,D0                ;Compare the appropriate masked bits
0000062E  6700 01FA                762      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000632  6600 0002                763      BNE    CHECK_OP_CLR             ;Check next OP code
00000636                           764      
00000636                           765  CHECK_OP_CLR:
Line 766 ERROR: Undefined symbol
00000636  3039 004DBD16            766      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000063C  0240 FF00                767      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00000640  B07C 4200                768      CMP.W  #$4200,D0                ;Compare the appropriate masked bits
00000644  6700 01E4                769      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000648  6600 0002                770      BNE    CHECK_OP_NOT             ;Check next OP code
0000064C                           771      
0000064C                           772  CHECK_OP_NOT:
Line 773 ERROR: Undefined symbol
0000064C  3039 004DBD16            773      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000652  0240 FF00                774      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00000656  B07C 4600                775      CMP.W  #$4600,D0                ;Compare the appropriate masked bits
0000065A  6700 01CE                776      BEQ    GROUP4_INVALID           ;INVALID OP code found
0000065E  6600 0002                777      BNE    CHECK_OP_EXT             ;Check next OP code
00000662                           778      
00000662                           779  CHECK_OP_EXT:
Line 780 ERROR: Undefined symbol
00000662  3039 004DBD16            780      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000668  0240 FF88                781      ANDI.W #$FF88,D0                ;Mask relevant bits to D0
0000066C  B07C 4880                782      CMP.W  #$4880,D0                ;Compare the appropriate masked bits
00000670  6700 01B8                783      BEQ    GROUP4_INVALID           ;INVALID OP code BIT_CHECK_EXT
00000674  6600 001E                784      BNE    CHECK_OP_NBCD            ;Check next OP code
00000678                           785  
00000678                           786  BIT_CHECK_EXT:    
Line 787 ERROR: Undefined symbol
00000678  3039 004DBD16            787      MOVE.W CUR_OP_CODE,D0           ;This is a special case to check against MOVEM
0000067E  323C 000A                788      MOVE.W #10,D1                   ;Prepare a 10 bit shift into D1
00000682  E368                     789      LSL.W  D1,D0                    ;Shift D0 left 10 bits
00000684  E068                     790      LSR.W  D0,D0                    ;Reposition D0
00000686  E648                     791      LSR.W  #3,D0                    ;Shift D0 3 bits
00000688  B078 0000                792      CMP.W  %000,D0                  ;Check the specific bits needed to differentiate EXT
0000068C  6700 019C                793      BEQ    GROUP4_INVALID           ;This means that this OP code is EXT
00000690  6600 017C                794      BNE    CHECK_OP_MOVEM           ;This is the only other possibility 
00000694                           795      
00000694                           796  CHECK_OP_NBCD:
Line 797 ERROR: Undefined symbol
00000694  3039 004DBD16            797      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000069A  0240 FFC0                798      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0           
0000069E  B07C 4800                799      CMP.W  #$4800,D0                ;Compare the appropriate masked bits
000006A2  6700 0186                800      BEQ    GROUP4_INVALID           ;INVALID OP code
000006A6  6600 0002                801      BNE    CHECK_OP_SWAP            ;Check next OP code
000006AA                           802      
000006AA                           803  CHECK_OP_SWAP:                      ; This must go before CHECK_OP PEA as first 3 nibbles can be equivalent
Line 804 ERROR: Undefined symbol
000006AA  3039 004DBD16            804      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000006B0  0240 FF48                805      ANDI.W #$FF48,D0                ;Mask relevant bits to D0
000006B4  B07C 4840                806      CMP.W  #$4840,D0                ;Compare the appropriate masked bits
000006B8  6700 0170                807      BEQ    GROUP4_INVALID           ;INVALID OP code
000006BC  6600 0002                808      BNE    CHECK_OP_PEA             ;Check next OP code
000006C0                           809   
000006C0                           810  CHECK_OP_PEA:                       ;This must go after CHECK_OP_SWAP as first 3 nibbles can be equivalent
Line 811 ERROR: Undefined symbol
000006C0  3039 004DBD16            811      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000006C6  0240 FF40                812      ANDI.W #$FF40,D0                ;Mask relevant bits to D0
000006CA  B07C 4840                813      CMP.W  #$4840,D0                ;Compare the appropriate masked bits
000006CE  6700 015A                814      BEQ    GROUP4_INVALID           ;INVALID OP code
000006D2  6600 0002                815      BNE    CHECK_OP_TAS             ;Check next OP code
000006D6                           816      
000006D6                           817  CHECK_OP_TAS:
Line 818 ERROR: Undefined symbol
000006D6  3039 004DBD16            818      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000006DC  0240 FFC0                819      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
000006E0  B07C 4AC0                820      CMP.W  #$4AC0,D0                ;Compare the appropriate masked bits
000006E4  6700 0144                821      BEQ    GROUP4_INVALID           ;INVALID OP code
000006E8  6600 0002                822      BNE    CHECK_OP_TST             ;Check next OP code
000006EC                           823  
000006EC                           824  CHECK_OP_TST:                       ;This must go after CHECK_OP_TAS as first 2 nibbles are equivalent
Line 825 ERROR: Undefined symbol
000006EC  3039 004DBD16            825      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000006F2  0240 FF00                826      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
000006F6  B07C 4A00                827      CMP.W  #$4A00,D0                ;Compare the appropriate masked bits
000006FA  6700 012E                828      BEQ    GROUP4_INVALID           ;INVALID OP code
000006FE  6600 0002                829      BNE    CHECK_OP_TRAP            ;Check next OP code
00000702                           830      
00000702                           831  CHECK_OP_TRAP:
Line 832 ERROR: Undefined symbol
00000702  3039 004DBD16            832      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000708  0240 FFF0                833      ANDI.W #$FFF0,D0                ;Mask relevant bits to D0
0000070C  B07C 4E40                834      CMP.W  #$4E40,D0                ;Compare the appropriate masked bits
00000710  6700 0118                835      BEQ    GROUP4_INVALID           ;INVALID OP code
00000714  6600 0002                836      BNE    CHECK_OP_LINK            ;Check next OP code
00000718                           837      
00000718                           838  CHECK_OP_LINK:
Line 839 ERROR: Undefined symbol
00000718  3039 004DBD16            839      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000071E  0240 FFF8                840      ANDI.W #$FFF8,D0                ;Mask relevant bits to D0
00000722  B07C 4E50                841      CMP.W  #$4E50,D0                ;Compare the appropriate masked bits
00000726  6700 0102                842      BEQ    GROUP4_INVALID           ;INVALID OP code
0000072A  6600 0002                843      BNE    CHECK_OP_UNLK            ;Check next OP code
0000072E                           844  
0000072E                           845  CHECK_OP_UNLK:
Line 846 ERROR: Undefined symbol
0000072E  3039 004DBD16            846      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000734  0240 FFF8                847      ANDI.W #$FFF8,D0                ;Mask relevant bits to D0
00000738  B07C 4E58                848      CMP.W  #$4E58,D0                ;Compare the appropriate masked bits
0000073C  6700 00EC                849      BEQ    GROUP4_INVALID           ;INVALID OP code
00000740  6600 0002                850      BNE    CHECK_OP_MOVE_USP        ;Check next OP
00000744                           851      
00000744                           852  CHECK_OP_MOVE_USP:
Line 853 ERROR: Undefined symbol
00000744  3039 004DBD16            853      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000074A  0240 FFF0                854      ANDI.W #$FFF0,D0                ;Mask relevant bits to D0
0000074E  B07C 4E60                855      CMP.W  #$4E60,D0                ;Compare the appropriate masked bits
00000752  6700 00D6                856      BEQ    GROUP4_INVALID           ;INVALID OP code
00000756  6600 0002                857      BNE    CHECK_OP_JMP             ;Check next OP
0000075A                           858  
0000075A                           859  CHECK_OP_JMP:
Line 860 ERROR: Undefined symbol
0000075A  3039 004DBD16            860       MOVE.W CUR_OP_CODE,D0          ;Move current instruction set into D0
00000760  0240 FFC0                861       ANDI.W #$FFC0,D0               ;Mask relevant bits to D0
00000764  B07C 4EC0                862       CMP.W  #$4EC0,D0               ;Compare the appropriate masked bits
00000768  6700 00C0                863       BEQ    GROUP4_INVALID          ;INVALID OP code
0000076C  6600 0002                864       BNE    CHECK_OP_CHK            ;Check next OP code
00000770                           865       
00000770                           866  CHECK_OP_CHK:
Line 867 ERROR: Undefined symbol
00000770  3039 004DBD16            867      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000776  0240 F1C0                868      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
0000077A  B07C 4180                869      CMP.W   #$4180,D0               ;Compare the appropriate masked bits
0000077E  6700 062E                870      BEQ     INVALID_OP              ;INVALID OP code
00000782  6600 0002                871      BNE     CHECK_OP_NOP            ;Check next OP code
00000786                           872  
00000786                           873  *Supported OP codes to check
00000786                           874  CHECK_OP_NOP:                       ;While this code is not in the supported docs, Nash covered it in class and expects it to be implemented
Line 875 ERROR: Undefined symbol
00000786  3039 004DBD16            875      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000078C  B07C 4E71                876      CMP.W  #$4E71,D0                ;Compare the appropriate bits
00000790  6600 000C                877      BNE    CHECK_OP_RTS             ;Check next OP code
00000794  4EB9 00000E9E            878      JSR    PRINT_OP_NOP             ;Print out OP code
0000079A  6000 009A                879      BRA    GROUP4_SUCCESS           ;Finish routine
0000079E                           880      
0000079E                           881  CHECK_OP_RTS:
Line 882 ERROR: Undefined symbol
0000079E  3039 004DBD16            882      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000007A4  B07C 4E75                883      CMP.W  #$4E75,D0                ;Mask exact bits for RTS    
000007A8  6600 000C                884      BNE    CHECK_OP_LEA             ;If it's equal check next code
000007AC  4EB9 00000E88            885      JSR    PRINT_OP_RTS             ;Print out OP code
000007B2  6000 0082                886      BRA    GROUP4_SUCCESS           ;Finish routine
000007B6                           887   
000007B6                           888  CHECK_OP_LEA:
Line 889 ERROR: Undefined symbol
000007B6  3039 004DBD16            889      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000007BC  0240 F1C0                890      ANDI.W #$F1C0,D0                ;Mask appropriate bits
000007C0  B07C 41C0                891      CMP.W  #$41C0,D0                ;Compare masked bits
000007C4  6600 000C                892      BNE    CHECK_OP_JSR             ;Check next OP code
000007C8  4EB9 00000EB4            893      JSR    PRINT_OP_LEA             ;Print out OP code
000007CE  6000 0066                894      BRA    GROUP4_SUCCESS           ;Finish routine
000007D2                           895   
000007D2                           896  CHECK_OP_JSR:
Line 897 ERROR: Undefined symbol
000007D2  3039 004DBD16            897      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000007D8  0240 FFC0                898      ANDI.W #$FFC0,D0                ;Mask appropriate bits
000007DC  B07C 4E80                899      CMP.W  #$4E80,D0                ;Compare masked bits
000007E0  6600 000C                900      BNE    CHECK_OP_NEG             ;Check next OP code
000007E4  4EB9 00000E72            901      JSR    PRINT_OP_JSR             ;Print out OP code
000007EA  6000 004A                902      BRA    GROUP4_SUCCESS           ;Finish routine
000007EE                           903      
000007EE                           904  CHECK_OP_NEG:
Line 905 ERROR: Undefined symbol
000007EE  3039 004DBD16            905      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000007F4  0240 FF00                906      ANDI.W #$FF00,D0                ;Mask appropriate bits
000007F8  B07C 4400                907      CMP.W  #$4400,D0                ;Compare masked bits
000007FC  6600 0010                908      BNE    CHECK_OP_MOVEM           ;Check next OP code
00000800  4EB8 0162                909      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Find size field
00000804  4EB9 00000ECA            910      JSR    PRINT_OP_NEG             ;Print out OP code
0000080A  6000 002A                911      BRA    GROUP4_SUCCESS           ;Finish routine
0000080E                           912      
0000080E                           913  CHECK_OP_MOVEM:
Line 914 ERROR: Undefined symbol
0000080E  3039 004DBD16            914      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000814  0240 FB80                915      ANDI.W #$FB80,D0                ;Mask appropriate bits
00000818  B07C 4880                916      CMP.W  #$4880,D0                ;Compare masked bits
0000081C  6600 0590                917      BNE    INVALID_OP               ;If no code is found, it is invalid
00000820  4EB9 00000EE0            918      JSR    PRINT_OP_MOVEM_W         ;Print out OP code
00000826  6000 000E                919      BRA    GROUP4_SUCCESS           ;Finish routine
0000082A                           920      
0000082A                           921  GROUP4_INVALID:
0000082A  4EB9 00000DAE            922      JSR INVALID_OP                  ;INVALID op code has been found, set IS_VALID to 0
00000830  4EF9 00000836            923      JMP GROUP4_SUCCESS 
00000836                           924  GROUP4_SUCCESS:
00000836  4CDF 0001                925      MOVEM.L (SP)+,D0                ;Restore saved registers
0000083A  4E75                     926      RTS                             ;Return to stack
0000083C                           927  * GROUP_5
0000083C                           928  ********************************************************************************
0000083C                           929  * Supported OP code:
0000083C                           930  * SUBQ: $5, 11-9 DATA, 8 %1, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
0000083C                           931  * Unsupported OP codes: ADDQ, Scc, DBcc
0000083C                           932  * Validation checking:
0000083C                           933  * Check against, ADDQ, Scc, DBcc
0000083C                           934  ********************************************************************************
0000083C                           935  C_GROUP_5:
0000083C  48E7 8000                936      MOVEM.L D0,-(SP)                ;Save registers to stack
00000840                           937  *Unsupported OP codes
00000840                           938  CHECK_OP_DBcc:                      ;These are ordered first due to checking bits 7-6
Line 939 ERROR: Undefined symbol
00000840  3039 004DBD16            939      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000846  0240 F0C8                940      ANDI.W #$F0C8,D0                ;Mask appropriate bits
0000084A  B07C 50C8                941      CMP.W  #$50C8,D0                ;Compare appropriate masked bits
0000084E  6700 0052                942      BEQ    GROUP5_INVALID           ;INVALID op code found
00000852  6600 0002                943      BNE    CHECK_OP_Scc             ;Check next OP code
00000856                           944  
00000856                           945  CHECK_OP_Scc:
Line 946 ERROR: Undefined symbol
00000856  3039 004DBD16            946      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000085C  0240 F0C0                947      ANDI.W #$F0C0,D0                ;Mask appropriate bits
00000860  B07C 50C0                948      CMP.W  #$50C0,D0                ;Compare appropriate masked bits
00000864  6700 003C                949      BEQ     GROUP5_INVALID          ;INVALID OP code found
00000868  6600 0002                950      BNE     CHECK_OP_ADDQ           ;Check next OP code
0000086C                           951  
0000086C                           952  CHECK_OP_ADDQ:
Line 953 ERROR: Undefined symbol
0000086C  3039 004DBD16            953      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000872  0240 F100                954      ANDI.W #$F100,D0                ;Mask appropriate bits
00000876  B07C 5000                955      CMP.W  #$5000,D0                ;Compare appropriate masked bits
0000087A  6700 0026                956      BEQ    GROUP5_INVALID           ;INVALID OP code found
0000087E  6600 0002                957      BNE    CHECK_OP_SUBQ            ;Check next OP code
00000882                           958  
00000882                           959  *Supported OP code   
00000882                           960  CHECK_OP_SUBQ     
Line 961 ERROR: Undefined symbol
00000882  3039 004DBD16            961      MOVE.W  CUR_OP_CODE,D0          ;Actual check for SUBQ
00000888  0240 F100                962      ANDI.W #$F100,D0                ;Bitmask check for SUBQ
0000088C  B07C 5100                963      CMP.W  #$5100,D0                ;Compare the proper value
00000890  6600 0010                964      BNE    GROUP5_INVALID           ;Else the operand is invalid
00000894  4EB8 0162                965      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Find size bit to print
00000898  4EB9 00000F00            966      JSR    PRINT_OP_SUBQ            ;If equal print it out
0000089E  6000 0008                967      BRA    GROUP5_SUCCESS           ;Finish routine
000008A2                           968      
000008A2                           969  GROUP5_INVALID: 
000008A2  4EB9 00000DAE            970      JSR INVALID_OP                  ;INVALID OP has been found, set IS_VALID to 0
000008A8                           971  GROUP5_SUCCESS:
000008A8  4CDF 0001                972      MOVEM.L (SP)+,D0                ;Restore registers from stack
000008AC  4E75                     973      RTS                             ;Return to stack
000008AE                           974      
000008AE                           975  * GROUP_6
000008AE                           976  ********************************************************************************
000008AE                           977  * Supported OP codes
000008AE                           978  * BRA: $60, 7-0 8-Bit Displacement
000008AE                           979  * Bcc: $6, 11-8 Condition, 7-0 8-Bit Displacement
000008AE                           980  *   Branch: <Condition>   
000008AE                           981  *   BCS: %0101          
000008AE                           982  *   BGE: %1100      
000008AE                           983  *   BLT: %1101  
000008AE                           984  *   BVC: %1000
000008AE                           985  *   
000008AE                           986  *   MOVE.W #%0110010100000000   ;BCS
000008AE                           987  *   MOVE.W #%0110110001010101   ;BGE
000008AE                           988  *   MVE.W #%0110110110101010    ;BLT
000008AE                           989  *   MOVE.W #%0110100001010101   ;BVC
000008AE                           990  * Unsupported OP code: BSR
000008AE                           991  ********************************************************************************
000008AE                           992  C_GROUP_6:
000008AE  48E7 8000                993      MOVEM.L D0,-(SP)            ;Save register to stack
000008B2                           994  *Unsupported OP code
000008B2                           995  CHECK_OP_BSR:
Line 996 ERROR: Undefined symbol
000008B2  3039 004DBD16            996      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set to D0
000008B8  0240 FF00                997      ANDI.W  #$FF00,D0           ;Mask appropriate bits
000008BC  B07C 6100                998      CMP.W   #$6100,D0           ;Compare masked bits
000008C0  6700 0092                999      BEQ     GROUP6_INVALID      ;INVALID OP code found
000008C4  6600 0002               1000      BNE     CHECK_OP_BRA        ;Check next OP code
000008C8                          1001      
000008C8                          1002  *Supported OP codes
000008C8                          1003  CHECK_OP_BRA:
Line 1004 ERROR: Undefined symbol
000008C8  3039 004DBD16           1004      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D0       
000008CE  0240 FF00               1005      ANDI.W  #$FF00,D0           ;Mask appropriate bits
000008D2  B07C 6000               1006      CMP.W   #$6000,D0           ;Compare masked bits
000008D6  6600 000C               1007      BNE     CHECK_OP_BCS        ;Check next OP code
000008DA  4EB9 00000F6E           1008      JSR     PRINT_OP_BRA        ;Print out OP code
000008E0  6000 0078               1009      BRA     GROUP6_SUCCESS      ;Finish routine
000008E4                          1010      
000008E4                          1011  CHECK_OP_BCS:
Line 1012 ERROR: Undefined symbol
000008E4  3039 004DBD16           1012      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000008EA  0240 FF00               1013      ANDI.W #$FF00,D0            ;Mask appropriate bits
000008EE  B07C 6500               1014      CMP.W  #$6500,D0            ;Compare masked bits
000008F2  6600 000C               1015      BNE    CHECK_OP_BGE         ;Check next OP code
000008F6  4EB9 00000F16           1016      JSR    PRINT_OP_BCS         ;Print out OP code
000008FC  6000 005C               1017      BRA    GROUP6_SUCCESS       ;Finish routine
00000900                          1018  
00000900                          1019      
00000900                          1020  CHECK_OP_BGE:
Line 1021 ERROR: Undefined symbol
00000900  3039 004DBD16           1021      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00000906  0240 FF00               1022      ANDI.W #$FF00,D0            ;Mask appropriate bits
0000090A  B07C 6C00               1023      CMP.W  #$6C00,D0            ;Compare masked bits
0000090E  6600 000C               1024      BNE    CHECK_OP_BLT         ;Check next OP code
00000912  4EB9 00000F2C           1025      JSR    PRINT_OP_BGE         ;Print out OP code
00000918  6000 0040               1026      BRA    GROUP6_SUCCESS       ;Finish routine
0000091C                          1027      
0000091C                          1028      
0000091C                          1029  CHECK_OP_BLT:
Line 1030 ERROR: Undefined symbol
0000091C  3039 004DBD16           1030      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00000922  0240 FF00               1031      ANDI.W #$FF00,D0            ;Mask appropriate bits
00000926  B07C 6D00               1032      CMP.W  #$6D00,D0            ;Compare masked bits
0000092A  6600 000C               1033      BNE    CHECK_OP_BVC         ;Check next OP code
0000092E  4EB9 00000F42           1034      JSR    PRINT_OP_BLT         ;Print out OP code
00000934  6000 0024               1035      BRA    GROUP6_SUCCESS       ;Finish routine
00000938                          1036      
00000938                          1037  CHECK_OP_BVC:
Line 1038 ERROR: Undefined symbol
00000938  3039 004DBD16           1038      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
0000093E  0240 FF00               1039      ANDI.W #$FF00,D0            ;Mask appropriate bits
00000942  B07C 6800               1040      CMP.W  #$6800,D0            ;Compare masked bits
00000946  6600 000C               1041      BNE    GROUP6_INVALID       ;Check next OP code
0000094A  4EB9 00000F58           1042      JSR    PRINT_OP_BVC         ;Print out OP code
00000950  6000 0008               1043      BRA    GROUP6_SUCCESS       ;Finish routine
00000954                          1044      
00000954                          1045  GROUP6_INVALID:
00000954  4EB9 00000DAE           1046      JSR    INVALID_OP           ;INVALID OP code found, set IS_VALID to 0
0000095A                          1047  GROUP6_SUCCESS:
0000095A  4CDF 0001               1048      MOVEM.L (SP)+,D0            ;Restore registers from stack
0000095E  4E75                    1049      RTS                         ;Return from stack
00000960                          1050      
00000960                          1051  *GROUP_7
00000960                          1052  ********************************************************************************
00000960                          1053  * Currently no OP codes here are supported. MOVEQ is the only code in this group
00000960                          1054  * Unsupported OP code: MOVEQ
00000960                          1055  ********************************************************************************
00000960                          1056  C_GROUP_7:
00000960  48E7 8000               1057      MOVEM.L D0,-(SP)            ;Save register to stack
00000964                          1058      
00000964                          1059  CHECK_OP_MOVEQ
Line 1060 ERROR: Undefined symbol
00000964  3039 004DBD16           1060      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set to D0
0000096A  0240 F100               1061      ANDI.W #$F100,D0            ;Mask appropriate bits
0000096E  B07C 7000               1062      CMP.W  #$7000,D0            ;Compare masked bits
00000972  6600 0006               1063      BNE    GROUP7_INVALID       ;INVALID OP code found
00000976  6700 0008               1064      BEQ    GROUP7_SUCCESS       ;Finish routine
0000097A                          1065      
0000097A                          1066  GROUP7_INVALID:
0000097A  4EB9 00000DAE           1067      JSR INVALID_OP              ;INVALID OP code found, set IS_VALID to 0
00000980                          1068  GROUP7_SUCCESS:    
00000980  4CDF 0001               1069      MOVEM.L (SP)+,D0            ;Restore registers from stack
00000984  4E75                    1070      RTS                         ;Return from stack
00000986                          1071  * GROUP_8
00000986                          1072  ********************************************************************************
00000986                          1073  * Supported OP code:
00000986                          1074  * DIVS: $8, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00000986                          1075  * OR: $80, 7-6 Size, 5-3 EA Mode, 2-0 EA Register
00000986                          1076  * Unsupported OP codes: DIVU, SBCD
00000986                          1077  ********************************************************************************
00000986                          1078  C_GROUP_8:
00000986  48E7 8000               1079      MOVEM.L D0,-(SP)
0000098A                          1080  *Unsupported OP codes
0000098A                          1081  CHECK_OP_DIVU:
Line 1082 ERROR: Undefined symbol
0000098A  3039 004DBD16           1082      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000990  0240 F1C0               1083      ANDI.W  #$F1C0,D0                   ;Mask appropriate bits
00000994  B07C 80C0               1084      CMP.W   #$80C0,D0                   ;Compare masked bits
00000998  6700 0046               1085      BEQ     GROUP8_INVALID              ;INVALID OP code found
0000099C  6600 0002               1086      BNE     CHECK_OP_SBCD               ;Check next OP code
000009A0                          1087  
000009A0                          1088  CHECK_OP_SBCD:
Line 1089 ERROR: Undefined symbol
000009A0  3039 004DBD16           1089      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000009A6  0240 F1F0               1090      ANDI.W  #$F1F0,D0                   ;Mask appropriate bits
000009AA  B07C 8100               1091      CMP.W   #$8100,D0                   ;Compare masked bits
000009AE  6700 0030               1092      BEQ     GROUP8_INVALID              ;INVALID OP code found
000009B2  6600 0002               1093      BNE     CHECK_OP_DIVS               ;Check next OP code
000009B6                          1094      
000009B6                          1095  *Supported OP codes
000009B6                          1096  CHECK_OP_DIVS:
Line 1097 ERROR: Undefined symbol
000009B6  3039 004DBD16           1097      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000009BC  0240 F1C0               1098      ANDI.W  #$F1C0,D0                   ;Mask appropriate bits
000009C0  B07C 81C0               1099      CMP.W   #$81C0,D0                   ;Compare masked bits
000009C4  6600 000C               1100      BNE     CHECK_OP_OR                 ;Check next OP code
000009C8  4EB9 00000F84           1101      JSR     PRINT_OP_DIVS               ;OP Code found
000009CE  6000 0016               1102      BRA     GROUP8_SUCCESS
000009D2                          1103  CHECK_OP_OR:                            ;At this point only remaining $8 code is OR
000009D2  4EB8 0162               1104      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Finding size bit to print out
000009D6  4EB9 00000F94           1105      JSR     PRINT_OP_OR                 ;Print out OR
000009DC  6000 0008               1106      BRA     GROUP8_SUCCESS              ;Finish routine
000009E0                          1107  GROUP8_INVALID:
000009E0  4EB9 00000DAE           1108       JSR     INVALID_OP                 ;INVALID OP code found, set IS_VALID to 0
000009E6                          1109  GROUP8_SUCCESS:
000009E6  4CDF 0001               1110       MOVEM.L (SP)+,D0                   ;Restore register from stack
000009EA  4E75                    1111       RTS                                ;Return to stack
000009EC                          1112       
000009EC                          1113  * GROUP_9                      
000009EC                          1114  ********************************************************************************
000009EC                          1115  * Supported OP code:
000009EC                          1116  * SUB: $9, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
000009EC                          1117  * Unsupported OP codes: SUBX, SUBA
000009EC                          1118  ********************************************************************************
000009EC                          1119  C_GROUP_9:
000009EC  48E7 C000               1120      MOVEM.L D0-D1,-(SP)                 ;Save the registers
000009F0                          1121  *Unsupported OP codes
000009F0                          1122  CHECK_OP_SUBA:                          ;Check SUBA first as it has static bits
Line 1123 ERROR: Undefined symbol
000009F0  3039 004DBD16           1123      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000009F6  0240 F0C0               1124      ANDI.W  #$F0C0,D0                   ;Mask appropriate bits
000009FA  B07C 90C0               1125      CMP.W   #$90C0,D0                   ;Compare masked bits
000009FE  6700 0046               1126      BEQ     GROUP9_INVALID              ;INVALID OP has been found
00000A02  6600 0002               1127      BNE     CHECK_OP_SUBX               ;Check next OP
00000A06                          1128  
00000A06                          1129  CHECK_OP_SUBX:
Line 1130 ERROR: Undefined symbol
00000A06  3039 004DBD16           1130      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000A0C  0240 F130               1131      ANDI.W  #$F130,D0                   ;Mask appropriate bits
00000A10  B07C 9100               1132      CMP.W   #$9100,D0                   ;Compare masked bits
00000A14  6000 0002               1133      BRA     BIT_CHECK_SUBX              ;Checking if this code is SUBX through bit shifts
00000A18                          1134      
00000A18                          1135  BIT_CHECK_SUBX:    
Line 1136 ERROR: Undefined symbol
00000A18  3039 004DBD16           1136      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000A1E  323C 0007               1137      MOVE.W  #7,D1                       ;Prepare a shift of 7 bits into D1
00000A22  E368                    1138      LSL.W   D1,D0                       ;Shift left 7 bits truncate 15-9 bits
00000A24  E268                    1139      LSR.W   D1,D0                       ;Reposition D0
00000A26  E848                    1140      LSR.W   #4,D0                       ;Truncate 4 right most bits to
00000A28  0240 FF18               1141      ANDI.W  #$FF18,D0                   ;Compare remaining static bits
00000A2C  B07C 0018               1142      CMP.W   #$0018,D0                   ;If equal to this value it's SUBX
00000A30  6700 0014               1143      BEQ     GROUP9_INVALID              ;INVALID OP code found
00000A34  6600 0002               1144      BNE     CHECK_OP_SUB                ;Not can only be SUB here
00000A38                          1145      
00000A38                          1146  *Supported OP code 
00000A38                          1147  CHECK_OP_SUB:                           ;At this point only remaining $9 is SUB
00000A38  4EB8 0162               1148      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find the size bit to print out
00000A3C  4EB9 00000FAA           1149      JSR     PRINT_OP_SUB                ;Print out SUB
00000A42  6000 0008               1150      BRA     GROUP9_SUCCESS              ;Finish routine
00000A46                          1151      
00000A46                          1152  GROUP9_INVALID:
00000A46  4EB9 00000DAE           1153       JSR     INVALID_OP                 ;INVALID OP code found, set IS_VALID to 0
00000A4C                          1154  GROUP9_SUCCESS: 
00000A4C  4CDF 0003               1155      MOVEM.L (SP)+,D0-D1                 ;Restore registers
00000A50  4E75                    1156      RTS                                 ;Return to stack
00000A52                          1157  
00000A52                          1158  *GROUP_A
00000A52                          1159  ********************************************************************************
00000A52                          1160  * Currently no OP codes here are supported. There are no current OP codes here.
00000A52                          1161  ********************************************************************************
00000A52                          1162  C_GROUP_A:
00000A52  4EB9 00000DAE           1163      JSR INVALID_OP                      ;INVALID OP code found, set IS_VALID to 0
00000A58  4E75                    1164      RTS                                 ;Return to stack
00000A5A                          1165      
00000A5A                          1166  * GROUP_B                     
00000A5A                          1167  ********************************************************************************
00000A5A                          1168  * Supported OP codes:
00000A5A                          1169  * EOR: $B, 11-9 Reg, 8 %1, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00000A5A                          1170  * CMP: $B, 11-9 Reg, 8 %0, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00000A5A                          1171  * The specific bit difference is listed 
00000A5A                          1172  * Unsupported OP codes: CMPM, CMPA
00000A5A                          1173  ********************************************************************************
00000A5A                          1174  C_GROUP_B:
00000A5A  48E7 8000               1175      MOVEM.L D0,-(SP)                    ;Save current registers to stack
00000A5E                          1176  *Unsupported OP codes    
00000A5E                          1177  CHECK_OP_CMPM
Line 1178 ERROR: Undefined symbol
00000A5E  3039 004DBD16           1178      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000A64  0240 F138               1179      ANDI.W  #$F138,D0                   ;Mask appropriate bits
00000A68  B07C B108               1180      CMP.W   #$B108,D0                   ;Compare masked bits
00000A6C  6700 005C               1181      BEQ     GROUPB_INVALID              ;INVALID OP found
00000A70  6600 0002               1182      BNE     CHECK_OP_CMPA               ;Check next OP
00000A74                          1183      
00000A74                          1184  CHECK_OP_CMPA:
Line 1185 ERROR: Undefined symbol
00000A74  3039 004DBD16           1185      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000A7A  0240 F0C0               1186      ANDI.W  #$F0C0,D0                   ;Mask appropriate bits
00000A7E  B07C B0C0               1187      CMP.W   #$B0C0,D0                   ;Compare masked bits
00000A82  6700 0046               1188      BEQ     GROUPB_INVALID              ;INVALID OP found
00000A86  6600 0002               1189      BNE     CHECK_OP_EOR                ;Check next OP
00000A8A                          1190  
00000A8A                          1191  *Supported OP codes    
00000A8A                          1192  CHECK_OP_EOR:
Line 1193 ERROR: Undefined symbol
00000A8A  3039 004DBD16           1193      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000A90  0240 F100               1194      ANDI.W  #$F100,D0                   ;Mask appropriate bits
00000A94  B07C B100               1195      CMP.W   #$B100,D0                   ;Compare masked bits
00000A98  6600 0010               1196      BNE     CHECK_OP_CMP                ;Check next OP 
00000A9C  4EB8 0162               1197      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find size bit field to print out size
00000AA0  4EB9 00000FC0           1198      JSR     PRINT_OP_EOR                ;Print out OP code
00000AA6  6000 0028               1199      BRA     GROUPB_SUCCESS              ;Finish routine
00000AAA                          1200      
00000AAA                          1201  CHECK_OP_CMP:
Line 1202 ERROR: Undefined symbol
00000AAA  3039 004DBD16           1202      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000AB0  0240 F100               1203      ANDI.W  #$F100,D0                   ;Mask appropriate bits
00000AB4  B07C B000               1204      CMP.W   #$B000,D0                   ;Compare masked bits
00000AB8  6600 0010               1205      BNE     GROUPB_INVALID              ;INVALID OP code found
00000ABC  4EB8 0162               1206      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find size bit field to print out size
00000AC0  4EB9 00000FD6           1207      JSR     PRINT_OP_CMP                ;Print out OP code
00000AC6  6000 0008               1208      BRA     GROUPB_SUCCESS              ;Finish routine
00000ACA                          1209      
00000ACA                          1210  GROUPB_INVALID:
00000ACA  4EB9 00000DAE           1211      JSR     INVALID_OP                  ;INVALID OP has been found, set IS_VALID to 0
00000AD0                          1212  GROUPB_SUCCESS:
00000AD0  4CDF 0001               1213      MOVEM.L (SP)+,D0                    ;Restore registers from stack
00000AD4  4E75                    1214      RTS                                 ;Return to stack
00000AD6                          1215  * GROUP_C                     
00000AD6                          1216  ********************************************************************************
00000AD6                          1217  * Supported OP code:
00000AD6                          1218  * MULS: $C, 11-8 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00000AD6                          1219  * Note: EXG OP mode has to be 01000, 01001, 10001, as such can never be 11 for
00000AD6                          1220  * bits 7-6
00000AD6                          1221  * Unsupported OP codes: MULU, ABCD, EXG, AND
00000AD6                          1222  ********************************************************************************
00000AD6                          1223  C_GROUP_C:
00000AD6                          1224  *Unsupported OP codes
00000AD6  48E7 C000               1225      MOVEM.L D0-D1,-(SP)
00000ADA                          1226      
00000ADA                          1227  CHECK_OP_MULU:
Line 1228 ERROR: Undefined symbol
00000ADA  3039 004DBD16           1228      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00000AE0  0240 F1C0               1229      ANDI.W  #$F1C0,D0
00000AE4  B07C C0C0               1230      CMP.W   #$C0C0,D0
00000AE8  6700 008C               1231      BEQ     GROUPC_INVALID
00000AEC  6600 0002               1232      BNE     CHECK_OP_ABCD
00000AF0                          1233   
00000AF0                          1234  CHECK_OP_ABCD:
Line 1235 ERROR: Undefined symbol
00000AF0  3039 004DBD16           1235      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00000AF6  0240 F1F0               1236      ANDI.W  #$F1F0,D0
00000AFA  B07C C100               1237      CMP.W   #$C100,D0
00000AFE  6700 0076               1238      BEQ     GROUPC_INVALID
00000B02  6600 0002               1239      BNE     CHECK_OP_EXG
00000B06                          1240   
00000B06                          1241  CHECK_OP_EXG:
Line 1242 ERROR: Undefined symbol
00000B06  3039 004DBD16           1242      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00000B0C  0240 F130               1243      ANDI.W  #$F130,D0
00000B10  B07C C100               1244      CMP.W   #$C100,D0
00000B14  6700 0006               1245      BEQ     BIT_CHECK_EXG
00000B18  6600 0046               1246      BNE     CHECK_OP_AND
00000B1C                          1247                          
00000B1C                          1248  BIT_CHECK_EXG:                 ;Checks the OP mode bits 7-6 which cannot be 11 for EXG
Line 1249 ERROR: Undefined symbol
00000B1C  3039 004DBD16           1249      MOVE.W  CUR_OP_CODE,D0
00000B22  323C 0008               1250      MOVE.W  #8,D1
00000B26  E368                    1251      LSL.W   D1,D0
00000B28  E268                    1252      LSR.W   D1,D0
00000B2A  EC48                    1253      LSR.W   #6,D0
00000B2C  0240 FFF3               1254      ANDI.W  #$FFF3,D0
00000B30  B07C 0003               1255      CMP.W   #$0003,D0          ;This bit then equals MULS
00000B34  6700 000E               1256      BEQ     CHECK_OP_MULS
00000B38  B07C 0000               1257      CMP.W   #$0000,D0          ;Second comparison to check if OP mode bit is valid
00000B3C  6700 0022               1258      BEQ     CHECK_OP_AND       ;If it's 0 it could be OP_AND
00000B40  6600 0034               1259      BNE     GROUPC_INVALID         ;Otherwise it's EXG (01,10 op bits)
00000B44                          1260  *Supported OP code
00000B44                          1261  CHECK_OP_MULS:
Line 1262 ERROR: Undefined symbol
00000B44  3039 004DBD16           1262      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00000B4A  0240 F1C0               1263      ANDI.W #$F1C0,D0
00000B4E  B07C C1C0               1264      CMP.W  #$C1C0,D0
00000B52  6600 000C               1265      BNE    CHECK_OP_AND          ; OP_AND is completely dynamic outside of first nibble
00000B56  4EB9 00000FEC           1266      JSR    PRINT_OP_MULS
00000B5C  6000 001E               1267      BRA    GROUPC_SUCCESS
00000B60                          1268  *Odd completely dynamic unsupported OP code    
00000B60                          1269  CHECK_OP_AND:                 ;This would be the only possible OP code left after CHECK_OP_MULS
Line 1270 ERROR: Undefined symbol
00000B60  3039 004DBD16           1270      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00000B66  0240 F000               1271      ANDI.W  #$F000,D0
00000B6A  B07C C000               1272      CMP.W   #$C000,D0
00000B6E  6700 0006               1273      BEQ     GROUPC_INVALID
00000B72  6000 0002               1274      BRA    GROUPC_INVALID    
00000B76                          1275  GROUPC_INVALID:
00000B76  4EB9 00000DAE           1276      JSR     INVALID_OP
00000B7C                          1277  GROUPC_SUCCESS:
00000B7C  4CDF 0003               1278      MOVEM.L (SP)+,D0-D1
00000B80  4E75                    1279      RTS
00000B82                          1280      
00000B82                          1281  * GROUP_D                     
00000B82                          1282  ********************************************************************************
00000B82                          1283  * Supported OP codes:
00000B82                          1284  * ADD: $D, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00000B82                          1285  * ADDA: $D, 11- 9 Reg, 8-6 OPMODE, 7-6 %11, 5-3 EA Mode, 2-0 EA Reg
00000B82                          1286  * The specific bit difference is listed out in the OPMODE field.
00000B82                          1287  * Unsupported: ADDX
00000B82                          1288  ********************************************************************************
00000B82                          1289  C_GROUP_D:
00000B82  48E7 8000               1290      MOVEM.L D0,-(SP)                ;Save registers to stack
00000B86                          1291  *Unsupported OP code
00000B86                          1292  CHECK_OP_ADDX:
Line 1293 ERROR: Undefined symbol
00000B86  3039 004DBD16           1293      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000B8C  0240 F130               1294      ANDI.W #$F130,D0                ;Mask appropriate bits
00000B90  B07C D100               1295      CMP.W  #$D100,D0                ;Compare masked bits
00000B94  6700 0034               1296      BEQ    GROUPD_INVALID           ;INVALID OP code found
00000B98  6600 0002               1297      BNE    CHECK_OP_ADDA            ;Check next OP code
00000B9C                          1298  
00000B9C                          1299  *Supported OP code
00000B9C                          1300  CHECK_OP_ADDA:
Line 1301 ERROR: Undefined symbol
00000B9C  3039 004DBD16           1301      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000BA2  0240 F0C0               1302      ANDI.W #$F0C0,D0                ;Mask applicable bits
00000BA6  B07C D0C0               1303      CMP.W  #$D0C0,D0                ;Compare masked bits
00000BAA  6600 0010               1304      BNE    CHECK_OP_ADD             ;Check next OP code
00000BAE  4EB8 01A6               1305      JSR    FIND_1_BIT_SIZE_8        ;Size bit to print
00000BB2  4EB9 00001012           1306      JSR    PRINT_OP_ADDA            ;Print out OP code
00000BB8  6000 0016               1307      BRA    GROUPD_SUCCESS           ;Finish routine
00000BBC                          1308  *Unsupported OP code
00000BBC                          1309  CHECK_OP_ADD:
00000BBC  4EB8 0162               1310      JSR FIND_2_BIT_SIZE_7_TO_6
00000BC0  4EB9 00000FFC           1311      JSR PRINT_OP_ADD                ;Only remaining OP in $D is ADD
00000BC6  6000 0008               1312      BRA GROUPD_SUCCESS
00000BCA                          1313      
00000BCA                          1314  GROUPD_INVALID:
00000BCA  4EB9 00000DAE           1315      JSR INVALID_OP
00000BD0                          1316  GROUPD_SUCCESS:
00000BD0  4CDF 0001               1317      MOVEM.L (SP)+,D0                ;Restore registers from stack
00000BD4  4E75                    1318      RTS                             ;Return to stack
00000BD6                          1319      
00000BD6                          1320  * GROUP_E                     
00000BD6                          1321  ********************************************************************************
00000BD6                          1322  * Supported:
00000BD6                          1323  * LSR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00000BD6                          1324  * LSL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00000BD6                          1325  * ASR: $E, $0, 8 %0, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00000BD6                          1326  * ASL: $E, $0, 8 %1, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00000BD6                          1327  * ROR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00000BD6                          1328  * ROL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00000BD6                          1329  * Count/Reg for LSR/LSL refers to shift count, where 0 = shift count of 8, 1-7 
00000BD6                          1330  * refers to the respective value when i/r = 0. If i/r = 1, data register in the 
00000BD6                          1331  * Count/Reg field specifies the shift count.  
00000BD6                          1332  * For directional bit at 8, R = 0, L = 1
00000BD6                          1333  * Count/Reg for ROR/ROL specifies rotate count instead of shift count.
00000BD6                          1334  *
00000BD6                          1335  * Split into ROT and NO_ROT groups first to make identifying easier.
00000BD6                          1336  * Unsupported: ROXL, ROXR
00000BD6                          1337  ********************************************************************************
00000BD6                          1338  C_GROUP_E:
00000BD6  48E7 8000               1339      MOVEM.L D0,-(SP)
00000BDA                          1340  *Unsupported OP codes
00000BDA                          1341  CHECK_OP_ROXR_NO_ROT:
Line 1342 ERROR: Undefined symbol
00000BDA  3039 004DBD16           1342      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000BE0  0240 FFC0               1343      ANDI.W #$FFC0,D0
00000BE4  B07C E4C0               1344      CMP.W  #$E4C0,D0
00000BE8  6700 01B0               1345      BEQ    GROUPE_INVALID
00000BEC  6600 0002               1346      BNE    CHECK_OP_ROXL_NO_ROT
00000BF0                          1347  
00000BF0                          1348  CHECK_OP_ROXL_NO_ROT:
Line 1349 ERROR: Undefined symbol
00000BF0  3039 004DBD16           1349      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000BF6  0240 FFC0               1350      ANDI.W #$FFC0,D0
00000BFA  B07C E5C0               1351      CMP.W  #$E5C0,D0
00000BFE  6700 019A               1352      BEQ    GROUPE_INVALID
00000C02  6600 0002               1353      BNE    CHECK_OP_ROR_NO_ROT
00000C06                          1354  
00000C06                          1355  *Supported OP codes
00000C06                          1356  CHECK_OP_ROR_NO_ROT:
Line 1357 ERROR: Undefined symbol
00000C06  3039 004DBD16           1357      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000C0C  0240 FFC0               1358      ANDI.W #$FFC0,D0
00000C10  B07C E6C0               1359      CMP.W  #$E6C0,D0
00000C14  6600 000C               1360      BNE    CHECK_OP_ROL_NO_ROT
00000C18  4EB9 00001096           1361      JSR    PRINT_OP_ROR
00000C1E  6000 0180               1362      BRA    GROUPE_SUCCESS
00000C22                          1363      
00000C22                          1364  CHECK_OP_ROL_NO_ROT:
Line 1365 ERROR: Undefined symbol
00000C22  3039 004DBD16           1365      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000C28  0240 FFC0               1366      ANDI.W #$FFC0,D0
00000C2C  B07C E7C0               1367      CMP.W  #$E7C0,D0
00000C30  6600 000C               1368      BNE    CHECK_OP_LSR_NO_ROT
00000C34  4EB9 00001080           1369      JSR    PRINT_OP_ROL
00000C3A  6000 0164               1370      BRA    GROUPE_SUCCESS
00000C3E                          1371   
00000C3E                          1372  CHECK_OP_LSR_NO_ROT:
Line 1373 ERROR: Undefined symbol
00000C3E  3039 004DBD16           1373      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000C44  0240 FFC0               1374      ANDI.W #$FFC0,D0
00000C48  B07C E2C0               1375      CMP.W  #$E2C0,D0
00000C4C  6600 000C               1376      BNE    CHECK_OP_LSL_NO_ROT
00000C50  4EB9 0000103E           1377      JSR    PRINT_OP_LSR
00000C56  6000 0148               1378      BRA    GROUPE_SUCCESS
00000C5A                          1379  
00000C5A                          1380  CHECK_OP_LSL_NO_ROT:
Line 1381 ERROR: Undefined symbol
00000C5A  3039 004DBD16           1381      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000C60  0240 FFC0               1382      ANDI.W #$FFC0,D0
00000C64  B07C E3C0               1383      CMP.W  #$E3C0,D0
00000C68  6600 000C               1384      BNE    CHECK_OP_ASR_NO_ROT
00000C6C  4EB9 00001028           1385      JSR    PRINT_OP_LSL
00000C72  6000 012C               1386      BRA    GROUPE_SUCCESS
00000C76                          1387  
00000C76                          1388  CHECK_OP_ASR_NO_ROT:
Line 1389 ERROR: Undefined symbol
00000C76  3039 004DBD16           1389      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000C7C  0240 FFC0               1390      ANDI.W #$FFC0,D0
00000C80  B07C E0C0               1391      CMP.W  #$E0C0,D0
00000C84  6600 000C               1392      BNE    CHECK_OP_ASL_NO_ROT
00000C88  4EB9 00001054           1393      JSR    PRINT_OP_ASR
00000C8E  6000 0110               1394      BRA    GROUPE_SUCCESS
00000C92                          1395              
00000C92                          1396  CHECK_OP_ASL_NO_ROT:
Line 1397 ERROR: Undefined symbol
00000C92  3039 004DBD16           1397      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000C98  0240 FFC0               1398      ANDI.W #$FFC0,D0
00000C9C  B07C E1C0               1399      CMP.W  #$E1C0,D0
00000CA0  6600 000C               1400      BNE    CHECK_OP_ROXR
00000CA4  4EB9 0000106A           1401      JSR    PRINT_OP_ASL
00000CAA  6000 00F4               1402      BRA    GROUPE_SUCCESS
00000CAE                          1403  
00000CAE                          1404  *Unsupported OP codes
00000CAE                          1405  CHECK_OP_ROXR:
Line 1406 ERROR: Undefined symbol
00000CAE  3039 004DBD16           1406      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000CB4  0240 F118               1407      ANDI.W #$F118,D0
00000CB8  B07C E010               1408      CMP.W  #$E010,D0
00000CBC  6700 00DC               1409      BEQ    GROUPE_INVALID
00000CC0  6600 0002               1410      BNE    CHECK_OP_ROXL
00000CC4                          1411      
00000CC4                          1412  CHECK_OP_ROXL:
Line 1413 ERROR: Undefined symbol
00000CC4  3039 004DBD16           1413      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000CCA  0240 F118               1414      ANDI.W #$F118,D0
00000CCE  B07C E110               1415      CMP.W  #$E110,D0
00000CD2  6700 00C6               1416      BEQ    GROUPE_INVALID
00000CD6  6600 0002               1417      BNE    CHECK_OP_ROR
00000CDA                          1418      
00000CDA                          1419  *Supported OP codes
00000CDA                          1420  CHECK_OP_ROR:
Line 1421 ERROR: Undefined symbol
00000CDA  3039 004DBD16           1421      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000CE0  0240 F118               1422      ANDI.W #$F118,D0
00000CE4  B07C E018               1423      CMP.W  #$E018,D0
00000CE8  6600 0010               1424      BNE    CHECK_OP_ROL
00000CEC  4EB8 0162               1425      JSR    FIND_2_BIT_SIZE_7_TO_6     
00000CF0  4EB9 00001096           1426      JSR    PRINT_OP_ROR
00000CF6  6000 00A8               1427      BRA    GROUPE_SUCCESS
00000CFA                          1428  
00000CFA                          1429  CHECK_OP_ROL:
Line 1430 ERROR: Undefined symbol
00000CFA  3039 004DBD16           1430      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000D00  0240 F118               1431      ANDI.W #$F118,D0
00000D04  B07C E118               1432      CMP.W  #$E118,D0
00000D08  6600 0010               1433      BNE    CHECK_OP_LSR
00000D0C  4EB8 0162               1434      JSR    FIND_2_BIT_SIZE_7_TO_6     
00000D10  4EB9 00001080           1435      JSR    PRINT_OP_ROL
00000D16  6000 0088               1436      BRA    GROUPE_SUCCESS
00000D1A                          1437      
00000D1A                          1438  CHECK_OP_LSR:
Line 1439 ERROR: Undefined symbol
00000D1A  3039 004DBD16           1439      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000D20  0240 F118               1440      ANDI.W #$F118,D0
00000D24  B07C E008               1441      CMP.W  #$E008,D0
00000D28  6600 0010               1442      BNE    CHECK_OP_LSL
00000D2C  4EB8 0162               1443      JSR    FIND_2_BIT_SIZE_7_TO_6     
00000D30  4EB9 0000103E           1444      JSR    PRINT_OP_LSR
00000D36  6000 0068               1445      BRA    GROUPE_SUCCESS
00000D3A                          1446  
00000D3A                          1447  CHECK_OP_LSL:
Line 1448 ERROR: Undefined symbol
00000D3A  3039 004DBD16           1448      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000D40  0240 F118               1449      ANDI.W #$F118,D0
00000D44  B07C E108               1450      CMP.W  #$E108,D0
00000D48  6600 0010               1451      BNE    CHECK_OP_ASR
00000D4C  4EB8 0162               1452      JSR    FIND_2_BIT_SIZE_7_TO_6     
00000D50  4EB9 00001028           1453      JSR    PRINT_OP_LSL
00000D56  6000 0048               1454      BRA    GROUPE_SUCCESS
00000D5A                          1455  
00000D5A                          1456  CHECK_OP_ASR:
Line 1457 ERROR: Undefined symbol
00000D5A  3039 004DBD16           1457      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000D60  0240 F118               1458      ANDI.W #$F118,D0
00000D64  B07C E000               1459      CMP.W  #$E000,D0
00000D68  6600 0010               1460      BNE    CHECK_OP_ASL
00000D6C  4EB8 0162               1461      JSR    FIND_2_BIT_SIZE_7_TO_6     
00000D70  4EB9 00001054           1462      JSR    PRINT_OP_ASR
00000D76  6000 0028               1463      BRA    GROUPE_SUCCESS
00000D7A                          1464  
00000D7A                          1465  CHECK_OP_ASL:
Line 1466 ERROR: Undefined symbol
00000D7A  3039 004DBD16           1466      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000D80  0240 F118               1467      ANDI.W #$F118,D0
00000D84  B07C E100               1468      CMP.W  #$E100,D0
00000D88  6600 0010               1469      BNE    GROUPE_INVALID      ;Last possible OP code
00000D8C  4EB8 0162               1470      JSR    FIND_2_BIT_SIZE_7_TO_6     
00000D90  4EB9 0000106A           1471      JSR    PRINT_OP_ASL
00000D96  6000 0008               1472      BRA    GROUPE_SUCCESS
00000D9A                          1473  
00000D9A                          1474  GROUPE_INVALID:
00000D9A  4EB9 00000DAE           1475      JSR     INVALID_OP
00000DA0                          1476  GROUPE_SUCCESS:
00000DA0  4CDF 0001               1477      MOVEM.L (SP)+,D0
00000DA4  4E75                    1478      RTS
00000DA6                          1479  * GROUP_F
00000DA6                          1480  ********************************************************************************
00000DA6                          1481  * Currently no OP codes here are supported. There are no OP codes here
00000DA6                          1482  ********************************************************************************
00000DA6                          1483  C_GROUP_F:
00000DA6  4EB9 00000DAE           1484      JSR INVALID_OP
00000DAC  4E75                    1485      RTS
00000DAE                          1486      
00000DAE                          1487  * INVALID_OP                     
00000DAE                          1488  ********************************************************************************
00000DAE                          1489  * Any value that is not covered in the above groups would be considered invalid. 
00000DAE                          1490  * The following values in the first nibble would also indicate that the 
00000DAE                          1491  * operand codes is already invalid: $7, $A, $F.
00000DAE                          1492  * For unsupported OP codes, display DATA $WXYZ   
00000DAE                          1493  * THIS WILL NEED TO BE CHANGED TO DISPLAY: 1000 DATA $WXYZ IN THE FUTURE
00000DAE                          1494  ********************************************************************************
00000DAE                          1495  INVALID_OP:  ; ONLY SETS IS_VALID TO 0
Line 1496 ERROR: Undefined symbol
00000DAE  13FC 0000 005455B8      1496      MOVE.B #0,IS_VALID
00000DB6  4E75                    1497      RTS
00000DB8                          1498  
00000DB8                          1499  ********************** PRINTING ROUTINES **************************************
00000DB8                          1500  * Description: These routines are to print the associated op codes, by placing
00000DB8                          1501  * them in the appropriate area to the buffer
00000DB8                          1502  *
00000DB8                          1503  * Registers used: A1 for loading, A6 for EA parsing.
00000DB8                          1504  *
00000DB8                          1505  * Precondition: The relevant opcode has been identified correctly.
00000DB8                          1506  *
00000DB8                          1507  * Postcondition: Prints out the associated opcode to the buffer.
00000DB8                          1508  
00000DB8                          1509  * THIS NEEDS TO BE RETOOLED TO PRINT TO BUFFER NOT TO CONSOLE
00000DB8                          1510  *******************************************************************************
00000DB8                          1511  
00000DB8                          1512  * Prints the loaded item into G_BUFFER
00000DB8                          1513  PRINT_TO_BUFFER:
Line 1514 ERROR: Undefined symbol
00000DB8  23FC 004DBD16 005455B8  1514      MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer
Line 1515 ERROR: Undefined symbol
00000DC2  4EB9 004DBD16           1515      JSR AddStrToBuffer
00000DC8  4E75                    1516      RTS
00000DCA                          1517      
00000DCA                          1518  ****************************** GROUP 0 **************************************** 
00000DCA                          1519  PRINT_OP_ORI:
Line 1520 ERROR: Undefined symbol
00000DCA  23FC 00001121 005455B8  1520      MOVE.L #P_OP_ORI, Arg_AddStrToBuffer_String
00000DD4  4EB8 0DB8               1521      JSR PRINT_TO_BUFFER
00000DD8  4EB9 000010DC           1522      JSR PRINT_OP_SIZE
00000DDE  4E75                    1523      RTS
00000DE0                          1524  PRINT_OP_CMPI:
Line 1525 ERROR: Undefined symbol
00000DE0  23FC 00001128 005455B8  1525      MOVE.L #P_OP_CMPI, Arg_AddStrToBuffer_String
00000DEA  4EB8 0DB8               1526      JSR PRINT_TO_BUFFER
00000DEE  4EB9 000010DC           1527      JSR PRINT_OP_SIZE
00000DF4  4E75                    1528      RTS
00000DF6                          1529  PRINT_OP_STATIC_BCLR:
Line 1530 ERROR: Undefined symbol
00000DF6  23FC 00001130 005455B8  1530      MOVE.L #P_OP_BCLR, Arg_AddStrToBuffer_String
00000E00  4EB8 0DB8               1531      JSR PRINT_TO_BUFFER
00000E04  4EB9 000010DC           1532      JSR PRINT_OP_SIZE
00000E0A  4E75                    1533      RTS
00000E0C                          1534      
00000E0C                          1535  PRINT_OP_DYNAMIC_BCLR:
Line 1536 ERROR: Undefined symbol
00000E0C  23FC 00001130 005455B8  1536      MOVE.L #P_OP_BCLR, Arg_AddStrToBuffer_String
00000E16  4EB8 0DB8               1537      JSR PRINT_TO_BUFFER
00000E1A  4EB9 000010DC           1538      JSR PRINT_OP_SIZE
00000E20  4E75                    1539      RTS
00000E22                          1540  ******************************* END OF GROUP 0 ********************************
00000E22                          1541  
00000E22                          1542  ****************************** GROUP 1 ****************************************    
00000E22                          1543  PRINT_OP_MOVEB:
Line 1544 ERROR: Undefined symbol
00000E22  23FC 00001138 005455B8  1544      MOVE.L #P_OP_MOVEB, Arg_AddStrToBuffer_String
00000E2C  4EB8 0DB8               1545      JSR PRINT_TO_BUFFER
00000E30  4E75                    1546      RTS
00000E32                          1547  ******************************* END OF GROUP 1 ********************************
00000E32                          1548      
00000E32                          1549  ****************************** GROUP 2 **************************************** 
00000E32                          1550  PRINT_OP_MOVEA_L:
Line 1551 ERROR: Undefined symbol
00000E32  23FC 00001143 005455B8  1551      MOVE.L #P_OP_MOVEA_L, Arg_AddStrToBuffer_String
00000E3C  4EB8 0DB8               1552      JSR PRINT_TO_BUFFER
00000E40  4E75                    1553      RTS
00000E42                          1554  PRINT_OP_MOVE_L:
Line 1555 ERROR: Undefined symbol
00000E42  23FC 0000114F 005455B8  1555      MOVE.L #P_OP_MOVE_L, Arg_AddStrToBuffer_String
00000E4C  4EB8 0DB8               1556      JSR PRINT_TO_BUFFER
00000E50  4E75                    1557      RTS
00000E52                          1558  ******************************* END OF GROUP 2 ********************************
00000E52                          1559      
00000E52                          1560  ****************************** GROUP 3 ****************************************    
00000E52                          1561  PRINT_OP_MOVEA_W:
Line 1562 ERROR: Undefined symbol
00000E52  23FC 0000115A 005455B8  1562      MOVE.L #P_OP_MOVEA_W, Arg_AddStrToBuffer_String
00000E5C  4EB8 0DB8               1563      JSR PRINT_TO_BUFFER
00000E60  4E75                    1564      RTS
00000E62                          1565  PRINT_OP_MOVE_W:
Line 1566 ERROR: Undefined symbol
00000E62  23FC 00001166 005455B8  1566      MOVE.L #P_OP_MOVE_W, Arg_AddStrToBuffer_String
00000E6C  4EB8 0DB8               1567      JSR PRINT_TO_BUFFER
00000E70  4E75                    1568      RTS
00000E72                          1569  ******************************* END OF GROUP 3 ********************************
00000E72                          1570  
00000E72                          1571  ****************************** GROUP 4 ****************************************
00000E72                          1572  PRINT_OP_JSR:
Line 1573 ERROR: Undefined symbol
00000E72  23FC 00001190 005455B8  1573      MOVE.L #P_OP_JSR, Arg_AddStrToBuffer_String
00000E7C  4EB8 0DB8               1574      JSR PRINT_TO_BUFFER
00000E80  4EB9 000010DC           1575      JSR PRINT_OP_SIZE
00000E86  4E75                    1576      RTS
00000E88                          1577  PRINT_OP_RTS:
Line 1578 ERROR: Undefined symbol
00000E88  23FC 0000119E 005455B8  1578      MOVE.L #P_OP_RTS, Arg_AddStrToBuffer_String
00000E92  4EB8 0DB8               1579      JSR PRINT_TO_BUFFER
00000E96  4EB9 000010DC           1580      JSR PRINT_OP_SIZE
00000E9C  4E75                    1581      RTS
00000E9E                          1582  PRINT_OP_NOP:
Line 1583 ERROR: Undefined symbol
00000E9E  23FC 00001197 005455B8  1583      MOVE.L #P_OP_NOP, Arg_AddStrToBuffer_String
00000EA8  4EB8 0DB8               1584      JSR PRINT_TO_BUFFER
00000EAC  4EB9 000010DC           1585      JSR PRINT_OP_SIZE
00000EB2  4E75                    1586      RTS
00000EB4                          1587  PRINT_OP_LEA:
Line 1588 ERROR: Undefined symbol
00000EB4  23FC 00001189 005455B8  1588      MOVE.L #P_OP_LEA, Arg_AddStrToBuffer_String
00000EBE  4EB8 0DB8               1589      JSR PRINT_TO_BUFFER
00000EC2  4EB9 000010DC           1590      JSR PRINT_OP_SIZE
00000EC8  4E75                    1591      RTS
00000ECA                          1592  PRINT_OP_NEG:
Line 1593 ERROR: Undefined symbol
00000ECA  23FC 000011A5 005455B8  1593      MOVE.L #P_OP_NEG, Arg_AddStrToBuffer_String
00000ED4  4EB8 0DB8               1594      JSR PRINT_TO_BUFFER
00000ED8  4EB9 000010DC           1595      JSR PRINT_OP_SIZE
00000EDE  4E75                    1596      RTS
00000EE0                          1597  PRINT_OP_MOVEM_W:
Line 1598 ERROR: Undefined symbol
00000EE0  23FC 00001171 005455B8  1598      MOVE.L #P_OP_MOVEM_W, Arg_AddStrToBuffer_String
00000EEA  4EB8 0DB8               1599      JSR PRINT_TO_BUFFER
00000EEE  4E75                    1600      RTS
00000EF0                          1601  PRINT_OP_MOVEM_L:
Line 1602 ERROR: Undefined symbol
00000EF0  23FC 0000117D 005455B8  1602      MOVE.L #P_OP_MOVEM_L, Arg_AddStrToBuffer_String
00000EFA  4EB8 0DB8               1603      JSR PRINT_TO_BUFFER
00000EFE  4E75                    1604      RTS
00000F00                          1605  ******************************* END OF GROUP 4 ********************************
00000F00                          1606      
00000F00                          1607  ****************************** GROUP 5 ****************************************
00000F00                          1608  PRINT_OP_SUBQ:
Line 1609 ERROR: Undefined symbol
00000F00  23FC 000011AC 005455B8  1609      MOVE.L #P_OP_SUBQ, Arg_AddStrToBuffer_String
00000F0A  4EB8 0DB8               1610      JSR PRINT_TO_BUFFER
00000F0E  4EB9 000010DC           1611      JSR PRINT_OP_SIZE
00000F14  4E75                    1612      RTS
00000F16                          1613  ******************************* END OF GROUP 5 ********************************
00000F16                          1614  
00000F16                          1615  ****************************** GROUP 6 ****************************************
00000F16                          1616  PRINT_OP_BCS:
Line 1617 ERROR: Undefined symbol
00000F16  23FC 000011BB 005455B8  1617      MOVE.L #P_OP_BCS, Arg_AddStrToBuffer_String
00000F20  4EB8 0DB8               1618      JSR PRINT_TO_BUFFER
00000F24  4EB9 000010DC           1619      JSR PRINT_OP_SIZE
00000F2A  4E75                    1620      RTS
00000F2C                          1621  PRINT_OP_BGE:
Line 1622 ERROR: Undefined symbol
00000F2C  23FC 000011C2 005455B8  1622      MOVE.L #P_OP_BGE, Arg_AddStrToBuffer_String
00000F36  4EB8 0DB8               1623      JSR PRINT_TO_BUFFER
00000F3A  4EB9 000010DC           1624      JSR PRINT_OP_SIZE
00000F40  4E75                    1625      RTS
00000F42                          1626  PRINT_OP_BLT:
Line 1627 ERROR: Undefined symbol
00000F42  23FC 000011C9 005455B8  1627      MOVE.L #P_OP_BLT, Arg_AddStrToBuffer_String
00000F4C  4EB8 0DB8               1628      JSR PRINT_TO_BUFFER
00000F50  4EB9 000010DC           1629      JSR PRINT_OP_SIZE
00000F56  4E75                    1630      RTS
00000F58                          1631  PRINT_OP_BVC:
Line 1632 ERROR: Undefined symbol
00000F58  23FC 000011D0 005455B8  1632      MOVE.L #P_OP_BVC, Arg_AddStrToBuffer_String
00000F62  4EB8 0DB8               1633      JSR PRINT_TO_BUFFER
00000F66  4EB9 000010DC           1634      JSR PRINT_OP_SIZE
00000F6C  4E75                    1635      RTS
00000F6E                          1636  PRINT_OP_BRA:
Line 1637 ERROR: Undefined symbol
00000F6E  23FC 000011B4 005455B8  1637      MOVE.L #P_OP_BRA, Arg_AddStrToBuffer_String
00000F78  4EB8 0DB8               1638      JSR PRINT_TO_BUFFER
00000F7C  4EB9 000010DC           1639      JSR PRINT_OP_SIZE
00000F82  4E75                    1640      RTS
00000F84                          1641  ******************************* END OF GROUP 6 ********************************
00000F84                          1642  
00000F84                          1643  ****************************** GROUP 7 ****************************************
00000F84                          1644  * No currently supported OP codes to print here.
00000F84                          1645  ******************************* END OF GROUP 7 ********************************
00000F84                          1646  
00000F84                          1647  ****************************** GROUP 8 ****************************************
00000F84                          1648  PRINT_OP_DIVS:
Line 1649 ERROR: Undefined symbol
00000F84  23FC 000011D7 005455B8  1649      MOVE.L #P_OP_DIVS, Arg_AddStrToBuffer_String
00000F8E  4EB8 0DB8               1650      JSR PRINT_TO_BUFFER
00000F92  4E75                    1651      RTS
00000F94                          1652  PRINT_OP_OR:
Line 1653 ERROR: Undefined symbol
00000F94  23FC 000011E2 005455B8  1653      MOVE.L #P_OP_OR, Arg_AddStrToBuffer_String
00000F9E  4EB8 0DB8               1654      JSR PRINT_TO_BUFFER
00000FA2  4EB9 000010DC           1655      JSR PRINT_OP_SIZE
00000FA8  4E75                    1656      RTS
00000FAA                          1657  ******************************* END OF GROUP 8 ********************************
00000FAA                          1658  
00000FAA                          1659  ****************************** GROUP 9 ****************************************
00000FAA                          1660  PRINT_OP_SUB:
Line 1661 ERROR: Undefined symbol
00000FAA  23FC 000011E8 005455B8  1661      MOVE.L #P_OP_SUB, Arg_AddStrToBuffer_String
00000FB4  4EB8 0DB8               1662      JSR PRINT_TO_BUFFER
00000FB8  4EB9 000010DC           1663      JSR PRINT_OP_SIZE
00000FBE  4E75                    1664      RTS
00000FC0                          1665  ******************************* END OF GROUP 9 ********************************
00000FC0                          1666  
00000FC0                          1667  ****************************** GROUP A ****************************************
00000FC0                          1668  * No currently supported OP codes to print here.
00000FC0                          1669  ******************************* END OF GROUP A ********************************
00000FC0                          1670  
00000FC0                          1671  ****************************** GROUP B ****************************************
00000FC0                          1672  PRINT_OP_EOR:
Line 1673 ERROR: Undefined symbol
00000FC0  23FC 000011EF 005455B8  1673      MOVE.L #P_OP_EOR, Arg_AddStrToBuffer_String
00000FCA  4EB8 0DB8               1674      JSR PRINT_TO_BUFFER
00000FCE  4EB9 000010DC           1675      JSR PRINT_OP_SIZE
00000FD4  4E75                    1676      RTS
00000FD6                          1677  PRINT_OP_CMP:
Line 1678 ERROR: Undefined symbol
00000FD6  23FC 000011F6 005455B8  1678      MOVE.L #P_OP_CMP, Arg_AddStrToBuffer_String
00000FE0  4EB8 0DB8               1679      JSR PRINT_TO_BUFFER
00000FE4  4EB9 000010DC           1680      JSR PRINT_OP_SIZE
00000FEA  4E75                    1681      RTS
00000FEC                          1682  ******************************* END OF GROUP B ********************************
00000FEC                          1683  
00000FEC                          1684  ****************************** GROUP C ****************************************
00000FEC                          1685  PRINT_OP_MULS:
Line 1686 ERROR: Undefined symbol
00000FEC  23FC 000011FD 005455B8  1686      MOVE.L #P_OP_MULS, Arg_AddStrToBuffer_String
00000FF6  4EB8 0DB8               1687      JSR PRINT_TO_BUFFER
00000FFA  4E75                    1688      RTS
00000FFC                          1689  ******************************* END OF GROUP C ********************************
00000FFC                          1690  
00000FFC                          1691  ****************************** GROUP D ****************************************
00000FFC                          1692  PRINT_OP_ADD:
Line 1693 ERROR: Undefined symbol
00000FFC  23FC 0000120F 005455B8  1693      MOVE.L #P_OP_ADD, Arg_AddStrToBuffer_String
00001006  4EB8 0DB8               1694      JSR PRINT_TO_BUFFER
0000100A  4EB9 000010DC           1695      JSR PRINT_OP_SIZE
00001010  4E75                    1696      RTS
00001012                          1697  PRINT_OP_ADDA:
Line 1698 ERROR: Undefined symbol
00001012  23FC 00001207 005455B8  1698      MOVE.L #P_OP_ADDA, Arg_AddStrToBuffer_String
0000101C  4EB8 0DB8               1699      JSR PRINT_TO_BUFFER
00001020  4EB9 000010F6           1700      JSR PRINT_OP_SIZE_ADDA
00001026  4E75                    1701      RTS
00001028                          1702  
00001028                          1703  ******************************* END OF GROUP D ********************************
00001028                          1704  
00001028                          1705  ****************************** GROUP E ****************************************
00001028                          1706  PRINT_OP_LSL:
Line 1707 ERROR: Undefined symbol
00001028  23FC 0000121D 005455B8  1707      MOVE.L #P_OP_LSL, Arg_AddStrToBuffer_String
00001032  4EB8 0DB8               1708      JSR PRINT_TO_BUFFER
00001036  4EB9 000010DC           1709      JSR PRINT_OP_SIZE
0000103C  4E75                    1710      RTS
0000103E                          1711  PRINT_OP_LSR:
Line 1712 ERROR: Undefined symbol
0000103E  23FC 00001216 005455B8  1712      MOVE.L #P_OP_LSR, Arg_AddStrToBuffer_String
00001048  4EB8 0DB8               1713      JSR PRINT_TO_BUFFER
0000104C  4EB9 000010DC           1714      JSR PRINT_OP_SIZE
00001052  4E75                    1715      RTS
00001054                          1716  PRINT_OP_ASR:
Line 1717 ERROR: Undefined symbol
00001054  23FC 00001224 005455B8  1717      MOVE.L #P_OP_ASR, Arg_AddStrToBuffer_String
0000105E  4EB8 0DB8               1718      JSR PRINT_TO_BUFFER
00001062  4EB9 000010DC           1719      JSR PRINT_OP_SIZE
00001068  4E75                    1720      RTS
0000106A                          1721  PRINT_OP_ASL:
Line 1722 ERROR: Undefined symbol
0000106A  23FC 0000122B 005455B8  1722      MOVE.L #P_OP_ASL, Arg_AddStrToBuffer_String
00001074  4EB8 0DB8               1723      JSR PRINT_TO_BUFFER
00001078  4EB9 000010DC           1724      JSR PRINT_OP_SIZE
0000107E  4E75                    1725      RTS
00001080                          1726  PRINT_OP_ROL:
Line 1727 ERROR: Undefined symbol
00001080  23FC 00001239 005455B8  1727      MOVE.L #P_OP_ROL, Arg_AddStrToBuffer_String
0000108A  4EB8 0DB8               1728      JSR PRINT_TO_BUFFER
0000108E  4EB9 000010DC           1729      JSR PRINT_OP_SIZE
00001094  4E75                    1730      RTS
00001096                          1731  PRINT_OP_ROR:
Line 1732 ERROR: Undefined symbol
00001096  23FC 00001232 005455B8  1732      MOVE.L #P_OP_ROR, Arg_AddStrToBuffer_String
000010A0  4EB8 0DB8               1733      JSR PRINT_TO_BUFFER
000010A4  4EB9 000010DC           1734      JSR PRINT_OP_SIZE
000010AA  4E75                    1735      RTS
000010AC                          1736  ******************************* END OF GROUP E ********************************
000010AC                          1737  
000010AC                          1738  ****************************** GROUP F ****************************************
000010AC                          1739  * No currently supported OP codes to print here.
000010AC                          1740  ******************************* END OF GROUP F ********************************
000010AC                          1741  
000010AC                          1742  ****************************** SIZE PRINTS ************************************
000010AC                          1743  PRINT_SIZE_BYTE:
Line 1744 ERROR: Undefined symbol
000010AC  23FC 00001115 005455B8  1744      MOVE.L #P_SIZE_B, Arg_AddStrToBuffer_String
000010B6  4EB8 0DB8               1745      JSR PRINT_TO_BUFFER
000010BA  4E75                    1746      RTS    
000010BC                          1747  
000010BC                          1748  PRINT_SIZE_WORD:
Line 1749 ERROR: Undefined symbol
000010BC  23FC 00001119 005455B8  1749      MOVE.L #P_SIZE_W, Arg_AddStrToBuffer_String
000010C6  4EB8 0DB8               1750      JSR PRINT_TO_BUFFER
000010CA  4E75                    1751      RTS
000010CC                          1752      
000010CC                          1753  PRINT_SIZE_LONG:
Line 1754 ERROR: Undefined symbol
000010CC  23FC 0000111D 005455B8  1754      MOVE.L #P_SIZE_L, Arg_AddStrToBuffer_String
000010D6  4EB8 0DB8               1755      JSR PRINT_TO_BUFFER
000010DA  4E75                    1756      RTS
000010DC                          1757  
000010DC                          1758  PRINT_OP_SIZE:                     ;Prints current OP code byte size if applicable
000010DC  0C38 0000 0000          1759      CMP.B  #%00,OP_SIZE         ;Checks for byte size
000010E2  67C8                    1760      BEQ    PRINT_SIZE_BYTE      ;Print .B to buffer
000010E4  0C38 0001 0000          1761      CMP.B  #%01,OP_SIZE         ;Check for word size
000010EA  67D0                    1762      BEQ    PRINT_SIZE_WORD      ;Print .W to buffer
000010EC  0C38 0002 0000          1763      CMP.B  #%10,OP_SIZE         ;Check for long size
000010F2  67D8                    1764      BEQ    PRINT_SIZE_LONG      ;Print .L to buffer
000010F4  4E75                    1765      RTS
000010F6                          1766      
000010F6                          1767  PRINT_OP_SIZE_ADDA:                  ;Special  print for ADDA
000010F6  0C38 0000 0000          1768      CMP.B #%0,OP_SIZE
000010FC  67BE                    1769      BEQ    PRINT_SIZE_WORD
000010FE  66CC                    1770      BNE    PRINT_SIZE_LONG
00001100                          1771      
00001100                          1772  ******************* END OF SIZE PRINTS ****************************************
00001100                          1773  
00001100                          1774  ******************* END OF PRINTING ROUTINES **********************************
00001100                          1775  
00001100                          1776  ******************* END OF JMP LABELS *****************************************
00001100                          1777  
00001100                          1778  ******************* DATA CONSTANT PRINTS **************************************
00001100                          1779  * Formatting is as follows: P_OP_<OPCODE>, where P = Print, OP = Operation,
00001100                          1780  * <OPCODE> is any valid operand
00001100                          1781  
00001100= 20 20 20 44 41 54 ...   1782  P_INVALID_OP    DC.B    '   DATA   $',0
0000110C= 46 6F 75 6E 64 20 ...   1783  OP_FOUND        DC.B    'Found OP',0 ; this should be taken out later
00001115= 2E 42 20 00             1784  P_SIZE_B        DC.B    '.B ',0
00001119= 2E 57 20 00             1785  P_SIZE_W        DC.B    '.W ',0
0000111D= 2E 4C 20 00             1786  P_SIZE_L        DC.B    '.L ',0
00001121= 20 20 20 4F 52 49 00    1787  P_OP_ORI        DC.B    '   ORI',0
00001128= 20 20 20 43 4D 50 ...   1788  P_OP_CMPI       DC.B    '   CMPI',0
00001130= 20 20 20 42 43 4C ...   1789  P_OP_BCLR       DC.B    '   BCLR',0
00001138= 20 20 20 4D 4F 56 ...   1790  P_OP_MOVEB      DC.B    '   MOVE.B ',0
00001143= 20 20 20 4D 4F 56 ...   1791  P_OP_MOVEA_L    DC.B    '   MOVEA.L ',0 
0000114F= 20 20 20 4D 4F 56 ...   1792  P_OP_MOVE_L     DC.B    '   MOVE.L ',0
0000115A= 20 20 20 4D 4F 56 ...   1793  P_OP_MOVEA_W    DC.B    '   MOVEA.W ',0
00001166= 20 20 20 4D 4F 56 ...   1794  P_OP_MOVE_W     DC.B    '   MOVE.W ',0
00001171= 20 20 20 4D 4F 56 ...   1795  P_OP_MOVEM_W    DC.B    '   MOVEM.W ',0
0000117D= 20 20 20 4D 4F 56 ...   1796  P_OP_MOVEM_L    DC.B    '   MOVEM.L ',0
00001189= 20 20 20 4C 45 41 00    1797  P_OP_LEA        DC.B    '   LEA',0
00001190= 20 20 20 4A 53 52 00    1798  P_OP_JSR        DC.B    '   JSR',0
00001197= 20 20 20 4E 4F 50 00    1799  P_OP_NOP        DC.B    '   NOP',0
0000119E= 20 20 20 52 54 53 00    1800  P_OP_RTS        DC.B    '   RTS',0
000011A5= 20 20 20 4E 45 47 00    1801  P_OP_NEG        DC.B    '   NEG',0
000011AC= 20 20 20 53 55 42 ...   1802  P_OP_SUBQ       DC.B    '   SUBQ',0
000011B4= 20 20 20 42 52 41 00    1803  P_OP_BRA        DC.B    '   BRA',0
000011BB= 20 20 20 42 43 53 00    1804  P_OP_BCS        DC.B    '   BCS',0
000011C2= 20 20 20 42 47 45 00    1805  P_OP_BGE        DC.B    '   BGE',0
000011C9= 20 20 20 42 4C 54 00    1806  P_OP_BLT        DC.B    '   BLT',0
000011D0= 20 20 20 42 56 43 00    1807  P_OP_BVC        DC.B    '   BVC',0
000011D7= 20 20 20 44 49 56 ...   1808  P_OP_DIVS       DC.B    '   DIVS.W ',0
000011E2= 20 20 20 4F 52 00       1809  P_OP_OR         DC.B    '   OR',0
000011E8= 20 20 20 53 55 42 00    1810  P_OP_SUB        DC.B    '   SUB',0
000011EF= 20 20 20 45 4F 52 00    1811  P_OP_EOR        DC.B    '   EOR',0
000011F6= 20 20 20 43 4D 50 00    1812  P_OP_CMP        DC.B    '   CMP',0
000011FD= 20 20 20 4D 55 4C ...   1813  P_OP_MULS       DC.B    '   MULS.W',0
00001207= 20 20 20 41 44 44 ...   1814  P_OP_ADDA       DC.B    '   ADDA',0
0000120F= 20 20 20 41 44 44 00    1815  P_OP_ADD        DC.B    '   ADD',0
00001216= 20 20 20 4C 53 52 00    1816  P_OP_LSR        DC.B    '   LSR',0
0000121D= 20 20 20 4C 53 4C 00    1817  P_OP_LSL        DC.B    '   LSL',0
00001224= 20 20 20 41 53 52 00    1818  P_OP_ASR        DC.B    '   ASR',0
0000122B= 20 20 20 41 53 4C 00    1819  P_OP_ASL        DC.B    '   ASL',0
00001232= 20 20 20 52 4F 52 00    1820  P_OP_ROR        DC.B    '   ROR',0
00001239= 20 20 20 52 4F 4C 00    1821  P_OP_ROL        DC.B    '   ROL',0
00001240                          1822  ***************** END OF DATA CONSTANT PRINTS ***********************************
00001240                          1823   
00001240                          1824  
00001240                          1825  
00001240                          1826  
00001240                          1827  
00001240                          1828  
00001240                          1829  
00001240                          1830  
00001240                          1831  
00001240                          1832  
00001240                          1833  
Line 1834 WARNING: END directive missing, starting address not set

164 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BIT_CHECK_EXG       B1C
BIT_CHECK_EXT       678
BIT_CHECK_MOVEP     3B6
BIT_CHECK_SUBX      A18
CHECK_NOP           142
CHECK_OP_ABCD       AF0
CHECK_OP_ADD        BBC
CHECK_OP_ADDA       B9C
CHECK_OP_ADDI       306
CHECK_OP_ADDQ       86C
CHECK_OP_ADDX       B86
CHECK_OP_AND        B60
CHECK_OP_ANDI       2DA
CHECK_OP_ANDI_TO_CCR  292
CHECK_OP_ANDI_TO_SR  2A4
CHECK_OP_ASL        D7A
CHECK_OP_ASL_NO_ROT  C92
CHECK_OP_ASR        D5A
CHECK_OP_ASR_NO_ROT  C76
CHECK_OP_BCS        8E4
CHECK_OP_BGE        900
CHECK_OP_BLT        91C
CHECK_OP_BRA        8C8
CHECK_OP_BSR        8B2
CHECK_OP_BVC        938
CHECK_OP_CHK        770
CHECK_OP_CLR        636
CHECK_OP_CMP        AAA
CHECK_OP_CMPA       A74
CHECK_OP_CMPI       408
CHECK_OP_CMPM       A5E
CHECK_OP_DBCC       840
CHECK_OP_DIVS       9B6
CHECK_OP_DIVU       98A
CHECK_OP_DYNAMIC_BCHG  38A
CHECK_OP_DYNAMIC_BCLR  448
CHECK_OP_DYNAMIC_BSET  3A0
CHECK_OP_DYNAMIC_BTST  374
CHECK_OP_EOR        A8A
CHECK_OP_EORI       31C
CHECK_OP_EORI_TO_CCR  2B6
CHECK_OP_EORI_TO_SR  2C8
CHECK_OP_EXG        B06
CHECK_OP_EXT        662
CHECK_OP_ILLEGAL    596
CHECK_OP_JMP        75A
CHECK_OP_JSR        7D2
CHECK_OP_LEA        7B6
CHECK_OP_LINK       718
CHECK_OP_LSL        D3A
CHECK_OP_LSL_NO_ROT  C5A
CHECK_OP_LSR        D1A
CHECK_OP_LSR_NO_ROT  C3E
CHECK_OP_MOVEA_L    4A4
CHECK_OP_MOVEA_W    50C
CHECK_OP_MOVEM      80E
CHECK_OP_MOVEP      3D2
CHECK_OP_MOVEQ      964
CHECK_OP_MOVE_B     478
CHECK_OP_MOVE_FROM_SR  5DE
CHECK_OP_MOVE_L     4E0
CHECK_OP_MOVE_TO_CCR  5F4
CHECK_OP_MOVE_TO_SR  60A
CHECK_OP_MOVE_USP   744
CHECK_OP_MOVE_W     548
CHECK_OP_MULS       B44
CHECK_OP_MULU       ADA
CHECK_OP_NBCD       694
CHECK_OP_NEG        7EE
CHECK_OP_NEGX       620
CHECK_OP_NOP        786
CHECK_OP_NOT        64C
CHECK_OP_OR         9D2
CHECK_OP_ORI        3E8
CHECK_OP_ORI_TO_CCR  26E
CHECK_OP_ORI_TO_SR  280
CHECK_OP_PEA        6C0
CHECK_OP_RESET      584
CHECK_OP_ROL        CFA
CHECK_OP_ROL_NO_ROT  C22
CHECK_OP_ROR        CDA
CHECK_OP_ROR_NO_ROT  C06
CHECK_OP_ROXL       CC4
CHECK_OP_ROXL_NO_ROT  BF0
CHECK_OP_ROXR       CAE
CHECK_OP_ROXR_NO_ROT  BDA
CHECK_OP_RTE        5A8
CHECK_OP_RTR        5CC
CHECK_OP_RTS        79E
CHECK_OP_SBCD       9A0
CHECK_OP_SCC        856
CHECK_OP_STATIC_BCHG  348
CHECK_OP_STATIC_BCLR  428
CHECK_OP_STATIC_BSET  35E
CHECK_OP_STATIC_BTST  332
CHECK_OP_STOP       572
CHECK_OP_SUB        A38
CHECK_OP_SUBA       9F0
CHECK_OP_SUBI       2F0
CHECK_OP_SUBQ       882
CHECK_OP_SUBX       A06
CHECK_OP_SWAP       6AA
CHECK_OP_TAS        6D6
CHECK_OP_TRAP       702
CHECK_OP_TRAPV      5BA
CHECK_OP_TST        6EC
CHECK_OP_UNLK       72E
C_GROUP_0           26A
C_GROUP_1           474
C_GROUP_2           4A0
C_GROUP_3           508
C_GROUP_4           570
C_GROUP_5           83C
C_GROUP_6           8AE
C_GROUP_7           960
C_GROUP_8           986
C_GROUP_9           9EC
C_GROUP_A           A52
C_GROUP_B           A5A
C_GROUP_C           AD6
C_GROUP_D           B82
C_GROUP_E           BD6
C_GROUP_F           DA6
FIND_1_BIT_SIZE_6   184
FIND_1_BIT_SIZE_8   1A6
FIND_2_BIT_SIZE_7_TO_6  162
FIND_MOVEA_L_DIFFERENCE  4B8
FIND_MOVEA_W_DIFF   520
FIRST_3             2
FOURTH_3            5
GROUP0_INVALID      468
GROUP0_SUCCESS      46E
GROUP1_INVALID      494
GROUP1_SUCCESS      49A
GROUP2_INVALID      4FC
GROUP2_SUCCESS      502
GROUP3_INVALID      564
GROUP3_SUCCESS      56A
GROUP4_INVALID      82A
GROUP4_SUCCESS      836
GROUP5_INVALID      8A2
GROUP5_SUCCESS      8A8
GROUP6_INVALID      954
GROUP6_SUCCESS      95A
GROUP7_INVALID      97A
GROUP7_SUCCESS      980
GROUP8_INVALID      9E0
GROUP8_SUCCESS      9E6
GROUP9_INVALID      A46
GROUP9_SUCCESS      A4C
GROUPB_INVALID      ACA
GROUPB_SUCCESS      AD0
GROUPC_INVALID      B76
GROUPC_SUCCESS      B7C
GROUPD_INVALID      BCA
GROUPD_SUCCESS      BD0
GROUPE_INVALID      D9A
GROUPE_SUCCESS      DA0
GROUP_0             1C
GROUP_1             2E
GROUP_2             40
GROUP_3             52
GROUP_4             64
GROUP_5             76
GROUP_6             88
GROUP_7             9A
GROUP_8             AC
GROUP_9             BE
GROUP_A             D0
GROUP_B             E2
GROUP_C             F4
GROUP_D             106
GROUP_E             118
GROUP_F             12A
INVALID_OP          DAE
MNEMONIC            1
MOVE_AND_MOVEA_PARSE_EA  1C8
NORMAL_CHECK        152
OP_FOUND            110C
OP_JSR_DONE         138
OP_JSR_ROUTINE      6
OP_SIZE             0
PARSE_EA_CONSTANT_BITS  212
PRINT_OP_ADD        FFC
PRINT_OP_ADDA       1012
PRINT_OP_ASL        106A
PRINT_OP_ASR        1054
PRINT_OP_BCS        F16
PRINT_OP_BGE        F2C
PRINT_OP_BLT        F42
PRINT_OP_BRA        F6E
PRINT_OP_BVC        F58
PRINT_OP_CMP        FD6
PRINT_OP_CMPI       DE0
PRINT_OP_DIVS       F84
PRINT_OP_DYNAMIC_BCLR  E0C
PRINT_OP_EOR        FC0
PRINT_OP_JSR        E72
PRINT_OP_LEA        EB4
PRINT_OP_LSL        1028
PRINT_OP_LSR        103E
PRINT_OP_MOVEA_L    E32
PRINT_OP_MOVEA_W    E52
PRINT_OP_MOVEB      E22
PRINT_OP_MOVEM_L    EF0
PRINT_OP_MOVEM_W    EE0
PRINT_OP_MOVE_L     E42
PRINT_OP_MOVE_W     E62
PRINT_OP_MULS       FEC
PRINT_OP_NEG        ECA
PRINT_OP_NOP        E9E
PRINT_OP_OR         F94
PRINT_OP_ORI        DCA
PRINT_OP_ROL        1080
PRINT_OP_ROR        1096
PRINT_OP_RTS        E88
PRINT_OP_SIZE       10DC
PRINT_OP_SIZE_ADDA  10F6
PRINT_OP_STATIC_BCLR  DF6
PRINT_OP_SUB        FAA
PRINT_OP_SUBQ       F00
PRINT_SIZE_BYTE     10AC
PRINT_SIZE_LONG     10CC
PRINT_SIZE_WORD     10BC
PRINT_TO_BUFFER     DB8
P_INVALID_OP        1100
P_OP_ADD            120F
P_OP_ADDA           1207
P_OP_ASL            122B
P_OP_ASR            1224
P_OP_BCLR           1130
P_OP_BCS            11BB
P_OP_BGE            11C2
P_OP_BLT            11C9
P_OP_BRA            11B4
P_OP_BVC            11D0
P_OP_CMP            11F6
P_OP_CMPI           1128
P_OP_DIVS           11D7
P_OP_EOR            11EF
P_OP_JSR            1190
P_OP_LEA            1189
P_OP_LSL            121D
P_OP_LSR            1216
P_OP_MOVEA_L        1143
P_OP_MOVEA_W        115A
P_OP_MOVEB          1138
P_OP_MOVEM_L        117D
P_OP_MOVEM_W        1171
P_OP_MOVE_L         114F
P_OP_MOVE_W         1166
P_OP_MULS           11FD
P_OP_NEG            11A5
P_OP_NOP            1197
P_OP_OR             11E2
P_OP_ORI            1121
P_OP_ROL            1239
P_OP_ROR            1232
P_OP_RTS            119E
P_OP_SUB            11E8
P_OP_SUBQ           11AC
P_SIZE_B            1115
P_SIZE_L            111D
P_SIZE_W            1119
SECOND_3            3
THIRD_3             4
