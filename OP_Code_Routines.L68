000010BE Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/13/2019 9:07:12 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OP Code routines for Disassembler
00000000                             3  * Written by : Daniel Yan
00000000                             4  * Date       : 2/28/2019, Updated 3/12/2019
00000000                             5  
00000000                             6  * Description: Disassembler routines to identify any valid
00000000                             7  * OP code dependent on current supported list.
00000000                             8  *------------------------------------------------------------
00001000                             9    ORG $1000 ; Start at Address $1000
00001000                            10  CUR_OP_CODE DS.W 1  ; Current OP Code Word
00001002                            11  IS_VALID    DS.B 1  ; Tells if the current OP code is valid or not
00001003                            12  EA_SIZE     DS.B 1
00001004                            13  G_BUFFER    DS.B 80
00001054                            14  B_BUFFER    DS.B 80
000010A4                            15  MNEMONIC    DS.B 1
000010A5                            16  FIRST_3     DS.B 1
000010A6                            17  SECOND_3    DS.B 1
000010A7                            18  THIRD_3     DS.B 1
000010A8                            19  FOURTH_3    DS.B 1
000010A9                            20  
000010AA= 4D4F5645 412E4C00 ...     21  P_OP_MOVEA_L_T  DC.L    'MOVEA.L',0
000010B6= 412E4C00 00000000         22  P_OP_MOVEA_L_A_L DC.L   'A.L',0
000010BE                            23      
000010BE                            24  
000010BE                            25  START:
000010BE  49F8 1004                 26      LEA G_BUFFER,A4
000010C2  18BC 0000                 27      MOVE.B #0, (A4)
000010C6                            28  
000010C6                            29      ;MOVE.L (A5)+, D0
000010C6                            30  ************** BUFFER PRINTING/LOADING EXAMPLES *************************************
000010C6                            31      ; Load the message onto A4
000010C6                            32      ;MOVE.L #P_OP_MOVEA_L_T, Arg_AddStrToBuffer_String
000010C6                            33      ;MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer 
000010C6                            34      ;JSR AddStrToBuffer
000010C6                            35      ;LEA G_BUFFER, A4   ; Load the value of the message onto the G_BUFFER
000010C6                            36      ;MOVE.L P_OP_MOVEA_L_T,(A4)+
000010C6                            37      ;MOVE.L P_OP_MOVEA_L_A_L,(A4)+
000010C6                            38      
000010C6                            39  ***************************** Input Tests ********************************************
000010C6                            40      ; indicates a test has been finished
000010C6                            41      * indicates a test hasn't been finished
000010C6                            42      
000010C6                            43      ***GROUP 0 tests**** SUPPORTED: ORI, BCLR (static, dynamic), CMPI
000010C6                            44      ;MOVE.W #%0000000000111100,CUR_OP_CODE      ;ORI TO CCR              SHOULD FAIL
000010C6                            45      ;MOVE.W #%0000000001111100,CUR_OP_CODE      ;ORI TO SR               SHOULD FAIL
000010C6                            46      ;MOVE.W #%0000000010000101,CUR_OP_CODE      ;ORI.W D5                SHOULD PASS
000010C6  31FC 027C 1000            47      MOVE.W #%0000001001111100,CUR_OP_CODE      ;ANDI TO CCR             SHOULD FAIL
000010CC                            48      ;MOVE.W #%0000001001111100,CUR_OP_CODE      ;ANDI TO SR              SHOULD FAIL
000010CC                            49      ;MOVE.W #%0000001010000101,CUR_OP_CODE      ;ANDI.W D5               SHOULD FAIL
000010CC                            50      ;MOVE.W #%0000010010000101,CUR_OP_CODE      ;SUBI.W D5               SHOULD FAIL
000010CC                            51      ;MOVE.W #%0000011010000101,CUR_OP_CODE      ;ADDI.W D5               SHOULD FAIL
000010CC                            52      ;MOVE.W #%0000101000111100,CUR_OP_CODE      ;EORI TO CCR             SHOULD FAIL
000010CC                            53      ;MOVE.W #%0000101001111100,CUR_OP_CODE      ;EORI TO SR              SHOULD FAIL
000010CC                            54      ;MOVE.W #%0000101010000101,CUR_OP_CODE      ;EORI.W D5               SHOULD FAIL
000010CC                            55      ;MOVE.W #%0000110010000101,CUR_OP_CODE      ;CMPI.L D5               SHOULD PASS
000010CC                            56      ;MOVE.W #%0000100000000101,CUR_OP_CODE      ;STATIC BTST. B D5       SHOULD FAIL
000010CC                            57      ;MOVE.W #%0000100001000101,CUR_OP_CODE      ;STATIC BCHG .B D5       SHOULD FAIL
000010CC                            58      ;MOVE.W #%0000100010000101,CUR_OP_CODE      ;STATIC BCL R D5         SHOULD PASS
000010CC                            59      ;MOVE.W #%0000100011000101,CUR_OP_CODE      ;STATIC BS ET.B D5       SHOULD FAIL
000010CC                            60      ;MOVE.W #%0000111100000101,CUR_OP_CODE      ;DYNAMIC BTST.B D7,D5    SHOULD FAIL
000010CC                            61      ;MOVE.W #%0000111101000101,CUR_OP_CODE      ;DYNAMIC BCHG.B,D7,D5    SHOULD FAIL
000010CC                            62      ;MOVE.W #%0000101110000111,CUR_OP_CODE      ;DYNAMIC BCLR.B D7,D5    SHOULD PASS
000010CC                            63      ;MOVE.W #%0000111111000101,CUR_OP_CODE      ;DYNAMIC BSET.B D7,D5    SHOULD FAIL
000010CC                            64      ;MOVE.W #%0000111111001101,CUR_OP_CODE      ;MOVEP.L MEM TO REG, A5  SHOULD FAIL, MADE A SPECIAL CASE FOR DYNAMIC BSET BIT SHIFTING
000010CC                            65          
000010CC                            66      ***GROUP 1 tests**** SUPPORTED: MOVE.B
000010CC                            67      ;MOVE.W #%0001101000000111,CUR_OP_CODE       ;MOVE.B D5,D7           SHOULD PASS
000010CC                            68      
000010CC                            69      ***GROUP 2 tests**** SUPPORTED: MOVEA.L, MOVE.L
000010CC                            70      ;MOVE.W #%0010101000000111,CUR_OP_CODE       ;MOVE.L D5,D7           SHOULD PASS
000010CC                            71      ;MOVE.W #%0010101001000111,CUR_OP_CODE       ;MOVEA.L D5,D7          SHOULD PASS
000010CC                            72          
000010CC                            73      ***GROUP 3 tests**** SUPPORTED: MOVEA.W, MOVE.W
000010CC                            74      ;MOVE.W #%0011101000000111,CUR_OP_CODE       ;MOVE.W D5,D7           SHOULD PASS
000010CC                            75      ;MOVE.W #%0011101001000111,CUR_OP_CODE       ;MOVEA.W D5,D7          SHOULD PASS
000010CC                            76      
000010CC                            77      ****GROUP 4 tests**** SUPPORTED: LEA, JSR, RTS, NEG, MOVEM  
000010CC                            78      ;MOVE.W #%0100000011000101,CUR_OP_CODE       ;MOVE_FROM_SR           SHOULD FAIL
000010CC                            79      ;MOVE.W #%0100010011000101,CUR_OP_CODE       ;MOVE_TO_CCR            SHOULD FAIL
000010CC                            80      ;MOVE.W #%0100011011000101,CUR_OP_CODE       ;MOVE_TO_SR             SHOULD FAIL
000010CC                            81      ;MOVE.W #%0100000010000101,CUR_OP_CODE       ;NEGX                   SHOULD FAIL
000010CC                            82      ;MOVE.W #%0100001010000101,CUR_OP_CODE       ;CLR                    SHOULD FAIL
000010CC                            83      ;MOVE.W #%0100010001000101,CUR_OP_CODE       ;NEG                    SHOULD PASS
000010CC                            84      ;MOVE.W #%0100011010000101,CUR_OP_CODE       ;NOT                    SHOULD FAIL
000010CC                            85      ;MOVE.W #%0100100011000101,CUR_OP_CODE       ;EXT                    SHOULD FAIL
000010CC                            86      ;MOVE.W #%0100100000000101,CUR_OP_CODE       ;NBCD                   SHOULD FAIL
000010CC                            87      ;MOVE.W #%0100100001000101,CUR_OP_CODE       ;SWAP                   SHOULD FAIL
000010CC                            88      ;MOVE.W #%0100100001000101,CUR_OP_CODE       ;PEA                    SHOULD FAIL
000010CC                            89      ;MOVE.W #%0100101011111100,CUR_OP_CODE       ;ILLEGAL                SHOULD FAIL
000010CC                            90      ;MOVE.W #%0100101011000101,CUR_OP_CODE       ;TAS                    SHOULD FAIL
000010CC                            91      ;MOVE.W #%0100101010000101,CUR_OP_CODE       ;TST                    SHOULD FAIL
000010CC                            92      ;MOVE.W #%0100111001000111,CUR_OP_CODE       ;TRAP                   SHOULD FAIL
000010CC                            93      ;MOVE.W #%0100111001010101,CUR_OP_CODE       ;LINK                   SHOULD FAIL
000010CC                            94      ;MOVE.W #%0100111001011101,CUR_OP_CODE       ;UNLK                   SHOULD FAIL
000010CC                            95      ;MOVE.W #%0100111001101101,CUR_OP_CODE       ;MOVE_USP               SHOULD FAIL
000010CC                            96      ;MOVE.W #%0100111001110000,CUR_OP_CODE       ;RESET                  SHOULD FAIL
000010CC                            97      ;MOVE.W #%0100111001110001,CUR_OP_CODE       ;NOP                    SHOULD FAIL
000010CC                            98      ;MOVE.W #%0100111001110010,CUR_OP_CODE       ;STOP                   SHOULD FAIL
000010CC                            99      ;MOVE.W #%0100111001110011,CUR_OP_CODE       ;RTE                    SHOULD FAIL
000010CC                           100      ;MOVE.W #%0100111001110101,CUR_OP_CODE       ;RTS                    SHOULD PASS
000010CC                           101      ;MOVE.W #%0100111001110110,CUR_OP_CODE       ;TRAPV                  SHOULD FAIL
000010CC                           102      ;MOVE.W #%0100111001110111,CUR_OP_CODE       ;RTR                    SHOULD FAIL
000010CC                           103      ;MOVE.W #%0100111010000101,CUR_OP_CODE       ;JSR                    SHOULD PASS
000010CC                           104      ;MOVE.W #%0100111011000101,CUR_OP_CODE       ;JMP                    SHOULD FAIL
000010CC                           105      ;MOVE.W #$488E,CUR_OP_CODE                   ;MOVEM.W Reg to Mem,A6  SHOULD PASS
000010CC                           106      ;MOVE.W #$4C8E,CUR_OP_CODE                   ;MOVEM.W Mem to Reg,A6  SHOULD PASS
000010CC                           107      ;MOVE.W #$43CC,CUR_OP_CODE                   ;LEA A1,A6              SHOULD PASS
000010CC                           108      ;MOVE.W #%0100000110000101,CUR_OP_CODE       ;CHK                    SHOULD FAIL
000010CC                           109      ;MOVE.W #$4E75,CUR_OP_CODE                   ;RTS                    SHOULD PASS
000010CC                           110      ;MOVE.W #$4E71,CUR_OP_CODE                   ;NOP                    SHOULD FAIL
000010CC                           111      ;MOVE.W #$4415,CUR_OP_CODE                   ;NEG.L D5               SHOULD PASS
000010CC                           112     
000010CC                           113      *****GROUP 5 TESTS**** SUPPORTED: SUBQ
000010CC                           114      ;MOVE.W #%0101110010000101,CUR_OP_CODE        ;ADDQ                  SHOULD FAIL
000010CC                           115      ;MOVE.W #%0101110110000101,CUR_OP_CODE        ;SUBQ                  SHOULD PASS
000010CC                           116      ;MOVE.W #%0101101011000101,CUR_OP_CODE        ;Scc (SPL)             SHOULD FAIL
000010CC                           117      ;MOVE.W #%0101101011001101,CUR_OP_CODE         ;DBcc (DCPL)          SHOULD FAIL
000010CC                           118         
000010CC                           119      *****GROUP 6 TESTS********* SUPPORTED: BCS,BGE,BLT,BVC
000010CC                           120      ; DISPLACEMENT, $00 is 16 bits, $FF is 32 bits
000010CC                           121      ; DISPLACEMENT = Last 8 bits
000010CC                           122      ;MOVE.W #%0110000001010101,CUR_OP_CODE   ;BRA                        SHOULD PASS
000010CC                           123      ;MOVE.W #%0110000110101010,CUR_OP_CODE   ;BSR                        SHOULD FAIL
000010CC                           124      ;MOVE.W #%0110010100000001,CUR_OP_CODE   ;BCS                        SHOULD PASS
000010CC                           125      ;MOVE.W #%0110110001010100,CUR_OP_CODE   ;BGE                        SHOULD PASS
000010CC                           126      ;MOVE.W #%0110110110101010,CUR_OP_CODE   ;BLT                        SHOULD PASS
000010CC                           127      ;MOVE.W #%0110100001010100,CUR_OP_CODE   ;BVC                        SHOULD PASS
000010CC                           128      
000010CC                           129      *****GROUP 7 TESTS********** NONE SUPPORTED
000010CC                           130      ;MOVE.W #%0111101011110000,CUR_OP_CODE   ;MOVEQ                      SHOULD FAIL
000010CC                           131      
000010CC                           132      *****GROUP 8 TESTS********** SUPPORTED: DIVS, OR
000010CC                           133      ;MOVE.W #%1000101011000101,CUR_OP_CODE    ;DIVU                      SHOULD FAIL
000010CC                           134      ;MOVE.W #%1000101111000110,CUR_OP_CODE    ;DIVS                      SHOULD PASS
000010CC                           135      ;MOVE.W #%1000101100001111,CUR_OP_CODE    ;SBCD                      SHOULD FAIL
000010CC                           136      ;MOVE.W #%1000110101000101,CUR_OP_CODE    ;OR                        SHOULD PASS
000010CC                           137              
000010CC                           138      *****GROUP 9 TESTS********** SUPPORTED: SUB
000010CC                           139      ;MOVE.W #%1001101100000101,CUR_OP_CODE    ;SUB                       SHOULD PASS
000010CC                           140      ;MOVE.W #%1001000110001101,CUR_OP_CODE    ;SUBX                      SHOULD FAIL
000010CC                           141      ;MOVE.W #%1001101011001101,CUR_OP_CODE    ;SUBA                      SHOULD FAIL
000010CC                           142      
000010CC                           143      *****GROUP A TESTS********** NONE SUPPORTED
000010CC                           144      ;MOVE.W #%1010110101010011,CUR_OP_CODE    ;INVALID_OP                SHOULD FAIL
000010CC                           145      
000010CC                           146      *****GROUP B TESTS********** SUPPORTED: EOR, CMP
000010CC                           147      *MOVE.W #%1011101101000110,CUR_OP_CODE    ;EOR                       SHOULD PASS
000010CC                           148      *MOVE.W #%1011110101001101,CUR_OP_CODE    ;CMPM                      SHOULD FAIL
000010CC                           149      *MOVE.W #%1011010001000101,CUR_OP_CODE    ;CMP                       SHOULD PASS
000010CC                           150      *MOVE.W #%1011110011000101,CUR_OP_CODE    ;CMPA                      SHOULD FAIL
000010CC                           151      
000010CC                           152      *****GROUP C TESTS********** SUPPORTED: MULS
000010CC                           153      ;MOVE.W #%1100101011000110,CUR_OP_CODE    ;MULU                      SHOULD FAIL
000010CC                           154      ;MOVE.W #%1100101111000101,CUR_OP_CODE    ;MULS                      SHOULD PASS
000010CC                           155      ;MOVE.W #%1100101100000101,CUR_OP_CODE    ;ABCD                      SHOULD FAIL
000010CC                           156      ;MOVE.W #%1100101110001110,CUR_OP_CODE    ;EXG                       SHOULD FAIL
000010CC                           157      ;MOVE.W #%1100101001000101,CUR_OP_CODE    ;AND                       SHOULD FAIL   
000010CC                           158       
000010CC                           159      *****GROUP D TESTS********** SUPPORTED: ADD, ADDA
000010CC                           160      ;MOVE.W #%1101101101000101,CUR_OP_CODE    ;ADDX                      SHOULD FAIL
000010CC                           161      ;MOVE.W #%1101101011001101,CUR_OP_CODE    ;ADDA                      SHOULD FAIL
000010CC                           162      ;MOVE.W #%1101101001001101,CUR_OP_CODE    ;ADD                       SHOULD PASS
000010CC                           163      
000010CC                           164      *****GROUP E TESTS********** SUPPORTED: LSX, ASX, ROX
000010CC                           165      ;MOVE.W #%1110000011000101,CUR_OP_CODE    ;ASR NO_ROT                SHOULD PASS
000010CC                           166      ;MOVE.W #%1110000111000101,CUR_OP_CODE    ;ASL NO_ROT                SHOULD PASS
000010CC                           167      ;MOVE.W #%1110001011000101,CUR_OP_CODE    ;LSR NO_ROT                SHOULD PASS
000010CC                           168      ;MOVE.W #%1110001111000101,CUR_OP_CODE    ;LSL NO_ROT                SHOULD PASS
000010CC                           169      ;MOVE.W #%1110010011000101,CUR_OP_CODE    ;ROXR NO_ROT               SHOULD FAIL
000010CC                           170      ;MOVE.W #%1110010111000101,CUR_OP_CODE    ;ROXL NO_ROT               SHOULD FAIL
000010CC                           171      ;MOVE.W #%1110011011000101,CUR_OP_CODE    ;ROR NO_ROT                SHOULD PASS
000010CC                           172      ;MOVE.W #%1110011111000101,CUR_OP_CODE    ;ROL NO_ROT                SHOULD PASS    
000010CC                           173      
000010CC                           174      ;MOVE.W #%1110000001000101,CUR_OP_CODE    ;ASR                       SHOULD PASS
000010CC                           175      ;MOVE.W #%1110000101000101,CUR_OP_CODE    ;ASL                       SHOULD PASS
000010CC                           176      ;MOVE.W #%1110001001001101,CUR_OP_CODE    ;LSR                       SHOULD PASS
000010CC                           177      ;MOVE.W #%1110001101001101,CUR_OP_CODE    ;LSL                       SHOULD PASS
000010CC                           178      ;MOVE.W #%1110010001010101,CUR_OP_CODE    ;ROXR                      SHOULD FAIL
000010CC                           179      ;MOVE.W #%1110010101010101,CUR_OP_CODE    ;ROXL                      SHOULD FAIL
000010CC                           180      ;MOVE.W #%1110011001011101,CUR_OP_CODE    ;ROR                       SHOULD PASS
000010CC                           181      ;MOVE.W #%1110011101011101,CUR_OP_CODE    ;ROL                       SHOULD PASS    
000010CC                           182          
000010CC                           183      *****GROUP F TESTS********** NONE SUPPORTED
000010CC                           184      ;MOVE.W #%1111010110101011,CUR_OP_CODE    ;INVALID_OP                SHOULD FAIL
000010CC                           185      
000010CC                           186      
000010CC                           187  ************************************************************************************
000010CC                           188  * PRINTING BUFFER FUNCTION HAS BEEN FINISHED
000010CC                           189  * STATUS: 
000010CC                           190  * IDENTIFICATION FOR ALL OP CODES:      DONE
000010CC                           191  * VALIDATION TESTING FOR ALL OP CODES:  DONE
000010CC                           192  * PRINTING ALL OP CODES TO BUFFER:      NOT DONE
000010CC                           193  * PRINTING SIZE BITS OF ALL OP CODES:   NOT DONE
000010CC                           194  *-----------------------------------------------------------
000010CC                           195  *First Nibble Values (15-12)
000010CC                           196  *Value                  Operations
000010CC                           197  *$0                     GROUP_0: ORI,BCLR (static and dynamic),CMPI --- DONE
000010CC                           198  *$1                     GROUP_1: MOVE.B                             --- DONE
000010CC                           199  *$2                     GROUP_2: MOVE.L, MOVEA.L                    --- DONE
000010CC                           200  *$3                     GROUP_3: MOVE.W, MOVEA.W                    --- DONE
000010CC                           201  *$4                     GROUP_4: LEA,JSR,RTS,NEG,MOVEM              --- DONE
000010CC                           202  *$5                     GROUP_5: SUBQ                               --- DONE
000010CC                           203  *$6                     GROUP_6: Bcc(BCS,BGE,BLT,BVC), BRA          --- DONE
000010CC                           204  *$7                     GROUP_7: INVALID_OP                         --- DONE
000010CC                           205  *$8                     GROUP_8: DIVS, OR                           --- DONE
000010CC                           206  *$9                     GROUP_9: SUB                                --- DONE
000010CC                           207  *$A                     GROUP_A: INVALID_OP                         --- DONE
000010CC                           208  *$B                     GROUP_B: EOR, CMP                           --- DONE
000010CC                           209  *$C                     GROUP_C: MULS                               --- DONE
000010CC                           210  *$D                     GROUP_D: ADD, ADDA                          --- DONE
000010CC                           211  *$E                     GROUP_E: LSR, LSL, ASR, ASL, ROL, ROR       --- DONE
000010CC                           212  *$F                     GROUP_F: INVALID_OP                         --- DONE
000010CC                           213  
000010CC                           214  
000010CC                           215  * OP_JSR_Routine
000010CC                           216  **********************************************************************************
000010CC                           217  * Description: Catalog all supported OP codes into groupings based on their hex
000010CC                           218  * values. Sort the supported OP codes by looking at the first nibble for their
000010CC                           219  * grouping value. Call underlying subroutines for further identification of the
000010CC                           220  * op code.
000010CC                           221  *
000010CC                           222  * Registers used: A6,D0,D1 
000010CC                           223  *
000010CC                           224  * Precondition: Instruction set (size Word) has been loaded in the appropriate
000010CC                           225  * address to be parsed and read.
000010CC                           226  
000010CC                           227  * Postcondition: OP code has been identified as either valid or invalid. If it is
000010CC                           228  * valid, it is stored into A6 and EA parsing methods are called to pass needed
000010CC                           229  * information to EA. If invalid, DATA output will be utilized to indicate so.
000010CC                           230  **********************************************************************************
000010CC                           231  * These valid operand codes refer to the basic supported operand codes
000010CC                           232  * Groups refer to the first nibble value that is supported by the operand
000010CC                           233  LOAD_OP_CODE:
000010CC  3038 1000                234      MOVE.W CUR_OP_CODE,D0
000010D0  11FC 0001 1002           235      MOVE.B #1,IS_VALID
000010D6  4EB9 000010DC            236      JSR OP_JSR_Routine             ;Use the JSR routine to identify the op code
000010DC                           237      
000010DC                           238  OP_JSR_Routine:
000010DC  48E7 C000                239      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
000010E0  720C                     240      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
000010E2  E2A8                     241      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
000010E4                           242  
000010E4                           243  GROUP_0:                ;$0| ORI, BCLR (static and dynamic), CMPI                  
000010E4  B03C 0000                244      CMP.B   #$0,D0                 ;Compare first nibble
000010E8  6600 000C                245      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
000010EC  4EB9 00001302            246      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
000010F2  6000 010C                247      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000010F6                           248      
000010F6                           249  GROUP_1:                ;$1| MOVE.B
000010F6  B03C 0001                250      CMP.B   #$1,D0                 ;Compare first nibble
000010FA  6600 000C                251      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
000010FE  4EB9 000014D0            252      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
00001104  6000 00FA                253      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001108                           254  
00001108                           255  GROUP_2:                ;$2| MOVE.L, MOVEA.L
00001108  B03C 0002                256      CMP.B   #$2,D0                 ;Compare first nibble
0000110C  6600 000C                257      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
00001110  4EB9 000014FA            258      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
00001116  6000 00E8                259      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000111A                           260  
0000111A                           261  GROUP_3:                ;$3| MOVE.W, MOVEA.W
0000111A  B03C 0003                262      CMP.B   #$3,D0                 ;Compare first nibble
0000111E  6600 000C                263      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
00001122  4EB9 0000155C            264      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
00001128  6000 00D6                265      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000112C                           266  
0000112C                           267  GROUP_4:                ;$4| LEA, JSR, RTS, NEG, MOVEM
0000112C  B03C 0004                268      CMP.B   #$4,D0                 ;Compare first nibble
00001130  6600 000C                269      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
00001134  4EB9 000015BE            270      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
0000113A  6000 00C4                271      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000113E                           272  
0000113E                           273  
0000113E                           274  GROUP_5:                ;$5| SUBQ
0000113E  B03C 0005                275      CMP.B   #$5,D0                 ;Compare first nibble
00001142  6600 000C                276      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
00001146  4EB9 0000183C            277      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
0000114C  6000 00B2                278      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001150                           279  
00001150                           280  
00001150                           281  GROUP_6:                ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
00001150  B03C 0006                282      CMP.B   #$6,D0                 ;Compare first nibble
00001154  6600 000C                283      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
00001158  4EB9 000018A2            284      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
0000115E  6000 00A0                285      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001162                           286  
00001162                           287  
00001162                           288  GROUP_7:                ;$7| Display: DATA, $WXYZ (Unsupported)
00001162  B03C 0007                289      CMP.B   #$7,D0                 ;Compare first nibble
00001166  6600 000C                290      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
0000116A  4EB9 00001948            291      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
00001170  6000 008E                292      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001174                           293  
00001174                           294  
00001174                           295  GROUP_8:                ;$8| DIVS, OR
00001174  B03C 0008                296      CMP.B   #$8,D0                 ;Compare first nibble
00001178  6600 000C                297      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
0000117C  4EB9 0000196C            298      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
00001182  6000 007C                299      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001186                           300  
00001186                           301  
00001186                           302  GROUP_9:                ;$9| SUB
00001186  B03C 0009                303      CMP.B   #$9,D0                 ;Compare first nibble
0000118A  6600 000C                304      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
0000118E  4EB9 000019C2            305      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
00001194  6000 006A                306      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001198                           307  
00001198                           308  
00001198                           309  GROUP_A:                ;$A| Display: DATA, $WXYZ (Unsupported)
00001198  B03C 000A                310      CMP.B   #$A,D0                 ;Compare first nibble
0000119C  6600 000C                311      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
000011A0  4EB9 00001A1C            312      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
000011A6  6000 0058                313      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011AA                           314  
000011AA                           315  
000011AA                           316  GROUP_B:                ;$B| EOR, CMP
000011AA  B03C 000B                317      CMP.B   #$B,D0                 ;Compare first nibble
000011AE  6600 000C                318      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
000011B2  4EB9 00001A24            319      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
000011B8  6000 0046                320      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011BC                           321  
000011BC                           322  
000011BC                           323  GROUP_C:                ;$C| MULS
000011BC  B03C 000C                324      CMP.B   #$C,D0                 ;Compare first nibble
000011C0  6600 000C                325      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
000011C4  4EB9 00001A84            326      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
000011CA  6000 0034                327      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011CE                           328  
000011CE                           329  
000011CE                           330  GROUP_D:                 ;$D| ADD, ADDA
000011CE  B03C 000D                331      CMP.B   #$D,D0                 ;Compare first nibble
000011D2  6600 000C                332      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
000011D6  4EB9 00001B1A            333      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
000011DC  6000 0022                334      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011E0                           335  
000011E0                           336  
000011E0                           337  GROUP_E:                ;$E| LSR, LSL, ASR, ASL, ROL, ROR
000011E0  B03C 000E                338      CMP.B   #$E,D0                 ;Compare first nibble
000011E4  6600 000C                339      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
000011E8  4EB9 00001B5C            340      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
000011EE  6000 0010                341      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011F2                           342  
000011F2                           343  
000011F2                           344  GROUP_F:                ;$F| Display: DATA, $WXYZ (Unsupported)
000011F2  B03C 000F                345      CMP.B   #$F,D0                 ;Compare first nibble
000011F6  4EB9 00001CF4            346      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
000011FC  6000 0002                347      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001200                           348  
00001200                           349  
00001200                           350  OP_JSR_DONE:
00001200  4CDF 0003                351           MOVEM.L (SP)+,D0-D1       ;Recover register D0
00001204  4EF9 00001D14            352           JMP READ_NEXT_INSTRUCTION
0000120A                           353  **********************************************************************************
0000120A                           354  
0000120A                           355  ********** EA Parsing ************************************************************
0000120A                           356  
0000120A                           357  * MOVE_LAST_6_BITS_TO_EA
0000120A                           358  **********************************************************************************
0000120A                           359  * Description: For OP codes with the last 6 bits specified as EA Mode and EA Reg,
0000120A                           360  * the last 6 bits will be parsed and moved into the appropriate registers.
0000120A                           361  *
0000120A                           362  * Registers used: A6,D0,D1,D6,D7 
0000120A                           363  
0000120A                           364  * Precondition: OP code has been identified with only the last 6 bits for EA,
0000120A                           365  * current instruction set is stored into A6.
0000120A                           366  
0000120A                           367  * Postcondition: Last 6 bits of instruction bit has been isolated and stored. Bits
0000120A                           368  * for EA Mode have been stored in D7, Bits for EA Reg been stored in D6.
0000120A                           369  **********************************************************************************
0000120A                           370  MOVE_LAST_6_BITS_TO_EA:      ;Move last 6 bits from EA field to relevant registers
0000120A                           371     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
0000120A  3038 1000                372      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
0000120E  323C 000A                373      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
00001212  E368                     374      LSL.W   D1,D0            ;Truncate to find the last 6 bits
00001214  E268                     375      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
00001216  3E00                     376      MOVE.W  D0,D7            ;Move last 6 bits into D7
00001218  323C 0003                377      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
0000121C  E26F                     378      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
0000121E  3C07                     379      MOVE.W  D7,D6            ;Move the 'upper' 3 bits into D6
00001220  323C 000D                380      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
00001224  E368                     381      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
00001226  E268                     382      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001228  3E00                     383      MOVE.W  D0,D7            ;Move the 'lower' 3 bits into D7
0000122A                           384     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
0000122A  4E75                     385      RTS                      ;Return to stack
0000122C                           386      
0000122C                           387  * FIND_2_BIT_SIZE_TO_EA
0000122C                           388  **********************************************************************************
0000122C                           389  * Description: For OP codes with 2 bit size fields, the 2 relevant bits (7-6) will 
0000122C                           390  * be parsed and moved to the appropriate registers.
0000122C                           391  *
0000122C                           392  * Registers used: A6,D0,D1,D5
0000122C                           393  *
0000122C                           394  * Precondition: OP code has been identified with 2 size bit field for EA, current
0000122C                           395  * instruction set for OP code is stored in to A6.
0000122C                           396  *
0000122C                           397  * Postcondition: 2 bit size field has been isolated and stored into D5.
0000122C                           398  **********************************************************************************
0000122C                           399  FIND_2_BIT_SIZE_TO_EA:      ;Move the 2 bit size field relevant register
0000122C                           400     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
0000122C  3038 1000                401      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
00001230  323C 0008                402      MOVE.W   #8,D1          ;Prepare 8 bit shift to D1
00001234  E368                     403      LSL.W    D1,D0          ;Truncate to find the 2 size bits
00001236  E268                     404      LSR.W    D1,D0          ;Reposition the bits
00001238  323C 0006                405      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
0000123C  E268                     406      LSR.W    D1,D0          ;Truncate to shift 2 bits to a byte
0000123E  3800                     407      MOVE.W   D0,D4          ;Move 2 size bits into D5
00001240                           408    ;  MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
00001240  4E75                     409      RTS                     ;Return to stack
00001242                           410  **********************************************************************************
00001242                           411  
00001242                           412  * FIND_3_BIT_REG_TO_EA
00001242                           413  **********************************************************************************
00001242                           414  * Description: OP codes with a dynamic 3 bit register in bits 11-9 will be parsed
00001242                           415  * and have those 3 bits isolated and moved to the appropriate registers.
00001242                           416  *
00001242                           417  * Registers used: A6,D0,D1,D5
00001242                           418  *
00001242                           419  * Precondition: OP code has been identified with a dynamic 3 bit register in bits
00001242                           420  * 11-9.
00001242                           421  *
00001242                           422  * Postcondition: 3 bit dynamic register has been isolated and stored into D4.
00001242                           423  **********************************************************************************
00001242                           424  FIND_3_BIT_REG_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
00001242                           425     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
00001242  3038 1000                426      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
00001246  323C 0004                427      MOVE.W   #4,D1          ;Prepare 4 bit shift to D1
0000124A  E368                     428      LSL.W    D1,D0          ;Truncate to find the 2 size bits
0000124C  E268                     429      LSR.W    D1,D0          ;Reposition the bits
0000124E  323C 0009                430      MOVE.W   #9,D1          ;Prepare 9 bit shift to D1
00001252  E268                     431      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
00001254  3A00                     432      MOVE.W   D0,D5          ;Move 3 register bits into D4
00001256                           433     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
00001256  4E75                     434      RTS                     ;Return to stack
00001258                           435  **********************************************************************************
00001258                           436  
00001258                           437  * MOVE_AND_MOVEA_PARSE_EA
00001258                           438  **********************************************************************************
00001258                           439  * Description: Special parsing for the SRC and DST Mode/Reg for MOVE/MOVE
00001258                           440  *
00001258                           441  * Registers used: A6,D0,D1,D7,D6,D5,D4
00001258                           442  *
00001258                           443  * Precondition: OP code has been identified with either MOVE or MOVEA
00001258                           444  *
00001258                           445  * Postcondition: Store all relevant EA bits into associated register.
00001258                           446  **********************************************************************************
00001258                           447  MOVE_AND_MOVEA_PARSE_EA:       ;Move the 3 bit dynamic register bits to proper register
00001258                           448     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001258  3038 1000                449      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
0000125C  323C 000A                450      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
00001260  E368                     451      LSL.W   D1,D0            ;Truncate to find the last 6 bits
00001262  E268                     452      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
00001264  3E00                     453      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
00001266  323C 0003                454      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
0000126A  E26F                     455      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
0000126C  3A07                     456      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
0000126E  323C 000D                457      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
00001272  E368                     458      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
00001274  E268                     459      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001276  3800                     460      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
00001278                           461      **************MOVING SOURCE*********** TO BE DONE LATER
00001278                           462      ; MOVE.W #%0011 011 001 001 101,(A6)              ;MOVEA.W A5,A3
00001278                           463      ; MOVE.W #%0010 011 001 001 101,D0                ;MOVEA.L A5,A3
00001278                           464       ;Expected values:
00001278                           465      ;D7, DST REG:   011
00001278                           466      ;D6, DST MODE:  001
00001278                           467      ;D5, SRC MODE:  001
00001278                           468      ;D4, SRC REG:   101
00001278                           469      ;00011001
00001278  3038 1000                470      MOVE.W CUR_OP_CODE,D0     ;Move current OP code into D0     
0000127C  323C 0004                471      MOVE.W  #4,D1             ;Prepare 4 bit shift to D1
00001280  E368                     472      LSL.W   D1,D0             ;Truncate to find bits 11-6
00001282  E268                     473      LSR.W   D1,D0             ;Reposition bits
00001284  323C 0006                474      MOVE.W  #6,D1             ;Prepare 6 bit shift to D1
00001288  E268                     475      LSR.W   D1,D0             ;Truncate the SRC Reg/Mode bits
0000128A  323C 0003                476      MOVE.W  #3,D1             ;Prepare a 3 bit shift to D1 for DST Reg/Mode
0000128E  3C00                     477      MOVE.W  D0,D6             ;Copy over the current 6 bits to D6
00001290  E268                     478      LSR.W   D1,D0             ;Truncate DST Mode  
00001292  3E00                     479      MOVE.W  D0,D7             ;Move DST Reg to D7
00001294  323C 000D                480      MOVE.W  #13,D1             
00001298  E36E                     481      LSL.W   D1,D6             ;Truncate 13 bits in D6
0000129A  E26E                     482      LSR.W   D1,D6             ;Reposition D6
0000129C                           483                                ;D6 now contains the DST Reg
0000129C                           484     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
0000129C  4E75                     485      RTS                     ;Return to stack
0000129E                           486  **********************************************************************************
0000129E                           487  
0000129E                           488  *FIND_TRAILING_BITS_TO_EA
0000129E                           489  **********************************************************************************
0000129E                           490  FIND_TRAILING_BITS_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
0000129E                           491     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
0000129E  3038 1000                492      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
000012A2  323C 0007                493      MOVE.W   #7,D1          ;Prepare 4 bit shift to D1
000012A6  E368                     494      LSL.W    D1,D0          ;Truncate to find the 2 size bits
000012A8  E268                     495      LSR.W    D1,D0          ;Reposition the bits
000012AA  323C 0006                496      MOVE.W   #6,D1          ;Prepare 9 bit shift to D1
000012AE  E268                     497      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
000012B0  3680                     498      MOVE.W   D0,(A3)          ;Move 3 register bits into D4
000012B2                           499     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
000012B2  4E75                     500      RTS                    ;Return to stack
000012B4                           501  **********************************************************************************
000012B4                           502  
000012B4                           503  *PARSE_EA_CONSTANT_BITS
000012B4                           504  **********************************************************************************
000012B4                           505  * Definition: Uses CUR_OP_CODE to shift the proper bits into the global constants
000012B4                           506  * used for EA (MNEMONIC,FIRST_3,SECOND_3,THIRD_3,FOURTH_3. Where MNEMONIC refers
000012B4                           507  * to the first 4 bits of CUR_OP_CODE (15-12), FIRST_3 refers to the first group
000012B4                           508  * of 3 bits (11-9), SECOND_3 refers to the second group of 3 bits (8-6), THIRD_3
000012B4                           509  * refers to the third group of 3 bits (5-3), and FOURTH_3 refers to the fourth
000012B4                           510  * group of 3 bits (2-0). Shifts CUR_OP_CODE bits to initialize constants.
000012B4                           511  *
000012B4                           512  * Registers used: D0,D1
000012B4                           513  *
000012B4                           514  * Precondition: CUR_OP_CODE has been set with an 4 hex instruction set
000012B4                           515  * 
000012B4                           516  * Postcondition: MNEMONIC, FIRST_3, SECOND_3, THIRD_3, FOURTH_3 have been set
000012B4                           517  * to the corresponding values.
000012B4                           518  **********************************************************************************
000012B4                           519  PARSE_EA_CONSTANT_BITS:
000012B4                           520      *MNEMONIC SHIFT
000012B4  3038 1000                521      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D0
000012B8  323C 000C                522      MOVE.W #12,D1               ;Prepare a bit shift of 12 into D1
000012BC  E268                     523      LSR.W D1,D0                 ;Shift 12 bits from D0 right
000012BE  11C0 10A4                524      MOVE.B D0,MNEMONIC          ;Set MNEMONIC to D0
000012C2                           525      *FIRST_3 SHIFT
000012C2  323C 0009                526      MOVE.W #9,D1                ;Prepare a bit shift of 9 into D1
000012C6  3038 1000                527      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012CA  E948                     528      LSL.W #4,D0                 ;Shift out bits 15-12 in D0
000012CC  E848                     529      LSR.W #4,D0                 ;Reposition D0
000012CE  E268                     530      LSR.W  D1,D0                ;Shift D0 9 bits right
000012D0  11C0 10A5                531      MOVE.B D0,FIRST_3           ;Set FIRST_3 to D0
000012D4                           532      *SECOND_3 SHIFT
000012D4  3038 1000                533      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012D8  EF48                     534      LSL.W #7,D0                 ;Shift out bits 15-9 in D0
000012DA  EE48                     535      LSR.W #7,D0                 ;Reposition D0
000012DC  EC48                     536      LSR.W #6,D0                 ;Shift D0 6 bits right
000012DE  11C0 10A6                537      MOVE.B D0,SECOND_3          ;Set SECOND_3 to D0
000012E2                           538      *THIRD_3 SHIFT
000012E2  3038 1000                539      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012E6  E648                     540      LSR.W #3,D0                 ;Shift D0 3 bits right
000012E8  323C 000D                541      MOVE.W #13,D1               ;Prepare a 13 bit shift into D1
000012EC  E368                     542      LSL.W D1,D0                 ;Truncate first 13 bits of D0
000012EE  E268                     543      LSR.W D1,D0                 ;Reposition D0
000012F0  11C0 10A7                544      MOVE.B D0,THIRD_3           ;Set THIRD_3 to D0
000012F4                           545      *FOURTH_3 SHIFT
000012F4  3038 1000                546      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012F8  E368                     547      LSL.W D1,D0                 ;Grab the fourth 3-bit group
000012FA  E268                     548      LSR.W D1,D0                 ;Shift D0 back into position
000012FC  11C0 10A8                549      MOVE.B D0,FOURTH_3          ;Set FOURTH_3 to Do
00001300  4E75                     550      RTS                         ;Return to stack
00001302                           551  **********************************************************************************
00001302                           552  ********** End of EA Parsing *****************************************************
00001302                           553  
00001302                           554  *******************JMP LABELS ****************************************************
00001302                           555  * Labelling for group codes will be in the following format
00001302                           556  
00001302                           557  * <JMP Labelname>
00001302                           558  ********************************************************************************
00001302                           559  * Checking List Order (If more than one value)
00001302                           560  * Operand1 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
00001302                           561  * Operand2 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
00001302                           562  
00001302                           563  * Where a-b will refer to the bit corresponding bit value in the instruction
00001302                           564  * format, and a specifier will be attached such as Size, EA Mode, SRC Reg, etc
00001302                           565  * to clarify what a specific bit range means.
00001302                           566  * Checking order refers to what order the checks will be performed in. 
00001302                           567  * Any other code outside of the listed ones will be INVALID_OP.
00001302                           568  ********************************************************************************
00001302                           569  
00001302                           570  ********************************************************************************
00001302                           571  * Global Field Descriptions
00001302                           572  * Size Field: Byte = 00 Word = 01 Long = 10
00001302                           573  * EA Mode: Refer to EA Address Modes
00001302                           574  * EA Reg: 3-bit input that is mapped to the respective binary value
00001302                           575  ********************************************************************************
00001302                           576  
00001302                           577  * GROUP_0                      
00001302                           578  ********************************************************************************
00001302                           579  * Description: Checks for the following listed OP codes to be present or not
00001302                           580  * Supported OP codes:
00001302                           581  * ORI: $00, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001302                           582  * CMPI: $0C, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001302                           583  * Dynamic BCLR: $0, 11-9 Register, 8-6 %110, 5-3 EA Mode, 2-0 EA Reg
00001302                           584  * Static BCLR: $01, 7-6 10, 5-3 EA Mode, 2-0 EA Reg
00001302                           585  *
00001302                           586  * Registers used: D0
00001302                           587  *
00001302                           588  * Precondition: First nibble has been identified as $0
00001302                           589  *
00001302                           590  * Postcondition: Parses proper OP code with a nibble value of $0 or finds an
00001302                           591  * invalid OP code. After a successful parse loading for EA values will be done
00001302                           592  * through a subroutine.
00001302                           593  * 
00001302                           594  * Unsupported OP codes:
00001302                           595  * ORI_TO_CCR, ORI_TO_SR, ANDI_TO_CCR, ANDI_TO_SR, ANDI, SUBI, ADDI, EORI_TO_CCR
00001302                           596  * EORI_TO_SR, EORI, STATIC_BTST, STATIC_BCHG, STATIC_BSET, DYNAMIC_BTST,
00001302                           597  * DYNAMIC_BCHG, DYNAMIC_BSET, MOVEP 
00001302                           598  ********************************************************************************
00001302                           599  C_GROUP_0:
00001302  48E7 C000                600      MOVEM.L D0-D1, -(SP)            ;Backup registers
00001306                           601      
00001306                           602  *Unsupported OP codes that are fully static in bits
00001306                           603  CHECK_OP_ORI_TO_CCR:
00001306  3038 1000                604      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000130A  B07C 003C                605      CMP.W #$003C,D0                 ;Compare the direct full bits
0000130E  6700 01B4                606      BEQ GROUP0_INVALID              ;INVALID OP code found
00001312  6600 0002                607      BNE CHECK_OP_ORI_TO_SR          ;Check next routine
00001316                           608      
00001316                           609  CHECK_OP_ORI_TO_SR:
00001316  3038 1000                610      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000131A  B07C 007C                611      CMP.W #$007C,D0                 ;Compare the direct full bits
0000131E  6700 01A4                612      BEQ GROUP0_INVALID              ;INVALID OP code found
00001322  6600 0002                613      BNE CHECK_OP_ANDI_TO_CCR        ;Check next routine
00001326                           614      
00001326                           615  CHECK_OP_ANDI_TO_CCR:
00001326  3038 1000                616      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000132A  B07C 023C                617      CMP.W #$023C,D0                 ;Compare the direct full bits
0000132E  6700 0194                618      BEQ GROUP0_INVALID              ;INVALID OP code found
00001332  6600 0002                619      BNE CHECK_OP_ANDI_TO_SR         ;Check next routine
00001336                           620      
00001336                           621  CHECK_OP_ANDI_TO_SR:
00001336  3038 1000                622      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000133A  B07C 027C                623      CMP.W #$027C,D0                 ;Compare the direct full bits
0000133E  6700 0184                624      BEQ GROUP0_INVALID              ;INVALID OP code found
00001342  6600 0022                625      BNE CHECK_OP_ANDI               ;Check next routine
00001346                           626  
00001346                           627  CHECK_OP_EORI_TO_CCR:
00001346  3038 1000                628      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000134A  B07C 0A3C                629      CMP.W #$0A3C,D0                 ;Compare the direct full bits
0000134E  6700 0174                630      BEQ GROUP0_INVALID              ;INVALID OP code found
00001352  6600 0002                631      BNE CHECK_OP_EORI_TO_SR         ;Check next routine
00001356                           632      
00001356                           633  CHECK_OP_EORI_TO_SR:
00001356  3038 1000                634      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000135A  B07C 0A7C                635      CMP.W #$0A7C,D0                 ;Compare the direct full bits
0000135E  6700 0164                636      BEQ GROUP0_INVALID              ;INVALID OP code found
00001362  6600 0002                637      BNE CHECK_OP_ANDI               ;Check next routine
00001366                           638      
00001366                           639  *Unsupported OP codes to check with partial static bits
00001366                           640  CHECK_OP_ANDI:
00001366  3038 1000                641      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000136A  0240 FF00                642      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
0000136E  B07C 0200                643      CMP.W #$0200,D0                 ;Compare the appropriate masked bits
00001372  6700 0150                644      BEQ GROUP0_INVALID              ;INVALID OP code found
00001376  6600 0002                645      BNE CHECK_OP_SUBI               Check next routine
0000137A                           646      
0000137A                           647  CHECK_OP_SUBI:
0000137A  3038 1000                648      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000137E  0240 FF00                649      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001382  B07C 0400                650      CMP.W #$0400,D0                 ;Compare the appropriate masked bits
00001386  6700 013C                651      BEQ GROUP0_INVALID              ;INVALID OP code found
0000138A  6600 0002                652      BNE CHECK_OP_ADDI               ;Check next routine
0000138E                           653  
0000138E                           654  CHECK_OP_ADDI:
0000138E  3038 1000                655      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001392  0240 FF00                656      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001396  B07C 0600                657      CMP.W #$0600,D0                 ;Compare the appropriate masked bits
0000139A  6700 0128                658      BEQ GROUP0_INVALID              ;INVALID OP code found
0000139E  6600 0002                659      BNE CHECK_OP_EORI               ;Check next routine 
000013A2                           660  
000013A2                           661  CHECK_OP_EORI:
000013A2  3038 1000                662      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000013A6  0240 FF00                663      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
000013AA  B07C 0A00                664      CMP.W #$0A00,D0                 ;Compare the appropriate masked bits
000013AE  6700 0114                665      BEQ GROUP0_INVALID              ;INVALID OP code found
000013B2  6600 0002                666      BNE CHECK_OP_STATIC_BTST        ;Check next routine
000013B6                           667      
000013B6                           668  CHECK_OP_STATIC_BTST:
000013B6  3038 1000                669      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000013BA  0240 FFC0                670      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
000013BE  B07C 0800                671      CMP.W #$0800,D0                 ;Compare the appropriate masked bits
000013C2  6700 0100                672      BEQ GROUP0_INVALID              ;INVALID OP code found
000013C6  6600 0002                673      BNE CHECK_OP_STATIC_BCHG        ;Check next routine
000013CA                           674      
000013CA                           675  CHECK_OP_STATIC_BCHG:
000013CA  3038 1000                676      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000013CE  0240 FFC0                677      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
000013D2  B07C 0840                678      CMP.W #$0840,D0                 ;Compare the appropriate masked bits
000013D6  6700 00EC                679      BEQ GROUP0_INVALID              ;INVALID OP code found
000013DA  6600 0002                680      BNE CHECK_OP_STATIC_BSET        ;Check next routine
000013DE                           681  
000013DE                           682  CHECK_OP_STATIC_BSET:
000013DE  3038 1000                683      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000013E2  0240 FFC0                684      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
000013E6  B07C 08C0                685      CMP.W #$08C0,D0                 ;Compare the appropriate masked bits
000013EA  6700 00D8                686      BEQ GROUP0_INVALID              ;INVALID OP code found   
000013EE  6600 0002                687      BNE CHECK_OP_DYNAMIC_BTST       ;Check next routine
000013F2                           688  
000013F2                           689  CHECK_OP_DYNAMIC_BTST:
000013F2  3038 1000                690      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000013F6  0240 F1C0                691      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
000013FA  B07C 0100                692      CMP.W #$0100,D0                 ;Compare the appropriate masked bits
000013FE  6700 00C4                693      BEQ GROUP0_INVALID              ;INVALID OP code found
00001402  6600 0002                694      BNE CHECK_OP_DYNAMIC_BCHG       ;Check next routine
00001406                           695  
00001406                           696  CHECK_OP_DYNAMIC_BCHG:
00001406  3038 1000                697      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000140A  0240 F1C0                698      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
0000140E  B07C 0140                699      CMP.W #$0140,D0                 ;Compare the appropriate masked bits 
00001412  6700 00B0                700      BEQ GROUP0_INVALID              ;INVALID OP code found
00001416  6600 0002                701      BNE CHECK_OP_DYNAMIC_BSET       ;Check next routine
0000141A                           702      
0000141A                           703  CHECK_OP_DYNAMIC_BSET:
0000141A                           704  
0000141A  3038 1000                705      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000141E  0240 F1C0                706      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
00001422  B07C 01C0                707      CMP.W   #$01C0,D0               ;Compare the appropriate masked bits 
00001426  6700 0006                708      BEQ     BIT_CHECK_MOVEP         ;Check special case for MOVEP
0000142A  6600 001C                709      BNE     CHECK_OP_MOVEP          ;Check next routine
0000142E                           710  
0000142E                           711  BIT_CHECK_MOVEP:                                ;This is a special case check for MOVEP
0000142E  3038 1000                712      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001432  323C 000A                713      MOVE.W  #10,D1                  ;Prepare a 10-bit shift
00001436  E368                     714      LSL.W   D1,D0                   ;Shift out 10 bits left 
00001438  E268                     715      LSR.W   D1,D0                   ;Reposition D0 for last 6 bits
0000143A  E648                     716      LSR.W   #3,D0                   ;Shift out 3 bits right, D0 contains bits 5-3
0000143C  B07C 0001                717      CMP.W   #$1,D0                  ;Compare bits to D0
00001440  6700 0006                718      BEQ     CHECK_OP_MOVEP          ;If bits are $1 then it's addressing, goto MOVEP
00001444  6600 007E                719      BNE     GROUP0_INVALID          ;If not then it's DYNAMIC_BSET which is invalid                                                    
00001448                           720      
00001448                           721  CHECK_OP_MOVEP:
00001448  3038 1000                722      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000144C  0240 F138                723      ANDI.W #$F138,D0                ;Mask relevant bits to D0
00001450  B07C 0108                724      CMP.W #$0108,D0                 ;Compare the appropriate masked bits
00001454  6700 08A6                725      BEQ INVALID_OP                  ;INVALID OP code found
00001458  6600 0002                726      BNE CHECK_OP_ORI                ;Check next routine
0000145C                           727  
0000145C                           728  *Supported OP code checks
0000145C                           729  CHECK_OP_ORI:
0000145C  3038 1000                730      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001460  0240 FF00                731      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001464  B07C 0000                732      CMP.W   #$0000,D0               ;Compare the appropriate masked bits     
00001468  6600 000C                733      BNE     CHECK_OP_CMPI           ;Branch to next comparison if not equal
0000146C  4EB9 00001D2A            734      JSR     PRINT_OP_ORI            ;Print the OP code if equal    
00001472  6000 0056                735      BRA     GROUP0_SUCCESS          ;Finish routine
00001476                           736      
00001476                           737  CHECK_OP_CMPI:
00001476  3038 1000                738      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000147A  0240 FF00                739      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
0000147E  B07C 0C00                740      CMP.W   #$0C00,D0               ;Compare the appropriate masked bits   
00001482  6600 000C                741      BNE     CHECK_OP_STATIC_BCLR    ;Branch to next comparison if not equal       
00001486  4EB9 00001D3A            742      JSR     PRINT_OP_CMPI           ;Print the OP code if equal
0000148C  6000 003C                743      BRA     GROUP0_SUCCESS          ;Finish routine
00001490                           744      
00001490                           745  CHECK_OP_STATIC_BCLR:
00001490  3038 1000                746      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001494  0240 FF00                747      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001498  B07C 0800                748      CMP.W   #$0800,D0               ;Compare the appropriate masked bits
0000149C  6600 000C                749      BNE     CHECK_OP_DYNAMIC_BCLR   ;Branch to next comparison if not equal
000014A0  4EB9 00001D4A            750      JSR     PRINT_OP_STATIC_BCLR    ;Print the OP code if equal
000014A6  6000 0022                751      BRA     GROUP0_SUCCESS          ;Finish routine
000014AA                           752      
000014AA                           753  CHECK_OP_DYNAMIC_BCLR:
000014AA  3038 1000                754      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000014AE  0240 0180                755      ANDI.W  #$0180,D0               ;Mask relevant bits to D0
000014B2  B07C 0180                756      CMP.W   #$0180,D0               ;Compare the appropriate masked bits
000014B6  6600 000C                757      BNE     GROUP0_INVALID          ;If not equal this must be an invalid OP code
000014BA  4EB9 00001D5A            758      JSR     PRINT_OP_DYNAMIC_BCLR   ;Print the OP code if equal
000014C0  6000 0008                759      BRA     GROUP0_SUCCESS          ;Finish routine
000014C4                           760  
000014C4                           761  GROUP0_INVALID:                     ;Checks have been finished, invalid OP code has been found
000014C4  4EB9 00001CFC            762      JSR INVALID_OP                  ;INVALID OP code found
000014CA                           763      
000014CA                           764  GROUP0_SUCCESS:                     ;Checks have been finished,a valid OP code has been found
000014CA  4CDF 0003                765      MOVEM.L (SP)+,D0-D1             ;Restore registers
000014CE  4E75                     766      RTS                             ;Return to stack
000014D0                           767      
000014D0                           768  * GROUP_1                      
000014D0                           769  ********************************************************************************
000014D0                           770  * Supported OP code:
000014D0                           771  * MOVE.B: $1, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000014D0                           772  ********************************************************************************
000014D0                           773  C_GROUP_1:
000014D0  48E7 C000                774      MOVEM.L D0-D1,-(SP)             ;Save registers to stack
000014D4                           775  
000014D4                           776  CHECK_OP_MOVE_B:
000014D4  3038 1000                777      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0          
000014D8  0240 F000                778      ANDI.W  #$F000,D0               ;Mask relevant bits to D0
000014DC  B07C 1000                779      CMP.W   #$1000,D0               ;Compare the appropriate masked bits 
000014E0  6600 000C                780      BNE     GROUP1_INVALID          ;Invalid OP code has been found
000014E4  4EB9 00001D6A            781      JSR     PRINT_OP_MOVEB          ;Print the OP code if equal
000014EA  6000 0008                782      BRA     GROUP1_SUCCESS          ;Finish routine
000014EE                           783      
000014EE                           784  GROUP1_INVALID:
000014EE  4EB9 00001CFC            785      JSR INVALID_OP                  ;Invalid OP code found
000014F4                           786      
000014F4                           787  GROUP1_SUCCESS:
000014F4  4CDF 0003                788      MOVEM.L (SP)+,D0-D1             ;Restore register
000014F8  4E75                     789      RTS                             ;Return to stack
000014FA                           790  * GROUP_2
000014FA                           791  ********************************************************************************
000014FA                           792  * Supported OP codes:
000014FA                           793  * MOVEA.L: $2, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
000014FA                           794  * MOVE.L: $2, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000014FA                           795  ********************************************************************************
000014FA                           796  C_GROUP_2:
000014FA  48E7 E000                797      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
000014FE                           798  
000014FE                           799  CHECK_OP_MOVEA_L:
000014FE  3038 1000                800      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0  
00001502  0240 F000                801      ANDI.W #$F000,D0                ;Mask relevant bits to D0
00001506  B07C 2000                802      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
0000150A  4EF9 00001510            803      JMP FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
00001510                           804      
00001510                           805  FIND_MOVEA_L_DIFFERENCE:            ;Finds difference between MOVEA and MOVE
00001510  3038 1000                806      MOVE.W   CUR_OP_CODE,D0         ;Move current OP code into D0
00001514  323C 0007                807      MOVE.W   #7,D1                  ;Prepare 7 bit shift to D1
00001518  E368                     808      LSL.W    D1,D0                  ;Truncate to find the 3 address mode bits
0000151A  E268                     809      LSR.W    D1,D0                  ;Reposition the bits
0000151C  323C 0006                810      MOVE.W   #6,D1                  ;Prepare 6 bit shift to D1
00001520  E268                     811      LSR.W    D1,D0                  ;Truncate to shift 3 bits to a register
00001522  3400                     812      MOVE.W   D0,D2                  ;Move 3 address mode bits into D6
00001524  B47C 0001                813      CMP.W   #$1,D2                  ;Check if the address mode value is MOVEA
00001528  6600 000C                814      BNE     CHECK_OP_MOVE_L         ;Branch if not equal to check MOVE
0000152C  4EB9 00001D7A            815      JSR     PRINT_OP_MOVEA_L        ;Print the OP code if it's a match
00001532  6000 0022                816      BRA     GROUP2_SUCCESS          ;Finish routine
00001536                           817      
00001536                           818      
00001536                           819  CHECK_OP_MOVE_L:
00001536  3038 1000                820      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000153A  0240 F000                821      ANDI.W #$F000,D0                ;Mask relevant bits to D0
0000153E  B07C 2000                822      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
00001542  6600 000C                823      BNE GROUP2_INVALID              ;If not equal, OP code is invalid
00001546  4EB9 00001D8A            824      JSR PRINT_OP_MOVE_L             ;Print out MOVE.L
0000154C  6000 0008                825      BRA GROUP2_SUCCESS              ;Finish routine
00001550                           826      
00001550                           827  GROUP2_INVALID:    
00001550  4EB9 00001CFC            828      JSR INVALID_OP                  ;Invalid OP code found
00001556                           829      
00001556                           830  GROUP2_SUCCESS:
00001556  4CDF 0003                831      MOVEM.L (SP)+,D0-D1             ;Restore register
0000155A  4E75                     832      RTS                             ;Return to stack
0000155C                           833  * GROUP_3
0000155C                           834  ********************************************************************************
0000155C                           835  * Supported OP codes:
0000155C                           836  * MOVEA.W: $3, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
0000155C                           837  * MOVE.W: $3, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
0000155C                           838  ********************************************************************************
0000155C                           839  C_GROUP_3:
0000155C  48E7 E000                840      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
00001560                           841      
00001560                           842  CHECK_OP_MOVEA_W:
00001560  3038 1000                843      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001564  0240 F000                844      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00001568  B07C 3000                845      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
0000156C  4EF9 00001572            846      JMP      FIND_MOVEA_W_DIFF     ;Custom routine to differentiate MOVE and MOVEA
00001572                           847  
00001572                           848      
00001572                           849  FIND_MOVEA_W_DIFF:                 ;Finds difference between MOVEA and MOVE
00001572  3038 1000                850      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001576  323C 0007                851      MOVE.W   #7,D1                 ;Prepare 7 bit shift to D1
0000157A  E368                     852      LSL.W    D1,D0                 ;Truncate to find the 3 address mode bits
0000157C  E268                     853      LSR.W    D1,D0                 ;Reposition the bits
0000157E  323C 0006                854      MOVE.W   #6,D1                 ;Prepare 6 bit shift to D1
00001582  E268                     855      LSR.W    D1,D0                 ;Truncate to shift 3 bits to a register
00001584  3400                     856      MOVE.W   D0,D2                 ;Move 3 address mode bits into D6
00001586  B47C 0001                857      CMP.W    #$1,D2                ;Check if the address mode value is MOVEA
0000158A  6600 000C                858      BNE      CHECK_OP_MOVE_W       ;If bits do not match, try MOVE 
0000158E  4EB9 00001D98            859      JSR      PRINT_OP_MOVEA_W      ;Print the OP code if it's a match
00001594  6000 0022                860      BRA      GROUP3_SUCCESS        ;Finish routine
00001598                           861      
00001598                           862  CHECK_OP_MOVE_W:
00001598  3038 1000                863      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
0000159C  0240 F000                864      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
000015A0  B07C 3000                865      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
000015A4  6600 000C                866      BNE      GROUP3_INVALID        ;INVALID OP code found
000015A8  4EB9 00001DA8            867      JSR      PRINT_OP_MOVE_W       ;Print the OP code if it's a match
000015AE  6000 0008                868      BRA      GROUP3_SUCCESS        ;Finish routine
000015B2                           869      
000015B2                           870  GROUP3_INVALID:
000015B2  4EB9 00001CFC            871      JSR INVALID_OP                 ;INVALID OP code found
000015B8                           872  
000015B8                           873  GROUP3_SUCCESS:
000015B8  4CDF 0007                874      MOVEM.L (SP)+,D0-D2            ;Restore registers from stack
000015BC  4E75                     875      RTS                            ;Return to stack
000015BE                           876  
000015BE                           877  * GROUP_4
000015BE                           878  ********************************************************************************
000015BE                           879  * Supported OP codes:
000015BE                           880  * LEA: $4, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
000015BE                           881  * JSR: $4E, 7-6 %10, 5-3 EA Mode, 2-0 EA Reg 
000015BE                           882  * RTS: $4E75
000015BE                           883  * NEG: $44, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
000015BE                           884  * MOVEM: $4, 11 %1, 10 %D, 9-7 %001, 6 S, 5-3 EA Mode, 2-0 EA Reg
000015BE                           885  * %D = 0 , Register to Memory, 1 Memory to Register
000015BE                           886  * Unsupported OP codes: MOVE_FROM_SR, MOVE_TO_CCR, MOVE_TO_SR, NEGX, CLR, NOT
000015BE                           887  * EXT, NBCD, SWAP, PEA, ILLEGAL, TAS, TST, TRAP, LINK, UNLK, MOVE_USP, RESET,
000015BE                           888  * NOP, STOP, RTE, TRAPV, RTR, JMP, CHK
000015BE                           889  ********************************************************************************
000015BE                           890  C_GROUP_4:
000015BE  2F00                     891      MOVE.L  D0,-(SP)            ;Save registers
000015C0                           892      
000015C0                           893  *Unsupported OP codes to check that are full static bits
000015C0                           894  CHECK_OP_STOP:
000015C0  3038 1000                895      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000015C4  B07C 4E72                896      CMP.W  #$4E72,D0                ;Compare the appropriate bits
000015C8  6700 0266                897      BEQ    GROUP4_INVALID           ;INVALID OP code found
000015CC  6600 0002                898      BNE    CHECK_OP_RESET           ;Check next OP code
000015D0                           899      
000015D0                           900  CHECK_OP_RESET:
000015D0  3038 1000                901      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000015D4  B07C 4E70                902      CMP.W  #$4E70,D0                ;Compare the appropriate bits
000015D8  6700 0256                903      BEQ    GROUP4_INVALID           ;INVALID OP code found
000015DC  6600 0002                904      BNE    CHECK_OP_NOP             ;Check next OP code
000015E0                           905      
000015E0                           906  CHECK_OP_NOP:
000015E0  3038 1000                907      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000015E4  B07C 4E71                908      CMP.W  #$4E71,D0                ;Compare the appropriate bits
000015E8  6700 0246                909      BEQ    GROUP4_INVALID           ;INVALID OP code found
000015EC  6600 0002                910      BNE    CHECK_OP_ILLEGAL         ;Check next OP code
000015F0                           911      
000015F0                           912  CHECK_OP_ILLEGAL:
000015F0  3038 1000                913      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000015F4  B07C 4AFC                914      CMP.W  #$4AFC,D0                ;Compare the appropriate bits
000015F8  6700 0236                915      BEQ    GROUP4_INVALID           ;INVALID OP code found
000015FC  6600 0002                916      BNE    CHECK_OP_RTE             ;Check next OP code
00001600                           917      
00001600                           918  CHECK_OP_RTE:    
00001600  3038 1000                919      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001604  B07C 4E73                920      CMP.W #$4E73,D0                 ;Compare the appropriate bits
00001608  6700 0226                921      BEQ   GROUP4_INVALID            ;INVALID OP code found
0000160C  6600 0002                922      BNE   CHECK_OP_TRAPV            ;Check next OP code
00001610                           923      
00001610                           924  CHECK_OP_TRAPV:
00001610  3038 1000                925      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001614  B07C 4E76                926      CMP.W  #$4E76,D0                ;Compare the appropriate bits
00001618  6700 0216                927      BEQ    GROUP4_INVALID           ;INVALID OP code found
0000161C  6600 0002                928      BNE    CHECK_OP_RTR             ;Check next OP code
00001620                           929      
00001620                           930  CHECK_OP_RTR:
00001620  3038 1000                931      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001624  B07C 4E77                932      CMP.W #$4E77,D0                 ;Compare the appropriate bits
00001628  6700 0206                933      BEQ    GROUP4_INVALID           ;INVALID OP code found
0000162C  6600 0002                934      BNE    CHECK_OP_MOVE_FROM_SR    ;Check next OP code
00001630                           935  
00001630                           936  
00001630                           937  *Unsupported OP codes to check that have partial static bits
00001630                           938  CHECK_OP_MOVE_FROM_SR:
00001630  3038 1000                939      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001634  0240 FFC0                940      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001638  B07C 40C0                941      CMP.W  #$40C0,D0                ;Compare the appropriate masked bits
0000163C  6700 01F2                942      BEQ    GROUP4_INVALID           ;INVALID OP code found  
00001640  6600 0002                943      BNE    CHECK_OP_MOVE_TO_CCR     ;Check next OP code
00001644                           944      
00001644                           945  CHECK_OP_MOVE_TO_CCR:
00001644  3038 1000                946      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001648  0240 FFC0                947      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
0000164C  B07C 44C0                948      CMP.W  #$44C0,D0                ;Compare the appropriate masked bits
00001650  6700 01DE                949      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001654  6600 0002                950      BNE    CHECK_OP_MOVE_TO_SR      ;Check next OP code
00001658                           951      
00001658                           952  CHECK_OP_MOVE_TO_SR:
00001658  3038 1000                953      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000165C  0240 FFC0                954      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001660  B07C 46C0                955      CMP.W  #$46C0,D0                ;Compare the appropriate masked bits
00001664  6700 01CA                956      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001668  6600 0002                957      BNE    CHECK_OP_NEGX            ;Check next OP code
0000166C                           958      
0000166C                           959  CHECK_OP_NEGX:
0000166C  3038 1000                960      MOVE.W CUR_OP_CODE,D0            ;Move current instruction set into D0
00001670  0240 FF00                961      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001674  B07C 4000                962      CMP.W  #$4000,D0                ;Compare the appropriate masked bits
00001678  6700 01B6                963      BEQ    GROUP4_INVALID           ;INVALID OP code found
0000167C  6600 0002                964      BNE    CHECK_OP_CLR             ;Check next OP code
00001680                           965      
00001680                           966  CHECK_OP_CLR:
00001680  3038 1000                967      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001684  0240 FF00                968      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001688  B07C 4200                969      CMP.W  #$4200,D0                ;Compare the appropriate masked bits
0000168C  6700 01A2                970      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001690  6600 0002                971      BNE    CHECK_OP_NOT             ;Check next OP code
00001694                           972      
00001694                           973  CHECK_OP_NOT:
00001694  3038 1000                974      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001698  0240 FF00                975      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
0000169C  B07C 4600                976      CMP.W  #$4600,D0                ;Compare the appropriate masked bits
000016A0  6700 018E                977      BEQ    GROUP4_INVALID           ;INVALID OP code found
000016A4  6600 0002                978      BNE    CHECK_OP_EXT             ;Check next OP code
000016A8                           979      
000016A8                           980  CHECK_OP_EXT:
000016A8  3038 1000                981      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000016AC  0240 FF80                982      ANDI.W #$FF80,D0                ;Mask relevant bits to D0
000016B0  B07C 4880                983      CMP.W  #$4880,D0                ;Compare the appropriate masked bits
000016B4  6700 017A                984      BEQ    GROUP4_INVALID           ;INVALID OP code BIT_CHECK_EXT
000016B8  6600 001C                985      BNE    CHECK_OP_NBCD            ;Check next OP code
000016BC                           986  
000016BC                           987  BIT_CHECK_EXT:    
000016BC  3038 1000                988      MOVE.W CUR_OP_CODE,D0           ;This is a special case to check against MOVEM
000016C0  323C 000A                989      MOVE.W #10,D1
000016C4  E368                     990      LSL.W  D1,D0
000016C6  E068                     991      LSR.W  D0,D0
000016C8  E648                     992      LSR.W  #3,D0
000016CA  B078 0000                993      CMP.W  %000,D0
000016CE  6700 0160                994      BEQ    GROUP4_INVALID           ;This means that this OP code is EXT
000016D2  6600 0142                995      BNE    CHECK_OP_MOVEM           ;This is the only other possibility 
000016D6                           996      
000016D6                           997  CHECK_OP_NBCD:
000016D6  3038 1000                998      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000016DA  0240 FFC0                999      ANDI.W #$FFC0,D0            
000016DE  B07C 4800               1000      CMP.W  #$4800,D0
000016E2  6700 014C               1001      BEQ    GROUP4_INVALID
000016E6  6600 0002               1002      BNE    CHECK_OP_SWAP
000016EA                          1003      
000016EA                          1004  CHECK_OP_SWAP:                  ; This must go before CHECK_OP PEA as first 3 nibbles can be equivalent
000016EA  3038 1000               1005      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000016EE  0240 FF48               1006      ANDI.W #$FF48,D0
000016F2  B07C 4840               1007      CMP.W  #$4840,D0
000016F6  6700 0138               1008      BEQ    GROUP4_INVALID
000016FA  6600 0002               1009      BNE    CHECK_OP_PEA
000016FE                          1010   
000016FE                          1011  CHECK_OP_PEA:               ; This must go after CHECK_OP_SWAP as first 3 nibbles can be equivalent
000016FE  3038 1000               1012      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001702  0240 FF40               1013      ANDI.W #$FF40,D0
00001706  B07C 4840               1014      CMP.W  #$4840,D0
0000170A  6700 0124               1015      BEQ    GROUP4_INVALID
0000170E  6600 0002               1016      BNE    CHECK_OP_TAS
00001712                          1017      
00001712                          1018  CHECK_OP_TAS:
00001712  3038 1000               1019      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001716  0240 FFC0               1020      ANDI.W #$FFC0,D0
0000171A  B07C 4AC0               1021      CMP.W  #$4AC0,D0
0000171E  6700 0110               1022      BEQ    GROUP4_INVALID
00001722  6600 0002               1023      BNE    CHECK_OP_TST
00001726                          1024  
00001726                          1025  CHECK_OP_TST:               ; This must go after CHECK_OP_TAS as first 2 nibbles are equivalent
00001726  3038 1000               1026      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000172A  0240 FF00               1027      ANDI.W #$FF00,D0
0000172E  B07C 4A00               1028      CMP.W  #$4A00,D0
00001732  6700 00FC               1029      BEQ    GROUP4_INVALID
00001736  6600 0002               1030      BNE    CHECK_OP_TRAP
0000173A                          1031      
0000173A                          1032  CHECK_OP_TRAP:
0000173A  3038 1000               1033      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000173E  0240 FFF0               1034      ANDI.W #$FFF0,D0
00001742  B07C 4E40               1035      CMP.W  #$4E40,D0
00001746  6700 00E8               1036      BEQ    GROUP4_INVALID
0000174A  6600 0002               1037      BNE    CHECK_OP_LINK
0000174E                          1038      
0000174E                          1039  CHECK_OP_LINK:
0000174E  3038 1000               1040      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001752  0240 FFF8               1041      ANDI.W #$FFF8,D0
00001756  B07C 4E50               1042      CMP.W  #$4E50,D0
0000175A  6700 00D4               1043      BEQ    GROUP4_INVALID
0000175E  6600 0002               1044      BNE    CHECK_OP_UNLK
00001762                          1045  
00001762                          1046  CHECK_OP_UNLK:
00001762  3038 1000               1047      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001766  0240 FFF8               1048      ANDI.W #$FFF8,D0
0000176A  B07C 4E58               1049      CMP.W  #$4E58,D0
0000176E  6700 00C0               1050      BEQ    GROUP4_INVALID
00001772  6600 0002               1051      BNE    CHECK_OP_MOVE_USP
00001776                          1052      
00001776                          1053  CHECK_OP_MOVE_USP:
00001776  3038 1000               1054      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000177A  0240 FFF0               1055      ANDI.W #$FFF0,D0
0000177E  B07C 4E60               1056      CMP.W  #$4E60,D0
00001782  6700 00AC               1057      BEQ    GROUP4_INVALID
00001786  6600 0002               1058      BNE    CHECK_OP_JMP
0000178A                          1059  
0000178A                          1060  CHECK_OP_JMP:
0000178A  3038 1000               1061       MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000178E  0240 FFC0               1062       ANDI.W #$FFC0,D0
00001792  B07C 4EC0               1063       CMP.W  #$4EC0,D0
00001796  6700 0098               1064       BEQ    GROUP4_INVALID
0000179A  6600 0002               1065       BNE    CHECK_OP_CHK
0000179E                          1066       
0000179E                          1067  CHECK_OP_CHK:
0000179E  3038 1000               1068      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
000017A2  0240 F1C0               1069      ANDI.W  #$F1C0,D0
000017A6  B07C 4180               1070      CMP.W   #$4180,D0
000017AA  6700 0550               1071      BEQ     INVALID_OP
000017AE  6600 0002               1072      BNE     CHECK_OP_RTS
000017B2                          1073  
000017B2                          1074  *Supported OP codes to check
000017B2                          1075  CHECK_OP_RTS:
000017B2  3038 1000               1076      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000017B6  B07C 4E75               1077      CMP.W  #$4E75,D0
000017BA  6600 000C               1078      BNE    CHECK_OP_LEA
000017BE  4EB9 00001DC6           1079      JSR    PRINT_OP_RTS
000017C4  6000 0070               1080      BRA    GROUP4_SUCCESS              ;Finish routine
000017C8                          1081   
000017C8                          1082  CHECK_OP_LEA:
000017C8  3038 1000               1083      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000017CC  0240 F1C0               1084      ANDI.W #$F1C0,D0
000017D0  B07C 41C0               1085      CMP.W  #$41C0,D0
000017D4  6600 000C               1086      BNE    CHECK_OP_JSR
000017D8  4EB9 00001DD6           1087      JSR    PRINT_OP_LEA
000017DE  6000 0056               1088      BRA    GROUP4_SUCCESS              ;Finish routine
000017E2                          1089   
000017E2                          1090  CHECK_OP_JSR:
000017E2  3038 1000               1091      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000017E6  0240 FFC0               1092      ANDI.W #$FFC0,D0
000017EA  B07C 4E80               1093      CMP.W  #$4E80,D0
000017EE  6600 000C               1094      BNE    CHECK_OP_NEG
000017F2  4EB9 00001DB6           1095      JSR    PRINT_OP_JSR
000017F8  6000 003C               1096      BRA    GROUP4_SUCCESS              ;Finish routine
000017FC                          1097      
000017FC                          1098  CHECK_OP_NEG:
000017FC  3038 1000               1099      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001800  0240 FF00               1100      ANDI.W #$FF00,D0
00001804  B07C 4400               1101      CMP.W  #$4400,D0
00001808  6600 000C               1102      BNE    CHECK_OP_MOVEM
0000180C  4EB9 00001DE6           1103      JSR    PRINT_OP_NEG
00001812  6000 0022               1104      BRA    GROUP4_SUCCESS              ;Finish routine
00001816                          1105  
00001816                          1106      
00001816                          1107  **************** COME BACK TO FINISH UP SIZE **********************************
00001816                          1108  CHECK_OP_MOVEM:
00001816  3038 1000               1109      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
0000181A  0240 FB80               1110      ANDI.W #$FB80,D0
0000181E  B07C 4880               1111      CMP.W  #$4880,D0
00001822  6600 04D8               1112      BNE    INVALID_OP       ;If no code is found, it is invalid
00001826  4EB9 00001DF6           1113      JSR    PRINT_OP_MOVEM_W
0000182C  6000 0008               1114      BRA    GROUP4_SUCCESS
00001830                          1115      
00001830                          1116  GROUP4_INVALID:
00001830  4EB9 00001CFC           1117      JSR INVALID_OP
00001836                          1118  
00001836                          1119  GROUP4_SUCCESS:
00001836  4CDF 0001               1120      MOVEM.L (SP)+,D0 
0000183A  4E75                    1121      RTS
0000183C                          1122  * GROUP_5
0000183C                          1123  ********************************************************************************
0000183C                          1124  * Supported OP code:
0000183C                          1125  * SUBQ: $5, 11-9 DATA, 8 %1, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
0000183C                          1126  * Unsupported OP codes: ADDQ, Scc, DBcc
0000183C                          1127  * Validation checking:
0000183C                          1128  * Check against, ADDQ, Scc, DBcc
0000183C                          1129  ********************************************************************************
0000183C                          1130  C_GROUP_5:
0000183C  48E7 8000               1131      MOVEM.L D0,-(SP)         ;Save registers to stack
00001840                          1132  *Unsupported OP codes
00001840                          1133  CHECK_OP_DBcc:               ;These are ordered first due to checking bits 7-6
00001840  3038 1000               1134      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001844  0240 F0C8               1135      ANDI.W #$F0C8,D0
00001848  B07C 50C8               1136      CMP.W  #$50C8,D0
0000184C  6700 0048               1137      BEQ    GROUP5_INVALID
00001850  6600 0002               1138      BNE    CHECK_OP_Scc 
00001854                          1139  
00001854                          1140  CHECK_OP_Scc:
00001854  3038 1000               1141      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001858  0240 F0C0               1142      ANDI.W #$F0C0,D0 
0000185C  B07C 50C0               1143      CMP.W  #$50C0,D0
00001860  6700 0034               1144      BEQ     GROUP5_INVALID
00001864  6600 0002               1145      BNE     CHECK_OP_ADDQ
00001868                          1146  
00001868                          1147  CHECK_OP_ADDQ:
00001868  3038 1000               1148      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000186C  0240 F100               1149      ANDI.W #$F100,D0
00001870  B07C 5000               1150      CMP.W  #$5000,D0
00001874  6700 0020               1151      BEQ    GROUP5_INVALID
00001878  6600 0002               1152      BNE    CHECK_OP_SUBQ
0000187C                          1153  
0000187C                          1154  *Supported OP code   
0000187C                          1155  CHECK_OP_SUBQ     
0000187C  3038 1000               1156      MOVE.W  CUR_OP_CODE,D0  ;Actual check for SUBQ
00001880  0240 F100               1157      ANDI.W #$F100,D0        ;Bitmask check for SUBQ
00001884  B07C 5100               1158      CMP.W  #$5100,D0        ;Compare the proper value
00001888  6600 000C               1159      BNE    GROUP5_INVALID       ;Else the operand is invalid
0000188C  4EB9 00001E16           1160      JSR    PRINT_OP_SUBQ    ;If equal print it out
00001892  6000 0008               1161      BRA    GROUP5_SUCCESS   ;Finish routine
00001896                          1162      
00001896                          1163  GROUP5_INVALID: 
00001896  4EB9 00001CFC           1164      JSR INVALID_OP          ;INVALID OP has been found
0000189C                          1165  
0000189C                          1166  GROUP5_SUCCESS:
0000189C  4CDF 0001               1167      MOVEM.L (SP)+,D0        ;Restore registers from stack
000018A0  4E75                    1168      RTS                     ;Return to stack
000018A2                          1169      
000018A2                          1170  * GROUP_6
000018A2                          1171  ********************************************************************************
000018A2                          1172  * Supported OP codes
000018A2                          1173  * BRA: $60, 7-0 8-Bit Displacement
000018A2                          1174  * Bcc: $6, 11-8 Condition, 7-0 8-Bit Displacement
000018A2                          1175  *   Branch: <Condition>   
000018A2                          1176  *   BCS: %0101          
000018A2                          1177  *   BGE: %1100      
000018A2                          1178  *   BLT: %1101  
000018A2                          1179  *   BVC: %1000
000018A2                          1180  *   
000018A2                          1181  *   MOVE.W #%0110010100000000   ;BCS
000018A2                          1182  *   MOVE.W #%0110110001010101   ;BGE
000018A2                          1183  *   MVE.W #%0110110110101010    ;BLT
000018A2                          1184  *   MOVE.W #%0110100001010101   ;BVC
000018A2                          1185  * Unsupported OP code: BSR
000018A2                          1186  ********************************************************************************
000018A2                          1187  C_GROUP_6:
000018A2  48E7 8000               1188      MOVEM.L D0,-(SP)        ;Save register to stack
000018A6                          1189  *Unsupported OP code
000018A6                          1190  CHECK_OP_BSR:
000018A6  3038 1000               1191      MOVE.W  CUR_OP_CODE,D0
000018AA  0240 FF00               1192      ANDI.W  #$FF00,D0
000018AE  B07C 6100               1193      CMP.W   #$6100,D0
000018B2  6700 0088               1194      BEQ     GROUP6_INVALID
000018B6  6600 0002               1195      BNE     CHECK_OP_BRA
000018BA                          1196      
000018BA                          1197  *Supported OP codes
000018BA                          1198  CHECK_OP_BRA:
000018BA  3038 1000               1199      MOVE.W  CUR_OP_CODE,D0   ;Move current instruction set into D0       
000018BE  0240 FF00               1200      ANDI.W  #$FF00,D0
000018C2  B07C 6000               1201      CMP.W   #$6000,D0
000018C6  6600 000C               1202      BNE     CHECK_OP_BCS
000018CA  4EB9 00001E66           1203      JSR     PRINT_OP_BRA
000018D0  6000 0070               1204      BRA     GROUP6_SUCCESS
000018D4                          1205      
000018D4                          1206  CHECK_OP_BCS:
000018D4  3038 1000               1207      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000018D8  0240 FF00               1208      ANDI.W #$FF00,D0
000018DC  B07C 6500               1209      CMP.W  #$6500,D0 
000018E0  6600 000C               1210      BNE    CHECK_OP_BGE
000018E4  4EB9 00001E26           1211      JSR    PRINT_OP_BCS
000018EA  6000 0056               1212      BRA    GROUP6_SUCCESS
000018EE                          1213  
000018EE                          1214      
000018EE                          1215  CHECK_OP_BGE:
000018EE  3038 1000               1216      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000018F2  0240 FF00               1217      ANDI.W #$FF00,D0
000018F6  B07C 6C00               1218      CMP.W  #$6C00,D0 
000018FA  6600 000C               1219      BNE    CHECK_OP_BLT
000018FE  4EB9 00001E36           1220      JSR    PRINT_OP_BGE
00001904  6000 003C               1221      BRA    GROUP6_SUCCESS
00001908                          1222      
00001908                          1223      
00001908                          1224  CHECK_OP_BLT:
00001908  3038 1000               1225      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
0000190C  0240 FF00               1226      ANDI.W #$FF00,D0
00001910  B07C 6D00               1227      CMP.W  #$6D00,D0 
00001914  6600 000C               1228      BNE    CHECK_OP_BVC
00001918  4EB9 00001E46           1229      JSR    PRINT_OP_BLT
0000191E  6000 0022               1230      BRA    GROUP6_SUCCESS
00001922                          1231      
00001922                          1232  CHECK_OP_BVC:
00001922  3038 1000               1233      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001926  0240 FF00               1234      ANDI.W #$FF00,D0
0000192A  B07C 6800               1235      CMP.W  #$6800,D0 
0000192E  6600 000C               1236      BNE    GROUP6_INVALID
00001932  4EB9 00001E56           1237      JSR    PRINT_OP_BVC
00001938  6000 0008               1238      BRA    GROUP6_SUCCESS
0000193C                          1239      
0000193C                          1240  GROUP6_INVALID:
0000193C  4EB9 00001CFC           1241      JSR    INVALID_OP    
00001942                          1242          
00001942                          1243  GROUP6_SUCCESS:
00001942  4CDF 0001               1244      MOVEM.L (SP)+,D0
00001946  4E75                    1245      RTS
00001948                          1246      
00001948                          1247  *GROUP_7
00001948                          1248  ********************************************************************************
00001948                          1249  * Currently no OP codes here are supported. MOVEQ is the only code in this group
00001948                          1250  * Unsupported OP code: MOVEQ
00001948                          1251  ********************************************************************************
00001948                          1252  C_GROUP_7:
00001948  48E7 8000               1253      MOVEM.L D0,-(SP)        ;Save register to stack
0000194C                          1254      
0000194C                          1255  CHECK_OP_MOVEQ
0000194C  3038 1000               1256      MOVE.W CUR_OP_CODE,D0
00001950  0240 F100               1257      ANDI.W #$F100,D0
00001954  B07C 7000               1258      CMP.W  #$7000,D0
00001958  6600 0006               1259      BNE    GROUP7_INVALID
0000195C  6700 0008               1260      BEQ    GROUP7_SUCCESS
00001960                          1261      
00001960                          1262  GROUP7_INVALID:
00001960  4EB9 00001CFC           1263      JSR INVALID_OP
00001966                          1264      
00001966                          1265  GROUP7_SUCCESS:    
00001966  4CDF 0001               1266      MOVEM.L (SP)+,D0
0000196A  4E75                    1267      RTS
0000196C                          1268  * GROUP_8
0000196C                          1269  ********************************************************************************
0000196C                          1270  * Supported OP code:
0000196C                          1271  * DIVS: $8, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
0000196C                          1272  * OR: $80, 7-6 Size, 5-3 EA Mode, 2-0 EA Register
0000196C                          1273  * Unsupported OP codes: DIVU, SBCD
0000196C                          1274  ********************************************************************************
0000196C                          1275  C_GROUP_8:
0000196C  48E7 8000               1276      MOVEM.L D0,-(SP)
00001970                          1277  *Unsupported OP codes
00001970                          1278  CHECK_OP_DIVU:
00001970  3038 1000               1279      MOVE.W  CUR_OP_CODE,D0   ;Move current instruction set into D0
00001974  0240 F1C0               1280      ANDI.W  #$F1C0,D0
00001978  B07C 80C0               1281      CMP.W   #$80C0,D0
0000197C  6700 0038               1282      BEQ     GROUP8_INVALID
00001980  6600 0002               1283      BNE     CHECK_OP_SBCD 
00001984                          1284  
00001984                          1285  CHECK_OP_SBCD:
00001984  3038 1000               1286      MOVE.W  CUR_OP_CODE,D0   ;Move current instruction set into D0
00001988  0240 F1F0               1287      ANDI.W  #$F1F0,D0
0000198C  B07C 8100               1288      CMP.W   #$8100,D0
00001990  6700 0024               1289      BEQ     GROUP8_INVALID
00001994  6600 0002               1290      BNE     CHECK_OP_DIVS
00001998                          1291      
00001998                          1292  *Supported OP codes
00001998                          1293  CHECK_OP_DIVS:
00001998  3038 1000               1294      MOVE.W  CUR_OP_CODE,D0   ;Move current instruction set into D0
0000199C  0240 F1C0               1295      ANDI.W  #$F1C0,D0
000019A0  B07C 81C0               1296      CMP.W   #$81C0,D0
000019A4  6700 04D0               1297      BEQ     PRINT_OP_DIVS
000019A8  6600 0002               1298      BNE     CHECK_OP_OR
000019AC                          1299      
000019AC                          1300  CHECK_OP_OR:              ;At this point only remaining $8 code is OR
000019AC  4EB9 00001E86           1301      JSR     PRINT_OP_OR
000019B2  6000 0008               1302      BRA     GROUP8_SUCCESS
000019B6                          1303  GROUP8_INVALID:
000019B6  4EB9 00001CFC           1304       JSR    INVALID_OP
000019BC                          1305       
000019BC                          1306  GROUP8_SUCCESS:
000019BC  4CDF 0001               1307       MOVEM.L (SP)+,D0
000019C0  4E75                    1308       RTS
000019C2                          1309       
000019C2                          1310  * GROUP_9                      
000019C2                          1311  ********************************************************************************
000019C2                          1312  * Supported OP code:
000019C2                          1313  * SUB: $9, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
000019C2                          1314  * Unsupported OP codes: SUBX, SUBA
000019C2                          1315  ********************************************************************************
000019C2                          1316  C_GROUP_9:
000019C2  48E7 C000               1317      MOVEM.L D0-D1,-(SP)     ;Save the registers
000019C6                          1318  CHECK_OP_SUBA:             ;Check SUBA first as it has static bits
000019C6  3038 1000               1319      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
000019CA  0240 F0C0               1320      ANDI.W  #$F0C0,D0
000019CE  B07C 90C0               1321      CMP.W   #$90C0,D0
000019D2  6700 0328               1322      BEQ     INVALID_OP
000019D6  6600 0002               1323      BNE     CHECK_OP_SUBX
000019DA                          1324  
000019DA                          1325  CHECK_OP_SUBX:
000019DA  3038 1000               1326      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
000019DE  0240 F130               1327      ANDI.W  #$F130,D0
000019E2  B07C 9100               1328      CMP.W   #$9100,D0
000019E6  6700 0006               1329      BEQ     BIT_CHECK_SUBX
000019EA  6600 0026               1330      BNE     GROUP9_INVALID     ;Cannot be a valid OP code here
000019EE                          1331      
000019EE                          1332  BIT_CHECK_SUBX:    
000019EE  3038 1000               1333      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D0
000019F2  323C 0007               1334      MOVE.W  #7,D1               ;Prepare a shift of 7 bits into D1
000019F6  E368                    1335      LSL.W   D1,D0               ;Shift left 7 bits truncate 15-9 bits
000019F8  E268                    1336      LSR.W   D1,D0               ;Reposition D0
000019FA  E848                    1337      LSR.W   #4,D0               ;Truncate 4 right most bits to
000019FC  0240 FF18               1338      ANDI.W  #$FF18,D0           ;Compare remaining static bits
00001A00  B07C 0018               1339      CMP.W   #$0018,D0           ;If equal to this value it's SUBX
00001A04  6700 000C               1340      BEQ     GROUP9_INVALID      ;INVALID OP code found
00001A08  6600 0002               1341      BNE     CHECK_OP_SUB        ;Not can only be SUB here
00001A0C                          1342      
00001A0C                          1343  CHECK_OP_SUB:                   ;At this point only remaining $9 is SUB
00001A0C  4EF9 00001E96           1344      JMP     PRINT_OP_SUB
00001A12                          1345  
00001A12                          1346  GROUP9_INVALID:
00001A12  6000 02E8               1347      BRA     INVALID_OP
00001A16                          1348      
00001A16                          1349  GROUP9_SUCCESS:
00001A16  4CDF 0003               1350      MOVEM.L (SP)+,D0-D1         ;Restore registers
00001A1A  4E75                    1351      RTS                         ;Return to stack
00001A1C                          1352  
00001A1C                          1353  *GROUP_A
00001A1C                          1354  ********************************************************************************
00001A1C                          1355  * Currently no OP codes here are supported. There are no current OP codes here.
00001A1C                          1356  ********************************************************************************
00001A1C                          1357  C_GROUP_A:
00001A1C  4EB9 00001CFC           1358      JSR INVALID_OP
00001A22  4E75                    1359      RTS
00001A24                          1360      
00001A24                          1361  * GROUP_B                     
00001A24                          1362  ********************************************************************************
00001A24                          1363  * Supported OP codes:
00001A24                          1364  * EOR: $B, 11-9 Reg, 8 %1, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001A24                          1365  * CMP: $B, 11-9 Reg, 8 %0, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001A24                          1366  * The specific bit difference is listed 
00001A24                          1367  * Unsupported OP codes: CMPM, CMPA
00001A24                          1368  ********************************************************************************
00001A24                          1369  C_GROUP_B:
00001A24  48E7 8000               1370      MOVEM.L D0,-(SP)         ;Save current registers to stack
00001A28                          1371      
00001A28                          1372  CHECK_OP_CMPM
00001A28  3038 1000               1373      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A2C  0240 F138               1374      ANDI.W  #$F138,D0
00001A30  B07C B108               1375      CMP.W   #$B108,D0
00001A34  6700 0042               1376      BEQ     GROUPB_INVALID
00001A38  6600 0002               1377      BNE     CHECK_OP_CMPA
00001A3C                          1378      
00001A3C                          1379  CHECK_OP_CMPA:
00001A3C  3038 1000               1380      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A40  0240 F0C0               1381      ANDI.W  #$F0C0,D0
00001A44  B07C B0C0               1382      CMP.W   #$B0C0,D0
00001A48  6700 002E               1383      BEQ     GROUPB_INVALID
00001A4C  6600 0002               1384      BNE     CHECK_OP_EOR
00001A50                          1385      
00001A50                          1386  CHECK_OP_EOR:
00001A50  3038 1000               1387      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A54  0240 F100               1388      ANDI.W  #$F100,D0
00001A58  B07C B100               1389      CMP.W   #$B100,D0
00001A5C  6700 0448               1390      BEQ     PRINT_OP_EOR
00001A60  6600 0002               1391      BNE     CHECK_OP_CMP
00001A64                          1392      
00001A64                          1393  CHECK_OP_CMP:
00001A64  3038 1000               1394      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A68  0240 F100               1395      ANDI.W  #$F100,D0
00001A6C  B07C B000               1396      CMP.W   #$B000,D0
00001A70  6700 0444               1397      BEQ     PRINT_OP_CMP
00001A74  6600 0002               1398      BNE     GROUPB_INVALID
00001A78                          1399  
00001A78                          1400  GROUPB_INVALID:
00001A78  4EB9 00001CFC           1401      JSR     INVALID_OP           ;INVALID OP has been found 
00001A7E                          1402   
00001A7E                          1403  GROUPB_SUCCESS:
00001A7E  4CDF 0001               1404      MOVEM.L (SP)+,D0         ;Restore registers from stack
00001A82  4E75                    1405      RTS                      ;Return to stack
00001A84                          1406  * GROUP_C                     
00001A84                          1407  ********************************************************************************
00001A84                          1408  * Supported OP code:
00001A84                          1409  * MULS: $C, 11-8 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00001A84                          1410  * Note: EXG OP mode has to be 01000, 01001, 10001, as such can never be 11 for
00001A84                          1411  * bits 7-6
00001A84                          1412  * Unsupported OP codes: MULU, ABCD, EXG, AND
00001A84                          1413  ********************************************************************************
00001A84                          1414  C_GROUP_C:
00001A84                          1415  *Unsupported OP codes
00001A84  48E7 C000               1416      MOVEM.L D0-D1,-(SP)
00001A88                          1417      
00001A88                          1418  CHECK_OP_MULU:
00001A88  3038 1000               1419      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A8C  0240 F1C0               1420      ANDI.W  #$F1C0,D0
00001A90  B07C C0C0               1421      CMP.W   #$C0C0,D0
00001A94  6700 0078               1422      BEQ     GROUPC_INVALID
00001A98  6600 0002               1423      BNE     CHECK_OP_ABCD
00001A9C                          1424   
00001A9C                          1425  CHECK_OP_ABCD:
00001A9C  3038 1000               1426      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AA0  0240 F1F0               1427      ANDI.W  #$F1F0,D0
00001AA4  B07C C100               1428      CMP.W   #$C100,D0
00001AA8  6700 0064               1429      BEQ     GROUPC_INVALID
00001AAC  6600 0002               1430      BNE     CHECK_OP_EXG
00001AB0                          1431   
00001AB0                          1432  CHECK_OP_EXG:
00001AB0  3038 1000               1433      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AB4  0240 F130               1434      ANDI.W  #$F130,D0
00001AB8  B07C C100               1435      CMP.W   #$C100,D0
00001ABC  6700 0006               1436      BEQ     BIT_CHECK_EXG
00001AC0  6600 003C               1437      BNE     CHECK_OP_AND
00001AC4                          1438                          
00001AC4                          1439  BIT_CHECK_EXG:                 ;Checks the OP mode bits 7-6 which cannot be 11 for EXG
00001AC4  3038 1000               1440      MOVE.W  CUR_OP_CODE,D0
00001AC8  323C 0008               1441      MOVE.W  #8,D1
00001ACC  E368                    1442      LSL.W   D1,D0
00001ACE  E268                    1443      LSR.W   D1,D0
00001AD0  EC48                    1444      LSR.W   #6,D0
00001AD2  0240 FFF3               1445      ANDI.W  #$FFF3,D0
00001AD6  B07C 0003               1446      CMP.W   #$0003,D0          ;This bit then equals MULS
00001ADA  6700 000E               1447      BEQ     CHECK_OP_MULS
00001ADE  B07C 0000               1448      CMP.W   #$0000,D0          ;Second comparison to check if OP mode bit is valid
00001AE2  6700 001A               1449      BEQ     CHECK_OP_AND       ;If it's 0 it could be OP_AND
00001AE6  6600 0026               1450      BNE     GROUPC_INVALID         ;Otherwise it's EXG (01,10 op bits)
00001AEA                          1451  *Supported OP code
00001AEA                          1452  CHECK_OP_MULS:
00001AEA  3038 1000               1453      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AEE  0240 F1C0               1454      ANDI.W #$F1C0,D0
00001AF2  B07C C1C0               1455      CMP.W  #$C1C0,D0
00001AF6  6700 03CE               1456      BEQ    PRINT_OP_MULS
00001AFA  6600 0002               1457      BNE    CHECK_OP_AND          ; OP_AND is completely dynamic outside of first nibble
00001AFE                          1458  
00001AFE                          1459  *Odd completely dynamic unsupported OP code    
00001AFE                          1460  CHECK_OP_AND:                 ;This would be the only possible OP code left after CHECK_OP_MULS
00001AFE  3038 1000               1461      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B02  0240 F000               1462      ANDI.W  #$F000,D0
00001B06  B07C C000               1463      CMP.W   #$C000,D0
00001B0A  6700 0002               1464      BEQ     GROUPC_INVALID
00001B0E                          1465      
00001B0E                          1466  GROUPC_INVALID:
00001B0E  4EB9 00001CFC           1467      JSR     INVALID_OP
00001B14                          1468      
00001B14                          1469  GROUPC_SUCCESS:
00001B14  4CDF 0003               1470      MOVEM.L (SP)+,D0-D1
00001B18  4E75                    1471      RTS
00001B1A                          1472      
00001B1A                          1473  * GROUP_D                     
00001B1A                          1474  ********************************************************************************
00001B1A                          1475  * Supported OP codes:
00001B1A                          1476  * ADD: $D, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001B1A                          1477  * ADDA: $D, 11- 9 Reg, 8-6 OPMODE, 7-6 %11, 5-3 EA Mode, 2-0 EA Reg
00001B1A                          1478  * The specific bit difference is listed out in the OPMODE field.
00001B1A                          1479  * Unsupported: ADDX
00001B1A                          1480  ********************************************************************************
00001B1A                          1481  C_GROUP_D:
00001B1A  48E7 8000               1482      MOVEM.L D0,-(SP)        ;Save registers to stack
00001B1E                          1483      
00001B1E                          1484  CHECK_OP_ADDX:
00001B1E  3038 1000               1485      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B22  0240 F130               1486      ANDI.W #$F130,D0
00001B26  B07C D100               1487      CMP.W  #$D100,D0
00001B2A  6700 0024               1488      BEQ    GROUPD_INVALID
00001B2E  6600 0002               1489      BNE    CHECK_OP_ADDA
00001B32                          1490  
00001B32                          1491  CHECK_OP_ADDA:
00001B32  3038 1000               1492      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B36  0240 F0C0               1493      ANDI.W #$F0C0,D0
00001B3A  B07C D0C0               1494      CMP.W  #$D0C0,D0
00001B3E  6700 03A6               1495      BEQ    PRINT_OP_ADDA
00001B42  6600 0002               1496      BNE    CHECK_OP_ADD
00001B46                          1497  
00001B46                          1498  CHECK_OP_ADD:
00001B46  4EB9 00001ED6           1499      JSR PRINT_OP_ADD        ;Only remaining OP in $D is ADD
00001B4C  6000 0008               1500      BRA GROUPD_SUCCESS
00001B50                          1501      
00001B50                          1502  GROUPD_INVALID:
00001B50  4EB9 00001CFC           1503      JSR INVALID_OP
00001B56                          1504      
00001B56                          1505  GROUPD_SUCCESS:
00001B56  4CDF 0001               1506      MOVEM.L (SP)+,D0        ;Restore registers from stack
00001B5A  4E75                    1507      RTS                     ;Return to stack
00001B5C                          1508      
00001B5C                          1509  * GROUP_E                     
00001B5C                          1510  ********************************************************************************
00001B5C                          1511  * Supported:
00001B5C                          1512  * LSR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00001B5C                          1513  * LSL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00001B5C                          1514  * ASR: $E, $0, 8 %0, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00001B5C                          1515  * ASL: $E, $0, 8 %1, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00001B5C                          1516  * ROR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00001B5C                          1517  * ROL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00001B5C                          1518  * Count/Reg for LSR/LSL refers to shift count, where 0 = shift count of 8, 1-7 
00001B5C                          1519  * refers to the respective value when i/r = 0. If i/r = 1, data register in the 
00001B5C                          1520  * Count/Reg field specifies the shift count.  
00001B5C                          1521  * For directional bit at 8, R = 0, L = 1
00001B5C                          1522  * Count/Reg for ROR/ROL specifies rotate count instead of shift count.
00001B5C                          1523  *
00001B5C                          1524  * Split into ROT and NO_ROT groups first to make identifying easier.
00001B5C                          1525  * Unsupported: ROXL, ROXR
00001B5C                          1526  ********************************************************************************
00001B5C                          1527  C_GROUP_E:
00001B5C  48E7 8000               1528      MOVEM.L D0,-(SP)
00001B60                          1529  *Unsupported OP codes
00001B60                          1530  CHECK_OP_ROXR_NO_ROT:
00001B60  3038 1000               1531      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B64  0240 FFC0               1532      ANDI.W #$FFC0,D0
00001B68  B07C E4C0               1533      CMP.W  #$E4C0,D0
00001B6C  6700 017A               1534      BEQ    GROUPE_INVALID
00001B70  6600 0002               1535      BNE    CHECK_OP_ROXL_NO_ROT
00001B74                          1536  
00001B74                          1537  CHECK_OP_ROXL_NO_ROT:
00001B74  3038 1000               1538      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B78  0240 FFC0               1539      ANDI.W #$FFC0,D0
00001B7C  B07C E5C0               1540      CMP.W  #$E5C0,D0
00001B80  6700 0166               1541      BEQ    GROUPE_INVALID
00001B84  6600 0002               1542      BNE    CHECK_OP_ROR_NO_ROT
00001B88                          1543  
00001B88                          1544  *Supported OP codes
00001B88                          1545  CHECK_OP_ROR_NO_ROT:
00001B88  3038 1000               1546      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B8C  0240 FFC0               1547      ANDI.W #$FFC0,D0
00001B90  B07C E6C0               1548      CMP.W  #$E6C0,D0
00001B94  6600 000C               1549      BNE    CHECK_OP_ROL_NO_ROT
00001B98  4EB9 00001F46           1550      JSR    PRINT_OP_ROR
00001B9E  6000 014E               1551      BRA    GROUPE_SUCCESS
00001BA2                          1552      
00001BA2                          1553  CHECK_OP_ROL_NO_ROT:
00001BA2  3038 1000               1554      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001BA6  0240 FFC0               1555      ANDI.W #$FFC0,D0
00001BAA  B07C E7C0               1556      CMP.W  #$E7C0,D0
00001BAE  6600 000C               1557      BNE    CHECK_OP_LSR_NO_ROT
00001BB2  4EB9 00001F36           1558      JSR    PRINT_OP_ROL
00001BB8  6000 0134               1559      BRA    GROUPE_SUCCESS
00001BBC                          1560   
00001BBC                          1561  CHECK_OP_LSR_NO_ROT:
00001BBC  3038 1000               1562      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001BC0  0240 FFC0               1563      ANDI.W #$FFC0,D0
00001BC4  B07C E2C0               1564      CMP.W  #$E2C0,D0
00001BC8  6600 000C               1565      BNE    CHECK_OP_LSL_NO_ROT
00001BCC  4EB9 00001F06           1566      JSR    PRINT_OP_LSR
00001BD2  6000 011A               1567      BRA    GROUPE_SUCCESS
00001BD6                          1568  
00001BD6                          1569  CHECK_OP_LSL_NO_ROT:
00001BD6  3038 1000               1570      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001BDA  0240 FFC0               1571      ANDI.W #$FFC0,D0
00001BDE  B07C E3C0               1572      CMP.W  #$E3C0,D0
00001BE2  6600 000C               1573      BNE    CHECK_OP_ASR_NO_ROT
00001BE6  4EB9 00001EF6           1574      JSR    PRINT_OP_LSL
00001BEC  6000 0100               1575      BRA    GROUPE_SUCCESS
00001BF0                          1576  
00001BF0                          1577  CHECK_OP_ASR_NO_ROT:
00001BF0  3038 1000               1578      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001BF4  0240 FFC0               1579      ANDI.W #$FFC0,D0
00001BF8  B07C E0C0               1580      CMP.W  #$E0C0,D0
00001BFC  6600 000C               1581      BNE    CHECK_OP_ASL_NO_ROT
00001C00  4EB9 00001F16           1582      JSR    PRINT_OP_ASR
00001C06  6000 00E6               1583      BRA    GROUPE_SUCCESS
00001C0A                          1584              
00001C0A                          1585  CHECK_OP_ASL_NO_ROT:
00001C0A  3038 1000               1586      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C0E  0240 FFC0               1587      ANDI.W #$FFC0,D0
00001C12  B07C E1C0               1588      CMP.W  #$E1C0,D0
00001C16  6600 000C               1589      BNE    CHECK_OP_ROXR
00001C1A  4EB9 00001F26           1590      JSR    PRINT_OP_ASL
00001C20  6000 00CC               1591      BRA    GROUPE_SUCCESS
00001C24                          1592  
00001C24                          1593  *Unsupported OP codes
00001C24                          1594  CHECK_OP_ROXR:
00001C24  3038 1000               1595      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C28  0240 F118               1596      ANDI.W #$F118,D0
00001C2C  B07C E010               1597      CMP.W  #$E010,D0
00001C30  6700 00B6               1598      BEQ    GROUPE_INVALID
00001C34  6600 0002               1599      BNE    CHECK_OP_ROXL
00001C38                          1600      
00001C38                          1601  CHECK_OP_ROXL:
00001C38  3038 1000               1602      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C3C  0240 F118               1603      ANDI.W #$F118,D0
00001C40  B07C E110               1604      CMP.W  #$E110,D0
00001C44  6700 00A2               1605      BEQ    GROUPE_INVALID
00001C48  6600 0002               1606      BNE    CHECK_OP_ROR
00001C4C                          1607      
00001C4C                          1608  *Supported OP codes
00001C4C                          1609  CHECK_OP_ROR:
00001C4C  3038 1000               1610      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C50  0240 F118               1611      ANDI.W #$F118,D0
00001C54  B07C E018               1612      CMP.W  #$E018,D0
00001C58  6600 000C               1613      BNE    CHECK_OP_ROL
00001C5C  4EB9 00001F46           1614      JSR    PRINT_OP_ROR
00001C62  6000 008A               1615      BRA    GROUPE_SUCCESS
00001C66                          1616  
00001C66                          1617  CHECK_OP_ROL:
00001C66  3038 1000               1618      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C6A  0240 F118               1619      ANDI.W #$F118,D0
00001C6E  B07C E118               1620      CMP.W  #$E118,D0
00001C72  6600 000C               1621      BNE    CHECK_OP_LSR
00001C76  4EB9 00001F36           1622      JSR    PRINT_OP_ROL
00001C7C  6000 0070               1623      BRA    GROUPE_SUCCESS
00001C80                          1624      
00001C80                          1625  CHECK_OP_LSR:
00001C80  3038 1000               1626      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C84  0240 F118               1627      ANDI.W #$F118,D0
00001C88  B07C E008               1628      CMP.W  #$E008,D0
00001C8C  6600 000C               1629      BNE    CHECK_OP_LSL
00001C90  4EB9 00001F06           1630      JSR    PRINT_OP_LSR
00001C96  6000 0056               1631      BRA    GROUPE_SUCCESS
00001C9A                          1632  
00001C9A                          1633  CHECK_OP_LSL:
00001C9A  3038 1000               1634      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C9E  0240 F118               1635      ANDI.W #$F118,D0
00001CA2  B07C E108               1636      CMP.W  #$E108,D0
00001CA6  6600 000C               1637      BNE    CHECK_OP_ASR
00001CAA  4EB9 00001EF6           1638      JSR    PRINT_OP_LSL
00001CB0  6000 003C               1639      BRA    GROUPE_SUCCESS
00001CB4                          1640  
00001CB4                          1641  CHECK_OP_ASR:
00001CB4  3038 1000               1642      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001CB8  0240 F118               1643      ANDI.W #$F118,D0
00001CBC  B07C E000               1644      CMP.W  #$E000,D0
00001CC0  6600 000C               1645      BNE    CHECK_OP_ASL
00001CC4  4EB9 00001F16           1646      JSR    PRINT_OP_ASR
00001CCA  6000 0022               1647      BRA    GROUPE_SUCCESS
00001CCE                          1648  
00001CCE                          1649  CHECK_OP_ASL:
00001CCE  3038 1000               1650      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001CD2  0240 F118               1651      ANDI.W #$F118,D0
00001CD6  B07C E100               1652      CMP.W  #$E100,D0
00001CDA  6600 000C               1653      BNE    GROUPE_INVALID      ;Last possible OP code
00001CDE  4EB9 00001F26           1654      JSR    PRINT_OP_ASL
00001CE4  6000 0008               1655      BRA    GROUPE_SUCCESS
00001CE8                          1656  
00001CE8                          1657  GROUPE_INVALID:
00001CE8  4EB9 00001CFC           1658      JSR     INVALID_OP
00001CEE                          1659      
00001CEE                          1660  GROUPE_SUCCESS:
00001CEE  4CDF 0001               1661      MOVEM.L (SP)+,D0
00001CF2  4E75                    1662      RTS
00001CF4                          1663  * GROUP_F
00001CF4                          1664  ********************************************************************************
00001CF4                          1665  * Currently no OP codes here are supported. There are no OP codes here
00001CF4                          1666  ********************************************************************************
00001CF4                          1667  C_GROUP_F:
00001CF4  4EB9 00001CFC           1668      JSR INVALID_OP
00001CFA  4E75                    1669      RTS
00001CFC                          1670      
00001CFC                          1671  * INVALID_OP                     
00001CFC                          1672  ********************************************************************************
00001CFC                          1673  * Any value that is not covered in the above groups would be considered invalid. 
00001CFC                          1674  * The following values in the first nibble would also indicate that the 
00001CFC                          1675  * operand codes is already invalid: $7, $A, $F.
00001CFC                          1676  * For unsupported OP codes, display DATA $WXYZ   
00001CFC                          1677  * THIS WILL NEED TO BE CHANGED TO DISPLAY: 1000 DATA $WXYZ IN THE FUTURE
00001CFC                          1678  ********************************************************************************
00001CFC                          1679  INVALID_OP:  ; Prints DATA for invalid op, THIS SHOULD BE SETTING THE IS_VALID BIT TO 0
00001CFC  23FC 00001F5E 00002024  1680      MOVE.L #P_INVALID_OP, Arg_AddStrToBuffer_String
00001D06  4EB9 00001D18           1681      JSR PRINT_TO_BUFFER
00001D0C  11FC 0000 1002          1682      MOVE.B #0,IS_VALID
00001D12  4E75                    1683      RTS
00001D14                          1684      
00001D14                          1685  READ_NEXT_INSTRUCTION: ; Needs to read next instruction set {PLACEHOLDER}
00001D14  FFFF FFFF               1686      SIMHALT
00001D18                          1687  
00001D18                          1688  ********************** PRINTING ROUTINES **************************************
00001D18                          1689  * Description: These routines are to print the associated op codes, by placing
00001D18                          1690  * them in the appropriate area to the buffer
00001D18                          1691  *
00001D18                          1692  * Registers used: A1 for loading, A6 for EA parsing.
00001D18                          1693  *
00001D18                          1694  * Precondition: The relevant opcode has been identified correctly.
00001D18                          1695  *
00001D18                          1696  * Postcondition: Prints out the associated opcode to the buffer.
00001D18                          1697  
00001D18                          1698  * THIS NEEDS TO BE RETOOLED TO PRINT TO BUFFER NOT TO CONSOLE
00001D18                          1699  *******************************************************************************
00001D18                          1700  
00001D18                          1701  * Prints the loaded item into G_BUFFER
00001D18                          1702  PRINT_TO_BUFFER:
00001D18  23FC 00001004 00002028  1703      MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer
00001D22  4EB9 00002032           1704      JSR AddStrToBuffer
00001D28  4E75                    1705      RTS
00001D2A                          1706      
00001D2A                          1707  
00001D2A                          1708  ****************************** GROUP 0 **************************************** 
00001D2A                          1709  PRINT_OP_ORI:
00001D2A  23FC 00001F75 00002024  1710      MOVE.L #P_OP_ORI, Arg_AddStrToBuffer_String
00001D34  4EB8 1D18               1711      JSR PRINT_TO_BUFFER
00001D38  4E75                    1712      RTS
00001D3A                          1713  PRINT_OP_CMPI:
00001D3A  23FC 00001F79 00002024  1714      MOVE.L #P_OP_CMPI, Arg_AddStrToBuffer_String
00001D44  4EB8 1D18               1715      JSR PRINT_TO_BUFFER
00001D48  4E75                    1716      RTS
00001D4A                          1717  PRINT_OP_STATIC_BCLR:
00001D4A  23FC 00001F7E 00002024  1718      MOVE.L #P_OP_STATIC_BCLR, Arg_AddStrToBuffer_String
00001D54  4EB8 1D18               1719      JSR PRINT_TO_BUFFER
00001D58  4E75                    1720      RTS
00001D5A                          1721  PRINT_OP_DYNAMIC_BCLR:
00001D5A  23FC 00001F83 00002024  1722      MOVE.L #P_OP_DYNAMIC_BCLR, Arg_AddStrToBuffer_String
00001D64  4EB8 1D18               1723      JSR PRINT_TO_BUFFER
00001D68  4E75                    1724      RTS
00001D6A                          1725  ******************************* END OF GROUP 0 ********************************
00001D6A                          1726  
00001D6A                          1727  ****************************** GROUP 1 ****************************************    
00001D6A                          1728  PRINT_OP_MOVEB:
00001D6A  23FC 00001F88 00002024  1729      MOVE.L #P_OP_MOVEB, Arg_AddStrToBuffer_String
00001D74  4EB8 1D18               1730      JSR PRINT_TO_BUFFER
00001D78  4E75                    1731      RTS
00001D7A                          1732  ******************************* END OF GROUP 1 ********************************
00001D7A                          1733      
00001D7A                          1734  ****************************** GROUP 2 **************************************** 
00001D7A                          1735  PRINT_OP_MOVEA_L:
00001D7A  23FC 00001F8F 00002024  1736      MOVE.L #P_OP_MOVEA_L, Arg_AddStrToBuffer_String
00001D84  4EB8 1D18               1737      JSR PRINT_TO_BUFFER
00001D88  4E75                    1738      RTS
00001D8A                          1739  PRINT_OP_MOVE_L:
00001D8A  43F9 00001F97           1740      LEA P_OP_MOVE_L,A1
00001D90  4EB9 00001F56           1741      JSR PRINT_OP
00001D96  4E75                    1742      RTS
00001D98                          1743  ******************************* END OF GROUP 2 ********************************
00001D98                          1744      
00001D98                          1745  ****************************** GROUP 3 ****************************************    
00001D98                          1746  PRINT_OP_MOVEA_W:
00001D98  23FC 00001F9E 00002024  1747      MOVE.L #P_OP_MOVEA_W, Arg_AddStrToBuffer_String
00001DA2  4EB8 1D18               1748      JSR PRINT_TO_BUFFER
00001DA6  4E75                    1749      RTS
00001DA8                          1750  PRINT_OP_MOVE_W:
00001DA8  43F9 00001FA6           1751      LEA P_OP_MOVE_W,A1
00001DAE  4EB9 00001F56           1752      JSR PRINT_OP
00001DB4  4E75                    1753      RTS
00001DB6                          1754  ******************************* END OF GROUP 3 ********************************
00001DB6                          1755  
00001DB6                          1756  ****************************** GROUP 4 ****************************************
00001DB6                          1757  PRINT_OP_JSR:
00001DB6  23FC 00001FC1 00002024  1758      MOVE.L #P_OP_JSR, Arg_AddStrToBuffer_String
00001DC0  4EB8 1D18               1759      JSR PRINT_TO_BUFFER
00001DC4  4E75                    1760      RTS
00001DC6                          1761  PRINT_OP_RTS:
00001DC6  23FC 00001FC9 00002024  1762      MOVE.L #P_OP_RTS, Arg_AddStrToBuffer_String
00001DD0  4EB8 1D18               1763      JSR PRINT_TO_BUFFER
00001DD4  4E75                    1764      RTS
00001DD6                          1765  PRINT_OP_LEA:
00001DD6  23FC 00001FBD 00002024  1766      MOVE.L #P_OP_LEA, Arg_AddStrToBuffer_String
00001DE0  4EB8 1D18               1767      JSR PRINT_TO_BUFFER
00001DE4  4E75                    1768      RTS
00001DE6                          1769  PRINT_OP_NEG:
00001DE6  23FC 00001FCD 00002024  1770      MOVE.L #P_OP_NEG, Arg_AddStrToBuffer_String
00001DF0  4EB8 1D18               1771      JSR PRINT_TO_BUFFER
00001DF4  4E75                    1772      RTS
00001DF6                          1773  PRINT_OP_MOVEM_W:
00001DF6  23FC 00001FAD 00002024  1774      MOVE.L #P_OP_MOVEM_W, Arg_AddStrToBuffer_String
00001E00  4EB8 1D18               1775      JSR PRINT_TO_BUFFER
00001E04  4E75                    1776      RTS
00001E06                          1777  PRINT_OP_MOVEM_L:
00001E06  23FC 00001FB5 00002024  1778      MOVE.L #P_OP_MOVEM_L, Arg_AddStrToBuffer_String
00001E10  4EB8 1D18               1779      JSR PRINT_TO_BUFFER
00001E14  4E75                    1780      RTS
00001E16                          1781  ******************************* END OF GROUP 4 ********************************
00001E16                          1782      
00001E16                          1783  ****************************** GROUP 5 ****************************************
00001E16                          1784  PRINT_OP_SUBQ:
00001E16  23FC 00001FD1 00002024  1785      MOVE.L #P_OP_SUBQ, Arg_AddStrToBuffer_String
00001E20  4EB8 1D18               1786      JSR PRINT_TO_BUFFER
00001E24  4E75                    1787      RTS
00001E26                          1788  ******************************* END OF GROUP 5 ********************************
00001E26                          1789  
00001E26                          1790  ****************************** GROUP 6 ****************************************
00001E26                          1791  PRINT_OP_BCS:
00001E26  23FC 00001FDA 00002024  1792      MOVE.L #P_OP_BCS, Arg_AddStrToBuffer_String
00001E30  4EB8 1D18               1793      JSR PRINT_TO_BUFFER
00001E34  4E75                    1794      RTS
00001E36                          1795  PRINT_OP_BGE:
00001E36  23FC 00001FDE 00002024  1796      MOVE.L #P_OP_BGE, Arg_AddStrToBuffer_String
00001E40  4EB8 1D18               1797      JSR PRINT_TO_BUFFER
00001E44  4E75                    1798      RTS
00001E46                          1799  PRINT_OP_BLT:
00001E46  23FC 00001FE2 00002024  1800      MOVE.L #P_OP_BLT, Arg_AddStrToBuffer_String
00001E50  4EB8 1D18               1801      JSR PRINT_TO_BUFFER
00001E54  4E75                    1802      RTS
00001E56                          1803  PRINT_OP_BVC:
00001E56  23FC 00001FE6 00002024  1804      MOVE.L #P_OP_BVC, Arg_AddStrToBuffer_String
00001E60  4EB8 1D18               1805      JSR PRINT_TO_BUFFER
00001E64  4E75                    1806      RTS
00001E66                          1807  PRINT_OP_BRA:
00001E66  23FC 00001FD6 00002024  1808      MOVE.L #P_OP_BRA, Arg_AddStrToBuffer_String
00001E70  4EB8 1D18               1809      JSR PRINT_TO_BUFFER
00001E74  4E75                    1810      RTS
00001E76                          1811  ******************************* END OF GROUP 6 ********************************
00001E76                          1812  
00001E76                          1813  ****************************** GROUP 7 ****************************************
00001E76                          1814  * No currently supported OP codes to print here.
00001E76                          1815  ******************************* END OF GROUP 7 ********************************
00001E76                          1816  
00001E76                          1817  ****************************** GROUP 8 ****************************************
00001E76                          1818  PRINT_OP_DIVS:
00001E76  23FC 00001FEA 00002024  1819      MOVE.L #P_OP_DIVS, Arg_AddStrToBuffer_String
00001E80  4EB8 1D18               1820      JSR PRINT_TO_BUFFER
00001E84  4E75                    1821      RTS
00001E86                          1822  PRINT_OP_OR:
00001E86  23FC 00001FEF 00002024  1823      MOVE.L #P_OP_OR, Arg_AddStrToBuffer_String
00001E90  4EB8 1D18               1824      JSR PRINT_TO_BUFFER
00001E94  4E75                    1825      RTS
00001E96                          1826  ******************************* END OF GROUP 8 ********************************
00001E96                          1827  
00001E96                          1828  ****************************** GROUP 9 ****************************************
00001E96                          1829  PRINT_OP_SUB:
00001E96  23FC 00001FF2 00002024  1830      MOVE.L #P_OP_SUB, Arg_AddStrToBuffer_String
00001EA0  4EB8 1D18               1831      JSR PRINT_TO_BUFFER
00001EA4  4E75                    1832      RTS
00001EA6                          1833  ******************************* END OF GROUP 9 ********************************
00001EA6                          1834  
00001EA6                          1835  ****************************** GROUP A ****************************************
00001EA6                          1836  * No currently supported OP codes to print here.
00001EA6                          1837  ******************************* END OF GROUP A ********************************
00001EA6                          1838  
00001EA6                          1839  ****************************** GROUP B ****************************************
00001EA6                          1840  PRINT_OP_EOR:
00001EA6  23FC 00001FF6 00002024  1841      MOVE.L #P_OP_EOR, Arg_AddStrToBuffer_String
00001EB0  4EB8 1D18               1842      JSR PRINT_TO_BUFFER
00001EB4  4E75                    1843      RTS
00001EB6                          1844  PRINT_OP_CMP:
00001EB6  23FC 00001FFA 00002024  1845      MOVE.L #P_OP_CMP, Arg_AddStrToBuffer_String
00001EC0  4EB8 1D18               1846      JSR PRINT_TO_BUFFER
00001EC4  4E75                    1847      RTS
00001EC6                          1848  ******************************* END OF GROUP B ********************************
00001EC6                          1849  
00001EC6                          1850  ****************************** GROUP C ****************************************
00001EC6                          1851  PRINT_OP_MULS:
00001EC6  23FC 00001FFE 00002024  1852      MOVE.L #P_OP_MULS, Arg_AddStrToBuffer_String
00001ED0  4EB8 1D18               1853      JSR PRINT_TO_BUFFER
00001ED4  4E75                    1854      RTS
00001ED6                          1855  ******************************* END OF GROUP C ********************************
00001ED6                          1856  
00001ED6                          1857  ****************************** GROUP D ****************************************
00001ED6                          1858  PRINT_OP_ADD:
00001ED6  23FC 00002008 00002024  1859      MOVE.L #P_OP_ADD, Arg_AddStrToBuffer_String
00001EE0  4EB8 1D18               1860      JSR PRINT_TO_BUFFER
00001EE4  4E75                    1861      RTS
00001EE6                          1862  PRINT_OP_ADDA:
00001EE6  23FC 00002003 00002024  1863      MOVE.L #P_OP_ADDA, Arg_AddStrToBuffer_String
00001EF0  4EB8 1D18               1864      JSR PRINT_TO_BUFFER
00001EF4  4E75                    1865      RTS
00001EF6                          1866  
00001EF6                          1867  ******************************* END OF GROUP D ********************************
00001EF6                          1868  
00001EF6                          1869  ****************************** GROUP E ****************************************
00001EF6                          1870  PRINT_OP_LSL:
00001EF6  23FC 00002010 00002024  1871      MOVE.L #P_OP_LSL, Arg_AddStrToBuffer_String
00001F00  4EB8 1D18               1872      JSR PRINT_TO_BUFFER
00001F04  4E75                    1873      RTS
00001F06                          1874  PRINT_OP_LSR:
00001F06  23FC 0000200C 00002024  1875      MOVE.L #P_OP_LSR, Arg_AddStrToBuffer_String
00001F10  4EB8 1D18               1876      JSR PRINT_TO_BUFFER
00001F14  4E75                    1877      RTS
00001F16                          1878  PRINT_OP_ASR:
00001F16  23FC 00002014 00002024  1879      MOVE.L #P_OP_ASR, Arg_AddStrToBuffer_String
00001F20  4EB8 1D18               1880      JSR PRINT_TO_BUFFER
00001F24  4E75                    1881      RTS
00001F26                          1882  PRINT_OP_ASL:
00001F26  23FC 00002018 00002024  1883      MOVE.L #P_OP_ASL, Arg_AddStrToBuffer_String
00001F30  4EB8 1D18               1884      JSR PRINT_TO_BUFFER
00001F34  4E75                    1885      RTS
00001F36                          1886  PRINT_OP_ROL:
00001F36  23FC 00002020 00002024  1887      MOVE.L #P_OP_ROL, Arg_AddStrToBuffer_String
00001F40  4EB8 1D18               1888      JSR PRINT_TO_BUFFER
00001F44  4E75                    1889      RTS
00001F46                          1890  PRINT_OP_ROR:
00001F46  23FC 0000201C 00002024  1891      MOVE.L #P_OP_ROR, Arg_AddStrToBuffer_String
00001F50  4EB8 1D18               1892      JSR PRINT_TO_BUFFER
00001F54  4E75                    1893      RTS
00001F56                          1894  ******************************* END OF GROUP E ********************************
00001F56                          1895  
00001F56                          1896  ****************************** GROUP F ****************************************
00001F56                          1897  * No currently supported OP codes to print here.
00001F56                          1898  ******************************* END OF GROUP F ********************************
00001F56                          1899  
00001F56                          1900  
00001F56                          1901  
00001F56                          1902  PRINT_OP:   ;Prints current op code byte
00001F56                          1903      ;MOVE.W (A4),(A1)       ; NEEDS TO USE G_BUFFER LATER
00001F56  103C 000D               1904      MOVE.B #13,D0
00001F5A  4E4F                    1905      TRAP #15
00001F5C  4E75                    1906      RTS
00001F5E                          1907  ******************* END OF PRINTING ROUTINES **********************************
00001F5E                          1908  
00001F5E                          1909  ******************* END OF JMP LABELS *****************************************
00001F5E                          1910  
00001F5E                          1911  ******************* DATA CONSTANT PRINTS **************************************
00001F5E                          1912  * Formatting is as follows: P_OP_<OPCODE>, where P = Print, OP = Operation,
00001F5E                          1913  * <OPCODE> is any valid operand
00001F5E                          1914  
00001F5E= 44 41 54 41 00          1915  P_INVALID_OP    DC.B    'DATA',0
00001F63= 46 6F 75 6E 64 20 ...   1916  OP_FOUND        DC.B    'Found OP',0 ; this should be taken out later
00001F6C= 2E 42 00                1917  P_SIZE_B        DC.B    '.B',0
00001F6F= 2E 57 00                1918  P_SIZE_W        DC.B    '.W',0
00001F72= 2E 4C 00                1919  P_SIZE_L        DC.B    '.L',0
00001F75= 4F 52 49 00             1920  P_OP_ORI        DC.B    'ORI',0
00001F79= 43 4D 50 49 00          1921  P_OP_CMPI       DC.B    'CMPI',0
00001F7E= 42 43 4C 52 00          1922  P_OP_STATIC_BCLR     DC.B    'BCLR',0
00001F83= 42 43 4C 52 00          1923  P_OP_DYNAMIC_BCLR     DC.B    'BCLR',0
00001F88= 4D 4F 56 45 2E 42 00    1924  P_OP_MOVEB      DC.B    'MOVE.B',0
00001F8F= 4D 4F 56 45 41 2E ...   1925  P_OP_MOVEA_L    DC.B    'MOVEA.L',0 
00001F97= 4D 4F 56 45 2E 4C 00    1926  P_OP_MOVE_L     DC.B    'MOVE.L',0
00001F9E= 4D 4F 56 45 41 2E ...   1927  P_OP_MOVEA_W    DC.B    'MOVEA.W',0
00001FA6= 4D 4F 56 45 2E 57 00    1928  P_OP_MOVE_W     DC.B    'MOVE.W',0
00001FAD= 4D 4F 56 45 4D 2E ...   1929  P_OP_MOVEM_W    DC.B    'MOVEM.W',0
00001FB5= 4D 4F 56 45 4D 2E ...   1930  P_OP_MOVEM_L    DC.B    'MOVEM.L',0
00001FBD= 4C 45 41 00             1931  P_OP_LEA        DC.B    'LEA',0
00001FC1= 4A 53 52 00             1932  P_OP_JSR        DC.B    'JSR',0
00001FC5= 4E 4F 50 00             1933  P_OP_NOP        DC.B    'NOP',0
00001FC9= 52 54 53 00             1934  P_OP_RTS        DC.B    'RTS',0
00001FCD= 4E 45 47 00             1935  P_OP_NEG        DC.B    'NEG',0
00001FD1= 53 55 42 51 00          1936  P_OP_SUBQ       DC.B    'SUBQ',0
00001FD6= 42 52 41 00             1937  P_OP_BRA        DC.B    'BRA',0
00001FDA= 42 43 53 00             1938  P_OP_BCS        DC.B    'BCS',0
00001FDE= 42 47 45 00             1939  P_OP_BGE        DC.B    'BGE',0
00001FE2= 42 4C 54 00             1940  P_OP_BLT        DC.B    'BLT',0
00001FE6= 42 56 43 00             1941  P_OP_BVC        DC.B    'BVC',0
00001FEA= 44 49 56 53 00          1942  P_OP_DIVS       DC.B    'DIVS',0
00001FEF= 4F 52 00                1943  P_OP_OR         DC.B    'OR',0
00001FF2= 53 55 42 00             1944  P_OP_SUB        DC.B    'SUB',0
00001FF6= 45 4F 52 00             1945  P_OP_EOR        DC.B    'EOR',0
00001FFA= 43 4D 50 00             1946  P_OP_CMP        DC.B    'CMP',0
00001FFE= 4D 55 4C 53 00          1947  P_OP_MULS       DC.B    'MULS',0
00002003= 41 44 44 41 00          1948  P_OP_ADDA       DC.B    'ADDA',0
00002008= 41 44 44 00             1949  P_OP_ADD        DC.B    'ADD',0
0000200C= 4C 53 52 00             1950  P_OP_LSR        DC.B    'LSR',0
00002010= 4C 53 4C 00             1951  P_OP_LSL        DC.B    'LSL',0
00002014= 41 53 52 00             1952  P_OP_ASR        DC.B    'ASR',0
00002018= 41 53 4C 00             1953  P_OP_ASL        DC.B    'ASL',0
0000201C= 52 4F 52 00             1954  P_OP_ROR        DC.B    'ROR',0
00002020= 52 4F 4C 00             1955  P_OP_ROL        DC.B    'ROL',0
00002024                          1956  ***************** END OF DATA CONSTANT PRINTS ***********************************
00002024                          1957   
00002024                          1958  
00002024                          1959  **
00002024                          1960  * AddStrToBuffer
00002024                          1961  **
00002024                          1962  * Adds the given NULL-terminated string to the specified buffer.
00002024                          1963  *
00002024                          1964  * Default buffer length is 80 characters, but can be modified in the argument
00002024                          1965  * variables.
00002024                          1966  *
00002024                          1967  * If the buffer length is exceeded, either due to lack of a NULL character or
00002024                          1968  * an incorrectly specified length, 1 is returned. Otherwise, 0 is returned to
00002024                          1969  * indicate success.
00002024                          1970  *
00002024                          1971  **
00002024                          1972  * @param Arg_AddStrToBuffer_String              Pointer to string
00002024                          1973  * @param Arg_AddStrToBuffer_Buffer              Pointer to buffer
00002024                          1974  * @param Arg_AddStrToBuffer_BufferLength        Length of buffer (default 80 chars)
00002024                          1975  * @return Ret_AddStrToBuffer_Success            0 if successful, 1 otherwise.
00002024                          1976  * @branch _AddStrToBuffer_FindBufferNullLoop    Loop to find NULL in buffer
00002024                          1977  * @branch _AddStrToBuffer_AddLoop               Loop to add string to buffer
00002024                          1978  * @branch _AddStrToBuffer_Success               Branch when string successfully added
00002024                          1979  * @branch _AddStrToBuffer_StringLengthExceeded  Branch when length exceeded (either string or buffer)
00002024                          1980  * @branch _AddStrToBuffer_End                   End of subroutine
00002024                          1981  **
00002024                          1982  Arg_AddStrToBuffer_String           DS.L    1
00002028                          1983  Arg_AddStrToBuffer_Buffer           DS.L    1
0000202C= 00000050                1984  Arg_AddStrToBuffer_BufferLength     DC.L    80
00002030                          1985  Ret_AddStrToBuffer_Success          DS.B    1
00002031                          1986  
00002032                          1987  AddStrToBuffer:                     DS.W    0
00002032  48E7 C0C0               1988      MOVEM.L     D0-D1/A0-A1, -(SP)                  * Backup registers to stack
00002036                          1989  
00002036  2078 2024               1990      MOVE.L      Arg_AddStrToBuffer_String, A0       * Load string pointer
0000203A  2278 2028               1991      MOVE.L      Arg_AddStrToBuffer_Buffer, A1       * Load buffer pointer
0000203E  2038 202C               1992      MOVE.L      Arg_AddStrToBuffer_BufferLength, D0 * Load buffer length
00002042  4278 2030               1993      CLR.W       Ret_AddStrToBuffer_Success          * Clear success bit
00002046  4281                    1994      CLR.L       D1                                  * Clear loop counter
00002048                          1995  
00002048                          1996  _AddStrToBuffer_BufferLoop
00002048  0C11 0000               1997      CMPI.B      #0, (A1)                            * If buffer char is NULL
0000204C  6700 000E               1998      BEQ         _AddStrToBuffer_AddLoop             * Start adding string to bufer
00002050                          1999      
00002050  B280                    2000      CMP.L       D0, D1                              * If counter >= max length
00002052  6C00 0024               2001      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
00002056                          2002      
00002056  5289                    2003      ADDQ.L      #1, A1                              * Go to next character
00002058  5201                    2004      ADDQ.B      #1, D1                              * Increment counter
0000205A  60EC                    2005      BRA         _AddStrToBuffer_BufferLoop          * Loop back
0000205C                          2006      
0000205C                          2007  _AddStrToBuffer_AddLoop
0000205C  0C10 0000               2008      CMPI.B      #0, (A0)                            * If string char is NULL
00002060  6700 000E               2009      BEQ         _AddStrToBuffer_Success             * String successfully added
00002064                          2010      
00002064  B200                    2011      CMP.B       D0, D1                              * If counter >= max length
00002066  6C00 0010               2012      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
0000206A                          2013      
0000206A  12D8                    2014      MOVE.B      (A0)+, (A1)+                        * Move string char to buffer char
0000206C  5201                    2015      ADDQ.B      #1, D1                              * Increment counter
0000206E  60EC                    2016      BRA         _AddStrToBuffer_AddLoop             * Loop back
00002070                          2017  
00002070                          2018  _AddStrToBuffer_Success
00002070  12BC 0000               2019      MOVE.B      #0, (A1)                            * Add NULL to end of string
00002074  6000 0008               2020      BRA         _AddStrToBuffer_End                 * Finish subroutine
00002078                          2021  
00002078                          2022  _AddStrToBuffer_LengthExceeded
00002078  31FC 0001 2030          2023      MOVE.W      #1, Ret_AddStrToBuffer_Success      * Invalidate success bit
0000207E                          2024  
0000207E                          2025  _AddStrToBuffer_End
0000207E  4CDF 0303               2026      MOVEM.L     (SP)+, D0-D1/A0-A1                  * Restore registers from stack
00002082  4E75                    2027      RTS                  
00002084                          2028     
00002084                          2029      END START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDSTRTOBUFFER      2032
ARG_ADDSTRTOBUFFER_BUFFER  2028
ARG_ADDSTRTOBUFFER_BUFFERLENGTH  202C
ARG_ADDSTRTOBUFFER_STRING  2024
BIT_CHECK_EXG       1AC4
BIT_CHECK_EXT       16BC
BIT_CHECK_MOVEP     142E
BIT_CHECK_SUBX      19EE
B_BUFFER            1054
CHECK_OP_ABCD       1A9C
CHECK_OP_ADD        1B46
CHECK_OP_ADDA       1B32
CHECK_OP_ADDI       138E
CHECK_OP_ADDQ       1868
CHECK_OP_ADDX       1B1E
CHECK_OP_AND        1AFE
CHECK_OP_ANDI       1366
CHECK_OP_ANDI_TO_CCR  1326
CHECK_OP_ANDI_TO_SR  1336
CHECK_OP_ASL        1CCE
CHECK_OP_ASL_NO_ROT  1C0A
CHECK_OP_ASR        1CB4
CHECK_OP_ASR_NO_ROT  1BF0
CHECK_OP_BCS        18D4
CHECK_OP_BGE        18EE
CHECK_OP_BLT        1908
CHECK_OP_BRA        18BA
CHECK_OP_BSR        18A6
CHECK_OP_BVC        1922
CHECK_OP_CHK        179E
CHECK_OP_CLR        1680
CHECK_OP_CMP        1A64
CHECK_OP_CMPA       1A3C
CHECK_OP_CMPI       1476
CHECK_OP_CMPM       1A28
CHECK_OP_DBCC       1840
CHECK_OP_DIVS       1998
CHECK_OP_DIVU       1970
CHECK_OP_DYNAMIC_BCHG  1406
CHECK_OP_DYNAMIC_BCLR  14AA
CHECK_OP_DYNAMIC_BSET  141A
CHECK_OP_DYNAMIC_BTST  13F2
CHECK_OP_EOR        1A50
CHECK_OP_EORI       13A2
CHECK_OP_EORI_TO_CCR  1346
CHECK_OP_EORI_TO_SR  1356
CHECK_OP_EXG        1AB0
CHECK_OP_EXT        16A8
CHECK_OP_ILLEGAL    15F0
CHECK_OP_JMP        178A
CHECK_OP_JSR        17E2
CHECK_OP_LEA        17C8
CHECK_OP_LINK       174E
CHECK_OP_LSL        1C9A
CHECK_OP_LSL_NO_ROT  1BD6
CHECK_OP_LSR        1C80
CHECK_OP_LSR_NO_ROT  1BBC
CHECK_OP_MOVEA_L    14FE
CHECK_OP_MOVEA_W    1560
CHECK_OP_MOVEM      1816
CHECK_OP_MOVEP      1448
CHECK_OP_MOVEQ      194C
CHECK_OP_MOVE_B     14D4
CHECK_OP_MOVE_FROM_SR  1630
CHECK_OP_MOVE_L     1536
CHECK_OP_MOVE_TO_CCR  1644
CHECK_OP_MOVE_TO_SR  1658
CHECK_OP_MOVE_USP   1776
CHECK_OP_MOVE_W     1598
CHECK_OP_MULS       1AEA
CHECK_OP_MULU       1A88
CHECK_OP_NBCD       16D6
CHECK_OP_NEG        17FC
CHECK_OP_NEGX       166C
CHECK_OP_NOP        15E0
CHECK_OP_NOT        1694
CHECK_OP_OR         19AC
CHECK_OP_ORI        145C
CHECK_OP_ORI_TO_CCR  1306
CHECK_OP_ORI_TO_SR  1316
CHECK_OP_PEA        16FE
CHECK_OP_RESET      15D0
CHECK_OP_ROL        1C66
CHECK_OP_ROL_NO_ROT  1BA2
CHECK_OP_ROR        1C4C
CHECK_OP_ROR_NO_ROT  1B88
CHECK_OP_ROXL       1C38
CHECK_OP_ROXL_NO_ROT  1B74
CHECK_OP_ROXR       1C24
CHECK_OP_ROXR_NO_ROT  1B60
CHECK_OP_RTE        1600
CHECK_OP_RTR        1620
CHECK_OP_RTS        17B2
CHECK_OP_SBCD       1984
CHECK_OP_SCC        1854
CHECK_OP_STATIC_BCHG  13CA
CHECK_OP_STATIC_BCLR  1490
CHECK_OP_STATIC_BSET  13DE
CHECK_OP_STATIC_BTST  13B6
CHECK_OP_STOP       15C0
CHECK_OP_SUB        1A0C
CHECK_OP_SUBA       19C6
CHECK_OP_SUBI       137A
CHECK_OP_SUBQ       187C
CHECK_OP_SUBX       19DA
CHECK_OP_SWAP       16EA
CHECK_OP_TAS        1712
CHECK_OP_TRAP       173A
CHECK_OP_TRAPV      1610
CHECK_OP_TST        1726
CHECK_OP_UNLK       1762
CUR_OP_CODE         1000
C_GROUP_0           1302
C_GROUP_1           14D0
C_GROUP_2           14FA
C_GROUP_3           155C
C_GROUP_4           15BE
C_GROUP_5           183C
C_GROUP_6           18A2
C_GROUP_7           1948
C_GROUP_8           196C
C_GROUP_9           19C2
C_GROUP_A           1A1C
C_GROUP_B           1A24
C_GROUP_C           1A84
C_GROUP_D           1B1A
C_GROUP_E           1B5C
C_GROUP_F           1CF4
EA_SIZE             1003
FIND_2_BIT_SIZE_TO_EA  122C
FIND_3_BIT_REG_TO_EA  1242
FIND_MOVEA_L_DIFFERENCE  1510
FIND_MOVEA_W_DIFF   1572
FIND_TRAILING_BITS_TO_EA  129E
FIRST_3             10A5
FOURTH_3            10A8
GROUP0_INVALID      14C4
GROUP0_SUCCESS      14CA
GROUP1_INVALID      14EE
GROUP1_SUCCESS      14F4
GROUP2_INVALID      1550
GROUP2_SUCCESS      1556
GROUP3_INVALID      15B2
GROUP3_SUCCESS      15B8
GROUP4_INVALID      1830
GROUP4_SUCCESS      1836
GROUP5_INVALID      1896
GROUP5_SUCCESS      189C
GROUP6_INVALID      193C
GROUP6_SUCCESS      1942
GROUP7_INVALID      1960
GROUP7_SUCCESS      1966
GROUP8_INVALID      19B6
GROUP8_SUCCESS      19BC
GROUP9_INVALID      1A12
GROUP9_SUCCESS      1A16
GROUPB_INVALID      1A78
GROUPB_SUCCESS      1A7E
GROUPC_INVALID      1B0E
GROUPC_SUCCESS      1B14
GROUPD_INVALID      1B50
GROUPD_SUCCESS      1B56
GROUPE_INVALID      1CE8
GROUPE_SUCCESS      1CEE
GROUP_0             10E4
GROUP_1             10F6
GROUP_2             1108
GROUP_3             111A
GROUP_4             112C
GROUP_5             113E
GROUP_6             1150
GROUP_7             1162
GROUP_8             1174
GROUP_9             1186
GROUP_A             1198
GROUP_B             11AA
GROUP_C             11BC
GROUP_D             11CE
GROUP_E             11E0
GROUP_F             11F2
G_BUFFER            1004
INVALID_OP          1CFC
IS_VALID            1002
LOAD_OP_CODE        10CC
MNEMONIC            10A4
MOVE_AND_MOVEA_PARSE_EA  1258
MOVE_LAST_6_BITS_TO_EA  120A
OP_FOUND            1F63
OP_JSR_DONE         1200
OP_JSR_ROUTINE      10DC
PARSE_EA_CONSTANT_BITS  12B4
PRINT_OP            1F56
PRINT_OP_ADD        1ED6
PRINT_OP_ADDA       1EE6
PRINT_OP_ASL        1F26
PRINT_OP_ASR        1F16
PRINT_OP_BCS        1E26
PRINT_OP_BGE        1E36
PRINT_OP_BLT        1E46
PRINT_OP_BRA        1E66
PRINT_OP_BVC        1E56
PRINT_OP_CMP        1EB6
PRINT_OP_CMPI       1D3A
PRINT_OP_DIVS       1E76
PRINT_OP_DYNAMIC_BCLR  1D5A
PRINT_OP_EOR        1EA6
PRINT_OP_JSR        1DB6
PRINT_OP_LEA        1DD6
PRINT_OP_LSL        1EF6
PRINT_OP_LSR        1F06
PRINT_OP_MOVEA_L    1D7A
PRINT_OP_MOVEA_W    1D98
PRINT_OP_MOVEB      1D6A
PRINT_OP_MOVEM_L    1E06
PRINT_OP_MOVEM_W    1DF6
PRINT_OP_MOVE_L     1D8A
PRINT_OP_MOVE_W     1DA8
PRINT_OP_MULS       1EC6
PRINT_OP_NEG        1DE6
PRINT_OP_OR         1E86
PRINT_OP_ORI        1D2A
PRINT_OP_ROL        1F36
PRINT_OP_ROR        1F46
PRINT_OP_RTS        1DC6
PRINT_OP_STATIC_BCLR  1D4A
PRINT_OP_SUB        1E96
PRINT_OP_SUBQ       1E16
PRINT_TO_BUFFER     1D18
P_INVALID_OP        1F5E
P_OP_ADD            2008
P_OP_ADDA           2003
P_OP_ASL            2018
P_OP_ASR            2014
P_OP_BCS            1FDA
P_OP_BGE            1FDE
P_OP_BLT            1FE2
P_OP_BRA            1FD6
P_OP_BVC            1FE6
P_OP_CMP            1FFA
P_OP_CMPI           1F79
P_OP_DIVS           1FEA
P_OP_DYNAMIC_BCLR   1F83
P_OP_EOR            1FF6
P_OP_JSR            1FC1
P_OP_LEA            1FBD
P_OP_LSL            2010
P_OP_LSR            200C
P_OP_MOVEA_L        1F8F
P_OP_MOVEA_L_A_L    10B6
P_OP_MOVEA_L_T      10AA
P_OP_MOVEA_W        1F9E
P_OP_MOVEB          1F88
P_OP_MOVEM_L        1FB5
P_OP_MOVEM_W        1FAD
P_OP_MOVE_L         1F97
P_OP_MOVE_W         1FA6
P_OP_MULS           1FFE
P_OP_NEG            1FCD
P_OP_NOP            1FC5
P_OP_OR             1FEF
P_OP_ORI            1F75
P_OP_ROL            2020
P_OP_ROR            201C
P_OP_RTS            1FC9
P_OP_STATIC_BCLR    1F7E
P_OP_SUB            1FF2
P_OP_SUBQ           1FD1
P_SIZE_B            1F6C
P_SIZE_L            1F72
P_SIZE_W            1F6F
READ_NEXT_INSTRUCTION  1D14
RET_ADDSTRTOBUFFER_SUCCESS  2030
SECOND_3            10A6
START               10BE
THIRD_3             10A7
_ADDSTRTOBUFFER_ADDLOOP  205C
_ADDSTRTOBUFFER_BUFFERLOOP  2048
_ADDSTRTOBUFFER_END  207E
_ADDSTRTOBUFFER_LENGTHEXCEEDED  2078
_ADDSTRTOBUFFER_SUCCESS  2070
