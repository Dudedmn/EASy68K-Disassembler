00000000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/16/2019 8:05:08 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OP Code routines for Disassembler
00000000                             3  * Written by : Daniel Yan
00000000                             4  * Date       : 2/28/2019, Updated 3/16/2019
00000000                             5  
00000000                             6  * Description: Disassembler routines to identify any valid
00000000                             7  * OP code dependent on current supported list.
00000000                             8  *------------------------------------------------------------
00000000                             9  OP_SIZE         DS.B    1   ;This constant refers to the size of the current OP code 
00000001                            10  MNEMONIC        DS.B    1   ;Constant for EA, first 4 bits (15-12) of a 4 hex OP code
00000002                            11  FIRST_3         DS.B    1   ;Constant for EA, 3 bits (11-9) of a 4 hex OP code
00000003                            12  SECOND_3        DS.B    1   ;Constant for EA, 3 bits (8-6) of a 4 hex OP code
00000004                            13  THIRD_3         DS.B    1   ;Constant for EA, 3 bits (5-3) of a 4 hex OP code
00000005                            14  FOURTH_3        DS.B    1   ;Constant for EA, 3 bits (2-0) of a 4 hex OP code
00000006                            15  
00000006                            16  ************************************************************************************
00000006                            17  * PRINTING BUFFER FUNCTION HAS BEEN FINISHED
00000006                            18  * STATUS: 
00000006                            19  * IDENTIFICATION FOR ALL OP CODES:      DONE
00000006                            20  * VALIDATION TESTING FOR ALL OP CODES:  DONE
00000006                            21  * PRINTING ALL OP CODES TO BUFFER:      DONE
00000006                            22  * PRINTING SIZE BITS OF ALL OP CODES:   DONE
00000006                            23  *-----------------------------------------------------------
00000006                            24  *First Nibble Values (15-12)
00000006                            25  *Value                  Operations
00000006                            26  *$0                     GROUP_0: ORI,BCLR (static and dynamic),CMPI --- DONE
00000006                            27  *$1                     GROUP_1: MOVE.B                             --- DONE
00000006                            28  *$2                     GROUP_2: MOVE.L, MOVEA.L                    --- DONE
00000006                            29  *$3                     GROUP_3: MOVE.W, MOVEA.W                    --- DONE
00000006                            30  *$4                     GROUP_4: LEA,JSR,RTS,NEG,MOVEM              --- DONE
00000006                            31  *$5                     GROUP_5: SUBQ                               --- DONE
00000006                            32  *$6                     GROUP_6: Bcc(BCS,BGE,BLT,BVC), BRA          --- DONE
00000006                            33  *$7                     GROUP_7: INVALID_OP                         --- DONE
00000006                            34  *$8                     GROUP_8: DIVS, OR                           --- DONE
00000006                            35  *$9                     GROUP_9: SUB                                --- DONE
00000006                            36  *$A                     GROUP_A: INVALID_OP                         --- DONE
00000006                            37  *$B                     GROUP_B: EOR, CMP                           --- DONE
00000006                            38  *$C                     GROUP_C: MULS                               --- DONE
00000006                            39  *$D                     GROUP_D: ADD, ADDA                          --- DONE
00000006                            40  *$E                     GROUP_E: LSR, LSL, ASR, ASL, ROL, ROR       --- DONE
00000006                            41  *$F                     GROUP_F: INVALID_OP                         --- DONE
00000006                            42  
00000006                            43  
00000006                            44  * OP_JSR_Routine
00000006                            45  **********************************************************************************
00000006                            46  * Description: Catalog all supported OP codes into groupings based on their hex
00000006                            47  * values. Sort the supported OP codes by looking at the first nibble for their
00000006                            48  * grouping value. Call underlying subroutines for further identification of the
00000006                            49  * op code.
00000006                            50  *
00000006                            51  * Registers used: A6,D0,D1 
00000006                            52  *
00000006                            53  * Precondition: Instruction set (size Word) has been loaded in the appropriate
00000006                            54  * address to be parsed and read.
00000006                            55  
00000006                            56  * Postcondition: OP code has been identified as either valid or invalid. If it is
00000006                            57  * valid, it is stored into A6 and EA parsing methods are called to pass needed
00000006                            58  * information to EA. If invalid, DATA output will be utilized to indicate so.
00000006                            59  **********************************************************************************
00000006                            60  * These valid operand codes refer to the basic supported operand codes
00000006                            61  * Groups refer to the first nibble value that is supported by the operand
00000006                            62  
00000006                            63  OP_JSR_Routine:
00000006  48E7 C000                 64      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
Line 65 ERROR: Undefined symbol
0000000A  3039 004DBD16             65      MOVE.W CUR_OP_CODE,D0
Line 66 ERROR: Undefined symbol
00000010  13FC 0001 005455B8        66      MOVE.B #1,IS_VALID
00000018  720C                      67      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
0000001A  E2A8                      68      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
0000001C                            69  
0000001C                            70  GROUP_0:                ;$0| ORI, BCLR (static and dynamic), CMPI                  
0000001C  B03C 0000                 71      CMP.B   #$0,D0                 ;Compare first nibble
00000020  6600 000C                 72      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
00000024  4EB9 00000290             73      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
0000002A  6000 010C                 74      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000002E                            75      
0000002E                            76  GROUP_1:                ;$1| MOVE.B
0000002E  B03C 0001                 77      CMP.B   #$1,D0                 ;Compare first nibble
00000032  6600 000C                 78      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
00000036  4EB9 0000049A             79      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
0000003C  6000 00FA                 80      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000040                            81  
00000040                            82  GROUP_2:                ;$2| MOVE.L, MOVEA.L
00000040  B03C 0002                 83      CMP.B   #$2,D0                 ;Compare first nibble
00000044  6600 000C                 84      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
00000048  4EB9 000004C6             85      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
0000004E  6000 00E8                 86      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000052                            87  
00000052                            88  GROUP_3:                ;$3| MOVE.W, MOVEA.W
00000052  B03C 0003                 89      CMP.B   #$3,D0                 ;Compare first nibble
00000056  6600 000C                 90      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
0000005A  4EB9 0000052E             91      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
00000060  6000 00D6                 92      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000064                            93  
00000064                            94  GROUP_4:                ;$4| LEA, JSR, RTS, NEG, MOVEM
00000064  B03C 0004                 95      CMP.B   #$4,D0                 ;Compare first nibble
00000068  6600 000C                 96      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
0000006C  4EB9 00000596             97      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
00000072  6000 00C4                 98      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000076                            99  
00000076                           100  
00000076                           101  GROUP_5:                ;$5| SUBQ
00000076  B03C 0005                102      CMP.B   #$5,D0                 ;Compare first nibble
0000007A  6600 000C                103      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
0000007E  4EB9 00000856            104      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
00000084  6000 00B2                105      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000088                           106  
00000088                           107  
00000088                           108  GROUP_6:                ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
00000088  B03C 0006                109      CMP.B   #$6,D0                 ;Compare first nibble
0000008C  6600 000C                110      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
00000090  4EB9 000008C8            111      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
00000096  6000 00A0                112      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000009A                           113  
0000009A                           114  
0000009A                           115  GROUP_7:                ;$7| Display: DATA, $WXYZ (Unsupported)
0000009A  B03C 0007                116      CMP.B   #$7,D0                 ;Compare first nibble
0000009E  6600 000C                117      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
000000A2  4EB9 0000097A            118      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
000000A8  6000 008E                119      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000AC                           120  
000000AC                           121  
000000AC                           122  GROUP_8:                ;$8| DIVS, OR
000000AC  B03C 0008                123      CMP.B   #$8,D0                 ;Compare first nibble
000000B0  6600 000C                124      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
000000B4  4EB9 000009A0            125      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
000000BA  6000 007C                126      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000BE                           127  
000000BE                           128  
000000BE                           129  GROUP_9:                ;$9| SUB
000000BE  B03C 0009                130      CMP.B   #$9,D0                 ;Compare first nibble
000000C2  6600 000C                131      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
000000C6  4EB9 00000A00            132      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
000000CC  6000 006A                133      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000D0                           134  
000000D0                           135  
000000D0                           136  GROUP_A:                ;$A| Display: DATA, $WXYZ (Unsupported)
000000D0  B03C 000A                137      CMP.B   #$A,D0                 ;Compare first nibble
000000D4  6600 000C                138      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
000000D8  4EB9 00000A64            139      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
000000DE  6000 0058                140      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000E2                           141  
000000E2                           142  
000000E2                           143  GROUP_B:                ;$B| EOR, CMP
000000E2  B03C 000B                144      CMP.B   #$B,D0                 ;Compare first nibble
000000E6  6600 000C                145      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
000000EA  4EB9 00000A6C            146      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
000000F0  6000 0046                147      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000000F4                           148  
000000F4                           149  
000000F4                           150  GROUP_C:                ;$C| MULS
000000F4  B03C 000C                151      CMP.B   #$C,D0                 ;Compare first nibble
000000F8  6600 000C                152      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
000000FC  4EB9 00000AE8            153      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
00000102  6000 0034                154      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000106                           155  
00000106                           156  
00000106                           157  GROUP_D:                 ;$D| ADD, ADDA
00000106  B03C 000D                158      CMP.B   #$D,D0                 ;Compare first nibble
0000010A  6600 000C                159      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
0000010E  4EB9 00000B8A            160      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
00000114  6000 0022                161      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000118                           162  
00000118                           163  
00000118                           164  GROUP_E:                ;$E| LSR, LSL, ASR, ASL, ROL, ROR
00000118  B03C 000E                165      CMP.B   #$E,D0                 ;Compare first nibble
0000011C  6600 000C                166      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
00000120  4EB9 00000BDE            167      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
00000126  6000 0010                168      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000012A                           169  
0000012A                           170  
0000012A                           171  GROUP_F:                ;$F| Display: DATA, $WXYZ (Unsupported)
0000012A  B03C 000F                172      CMP.B   #$F,D0                 ;Compare first nibble
0000012E  4EB9 00000DAE            173      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
00000134  6000 0002                174      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00000138                           175  
00000138                           176  
00000138                           177  OP_JSR_DONE:
00000138  4CDF 0003                178           MOVEM.L (SP)+,D0-D1       ;Recover register D0
Line 179 ERROR: Undefined symbol
0000013C  0C39 0001 005455B8       179           CMP.B #1,IS_VALID
Line 180 ERROR: Undefined symbol
00000144  6700 BBD0                180           BEQ    main_EA
Line 181 ERROR: Undefined symbol
00000148  6600 BBCC                181           BNE    check_print
0000014C                           182           ;JMP EA_ROUTINE        ;This runs EA's routines after OP code portion is finished
0000014C                           183  **********************************************************************************
0000014C                           184  
0000014C                           185  ********** EA Parsing ************************************************************
0000014C                           186  
0000014C                           187  * MOVE_LAST_6_BITS_TO_EA
0000014C                           188  **********************************************************************************
0000014C                           189  * Description: For OP codes with the last 6 bits specified as EA Mode and EA Reg,
0000014C                           190  * the last 6 bits will be parsed and moved into the appropriate registers.
0000014C                           191  *
0000014C                           192  * Registers used: A6,D0,D1,D6,D7 
0000014C                           193  
0000014C                           194  * Precondition: OP code has been identified with only the last 6 bits for EA,
0000014C                           195  * current instruction set is stored into A6.
0000014C                           196  
0000014C                           197  * Postcondition: Last 6 bits of instruction bit has been isolated and stored. Bits
0000014C                           198  * for EA Mode have been stored in D7, Bits for EA Reg been stored in D6.
0000014C                           199  **********************************************************************************
0000014C                           200  MOVE_LAST_6_BITS_TO_EA:      ;Move last 6 bits from EA field to relevant registers
0000014C                           201     ; MOVEM.L D0-D7/A6, -(SP) ;Save all changed registers
Line 202 ERROR: Undefined symbol
0000014C  3039 004DBD16            202      MOVE.W CUR_OP_CODE,D0    ;Move current OP code into D0
00000152  323C 000A                203      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
00000156  E368                     204      LSL.W   D1,D0            ;Truncate to find the last 6 bits
00000158  E268                     205      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
0000015A  3E00                     206      MOVE.W  D0,D7            ;Move last 6 bits into D7
0000015C  323C 0003                207      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
00000160  E26F                     208      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
00000162  3C07                     209      MOVE.W  D7,D6            ;Move the 'upper' 3 bits into D6
00000164  323C 000D                210      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
00000168  E368                     211      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
0000016A  E268                     212      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
0000016C  3E00                     213      MOVE.W  D0,D7            ;Move the 'lower' 3 bits into D7
0000016E                           214     ; MOVEM.L (SP)+,D0-D7/A6  ;Restore registers
0000016E  4E75                     215      RTS                      ;Return to stack
00000170                           216      
00000170                           217  * FIND_2_BIT_SIZE_7_TO_6
00000170                           218  **********************************************************************************
00000170                           219  * Description: For OP codes with 2 bit size fields, the 2 relevant bits (7-6) will 
00000170                           220  * be parsed and moved to the appropriate registers.
00000170                           221  *
00000170                           222  * Registers used: D0,D1
00000170                           223  *
00000170                           224  * Precondition: OP code has been identified with 2 size bit field for CUR_OP_CODE.
00000170                           225  *
00000170                           226  * Postcondition: 2 bit size field has been isolated and stored into OP_SIZE.
00000170                           227  **********************************************************************************
00000170                           228  FIND_2_BIT_SIZE_7_TO_6:         ;Move the 2 bit size field relevant register
00000170  48E7 C000                229      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
Line 230 ERROR: Undefined symbol
00000174  3039 004DBD16            230      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
0000017A  323C 0008                231      MOVE.W   #8,D1              ;Prepare 8 bit shift to D1
0000017E  E368                     232      LSL.W    D1,D0              ;Truncate to find the 2 size bits
00000180  E268                     233      LSR.W    D1,D0              ;Reposition the bits
00000182  323C 0006                234      MOVE.W   #6,D1              ;Prepare 6 bit shift to D1
00000186  E268                     235      LSR.W    D1,D0              ;Truncate to shift 2 bits to a byte
00000188  11C0 0000                236      MOVE.B   D0,OP_SIZE         ;Move 2 size bits into OP_SIZE
0000018C  4CDF 0003                237      MOVEM.L (SP)+,D0-D1         ;Restore registers
00000190  4E75                     238      RTS                         ;Return to stack
00000192                           239  **********************************************************************************
00000192                           240  
00000192                           241  * FIND_1_BIT_SIZE_6
00000192                           242  **********************************************************************************
00000192                           243  * Description: For OP codes with 1 bit size fields, the 1 relevant bit 6 will 
00000192                           244  * be parsed and moved to the appropriate registers.
00000192                           245  * This particular size parsing is used for MOVEM
00000192                           246  *
00000192                           247  * Registers used: D0,D1
00000192                           248  *
00000192                           249  * Precondition: OP code has been identified with 1 size bit field for CUR_OP_CODE.
00000192                           250  *
00000192                           251  * Postcondition: 1 bit size field has been isolated and stored into OP_SIZE.
00000192                           252  **********************************************************************************
00000192                           253  FIND_1_BIT_SIZE_6:              ;Move the 1 bit size field relevant register
00000192  48E7 C000                254      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
Line 255 ERROR: Undefined symbol
00000196  3039 004DBD16            255      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
0000019C  323C 0009                256      MOVE.W   #9,D1              ;Prepare 9 bit shift to D1
000001A0  E368                     257      LSL.W    D1,D0              ;Truncate to find the size bit
000001A2  E268                     258      LSR.W    D1,D0              ;Reposition the bits
000001A4  323C 0006                259      MOVE.W   #6,D1              ;Prepare 6 bit shift to D1
000001A8  E268                     260      LSR.W    D1,D0              ;Truncate to shift 1 bit to a byte
000001AA  11C0 0000                261      MOVE.B   D0,OP_SIZE         ;Move 1 size bit into OP_SIZE
000001AE  4CDF 0003                262      MOVEM.L (SP)+,D0-D1         ;Restore registers
000001B2  4E75                     263      RTS                         ;Return to stack
000001B4                           264  **********************************************************************************
000001B4                           265  
000001B4                           266  * FIND_1_BIT_SIZE_8
000001B4                           267  **********************************************************************************
000001B4                           268  * Description: For OP codes with 1 bit size fields, the 1 relevant bit 8 will 
000001B4                           269  * be parsed and moved to the appropriate registers.
000001B4                           270  * This particular size parsing is used for ADDA
000001B4                           271  *
000001B4                           272  * Registers used: D0,D1
000001B4                           273  *
000001B4                           274  * Precondition: OP code has been identified with 1 size bit field for CUR_OP_CODE.
000001B4                           275  *
000001B4                           276  * Postcondition: 1 bit size field has been isolated and stored into OP_SIZE.
000001B4                           277  *
000001B4                           278  **********************************************************************************
000001B4                           279  FIND_1_BIT_SIZE_8:         ;Move the 1 bit size field relevant register
000001B4  48E7 C000                280      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
Line 281 ERROR: Undefined symbol
000001B8  3039 004DBD16            281      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
000001BE  323C 0007                282      MOVE.W   #7,D1              ;Prepare 7 bit shift to D1
000001C2  E368                     283      LSL.W    D1,D0              ;Truncate to find the 1 size bit
000001C4  E268                     284      LSR.W    D1,D0              ;Reposition the bits
000001C6  323C 0008                285      MOVE.W   #8,D1              ;Prepare 8 bit shift to D1
000001CA  E268                     286      LSR.W    D1,D0              ;Truncate to shift 1 bit to a byte
000001CC  11C0 0000                287      MOVE.B   D0,OP_SIZE         ;Move 1 size bit into OP_SIZE
000001D0  4CDF 0003                288      MOVEM.L (SP)+,D0-D1         ;Restore registers
000001D4  4E75                     289      RTS                         ;Return to stack
000001D6                           290  **********************************************************************************
000001D6                           291  
000001D6                           292  **********************************************************************************
000001D6                           293  FIND_3_BIT_REG_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
000001D6                           294     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
Line 295 ERROR: Undefined symbol
000001D6  3039 004DBD16            295      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
000001DC  323C 0004                296      MOVE.W   #4,D1          ;Prepare 4 bit shift to D1
000001E0  E368                     297      LSL.W    D1,D0          ;Truncate to find the 2 size bits
000001E2  E268                     298      LSR.W    D1,D0          ;Reposition the bits
000001E4  323C 0009                299      MOVE.W   #9,D1          ;Prepare 9 bit shift to D1
000001E8  E268                     300      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
000001EA  3A00                     301      MOVE.W   D0,D5          ;Move 3 register bits into D4
000001EC                           302     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
000001EC  4E75                     303      RTS                     ;Return to stack
000001EE                           304  **********************************************************************************
000001EE                           305  
000001EE                           306  * MOVE_AND_MOVEA_PARSE_EA
000001EE                           307  **********************************************************************************
000001EE                           308  * Description: Special parsing for the SRC and DST Mode/Reg for MOVE/MOVE
000001EE                           309  *
000001EE                           310  * Registers used: A6,D0,D1,D7,D6,D5,D4
000001EE                           311  *
000001EE                           312  * Precondition: OP code has been identified with either MOVE or MOVEA
000001EE                           313  *
000001EE                           314  * Postcondition: Store all relevant EA bits into associated register.
000001EE                           315  **********************************************************************************
000001EE                           316  MOVE_AND_MOVEA_PARSE_EA:       ;Move the 3 bit dynamic register bits to proper register
000001EE                           317     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
Line 318 ERROR: Undefined symbol
000001EE  3039 004DBD16            318      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
000001F4  323C 000A                319      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
000001F8  E368                     320      LSL.W   D1,D0            ;Truncate to find the last 6 bits
000001FA  E268                     321      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
000001FC  3E00                     322      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
000001FE  323C 0003                323      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
00000202  E26F                     324      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
00000204  3A07                     325      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
00000206  323C 000D                326      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
0000020A  E368                     327      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
0000020C  E268                     328      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
0000020E  3800                     329      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
00000210                           330  ****MOVING_SOURCE***********
Line 331 ERROR: Undefined symbol
00000210  3039 004DBD16            331      MOVE.W CUR_OP_CODE,D0     ;Move current OP code into D0     
00000216  323C 0004                332      MOVE.W  #4,D1             ;Prepare 4 bit shift to D1
0000021A  E368                     333      LSL.W   D1,D0             ;Truncate to find bits 11-6
0000021C  E268                     334      LSR.W   D1,D0             ;Reposition bits
0000021E  323C 0006                335      MOVE.W  #6,D1             ;Prepare 6 bit shift to D1
00000222  E268                     336      LSR.W   D1,D0             ;Truncate the SRC Reg/Mode bits
00000224  323C 0003                337      MOVE.W  #3,D1             ;Prepare a 3 bit shift to D1 for DST Reg/Mode
00000228  3C00                     338      MOVE.W  D0,D6             ;Copy over the current 6 bits to D6
0000022A  E268                     339      LSR.W   D1,D0             ;Truncate DST Mode  
0000022C  3E00                     340      MOVE.W  D0,D7             ;Move DST Reg to D7
0000022E  323C 000D                341      MOVE.W  #13,D1             
00000232  E36E                     342      LSL.W   D1,D6             ;Truncate 13 bits in D6
00000234  E26E                     343      LSR.W   D1,D6             ;Reposition D6
00000236                           344                                ;D6 now contains the DST Reg
00000236                           345     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
00000236  4E75                     346      RTS                     ;Return to stack
00000238                           347  **********************************************************************************
00000238                           348  *PARSE_EA_CONSTANT_BITS
00000238                           349  **********************************************************************************
00000238                           350  * Definition: Uses CUR_OP_CODE to shift the proper bits into the global constants
00000238                           351  * used for EA (MNEMONIC,FIRST_3,SECOND_3,THIRD_3,FOURTH_3. Where MNEMONIC refers
00000238                           352  * to the first 4 bits of CUR_OP_CODE (15-12), FIRST_3 refers to the first group
00000238                           353  * of 3 bits (11-9), SECOND_3 refers to the second group of 3 bits (8-6), THIRD_3
00000238                           354  * refers to the third group of 3 bits (5-3), and FOURTH_3 refers to the fourth
00000238                           355  * group of 3 bits (2-0). Shifts CUR_OP_CODE bits to initialize constants.
00000238                           356  *
00000238                           357  * Registers used: D0,D1
00000238                           358  *
00000238                           359  * Precondition: CUR_OP_CODE has been set with an 4 hex instruction set
00000238                           360  * 
00000238                           361  * Postcondition: MNEMONIC, FIRST_3, SECOND_3, THIRD_3, FOURTH_3 have been set
00000238                           362  * to the corresponding values.
00000238                           363  **********************************************************************************
00000238                           364  PARSE_EA_CONSTANT_BITS:
00000238                           365      *MNEMONIC SHIFT
Line 366 ERROR: Undefined symbol
00000238  3039 004DBD16            366      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D0
0000023E  323C 000C                367      MOVE.W #12,D1               ;Prepare a bit shift of 12 into D1
00000242  E268                     368      LSR.W D1,D0                 ;Shift 12 bits from D0 right
00000244  11C0 0001                369      MOVE.B D0,MNEMONIC          ;Set MNEMONIC to D0
00000248                           370      *FIRST_3 SHIFT
00000248  323C 0009                371      MOVE.W #9,D1                ;Prepare a bit shift of 9 into D1
Line 372 ERROR: Undefined symbol
0000024C  3039 004DBD16            372      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
00000252  E948                     373      LSL.W #4,D0                 ;Shift out bits 15-12 in D0
00000254  E848                     374      LSR.W #4,D0                 ;Reposition D0
00000256  E268                     375      LSR.W  D1,D0                ;Shift D0 9 bits right
00000258  11C0 0002                376      MOVE.B D0,FIRST_3           ;Set FIRST_3 to D0
0000025C                           377      *SECOND_3 SHIFT
Line 378 ERROR: Undefined symbol
0000025C  3039 004DBD16            378      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
00000262  EF48                     379      LSL.W #7,D0                 ;Shift out bits 15-9 in D0
00000264  EE48                     380      LSR.W #7,D0                 ;Reposition D0
00000266  EC48                     381      LSR.W #6,D0                 ;Shift D0 6 bits right
00000268  11C0 0003                382      MOVE.B D0,SECOND_3          ;Set SECOND_3 to D0
0000026C                           383      *THIRD_3 SHIFT
Line 384 ERROR: Undefined symbol
0000026C  3039 004DBD16            384      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
00000272  E648                     385      LSR.W #3,D0                 ;Shift D0 3 bits right
00000274  323C 000D                386      MOVE.W #13,D1               ;Prepare a 13 bit shift into D1
00000278  E368                     387      LSL.W D1,D0                 ;Truncate first 13 bits of D0
0000027A  E268                     388      LSR.W D1,D0                 ;Reposition D0
0000027C  11C0 0004                389      MOVE.B D0,THIRD_3           ;Set THIRD_3 to D0
00000280                           390      *FOURTH_3 SHIFT
Line 391 ERROR: Undefined symbol
00000280  3039 004DBD16            391      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
00000286  E368                     392      LSL.W D1,D0                 ;Grab the fourth 3-bit group
00000288  E268                     393      LSR.W D1,D0                 ;Shift D0 back into position
0000028A  11C0 0005                394      MOVE.B D0,FOURTH_3          ;Set FOURTH_3 to Do
0000028E  4E75                     395      RTS                         ;Return to stack
00000290                           396  **********************************************************************************
00000290                           397  ********** End of EA Parsing *****************************************************
00000290                           398  
00000290                           399  *******************JMP LABELS ****************************************************
00000290                           400  * Labelling for group codes will be in the following format
00000290                           401  
00000290                           402  * <JMP Labelname>
00000290                           403  ********************************************************************************
00000290                           404  * Checking List Order (If more than one value)
00000290                           405  * Operand1 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
00000290                           406  * Operand2 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
00000290                           407  
00000290                           408  * Where a-b will refer to the bit corresponding bit value in the instruction
00000290                           409  * format, and a specifier will be attached such as Size, EA Mode, SRC Reg, etc
00000290                           410  * to clarify what a specific bit range means.
00000290                           411  * Checking order refers to what order the checks will be performed in. 
00000290                           412  * Any other code outside of the listed ones will be INVALID_OP.
00000290                           413  ********************************************************************************
00000290                           414  
00000290                           415  ********************************************************************************
00000290                           416  * Global Field Descriptions
00000290                           417  * Size Field: Byte = 00 Word = 01 Long = 10
00000290                           418  * EA Mode: Refer to EA Address Modes
00000290                           419  * EA Reg: 3-bit input that is mapped to the respective binary value
00000290                           420  ********************************************************************************
00000290                           421  
00000290                           422  * GROUP_0                      
00000290                           423  ********************************************************************************
00000290                           424  * Description: Checks for the following listed OP codes to be present or not
00000290                           425  * Supported OP codes:
00000290                           426  * ORI: $00, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00000290                           427  * CMPI: $0C, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00000290                           428  * Dynamic BCLR: $0, 11-9 Register, 8-6 %110, 5-3 EA Mode, 2-0 EA Reg
00000290                           429  * Static BCLR: $01, 7-6 10, 5-3 EA Mode, 2-0 EA Reg
00000290                           430  *
00000290                           431  * Registers used: D0
00000290                           432  *
00000290                           433  * Precondition: First nibble has been identified as $0
00000290                           434  *
00000290                           435  * Postcondition: Parses proper OP code with a nibble value of $0 or finds an
00000290                           436  * invalid OP code. After a successful parse loading for EA values will be done
00000290                           437  * through a subroutine.
00000290                           438  * 
00000290                           439  * Unsupported OP codes:
00000290                           440  * ORI_TO_CCR, ORI_TO_SR, ANDI_TO_CCR, ANDI_TO_SR, ANDI, SUBI, ADDI, EORI_TO_CCR
00000290                           441  * EORI_TO_SR, EORI, STATIC_BTST, STATIC_BCHG, STATIC_BSET, DYNAMIC_BTST,
00000290                           442  * DYNAMIC_BCHG, DYNAMIC_BSET, MOVEP 
00000290                           443  ********************************************************************************
00000290                           444  C_GROUP_0:
00000290  48E7 C000                445      MOVEM.L D0-D1, -(SP)            ;Backup registers
00000294                           446      
00000294                           447  *Unsupported OP codes that are fully static in bits
00000294                           448  CHECK_OP_ORI_TO_CCR:
Line 449 ERROR: Undefined symbol
00000294  3039 004DBD16            449      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000029A  B07C 003C                450      CMP.W #$003C,D0                 ;Compare the direct full bits
0000029E  6700 01EE                451      BEQ GROUP0_INVALID              ;INVALID OP code found
000002A2  6600 0002                452      BNE CHECK_OP_ORI_TO_SR          ;Check next routine
000002A6                           453      
000002A6                           454  CHECK_OP_ORI_TO_SR:
Line 455 ERROR: Undefined symbol
000002A6  3039 004DBD16            455      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002AC  B07C 007C                456      CMP.W #$007C,D0                 ;Compare the direct full bits
000002B0  6700 01DC                457      BEQ GROUP0_INVALID              ;INVALID OP code found
000002B4  6600 0002                458      BNE CHECK_OP_ANDI_TO_CCR        ;Check next routine
000002B8                           459      
000002B8                           460  CHECK_OP_ANDI_TO_CCR:
Line 461 ERROR: Undefined symbol
000002B8  3039 004DBD16            461      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002BE  B07C 023C                462      CMP.W #$023C,D0                 ;Compare the direct full bits
000002C2  6700 01CA                463      BEQ GROUP0_INVALID              ;INVALID OP code found
000002C6  6600 0002                464      BNE CHECK_OP_ANDI_TO_SR         ;Check next routine
000002CA                           465      
000002CA                           466  CHECK_OP_ANDI_TO_SR:
Line 467 ERROR: Undefined symbol
000002CA  3039 004DBD16            467      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002D0  B07C 027C                468      CMP.W #$027C,D0                 ;Compare the direct full bits
000002D4  6700 01B8                469      BEQ GROUP0_INVALID              ;INVALID OP code found
000002D8  6600 0002                470      BNE CHECK_OP_EORI_TO_CCR                ;Check next routine
000002DC                           471  
000002DC                           472  CHECK_OP_EORI_TO_CCR:
Line 473 ERROR: Undefined symbol
000002DC  3039 004DBD16            473      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002E2  B07C 0A3C                474      CMP.W #$0A3C,D0                 ;Compare the direct full bits
000002E6  6700 01A6                475      BEQ GROUP0_INVALID              ;INVALID OP code found
000002EA  6600 0002                476      BNE CHECK_OP_EORI_TO_SR         ;Check next routine
000002EE                           477      
000002EE                           478  CHECK_OP_EORI_TO_SR:
Line 479 ERROR: Undefined symbol
000002EE  3039 004DBD16            479      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000002F4  B07C 0A7C                480      CMP.W #$0A7C,D0                 ;Compare the direct full bits
000002F8  6700 0194                481      BEQ GROUP0_INVALID              ;INVALID OP code found
000002FC  6600 0002                482      BNE CHECK_OP_ANDI               ;Check next routine
00000300                           483      
00000300                           484  *Unsupported OP codes to check with partial static bits
00000300                           485  CHECK_OP_ANDI:
Line 486 ERROR: Undefined symbol
00000300  3039 004DBD16            486      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000306  0240 FF00                487      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
0000030A  B07C 0200                488      CMP.W #$0200,D0                 ;Compare the appropriate masked bits
0000030E  6700 017E                489      BEQ GROUP0_INVALID              ;INVALID OP code found
00000312  6600 0002                490      BNE CHECK_OP_SUBI               Check next routine
00000316                           491      
00000316                           492  CHECK_OP_SUBI:
Line 493 ERROR: Undefined symbol
00000316  3039 004DBD16            493      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000031C  0240 FF00                494      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00000320  B07C 0400                495      CMP.W #$0400,D0                 ;Compare the appropriate masked bits
00000324  6700 0168                496      BEQ GROUP0_INVALID              ;INVALID OP code found
00000328  6600 0002                497      BNE CHECK_OP_ADDI               ;Check next routine
0000032C                           498  
0000032C                           499  CHECK_OP_ADDI:
Line 500 ERROR: Undefined symbol
0000032C  3039 004DBD16            500      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000332  0240 FF00                501      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00000336  B07C 0600                502      CMP.W #$0600,D0                 ;Compare the appropriate masked bits
0000033A  6700 0152                503      BEQ GROUP0_INVALID              ;INVALID OP code found
0000033E  6600 0002                504      BNE CHECK_OP_EORI               ;Check next routine 
00000342                           505  
00000342                           506  CHECK_OP_EORI:
Line 507 ERROR: Undefined symbol
00000342  3039 004DBD16            507      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000348  0240 FF00                508      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
0000034C  B07C 0A00                509      CMP.W #$0A00,D0                 ;Compare the appropriate masked bits
00000350  6700 013C                510      BEQ GROUP0_INVALID              ;INVALID OP code found
00000354  6600 0002                511      BNE CHECK_OP_STATIC_BTST        ;Check next routine
00000358                           512      
00000358                           513  CHECK_OP_STATIC_BTST:
Line 514 ERROR: Undefined symbol
00000358  3039 004DBD16            514      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000035E  0240 FFC0                515      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00000362  B07C 0800                516      CMP.W #$0800,D0                 ;Compare the appropriate masked bits
00000366  6700 0126                517      BEQ GROUP0_INVALID              ;INVALID OP code found
0000036A  6600 0002                518      BNE CHECK_OP_STATIC_BCHG        ;Check next routine
0000036E                           519      
0000036E                           520  CHECK_OP_STATIC_BCHG:
Line 521 ERROR: Undefined symbol
0000036E  3039 004DBD16            521      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000374  0240 FFC0                522      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00000378  B07C 0840                523      CMP.W #$0840,D0                 ;Compare the appropriate masked bits
0000037C  6700 0110                524      BEQ GROUP0_INVALID              ;INVALID OP code found
00000380  6600 0002                525      BNE CHECK_OP_STATIC_BSET        ;Check next routine
00000384                           526  
00000384                           527  CHECK_OP_STATIC_BSET:
Line 528 ERROR: Undefined symbol
00000384  3039 004DBD16            528      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000038A  0240 FFC0                529      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
0000038E  B07C 08C0                530      CMP.W #$08C0,D0                 ;Compare the appropriate masked bits
00000392  6700 00FA                531      BEQ GROUP0_INVALID              ;INVALID OP code found   
00000396  6600 0002                532      BNE CHECK_OP_DYNAMIC_BTST       ;Check next routine
0000039A                           533  
0000039A                           534  CHECK_OP_DYNAMIC_BTST:
Line 535 ERROR: Undefined symbol
0000039A  3039 004DBD16            535      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000003A0  0240 F1C0                536      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
000003A4  B07C 0100                537      CMP.W #$0100,D0                 ;Compare the appropriate masked bits
000003A8  6700 00E4                538      BEQ GROUP0_INVALID              ;INVALID OP code found
000003AC  6600 0002                539      BNE CHECK_OP_DYNAMIC_BCHG       ;Check next routine
000003B0                           540  
000003B0                           541  CHECK_OP_DYNAMIC_BCHG:
Line 542 ERROR: Undefined symbol
000003B0  3039 004DBD16            542      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000003B6  0240 F1C0                543      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
000003BA  B07C 0140                544      CMP.W #$0140,D0                 ;Compare the appropriate masked bits 
000003BE  6700 00CE                545      BEQ GROUP0_INVALID              ;INVALID OP code found
000003C2  6600 0002                546      BNE CHECK_OP_DYNAMIC_BSET       ;Check next routine
000003C6                           547      
000003C6                           548  CHECK_OP_DYNAMIC_BSET:
000003C6                           549  
Line 550 ERROR: Undefined symbol
000003C6  3039 004DBD16            550      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000003CC  0240 F1C0                551      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
000003D0  B07C 01C0                552      CMP.W   #$01C0,D0               ;Compare the appropriate masked bits 
000003D4  6700 0006                553      BEQ     BIT_CHECK_MOVEP         ;Check special case for MOVEP
000003D8  6600 001E                554      BNE     CHECK_OP_MOVEP          ;Check next routine
000003DC                           555  
000003DC                           556  BIT_CHECK_MOVEP:                                ;This is a special case check for MOVEP
Line 557 ERROR: Undefined symbol
000003DC  3039 004DBD16            557      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000003E2  323C 000A                558      MOVE.W  #10,D1                  ;Prepare a 10-bit shift
000003E6  E368                     559      LSL.W   D1,D0                   ;Shift out 10 bits left 
000003E8  E268                     560      LSR.W   D1,D0                   ;Reposition D0 for last 6 bits
000003EA  E648                     561      LSR.W   #3,D0                   ;Shift out 3 bits right, D0 contains bits 5-3
000003EC  B07C 0001                562      CMP.W   #$1,D0                  ;Compare bits to D0
000003F0  6700 0006                563      BEQ     CHECK_OP_MOVEP          ;If bits are $1 then it's addressing, goto MOVEP
000003F4  6600 0098                564      BNE     GROUP0_INVALID          ;If not then it's DYNAMIC_BSET which is invalid
000003F8                           565      
000003F8                           566  CHECK_OP_MOVEP:
Line 567 ERROR: Undefined symbol
000003F8  3039 004DBD16            567      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000003FE  0240 F138                568      ANDI.W #$F138,D0                ;Mask relevant bits to D0
00000402  B07C 0108                569      CMP.W #$0108,D0                 ;Compare the appropriate masked bits
00000406  6700 09AE                570      BEQ INVALID_OP                  ;INVALID OP code found
0000040A  6600 0002                571      BNE CHECK_OP_ORI                ;Check next routine
0000040E                           572  
0000040E                           573  *Supported OP code checks
0000040E                           574  CHECK_OP_ORI:
Line 575 ERROR: Undefined symbol
0000040E  3039 004DBD16            575      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000414  0240 FF00                576      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00000418  B07C 0000                577      CMP.W   #$0000,D0               ;Compare the appropriate masked bits     
0000041C  6600 0010                578      BNE     CHECK_OP_CMPI           ;Branch to next comparison if not equal
00000420  4EB8 0170                579      JSR     FIND_2_BIT_SIZE_7_TO_6
00000424  4EB9 00000DD2            580      JSR     PRINT_OP_ORI            ;Print the OP code if equal    
0000042A  6000 0068                581      BRA     GROUP0_SUCCESS          ;Finish routine
0000042E                           582      
0000042E                           583  CHECK_OP_CMPI:
Line 584 ERROR: Undefined symbol
0000042E  3039 004DBD16            584      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000434  0240 FF00                585      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00000438  B07C 0C00                586      CMP.W   #$0C00,D0               ;Compare the appropriate masked bits   
0000043C  6600 0010                587      BNE     CHECK_OP_STATIC_BCLR    ;Branch to next comparison if not equal       
00000440  4EB8 0170                588      JSR     FIND_2_BIT_SIZE_7_TO_6
00000444  4EB9 00000DE8            589      JSR     PRINT_OP_CMPI           ;Print the OP code if equal
0000044A  6000 0048                590      BRA     GROUP0_SUCCESS          ;Finish routine
0000044E                           591      
0000044E                           592  CHECK_OP_STATIC_BCLR:
Line 593 ERROR: Undefined symbol
0000044E  3039 004DBD16            593      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000454  0240 FF00                594      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00000458  B07C 0800                595      CMP.W   #$0800,D0               ;Compare the appropriate masked bits
0000045C  6600 0010                596      BNE     CHECK_OP_DYNAMIC_BCLR   ;Branch to next comparison if not equal
00000460  4EB8 0170                597      JSR     FIND_2_BIT_SIZE_7_TO_6
00000464  4EB9 00000DFE            598      JSR     PRINT_OP_STATIC_BCLR    ;Print the OP code if equal
0000046A  6000 0028                599      BRA     GROUP0_SUCCESS          ;Finish routine
0000046E                           600      
0000046E                           601  CHECK_OP_DYNAMIC_BCLR:
Line 602 ERROR: Undefined symbol
0000046E  3039 004DBD16            602      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00000474  0240 0180                603      ANDI.W  #$0180,D0               ;Mask relevant bits to D0
00000478  B07C 0180                604      CMP.W   #$0180,D0               ;Compare the appropriate masked bits
0000047C  6600 0010                605      BNE     GROUP0_INVALID          ;If not equal this must be an invalid OP code
00000480  4EB8 0170                606      JSR     FIND_2_BIT_SIZE_7_TO_6
00000484  4EB9 00000E14            607      JSR     PRINT_OP_DYNAMIC_BCLR   ;Print the OP code if equal
0000048A  6000 0008                608      BRA     GROUP0_SUCCESS          ;Finish routine
0000048E                           609  
0000048E                           610  GROUP0_INVALID:                     ;Checks have been finished, invalid OP code has been found
0000048E  4EB9 00000DB6            611      JSR INVALID_OP                  ;INVALID OP code found
00000494                           612      
00000494                           613  GROUP0_SUCCESS:                     ;Checks have been finished,a valid OP code has been found
00000494  4CDF 0003                614      MOVEM.L (SP)+,D0-D1             ;Restore registers
00000498  4E75                     615      RTS                             ;Return to stack
0000049A                           616      
0000049A                           617  * GROUP_1                      
0000049A                           618  ********************************************************************************
0000049A                           619  * Supported OP code:
0000049A                           620  * MOVE.B: $1, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
0000049A                           621  ********************************************************************************
0000049A                           622  C_GROUP_1:
0000049A  48E7 C000                623      MOVEM.L D0-D1,-(SP)             ;Save registers to stack
0000049E                           624  
0000049E                           625  CHECK_OP_MOVE_B:
Line 626 ERROR: Undefined symbol
0000049E  3039 004DBD16            626      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0          
000004A4  0240 F000                627      ANDI.W  #$F000,D0               ;Mask relevant bits to D0
000004A8  B07C 1000                628      CMP.W   #$1000,D0               ;Compare the appropriate masked bits 
000004AC  6600 000C                629      BNE     GROUP1_INVALID          ;Invalid OP code has been found
000004B0  4EB9 00000E2A            630      JSR     PRINT_OP_MOVEB          ;Print the OP code if equal
000004B6  6000 0008                631      BRA     GROUP1_SUCCESS          ;Finish routine
000004BA                           632      
000004BA                           633  GROUP1_INVALID:
000004BA  4EB9 00000DB6            634      JSR INVALID_OP                  ;Invalid OP code found
000004C0                           635      
000004C0                           636  GROUP1_SUCCESS:
000004C0  4CDF 0003                637      MOVEM.L (SP)+,D0-D1             ;Restore register
000004C4  4E75                     638      RTS                             ;Return to stack
000004C6                           639  * GROUP_2
000004C6                           640  ********************************************************************************
000004C6                           641  * Supported OP codes:
000004C6                           642  * MOVEA.L: $2, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
000004C6                           643  * MOVE.L: $2, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000004C6                           644  ********************************************************************************
000004C6                           645  C_GROUP_2:
000004C6  48E7 E000                646      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
000004CA                           647  
000004CA                           648  CHECK_OP_MOVEA_L:
Line 649 ERROR: Undefined symbol
000004CA  3039 004DBD16            649      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0  
000004D0  0240 F000                650      ANDI.W #$F000,D0                ;Mask relevant bits to D0
000004D4  B07C 2000                651      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
000004D8  4EF9 000004DE            652      JMP FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
000004DE                           653      
000004DE                           654  FIND_MOVEA_L_DIFFERENCE:            ;Finds difference between MOVEA and MOVE
Line 655 ERROR: Undefined symbol
000004DE  3039 004DBD16            655      MOVE.W   CUR_OP_CODE,D0         ;Move current OP code into D0
000004E4  323C 0007                656      MOVE.W   #7,D1                  ;Prepare 7 bit shift to D1
000004E8  E368                     657      LSL.W    D1,D0                  ;Truncate to find the 3 address mode bits
000004EA  E268                     658      LSR.W    D1,D0                  ;Reposition the bits
000004EC  323C 0006                659      MOVE.W   #6,D1                  ;Prepare 6 bit shift to D1
000004F0  E268                     660      LSR.W    D1,D0                  ;Truncate to shift 3 bits to a register
000004F2  3400                     661      MOVE.W   D0,D2                  ;Move 3 address mode bits into D6
000004F4  B47C 0001                662      CMP.W   #$1,D2                  ;Check if the address mode value is MOVEA
000004F8  6600 000C                663      BNE     CHECK_OP_MOVE_L         ;Branch if not equal to check MOVE
000004FC  4EB9 00000E3A            664      JSR     PRINT_OP_MOVEA_L        ;Print the OP code if it's a match
00000502  6000 0024                665      BRA     GROUP2_SUCCESS          ;Finish routine
00000506                           666      
00000506                           667      
00000506                           668  CHECK_OP_MOVE_L:
Line 669 ERROR: Undefined symbol
00000506  3039 004DBD16            669      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000050C  0240 F000                670      ANDI.W #$F000,D0                ;Mask relevant bits to D0
00000510  B07C 2000                671      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
00000514  6600 000C                672      BNE GROUP2_INVALID              ;If not equal, OP code is invalid
00000518  4EB9 00000E4A            673      JSR PRINT_OP_MOVE_L             ;Print out MOVE.L
0000051E  6000 0008                674      BRA GROUP2_SUCCESS              ;Finish routine
00000522                           675      
00000522                           676  GROUP2_INVALID:    
00000522  4EB9 00000DB6            677      JSR INVALID_OP                  ;Invalid OP code found
00000528                           678      
00000528                           679  GROUP2_SUCCESS:
00000528  4CDF 0007                680      MOVEM.L (SP)+,D0-D2             ;Restore register
0000052C  4E75                     681      RTS                             ;Return to stack
0000052E                           682  * GROUP_3
0000052E                           683  ********************************************************************************
0000052E                           684  * Supported OP codes:
0000052E                           685  * MOVEA.W: $3, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
0000052E                           686  * MOVE.W: $3, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
0000052E                           687  ********************************************************************************
0000052E                           688  C_GROUP_3:
0000052E  48E7 E000                689      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
00000532                           690      
00000532                           691  CHECK_OP_MOVEA_W:
Line 692 ERROR: Undefined symbol
00000532  3039 004DBD16            692      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00000538  0240 F000                693      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
0000053C  B07C 3000                694      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
00000540  4EF9 00000546            695      JMP      FIND_MOVEA_W_DIFF     ;Custom routine to differentiate MOVE and MOVEA
00000546                           696  
00000546                           697      
00000546                           698  FIND_MOVEA_W_DIFF:                 ;Finds difference between MOVEA and MOVE
Line 699 ERROR: Undefined symbol
00000546  3039 004DBD16            699      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
0000054C  323C 0007                700      MOVE.W   #7,D1                 ;Prepare 7 bit shift to D1
00000550  E368                     701      LSL.W    D1,D0                 ;Truncate to find the 3 address mode bits
00000552  E268                     702      LSR.W    D1,D0                 ;Reposition the bits
00000554  323C 0006                703      MOVE.W   #6,D1                 ;Prepare 6 bit shift to D1
00000558  E268                     704      LSR.W    D1,D0                 ;Truncate to shift 3 bits to a register
0000055A  3400                     705      MOVE.W   D0,D2                 ;Move 3 address mode bits into D6
0000055C  B47C 0001                706      CMP.W    #$1,D2                ;Check if the address mode value is MOVEA
00000560  6600 000C                707      BNE      CHECK_OP_MOVE_W       ;If bits do not match, try MOVE 
00000564  4EB9 00000E5A            708      JSR      PRINT_OP_MOVEA_W      ;Print the OP code if it's a match
0000056A  6000 0024                709      BRA      GROUP3_SUCCESS        ;Finish routine
0000056E                           710      
0000056E                           711  CHECK_OP_MOVE_W:
Line 712 ERROR: Undefined symbol
0000056E  3039 004DBD16            712      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00000574  0240 F000                713      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00000578  B07C 3000                714      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
0000057C  6600 000C                715      BNE      GROUP3_INVALID        ;INVALID OP code found
00000580  4EB9 00000E6A            716      JSR      PRINT_OP_MOVE_W       ;Print the OP code if it's a match
00000586  6000 0008                717      BRA      GROUP3_SUCCESS        ;Finish routine
0000058A                           718      
0000058A                           719  GROUP3_INVALID:
0000058A  4EB9 00000DB6            720      JSR INVALID_OP                 ;INVALID OP code found
00000590                           721  
00000590                           722  GROUP3_SUCCESS:
00000590  4CDF 0007                723      MOVEM.L (SP)+,D0-D2            ;Restore registers from stack
00000594  4E75                     724      RTS                            ;Return to stack
00000596                           725  
00000596                           726  * GROUP_4
00000596                           727  ********************************************************************************
00000596                           728  * Supported OP codes:
00000596                           729  * LEA: $4, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00000596                           730  * JSR: $4E, 7-6 %10, 5-3 EA Mode, 2-0 EA Reg 
00000596                           731  * RTS: $4E75
00000596                           732  * NEG: $44, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00000596                           733  * MOVEM: $4, 11 %1, 10 %D, 9-7 %001, 6 S, 5-3 EA Mode, 2-0 EA Reg
00000596                           734  * %D = 0 , Register to Memory, 1 Memory to Register
00000596                           735  * Unsupported OP codes: MOVE_FROM_SR, MOVE_TO_CCR, MOVE_TO_SR, NEGX, CLR, NOT
00000596                           736  * EXT, NBCD, SWAP, PEA, ILLEGAL, TAS, TST, TRAP, LINK, UNLK, MOVE_USP, RESET,
00000596                           737  * NOP, STOP, RTE, TRAPV, RTR, JMP, CHK
00000596                           738  ********************************************************************************
00000596                           739  C_GROUP_4:
00000596  2F00                     740      MOVE.L  D0,-(SP)            ;Save registers
00000598                           741      
00000598                           742  *Unsupported OP codes to check that are full static bits
00000598                           743  CHECK_OP_STOP:
Line 744 ERROR: Undefined symbol
00000598  3039 004DBD16            744      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000059E  B07C 4E72                745      CMP.W  #$4E72,D0                ;Compare the appropriate bits
000005A2  6700 02A6                746      BEQ    GROUP4_INVALID           ;INVALID OP code found
000005A6  6600 0002                747      BNE    CHECK_OP_RESET           ;Check next OP code
000005AA                           748      
000005AA                           749  CHECK_OP_RESET:
Line 750 ERROR: Undefined symbol
000005AA  3039 004DBD16            750      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005B0  B07C 4E70                751      CMP.W  #$4E70,D0                ;Compare the appropriate bits
000005B4  6700 0294                752      BEQ    GROUP4_INVALID           ;INVALID OP code found
000005B8  6600 0002                753      BNE    CHECK_OP_NOP             ;Check next OP code
000005BC                           754      
000005BC                           755  CHECK_OP_NOP:
Line 756 ERROR: Undefined symbol
000005BC  3039 004DBD16            756      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005C2  B07C 4E71                757      CMP.W  #$4E71,D0                ;Compare the appropriate bits
000005C6  6700 0282                758      BEQ    GROUP4_INVALID           ;INVALID OP code found
000005CA  6600 0002                759      BNE    CHECK_OP_ILLEGAL         ;Check next OP code
000005CE                           760      
000005CE                           761  CHECK_OP_ILLEGAL:
Line 762 ERROR: Undefined symbol
000005CE  3039 004DBD16            762      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005D4  B07C 4AFC                763      CMP.W  #$4AFC,D0                ;Compare the appropriate bits
000005D8  6700 0270                764      BEQ    GROUP4_INVALID           ;INVALID OP code found
000005DC  6600 0002                765      BNE    CHECK_OP_RTE             ;Check next OP code
000005E0                           766      
000005E0                           767  CHECK_OP_RTE:    
Line 768 ERROR: Undefined symbol
000005E0  3039 004DBD16            768      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005E6  B07C 4E73                769      CMP.W #$4E73,D0                 ;Compare the appropriate bits
000005EA  6700 025E                770      BEQ   GROUP4_INVALID            ;INVALID OP code found
000005EE  6600 0002                771      BNE   CHECK_OP_TRAPV            ;Check next OP code
000005F2                           772      
000005F2                           773  CHECK_OP_TRAPV:
Line 774 ERROR: Undefined symbol
000005F2  3039 004DBD16            774      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000005F8  B07C 4E76                775      CMP.W  #$4E76,D0                ;Compare the appropriate bits
000005FC  6700 024C                776      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000600  6600 0002                777      BNE    CHECK_OP_RTR             ;Check next OP code
00000604                           778      
00000604                           779  CHECK_OP_RTR:
Line 780 ERROR: Undefined symbol
00000604  3039 004DBD16            780      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000060A  B07C 4E77                781      CMP.W #$4E77,D0                 ;Compare the appropriate bits
0000060E  6700 023A                782      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000612  6600 0002                783      BNE    CHECK_OP_MOVE_FROM_SR    ;Check next OP code
00000616                           784  
00000616                           785  
00000616                           786  *Unsupported OP codes to check that have partial static bits
00000616                           787  CHECK_OP_MOVE_FROM_SR:
Line 788 ERROR: Undefined symbol
00000616  3039 004DBD16            788      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000061C  0240 FFC0                789      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00000620  B07C 40C0                790      CMP.W  #$40C0,D0                ;Compare the appropriate masked bits
00000624  6700 0224                791      BEQ    GROUP4_INVALID           ;INVALID OP code found  
00000628  6600 0002                792      BNE    CHECK_OP_MOVE_TO_CCR     ;Check next OP code
0000062C                           793      
0000062C                           794  CHECK_OP_MOVE_TO_CCR:
Line 795 ERROR: Undefined symbol
0000062C  3039 004DBD16            795      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000632  0240 FFC0                796      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00000636  B07C 44C0                797      CMP.W  #$44C0,D0                ;Compare the appropriate masked bits
0000063A  6700 020E                798      BEQ    GROUP4_INVALID           ;INVALID OP code found
0000063E  6600 0002                799      BNE    CHECK_OP_MOVE_TO_SR      ;Check next OP code
00000642                           800      
00000642                           801  CHECK_OP_MOVE_TO_SR:
Line 802 ERROR: Undefined symbol
00000642  3039 004DBD16            802      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000648  0240 FFC0                803      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
0000064C  B07C 46C0                804      CMP.W  #$46C0,D0                ;Compare the appropriate masked bits
00000650  6700 01F8                805      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000654  6600 0002                806      BNE    CHECK_OP_NEGX            ;Check next OP code
00000658                           807      
00000658                           808  CHECK_OP_NEGX:
Line 809 ERROR: Undefined symbol
00000658  3039 004DBD16            809      MOVE.W CUR_OP_CODE,D0            ;Move current instruction set into D0
0000065E  0240 FF00                810      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00000662  B07C 4000                811      CMP.W  #$4000,D0                ;Compare the appropriate masked bits
00000666  6700 01E2                812      BEQ    GROUP4_INVALID           ;INVALID OP code found
0000066A  6600 0002                813      BNE    CHECK_OP_CLR             ;Check next OP code
0000066E                           814      
0000066E                           815  CHECK_OP_CLR:
Line 816 ERROR: Undefined symbol
0000066E  3039 004DBD16            816      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000674  0240 FF00                817      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00000678  B07C 4200                818      CMP.W  #$4200,D0                ;Compare the appropriate masked bits
0000067C  6700 01CC                819      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000680  6600 0002                820      BNE    CHECK_OP_NOT             ;Check next OP code
00000684                           821      
00000684                           822  CHECK_OP_NOT:
Line 823 ERROR: Undefined symbol
00000684  3039 004DBD16            823      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000068A  0240 FF00                824      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
0000068E  B07C 4600                825      CMP.W  #$4600,D0                ;Compare the appropriate masked bits
00000692  6700 01B6                826      BEQ    GROUP4_INVALID           ;INVALID OP code found
00000696  6600 0002                827      BNE    CHECK_OP_EXT             ;Check next OP code
0000069A                           828      
0000069A                           829  CHECK_OP_EXT:
Line 830 ERROR: Undefined symbol
0000069A  3039 004DBD16            830      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000006A0  0240 FF88                831      ANDI.W #$FF88,D0                ;Mask relevant bits to D0
000006A4  B07C 4880                832      CMP.W  #$4880,D0                ;Compare the appropriate masked bits
000006A8  6700 01A0                833      BEQ    GROUP4_INVALID           ;INVALID OP code BIT_CHECK_EXT
000006AC  6600 001E                834      BNE    CHECK_OP_NBCD            ;Check next OP code
000006B0                           835  
000006B0                           836  BIT_CHECK_EXT:    
Line 837 ERROR: Undefined symbol
000006B0  3039 004DBD16            837      MOVE.W CUR_OP_CODE,D0           ;This is a special case to check against MOVEM
000006B6  323C 000A                838      MOVE.W #10,D1                   ;Prepare a 10 bit shift into D1
000006BA  E368                     839      LSL.W  D1,D0                    ;Shift D0 left 10 bits
000006BC  E068                     840      LSR.W  D0,D0                    ;Reposition D0
000006BE  E648                     841      LSR.W  #3,D0                    ;Shift D0 3 bits
000006C0  B078 0000                842      CMP.W  %000,D0                  ;Check the specific bits needed to differentiate EXT
000006C4  6700 0184                843      BEQ    GROUP4_INVALID           ;This means that this OP code is EXT
000006C8  6600 0164                844      BNE    CHECK_OP_MOVEM           ;This is the only other possibility 
000006CC                           845      
000006CC                           846  CHECK_OP_NBCD:
Line 847 ERROR: Undefined symbol
000006CC  3039 004DBD16            847      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000006D2  0240 FFC0                848      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0           
000006D6  B07C 4800                849      CMP.W  #$4800,D0                ;Compare the appropriate masked bits
000006DA  6700 016E                850      BEQ    GROUP4_INVALID           ;INVALID OP code
000006DE  6600 0002                851      BNE    CHECK_OP_SWAP            ;Check next OP code
000006E2                           852      
000006E2                           853  CHECK_OP_SWAP:                      ; This must go before CHECK_OP PEA as first 3 nibbles can be equivalent
Line 854 ERROR: Undefined symbol
000006E2  3039 004DBD16            854      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000006E8  0240 FF48                855      ANDI.W #$FF48,D0                ;Mask relevant bits to D0
000006EC  B07C 4840                856      CMP.W  #$4840,D0                ;Compare the appropriate masked bits
000006F0  6700 0158                857      BEQ    GROUP4_INVALID           ;INVALID OP code
000006F4  6600 0002                858      BNE    CHECK_OP_PEA             ;Check next OP code
000006F8                           859   
000006F8                           860  CHECK_OP_PEA:                       ;This must go after CHECK_OP_SWAP as first 3 nibbles can be equivalent
Line 861 ERROR: Undefined symbol
000006F8  3039 004DBD16            861      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000006FE  0240 FF40                862      ANDI.W #$FF40,D0                ;Mask relevant bits to D0
00000702  B07C 4840                863      CMP.W  #$4840,D0                ;Compare the appropriate masked bits
00000706  6700 0142                864      BEQ    GROUP4_INVALID           ;INVALID OP code
0000070A  6600 0002                865      BNE    CHECK_OP_TAS             ;Check next OP code
0000070E                           866      
0000070E                           867  CHECK_OP_TAS:
Line 868 ERROR: Undefined symbol
0000070E  3039 004DBD16            868      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000714  0240 FFC0                869      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00000718  B07C 4AC0                870      CMP.W  #$4AC0,D0                ;Compare the appropriate masked bits
0000071C  6700 012C                871      BEQ    GROUP4_INVALID           ;INVALID OP code
00000720  6600 0002                872      BNE    CHECK_OP_TST             ;Check next OP code
00000724                           873  
00000724                           874  CHECK_OP_TST:                       ;This must go after CHECK_OP_TAS as first 2 nibbles are equivalent
Line 875 ERROR: Undefined symbol
00000724  3039 004DBD16            875      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000072A  0240 FF00                876      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
0000072E  B07C 4A00                877      CMP.W  #$4A00,D0                ;Compare the appropriate masked bits
00000732  6700 0116                878      BEQ    GROUP4_INVALID           ;INVALID OP code
00000736  6600 0002                879      BNE    CHECK_OP_TRAP            ;Check next OP code
0000073A                           880      
0000073A                           881  CHECK_OP_TRAP:
Line 882 ERROR: Undefined symbol
0000073A  3039 004DBD16            882      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000740  0240 FFF0                883      ANDI.W #$FFF0,D0                ;Mask relevant bits to D0
00000744  B07C 4E40                884      CMP.W  #$4E40,D0                ;Compare the appropriate masked bits
00000748  6700 0100                885      BEQ    GROUP4_INVALID           ;INVALID OP code
0000074C  6600 0002                886      BNE    CHECK_OP_LINK            ;Check next OP code
00000750                           887      
00000750                           888  CHECK_OP_LINK:
Line 889 ERROR: Undefined symbol
00000750  3039 004DBD16            889      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000756  0240 FFF8                890      ANDI.W #$FFF8,D0                ;Mask relevant bits to D0
0000075A  B07C 4E50                891      CMP.W  #$4E50,D0                ;Compare the appropriate masked bits
0000075E  6700 00EA                892      BEQ    GROUP4_INVALID           ;INVALID OP code
00000762  6600 0002                893      BNE    CHECK_OP_UNLK            ;Check next OP code
00000766                           894  
00000766                           895  CHECK_OP_UNLK:
Line 896 ERROR: Undefined symbol
00000766  3039 004DBD16            896      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000076C  0240 FFF8                897      ANDI.W #$FFF8,D0                ;Mask relevant bits to D0
00000770  B07C 4E58                898      CMP.W  #$4E58,D0                ;Compare the appropriate masked bits
00000774  6700 00D4                899      BEQ    GROUP4_INVALID           ;INVALID OP code
00000778  6600 0002                900      BNE    CHECK_OP_MOVE_USP        ;Check next OP
0000077C                           901      
0000077C                           902  CHECK_OP_MOVE_USP:
Line 903 ERROR: Undefined symbol
0000077C  3039 004DBD16            903      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000782  0240 FFF0                904      ANDI.W #$FFF0,D0                ;Mask relevant bits to D0
00000786  B07C 4E60                905      CMP.W  #$4E60,D0                ;Compare the appropriate masked bits
0000078A  6700 00BE                906      BEQ    GROUP4_INVALID           ;INVALID OP code
0000078E  6600 0002                907      BNE    CHECK_OP_JMP             ;Check next OP
00000792                           908  
00000792                           909  CHECK_OP_JMP:
Line 910 ERROR: Undefined symbol
00000792  3039 004DBD16            910       MOVE.W CUR_OP_CODE,D0          ;Move current instruction set into D0
00000798  0240 FFC0                911       ANDI.W #$FFC0,D0               ;Mask relevant bits to D0
0000079C  B07C 4EC0                912       CMP.W  #$4EC0,D0               ;Compare the appropriate masked bits
000007A0  6700 00A8                913       BEQ    GROUP4_INVALID          ;INVALID OP code
000007A4  6600 0002                914       BNE    CHECK_OP_CHK            ;Check next OP code
000007A8                           915       
000007A8                           916  CHECK_OP_CHK:
Line 917 ERROR: Undefined symbol
000007A8  3039 004DBD16            917      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000007AE  0240 F1C0                918      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
000007B2  B07C 4180                919      CMP.W   #$4180,D0               ;Compare the appropriate masked bits
000007B6  6700 05FE                920      BEQ     INVALID_OP              ;INVALID OP code
000007BA  6600 0002                921      BNE     CHECK_OP_RTS            ;Check next OP code
000007BE                           922  
000007BE                           923  *Supported OP codes to check
000007BE                           924  CHECK_OP_RTS:
Line 925 ERROR: Undefined symbol
000007BE  3039 004DBD16            925      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000007C4  B07C 4E75                926      CMP.W  #$4E75,D0                ;Mask exact bits for RTS    
000007C8  6600 000C                927      BNE    CHECK_OP_LEA             ;If it's equal check next code
000007CC  4EB9 00000E90            928      JSR    PRINT_OP_RTS             ;Print out OP code
000007D2  6000 007C                929      BRA    GROUP4_SUCCESS           ;Finish routine
000007D6                           930   
000007D6                           931  CHECK_OP_LEA:
Line 932 ERROR: Undefined symbol
000007D6  3039 004DBD16            932      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000007DC  0240 F1C0                933      ANDI.W #$F1C0,D0                ;Mask appropriate bits
000007E0  B07C 41C0                934      CMP.W  #$41C0,D0                ;Compare masked bits
000007E4  6600 000C                935      BNE    CHECK_OP_JSR             ;Check next OP code
000007E8  4EB9 00000EA6            936      JSR    PRINT_OP_LEA             ;Print out OP code
000007EE  6000 0060                937      BRA    GROUP4_SUCCESS           ;Finish routine
000007F2                           938   
000007F2                           939  CHECK_OP_JSR:
Line 940 ERROR: Undefined symbol
000007F2  3039 004DBD16            940      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000007F8  0240 FFC0                941      ANDI.W #$FFC0,D0                ;Mask appropriate bits
000007FC  B07C 4E80                942      CMP.W  #$4E80,D0                ;Compare masked bits
00000800  6600 000C                943      BNE    CHECK_OP_NEG             ;Check next OP code
00000804  4EB9 00000E7A            944      JSR    PRINT_OP_JSR             ;Print out OP code
0000080A  6000 0044                945      BRA    GROUP4_SUCCESS           ;Finish routine
0000080E                           946      
0000080E                           947  CHECK_OP_NEG:
Line 948 ERROR: Undefined symbol
0000080E  3039 004DBD16            948      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000814  0240 FF00                949      ANDI.W #$FF00,D0                ;Mask appropriate bits
00000818  B07C 4400                950      CMP.W  #$4400,D0                ;Compare masked bits
0000081C  6600 0010                951      BNE    CHECK_OP_MOVEM           ;Check next OP code
00000820  4EB8 0170                952      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Find size field
00000824  4EB9 00000EBC            953      JSR    PRINT_OP_NEG             ;Print out OP code
0000082A  6000 0024                954      BRA    GROUP4_SUCCESS           ;Finish routine
0000082E                           955      
0000082E                           956  CHECK_OP_MOVEM:
Line 957 ERROR: Undefined symbol
0000082E  3039 004DBD16            957      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000834  0240 FB80                958      ANDI.W #$FB80,D0                ;Mask appropriate bits
00000838  B07C 4880                959      CMP.W  #$4880,D0                ;Compare masked bits
0000083C  6600 0578                960      BNE    INVALID_OP               ;If no code is found, it is invalid
00000840  4EB9 00000ED2            961      JSR    PRINT_OP_MOVEM_W         ;Print out OP code
00000846  6000 0008                962      BRA    GROUP4_SUCCESS           ;Finish routine
0000084A                           963      
0000084A                           964  GROUP4_INVALID:
0000084A  4EB9 00000DB6            965      JSR INVALID_OP                  ;INVALID op code has been found, set IS_VALID to 0
00000850                           966  
00000850                           967  GROUP4_SUCCESS:
00000850  4CDF 0001                968      MOVEM.L (SP)+,D0                ;Restore saved registers
00000854  4E75                     969      RTS                             ;Return to stack
00000856                           970  * GROUP_5
00000856                           971  ********************************************************************************
00000856                           972  * Supported OP code:
00000856                           973  * SUBQ: $5, 11-9 DATA, 8 %1, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00000856                           974  * Unsupported OP codes: ADDQ, Scc, DBcc
00000856                           975  * Validation checking:
00000856                           976  * Check against, ADDQ, Scc, DBcc
00000856                           977  ********************************************************************************
00000856                           978  C_GROUP_5:
00000856  48E7 8000                979      MOVEM.L D0,-(SP)                ;Save registers to stack
0000085A                           980  *Unsupported OP codes
0000085A                           981  CHECK_OP_DBcc:                      ;These are ordered first due to checking bits 7-6
Line 982 ERROR: Undefined symbol
0000085A  3039 004DBD16            982      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000860  0240 F0C8                983      ANDI.W #$F0C8,D0                ;Mask appropriate bits
00000864  B07C 50C8                984      CMP.W  #$50C8,D0                ;Compare appropriate masked bits
00000868  6700 0052                985      BEQ    GROUP5_INVALID           ;INVALID op code found
0000086C  6600 0002                986      BNE    CHECK_OP_Scc             ;Check next OP code
00000870                           987  
00000870                           988  CHECK_OP_Scc:
Line 989 ERROR: Undefined symbol
00000870  3039 004DBD16            989      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00000876  0240 F0C0                990      ANDI.W #$F0C0,D0                ;Mask appropriate bits
0000087A  B07C 50C0                991      CMP.W  #$50C0,D0                ;Compare appropriate masked bits
0000087E  6700 003C                992      BEQ     GROUP5_INVALID          ;INVALID OP code found
00000882  6600 0002                993      BNE     CHECK_OP_ADDQ           ;Check next OP code
00000886                           994  
00000886                           995  CHECK_OP_ADDQ:
Line 996 ERROR: Undefined symbol
00000886  3039 004DBD16            996      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000088C  0240 F100                997      ANDI.W #$F100,D0                ;Mask appropriate bits
00000890  B07C 5000                998      CMP.W  #$5000,D0                ;Compare appropriate masked bits
00000894  6700 0026                999      BEQ    GROUP5_INVALID           ;INVALID OP code found
00000898  6600 0002               1000      BNE    CHECK_OP_SUBQ            ;Check next OP code
0000089C                          1001  
0000089C                          1002  *Supported OP code   
0000089C                          1003  CHECK_OP_SUBQ     
Line 1004 ERROR: Undefined symbol
0000089C  3039 004DBD16           1004      MOVE.W  CUR_OP_CODE,D0          ;Actual check for SUBQ
000008A2  0240 F100               1005      ANDI.W #$F100,D0                ;Bitmask check for SUBQ
000008A6  B07C 5100               1006      CMP.W  #$5100,D0                ;Compare the proper value
000008AA  6600 0010               1007      BNE    GROUP5_INVALID           ;Else the operand is invalid
000008AE  4EB8 0170               1008      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Find size bit to print
000008B2  4EB9 00000EF2           1009      JSR    PRINT_OP_SUBQ            ;If equal print it out
000008B8  6000 0008               1010      BRA    GROUP5_SUCCESS           ;Finish routine
000008BC                          1011      
000008BC                          1012  GROUP5_INVALID: 
000008BC  4EB9 00000DB6           1013      JSR INVALID_OP                  ;INVALID OP has been found, set IS_VALID to 0
000008C2                          1014  
000008C2                          1015  GROUP5_SUCCESS:
000008C2  4CDF 0001               1016      MOVEM.L (SP)+,D0                ;Restore registers from stack
000008C6  4E75                    1017      RTS                             ;Return to stack
000008C8                          1018      
000008C8                          1019  * GROUP_6
000008C8                          1020  ********************************************************************************
000008C8                          1021  * Supported OP codes
000008C8                          1022  * BRA: $60, 7-0 8-Bit Displacement
000008C8                          1023  * Bcc: $6, 11-8 Condition, 7-0 8-Bit Displacement
000008C8                          1024  *   Branch: <Condition>   
000008C8                          1025  *   BCS: %0101          
000008C8                          1026  *   BGE: %1100      
000008C8                          1027  *   BLT: %1101  
000008C8                          1028  *   BVC: %1000
000008C8                          1029  *   
000008C8                          1030  *   MOVE.W #%0110010100000000   ;BCS
000008C8                          1031  *   MOVE.W #%0110110001010101   ;BGE
000008C8                          1032  *   MVE.W #%0110110110101010    ;BLT
000008C8                          1033  *   MOVE.W #%0110100001010101   ;BVC
000008C8                          1034  * Unsupported OP code: BSR
000008C8                          1035  ********************************************************************************
000008C8                          1036  C_GROUP_6:
000008C8  48E7 8000               1037      MOVEM.L D0,-(SP)            ;Save register to stack
000008CC                          1038  *Unsupported OP code
000008CC                          1039  CHECK_OP_BSR:
Line 1040 ERROR: Undefined symbol
000008CC  3039 004DBD16           1040      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set to D0
000008D2  0240 FF00               1041      ANDI.W  #$FF00,D0           ;Mask appropriate bits
000008D6  B07C 6100               1042      CMP.W   #$6100,D0           ;Compare masked bits
000008DA  6700 0092               1043      BEQ     GROUP6_INVALID      ;INVALID OP code found
000008DE  6600 0002               1044      BNE     CHECK_OP_BRA        ;Check next OP code
000008E2                          1045      
000008E2                          1046  *Supported OP codes
000008E2                          1047  CHECK_OP_BRA:
Line 1048 ERROR: Undefined symbol
000008E2  3039 004DBD16           1048      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D0       
000008E8  0240 FF00               1049      ANDI.W  #$FF00,D0           ;Mask appropriate bits
000008EC  B07C 6000               1050      CMP.W   #$6000,D0           ;Compare masked bits
000008F0  6600 000C               1051      BNE     CHECK_OP_BCS        ;Check next OP code
000008F4  4EB9 00000F60           1052      JSR     PRINT_OP_BRA        ;Print out OP code
000008FA  6000 0078               1053      BRA     GROUP6_SUCCESS      ;Finish routine
000008FE                          1054      
000008FE                          1055  CHECK_OP_BCS:
Line 1056 ERROR: Undefined symbol
000008FE  3039 004DBD16           1056      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00000904  0240 FF00               1057      ANDI.W #$FF00,D0            ;Mask appropriate bits
00000908  B07C 6500               1058      CMP.W  #$6500,D0            ;Compare masked bits
0000090C  6600 000C               1059      BNE    CHECK_OP_BGE         ;Check next OP code
00000910  4EB9 00000F08           1060      JSR    PRINT_OP_BCS         ;Print out OP code
00000916  6000 005C               1061      BRA    GROUP6_SUCCESS       ;Finish routine
0000091A                          1062  
0000091A                          1063      
0000091A                          1064  CHECK_OP_BGE:
Line 1065 ERROR: Undefined symbol
0000091A  3039 004DBD16           1065      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00000920  0240 FF00               1066      ANDI.W #$FF00,D0            ;Mask appropriate bits
00000924  B07C 6C00               1067      CMP.W  #$6C00,D0            ;Compare masked bits
00000928  6600 000C               1068      BNE    CHECK_OP_BLT         ;Check next OP code
0000092C  4EB9 00000F1E           1069      JSR    PRINT_OP_BGE         ;Print out OP code
00000932  6000 0040               1070      BRA    GROUP6_SUCCESS       ;Finish routine
00000936                          1071      
00000936                          1072      
00000936                          1073  CHECK_OP_BLT:
Line 1074 ERROR: Undefined symbol
00000936  3039 004DBD16           1074      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
0000093C  0240 FF00               1075      ANDI.W #$FF00,D0            ;Mask appropriate bits
00000940  B07C 6D00               1076      CMP.W  #$6D00,D0            ;Compare masked bits
00000944  6600 000C               1077      BNE    CHECK_OP_BVC         ;Check next OP code
00000948  4EB9 00000F34           1078      JSR    PRINT_OP_BLT         ;Print out OP code
0000094E  6000 0024               1079      BRA    GROUP6_SUCCESS       ;Finish routine
00000952                          1080      
00000952                          1081  CHECK_OP_BVC:
Line 1082 ERROR: Undefined symbol
00000952  3039 004DBD16           1082      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00000958  0240 FF00               1083      ANDI.W #$FF00,D0            ;Mask appropriate bits
0000095C  B07C 6800               1084      CMP.W  #$6800,D0            ;Compare masked bits
00000960  6600 000C               1085      BNE    GROUP6_INVALID       ;Check next OP code
00000964  4EB9 00000F4A           1086      JSR    PRINT_OP_BVC         ;Print out OP code
0000096A  6000 0008               1087      BRA    GROUP6_SUCCESS       ;Finish routine
0000096E                          1088      
0000096E                          1089  GROUP6_INVALID:
0000096E  4EB9 00000DB6           1090      JSR    INVALID_OP           ;INVALID OP code found, set IS_VALID to 0
00000974                          1091          
00000974                          1092  GROUP6_SUCCESS:
00000974  4CDF 0001               1093      MOVEM.L (SP)+,D0            ;Restore registers from stack
00000978  4E75                    1094      RTS                         ;Return from stack
0000097A                          1095      
0000097A                          1096  *GROUP_7
0000097A                          1097  ********************************************************************************
0000097A                          1098  * Currently no OP codes here are supported. MOVEQ is the only code in this group
0000097A                          1099  * Unsupported OP code: MOVEQ
0000097A                          1100  ********************************************************************************
0000097A                          1101  C_GROUP_7:
0000097A  48E7 8000               1102      MOVEM.L D0,-(SP)            ;Save register to stack
0000097E                          1103      
0000097E                          1104  CHECK_OP_MOVEQ
Line 1105 ERROR: Undefined symbol
0000097E  3039 004DBD16           1105      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set to D0
00000984  0240 F100               1106      ANDI.W #$F100,D0            ;Mask appropriate bits
00000988  B07C 7000               1107      CMP.W  #$7000,D0            ;Compare masked bits
0000098C  6600 0006               1108      BNE    GROUP7_INVALID       ;INVALID OP code found
00000990  6700 0008               1109      BEQ    GROUP7_SUCCESS       ;Finish routine
00000994                          1110      
00000994                          1111  GROUP7_INVALID:
00000994  4EB9 00000DB6           1112      JSR INVALID_OP              ;INVALID OP code found, set IS_VALID to 0
0000099A                          1113      
0000099A                          1114  GROUP7_SUCCESS:    
0000099A  4CDF 0001               1115      MOVEM.L (SP)+,D0            ;Restore registers from stack
0000099E  4E75                    1116      RTS                         ;Return from stack
000009A0                          1117  * GROUP_8
000009A0                          1118  ********************************************************************************
000009A0                          1119  * Supported OP code:
000009A0                          1120  * DIVS: $8, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
000009A0                          1121  * OR: $80, 7-6 Size, 5-3 EA Mode, 2-0 EA Register
000009A0                          1122  * Unsupported OP codes: DIVU, SBCD
000009A0                          1123  ********************************************************************************
000009A0                          1124  C_GROUP_8:
000009A0  48E7 8000               1125      MOVEM.L D0,-(SP)
000009A4                          1126  *Unsupported OP codes
000009A4                          1127  CHECK_OP_DIVU:
Line 1128 ERROR: Undefined symbol
000009A4  3039 004DBD16           1128      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000009AA  0240 F1C0               1129      ANDI.W  #$F1C0,D0                   ;Mask appropriate bits
000009AE  B07C 80C0               1130      CMP.W   #$80C0,D0                   ;Compare masked bits
000009B2  6700 0040               1131      BEQ     GROUP8_INVALID              ;INVALID OP code found
000009B6  6600 0002               1132      BNE     CHECK_OP_SBCD               ;Check next OP code
000009BA                          1133  
000009BA                          1134  CHECK_OP_SBCD:
Line 1135 ERROR: Undefined symbol
000009BA  3039 004DBD16           1135      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000009C0  0240 F1F0               1136      ANDI.W  #$F1F0,D0                   ;Mask appropriate bits
000009C4  B07C 8100               1137      CMP.W   #$8100,D0                   ;Compare masked bits
000009C8  6700 002A               1138      BEQ     GROUP8_INVALID              ;INVALID OP code found
000009CC  6600 0002               1139      BNE     CHECK_OP_DIVS               ;Check next OP code
000009D0                          1140      
000009D0                          1141  *Supported OP codes
000009D0                          1142  CHECK_OP_DIVS:
Line 1143 ERROR: Undefined symbol
000009D0  3039 004DBD16           1143      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000009D6  0240 F1C0               1144      ANDI.W  #$F1C0,D0                   ;Mask appropriate bits
000009DA  B07C 81C0               1145      CMP.W   #$81C0,D0                   ;Compare masked bits
000009DE  6700 0596               1146      BEQ     PRINT_OP_DIVS               ;INVALID OP code found
000009E2  6600 0002               1147      BNE     CHECK_OP_OR                 ;Check next OP code
000009E6                          1148      
000009E6                          1149  CHECK_OP_OR:                            ;At this point only remaining $8 code is OR
000009E6  4EB8 0170               1150      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Finding size bit to print out
000009EA  4EB9 00000F86           1151      JSR     PRINT_OP_OR                 ;Print out OR
000009F0  6000 0008               1152      BRA     GROUP8_SUCCESS              ;Finish routine
000009F4                          1153  GROUP8_INVALID:
000009F4  4EB9 00000DB6           1154       JSR    INVALID_OP                  ;INVALID OP code found, set IS_VALID to 0
000009FA                          1155       
000009FA                          1156  GROUP8_SUCCESS:
000009FA  4CDF 0001               1157       MOVEM.L (SP)+,D0                   ;Restore register from stack
000009FE  4E75                    1158       RTS                                ;Return to stack
00000A00                          1159       
00000A00                          1160  * GROUP_9                      
00000A00                          1161  ********************************************************************************
00000A00                          1162  * Supported OP code:
00000A00                          1163  * SUB: $9, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00000A00                          1164  * Unsupported OP codes: SUBX, SUBA
00000A00                          1165  ********************************************************************************
00000A00                          1166  C_GROUP_9:
00000A00  48E7 C000               1167      MOVEM.L D0-D1,-(SP)                 ;Save the registers
00000A04                          1168  *Unsupported OP codes
00000A04                          1169  CHECK_OP_SUBA:                          ;Check SUBA first as it has static bits
Line 1170 ERROR: Undefined symbol
00000A04  3039 004DBD16           1170      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000A0A  0240 F0C0               1171      ANDI.W  #$F0C0,D0                   ;Mask appropriate bits
00000A0E  B07C 90C0               1172      CMP.W   #$90C0,D0                   ;Compare masked bits
00000A12  6700 0046               1173      BEQ     GROUP9_INVALID              ;INVALID OP has been found
00000A16  6600 0002               1174      BNE     CHECK_OP_SUBX               ;Check next OP
00000A1A                          1175  
00000A1A                          1176  CHECK_OP_SUBX:
Line 1177 ERROR: Undefined symbol
00000A1A  3039 004DBD16           1177      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000A20  0240 F130               1178      ANDI.W  #$F130,D0                   ;Mask appropriate bits
00000A24  B07C 9100               1179      CMP.W   #$9100,D0                   ;Compare masked bits
00000A28  6000 0002               1180      BRA     BIT_CHECK_SUBX              ;Checking if this code is SUBX through bit shifts
00000A2C                          1181      
00000A2C                          1182  BIT_CHECK_SUBX:    
Line 1183 ERROR: Undefined symbol
00000A2C  3039 004DBD16           1183      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000A32  323C 0007               1184      MOVE.W  #7,D1                       ;Prepare a shift of 7 bits into D1
00000A36  E368                    1185      LSL.W   D1,D0                       ;Shift left 7 bits truncate 15-9 bits
00000A38  E268                    1186      LSR.W   D1,D0                       ;Reposition D0
00000A3A  E848                    1187      LSR.W   #4,D0                       ;Truncate 4 right most bits to
00000A3C  0240 FF18               1188      ANDI.W  #$FF18,D0                   ;Compare remaining static bits
00000A40  B07C 0018               1189      CMP.W   #$0018,D0                   ;If equal to this value it's SUBX
00000A44  6700 0014               1190      BEQ     GROUP9_INVALID              ;INVALID OP code found
00000A48  6600 0002               1191      BNE     CHECK_OP_SUB                ;Not can only be SUB here
00000A4C                          1192      
00000A4C                          1193  *Supported OP code 
00000A4C                          1194  CHECK_OP_SUB:                           ;At this point only remaining $9 is SUB
00000A4C  4EB8 0170               1195      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find the size bit to print out
00000A50  4EB9 00000F9C           1196      JSR     PRINT_OP_SUB                ;Print out SUB
00000A56  6000 0006               1197      BRA     GROUP9_SUCCESS              ;Finish routine
00000A5A                          1198      
00000A5A                          1199  GROUP9_INVALID:
00000A5A  6000 035A               1200      BRA     INVALID_OP                  ;INVALID OP code found, set IS_VALID to 0
00000A5E                          1201      
00000A5E                          1202  GROUP9_SUCCESS:
00000A5E  4CDF 0003               1203      MOVEM.L (SP)+,D0-D1                 ;Restore registers
00000A62  4E75                    1204      RTS                                 ;Return to stack
00000A64                          1205  
00000A64                          1206  *GROUP_A
00000A64                          1207  ********************************************************************************
00000A64                          1208  * Currently no OP codes here are supported. There are no current OP codes here.
00000A64                          1209  ********************************************************************************
00000A64                          1210  C_GROUP_A:
00000A64  4EB9 00000DB6           1211      JSR INVALID_OP                      ;INVALID OP code found, set IS_VALID to 0
00000A6A  4E75                    1212      RTS                                 ;Return to stack
00000A6C                          1213      
00000A6C                          1214  * GROUP_B                     
00000A6C                          1215  ********************************************************************************
00000A6C                          1216  * Supported OP codes:
00000A6C                          1217  * EOR: $B, 11-9 Reg, 8 %1, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00000A6C                          1218  * CMP: $B, 11-9 Reg, 8 %0, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00000A6C                          1219  * The specific bit difference is listed 
00000A6C                          1220  * Unsupported OP codes: CMPM, CMPA
00000A6C                          1221  ********************************************************************************
00000A6C                          1222  C_GROUP_B:
00000A6C  48E7 8000               1223      MOVEM.L D0,-(SP)                    ;Save current registers to stack
00000A70                          1224  *Unsupported OP codes    
00000A70                          1225  CHECK_OP_CMPM
Line 1226 ERROR: Undefined symbol
00000A70  3039 004DBD16           1226      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000A76  0240 F138               1227      ANDI.W  #$F138,D0                   ;Mask appropriate bits
00000A7A  B07C B108               1228      CMP.W   #$B108,D0                   ;Compare masked bits
00000A7E  6700 005C               1229      BEQ     GROUPB_INVALID              ;INVALID OP found
00000A82  6600 0002               1230      BNE     CHECK_OP_CMPA               ;Check next OP
00000A86                          1231      
00000A86                          1232  CHECK_OP_CMPA:
Line 1233 ERROR: Undefined symbol
00000A86  3039 004DBD16           1233      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000A8C  0240 F0C0               1234      ANDI.W  #$F0C0,D0                   ;Mask appropriate bits
00000A90  B07C B0C0               1235      CMP.W   #$B0C0,D0                   ;Compare masked bits
00000A94  6700 0046               1236      BEQ     GROUPB_INVALID              ;INVALID OP found
00000A98  6600 0002               1237      BNE     CHECK_OP_EOR                ;Check next OP
00000A9C                          1238  
00000A9C                          1239  *Supported OP codes    
00000A9C                          1240  CHECK_OP_EOR:
Line 1241 ERROR: Undefined symbol
00000A9C  3039 004DBD16           1241      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000AA2  0240 F100               1242      ANDI.W  #$F100,D0                   ;Mask appropriate bits
00000AA6  B07C B100               1243      CMP.W   #$B100,D0                   ;Compare masked bits
00000AAA  6600 0010               1244      BNE     CHECK_OP_CMP                ;Check next OP 
00000AAE  4EB8 0170               1245      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find size bit field to print out size
00000AB2  4EB9 00000FB2           1246      JSR     PRINT_OP_EOR                ;Print out OP code
00000AB8  6000 0028               1247      BRA     GROUPB_SUCCESS              ;Finish routine
00000ABC                          1248      
00000ABC                          1249  CHECK_OP_CMP:
Line 1250 ERROR: Undefined symbol
00000ABC  3039 004DBD16           1250      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00000AC2  0240 F100               1251      ANDI.W  #$F100,D0                   ;Mask appropriate bits
00000AC6  B07C B000               1252      CMP.W   #$B000,D0                   ;Compare masked bits
00000ACA  6600 0010               1253      BNE     GROUPB_INVALID              ;INVALID OP code found
00000ACE  4EB8 0170               1254      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find size bit field to print out size
00000AD2  4EB9 00000FC8           1255      JSR     PRINT_OP_CMP                ;Print out OP code
00000AD8  6000 0008               1256      BRA     GROUPB_SUCCESS              ;Finish routine
00000ADC                          1257      
00000ADC                          1258  GROUPB_INVALID:
00000ADC  4EB9 00000DB6           1259      JSR     INVALID_OP                  ;INVALID OP has been found, set IS_VALID to 0
00000AE2                          1260   
00000AE2                          1261  GROUPB_SUCCESS:
00000AE2  4CDF 0001               1262      MOVEM.L (SP)+,D0                    ;Restore registers from stack
00000AE6  4E75                    1263      RTS                                 ;Return to stack
00000AE8                          1264  * GROUP_C                     
00000AE8                          1265  ********************************************************************************
00000AE8                          1266  * Supported OP code:
00000AE8                          1267  * MULS: $C, 11-8 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00000AE8                          1268  * Note: EXG OP mode has to be 01000, 01001, 10001, as such can never be 11 for
00000AE8                          1269  * bits 7-6
00000AE8                          1270  * Unsupported OP codes: MULU, ABCD, EXG, AND
00000AE8                          1271  ********************************************************************************
00000AE8                          1272  C_GROUP_C:
00000AE8                          1273  *Unsupported OP codes
00000AE8  48E7 C000               1274      MOVEM.L D0-D1,-(SP)
00000AEC                          1275      
00000AEC                          1276  CHECK_OP_MULU:
Line 1277 ERROR: Undefined symbol
00000AEC  3039 004DBD16           1277      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00000AF2  0240 F1C0               1278      ANDI.W  #$F1C0,D0
00000AF6  B07C C0C0               1279      CMP.W   #$C0C0,D0
00000AFA  6700 0082               1280      BEQ     GROUPC_INVALID
00000AFE  6600 0002               1281      BNE     CHECK_OP_ABCD
00000B02                          1282   
00000B02                          1283  CHECK_OP_ABCD:
Line 1284 ERROR: Undefined symbol
00000B02  3039 004DBD16           1284      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00000B08  0240 F1F0               1285      ANDI.W  #$F1F0,D0
00000B0C  B07C C100               1286      CMP.W   #$C100,D0
00000B10  6700 006C               1287      BEQ     GROUPC_INVALID
00000B14  6600 0002               1288      BNE     CHECK_OP_EXG
00000B18                          1289   
00000B18                          1290  CHECK_OP_EXG:
Line 1291 ERROR: Undefined symbol
00000B18  3039 004DBD16           1291      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00000B1E  0240 F130               1292      ANDI.W  #$F130,D0
00000B22  B07C C100               1293      CMP.W   #$C100,D0
00000B26  6700 0006               1294      BEQ     BIT_CHECK_EXG
00000B2A  6600 0040               1295      BNE     CHECK_OP_AND
00000B2E                          1296                          
00000B2E                          1297  BIT_CHECK_EXG:                 ;Checks the OP mode bits 7-6 which cannot be 11 for EXG
Line 1298 ERROR: Undefined symbol
00000B2E  3039 004DBD16           1298      MOVE.W  CUR_OP_CODE,D0
00000B34  323C 0008               1299      MOVE.W  #8,D1
00000B38  E368                    1300      LSL.W   D1,D0
00000B3A  E268                    1301      LSR.W   D1,D0
00000B3C  EC48                    1302      LSR.W   #6,D0
00000B3E  0240 FFF3               1303      ANDI.W  #$FFF3,D0
00000B42  B07C 0003               1304      CMP.W   #$0003,D0          ;This bit then equals MULS
00000B46  6700 000E               1305      BEQ     CHECK_OP_MULS
00000B4A  B07C 0000               1306      CMP.W   #$0000,D0          ;Second comparison to check if OP mode bit is valid
00000B4E  6700 001C               1307      BEQ     CHECK_OP_AND       ;If it's 0 it could be OP_AND
00000B52  6600 002A               1308      BNE     GROUPC_INVALID         ;Otherwise it's EXG (01,10 op bits)
00000B56                          1309  *Supported OP code
00000B56                          1310  CHECK_OP_MULS:
Line 1311 ERROR: Undefined symbol
00000B56  3039 004DBD16           1311      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00000B5C  0240 F1C0               1312      ANDI.W #$F1C0,D0
00000B60  B07C C1C0               1313      CMP.W  #$C1C0,D0
00000B64  6700 0478               1314      BEQ    PRINT_OP_MULS
00000B68  6600 0002               1315      BNE    CHECK_OP_AND          ; OP_AND is completely dynamic outside of first nibble
00000B6C                          1316  
00000B6C                          1317  *Odd completely dynamic unsupported OP code    
00000B6C                          1318  CHECK_OP_AND:                 ;This would be the only possible OP code left after CHECK_OP_MULS
Line 1319 ERROR: Undefined symbol
00000B6C  3039 004DBD16           1319      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00000B72  0240 F000               1320      ANDI.W  #$F000,D0
00000B76  B07C C000               1321      CMP.W   #$C000,D0
00000B7A  6700 0002               1322      BEQ     GROUPC_INVALID
00000B7E                          1323      
00000B7E                          1324  GROUPC_INVALID:
00000B7E  4EB9 00000DB6           1325      JSR     INVALID_OP
00000B84                          1326      
00000B84                          1327  GROUPC_SUCCESS:
00000B84  4CDF 0003               1328      MOVEM.L (SP)+,D0-D1
00000B88  4E75                    1329      RTS
00000B8A                          1330      
00000B8A                          1331  * GROUP_D                     
00000B8A                          1332  ********************************************************************************
00000B8A                          1333  * Supported OP codes:
00000B8A                          1334  * ADD: $D, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00000B8A                          1335  * ADDA: $D, 11- 9 Reg, 8-6 OPMODE, 7-6 %11, 5-3 EA Mode, 2-0 EA Reg
00000B8A                          1336  * The specific bit difference is listed out in the OPMODE field.
00000B8A                          1337  * Unsupported: ADDX
00000B8A                          1338  ********************************************************************************
00000B8A                          1339  C_GROUP_D:
00000B8A  48E7 8000               1340      MOVEM.L D0,-(SP)                ;Save registers to stack
00000B8E                          1341  *Unsupported OP code
00000B8E                          1342  CHECK_OP_ADDX:
Line 1343 ERROR: Undefined symbol
00000B8E  3039 004DBD16           1343      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000B94  0240 F130               1344      ANDI.W #$F130,D0                ;Mask appropriate bits
00000B98  B07C D100               1345      CMP.W  #$D100,D0                ;Compare masked bits
00000B9C  6700 0034               1346      BEQ    GROUPD_INVALID           ;INVALID OP code found
00000BA0  6600 0002               1347      BNE    CHECK_OP_ADDA            ;Check next OP code
00000BA4                          1348  
00000BA4                          1349  *Supported OP code
00000BA4                          1350  CHECK_OP_ADDA:
Line 1351 ERROR: Undefined symbol
00000BA4  3039 004DBD16           1351      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00000BAA  0240 F0C0               1352      ANDI.W #$F0C0,D0                ;Mask applicable bits
00000BAE  B07C D0C0               1353      CMP.W  #$D0C0,D0                ;Compare masked bits
00000BB2  6600 0010               1354      BNE    CHECK_OP_ADD             ;Check next OP code
00000BB6  4EB8 01B4               1355      JSR    FIND_1_BIT_SIZE_8        ;Size bit to print
00000BBA  4EB9 00001004           1356      JSR    PRINT_OP_ADDA            ;Print out OP code
00000BC0  6000 0016               1357      BRA    GROUPD_SUCCESS           ;Finish routine
00000BC4                          1358  *Unsupported OP code
00000BC4                          1359  CHECK_OP_ADD:
00000BC4  4EB8 0170               1360      JSR FIND_2_BIT_SIZE_7_TO_6
00000BC8  4EB9 00000FEE           1361      JSR PRINT_OP_ADD                ;Only remaining OP in $D is ADD
00000BCE  6000 0008               1362      BRA GROUPD_SUCCESS
00000BD2                          1363      
00000BD2                          1364  GROUPD_INVALID:
00000BD2  4EB9 00000DB6           1365      JSR INVALID_OP
00000BD8                          1366      
00000BD8                          1367  GROUPD_SUCCESS:
00000BD8  4CDF 0001               1368      MOVEM.L (SP)+,D0                ;Restore registers from stack
00000BDC  4E75                    1369      RTS                             ;Return to stack
00000BDE                          1370      
00000BDE                          1371  * GROUP_E                     
00000BDE                          1372  ********************************************************************************
00000BDE                          1373  * Supported:
00000BDE                          1374  * LSR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00000BDE                          1375  * LSL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00000BDE                          1376  * ASR: $E, $0, 8 %0, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00000BDE                          1377  * ASL: $E, $0, 8 %1, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00000BDE                          1378  * ROR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00000BDE                          1379  * ROL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00000BDE                          1380  * Count/Reg for LSR/LSL refers to shift count, where 0 = shift count of 8, 1-7 
00000BDE                          1381  * refers to the respective value when i/r = 0. If i/r = 1, data register in the 
00000BDE                          1382  * Count/Reg field specifies the shift count.  
00000BDE                          1383  * For directional bit at 8, R = 0, L = 1
00000BDE                          1384  * Count/Reg for ROR/ROL specifies rotate count instead of shift count.
00000BDE                          1385  *
00000BDE                          1386  * Split into ROT and NO_ROT groups first to make identifying easier.
00000BDE                          1387  * Unsupported: ROXL, ROXR
00000BDE                          1388  ********************************************************************************
00000BDE                          1389  C_GROUP_E:
00000BDE  48E7 8000               1390      MOVEM.L D0,-(SP)
00000BE2                          1391  *Unsupported OP codes
00000BE2                          1392  CHECK_OP_ROXR_NO_ROT:
Line 1393 ERROR: Undefined symbol
00000BE2  3039 004DBD16           1393      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000BE8  0240 FFC0               1394      ANDI.W #$FFC0,D0
00000BEC  B07C E4C0               1395      CMP.W  #$E4C0,D0
00000BF0  6700 01B0               1396      BEQ    GROUPE_INVALID
00000BF4  6600 0002               1397      BNE    CHECK_OP_ROXL_NO_ROT
00000BF8                          1398  
00000BF8                          1399  CHECK_OP_ROXL_NO_ROT:
Line 1400 ERROR: Undefined symbol
00000BF8  3039 004DBD16           1400      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000BFE  0240 FFC0               1401      ANDI.W #$FFC0,D0
00000C02  B07C E5C0               1402      CMP.W  #$E5C0,D0
00000C06  6700 019A               1403      BEQ    GROUPE_INVALID
00000C0A  6600 0002               1404      BNE    CHECK_OP_ROR_NO_ROT
00000C0E                          1405  
00000C0E                          1406  *Supported OP codes
00000C0E                          1407  CHECK_OP_ROR_NO_ROT:
Line 1408 ERROR: Undefined symbol
00000C0E  3039 004DBD16           1408      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000C14  0240 FFC0               1409      ANDI.W #$FFC0,D0
00000C18  B07C E6C0               1410      CMP.W  #$E6C0,D0
00000C1C  6600 000C               1411      BNE    CHECK_OP_ROL_NO_ROT
00000C20  4EB9 00001088           1412      JSR    PRINT_OP_ROR
00000C26  6000 0180               1413      BRA    GROUPE_SUCCESS
00000C2A                          1414      
00000C2A                          1415  CHECK_OP_ROL_NO_ROT:
Line 1416 ERROR: Undefined symbol
00000C2A  3039 004DBD16           1416      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000C30  0240 FFC0               1417      ANDI.W #$FFC0,D0
00000C34  B07C E7C0               1418      CMP.W  #$E7C0,D0
00000C38  6600 000C               1419      BNE    CHECK_OP_LSR_NO_ROT
00000C3C  4EB9 00001072           1420      JSR    PRINT_OP_ROL
00000C42  6000 0164               1421      BRA    GROUPE_SUCCESS
00000C46                          1422   
00000C46                          1423  CHECK_OP_LSR_NO_ROT:
Line 1424 ERROR: Undefined symbol
00000C46  3039 004DBD16           1424      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000C4C  0240 FFC0               1425      ANDI.W #$FFC0,D0
00000C50  B07C E2C0               1426      CMP.W  #$E2C0,D0
00000C54  6600 000C               1427      BNE    CHECK_OP_LSL_NO_ROT
00000C58  4EB9 00001030           1428      JSR    PRINT_OP_LSR
00000C5E  6000 0148               1429      BRA    GROUPE_SUCCESS
00000C62                          1430  
00000C62                          1431  CHECK_OP_LSL_NO_ROT:
Line 1432 ERROR: Undefined symbol
00000C62  3039 004DBD16           1432      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000C68  0240 FFC0               1433      ANDI.W #$FFC0,D0
00000C6C  B07C E3C0               1434      CMP.W  #$E3C0,D0
00000C70  6600 000C               1435      BNE    CHECK_OP_ASR_NO_ROT
00000C74  4EB9 0000101A           1436      JSR    PRINT_OP_LSL
00000C7A  6000 012C               1437      BRA    GROUPE_SUCCESS
00000C7E                          1438  
00000C7E                          1439  CHECK_OP_ASR_NO_ROT:
Line 1440 ERROR: Undefined symbol
00000C7E  3039 004DBD16           1440      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000C84  0240 FFC0               1441      ANDI.W #$FFC0,D0
00000C88  B07C E0C0               1442      CMP.W  #$E0C0,D0
00000C8C  6600 000C               1443      BNE    CHECK_OP_ASL_NO_ROT
00000C90  4EB9 00001046           1444      JSR    PRINT_OP_ASR
00000C96  6000 0110               1445      BRA    GROUPE_SUCCESS
00000C9A                          1446              
00000C9A                          1447  CHECK_OP_ASL_NO_ROT:
Line 1448 ERROR: Undefined symbol
00000C9A  3039 004DBD16           1448      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000CA0  0240 FFC0               1449      ANDI.W #$FFC0,D0
00000CA4  B07C E1C0               1450      CMP.W  #$E1C0,D0
00000CA8  6600 000C               1451      BNE    CHECK_OP_ROXR
00000CAC  4EB9 0000105C           1452      JSR    PRINT_OP_ASL
00000CB2  6000 00F4               1453      BRA    GROUPE_SUCCESS
00000CB6                          1454  
00000CB6                          1455  *Unsupported OP codes
00000CB6                          1456  CHECK_OP_ROXR:
Line 1457 ERROR: Undefined symbol
00000CB6  3039 004DBD16           1457      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000CBC  0240 F118               1458      ANDI.W #$F118,D0
00000CC0  B07C E010               1459      CMP.W  #$E010,D0
00000CC4  6700 00DC               1460      BEQ    GROUPE_INVALID
00000CC8  6600 0002               1461      BNE    CHECK_OP_ROXL
00000CCC                          1462      
00000CCC                          1463  CHECK_OP_ROXL:
Line 1464 ERROR: Undefined symbol
00000CCC  3039 004DBD16           1464      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000CD2  0240 F118               1465      ANDI.W #$F118,D0
00000CD6  B07C E110               1466      CMP.W  #$E110,D0
00000CDA  6700 00C6               1467      BEQ    GROUPE_INVALID
00000CDE  6600 0002               1468      BNE    CHECK_OP_ROR
00000CE2                          1469      
00000CE2                          1470  *Supported OP codes
00000CE2                          1471  CHECK_OP_ROR:
Line 1472 ERROR: Undefined symbol
00000CE2  3039 004DBD16           1472      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000CE8  0240 F118               1473      ANDI.W #$F118,D0
00000CEC  B07C E018               1474      CMP.W  #$E018,D0
00000CF0  6600 0010               1475      BNE    CHECK_OP_ROL
00000CF4  4EB8 0170               1476      JSR    FIND_2_BIT_SIZE_7_TO_6     
00000CF8  4EB9 00001088           1477      JSR    PRINT_OP_ROR
00000CFE  6000 00A8               1478      BRA    GROUPE_SUCCESS
00000D02                          1479  
00000D02                          1480  CHECK_OP_ROL:
Line 1481 ERROR: Undefined symbol
00000D02  3039 004DBD16           1481      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000D08  0240 F118               1482      ANDI.W #$F118,D0
00000D0C  B07C E118               1483      CMP.W  #$E118,D0
00000D10  6600 0010               1484      BNE    CHECK_OP_LSR
00000D14  4EB8 0170               1485      JSR    FIND_2_BIT_SIZE_7_TO_6     
00000D18  4EB9 00001072           1486      JSR    PRINT_OP_ROL
00000D1E  6000 0088               1487      BRA    GROUPE_SUCCESS
00000D22                          1488      
00000D22                          1489  CHECK_OP_LSR:
Line 1490 ERROR: Undefined symbol
00000D22  3039 004DBD16           1490      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000D28  0240 F118               1491      ANDI.W #$F118,D0
00000D2C  B07C E008               1492      CMP.W  #$E008,D0
00000D30  6600 0010               1493      BNE    CHECK_OP_LSL
00000D34  4EB8 0170               1494      JSR    FIND_2_BIT_SIZE_7_TO_6     
00000D38  4EB9 00001030           1495      JSR    PRINT_OP_LSR
00000D3E  6000 0068               1496      BRA    GROUPE_SUCCESS
00000D42                          1497  
00000D42                          1498  CHECK_OP_LSL:
Line 1499 ERROR: Undefined symbol
00000D42  3039 004DBD16           1499      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000D48  0240 F118               1500      ANDI.W #$F118,D0
00000D4C  B07C E108               1501      CMP.W  #$E108,D0
00000D50  6600 0010               1502      BNE    CHECK_OP_ASR
00000D54  4EB8 0170               1503      JSR    FIND_2_BIT_SIZE_7_TO_6     
00000D58  4EB9 0000101A           1504      JSR    PRINT_OP_LSL
00000D5E  6000 0048               1505      BRA    GROUPE_SUCCESS
00000D62                          1506  
00000D62                          1507  CHECK_OP_ASR:
Line 1508 ERROR: Undefined symbol
00000D62  3039 004DBD16           1508      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000D68  0240 F118               1509      ANDI.W #$F118,D0
00000D6C  B07C E000               1510      CMP.W  #$E000,D0
00000D70  6600 0010               1511      BNE    CHECK_OP_ASL
00000D74  4EB8 0170               1512      JSR    FIND_2_BIT_SIZE_7_TO_6     
00000D78  4EB9 00001046           1513      JSR    PRINT_OP_ASR
00000D7E  6000 0028               1514      BRA    GROUPE_SUCCESS
00000D82                          1515  
00000D82                          1516  CHECK_OP_ASL:
Line 1517 ERROR: Undefined symbol
00000D82  3039 004DBD16           1517      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00000D88  0240 F118               1518      ANDI.W #$F118,D0
00000D8C  B07C E100               1519      CMP.W  #$E100,D0
00000D90  6600 0010               1520      BNE    GROUPE_INVALID      ;Last possible OP code
00000D94  4EB8 0170               1521      JSR    FIND_2_BIT_SIZE_7_TO_6     
00000D98  4EB9 0000105C           1522      JSR    PRINT_OP_ASL
00000D9E  6000 0008               1523      BRA    GROUPE_SUCCESS
00000DA2                          1524  
00000DA2                          1525  GROUPE_INVALID:
00000DA2  4EB9 00000DB6           1526      JSR     INVALID_OP
00000DA8                          1527      
00000DA8                          1528  GROUPE_SUCCESS:
00000DA8  4CDF 0001               1529      MOVEM.L (SP)+,D0
00000DAC  4E75                    1530      RTS
00000DAE                          1531  * GROUP_F
00000DAE                          1532  ********************************************************************************
00000DAE                          1533  * Currently no OP codes here are supported. There are no OP codes here
00000DAE                          1534  ********************************************************************************
00000DAE                          1535  C_GROUP_F:
00000DAE  4EB9 00000DB6           1536      JSR INVALID_OP
00000DB4  4E75                    1537      RTS
00000DB6                          1538      
00000DB6                          1539  * INVALID_OP                     
00000DB6                          1540  ********************************************************************************
00000DB6                          1541  * Any value that is not covered in the above groups would be considered invalid. 
00000DB6                          1542  * The following values in the first nibble would also indicate that the 
00000DB6                          1543  * operand codes is already invalid: $7, $A, $F.
00000DB6                          1544  * For unsupported OP codes, display DATA $WXYZ   
00000DB6                          1545  * THIS WILL NEED TO BE CHANGED TO DISPLAY: 1000 DATA $WXYZ IN THE FUTURE
00000DB6                          1546  ********************************************************************************
00000DB6                          1547  INVALID_OP:  ; ONLY SETS IS_VALID TO 0
Line 1548 ERROR: Undefined symbol
00000DB6  13FC 0000 005455B8      1548      MOVE.B #0,IS_VALID
00000DBE  4E75                    1549      RTS
00000DC0                          1550  
00000DC0                          1551  ********************** PRINTING ROUTINES **************************************
00000DC0                          1552  * Description: These routines are to print the associated op codes, by placing
00000DC0                          1553  * them in the appropriate area to the buffer
00000DC0                          1554  *
00000DC0                          1555  * Registers used: A1 for loading, A6 for EA parsing.
00000DC0                          1556  *
00000DC0                          1557  * Precondition: The relevant opcode has been identified correctly.
00000DC0                          1558  *
00000DC0                          1559  * Postcondition: Prints out the associated opcode to the buffer.
00000DC0                          1560  
00000DC0                          1561  * THIS NEEDS TO BE RETOOLED TO PRINT TO BUFFER NOT TO CONSOLE
00000DC0                          1562  *******************************************************************************
00000DC0                          1563  
00000DC0                          1564  * Prints the loaded item into G_BUFFER
00000DC0                          1565  PRINT_TO_BUFFER:
Line 1566 ERROR: Undefined symbol
00000DC0  23FC 004DBD16 005455B8  1566      MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer
Line 1567 ERROR: Undefined symbol
00000DCA  4EB9 004DBD16           1567      JSR AddStrToBuffer
00000DD0  4E75                    1568      RTS
00000DD2                          1569      
00000DD2                          1570  ****************************** GROUP 0 **************************************** 
00000DD2                          1571  PRINT_OP_ORI:
Line 1572 ERROR: Undefined symbol
00000DD2  23FC 00001113 005455B8  1572      MOVE.L #P_OP_ORI, Arg_AddStrToBuffer_String
00000DDC  4EB8 0DC0               1573      JSR PRINT_TO_BUFFER
00000DE0  4EB9 000010CE           1574      JSR PRINT_OP_SIZE
00000DE6  4E75                    1575      RTS
00000DE8                          1576  PRINT_OP_CMPI:
Line 1577 ERROR: Undefined symbol
00000DE8  23FC 0000111A 005455B8  1577      MOVE.L #P_OP_CMPI, Arg_AddStrToBuffer_String
00000DF2  4EB8 0DC0               1578      JSR PRINT_TO_BUFFER
00000DF6  4EB9 000010CE           1579      JSR PRINT_OP_SIZE
00000DFC  4E75                    1580      RTS
00000DFE                          1581  PRINT_OP_STATIC_BCLR:
Line 1582 ERROR: Undefined symbol
00000DFE  23FC 00001122 005455B8  1582      MOVE.L #P_OP_BCLR, Arg_AddStrToBuffer_String
00000E08  4EB8 0DC0               1583      JSR PRINT_TO_BUFFER
00000E0C  4EB9 000010CE           1584      JSR PRINT_OP_SIZE
00000E12  4E75                    1585      RTS
00000E14                          1586      
00000E14                          1587  PRINT_OP_DYNAMIC_BCLR:
Line 1588 ERROR: Undefined symbol
00000E14  23FC 00001122 005455B8  1588      MOVE.L #P_OP_BCLR, Arg_AddStrToBuffer_String
00000E1E  4EB8 0DC0               1589      JSR PRINT_TO_BUFFER
00000E22  4EB9 000010CE           1590      JSR PRINT_OP_SIZE
00000E28  4E75                    1591      RTS
00000E2A                          1592  ******************************* END OF GROUP 0 ********************************
00000E2A                          1593  
00000E2A                          1594  ****************************** GROUP 1 ****************************************    
00000E2A                          1595  PRINT_OP_MOVEB:
Line 1596 ERROR: Undefined symbol
00000E2A  23FC 0000112A 005455B8  1596      MOVE.L #P_OP_MOVEB, Arg_AddStrToBuffer_String
00000E34  4EB8 0DC0               1597      JSR PRINT_TO_BUFFER
00000E38  4E75                    1598      RTS
00000E3A                          1599  ******************************* END OF GROUP 1 ********************************
00000E3A                          1600      
00000E3A                          1601  ****************************** GROUP 2 **************************************** 
00000E3A                          1602  PRINT_OP_MOVEA_L:
Line 1603 ERROR: Undefined symbol
00000E3A  23FC 00001134 005455B8  1603      MOVE.L #P_OP_MOVEA_L, Arg_AddStrToBuffer_String
00000E44  4EB8 0DC0               1604      JSR PRINT_TO_BUFFER
00000E48  4E75                    1605      RTS
00000E4A                          1606  PRINT_OP_MOVE_L:
Line 1607 ERROR: Undefined symbol
00000E4A  23FC 0000113F 005455B8  1607      MOVE.L #P_OP_MOVE_L, Arg_AddStrToBuffer_String
00000E54  4EB8 0DC0               1608      JSR PRINT_TO_BUFFER
00000E58  4E75                    1609      RTS
00000E5A                          1610  ******************************* END OF GROUP 2 ********************************
00000E5A                          1611      
00000E5A                          1612  ****************************** GROUP 3 ****************************************    
00000E5A                          1613  PRINT_OP_MOVEA_W:
Line 1614 ERROR: Undefined symbol
00000E5A  23FC 0000114A 005455B8  1614      MOVE.L #P_OP_MOVEA_W, Arg_AddStrToBuffer_String
00000E64  4EB8 0DC0               1615      JSR PRINT_TO_BUFFER
00000E68  4E75                    1616      RTS
00000E6A                          1617  PRINT_OP_MOVE_W:
Line 1618 ERROR: Undefined symbol
00000E6A  23FC 00001159 005455B8  1618      MOVE.L #P_OP_MOVE_W, Arg_AddStrToBuffer_String
00000E74  4EB8 0DC0               1619      JSR PRINT_TO_BUFFER
00000E78  4E75                    1620      RTS
00000E7A                          1621  ******************************* END OF GROUP 3 ********************************
00000E7A                          1622  
00000E7A                          1623  ****************************** GROUP 4 ****************************************
00000E7A                          1624  PRINT_OP_JSR:
Line 1625 ERROR: Undefined symbol
00000E7A  23FC 00001181 005455B8  1625      MOVE.L #P_OP_JSR, Arg_AddStrToBuffer_String
00000E84  4EB8 0DC0               1626      JSR PRINT_TO_BUFFER
00000E88  4EB9 000010CE           1627      JSR PRINT_OP_SIZE
00000E8E  4E75                    1628      RTS
00000E90                          1629  PRINT_OP_RTS:
Line 1630 ERROR: Undefined symbol
00000E90  23FC 0000118F 005455B8  1630      MOVE.L #P_OP_RTS, Arg_AddStrToBuffer_String
00000E9A  4EB8 0DC0               1631      JSR PRINT_TO_BUFFER
00000E9E  4EB9 000010CE           1632      JSR PRINT_OP_SIZE
00000EA4  4E75                    1633      RTS
00000EA6                          1634  PRINT_OP_LEA:
Line 1635 ERROR: Undefined symbol
00000EA6  23FC 0000117A 005455B8  1635      MOVE.L #P_OP_LEA, Arg_AddStrToBuffer_String
00000EB0  4EB8 0DC0               1636      JSR PRINT_TO_BUFFER
00000EB4  4EB9 000010CE           1637      JSR PRINT_OP_SIZE
00000EBA  4E75                    1638      RTS
00000EBC                          1639  PRINT_OP_NEG:
Line 1640 ERROR: Undefined symbol
00000EBC  23FC 00001196 005455B8  1640      MOVE.L #P_OP_NEG, Arg_AddStrToBuffer_String
00000EC6  4EB8 0DC0               1641      JSR PRINT_TO_BUFFER
00000ECA  4EB9 000010CE           1642      JSR PRINT_OP_SIZE
00000ED0  4E75                    1643      RTS
00000ED2                          1644  PRINT_OP_MOVEM_W:
Line 1645 ERROR: Undefined symbol
00000ED2  23FC 00001164 005455B8  1645      MOVE.L #P_OP_MOVEM_W, Arg_AddStrToBuffer_String
00000EDC  4EB8 0DC0               1646      JSR PRINT_TO_BUFFER
00000EE0  4E75                    1647      RTS
00000EE2                          1648  PRINT_OP_MOVEM_L:
Line 1649 ERROR: Undefined symbol
00000EE2  23FC 0000116F 005455B8  1649      MOVE.L #P_OP_MOVEM_L, Arg_AddStrToBuffer_String
00000EEC  4EB8 0DC0               1650      JSR PRINT_TO_BUFFER
00000EF0  4E75                    1651      RTS
00000EF2                          1652  ******************************* END OF GROUP 4 ********************************
00000EF2                          1653      
00000EF2                          1654  ****************************** GROUP 5 ****************************************
00000EF2                          1655  PRINT_OP_SUBQ:
Line 1656 ERROR: Undefined symbol
00000EF2  23FC 0000119D 005455B8  1656      MOVE.L #P_OP_SUBQ, Arg_AddStrToBuffer_String
00000EFC  4EB8 0DC0               1657      JSR PRINT_TO_BUFFER
00000F00  4EB9 000010CE           1658      JSR PRINT_OP_SIZE
00000F06  4E75                    1659      RTS
00000F08                          1660  ******************************* END OF GROUP 5 ********************************
00000F08                          1661  
00000F08                          1662  ****************************** GROUP 6 ****************************************
00000F08                          1663  PRINT_OP_BCS:
Line 1664 ERROR: Undefined symbol
00000F08  23FC 000011AC 005455B8  1664      MOVE.L #P_OP_BCS, Arg_AddStrToBuffer_String
00000F12  4EB8 0DC0               1665      JSR PRINT_TO_BUFFER
00000F16  4EB9 000010CE           1666      JSR PRINT_OP_SIZE
00000F1C  4E75                    1667      RTS
00000F1E                          1668  PRINT_OP_BGE:
Line 1669 ERROR: Undefined symbol
00000F1E  23FC 000011B3 005455B8  1669      MOVE.L #P_OP_BGE, Arg_AddStrToBuffer_String
00000F28  4EB8 0DC0               1670      JSR PRINT_TO_BUFFER
00000F2C  4EB9 000010CE           1671      JSR PRINT_OP_SIZE
00000F32  4E75                    1672      RTS
00000F34                          1673  PRINT_OP_BLT:
Line 1674 ERROR: Undefined symbol
00000F34  23FC 000011BA 005455B8  1674      MOVE.L #P_OP_BLT, Arg_AddStrToBuffer_String
00000F3E  4EB8 0DC0               1675      JSR PRINT_TO_BUFFER
00000F42  4EB9 000010CE           1676      JSR PRINT_OP_SIZE
00000F48  4E75                    1677      RTS
00000F4A                          1678  PRINT_OP_BVC:
Line 1679 ERROR: Undefined symbol
00000F4A  23FC 000011C1 005455B8  1679      MOVE.L #P_OP_BVC, Arg_AddStrToBuffer_String
00000F54  4EB8 0DC0               1680      JSR PRINT_TO_BUFFER
00000F58  4EB9 000010CE           1681      JSR PRINT_OP_SIZE
00000F5E  4E75                    1682      RTS
00000F60                          1683  PRINT_OP_BRA:
Line 1684 ERROR: Undefined symbol
00000F60  23FC 000011A5 005455B8  1684      MOVE.L #P_OP_BRA, Arg_AddStrToBuffer_String
00000F6A  4EB8 0DC0               1685      JSR PRINT_TO_BUFFER
00000F6E  4EB9 000010CE           1686      JSR PRINT_OP_SIZE
00000F74  4E75                    1687      RTS
00000F76                          1688  ******************************* END OF GROUP 6 ********************************
00000F76                          1689  
00000F76                          1690  ****************************** GROUP 7 ****************************************
00000F76                          1691  * No currently supported OP codes to print here.
00000F76                          1692  ******************************* END OF GROUP 7 ********************************
00000F76                          1693  
00000F76                          1694  ****************************** GROUP 8 ****************************************
00000F76                          1695  PRINT_OP_DIVS:
Line 1696 ERROR: Undefined symbol
00000F76  23FC 000011C8 005455B8  1696      MOVE.L #P_OP_DIVS, Arg_AddStrToBuffer_String
00000F80  4EB8 0DC0               1697      JSR PRINT_TO_BUFFER
00000F84  4E75                    1698      RTS
00000F86                          1699  PRINT_OP_OR:
Line 1700 ERROR: Undefined symbol
00000F86  23FC 000011D3 005455B8  1700      MOVE.L #P_OP_OR, Arg_AddStrToBuffer_String
00000F90  4EB8 0DC0               1701      JSR PRINT_TO_BUFFER
00000F94  4EB9 000010CE           1702      JSR PRINT_OP_SIZE
00000F9A  4E75                    1703      RTS
00000F9C                          1704  ******************************* END OF GROUP 8 ********************************
00000F9C                          1705  
00000F9C                          1706  ****************************** GROUP 9 ****************************************
00000F9C                          1707  PRINT_OP_SUB:
Line 1708 ERROR: Undefined symbol
00000F9C  23FC 000011D9 005455B8  1708      MOVE.L #P_OP_SUB, Arg_AddStrToBuffer_String
00000FA6  4EB8 0DC0               1709      JSR PRINT_TO_BUFFER
00000FAA  4EB9 000010CE           1710      JSR PRINT_OP_SIZE
00000FB0  4E75                    1711      RTS
00000FB2                          1712  ******************************* END OF GROUP 9 ********************************
00000FB2                          1713  
00000FB2                          1714  ****************************** GROUP A ****************************************
00000FB2                          1715  * No currently supported OP codes to print here.
00000FB2                          1716  ******************************* END OF GROUP A ********************************
00000FB2                          1717  
00000FB2                          1718  ****************************** GROUP B ****************************************
00000FB2                          1719  PRINT_OP_EOR:
Line 1720 ERROR: Undefined symbol
00000FB2  23FC 000011E0 005455B8  1720      MOVE.L #P_OP_EOR, Arg_AddStrToBuffer_String
00000FBC  4EB8 0DC0               1721      JSR PRINT_TO_BUFFER
00000FC0  4EB9 000010CE           1722      JSR PRINT_OP_SIZE
00000FC6  4E75                    1723      RTS
00000FC8                          1724  PRINT_OP_CMP:
Line 1725 ERROR: Undefined symbol
00000FC8  23FC 000011E7 005455B8  1725      MOVE.L #P_OP_CMP, Arg_AddStrToBuffer_String
00000FD2  4EB8 0DC0               1726      JSR PRINT_TO_BUFFER
00000FD6  4EB9 000010CE           1727      JSR PRINT_OP_SIZE
00000FDC  4E75                    1728      RTS
00000FDE                          1729  ******************************* END OF GROUP B ********************************
00000FDE                          1730  
00000FDE                          1731  ****************************** GROUP C ****************************************
00000FDE                          1732  PRINT_OP_MULS:
Line 1733 ERROR: Undefined symbol
00000FDE  23FC 000011EE 005455B8  1733      MOVE.L #P_OP_MULS, Arg_AddStrToBuffer_String
00000FE8  4EB8 0DC0               1734      JSR PRINT_TO_BUFFER
00000FEC  4E75                    1735      RTS
00000FEE                          1736  ******************************* END OF GROUP C ********************************
00000FEE                          1737  
00000FEE                          1738  ****************************** GROUP D ****************************************
00000FEE                          1739  PRINT_OP_ADD:
Line 1740 ERROR: Undefined symbol
00000FEE  23FC 00001201 005455B8  1740      MOVE.L #P_OP_ADD, Arg_AddStrToBuffer_String
00000FF8  4EB8 0DC0               1741      JSR PRINT_TO_BUFFER
00000FFC  4EB9 000010CE           1742      JSR PRINT_OP_SIZE
00001002  4E75                    1743      RTS
00001004                          1744  PRINT_OP_ADDA:
Line 1745 ERROR: Undefined symbol
00001004  23FC 000011F9 005455B8  1745      MOVE.L #P_OP_ADDA, Arg_AddStrToBuffer_String
0000100E  4EB8 0DC0               1746      JSR PRINT_TO_BUFFER
00001012  4EB9 000010E8           1747      JSR PRINT_OP_SIZE_ADDA
00001018  4E75                    1748      RTS
0000101A                          1749  
0000101A                          1750  ******************************* END OF GROUP D ********************************
0000101A                          1751  
0000101A                          1752  ****************************** GROUP E ****************************************
0000101A                          1753  PRINT_OP_LSL:
Line 1754 ERROR: Undefined symbol
0000101A  23FC 0000120F 005455B8  1754      MOVE.L #P_OP_LSL, Arg_AddStrToBuffer_String
00001024  4EB8 0DC0               1755      JSR PRINT_TO_BUFFER
00001028  4EB9 000010CE           1756      JSR PRINT_OP_SIZE
0000102E  4E75                    1757      RTS
00001030                          1758  PRINT_OP_LSR:
Line 1759 ERROR: Undefined symbol
00001030  23FC 00001208 005455B8  1759      MOVE.L #P_OP_LSR, Arg_AddStrToBuffer_String
0000103A  4EB8 0DC0               1760      JSR PRINT_TO_BUFFER
0000103E  4EB9 000010CE           1761      JSR PRINT_OP_SIZE
00001044  4E75                    1762      RTS
00001046                          1763  PRINT_OP_ASR:
Line 1764 ERROR: Undefined symbol
00001046  23FC 00001216 005455B8  1764      MOVE.L #P_OP_ASR, Arg_AddStrToBuffer_String
00001050  4EB8 0DC0               1765      JSR PRINT_TO_BUFFER
00001054  4EB9 000010CE           1766      JSR PRINT_OP_SIZE
0000105A  4E75                    1767      RTS
0000105C                          1768  PRINT_OP_ASL:
Line 1769 ERROR: Undefined symbol
0000105C  23FC 0000121D 005455B8  1769      MOVE.L #P_OP_ASL, Arg_AddStrToBuffer_String
00001066  4EB8 0DC0               1770      JSR PRINT_TO_BUFFER
0000106A  4EB9 000010CE           1771      JSR PRINT_OP_SIZE
00001070  4E75                    1772      RTS
00001072                          1773  PRINT_OP_ROL:
Line 1774 ERROR: Undefined symbol
00001072  23FC 0000122B 005455B8  1774      MOVE.L #P_OP_ROL, Arg_AddStrToBuffer_String
0000107C  4EB8 0DC0               1775      JSR PRINT_TO_BUFFER
00001080  4EB9 000010CE           1776      JSR PRINT_OP_SIZE
00001086  4E75                    1777      RTS
00001088                          1778  PRINT_OP_ROR:
Line 1779 ERROR: Undefined symbol
00001088  23FC 00001224 005455B8  1779      MOVE.L #P_OP_ROR, Arg_AddStrToBuffer_String
00001092  4EB8 0DC0               1780      JSR PRINT_TO_BUFFER
00001096  4EB9 000010CE           1781      JSR PRINT_OP_SIZE
0000109C  4E75                    1782      RTS
0000109E                          1783  ******************************* END OF GROUP E ********************************
0000109E                          1784  
0000109E                          1785  ****************************** GROUP F ****************************************
0000109E                          1786  * No currently supported OP codes to print here.
0000109E                          1787  ******************************* END OF GROUP F ********************************
0000109E                          1788  
0000109E                          1789  ****************************** SIZE PRINTS ************************************
0000109E                          1790  PRINT_SIZE_BYTE:
Line 1791 ERROR: Undefined symbol
0000109E  23FC 00001107 005455B8  1791      MOVE.L #P_SIZE_B, Arg_AddStrToBuffer_String
000010A8  4EB8 0DC0               1792      JSR PRINT_TO_BUFFER
000010AC  4E75                    1793      RTS    
000010AE                          1794  
000010AE                          1795  PRINT_SIZE_WORD:
Line 1796 ERROR: Undefined symbol
000010AE  23FC 0000110B 005455B8  1796      MOVE.L #P_SIZE_W, Arg_AddStrToBuffer_String
000010B8  4EB8 0DC0               1797      JSR PRINT_TO_BUFFER
000010BC  4E75                    1798      RTS
000010BE                          1799      
000010BE                          1800  PRINT_SIZE_LONG:
Line 1801 ERROR: Undefined symbol
000010BE  23FC 0000110F 005455B8  1801      MOVE.L #P_SIZE_L, Arg_AddStrToBuffer_String
000010C8  4EB8 0DC0               1802      JSR PRINT_TO_BUFFER
000010CC  4E75                    1803      RTS
000010CE                          1804  
000010CE                          1805  PRINT_OP_SIZE:                     ;Prints current OP code byte size if applicable
000010CE  0C38 0000 0000          1806      CMP.B  #%00,OP_SIZE         ;Checks for byte size
000010D4  67C8                    1807      BEQ    PRINT_SIZE_BYTE      ;Print .B to buffer
000010D6  0C38 0001 0000          1808      CMP.B  #%01,OP_SIZE         ;Check for word size
000010DC  67D0                    1809      BEQ    PRINT_SIZE_WORD      ;Print .W to buffer
000010DE  0C38 0002 0000          1810      CMP.B  #%10,OP_SIZE         ;Check for long size
000010E4  67D8                    1811      BEQ    PRINT_SIZE_LONG      ;Print .L to buffer
000010E6  4E75                    1812      RTS
000010E8                          1813      
000010E8                          1814  PRINT_OP_SIZE_ADDA:                  ;Special  print for ADDA
000010E8  0C38 0000 0000          1815      CMP.B #%0,OP_SIZE
000010EE  67BE                    1816      BEQ    PRINT_SIZE_WORD
000010F0  66CC                    1817      BNE    PRINT_SIZE_LONG
000010F2                          1818      
000010F2                          1819  ******************* END OF SIZE PRINTS ****************************************
000010F2                          1820  
000010F2                          1821  ******************* END OF PRINTING ROUTINES **********************************
000010F2                          1822  
000010F2                          1823  ******************* END OF JMP LABELS *****************************************
000010F2                          1824  
000010F2                          1825  ******************* DATA CONSTANT PRINTS **************************************
000010F2                          1826  * Formatting is as follows: P_OP_<OPCODE>, where P = Print, OP = Operation,
000010F2                          1827  * <OPCODE> is any valid operand
000010F2                          1828  
000010F2= 20 20 20 44 41 54 ...   1829  P_INVALID_OP    DC.B    '   DATA   $',0
000010FE= 46 6F 75 6E 64 20 ...   1830  OP_FOUND        DC.B    'Found OP',0 ; this should be taken out later
00001107= 2E 42 20 00             1831  P_SIZE_B        DC.B    '.B ',0
0000110B= 2E 57 20 00             1832  P_SIZE_W        DC.B    '.W ',0
0000110F= 2E 4C 20 00             1833  P_SIZE_L        DC.B    '.L ',0
00001113= 20 20 20 4F 52 49 00    1834  P_OP_ORI        DC.B    '   ORI',0
0000111A= 20 20 20 43 4D 50 ...   1835  P_OP_CMPI       DC.B    '   CMPI',0
00001122= 20 20 20 42 43 4C ...   1836  P_OP_BCLR       DC.B    '   BCLR',0
0000112A= 20 20 20 4D 4F 56 ...   1837  P_OP_MOVEB      DC.B    '   MOVE.B',0
00001134= 20 20 20 4D 4F 56 ...   1838  P_OP_MOVEA_L    DC.B    '   MOVEA.L',0 
0000113F= 20 20 20 4D 4F 56 ...   1839  P_OP_MOVE_L     DC.B    '   MOVE.L ',0
0000114A= 20 20 20 4D 4F 56 ...   1840  P_OP_MOVEA_W    DC.B    '   MOVEA.W    ',0
00001159= 20 20 20 4D 4F 56 ...   1841  P_OP_MOVE_W     DC.B    '   MOVE.W ',0
00001164= 20 20 20 4D 4F 56 ...   1842  P_OP_MOVEM_W    DC.B    '   MOVEM.W',0
0000116F= 20 20 20 4D 4F 56 ...   1843  P_OP_MOVEM_L    DC.B    '   MOVEM.L',0
0000117A= 20 20 20 4C 45 41 00    1844  P_OP_LEA        DC.B    '   LEA',0
00001181= 20 20 20 4A 53 52 00    1845  P_OP_JSR        DC.B    '   JSR',0
00001188= 20 20 20 4E 4F 50 00    1846  P_OP_NOP        DC.B    '   NOP',0
0000118F= 20 20 20 52 54 53 00    1847  P_OP_RTS        DC.B    '   RTS',0
00001196= 20 20 20 4E 45 47 00    1848  P_OP_NEG        DC.B    '   NEG',0
0000119D= 20 20 20 53 55 42 ...   1849  P_OP_SUBQ       DC.B    '   SUBQ',0
000011A5= 20 20 20 42 52 41 00    1850  P_OP_BRA        DC.B    '   BRA',0
000011AC= 20 20 20 42 43 53 00    1851  P_OP_BCS        DC.B    '   BCS',0
000011B3= 20 20 20 42 47 45 00    1852  P_OP_BGE        DC.B    '   BGE',0
000011BA= 20 20 20 42 4C 54 00    1853  P_OP_BLT        DC.B    '   BLT',0
000011C1= 20 20 20 42 56 43 00    1854  P_OP_BVC        DC.B    '   BVC',0
000011C8= 20 20 20 44 49 56 ...   1855  P_OP_DIVS       DC.B    '   DIVS.W ',0
000011D3= 20 20 20 4F 52 00       1856  P_OP_OR         DC.B    '   OR',0
000011D9= 20 20 20 53 55 42 00    1857  P_OP_SUB        DC.B    '   SUB',0
000011E0= 20 20 20 45 4F 52 00    1858  P_OP_EOR        DC.B    '   EOR',0
000011E7= 20 20 20 43 4D 50 00    1859  P_OP_CMP        DC.B    '   CMP',0
000011EE= 20 20 20 4D 55 4C ...   1860  P_OP_MULS       DC.B    '   MULS.W ',0
000011F9= 20 20 20 41 44 44 ...   1861  P_OP_ADDA       DC.B    '   ADDA',0
00001201= 20 20 20 41 44 44 00    1862  P_OP_ADD        DC.B    '   ADD',0
00001208= 20 20 20 4C 53 52 00    1863  P_OP_LSR        DC.B    '   LSR',0
0000120F= 20 20 20 4C 53 4C 00    1864  P_OP_LSL        DC.B    '   LSL',0
00001216= 20 20 20 41 53 52 00    1865  P_OP_ASR        DC.B    '   ASR',0
0000121D= 20 20 20 41 53 4C 00    1866  P_OP_ASL        DC.B    '   ASL',0
00001224= 20 20 20 52 4F 52 00    1867  P_OP_ROR        DC.B    '   ROR',0
0000122B= 20 20 20 52 4F 4C 00    1868  P_OP_ROL        DC.B    '   ROL',0
00001232                          1869  ***************** END OF DATA CONSTANT PRINTS ***********************************
00001232                          1870   
00001232                          1871  
00001232                          1872  
00001232                          1873  
00001232                          1874  
00001232                          1875  
00001232                          1876  
00001232                          1877  
00001232                          1878  
00001232                          1879  
Line 1880 WARNING: END directive missing, starting address not set

163 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BIT_CHECK_EXG       B2E
BIT_CHECK_EXT       6B0
BIT_CHECK_MOVEP     3DC
BIT_CHECK_SUBX      A2C
CHECK_OP_ABCD       B02
CHECK_OP_ADD        BC4
CHECK_OP_ADDA       BA4
CHECK_OP_ADDI       32C
CHECK_OP_ADDQ       886
CHECK_OP_ADDX       B8E
CHECK_OP_AND        B6C
CHECK_OP_ANDI       300
CHECK_OP_ANDI_TO_CCR  2B8
CHECK_OP_ANDI_TO_SR  2CA
CHECK_OP_ASL        D82
CHECK_OP_ASL_NO_ROT  C9A
CHECK_OP_ASR        D62
CHECK_OP_ASR_NO_ROT  C7E
CHECK_OP_BCS        8FE
CHECK_OP_BGE        91A
CHECK_OP_BLT        936
CHECK_OP_BRA        8E2
CHECK_OP_BSR        8CC
CHECK_OP_BVC        952
CHECK_OP_CHK        7A8
CHECK_OP_CLR        66E
CHECK_OP_CMP        ABC
CHECK_OP_CMPA       A86
CHECK_OP_CMPI       42E
CHECK_OP_CMPM       A70
CHECK_OP_DBCC       85A
CHECK_OP_DIVS       9D0
CHECK_OP_DIVU       9A4
CHECK_OP_DYNAMIC_BCHG  3B0
CHECK_OP_DYNAMIC_BCLR  46E
CHECK_OP_DYNAMIC_BSET  3C6
CHECK_OP_DYNAMIC_BTST  39A
CHECK_OP_EOR        A9C
CHECK_OP_EORI       342
CHECK_OP_EORI_TO_CCR  2DC
CHECK_OP_EORI_TO_SR  2EE
CHECK_OP_EXG        B18
CHECK_OP_EXT        69A
CHECK_OP_ILLEGAL    5CE
CHECK_OP_JMP        792
CHECK_OP_JSR        7F2
CHECK_OP_LEA        7D6
CHECK_OP_LINK       750
CHECK_OP_LSL        D42
CHECK_OP_LSL_NO_ROT  C62
CHECK_OP_LSR        D22
CHECK_OP_LSR_NO_ROT  C46
CHECK_OP_MOVEA_L    4CA
CHECK_OP_MOVEA_W    532
CHECK_OP_MOVEM      82E
CHECK_OP_MOVEP      3F8
CHECK_OP_MOVEQ      97E
CHECK_OP_MOVE_B     49E
CHECK_OP_MOVE_FROM_SR  616
CHECK_OP_MOVE_L     506
CHECK_OP_MOVE_TO_CCR  62C
CHECK_OP_MOVE_TO_SR  642
CHECK_OP_MOVE_USP   77C
CHECK_OP_MOVE_W     56E
CHECK_OP_MULS       B56
CHECK_OP_MULU       AEC
CHECK_OP_NBCD       6CC
CHECK_OP_NEG        80E
CHECK_OP_NEGX       658
CHECK_OP_NOP        5BC
CHECK_OP_NOT        684
CHECK_OP_OR         9E6
CHECK_OP_ORI        40E
CHECK_OP_ORI_TO_CCR  294
CHECK_OP_ORI_TO_SR  2A6
CHECK_OP_PEA        6F8
CHECK_OP_RESET      5AA
CHECK_OP_ROL        D02
CHECK_OP_ROL_NO_ROT  C2A
CHECK_OP_ROR        CE2
CHECK_OP_ROR_NO_ROT  C0E
CHECK_OP_ROXL       CCC
CHECK_OP_ROXL_NO_ROT  BF8
CHECK_OP_ROXR       CB6
CHECK_OP_ROXR_NO_ROT  BE2
CHECK_OP_RTE        5E0
CHECK_OP_RTR        604
CHECK_OP_RTS        7BE
CHECK_OP_SBCD       9BA
CHECK_OP_SCC        870
CHECK_OP_STATIC_BCHG  36E
CHECK_OP_STATIC_BCLR  44E
CHECK_OP_STATIC_BSET  384
CHECK_OP_STATIC_BTST  358
CHECK_OP_STOP       598
CHECK_OP_SUB        A4C
CHECK_OP_SUBA       A04
CHECK_OP_SUBI       316
CHECK_OP_SUBQ       89C
CHECK_OP_SUBX       A1A
CHECK_OP_SWAP       6E2
CHECK_OP_TAS        70E
CHECK_OP_TRAP       73A
CHECK_OP_TRAPV      5F2
CHECK_OP_TST        724
CHECK_OP_UNLK       766
C_GROUP_0           290
C_GROUP_1           49A
C_GROUP_2           4C6
C_GROUP_3           52E
C_GROUP_4           596
C_GROUP_5           856
C_GROUP_6           8C8
C_GROUP_7           97A
C_GROUP_8           9A0
C_GROUP_9           A00
C_GROUP_A           A64
C_GROUP_B           A6C
C_GROUP_C           AE8
C_GROUP_D           B8A
C_GROUP_E           BDE
C_GROUP_F           DAE
FIND_1_BIT_SIZE_6   192
FIND_1_BIT_SIZE_8   1B4
FIND_2_BIT_SIZE_7_TO_6  170
FIND_3_BIT_REG_TO_EA  1D6
FIND_MOVEA_L_DIFFERENCE  4DE
FIND_MOVEA_W_DIFF   546
FIRST_3             2
FOURTH_3            5
GROUP0_INVALID      48E
GROUP0_SUCCESS      494
GROUP1_INVALID      4BA
GROUP1_SUCCESS      4C0
GROUP2_INVALID      522
GROUP2_SUCCESS      528
GROUP3_INVALID      58A
GROUP3_SUCCESS      590
GROUP4_INVALID      84A
GROUP4_SUCCESS      850
GROUP5_INVALID      8BC
GROUP5_SUCCESS      8C2
GROUP6_INVALID      96E
GROUP6_SUCCESS      974
GROUP7_INVALID      994
GROUP7_SUCCESS      99A
GROUP8_INVALID      9F4
GROUP8_SUCCESS      9FA
GROUP9_INVALID      A5A
GROUP9_SUCCESS      A5E
GROUPB_INVALID      ADC
GROUPB_SUCCESS      AE2
GROUPC_INVALID      B7E
GROUPC_SUCCESS      B84
GROUPD_INVALID      BD2
GROUPD_SUCCESS      BD8
GROUPE_INVALID      DA2
GROUPE_SUCCESS      DA8
GROUP_0             1C
GROUP_1             2E
GROUP_2             40
GROUP_3             52
GROUP_4             64
GROUP_5             76
GROUP_6             88
GROUP_7             9A
GROUP_8             AC
GROUP_9             BE
GROUP_A             D0
GROUP_B             E2
GROUP_C             F4
GROUP_D             106
GROUP_E             118
GROUP_F             12A
INVALID_OP          DB6
MNEMONIC            1
MOVE_AND_MOVEA_PARSE_EA  1EE
MOVE_LAST_6_BITS_TO_EA  14C
OP_FOUND            10FE
OP_JSR_DONE         138
OP_JSR_ROUTINE      6
OP_SIZE             0
PARSE_EA_CONSTANT_BITS  238
PRINT_OP_ADD        FEE
PRINT_OP_ADDA       1004
PRINT_OP_ASL        105C
PRINT_OP_ASR        1046
PRINT_OP_BCS        F08
PRINT_OP_BGE        F1E
PRINT_OP_BLT        F34
PRINT_OP_BRA        F60
PRINT_OP_BVC        F4A
PRINT_OP_CMP        FC8
PRINT_OP_CMPI       DE8
PRINT_OP_DIVS       F76
PRINT_OP_DYNAMIC_BCLR  E14
PRINT_OP_EOR        FB2
PRINT_OP_JSR        E7A
PRINT_OP_LEA        EA6
PRINT_OP_LSL        101A
PRINT_OP_LSR        1030
PRINT_OP_MOVEA_L    E3A
PRINT_OP_MOVEA_W    E5A
PRINT_OP_MOVEB      E2A
PRINT_OP_MOVEM_L    EE2
PRINT_OP_MOVEM_W    ED2
PRINT_OP_MOVE_L     E4A
PRINT_OP_MOVE_W     E6A
PRINT_OP_MULS       FDE
PRINT_OP_NEG        EBC
PRINT_OP_OR         F86
PRINT_OP_ORI        DD2
PRINT_OP_ROL        1072
PRINT_OP_ROR        1088
PRINT_OP_RTS        E90
PRINT_OP_SIZE       10CE
PRINT_OP_SIZE_ADDA  10E8
PRINT_OP_STATIC_BCLR  DFE
PRINT_OP_SUB        F9C
PRINT_OP_SUBQ       EF2
PRINT_SIZE_BYTE     109E
PRINT_SIZE_LONG     10BE
PRINT_SIZE_WORD     10AE
PRINT_TO_BUFFER     DC0
P_INVALID_OP        10F2
P_OP_ADD            1201
P_OP_ADDA           11F9
P_OP_ASL            121D
P_OP_ASR            1216
P_OP_BCLR           1122
P_OP_BCS            11AC
P_OP_BGE            11B3
P_OP_BLT            11BA
P_OP_BRA            11A5
P_OP_BVC            11C1
P_OP_CMP            11E7
P_OP_CMPI           111A
P_OP_DIVS           11C8
P_OP_EOR            11E0
P_OP_JSR            1181
P_OP_LEA            117A
P_OP_LSL            120F
P_OP_LSR            1208
P_OP_MOVEA_L        1134
P_OP_MOVEA_W        114A
P_OP_MOVEB          112A
P_OP_MOVEM_L        116F
P_OP_MOVEM_W        1164
P_OP_MOVE_L         113F
P_OP_MOVE_W         1159
P_OP_MULS           11EE
P_OP_NEG            1196
P_OP_NOP            1188
P_OP_OR             11D3
P_OP_ORI            1113
P_OP_ROL            122B
P_OP_ROR            1224
P_OP_RTS            118F
P_OP_SUB            11D9
P_OP_SUBQ           119D
P_SIZE_B            1107
P_SIZE_L            110F
P_SIZE_W            110B
SECOND_3            3
THIRD_3             4
