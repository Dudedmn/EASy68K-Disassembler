000010C0 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/12/2019 9:17:48 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OP Code routines for Disassembler
00000000                             3  * Written by : Daniel Yan
00000000                             4  * Date       : 2/28/2019, Updated 3/9/2019
00000000                             5  
00000000                             6  * Description: Op code determining to identify values
00000000                             7  
00000000                             8  
00000000                             9  ;FAHAD CODE
00000000                            10  ; ORG place for G_BUFFER
00000000                            11  ; ORG place for CUR_OP_CODE
00000000                            12  ; ORG place for VALID_OP_CODE
00000000                            13  ; ORG place for all other constants
00000000                            14  ; ORG START $1000
00000000                            15  ; WE NEED TO SEE APPROX HOW MUCH ADDRESS SPACE ALL OUR ROUTINES COVER
00000000                            16  ; ORG OUR CONSTANTS/BUFFERS AT A SAFE DISTANCE BETWEEN ROUTINES AND TEST PROGRAM
00000000                            17  
00000000                            18  ; MEMORY_ADDRESS OPCODE $HEX_VALUE
00000000                            19  ;G_BUFFER
00000000                            20  ; 1254 MOVEA.L A3,A6, $3ASD
00000000                            21  ; 1254 RTS $4E75
00000000                            22  ;B_BUFFER
00000000                            23  ; 1254 DATA $CURRENT_OP
00000000                            24  
00000000                            25  ; JSR INVALID_OP
00000000                            26  ; 
00000000                            27  
00000000                            28  ; 8800 MOVEA.L A3,A6 $3FCA
00000000                            29  ; 8800 DATA $3FCA
00000000                            30  
00001000                            31    ORG $1000 ; Start at Address $1000
00001000                            32  CUR_OP_CODE DS.W 1  ; Current OP Code Word
00001002                            33  EA_SIZE     DS.B 1
00001003                            34  G_BUFFER    DS.B 80
00001053                            35  B_BUFFER    DS.B 80
000010A3                            36  MNEMONIC    DS.B 1
000010A4                            37  FIRST_3     DS.B 1
000010A5                            38  SECOND_3    DS.B 1
000010A6                            39  THIRD_3     DS.B 1
000010A7                            40  FOURTH_3    DS.B 1
000010A8                            41  
000010A8= 4D4F5645 412E4C00 ...     42  P_OP_MOVEA_L_T  DC.L    'MOVEA.L',0
000010B4= 412E4C00 00000000         43  P_OP_MOVEA_L_A_L DC.L   'A.L',0
000010BC  49F8 1003                 44      LEA G_BUFFER,A4
000010C0                            45      
000010C0                            46  
000010C0                            47  START
000010C0                            48      ; Start the op code routine
000010C0                            49      ;LEA G_BUFFER, A4
000010C0  18BC 0000                 50      MOVE.B #0, (A4)
000010C4                            51      
000010C4                            52      ;MOVE.L (A5)+, D0
000010C4                            53      
000010C4                            54      ; Load the message onto A4
000010C4                            55      ;MOVE.L #P_OP_MOVEA_L_T, Arg_AddStrToBuffer_String
000010C4                            56      ;MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer 
000010C4                            57      
000010C4                            58      
000010C4                            59      ;JSR AddStrToBuffer
000010C4                            60      ;LEA G_BUFFER, A4   ; Load the value of the message onto the G_BUFFER
000010C4                            61      ;MOVE.L P_OP_MOVEA_L_T,(A4)+
000010C4                            62      ;MOVE.L P_OP_MOVEA_L_A_L,(A4)+
000010C4                            63      
000010C4                            64      
000010C4                            65      
000010C4                            66  
000010C4                            67      ; AFTER THIS POINT THE BUFFER HAS THIS 'MOVE' + 'A.L'          ; Increment 4 spaces in the address
000010C4                            68      
000010C4                            69      
000010C4                            70         
000010C4                            71      
000010C4                            72     
000010C4                            73     ;This is the right area for pointer now, however when I add here it can't go
000010C4                            74     ;back 
000010C4                            75  *********************************************************************************
000010C4                            76  * Here I'm attempting to 'skip' forward in the address to find the proper location for the string
000010C4                            77  * In the prior command 'LEA P_OP_MOVEA_L,A4' I have loaded 'MOVE' into address space. I cannot move
000010C4                            78  * more than 4 bytes (long) at a single time, so I need to move 'A.L' after which is 3 more bytes
000010C4                            79  * So what I need to do is LOAD 'MOVE' into the address space, skip 4 bytes, then load 'A.L' right
000010C4                            80  * after 'MOVE'. So this would show 'MOVEA.L' in the address space. Which then Denny can load his stuff
000010C4                            81  * after mine.
000010C4                            82  *
000010C4                            83  *In the ideal world this would look something like: P_OP_MOVEA_L then P_OP_A_L then _P_OP_TAB
000010C4                            84  * which would appear as 'MOVEA.L    ' in the address space. This would require 4 increments
000010C4                            85  * after MOVE, then 'A.L' being inserted, then 3 increments (or 7 from start) for the tab
000010C4                            86  ********************************************************************************* 
000010C4                            87      
000010C4                            88      ;ADD.L $FFFF,G_BUFFER_PREP
000010C4                            89      ;LEA P_OP_A_L,A1
000010C4                            90      ;MOVE.L (A4),G_BUFFER_PREP
000010C4                            91      
000010C4                            92  ***************************** Input Tests ********************************************
000010C4                            93      ;MOVE.W #%0000100010000010,CUR_OP_CODE       ;Static BCLR
000010C4                            94      ;MOVE.W #%0000111110001110,CUR_OP_CODE       ;Dynamic BCLR
000010C4                            95      ;MOVE.W #%0000000001000001,CUR_OP_CODE       ;ORI.W D1
000010C4                            96          
000010C4                            97      ;MOVE.W #%0000111110001110,CUR_OP_CODE              ;Dynamic BCLR
000010C4                            98      ;IN HEX $018E. D7 = 110, D6 = 001, D4 = %110, D5 = 7, (A6) = %0000
000010C4                            99      ;MOVE.W #%0000100010001110,CUR_OP_CODE              ;Static BCLR
000010C4                           100      ;IN HEX $018E. D7 = 110, D6 = 001, D4 = %110, D5 = 7, (A6) = %0000
000010C4                           101     
000010C4                           102      ;MOVE.W  #$018E,CUR_OP_CODE                        ;Dynamic BCLR in hex
000010C4                           103      ;MOVE.W  #$02FF,CUR_OP_CODE                         ;INVALID_OP code
000010C4                           104      ;MOVE.W #%0000110001010111,CUR_OP_CODE
000010C4                           105      ;MOVE.W #%0010011001001101,CUR_OP_CODE                       ;MOVEA  
000010C4                           106       ;MOVE.W #%0010001001001101,CUR_OP_CODE              ;MOVEA.L A5,A1
000010C4                           107      ;MOVE.W CUR_OP_CODE,(A6)
000010C4                           108      ;MOVE.W #$264D
000010C4                           109      ;Expected values:
000010C4                           110      ;D7, DST REG:   011
000010C4                           111      ;D6, DST MODE:  001
000010C4                           112      ;D5, SRC REG:   101
000010C4                           113      ;D4, SRC MODE:  001
000010C4                           114      ;CHECK IF DST MODE IS %111 or SRC MODE IS %111 for MOVE
000010C4                           115      ;(A3), DST TRAIL:  001
000010C4                           116      ;(A2), SRC TRAIL: ONLY FOR MOVE
000010C4                           117      ;MOVE.W #%0010000000001101,CUR_OP_CODE              ;MOVE.L A5,A1
000010C4                           118      ;MOVE.W #%0011011001001101,CUR_OP_CODE              ;MOVEA.W A5,A1
000010C4                           119      ;MOVE.W #%1001011001111101,CUR_OP_CODE               ;MOVE TO TEST PARSE_EA_CONSTANT_BITS
000010C4                           120      ;MOVE.W #%0011000000001101,CUR_OP_CODE              ;MOVE.W A5,A1
000010C4                           121      ;MOVE.W #%0000000001000001,CUR_OP_CODE              ;ORI.W D1
000010C4                           122      ;MOVE.W CUR_OP_CODE,A6                              ;Loading memory space to address register
000010C4                           123      ;MOVE.W CUR_OP_CODE,(A6)                            ;Loading memory value to address value
000010C4                           124   
000010C4                           125      ****GROUP 4 tests****
000010C4                           126      ;MOVE.W #$4E75,CUR_OP_CODE                            ;RTS
000010C4                           127      ;MOVE.W #$4E71,CUR_OP_CODE                            ;NOP
000010C4                           128      ;MOVE.W #$4415,CUR_OP_CODE                            ;NEG.L D5
000010C4                           129      ;MOVE.W #$43CC,CUR_OP_CODE                            ;LEA A1,A6
000010C4                           130      ;MOVE.W #%0100100010001110,CUR_OP_CODE
000010C4                           131      ;MOVE.W #$488E,CUR_OP_CODE                            ;MOVEM.W Reg to Mem, A6
000010C4                           132      ;MOVE.W #$4C8E,CUR_OP_CODE                            ;MOVEM.W Mem to Reg, A6
000010C4                           133      ;MOVE.W #$4E95,CUR_OP_CODE                            ;JSR (A5)               
000010C4                           134      ****GROUP 5 tests****
000010C4                           135      ;MOVE.W #%0101111110001111
000010C4                           136      
000010C4                           137      *****GROUP 5 TESTS****
000010C4                           138      ;#%0101111100000101, SUBQ.B D5
000010C4                           139      ;MOVE.W #$5F05,CUR_OP_CODE ; for SUBQ.B D5
000010C4                           140      ;#%0101111110001110, SUBQ.L A6 
000010C4                           141      ;MOVE.W #$5F8E,CUR_OP_CODE
000010C4                           142      ******GROUP 5 VALIDATION TESTS**********
000010C4                           143      ;MOVE.W #%0101111000001110,CUR_OP_CODE  ; ADDQ
000010C4                           144      ;MOVE.W #%0101010011000110,CUR_OP_CODE ; Scc
000010C4                           145      ;MOVE.W #%0101010011001110,CUR_OP_CODE ; DBcc
000010C4                           146     
000010C4                           147      *****GROUP 6 TESTS********* BCS,BGE,BLT,BVC
000010C4                           148      ; DISPLACEMENT, $00 is 16 bits, $FF is 32 bits
000010C4                           149      ; DISPLACEMENT = Last 8 bits
000010C4                           150      ;MOVE.W #%0110000001010101,CUR_OP_CODE   ;BRA
000010C4                           151      ;MOVE.W #%0110010100000001,CUR_OP_CODE   ;BCS
000010C4                           152      ;MOVE.W #%0110110001010100,CUR_OP_CODE   ;BGE
000010C4  31FC 6DAA 1000           153      MOVE.W #%0110110110101010,CUR_OP_CODE   ;BLT
000010CA                           154      ;MOVE.W #%0110100001010100,CUR_OP_CODE   ;BVC
000010CA                           155  ************************************************************************************
000010CA                           156  * PRINTING BUFFER FUNCTION HAS BEEN FINISHED
000010CA                           157  *-----------------------------------------------------------
000010CA                           158  *First Nibble Values (15-12)
000010CA                           159  *Value                  Operations
000010CA                           160  *$0                     GROUP_0: ORI,BCLR (static and dynamic),CMPI --- DONE, need validation testing
000010CA                           161  *$1                     GROUP_1: MOVE.B                             --- DONE, need validation testing
000010CA                           162  *$2                     GROUP_2: MOVE.L, MOVEA.L                    --- DONE, need validation testing
000010CA                           163  *$3                     GROUP_3: MOVE.W, MOVEA.W                    --- Partial, needs trailing bits
000010CA                           164  *$4                     GROUP_4: LEA,JSR,RTS,NEG,MOVEM              --- Partial, needs SIZE print for NEG, MOVE
000010CA                           165  *$5                     GROUP_5: SUBQ                               --- Partial, needs SIZE pri
000010CA                           166  *$6                     GROUP_6: Bcc(BCS,BGE,BLT,BVC), BRA          --- Not started
000010CA                           167  *$7                     GROUP_7: INVALID_OP                         --- DONE
000010CA                           168  *$8                     GROUP_8: DIVS, OR                           --- Not started
000010CA                           169  *$9                     GROUP_9: SUB                                --- Not started
000010CA                           170  *$A                     GROUP_A: INVALID_OP                         --- DONE
000010CA                           171  *$B                     GROUP_B: EOR, CMP                           --- Not started
000010CA                           172  *$C                     GROUP_C: MULS                               --- Not started
000010CA                           173  *$D                     GROUP_D: ADD, ADDA                          --- Not started
000010CA                           174  *$E                     GROUP_E: LSR, LSL, ASR, ASL, ROL, ROR       --- Not started
000010CA                           175  *$F                     GROUP_F: INVALID_OP                         --- DONE
000010CA                           176  
000010CA                           177  
000010CA                           178  * OP_JSR_Routine
000010CA                           179  **********************************************************************************
000010CA                           180  * Description: Catalog all supported OP codes into groupings based on their hex
000010CA                           181  * values. Sort the supported OP codes by looking at the first nibble for their
000010CA                           182  * grouping value. Call underlying subroutines for further identification of the
000010CA                           183  * op code.
000010CA                           184  *
000010CA                           185  * Registers used: A6,D0,D1 
000010CA                           186  *
000010CA                           187  * Precondition: Instruction set (size Word) has been loaded in the appropriate
000010CA                           188  * address to be parsed and read.
000010CA                           189  
000010CA                           190  * Postcondition: OP code has been identified as either valid or invalid. If it is
000010CA                           191  * valid, it is stored into A6 and EA parsing methods are called to pass needed
000010CA                           192  * information to EA. If invalid, DATA output will be utilized to indicate so.
000010CA                           193  **********************************************************************************
000010CA                           194  * These valid operand codes refer to the basic supported operand codes
000010CA                           195  * Groups refer to the first nibble value that is supported by the operand
000010CA                           196  LOAD_OP_CODE:
000010CA  3038 1000                197      MOVE.W CUR_OP_CODE,D0
000010CE  3CB8 1000                198      MOVE.W CUR_OP_CODE,(A6)
000010D2  3016                     199      MOVE.W (A6),D0          ;Load current instruction set into D0
000010D4  4EB9 000010DA            200      JSR OP_JSR_Routine      ;Use the JSR routine to identify the op code
000010DA                           201  OP_JSR_Routine:
000010DA  48E7 C000                202      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
000010DE  720C                     203      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
000010E0  E2A8                     204      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
000010E2                           205  
000010E2                           206  GROUP_0:                ;$0| ORI, BCLR (static and dynamic), CMPI                  
000010E2  B03C 0000                207      CMP.B   #$0,D0                 ;Compare first nibble
000010E6  6600 000C                208      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
000010EA  4EB9 00001300            209      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
000010F0  6000 010C                210      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000010F4                           211      
000010F4                           212  GROUP_1:                ;$1| MOVE.B
000010F4  B03C 0001                213      CMP.B   #$1,D0                 ;Compare first nibble
000010F8  6600 000C                214      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
000010FC  4EB9 00001372            215      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
00001102  6000 00FA                216      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001106                           217  
00001106                           218  GROUP_2:                ;$2| MOVE.L, MOVEA.L
00001106  B03C 0002                219      CMP.B   #$2,D0                 ;Compare first nibble
0000110A  6600 000C                220      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
0000110E  4EB9 00001388            221      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
00001114  6000 00E8                222      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001118                           223  
00001118                           224  GROUP_3:                ;$3| MOVE.W, MOVEA.W
00001118  B03C 0003                225      CMP.B   #$3,D0                 ;Compare first nibble
0000111C  6600 000C                226      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
00001120  4EB9 000013CE            227      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
00001126  6000 00D6                228      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000112A                           229  
0000112A                           230  GROUP_4:                ;$4| LEA, JSR, RTS, NEG, MOVEM
0000112A  B03C 0004                231      CMP.B   #$4,D0                 ;Compare first nibble
0000112E  6600 000C                232      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
00001132  4EB9 00001414            233      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
00001138  6000 00C4                234      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000113C                           235  
0000113C                           236  
0000113C                           237  GROUP_5:                ;$5| SUBQ
0000113C  B03C 0005                238      CMP.B   #$5,D0                 ;Compare first nibble
00001140  6600 000C                239      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
00001144  4EB9 00001484            240      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
0000114A  6000 00B2                241      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000114E                           242  
0000114E                           243  
0000114E                           244  GROUP_6:                ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
0000114E  B03C 0006                245      CMP.B   #$6,D0                 ;Compare first nibble
00001152  6600 000C                246      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
00001156  4EB9 000014AC            247      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
0000115C  6000 00A0                248      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001160                           249  
00001160                           250  
00001160                           251  GROUP_7:                ;$7| Display: DATA, $WXYZ (Unsupported)
00001160  B03C 0007                252      CMP.B   #$7,D0                 ;Compare first nibble
00001164  6600 000C                253      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
00001168  4EB9 00001510            254      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
0000116E  6000 008E                255      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001172                           256  
00001172                           257  
00001172                           258  GROUP_8:                ;$8| DIVS, OR
00001172  B03C 0008                259      CMP.B   #$8,D0                 ;Compare first nibble
00001176  6600 000C                260      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
0000117A  4EB9 00001516            261      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
00001180  6000 007C                262      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001184                           263  
00001184                           264  
00001184                           265  GROUP_9:                ;$9| SUB
00001184  B03C 0009                266      CMP.B   #$9,D0                 ;Compare first nibble
00001188  6600 000C                267      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
0000118C  4EB9 00001540            268      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
00001192  6000 006A                269      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001196                           270  
00001196                           271  
00001196                           272  GROUP_A:                ;$A| Display: DATA, $WXYZ (Unsupported)
00001196  B03C 000A                273      CMP.B   #$A,D0                 ;Compare first nibble
0000119A  6600 000C                274      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
0000119E  4EB9 0000155E            275      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
000011A4  6000 0058                276      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011A8                           277  
000011A8                           278  
000011A8                           279  GROUP_B:                ;$B| EOR, CMP
000011A8  B03C 000B                280      CMP.B   #$B,D0                 ;Compare first nibble
000011AC  6600 000C                281      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
000011B0  4EB9 00001564            282      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
000011B6  6000 0046                283      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011BA                           284  
000011BA                           285  
000011BA                           286  GROUP_C:                ;$C| MULS
000011BA  B03C 000C                287      CMP.B   #$C,D0                 ;Compare first nibble
000011BE  6600 000C                288      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
000011C2  4EB9 00001594            289      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
000011C8  6000 0034                290      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011CC                           291  
000011CC                           292  
000011CC                           293  GROUP_D:                 ;$D| ADD, ADDA
000011CC  B03C 000D                294      CMP.B   #$D,D0                 ;Compare first nibble
000011D0  6600 000C                295      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
000011D4  4EB9 000015A0            296      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
000011DA  6000 0022                297      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011DE                           298  
000011DE                           299  
000011DE                           300  GROUP_E:                ;$E| LSR, LSL, ASR, ASL, ROL, ROR
000011DE  B03C 000E                301      CMP.B   #$E,D0                 ;Compare first nibble
000011E2  6600 000C                302      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
000011E6  4EB9 000015BE            303      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
000011EC  6000 0010                304      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011F0                           305  
000011F0                           306  
000011F0                           307  GROUP_F:                ;$F| Display: DATA, $WXYZ (Unsupported)
000011F0  B03C 000F                308      CMP.B   #$F,D0                 ;Compare first nibble
000011F4  4EB9 00001652            309      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
000011FA  6000 0002                310      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011FE                           311  
000011FE                           312  
000011FE                           313  OP_JSR_DONE:
000011FE  4CDF 0003                314           MOVEM.L (SP)+,D0-D1       ;Recover register D0
00001202  4EF9 00001668            315           JMP READ_NEXT_INSTRUCTION
00001208                           316  **********************************************************************************
00001208                           317  
00001208                           318  ********** EA Parsing ************************************************************
00001208                           319  
00001208                           320  * MOVE_LAST_6_BITS_TO_EA
00001208                           321  **********************************************************************************
00001208                           322  * Description: For OP codes with the last 6 bits specified as EA Mode and EA Reg,
00001208                           323  * the last 6 bits will be parsed and moved into the appropriate registers.
00001208                           324  *
00001208                           325  * Registers used: A6,D0,D1,D6,D7 
00001208                           326  
00001208                           327  * Precondition: OP code has been identified with only the last 6 bits for EA,
00001208                           328  * current instruction set is stored into A6.
00001208                           329  
00001208                           330  * Postcondition: Last 6 bits of instruction bit has been isolated and stored. Bits
00001208                           331  * for EA Mode have been stored in D7, Bits for EA Reg been stored in D6.
00001208                           332  **********************************************************************************
00001208                           333  MOVE_LAST_6_BITS_TO_EA:      ;Move last 6 bits from EA field to relevant registers
00001208                           334     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001208  3038 1000                335      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
0000120C  323C 000A                336      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
00001210  E368                     337      LSL.W   D1,D0            ;Truncate to find the last 6 bits
00001212  E268                     338      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
00001214  3E00                     339      MOVE.W  D0,D7            ;Move last 6 bits into D7
00001216  323C 0003                340      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
0000121A  E26F                     341      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
0000121C  3C07                     342      MOVE.W  D7,D6            ;Move the 'upper' 3 bits into D6
0000121E  323C 000D                343      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
00001222  E368                     344      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
00001224  E268                     345      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001226  3E00                     346      MOVE.W  D0,D7            ;Move the 'lower' 3 bits into D7
00001228                           347     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
00001228  4E75                     348      RTS                      ;Return to stack
0000122A                           349      
0000122A                           350  * FIND_2_BIT_SIZE_TO_EA
0000122A                           351  **********************************************************************************
0000122A                           352  * Description: For OP codes with 2 bit size fields, the 2 relevant bits (7-6) will 
0000122A                           353  * be parsed and moved to the appropriate registers.
0000122A                           354  *
0000122A                           355  * Registers used: A6,D0,D1,D5
0000122A                           356  *
0000122A                           357  * Precondition: OP code has been identified with 2 size bit field for EA, current
0000122A                           358  * instruction set for OP code is stored in to A6.
0000122A                           359  *
0000122A                           360  * Postcondition: 2 bit size field has been isolated and stored into D5.
0000122A                           361  **********************************************************************************
0000122A                           362  FIND_2_BIT_SIZE_TO_EA:      ;Move the 2 bit size field relevant register
0000122A                           363     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
0000122A  3038 1000                364      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
0000122E  323C 0008                365      MOVE.W   #8,D1          ;Prepare 8 bit shift to D1
00001232  E368                     366      LSL.W    D1,D0          ;Truncate to find the 2 size bits
00001234  E268                     367      LSR.W    D1,D0          ;Reposition the bits
00001236  323C 0006                368      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
0000123A  E268                     369      LSR.W    D1,D0          ;Truncate to shift 2 bits to a byte
0000123C  3800                     370      MOVE.W   D0,D4          ;Move 2 size bits into D5
0000123E                           371    ;  MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
0000123E  4E75                     372      RTS                     ;Return to stack
00001240                           373  **********************************************************************************
00001240                           374  
00001240                           375  * FIND_3_BIT_REG_TO_EA
00001240                           376  **********************************************************************************
00001240                           377  * Description: OP codes with a dynamic 3 bit register in bits 11-9 will be parsed
00001240                           378  * and have those 3 bits isolated and moved to the appropriate registers.
00001240                           379  *
00001240                           380  * Registers used: A6,D0,D1,D5
00001240                           381  *
00001240                           382  * Precondition: OP code has been identified with a dynamic 3 bit register in bits
00001240                           383  * 11-9.
00001240                           384  *
00001240                           385  * Postcondition: 3 bit dynamic register has been isolated and stored into D4.
00001240                           386  **********************************************************************************
00001240                           387  FIND_3_BIT_REG_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
00001240                           388     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
00001240  3038 1000                389      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
00001244  323C 0004                390      MOVE.W   #4,D1          ;Prepare 4 bit shift to D1
00001248  E368                     391      LSL.W    D1,D0          ;Truncate to find the 2 size bits
0000124A  E268                     392      LSR.W    D1,D0          ;Reposition the bits
0000124C  323C 0009                393      MOVE.W   #9,D1          ;Prepare 9 bit shift to D1
00001250  E268                     394      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
00001252  3A00                     395      MOVE.W   D0,D5          ;Move 3 register bits into D4
00001254                           396     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
00001254  4E75                     397      RTS                     ;Return to stack
00001256                           398  **********************************************************************************
00001256                           399  
00001256                           400  * MOVE_AND_MOVEA_PARSE_EA
00001256                           401  **********************************************************************************
00001256                           402  * Description: Special parsing for the SRC and DST Mode/Reg for MOVE/MOVE
00001256                           403  *
00001256                           404  * Registers used: A6,D0,D1,D7,D6,D5,D4
00001256                           405  *
00001256                           406  * Precondition: OP code has been identified with either MOVE or MOVEA
00001256                           407  *
00001256                           408  * Postcondition: Store all relevant EA bits into associated register.
00001256                           409  **********************************************************************************
00001256                           410  MOVE_AND_MOVEA_PARSE_EA:       ;Move the 3 bit dynamic register bits to proper register
00001256                           411     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001256  3038 1000                412      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
0000125A  323C 000A                413      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
0000125E  E368                     414      LSL.W   D1,D0            ;Truncate to find the last 6 bits
00001260  E268                     415      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
00001262  3E00                     416      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
00001264  323C 0003                417      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
00001268  E26F                     418      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
0000126A  3A07                     419      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
0000126C  323C 000D                420      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
00001270  E368                     421      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
00001272  E268                     422      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001274  3800                     423      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
00001276                           424      **************MOVING SOURCE*********** TO BE DONE LATER
00001276                           425      ; MOVE.W #%0011 011 001 001 101,(A6)              ;MOVEA.W A5,A3
00001276                           426      ; MOVE.W #%0010 011 001 001 101,D0                ;MOVEA.L A5,A3
00001276                           427       ;Expected values:
00001276                           428      ;D7, DST REG:   011
00001276                           429      ;D6, DST MODE:  001
00001276                           430      ;D5, SRC MODE:  001
00001276                           431      ;D4, SRC REG:   101
00001276                           432      ;00011001
00001276  3038 1000                433      MOVE.W CUR_OP_CODE,D0     ;Move current OP code into D0     
0000127A  323C 0004                434      MOVE.W  #4,D1             ;Prepare 4 bit shift to D1
0000127E  E368                     435      LSL.W   D1,D0             ;Truncate to find bits 11-6
00001280  E268                     436      LSR.W   D1,D0             ;Reposition bits
00001282  323C 0006                437      MOVE.W  #6,D1             ;Prepare 6 bit shift to D1
00001286  E268                     438      LSR.W   D1,D0             ;Truncate the SRC Reg/Mode bits
00001288  323C 0003                439      MOVE.W  #3,D1             ;Prepare a 3 bit shift to D1 for DST Reg/Mode
0000128C  3C00                     440      MOVE.W  D0,D6             ;Copy over the current 6 bits to D6
0000128E  E268                     441      LSR.W   D1,D0             ;Truncate DST Mode  
00001290  3E00                     442      MOVE.W  D0,D7             ;Move DST Reg to D7
00001292  323C 000D                443      MOVE.W  #13,D1             
00001296  E36E                     444      LSL.W   D1,D6             ;Truncate 13 bits in D6
00001298  E26E                     445      LSR.W   D1,D6             ;Reposition D6
0000129A                           446                                ;D6 now contains the DST Reg
0000129A                           447     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
0000129A  4E75                     448      RTS                     ;Return to stack
0000129C                           449  **********************************************************************************
0000129C                           450  
0000129C                           451  *FIND_TRAILING_BITS_TO_EA
0000129C                           452  **********************************************************************************
0000129C                           453  FIND_TRAILING_BITS_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
0000129C                           454     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
0000129C  3038 1000                455      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
000012A0  323C 0007                456      MOVE.W   #7,D1          ;Prepare 4 bit shift to D1
000012A4  E368                     457      LSL.W    D1,D0          ;Truncate to find the 2 size bits
000012A6  E268                     458      LSR.W    D1,D0          ;Reposition the bits
000012A8  323C 0006                459      MOVE.W   #6,D1          ;Prepare 9 bit shift to D1
000012AC  E268                     460      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
000012AE  3680                     461      MOVE.W   D0,(A3)          ;Move 3 register bits into D4
000012B0                           462     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
000012B0  4E75                     463      RTS                    ;Return to stack
000012B2                           464  **********************************************************************************
000012B2                           465  
000012B2                           466  *PARSE_EA_CONSTANT_BITS
000012B2                           467  **********************************************************************************
000012B2                           468  * Definition: Uses CUR_OP_CODE to shift the proper bits into the global constants
000012B2                           469  * used for EA (MNEMONIC,FIRST_3,SECOND_3,THIRD_3,FOURTH_3. Where MNEMONIC refers
000012B2                           470  * to the first 4 bits of CUR_OP_CODE (15-12), FIRST_3 refers to the first group
000012B2                           471  * of 3 bits (11-9), SECOND_3 refers to the second group of 3 bits (8-6), THIRD_3
000012B2                           472  * refers to the third group of 3 bits (5-3), and FOURTH_3 refers to the fourth
000012B2                           473  * group of 3 bits (2-0). Shifts CUR_OP_CODE bits to initialize constants.
000012B2                           474  *
000012B2                           475  * Registers used: D0,D1
000012B2                           476  *
000012B2                           477  * Precondition: CUR_OP_CODE has been set with an 4 hex instruction set
000012B2                           478  * 
000012B2                           479  * Postcondition: MNEMONIC, FIRST_3, SECOND_3, THIRD_3, FOURTH_3 have been set
000012B2                           480  * to the corresponding values.
000012B2                           481  **********************************************************************************
000012B2                           482  PARSE_EA_CONSTANT_BITS:
000012B2                           483      *MNEMONIC SHIFT
000012B2  3038 1000                484      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D0
000012B6  323C 000C                485      MOVE.W #12,D1               ;Prepare a bit shift of 12 into D1
000012BA  E268                     486      LSR.W D1,D0                 ;Shift 12 bits from D0 right
000012BC  11C0 10A3                487      MOVE.B D0,MNEMONIC          ;Set MNEMONIC to D0
000012C0                           488      *FIRST_3 SHIFT
000012C0  323C 0009                489      MOVE.W #9,D1                ;Prepare a bit shift of 9 into D1
000012C4  3038 1000                490      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012C8  E948                     491      LSL.W #4,D0                 ;Shift out bits 15-12 in D0
000012CA  E848                     492      LSR.W #4,D0                 ;Reposition D0
000012CC  E268                     493      LSR.W  D1,D0                ;Shift D0 9 bits right
000012CE  11C0 10A4                494      MOVE.B D0,FIRST_3           ;Set FIRST_3 to D0
000012D2                           495      *SECOND_3 SHIFT
000012D2  3038 1000                496      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012D6  EF48                     497      LSL.W #7,D0                 ;Shift out bits 15-9 in D0
000012D8  EE48                     498      LSR.W #7,D0                 ;Reposition D0
000012DA  EC48                     499      LSR.W #6,D0                 ;Shift D0 6 bits right
000012DC  11C0 10A5                500      MOVE.B D0,SECOND_3          ;Set SECOND_3 to D0
000012E0                           501      *THIRD_3 SHIFT
000012E0  3038 1000                502      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012E4  E648                     503      LSR.W #3,D0                 ;Shift D0 3 bits right
000012E6  323C 000D                504      MOVE.W #13,D1               ;Prepare a 13 bit shift into D1
000012EA  E368                     505      LSL.W D1,D0                 ;Truncate first 13 bits of D0
000012EC  E268                     506      LSR.W D1,D0                 ;Reposition D0
000012EE  11C0 10A6                507      MOVE.B D0,THIRD_3           ;Set THIRD_3 to D0
000012F2                           508      *FOURTH_3 SHIFT
000012F2  3038 1000                509      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012F6  E368                     510      LSL.W D1,D0                 ;Grab the fourth 3-bit group
000012F8  E268                     511      LSR.W D1,D0                 ;Shift D0 back into position
000012FA  11C0 10A7                512      MOVE.B D0,FOURTH_3          ;Set FOURTH_3 to Do
000012FE  4E75                     513      RTS                         ;Return to stack
00001300                           514  **********************************************************************************
00001300                           515  ********** End of EA Parsing *****************************************************
00001300                           516  
00001300                           517  *******************JMP LABELS ****************************************************
00001300                           518  * Labelling for group codes will be in the following format
00001300                           519  
00001300                           520  * <JMP Labelname>
00001300                           521  ********************************************************************************
00001300                           522  * Checking List Order (If more than one value)
00001300                           523  * Operand1 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
00001300                           524  * Operand2 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
00001300                           525  
00001300                           526  * Where a-b will refer to the bit corresponding bit value in the instruction
00001300                           527  * format, and a specifier will be attached such as Size, EA Mode, SRC Reg, etc
00001300                           528  * to clarify what a specific bit range means.
00001300                           529  * Checking order refers to what order the checks will be performed in. 
00001300                           530  * Any other code outside of the listed ones will be INVALID_OP.
00001300                           531  ********************************************************************************
00001300                           532  
00001300                           533  ********************************************************************************
00001300                           534  * Global Field Descriptions
00001300                           535  * Size Field: Byte = 00 Word = 01 Long = 10
00001300                           536  * EA Mode: Refer to EA Address Modes
00001300                           537  * EA Reg: 3-bit input that is mapped to the respective binary value
00001300                           538  ********************************************************************************
00001300                           539  
00001300                           540  * GROUP_0                      
00001300                           541  ********************************************************************************
00001300                           542  * Description: Checks for the following listed OP codes to be present or not
00001300                           543  *
00001300                           544  * ORI: $00, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001300                           545  * CMPI: $0C, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001300                           546  * Dynamic BCLR: $0, 11-9 Register, 8-6 %110, 5-3 EA Mode, 2-0 EA Reg
00001300                           547  * Static BCLR: $01, 7-6 10, 5-3 EA Mode, 2-0 EA Reg
00001300                           548  *
00001300                           549  * Registers used: D0
00001300                           550  *
00001300                           551  * Precondition: First nibble has been identified as $0
00001300                           552  *
00001300                           553  * Postcondition: Parses proper OP code with a nibble value of $0 or finds an
00001300                           554  * invalid OP code. After a successful parse loading for EA values will be done
00001300                           555  * through a subroutine.
00001300                           556  ********************************************************************************
00001300                           557  C_GROUP_0:
00001300  48E7 C000                558      MOVEM.L D0-D1, -(SP)        ;Backup registers
00001304                           559      
00001304                           560  CHECK_OP_ORI:
00001304  3038 1000                561      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D
00001308  0240 FF00                562      ANDI.W  #$FF00,D0           ;Mask relevant bits to D0
0000130C  B07C 0000                563      CMP.W   #$0000,D0           ;Compare the appropriate masked bits     
00001310  6600 000C                564      BNE     CHECK_OP_CMPI       ;Branch to next comparison if not equal
00001314  4EB9 00001692            565      JSR     PRINT_OP_ORI        ;Print the OP code if equal    
0000131A  6000 0054                566      BRA     CG0_C               ;Finish routine
0000131E                           567  CHECK_OP_CMPI:
0000131E  3038 1000                568      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D
00001322  0240 FF00                569      ANDI.W  #$FF00,D0           ;Mask relevant bits to D0
00001326  B07C 0C00                570      CMP.W   #$0C00,D0           ;Compare the appropriate masked bits   
0000132A  6600 000C                571      BNE     CHECK_OP_S_BCLR     ;Branch to next comparison if not equal       
0000132E  4EB9 000016A0            572      JSR     PRINT_OP_CMPI       ;Print the OP code if equal
00001334  6000 003A                573      BRA     CG0_C               ;Finish routine
00001338                           574  CHECK_OP_S_BCLR:
00001338  3038 1000                575      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D
0000133C  0240 FF00                576      ANDI.W  #$FF00,D0           ;Mask relevant bits to D0
00001340  B07C 0800                577      CMP.W   #$0800,D0           ;Compare the appropriate masked bits
00001344  6600 000C                578      BNE     CHECK_OP_D_BCLR     ;Branch to next comparison if not equal
00001348  4EB9 000016BA            579      JSR     PRINT_OP_S_BCLR     ;Print the OP code if equal
0000134E                           580      ;MOVEM.L (SP)+,D6-D7        ;POP STACK
0000134E  6000 0020                581      BRA     CG0_C               ;Finish routine
00001352                           582  CHECK_OP_D_BCLR:
00001352  3038 1000                583      MOVE.W  CUR_OP_CODE,D0        ;Move current instruction set into D
00001356  0240 0180                584      ANDI.W  #%0000000110000000,D0 ;Do a direct binary bitmask to see which bits are needed
0000135A  B07C 0180                585      CMP.W   #%0000000110000000,D0 ;Compare the expected binary value
0000135E  6600 000C                586      BNE     CG0_F                 ;If not equal this must be an invalid OP code
00001362  4EB9 000016D8            587      JSR     PRINT_OP_D_BCLR       ;Print the OP code if equal
00001368  6000 0006                588      BRA     CG0_C                 ;Finish routine
0000136C                           589  CG0_F:                            ;Checks have been finished, invalid OP code has been found
0000136C  6000 02EA                590      BRA INVALID_OP    
00001370                           591  CG0_C:                            ;Checks have been finished,a valid OP code has been found
00001370  4E75                     592      RTS                           ;Return to stack
00001372                           593      
00001372                           594  * GROUP_1                      
00001372                           595  ********************************************************************************
00001372                           596  * MOVE.B: $1, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
00001372                           597  ********************************************************************************
00001372                           598  C_GROUP_1:
00001372                           599  
00001372                           600  CHECK_OP_MOVE_B:
00001372  3038 1000                601      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0          
00001376  0240 FF00                602      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
0000137A  B07C 1000                603      CMP.W #$1000,D0                 ;Compare the appropriate masked bits 
0000137E  6600 02D8                604      BNE INVALID_OP                  ;Invalid OP code has been found
00001382  6700 0372                605      BEQ PRINT_OP_MOVEB              ;Print the OP code if equal
00001386  4E75                     606      RTS                             ;Return to stack
00001388                           607  * GROUP_2
00001388                           608  ********************************************************************************
00001388                           609  * MOVEA.L: $2, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
00001388                           610  * MOVE.L: $2, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
00001388                           611  ********************************************************************************
00001388                           612  C_GROUP_2:
00001388                           613  
00001388                           614  CHECK_OP_MOVEA_L:
00001388  3038 1000                615      MOVE.W CUR_OP_CODE,D0                  ;Move current instruction set into D0  
0000138C  0240 FF00                616      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001390  B07C 2000                617      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
00001394  6000 0002                618      BRA FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
00001398                           619  
00001398                           620      
00001398                           621  FIND_MOVEA_L_DIFFERENCE:    ;Finds difference between MOVEA and MOVE
00001398  3038 1000                622      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
0000139C  323C 0007                623      MOVE.W   #7,D1          ;Prepare 7 bit shift to D1
000013A0  E368                     624      LSL.W    D1,D0          ;Truncate to find the 3 address mode bits
000013A2  E268                     625      LSR.W    D1,D0          ;Reposition the bits
000013A4  323C 0006                626      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
000013A8  E268                     627      LSR.W    D1,D0          ;Truncate to shift 3 bits to a register
000013AA  3C00                     628      MOVE.W   D0,D6          ;Move 3 address mode bits into D6
000013AC  BC7C 0001                629      CMP.W   #$1,D6          ;Check if the address mode value is MOVEA
000013B0  6600 0006                630      BNE     CHECK_OP_MOVE_L  ;Branch if not equal to check MOVE
000013B4  6700 0356                631      BEQ     PRINT_OP_MOVEA_L ;Print out the MOVEA address 
000013B8                           632      
000013B8                           633  CHECK_OP_MOVE_L:
000013B8  3038 1000                634      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000013BC  0240 FF00                635      ANDI.W #$FF00,D0
000013C0  B07C 2000                636      CMP.W #$2000,D0
000013C4  6600 0292                637      BNE INVALID_OP
000013C8  6700 0358                638      BEQ PRINT_OP_MOVE_L
000013CC  4E75                     639      RTS
000013CE                           640      
000013CE                           641  * GROUP_3
000013CE                           642  ********************************************************************************
000013CE                           643  * MOVEA.W: $3, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
000013CE                           644  * MOVE.W: $3, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000013CE                           645  ********************************************************************************
000013CE                           646  C_GROUP_3:
000013CE                           647  
000013CE                           648  CHECK_OP_MOVEA_W:
000013CE  3038 1000                649      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000013D2  0240 FF00                650      ANDI.W #$FF00,D0
000013D6  B07C 3000                651      CMP.W #$3000,D0
000013DA  6000 0002                652      BRA FIND_MOVEA_W_DIFFERENCE
000013DE                           653  
000013DE                           654      
000013DE                           655  FIND_MOVEA_W_DIFFERENCE:      ;Finds difference between MOVEA and MOVE
000013DE  3038 1000                656      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
000013E2  323C 0007                657      MOVE.W   #7,D1          ;Prepare 7 bit shift to D1
000013E6  E368                     658      LSL.W    D1,D0          ;Truncate to find the 3 address mode bits
000013E8  E268                     659      LSR.W    D1,D0          ;Reposition the bits
000013EA  323C 0006                660      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
000013EE  E268                     661      LSR.W    D1,D0          ;Truncate to shift 3 bits to a register
000013F0  3C00                     662      MOVE.W   D0,D6          ;Move 3 address mode bits into D6
000013F2  BC7C 0001                663      CMP.W   #$1,D6          ;Check if the address mode value is MOVEA
000013F6  6600 0006                664      BNE     CHECK_OP_MOVE_W 
000013FA  6700 033C                665      BEQ     PRINT_OP_MOVEA_W  
000013FE                           666      
000013FE                           667  CHECK_OP_MOVE_W:
000013FE  3038 1000                668      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001402  0240 FF00                669      ANDI.W #$FF00,D0
00001406  B07C 3000                670      CMP.W #$3000,D0
0000140A  6600 024C                671      BNE INVALID_OP
0000140E  6700 033E                672      BEQ PRINT_OP_MOVE_W
00001412  4E75                     673      RTS
00001414                           674  
00001414                           675  * GROUP_4
00001414                           676  ********************************************************************************
00001414                           677  * LEA: $4, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00001414                           678  * JSR: $4E, 7-6 %10, 5-3 EA Mode, 2-0 EA Reg 
00001414                           679  * RTS: $4E75
00001414                           680  * NEG: $44, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001414                           681  * MOVEM: $4, 11 %1, 10 %D, 9-7 %001, 6 S, 5-3 EA Mode, 2-0 EA Reg
00001414                           682  * %D = 0 , Register to Memory, 1 Memory to Register
00001414                           683  ********************************************************************************
00001414                           684  C_GROUP_4:
00001414                           685  CHECK_OP_RTS:
00001414  3038 1000                686      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001418  B07C 4E75                687      CMP.W  #$4E75,D0
0000141C  6600 0006                688      BNE    CHECK_OP_NOP
00001420  6700 035E                689      BEQ    PRINT_OP_RTS
00001424                           690      
00001424                           691  CHECK_OP_NOP:
00001424  3038 1000                692      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001428  B07C 4E71                693      CMP.W  #$4E71,D0
0000142C  6600 0006                694      BNE    CHECK_OP_LEA
00001430  6700 0332                695      BEQ    PRINT_OP_NOP
00001434                           696      
00001434                           697  CHECK_OP_LEA:
00001434  3038 1000                698      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001438  0240 F1C0                699      ANDI.W #$F1C0,D0
0000143C  B07C 41C0                700      CMP.W  #$41C0,D0
00001440  6600 0006                701      BNE    CHECK_OP_JSR
00001444  6700 0348                702      BEQ    PRINT_OP_LEA
00001448                           703      
00001448                           704  CHECK_OP_JSR:
00001448  3038 1000                705      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
0000144C  0240 FFC0                706      ANDI.W #$FFC0,D0
00001450  B07C 4E80                707      CMP.W  #$4E80,D0
00001454  6600 0006                708      BNE    CHECK_OP_NEG
00001458  6700 0318                709      BEQ    PRINT_OP_JSR
0000145C                           710      
0000145C                           711  CHECK_OP_NEG:
0000145C  3038 1000                712      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001460  0240 FF00                713      ANDI.W #$FF00,D0
00001464  B07C 4400                714      CMP.W  #$4400,D0
00001468  6600 0006                715      BNE    CHECK_OP_MOVEM
0000146C  6700 032E                716      BEQ    PRINT_OP_NEG
00001470                           717  **************** COME BACK TO FINISH UP SIZE **********************************
00001470                           718  CHECK_OP_MOVEM:
00001470  3038 1000                719      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001474  0240 FB80                720      ANDI.W #$FB80,D0
00001478  B07C 4880                721      CMP.W  #$4880,D0
0000147C  6600 01DA                722      BNE    INVALID_OP
00001480  6700 0328                723      BEQ    PRINT_OP_MOVEM_W
00001484                           724      
00001484                           725  * GROUP_5
00001484                           726  ********************************************************************************
00001484                           727  * SUBQ: $5, 11-9 DATA, 8 %1, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001484                           728  * Validation checking:
00001484                           729  * Check against, ADDQ, Scc, DBcc
00001484                           730  ********************************************************************************
00001484                           731  C_GROUP_5:
00001484                           732  
00001484                           733  VALID_CHECK_OP_SUBQ:
00001484  3038 1000                734      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001488  0240 F1C0                735      ANDI.W #$F1C0,D0        ;Bitmask check for Scc, DBcc and ADDQ
0000148C  B07C 51C0                736      CMP.W  #$51C0,D0        ;This should be the only valid one for SUBQ
00001490  6700 01C6                737      BEQ    INVALID_OP       ;If not equal it's invalid
00001494  6600 0002                738      BNE    CHECK_OP_SUBQ
00001498                           739  CHECK_OP_SUBQ     
00001498  3038 1000                740      MOVE.W  CUR_OP_CODE,D0  ;Actual check for SUBQ
0000149C  0240 F100                741      ANDI.W #$F100,D0        ;Bitmask check for SUBQ
000014A0  B07C 5100                742      CMP.W  #$5100,D0        ;Compare the proper value
000014A4  6700 0320                743      BEQ    PRINT_OP_SUBQ    ;If equal print it out
000014A8  6600 01AE                744      BNE    INVALID_OP       ;Else the operand is invalid
000014AC                           745      
000014AC                           746  * GROUP_6
000014AC                           747  ********************************************************************************
000014AC                           748  * BRA: $60, 7-0 8-Bit Displacement
000014AC                           749  * Bcc: $6, 11-8 Condition, 7-0 8-Bit Displacement
000014AC                           750  *   Branch: <Condition>   
000014AC                           751  *   BCS: %0101          
000014AC                           752  *   BGE: %1100      
000014AC                           753  *   BLT: %1101  
000014AC                           754  *   BVC: %1000
000014AC                           755  *   
000014AC                           756  *   MOVE.W #%0110010100000000   ;BCS
000014AC                           757  *   MOVE.W #%0110110001010101   ;BGE
000014AC                           758  *   MVE.W #%0110110110101010    ;BLT
000014AC                           759  *   MOVE.W #%0110100001010101   ;BVC
000014AC                           760  ********************************************************************************
000014AC                           761  C_GROUP_6:
000014AC                           762  
000014AC                           763  CHECK_OP_BRA:
000014AC  3038 1000                764      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0       
000014B0  0240 FF00                765      ANDI.W #$FF00,D0
000014B4  B07C 6000                766      CMP.W  #$6000,D0
000014B8  6700 0352                767      BEQ     PRINT_OP_BRA
000014BC  6600 0002                768      BNE     CHECK_OP_BCS
000014C0                           769  
000014C0                           770  CHECK_OP_BCS:
000014C0  3038 1000                771      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000014C4  0240 FF00                772      ANDI.W #$FF00,D0
000014C8  B07C 6500                773      CMP.W  #$6500,D0 
000014CC  6700 0306                774      BEQ    PRINT_OP_BCS
000014D0  6600 0002                775      BNE    CHECK_OP_BGE
000014D4                           776      
000014D4                           777  CHECK_OP_BGE:
000014D4  3038 1000                778      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000014D8  0240 FF00                779      ANDI.W #$FF00,D0
000014DC  B07C 6C00                780      CMP.W  #$6C00,D0 
000014E0  6700 0300                781      BEQ    PRINT_OP_BGE
000014E4  6600 0002                782      BNE    CHECK_OP_BLT
000014E8                           783      
000014E8                           784  CHECK_OP_BLT:
000014E8  3038 1000                785      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000014EC  0240 FF00                786      ANDI.W #$FF00,D0
000014F0  B07C 6D00                787      CMP.W  #$6D00,D0 
000014F4  6700 02FA                788      BEQ    PRINT_OP_BLT
000014F8  6600 0002                789      BNE    CHECK_OP_BVC
000014FC                           790      
000014FC                           791  CHECK_OP_BVC:
000014FC  3038 1000                792      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001500  0240 FF00                793      ANDI.W #$FF00,D0
00001504  B07C 6800                794      CMP.W  #$6800,D0 
00001508  6700 02F4                795      BEQ    PRINT_OP_BVC
0000150C  6600 014A                796      BNE    INVALID_OP
00001510                           797      
00001510                           798      
00001510                           799  *GROUP_7
00001510                           800  ********************************************************************************
00001510                           801  * Currently no OP codes here are supported.
00001510                           802  ********************************************************************************
00001510                           803  C_GROUP_7:
00001510  4EB9 00001658            804      JSR INVALID_OP
00001516                           805  
00001516                           806  * GROUP_8
00001516                           807  ********************************************************************************
00001516                           808  * Supported:
00001516                           809  * DIVS: $8, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00001516                           810  * OR: $80, 7-6 Size, 5-3 EA Mode, 2-0 EA Register
00001516                           811  * Unsupported: DIVU, SBCD
00001516                           812  ********************************************************************************
00001516                           813  C_GROUP_8:
00001516                           814  
00001516                           815  CHECK_OP_DIVS:
00001516  3038 1000                816      MOVE CUR_OP_CODE,D0   ;Move current instruction set into D0
Line 817 ERROR: Comma expected
0000151A                           817      ANDI.W #$F1C0
Line 818 ERROR: Comma expected
0000151A                           818      CMP.W #$81C0
0000151A  6700 02FE                819      BEQ PRINT_OP_DIVS
0000151E  6600 001A                820      BNE CHECK_OP_OR
00001522                           821      
00001522                           822  CHECK_OP_DIVU:
00001522  3038 1000                823      MOVE CUR_OP_CODE,D0   ;Move current instruction set into D0
Line 824 ERROR: Comma expected
00001526                           824      ANDI.W #$F1C0
Line 825 ERROR: Comma expected
00001526                           825      CMP.W #$80C0
00001526  6700 0130                826      BEQ INVALID_OP
0000152A  6600 0002                827      BNE CHECK_OP_SBCD
0000152E                           828      
0000152E                           829  CHECK_OP_SBCD:
0000152E  3038 1000                830      MOVE CUR_OP_CODE,D0   ;Move current instruction set into D0
Line 831 ERROR: Comma expected
00001532                           831      ANDI.W #$F100
Line 832 ERROR: Comma expected
00001532                           832      CMP.W #$8100
00001532  6700 0124                833      BEQ INVALID_OP
00001536  6600 0002                834      BNE CHECK_OP_OR
0000153A                           835      
0000153A                           836  CHECK_OP_OR:              ;At this point only remaining $8 code is OR
0000153A  4EF9 00001828            837      JMP PRINT_OP_OR
00001540                           838  * GROUP_9                      
00001540                           839  ********************************************************************************
00001540                           840  * Supported
00001540                           841  * SUB: $9, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001540                           842  * Unsupported: SUBX, SUBA
00001540                           843  ********************************************************************************
00001540                           844  C_GROUP_9:
00001540                           845  
00001540                           846  CHECK_OP_SUBA:             ;Check SUBA first as it has static bits
00001540  3038 1000                847      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 848 ERROR: Comma expected
00001544                           848      ANDI.W #$F0C0
Line 849 ERROR: Comma expected
00001544                           849      CMP.W #$90C0
00001544  6700 0112                850      BEQ INVALID_OP
00001548  6600 0002                851      BNE CHECK_OP_SUBX
0000154C                           852  
0000154C                           853  CHECK_OP_SUBX:
0000154C  3038 1000                854      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 855 ERROR: Comma expected
00001550                           855      ANDI.W #$F130
Line 856 ERROR: Comma expected
00001550                           856      CMP.W #$9100
00001550  6700 0106                857      BEQ INVALID_OP
00001554  6600 0002                858      BNE CHECK_OP_SUB
00001558                           859  
00001558                           860  CHECK_OP_SUB:           ;At this point only remaining $9 is SUB
00001558  4EF9 00001836            861      JMP PRINT_OP_SUB
0000155E                           862  
0000155E                           863  *GROUP_A
0000155E                           864  ********************************************************************************
0000155E                           865  * Currently no OP codes here are supported. There are no current OP codes here.
0000155E                           866  ********************************************************************************
0000155E                           867  C_GROUP_A:
0000155E  4EB9 00001658            868      JSR INVALID_OP
00001564                           869  
00001564                           870  * GROUP_B                     
00001564                           871  ********************************************************************************
00001564                           872  * Supported:
00001564                           873  * EOR: $B, 11-9 Reg, 8 %1, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001564                           874  * CMP: $B, 11-9 Reg, 8 %0, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001564                           875  * The specific bit difference is listed 
00001564                           876  * Unsupported: CMPM, CMPA
00001564                           877  ********************************************************************************
00001564                           878  C_GROUP_B:
00001564                           879  
00001564                           880  CHECK_OP_CMPM
00001564  3038 1000                881      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 882 ERROR: Comma expected
00001568                           882      ANDI.W #$F138
Line 883 ERROR: Comma expected
00001568                           883      CMP.W  #$B108
00001568  6700 00EE                884      BEQ INVALID_OP
0000156C  6600 0002                885      BNE CHECK_OP_CMPA
00001570                           886      
00001570                           887  CHECK_OP_CMPA:
00001570  3038 1000                888      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 889 ERROR: Comma expected
00001574                           889      ANDI.W #$F0C0
Line 890 ERROR: Comma expected
00001574                           890      CMP.W  #$B0C0
00001574  6700 00E2                891      BEQ INVALID_OP
00001578  6600 0002                892      BNE CHECK_OP_EOR
0000157C                           893      
0000157C                           894  CHECK_OP_EOR:
0000157C  3038 1000                895      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 896 ERROR: Comma expected
00001580                           896      ANDI.W #$F100
Line 897 ERROR: Comma expected
00001580                           897      CMP.W #$B100
00001580  6700 02C2                898      BEQ PRINT_OP_EOR
00001584  6600 0002                899      BNE CHECK_OP_CMP
00001588                           900      
00001588                           901  CHECK_OP_CMP:
00001588  3038 1000                902      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 903 ERROR: Comma expected
0000158C                           903      ANDI.W #$F100
Line 904 ERROR: Comma expected
0000158C                           904      CMP.W #$B000
0000158C  6700 02C4                905      BEQ PRINT_OP_CMP
00001590  6600 00C6                906      BNE INVALID_OP
00001594                           907      
00001594                           908  * GROUP_C                     
00001594                           909  ********************************************************************************
00001594                           910  * Supported:
00001594                           911  * MULS: $C, 11-8 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00001594                           912  * Unsupported: MULU, ABCD, EXG, AND
00001594                           913  * Note: EXG OP mode has to be 01000, 01001, 10001, as such can never be 11 for
00001594                           914  * bits 7-6
00001594                           915  ********************************************************************************
00001594                           916  C_GROUP_C:
00001594                           917  
00001594                           918  CHECK_OP_MULS:
00001594  3038 1000                919      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 920 ERROR: Comma expected
00001598                           920      ANDI.W #$F1C0
Line 921 ERROR: Comma expected
00001598                           921      CMP.W #$C1C0
00001598  6700 02C6                922      BEQ PRINT_OP_MULS
0000159C  6600 00BA                923      BNE INVALID_OP          ; This can only be the supported operand
000015A0                           924  
000015A0                           925  * GROUP_D                     
000015A0                           926  ********************************************************************************
000015A0                           927  * Supported:
000015A0                           928  * ADD: $D, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
000015A0                           929  * ADDA: $D, 11- 9 Reg, 8-6 OPMODE, 7-6 %11, 5-3 EA Mode, 2-0 EA Reg
000015A0                           930  * The specific bit difference is listed out in the OPMODE field.
000015A0                           931  * Unsupported: ADDX
000015A0                           932  ********************************************************************************
000015A0                           933  C_GROUP_D:
000015A0                           934  
000015A0                           935  CHECK_OP_ADDX:
000015A0  3038 1000                936      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 937 ERROR: Comma expected
000015A4                           937      ANDI.W #$F130
Line 938 ERROR: Comma expected
000015A4                           938      CMP.W #$D100
000015A4  6700 00B2                939      BEQ   INVALID_OP
000015A8  6600 0002                940      BNE CHECK_OP_ADDA
000015AC                           941  
000015AC                           942  CHECK_OP_ADDA:
000015AC  3038 1000                943      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 944 ERROR: Comma expected
000015B0                           944      ANDI.W #$F0C0
Line 945 ERROR: Comma expected
000015B0                           945      CMP.W #$D0C0
000015B0  6700 02CA                946      BEQ   PRINT_OP_ADDA
000015B4  6600 0002                947      BNE   CHECK_OP_ADD
000015B8                           948  
000015B8                           949  CHECK_OP_ADD:
000015B8  4EF9 0000186E            950      JMP PRINT_OP_ADD        ;Only remaining OP in $D is ADD
000015BE                           951  * GROUP_E                     
000015BE                           952  ********************************************************************************
000015BE                           953  * Supported:
000015BE                           954  * LSR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
000015BE                           955  * LSL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
000015BE                           956  * ASR: $E, $0, 8 %0, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
000015BE                           957  * ASL: $E, $0, 8 %1, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
000015BE                           958  * ROR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
000015BE                           959  * ROL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
000015BE                           960  * Count/Reg for LSR/LSL refers to shift count, where 0 = shift count of 8, 1-7 
000015BE                           961  * refers to the respective value when i/r = 0. If i/r = 1, data register in the 
000015BE                           962  * Count/Reg field specifies the shift count.  
000015BE                           963  * For directional bit at 8, R = 0, L = 1
000015BE                           964  * Count/Reg for ROR/ROL specifies rotate count instead of shift count.
000015BE                           965  *
000015BE                           966  * Unsupported: ROXL, ROXR
000015BE                           967  ********************************************************************************
000015BE                           968  C_GROUP_E:
000015BE                           969  
000015BE                           970  CHECK_OP_ROXR_NO_ROT:
000015BE  3038 1000                971      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 972 ERROR: Comma expected
000015C2                           972      ANDI.W #$F4C0
Line 973 ERROR: Comma expected
000015C2                           973      CMP.W #$E4C0
000015C2  6700 0094                974      BEQ   INVALID_OP
000015C6  6600 0002                975      BNE   CHECK_OP_ROXL_NO_ROT
000015CA                           976  
000015CA                           977  CHECK_OP_ROXL_NO_ROT:
000015CA  3038 1000                978      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 979 ERROR: Comma expected
000015CE                           979      ANDI.W #$F5C0
Line 980 ERROR: Comma expected
000015CE                           980      CMP.W #$E5C0
000015CE  6700 0088                981      BEQ   INVALID_OP
000015D2  6600 001A                982      BNE   CHECK_OP_LSR_NO_ROT
000015D6                           983  
000015D6                           984  CHECK_OP_ROR_NO_ROT:
000015D6  3038 1000                985      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 986 ERROR: Comma expected
000015DA                           986      ANDI.W #$F7C0
Line 987 ERROR: Comma expected
000015DA                           987      CMP.W #$E6C0
000015DA  6700 02F4                988      BEQ   PRINT_OP_ROR
000015DE  6600 0002                989      BNE   CHECK_OP_ROL_NO_ROT
000015E2                           990      
000015E2                           991  CHECK_OP_ROL_NO_ROT:
000015E2  3038 1000                992      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 993 ERROR: Comma expected
000015E6                           993      ANDI.W #$F7C0
Line 994 ERROR: Comma expected
000015E6                           994      CMP.W #$E7C0
000015E6  6700 02DA                995      BEQ   PRINT_OP_ROL
000015EA  6600 0002                996      BNE   CHECK_OP_LSR_NO_ROT
000015EE                           997   
000015EE                           998  CHECK_OP_LSR_NO_ROT:
000015EE  3038 1000                999      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 1000 ERROR: Comma expected
000015F2                          1000      ANDI.W #$F2C0
Line 1001 ERROR: Comma expected
000015F2                          1001      CMP.W #$E2C0
000015F2  6700 02A4               1002      BEQ   PRINT_OP_LSR
000015F6  6600 0002               1003      BNE   CHECK_OP_LSL_NO_ROT
000015FA                          1004  
000015FA                          1005  CHECK_OP_LSL_NO_ROT:
000015FA  3038 1000               1006      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 1007 ERROR: Comma expected
000015FE                          1007      ANDI.W #$F3C0
Line 1008 ERROR: Comma expected
000015FE                          1008      CMP.W #$E3C0
000015FE  6700 028A               1009      BEQ   PRINT_OP_LSL
00001602  6600 000E               1010      BNE   CHECK_OP_ASL_NO_ROT
00001606                          1011  
00001606                          1012  CHECK_OP_ASR_NO_ROT:
00001606  3038 1000               1013      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 1014 ERROR: Comma expected
0000160A                          1014      ANDI.W #$F1C0
Line 1015 ERROR: Comma expected
0000160A                          1015      CMP.W #$E0C0
0000160A  6700 029A               1016      BEQ   PRINT_OP_ASR
0000160E  6600 0002               1017      BNE   CHECK_OP_ASL_NO_ROT
00001612                          1018  
00001612                          1019  CHECK_OP_ASL_NO_ROT:
00001612  3038 1000               1020      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 1021 ERROR: Comma expected
00001616                          1021      ANDI.W #$F1C0
Line 1022 ERROR: Comma expected
00001616                          1022      CMP.W #$01C0
00001616  6700 029C               1023      BEQ   PRINT_OP_ASL
0000161A  66BA                    1024      BNE   CHECK_OP_ROR_NO_ROT
0000161C                          1025  
0000161C                          1026  
0000161C                          1027  CHECK_OP_ROXR:
0000161C  3038 1000               1028      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 1029 ERROR: Comma expected
00001620                          1029      ANDI.W #$F118
Line 1030 ERROR: Comma expected
00001620                          1030      CMP.W  #$E010
00001620  6700 0036               1031      BEQ    INVALID_OP
00001624  6600 0002               1032      BNE    CHECK_OP_ROXL
00001628                          1033      
00001628                          1034  CHECK_OP_ROXL:
00001628  3038 1000               1035      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 1036 ERROR: Comma expected
0000162C                          1036      ANDI.W #$F118
Line 1037 ERROR: Comma expected
0000162C                          1037      CMP.W  #$E110
0000162C  6700 002A               1038      BEQ    INVALID_OP
00001630  6600 0002               1039      BNE    CHECK_OP_ROR
00001634                          1040  
00001634                          1041  CHECK_OP_ROR:
00001634  3038 1000               1042      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
Line 1043 ERROR: Comma expected
00001638                          1043      ANDI.W #$F1
Line 1044 ERROR: Comma expected
00001638                          1044      CMP.W  #$E110
00001638  6700 001E               1045      BEQ    INVALID_OP
0000163C  66F6                    1046      BNE    CHECK_OP_ROR
0000163E                          1047  
0000163E                          1048  CHECK_OP_ROL:
0000163E  3038 1000               1049      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001642                          1050      
00001642                          1051  CHECK_OP_LSR:
00001642  3038 1000               1052      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001646                          1053  
00001646                          1054  CHECK_OP_LSL:
00001646  3038 1000               1055      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000164A                          1056  
0000164A                          1057  CHECK_OP_ASR:
0000164A  3038 1000               1058      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000164E                          1059  
0000164E                          1060  CHECK_OP_ASL:
0000164E  3038 1000               1061      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001652                          1062  
00001652                          1063  
00001652                          1064  * GROUP_F
00001652                          1065  ********************************************************************************
00001652                          1066  * Currently no OP codes here are supported.
00001652                          1067  ********************************************************************************
00001652                          1068  C_GROUP_F:
00001652  4EB9 00001658           1069      JSR INVALID_OP
00001658                          1070      
00001658                          1071  * INVALID_OP                     
00001658                          1072  ********************************************************************************
00001658                          1073  * Any value that is not covered in the above groups would be considered invalid. 
00001658                          1074  * The following values in the first nibble would also indicate that the 
00001658                          1075  * operand codes is already invalid: $7, $A, $F.
00001658                          1076  * For unsupported OP codes, display DATA $WXYZ   
00001658                          1077  * THIS WILL NEED TO BE CHANGED TO DISPLAY: 1000 DATA $WXYZ IN THE FUTURE
00001658                          1078  ********************************************************************************
00001658                          1079  INVALID_OP:  ; Prints DATA for invalid op
00001658  43F9 000018E6           1080      LEA P_INVALID_OP,A1
0000165E  103C 000D               1081      MOVE.B #13,D0
00001662  4E4F                    1082      TRAP #15
00001664  FFFF FFFF               1083      SIMHALT
00001668                          1084  READ_NEXT_INSTRUCTION: ; Needs to read next instruction set {PLACEHOLDER}
00001668  FFFF FFFF               1085      SIMHALT
0000166C                          1086  
0000166C                          1087  MAKE_VAL_ASCII:
0000166C  0C00 0009               1088      CMPI.B  #$9,D0
00001670  6E00 0008               1089      BGT     LETTER_ASCII
00001674  6F00 000A               1090      BLE     NUMBER_ASCII
00001678  4E75                    1091      RTS
0000167A                          1092      
0000167A                          1093  LETTER_ASCII:
0000167A  0600 0037               1094      ADDI.B #$37,D0 ; A-F
0000167E  4E75                    1095      RTS
00001680                          1096      
00001680                          1097  NUMBER_ASCII
00001680  0600 0030               1098      ADDI.B #$30,D0 ; 0-9
00001684  4E75                    1099      RTS
00001686                          1100      
00001686                          1101  ADD_PERIOD:
00001686  2F00                    1102      MOVE.L D0,-(SP)
00001688  103C 0000               1103      MOVE.B #$0,D0
0000168C  0600 0046               1104      ADDI.B #$46,D0
00001690  201F                    1105      MOVE.L (SP)+,D0
00001692                          1106  ********************** PRINTING ROUTINES **************************************
00001692                          1107  * Description: These routines are to print the associated op codes, by placing
00001692                          1108  * them in the appropriate area to the buffer
00001692                          1109  *
00001692                          1110  * Registers used: A1 for loading, A6 for EA parsing.
00001692                          1111  *
00001692                          1112  * Precondition: The relevant opcode has been identified correctly.
00001692                          1113  *
00001692                          1114  * Postcondition: Prints out the associated opcode to the buffer.
00001692                          1115  *******************************************************************************
00001692                          1116  
00001692                          1117  ****************************** GROUP 0 **************************************** 
00001692                          1118  PRINT_OP_ORI:
00001692  43F9 000018FD           1119      LEA P_OP_ORI,A1
00001698  4EB9 000018DE           1120      JSR PRINT_OP
0000169E  4E75                    1121      RTS
000016A0                          1122  PRINT_OP_CMPI:
000016A0  4EB8 1240               1123      JSR FIND_3_BIT_REG_TO_EA
000016A4  4EB8 122A               1124      JSR FIND_2_BIT_SIZE_TO_EA
000016A8  4EB8 1208               1125      JSR MOVE_LAST_6_BITS_TO_EA
000016AC  43F9 00001901           1126      LEA P_OP_CMPI,A1
000016B2  4EB9 000018DE           1127      JSR PRINT_OP
000016B8  4E75                    1128      RTS
000016BA                          1129  PRINT_OP_S_BCLR:
000016BA  4EB8 1208               1130      JSR MOVE_LAST_6_BITS_TO_EA
000016BE  4EB8 1240               1131      JSR FIND_3_BIT_REG_TO_EA
000016C2  3CBC 0000               1132      MOVE.W #$0,(A6)
000016C6  383C 0000               1133      MOVE.W #%000, D4
000016CA  43F9 00001906           1134      LEA P_OP_S_BCLR,A1
000016D0  4EB9 000018DE           1135      JSR PRINT_OP
000016D6  4E75                    1136      RTS
000016D8                          1137  PRINT_OP_D_BCLR:
000016D8  4EB8 1208               1138      JSR MOVE_LAST_6_BITS_TO_EA
000016DC  4EB8 1240               1139      JSR FIND_3_BIT_REG_TO_EA
000016E0  3CBC 0000               1140      MOVE.W #$0,(A6)
000016E4  383C 0006               1141      MOVE.W #%110, D4
000016E8  43F9 0000190B           1142      LEA P_OP_D_BCLR,A1
000016EE  4EB9 000018DE           1143      JSR PRINT_OP
000016F4  4E75                    1144      RTS
000016F6                          1145  ******************************* END OF GROUP 0 ********************************
000016F6                          1146  
000016F6                          1147  ****************************** GROUP 1 ****************************************    
000016F6                          1148  PRINT_OP_MOVEB:
000016F6  4EB8 1256               1149      JSR MOVE_AND_MOVEA_PARSE_EA
000016FA  3CBC 0001               1150      MOVE.W #$1,(A6)
000016FE  43F9 00001910           1151      LEA P_OP_MOVEB,A1
00001704  4EB9 000018DE           1152      JSR PRINT_OP
0000170A  4E75                    1153      RTS
0000170C                          1154  ******************************* END OF GROUP 1 ********************************
0000170C                          1155      
0000170C                          1156  ****************************** GROUP 2 **************************************** 
0000170C                          1157  PRINT_OP_MOVEA_L:
0000170C  4EB8 1256               1158      JSR MOVE_AND_MOVEA_PARSE_EA
00001710  3CBC 0002               1159      MOVE.W #$2,(A6)
00001714  43F9 00001917           1160      LEA P_OP_MOVEA_L,A1
0000171A                          1161      ;MOVE.L A1,G_BUFFER_PREP
0000171A                          1162      ;MOVE.B (A1)+,D0
0000171A                          1163      ;CMPI.B #$FF,D0
0000171A                          1164      ;BNE MAKE_VAL_ASCII
0000171A                          1165      ;MOVE.W P_OP_MOVEA_L,(A4)+
0000171A  4EB9 000018DE           1166      JSR PRINT_OP
00001720  4E75                    1167      RTS
00001722                          1168  PRINT_OP_MOVE_L:
00001722  4EB8 1256               1169      JSR MOVE_AND_MOVEA_PARSE_EA
00001726  3CBC 0002               1170      MOVE.W #$2,(A6)
0000172A  43F9 0000191F           1171      LEA P_OP_MOVE_L,A1
00001730  4EB9 000018DE           1172      JSR PRINT_OP
00001736  4E75                    1173      RTS
00001738                          1174  ******************************* END OF GROUP 2 ********************************
00001738                          1175      
00001738                          1176  ****************************** GROUP 3 ****************************************    
00001738                          1177  PRINT_OP_MOVEA_W:
00001738  4EB8 1256               1178      JSR MOVE_AND_MOVEA_PARSE_EA
0000173C  3CBC 0003               1179      MOVE.W #$3,(A6)
00001740  43F9 00001926           1180      LEA P_OP_MOVEA_W,A1
00001746  4EB9 000018DE           1181      JSR PRINT_OP
0000174C  4E75                    1182      RTS
0000174E                          1183  PRINT_OP_MOVE_W:
0000174E  4EB8 1256               1184      JSR MOVE_AND_MOVEA_PARSE_EA
00001752  3CBC 0003               1185      MOVE.W #$3,(A6)
00001756  43F9 0000192E           1186      LEA P_OP_MOVE_W,A1
0000175C  4EB9 000018DE           1187      JSR PRINT_OP
00001762  4E75                    1188      RTS
00001764                          1189  ******************************* END OF GROUP 3 ********************************
00001764                          1190  
00001764                          1191  ****************************** GROUP 4 ****************************************
00001764                          1192  PRINT_OP_NOP:
00001764  43F9 0000194D           1193      LEA P_OP_NOP,A1
0000176A  4EB9 000018DE           1194      JSR PRINT_OP
00001770  4E75                    1195      RTS
00001772                          1196  PRINT_OP_JSR:
00001772  43F9 00001949           1197      LEA P_OP_JSR,A1
00001778  4EB9 000018DE           1198      JSR PRINT_OP
0000177E  4E75                    1199      RTS
00001780                          1200  PRINT_OP_RTS:
00001780  43F9 00001951           1201      LEA P_OP_RTS,A1
00001786  4EB9 000018DE           1202      JSR PRINT_OP
0000178C  4E75                    1203      RTS
0000178E                          1204  PRINT_OP_LEA:
0000178E  43F9 00001945           1205      LEA P_OP_LEA,A1
00001794  4EB9 000018DE           1206      JSR PRINT_OP
0000179A  4E75                    1207      RTS
0000179C                          1208  PRINT_OP_NEG:
0000179C  43F9 00001955           1209      LEA P_OP_NEG,A1
000017A2  4EB9 000018DE           1210      JSR PRINT_OP
000017A8  4E75                    1211      RTS
000017AA                          1212  PRINT_OP_MOVEM_W:
000017AA  43F9 00001935           1213      LEA P_OP_MOVEM_W,A1
000017B0  4EB9 000018DE           1214      JSR PRINT_OP
000017B6  4E75                    1215      RTS
000017B8                          1216  PRINT_OP_MOVEM_L:
000017B8  43F9 0000193D           1217      LEA P_OP_MOVEM_L,A1
000017BE  4EB9 000018DE           1218      JSR PRINT_OP
000017C4  4E75                    1219      RTS
000017C6                          1220  ******************************* END OF GROUP 4 ********************************
000017C6                          1221      
000017C6                          1222  ****************************** GROUP 5 ****************************************
000017C6                          1223  PRINT_OP_SUBQ:
000017C6  43F9 00001959           1224      LEA P_OP_SUBQ,A1
000017CC  4EB9 000018DE           1225      JSR PRINT_OP
000017D2  4E75                    1226      RTS
000017D4                          1227  ******************************* END OF GROUP 5 ********************************
000017D4                          1228  
000017D4                          1229  ****************************** GROUP 6 ****************************************
000017D4                          1230  PRINT_OP_BCS:
000017D4  43F9 00001962           1231      LEA P_OP_BCS,A1
000017DA  4EB9 000018DE           1232      JSR PRINT_OP
000017E0  4E75                    1233      RTS
000017E2                          1234  PRINT_OP_BGE:
000017E2  43F9 00001966           1235      LEA P_OP_BGE,A1
000017E8  4EB9 000018DE           1236      JSR PRINT_OP
000017EE  4E75                    1237      RTS
000017F0                          1238  PRINT_OP_BLT:
000017F0  43F9 0000196A           1239      LEA P_OP_BLT,A1
000017F6  4EB9 000018DE           1240      JSR PRINT_OP
000017FC  4E75                    1241      RTS
000017FE                          1242  PRINT_OP_BVC:
000017FE  43F9 0000196E           1243      LEA P_OP_BVC,A1
00001804  4EB9 000018DE           1244      JSR PRINT_OP
0000180A  4E75                    1245      RTS
0000180C                          1246  PRINT_OP_BRA:
0000180C  43F9 0000195E           1247      LEA P_OP_BRA,A1
00001812  4EB9 000018DE           1248      JSR PRINT_OP
00001818  4E75                    1249      RTS
0000181A                          1250  ******************************* END OF GROUP 6 ********************************
0000181A                          1251  
0000181A                          1252  ****************************** GROUP 7 ****************************************
0000181A                          1253  * No currently supported OP codes to print here.
0000181A                          1254  ******************************* END OF GROUP 7 ********************************
0000181A                          1255  
0000181A                          1256  ****************************** GROUP 8 ****************************************
0000181A                          1257  PRINT_OP_DIVS:
0000181A  43F9 00001972           1258      LEA P_OP_DIVS,A1
00001820  4EB9 000018DE           1259      JSR PRINT_OP
00001826  4E75                    1260      RTS
00001828                          1261  PRINT_OP_OR:
00001828  43F9 00001977           1262      LEA P_OP_OR,A1
0000182E  4EB9 000018DE           1263      JSR PRINT_OP
00001834  4E75                    1264      RTS
00001836                          1265  ******************************* END OF GROUP 8 ********************************
00001836                          1266  
00001836                          1267  ****************************** GROUP 9 ****************************************
00001836                          1268  PRINT_OP_SUB:
00001836  43F9 0000197A           1269      LEA P_OP_SUB,A1
0000183C  4EB9 000018DE           1270      JSR PRINT_OP
00001842  4E75                    1271      RTS
00001844                          1272  ******************************* END OF GROUP 9 ********************************
00001844                          1273  
00001844                          1274  ****************************** GROUP A ****************************************
00001844                          1275  * No currently supported OP codes to print here.
00001844                          1276  ******************************* END OF GROUP A ********************************
00001844                          1277  
00001844                          1278  ****************************** GROUP B ****************************************
00001844                          1279  PRINT_OP_EOR:
00001844  43F9 0000197E           1280      LEA P_OP_EOR,A1
0000184A  4EB9 000018DE           1281      JSR PRINT_OP
00001850  4E75                    1282      RTS
00001852                          1283  PRINT_OP_CMP:
00001852  43F9 00001982           1284      LEA P_OP_CMP,A1
00001858  4EB9 000018DE           1285      JSR PRINT_OP
0000185E  4E75                    1286      RTS
00001860                          1287  ******************************* END OF GROUP B ********************************
00001860                          1288  
00001860                          1289  ****************************** GROUP C ****************************************
00001860                          1290  PRINT_OP_MULS:
00001860  43F9 00001986           1291      LEA P_OP_MULS,A1
00001866  4EB9 000018DE           1292      JSR PRINT_OP
0000186C  4E75                    1293      RTS
0000186E                          1294  ******************************* END OF GROUP C ********************************
0000186E                          1295  
0000186E                          1296  ****************************** GROUP D ****************************************
0000186E                          1297  PRINT_OP_ADD:
0000186E  43F9 00001990           1298      LEA P_OP_ADD,A1
00001874  4EB9 000018DE           1299      JSR PRINT_OP
0000187A  4E75                    1300      RTS
0000187C                          1301  PRINT_OP_ADDA:
0000187C  43F9 0000198B           1302      LEA P_OP_ADDA,A1
00001882  4EB9 000018DE           1303      JSR PRINT_OP
00001888  4E75                    1304      RTS
0000188A                          1305  
0000188A                          1306  ******************************* END OF GROUP D ********************************
0000188A                          1307  
0000188A                          1308  ****************************** GROUP E ****************************************
0000188A                          1309  PRINT_OP_LSL:
0000188A  43F9 00001998           1310      LEA P_OP_LSL,A1
00001890  4EB9 000018DE           1311      JSR PRINT_OP
00001896  4E75                    1312      RTS
00001898                          1313  PRINT_OP_LSR:
00001898  43F9 00001994           1314      LEA P_OP_LSR,A1
0000189E  4EB9 000018DE           1315      JSR PRINT_OP
000018A4  4E75                    1316      RTS
000018A6                          1317  PRINT_OP_ASR:
000018A6  43F9 0000199C           1318      LEA P_OP_ASR,A1
000018AC  4EB9 000018DE           1319      JSR PRINT_OP
000018B2  4E75                    1320      RTS
000018B4                          1321  PRINT_OP_ASL:
000018B4  43F9 000019A0           1322      LEA P_OP_ASL,A1
000018BA  4EB9 000018DE           1323      JSR PRINT_OP
000018C0  4E75                    1324      RTS
000018C2                          1325  PRINT_OP_ROL:
000018C2  43F9 000019A8           1326      LEA P_OP_ROL,A1
000018C8  4EB9 000018DE           1327      JSR PRINT_OP
000018CE  4E75                    1328      RTS
000018D0                          1329  PRINT_OP_ROR:
000018D0  43F9 000019A4           1330      LEA P_OP_ROR,A1
000018D6  4EB9 000018DE           1331      JSR PRINT_OP
000018DC  4E75                    1332      RTS
000018DE                          1333  ******************************* END OF GROUP E ********************************
000018DE                          1334  
000018DE                          1335  ****************************** GROUP F ****************************************
000018DE                          1336  * No currently supported OP codes to print here.
000018DE                          1337  ******************************* END OF GROUP F ********************************
000018DE                          1338  
000018DE                          1339  
000018DE                          1340  
000018DE                          1341  PRINT_OP:   ;Prints current op code byte
000018DE                          1342      ;MOVE.W (A4),(A1)       ; NEEDS TO USE G_BUFFER LATER
000018DE  103C 000D               1343      MOVE.B #13,D0
000018E2  4E4F                    1344      TRAP #15
000018E4  4E75                    1345      RTS
000018E6                          1346  ******************* END OF PRINTING ROUTINES **********************************
000018E6                          1347  
000018E6                          1348  ******************* END OF JMP LABELS *****************************************
000018E6                          1349  
000018E6                          1350  ******************* DATA CONSTANT PRINTS **************************************
000018E6                          1351  * Formatting is as follows: P_OP_<OPCODE>, where P = Print, OP = Operation,
000018E6                          1352  * <OPCODE> is any valid operand
000018E6                          1353  
000018E6= 44 41 54 41 00          1354  P_INVALID_OP    DC.B    'DATA',0
000018EB= 46 6F 75 6E 64 20 ...   1355  OP_FOUND        DC.B    'Found OP',0 ; this should be taken out later
000018F4= 2E 42 00                1356  P_SIZE_B        DC.B    '.B',0
000018F7= 2E 57 00                1357  P_SIZE_W        DC.B    '.W',0
000018FA= 2E 4C 00                1358  P_SIZE_L        DC.B    '.L',0
000018FD= 4F 52 49 00             1359  P_OP_ORI        DC.B    'ORI',0
00001901= 43 4D 50 49 00          1360  P_OP_CMPI       DC.B    'CMPI',0
00001906= 42 43 4C 52 00          1361  P_OP_S_BCLR     DC.B    'BCLR',0
0000190B= 42 43 4C 52 00          1362  P_OP_D_BCLR     DC.B    'BCLR',0
00001910= 4D 4F 56 45 2E 42 00    1363  P_OP_MOVEB      DC.B    'MOVE.B',0
00001917= 4D 4F 56 45 41 2E ...   1364  P_OP_MOVEA_L    DC.B    'MOVEA.L',0 
0000191F= 4D 4F 56 45 2E 4C 00    1365  P_OP_MOVE_L     DC.B    'MOVE.L',0
00001926= 4D 4F 56 45 41 2E ...   1366  P_OP_MOVEA_W    DC.B    'MOVEA.W',0
0000192E= 4D 4F 56 45 2E 57 00    1367  P_OP_MOVE_W     DC.B    'MOVE.W',0
00001935= 4D 4F 56 45 4D 2E ...   1368  P_OP_MOVEM_W    DC.B    'MOVEM.W',0
0000193D= 4D 4F 56 45 4D 2E ...   1369  P_OP_MOVEM_L    DC.B    'MOVEM.L',0
00001945= 4C 45 41 00             1370  P_OP_LEA        DC.B    'LEA',0
00001949= 4A 53 52 00             1371  P_OP_JSR        DC.B    'JSR',0
0000194D= 4E 4F 50 00             1372  P_OP_NOP        DC.B    'NOP',0
00001951= 52 54 53 00             1373  P_OP_RTS        DC.B    'RTS',0
00001955= 4E 45 47 00             1374  P_OP_NEG        DC.B    'NEG',0
00001959= 53 55 42 51 00          1375  P_OP_SUBQ       DC.B    'SUBQ',0
0000195E= 42 52 41 00             1376  P_OP_BRA        DC.B    'BRA',0
00001962= 42 43 53 00             1377  P_OP_BCS        DC.B    'BCS',0
00001966= 42 47 45 00             1378  P_OP_BGE        DC.B    'BGE',0
0000196A= 42 4C 54 00             1379  P_OP_BLT        DC.B    'BLT',0
0000196E= 42 56 43 00             1380  P_OP_BVC        DC.B    'BVC',0
00001972= 44 49 56 53 00          1381  P_OP_DIVS       DC.B    'DIVS',0
00001977= 4F 52 00                1382  P_OP_OR         DC.B    'OR',0
0000197A= 53 55 42 00             1383  P_OP_SUB        DC.B    'SUB',0
0000197E= 45 4F 52 00             1384  P_OP_EOR        DC.B    'EOR',0
00001982= 43 4D 50 00             1385  P_OP_CMP        DC.B    'CMP',0
00001986= 4D 55 4C 53 00          1386  P_OP_MULS       DC.B    'MULS',0
0000198B= 41 44 44 41 00          1387  P_OP_ADDA       DC.B    'ADDA',0
00001990= 41 44 44 00             1388  P_OP_ADD        DC.B    'ADD',0
00001994= 4C 53 52 00             1389  P_OP_LSR        DC.B    'LSR',0
00001998= 4C 53 4C 00             1390  P_OP_LSL        DC.B    'LSL',0
0000199C= 41 53 52 00             1391  P_OP_ASR        DC.B    'ASR',0
000019A0= 41 53 4C 00             1392  P_OP_ASL        DC.B    'ASL',0
000019A4= 52 4F 52 00             1393  P_OP_ROR        DC.B    'ROR',0
000019A8= 52 4F 4C 00             1394  P_OP_ROL        DC.B    'ROL',0
000019AC                          1395  ***************** END OF DATA CONSTANT PRINTS ***********************************
000019AC                          1396   
000019AC                          1397  
000019AC                          1398  **
000019AC                          1399  * AddStrToBuffer
000019AC                          1400  **
000019AC                          1401  * Adds the given NULL-terminated string to the specified buffer.
000019AC                          1402  *
000019AC                          1403  * Default buffer length is 80 characters, but can be modified in the argument
000019AC                          1404  * variables.
000019AC                          1405  *
000019AC                          1406  * If the buffer length is exceeded, either due to lack of a NULL character or
000019AC                          1407  * an incorrectly specified length, 1 is returned. Otherwise, 0 is returned to
000019AC                          1408  * indicate success.
000019AC                          1409  *
000019AC                          1410  **
000019AC                          1411  * @param Arg_AddStrToBuffer_String              Pointer to string
000019AC                          1412  * @param Arg_AddStrToBuffer_Buffer              Pointer to buffer
000019AC                          1413  * @param Arg_AddStrToBuffer_BufferLength        Length of buffer (default 80 chars)
000019AC                          1414  * @return Ret_AddStrToBuffer_Success            0 if successful, 1 otherwise.
000019AC                          1415  * @branch _AddStrToBuffer_FindBufferNullLoop    Loop to find NULL in buffer
000019AC                          1416  * @branch _AddStrToBuffer_AddLoop               Loop to add string to buffer
000019AC                          1417  * @branch _AddStrToBuffer_Success               Branch when string successfully added
000019AC                          1418  * @branch _AddStrToBuffer_StringLengthExceeded  Branch when length exceeded (either string or buffer)
000019AC                          1419  * @branch _AddStrToBuffer_End                   End of subroutine
000019AC                          1420  **
000019AC                          1421  Arg_AddStrToBuffer_String           DS.L    1
000019B0                          1422  Arg_AddStrToBuffer_Buffer           DS.L    1
000019B4= 00000050                1423  Arg_AddStrToBuffer_BufferLength     DC.L    80
000019B8                          1424  Ret_AddStrToBuffer_Success          DS.B    1
000019B9                          1425  
000019BA                          1426  AddStrToBuffer:                     DS.W    0
000019BA  48E7 C0C0               1427      MOVEM.L     D0-D1/A0-A1, -(SP)                  * Backup registers to stack
000019BE                          1428  
000019BE  2078 19AC               1429      MOVE.L      Arg_AddStrToBuffer_String, A0       * Load string pointer
000019C2  2278 19B0               1430      MOVE.L      Arg_AddStrToBuffer_Buffer, A1       * Load buffer pointer
000019C6  2038 19B4               1431      MOVE.L      Arg_AddStrToBuffer_BufferLength, D0 * Load buffer length
000019CA  4278 19B8               1432      CLR.W       Ret_AddStrToBuffer_Success          * Clear success bit
000019CE  4281                    1433      CLR.L       D1                                  * Clear loop counter
000019D0                          1434  
000019D0                          1435  _AddStrToBuffer_BufferLoop
000019D0  0C11 0000               1436      CMPI.B      #0, (A1)                            * If buffer char is NULL
000019D4  6700 000E               1437      BEQ         _AddStrToBuffer_AddLoop             * Start adding string to bufer
000019D8                          1438      
000019D8  B280                    1439      CMP.L       D0, D1                              * If counter >= max length
000019DA  6C00 0024               1440      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
000019DE                          1441      
000019DE  5289                    1442      ADDQ.L      #1, A1                              * Go to next character
000019E0  5201                    1443      ADDQ.B      #1, D1                              * Increment counter
000019E2  60EC                    1444      BRA         _AddStrToBuffer_BufferLoop          * Loop back
000019E4                          1445      
000019E4                          1446  _AddStrToBuffer_AddLoop
000019E4  0C10 0000               1447      CMPI.B      #0, (A0)                            * If string char is NULL
000019E8  6700 000E               1448      BEQ         _AddStrToBuffer_Success             * String successfully added
000019EC                          1449      
000019EC  B200                    1450      CMP.B       D0, D1                              * If counter >= max length
000019EE  6C00 0010               1451      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
000019F2                          1452      
000019F2  12D8                    1453      MOVE.B      (A0)+, (A1)+                        * Move string char to buffer char
000019F4  5201                    1454      ADDQ.B      #1, D1                              * Increment counter
000019F6  60EC                    1455      BRA         _AddStrToBuffer_AddLoop             * Loop back
000019F8                          1456  
000019F8                          1457  _AddStrToBuffer_Success
000019F8  12BC 0000               1458      MOVE.B      #0, (A1)                            * Add NULL to end of string
000019FC  6000 0008               1459      BRA         _AddStrToBuffer_End                 * Finish subroutine
00001A00                          1460  
00001A00                          1461  _AddStrToBuffer_LengthExceeded
00001A00  31FC 0001 19B8          1462      MOVE.W      #1, Ret_AddStrToBuffer_Success      * Invalidate success bit
00001A06                          1463  
00001A06                          1464  _AddStrToBuffer_End
00001A06  4CDF 0303               1465      MOVEM.L     (SP)+, D0-D1/A0-A1                  * Restore registers from stack
00001A0A  4E75                    1466      RTS                  
00001A0C                          1467     
00001A0C                          1468      END START

46 errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDSTRTOBUFFER      19BA
ADD_PERIOD          1686
ARG_ADDSTRTOBUFFER_BUFFER  19B0
ARG_ADDSTRTOBUFFER_BUFFERLENGTH  19B4
ARG_ADDSTRTOBUFFER_STRING  19AC
B_BUFFER            1053
CG0_C               1370
CG0_F               136C
CHECK_OP_ADD        15B8
CHECK_OP_ADDA       15AC
CHECK_OP_ADDX       15A0
CHECK_OP_ASL        164E
CHECK_OP_ASL_NO_ROT  1612
CHECK_OP_ASR        164A
CHECK_OP_ASR_NO_ROT  1606
CHECK_OP_BCS        14C0
CHECK_OP_BGE        14D4
CHECK_OP_BLT        14E8
CHECK_OP_BRA        14AC
CHECK_OP_BVC        14FC
CHECK_OP_CMP        1588
CHECK_OP_CMPA       1570
CHECK_OP_CMPI       131E
CHECK_OP_CMPM       1564
CHECK_OP_DIVS       1516
CHECK_OP_DIVU       1522
CHECK_OP_D_BCLR     1352
CHECK_OP_EOR        157C
CHECK_OP_JSR        1448
CHECK_OP_LEA        1434
CHECK_OP_LSL        1646
CHECK_OP_LSL_NO_ROT  15FA
CHECK_OP_LSR        1642
CHECK_OP_LSR_NO_ROT  15EE
CHECK_OP_MOVEA_L    1388
CHECK_OP_MOVEA_W    13CE
CHECK_OP_MOVEM      1470
CHECK_OP_MOVE_B     1372
CHECK_OP_MOVE_L     13B8
CHECK_OP_MOVE_W     13FE
CHECK_OP_MULS       1594
CHECK_OP_NEG        145C
CHECK_OP_NOP        1424
CHECK_OP_OR         153A
CHECK_OP_ORI        1304
CHECK_OP_ROL        163E
CHECK_OP_ROL_NO_ROT  15E2
CHECK_OP_ROR        1634
CHECK_OP_ROR_NO_ROT  15D6
CHECK_OP_ROXL       1628
CHECK_OP_ROXL_NO_ROT  15CA
CHECK_OP_ROXR       161C
CHECK_OP_ROXR_NO_ROT  15BE
CHECK_OP_RTS        1414
CHECK_OP_SBCD       152E
CHECK_OP_SUB        1558
CHECK_OP_SUBA       1540
CHECK_OP_SUBQ       1498
CHECK_OP_SUBX       154C
CHECK_OP_S_BCLR     1338
CUR_OP_CODE         1000
C_GROUP_0           1300
C_GROUP_1           1372
C_GROUP_2           1388
C_GROUP_3           13CE
C_GROUP_4           1414
C_GROUP_5           1484
C_GROUP_6           14AC
C_GROUP_7           1510
C_GROUP_8           1516
C_GROUP_9           1540
C_GROUP_A           155E
C_GROUP_B           1564
C_GROUP_C           1594
C_GROUP_D           15A0
C_GROUP_E           15BE
C_GROUP_F           1652
EA_SIZE             1002
FIND_2_BIT_SIZE_TO_EA  122A
FIND_3_BIT_REG_TO_EA  1240
FIND_MOVEA_L_DIFFERENCE  1398
FIND_MOVEA_W_DIFFERENCE  13DE
FIND_TRAILING_BITS_TO_EA  129C
FIRST_3             10A4
FOURTH_3            10A7
GROUP_0             10E2
GROUP_1             10F4
GROUP_2             1106
GROUP_3             1118
GROUP_4             112A
GROUP_5             113C
GROUP_6             114E
GROUP_7             1160
GROUP_8             1172
GROUP_9             1184
GROUP_A             1196
GROUP_B             11A8
GROUP_C             11BA
GROUP_D             11CC
GROUP_E             11DE
GROUP_F             11F0
G_BUFFER            1003
INVALID_OP          1658
LETTER_ASCII        167A
LOAD_OP_CODE        10CA
MAKE_VAL_ASCII      166C
MNEMONIC            10A3
MOVE_AND_MOVEA_PARSE_EA  1256
MOVE_LAST_6_BITS_TO_EA  1208
NUMBER_ASCII        1680
OP_FOUND            18EB
OP_JSR_DONE         11FE
OP_JSR_ROUTINE      10DA
PARSE_EA_CONSTANT_BITS  12B2
PRINT_OP            18DE
PRINT_OP_ADD        186E
PRINT_OP_ADDA       187C
PRINT_OP_ASL        18B4
PRINT_OP_ASR        18A6
PRINT_OP_BCS        17D4
PRINT_OP_BGE        17E2
PRINT_OP_BLT        17F0
PRINT_OP_BRA        180C
PRINT_OP_BVC        17FE
PRINT_OP_CMP        1852
PRINT_OP_CMPI       16A0
PRINT_OP_DIVS       181A
PRINT_OP_D_BCLR     16D8
PRINT_OP_EOR        1844
PRINT_OP_JSR        1772
PRINT_OP_LEA        178E
PRINT_OP_LSL        188A
PRINT_OP_LSR        1898
PRINT_OP_MOVEA_L    170C
PRINT_OP_MOVEA_W    1738
PRINT_OP_MOVEB      16F6
PRINT_OP_MOVEM_L    17B8
PRINT_OP_MOVEM_W    17AA
PRINT_OP_MOVE_L     1722
PRINT_OP_MOVE_W     174E
PRINT_OP_MULS       1860
PRINT_OP_NEG        179C
PRINT_OP_NOP        1764
PRINT_OP_OR         1828
PRINT_OP_ORI        1692
PRINT_OP_ROL        18C2
PRINT_OP_ROR        18D0
PRINT_OP_RTS        1780
PRINT_OP_SUB        1836
PRINT_OP_SUBQ       17C6
PRINT_OP_S_BCLR     16BA
P_INVALID_OP        18E6
P_OP_ADD            1990
P_OP_ADDA           198B
P_OP_ASL            19A0
P_OP_ASR            199C
P_OP_BCS            1962
P_OP_BGE            1966
P_OP_BLT            196A
P_OP_BRA            195E
P_OP_BVC            196E
P_OP_CMP            1982
P_OP_CMPI           1901
P_OP_DIVS           1972
P_OP_D_BCLR         190B
P_OP_EOR            197E
P_OP_JSR            1949
P_OP_LEA            1945
P_OP_LSL            1998
P_OP_LSR            1994
P_OP_MOVEA_L        1917
P_OP_MOVEA_L_A_L    10B4
P_OP_MOVEA_L_T      10A8
P_OP_MOVEA_W        1926
P_OP_MOVEB          1910
P_OP_MOVEM_L        193D
P_OP_MOVEM_W        1935
P_OP_MOVE_L         191F
P_OP_MOVE_W         192E
P_OP_MULS           1986
P_OP_NEG            1955
P_OP_NOP            194D
P_OP_OR             1977
P_OP_ORI            18FD
P_OP_ROL            19A8
P_OP_ROR            19A4
P_OP_RTS            1951
P_OP_SUB            197A
P_OP_SUBQ           1959
P_OP_S_BCLR         1906
P_SIZE_B            18F4
P_SIZE_L            18FA
P_SIZE_W            18F7
READ_NEXT_INSTRUCTION  1668
RET_ADDSTRTOBUFFER_SUCCESS  19B8
SECOND_3            10A5
START               10C0
THIRD_3             10A6
VALID_CHECK_OP_SUBQ  1484
_ADDSTRTOBUFFER_ADDLOOP  19E4
_ADDSTRTOBUFFER_BUFFERLOOP  19D0
_ADDSTRTOBUFFER_END  1A06
_ADDSTRTOBUFFER_LENGTHEXCEEDED  1A00
_ADDSTRTOBUFFER_SUCCESS  19F8
