000010BE Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/13/2019 8:16:10 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OP Code routines for Disassembler
00000000                             3  * Written by : Daniel Yan
00000000                             4  * Date       : 2/28/2019, Updated 3/12/2019
00000000                             5  
00000000                             6  * Description: Disassembler routines to identify any valid
00000000                             7  * OP code dependent on current supported list.
00000000                             8  *------------------------------------------------------------
00001000                             9    ORG $1000 ; Start at Address $1000
00001000                            10  CUR_OP_CODE DS.W 1  ; Current OP Code Word
00001002                            11  IS_VALID    DS.B 1  ; Tells if the current OP code is valid or not
00001003                            12  EA_SIZE     DS.B 1
00001004                            13  G_BUFFER    DS.B 80
00001054                            14  B_BUFFER    DS.B 80
000010A4                            15  MNEMONIC    DS.B 1
000010A5                            16  FIRST_3     DS.B 1
000010A6                            17  SECOND_3    DS.B 1
000010A7                            18  THIRD_3     DS.B 1
000010A8                            19  FOURTH_3    DS.B 1
000010A9                            20  
000010AA= 4D4F5645 412E4C00 ...     21  P_OP_MOVEA_L_T  DC.L    'MOVEA.L',0
000010B6= 412E4C00 00000000         22  P_OP_MOVEA_L_A_L DC.L   'A.L',0
000010BE                            23      
000010BE                            24  
000010BE                            25  START
000010BE  49F8 1004                 26      LEA G_BUFFER,A4
000010C2  18BC 0000                 27      MOVE.B #0, (A4)
000010C6                            28      
000010C6                            29      ;MOVE.L (A5)+, D0
000010C6                            30  ************** BUFFER PRINTING/LOADING EXAMPLES *************************************
000010C6                            31      ; Load the message onto A4
000010C6                            32      ;MOVE.L #P_OP_MOVEA_L_T, Arg_AddStrToBuffer_String
000010C6                            33      ;MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer 
000010C6                            34      ;JSR AddStrToBuffer
000010C6                            35      ;LEA G_BUFFER, A4   ; Load the value of the message onto the G_BUFFER
000010C6                            36      ;MOVE.L P_OP_MOVEA_L_T,(A4)+
000010C6                            37      ;MOVE.L P_OP_MOVEA_L_A_L,(A4)+
000010C6                            38      
000010C6                            39  ***************************** Input Tests ********************************************
000010C6                            40      ***GROUP 0 tests**** SUPPORTED: ORI, BCLR (static, dynamic), CMPI
000010C6                            41      ;MOVE.W #%0000000000111100,CUR_OP_CODE      ;ORI TO CCR             SHOULD FAIL
000010C6                            42      ;MOVE.W #%0000000001111100,CUR_OP_CODE      ;ORI TO SR              SHOULD FAIL
000010C6                            43      ;MOVE.W #%0000000010000101,CUR_OP_CODE      ;ORI.W D5               SHOULD PASS
000010C6                            44      ;MOVE.W #%0000001001111100,CUR_OP_CODE      ;ANDI TO CCR            SHOULD FAIL
000010C6                            45      ;MOVE.W #%0000001001111100,CUR_OP_CODE      ;ANDI TO SR             SHOULD FAIL
000010C6                            46      ;MOVE.W #%0000001010000101,CUR_OP_CODE      ;ANDI.W D5              SHOULD FAIL
000010C6                            47      ;MOVE.W #%0000010010000101,CUR_OP_CODE      ;SUBI.W D5              SHOULD FAIL
000010C6                            48      ;MOVE.W #%0000011010000101,CUR_OP_CODE      ;ADDI.W D5              SHOULD FAIL
000010C6                            49      ;MOVE.W #%0000101000111100,CUR_OP_CODE      ;EORI TO CCR            SHOULD FAIL
000010C6                            50      ;MOVE.W #%0000101001111100,CUR_OP_CODE      ;EORI TO SR             SHOULD FAIL
000010C6                            51      ;MOVE.W #%0000101010000101,CUR_OP_CODE      ;EORI.W D5              SHOULD FAIL
000010C6                            52      ;MOVE.W #%0000110010000101,CUR_OP_CODE      ;CMPI.L D5              SHOULD PASS
000010C6                            53      ;MOVE.W #%0000100000000101,CUR_OP_CODE      ;STATIC BTST.B D5       SHOULD FAIL
000010C6                            54      ;MOVE.W #%0000100001000101,CUR_OP_CODE      ;STATIC BCHG.B D5       SHOULD FAIL
000010C6                            55      ;MOVE.W #%0000100010000101,CUR_OP_CODE      ;STATIC BCLR D5         SHOULD PASS
000010C6                            56      ;MOVE.W #%0000100011000101,CUR_OP_CODE      ;STATIC BSET.B D5       SHOULD FAIL
000010C6                            57      ;MOVE.W #%0000111100000101,CUR_OP_CODE      ;DYNAMIC BTST.B D7,D5   SHOULD FAIL
000010C6                            58      ;MOVE.W #%0000111101000101,CUR_OP_CODE      ;DYNAMIC BCHG.B,D7,D5   SHOULD FAIL
000010C6                            59      ;MOVE.W #%0000101110000111,CUR_OP_CODE      ;DYNAMIC BCLR.B D7,D5   SHOULD PASS
000010C6                            60      ;MOVE.W #%0000111111000101,CUR_OP_CODE      ;DYNAMIC BSET.B D7,D5   SHOULD FAIL
000010C6                            61      ;MOVE.W #%0000111111001101,CUR_OP_CODE      ;MOVEP.L MEM TO REG, A5 SHOULD FAIL, MADE A SPECIAL CASE FOR DYNAMIC BSET BIT SHIFTING
000010C6                            62          
000010C6                            63      ***GROUP 1 tests**** SUPPORTED: MOVE.B
000010C6                            64      ;MOVE.W #%0001101000000111,CUR_OP_CODE       ;MOVE.B D5,D7           SHOULD PASS
000010C6                            65      
000010C6                            66      ***GROUP 2 tests**** SUPPORTED: MOVEA.L, MOVE.L
000010C6                            67      ;MOVE.W #%0010101000000111,CUR_OP_CODE       ;MOVE.L D5,D7           SHOULD PASS
000010C6                            68      ;MOVE.W #%0010101001000111,CUR_OP_CODE       ;MOVEA.L D5,D7          SHOULD PASS
000010C6                            69          
000010C6                            70      ***GROUP 3 tests**** SUPPORTED: MOVEA.W, MOVE.W
000010C6                            71      ;MOVE.W #%0011101000000111,CUR_OP_CODE       ;MOVE.W D5,D7           SHOULD PASS
000010C6                            72      ;MOVE.W #%0011101001000111,CUR_OP_CODE       ;MOVEA.W D5,D7          SHOULD PASS
000010C6                            73      
000010C6                            74      ****GROUP 4 tests**** SUPPORTED: LEA, JSR, RTS, NEG, MOVEM  
000010C6                            75      ;MOVE.W #%0100000011000101,CUR_OP_CODE       ;MOVE_FROM_SR           SHOULD FAIL
000010C6                            76      ;MOVE.W #%0100010011000101,CUR_OP_CODE       ;MOVE_TO_CCR            SHOULD FAIL
000010C6                            77      ;MOVE.W #%0100011011000101,CUR_OP_CODE       ;MOVE_TO_SR             SHOULD FAIL
000010C6                            78      ;MOVE.W #%0100000010000101,CUR_OP_CODE       ;NEGX                   SHOULD FAIL
000010C6                            79      ;MOVE.W #%0100001010000101,CUR_OP_CODE       ;CLR                    SHOULD FAIL
000010C6                            80      ;MOVE.W #%0100010001000101,CUR_OP_CODE       ;NEG                    SHOULD PASS
000010C6                            81      ;MOVE.W #%0100011010000101,CUR_OP_CODE       ;NOT                    SHOULD FAIL
000010C6                            82      ;MOVE.W #%0100100011000101,CUR_OP_CODE       ;EXT                    SHOULD FAIL
000010C6                            83      ;MOVE.W #%0100100000000101,CUR_OP_CODE       ;NBCD                   SHOULD FAIL
000010C6                            84      ;MOVE.W #%0100100001000101,CUR_OP_CODE       ;SWAP                   SHOULD FAIL
000010C6                            85      ;MOVE.W #%0100100001000101,CUR_OP_CODE       ;PEA                    SHOULD FAIL
000010C6                            86      ;MOVE.W #%0100101011111100,CUR_OP_CODE       ;ILLEGAL                SHOULD FAIL
000010C6                            87      ;MOVE.W #%0100101011000101,CUR_OP_CODE       ;TAS                    SHOULD FAIL
000010C6                            88      ;MOVE.W #%0100101010000101,CUR_OP_CODE       ;TST                    SHOULD FAIL
000010C6                            89      ;MOVE.W #%0100111001000111,CUR_OP_CODE       ;TRAP                   SHOULD FAIL
000010C6                            90      ;MOVE.W #%0100111001010101,CUR_OP_CODE       ;LINK                   SHOULD FAIL
000010C6                            91      ;MOVE.W #%0100111001011101,CUR_OP_CODE       ;UNLK                   SHOULD FAIL
000010C6                            92      ;MOVE.W #%0100111001101101,CUR_OP_CODE       ;MOVE_USP               SHOULD FAIL
000010C6                            93      ;MOVE.W #%0100111001110000,CUR_OP_CODE       ;RESET                  SHOULD FAIL
000010C6                            94      ;MOVE.W #%0100111001110001,CUR_OP_CODE       ;NOP                    SHOULD FAIL
000010C6                            95      ;MOVE.W #%0100111001110010,CUR_OP_CODE       ;STOP                   SHOULD FAIL
000010C6                            96      ;MOVE.W #%0100111001110011,CUR_OP_CODE       ;RTE                    SHOULD FAIL
000010C6                            97      ;MOVE.W #%0100111001110101,CUR_OP_CODE       ;RTS                    SHOULD PASS
000010C6                            98      ;MOVE.W #%0100111001110110,CUR_OP_CODE       ;TRAPV                  SHOULD FAIL
000010C6                            99      ;MOVE.W #%0100111001110111,CUR_OP_CODE       ;RTR                    SHOULD FAIL
000010C6                           100      ;MOVE.W #%0100111010000101,CUR_OP_CODE       ;JSR                    SHOULD PASS
000010C6                           101      ;MOVE.W #%0100111011000101,CUR_OP_CODE       ;JMP                    SHOULD FAIL
000010C6                           102      ;MOVE.W #$488E,CUR_OP_CODE                   ;MOVEM.W Reg to Mem,A6  SHOULD PASS
000010C6                           103      ;MOVE.W #$4C8E,CUR_OP_CODE                   ;MOVEM.W Mem to Reg,A6  SHOULD PASS
000010C6                           104      ;MOVE.W #$43CC,CUR_OP_CODE                   ;LEA A1,A6              SHOULD PASS
000010C6                           105      ;MOVE.W #%0100000110000101,CUR_OP_CODE       ;CHK                    SHOULD FAIL
000010C6                           106      ;MOVE.W #$4E75,CUR_OP_CODE                   ;RTS                    SHOULD PASS
000010C6                           107      ;MOVE.W #$4E71,CUR_OP_CODE                   ;NOP                    SHOULD FAIL
000010C6                           108      ;MOVE.W #$4415,CUR_OP_CODE                   ;NEG.L D5               SHOULD PASS
000010C6                           109     
000010C6                           110      *****GROUP 5 TESTS**** SUPPORTED: SUBQ
000010C6                           111      ;MOVE.W #%0101110010000101,CUR_OP_CODE        ;ADDQ                  SHOULD FAIL
000010C6                           112      ;MOVE.W #%0101110110000101,CUR_OP_CODE        ;SUBQ                  SHOULD PASS
000010C6                           113      ;MOVE.W #%0101101011000101,CUR_OP_CODE        ;Scc (SPL)             SHOULD FAIL
000010C6                           114      ;MOVE.W #%0101101011001101,CUR_OP_CODE         ;DBcc (DCPL)          SHOULD FAIL
000010C6                           115         
000010C6                           116      *****GROUP 6 TESTS********* SUPPORTED: BCS,BGE,BLT,BVC
000010C6                           117      ; DISPLACEMENT, $00 is 16 bits, $FF is 32 bits
000010C6                           118      ; DISPLACEMENT = Last 8 bits
000010C6                           119      ;MOVE.W #%0110000001010101,CUR_OP_CODE   ;BRA                        SHOULD PASS
000010C6                           120      ;MOVE.W #%0110000110101010,CUR_OP_CODE   ;BSR                        SHOULD FAIL
000010C6                           121      ;MOVE.W #%0110010100000001,CUR_OP_CODE   ;BCS                        SHOULD PASS
000010C6                           122      ;MOVE.W #%0110110001010100,CUR_OP_CODE   ;BGE                        SHOULD PASS
000010C6                           123      ;MOVE.W #%0110110110101010,CUR_OP_CODE   ;BLT                        SHOULD PASS
000010C6                           124      ;MOVE.W #%0110100001010100,CUR_OP_CODE   ;BVC                        SHOULD PASS
000010C6                           125      
000010C6                           126      *****GROUP 7 TESTS********** NONE SUPPORTED
000010C6                           127      ;MOVE.W #%0111101011110000,CUR_OP_CODE   ;MOVEQ                      SHOULD FAIL
000010C6                           128      
000010C6                           129      *****GROUP 8 TESTS********** SUPPORTED: DIVS, OR
000010C6                           130      ;MOVE.W #%1000101011000101,CUR_OP_CODE    ;DIVU                      SHOULD FAIL
000010C6                           131      ;MOVE.W #%1000101111000110,CUR_OP_CODE    ;DIVS                      SHOULD PASS
000010C6                           132      ;MOVE.W #%1000101100001111,CUR_OP_CODE    ;SBCD                      SHOULD FAIL
000010C6                           133      ;MOVE.W #%1000110101000101,CUR_OP_CODE    ;OR                        SHOULD PASS
000010C6                           134              
000010C6                           135      *****GROUP 9 TESTS********** SUPPORTED: SUB
000010C6                           136      ;MOVE.W #%1001101100000101,CUR_OP_CODE    ;SUB                       SHOULD PASS
000010C6                           137      ;MOVE.W #%1001000110001101,CUR_OP_CODE    ;SUBX                      SHOULD FAIL
000010C6                           138      ;MOVE.W #%1001101011001101,CUR_OP_CODE    ;SUBA                      SHOULD FAIL
000010C6                           139      
000010C6                           140      *****GROUP A TESTS********** NONE SUPPORTED
000010C6                           141      
000010C6                           142      *****GROUP B TESTS********** SUPPORTED: EOR, CMP
000010C6                           143      *MOVE.W #%1011101101000110,CUR_OP_CODE    ;EOR                       SHOULD PASS
000010C6                           144      *MOVE.W #%1011110101001101,CUR_OP_CODE    ;CMPM                      SHOULD FAIL
000010C6                           145      *MOVE.W #%1011010001000101,CUR_OP_CODE    ;CMP                       SHOULD PASS
000010C6                           146      *MOVE.W #%1011110011000101,CUR_OP_CODE    ;CMPA                      SHOULD FAIL
000010C6                           147      
000010C6                           148      *****GROUP C TESTS********** SUPPORTED: MULS
000010C6                           149      ;MOVE.W #%1100101011000110,CUR_OP_CODE    ;MULU                     SHOULD FAIL
000010C6                           150      ;MOVE.W #%1100101111000101,CUR_OP_CODE    ;MULS                     SHOULD PASS
000010C6                           151      ;MOVE.W #%1100101100000101,CUR_OP_CODE    ;ABCD                     SHOULD FAIL
000010C6                           152      ;MOVE.W #%1100101110001110,CUR_OP_CODE    ;EXG                      SHOULD FAIL
000010C6                           153      ;MOVE.W #%1100101001000101,CUR_OP_CODE    ;AND                      SHOULD FAIL   
000010C6                           154      
000010C6                           155      *****GROUP D TESTS********** SUPPORTED: ADD, ADDA
000010C6                           156      ;MOVE.W #%1101101101000101,CUR_OP_CODE    ;ADDX                     SHOULD FAIL
000010C6                           157      ;MOVE.W #%1101101011001101,CUR_OP_CODE    ;ADDA                     SHOULD FAIL
000010C6                           158      ;MOVE.W #%1101101001001101,CUR_OP_CODE    ;ADD                      SHOULD PASS
000010C6                           159      
000010C6                           160      *****GROUP E TESTS********** SUPPORTED: LSX, ASX, ROX
000010C6                           161      ;MOVE.W #%1110000011000101,CUR_OP_CODE    ;ASR NO_ROT               SHOULD PASS
000010C6                           162      ;MOVE.W #%1110000111000101,CUR_OP_CODE    ;ASL NO_ROT               SHOULD PASS
000010C6                           163      ;MOVE.W #%1110001011000101,CUR_OP_CODE    ;LSR NO_ROT               SHOULD PASS
000010C6                           164      ;MOVE.W #%1110001111000101,CUR_OP_CODE    ;LSL NO_ROT               SHOULD PASS
000010C6  31FC E4C5 1000           165      MOVE.W #%1110010011000101,CUR_OP_CODE    ;ROXR NO_ROT              SHOULD FAIL
000010CC                           166      ;MOVE.W #%1110010111000101,CUR_OP_CODE    ;ROXL NO_ROT              SHOULD FAIL
000010CC                           167      ;MOVE.W #%1110011011000101,CUR_OP_CODE    ;ROR NO_ROT               SHOULD PASS
000010CC                           168      ;MOVE.W #%1110011111000101,CUR_OP_CODE    ;ROL NO_ROT               SHOULD PASS    
000010CC                           169      
000010CC                           170      ;MOVE.W #%1110000001000101,CUR_OP_CODE    ;ASR                      SHOULD PASS
000010CC                           171      ;MOVE.W #%1110000101000101,CUR_OP_CODE    ;ASL                      SHOULD PASS
000010CC                           172      ;MOVE.W #%1110001001001101,CUR_OP_CODE    ;LSR                      SHOULD PASS
000010CC                           173      ;MOVE.W #%1110001101001101,CUR_OP_CODE    ;LSL                      SHOULD PASS
000010CC                           174      ;MOVE.W #%1110010001010101,CUR_OP_CODE    ;ROXR                     SHOULD FAIL
000010CC                           175      ;MOVE.W #%1110010101010101,CUR_OP_CODE    ;ROXL                     SHOULD FAIL
000010CC                           176      ;MOVE.W #%1110011001011101,CUR_OP_CODE    ;ROR                      SHOULD PASS
000010CC                           177      ;MOVE.W #%1110011101011101,CUR_OP_CODE    ;ROL                      SHOULD PASS    
000010CC                           178          
000010CC                           179      
000010CC                           180      *****GROUP F TESTS********** NONE SUPPORTED
000010CC                           181      
000010CC                           182      
000010CC                           183      
000010CC                           184  ************************************************************************************
000010CC                           185  * PRINTING BUFFER FUNCTION HAS BEEN FINISHED
000010CC                           186  *-----------------------------------------------------------
000010CC                           187  *First Nibble Values (15-12)
000010CC                           188  *Value                  Operations
000010CC                           189  *$0                     GROUP_0: ORI,BCLR (static and dynamic),CMPI --- DONE, need validation testing
000010CC                           190  *$1                     GROUP_1: MOVE.B                             --- DONE, need validation testing
000010CC                           191  *$2                     GROUP_2: MOVE.L, MOVEA.L                    --- DONE, need validation testing
000010CC                           192  *$3                     GROUP_3: MOVE.W, MOVEA.W                    --- Partial, needs trailing bits
000010CC                           193  *$4                     GROUP_4: LEA,JSR,RTS,NEG,MOVEM              --- Partial, needs SIZE print for NEG, MOVE
000010CC                           194  *$5                     GROUP_5: SUBQ                               --- Partial, needs SIZE pri
000010CC                           195  *$6                     GROUP_6: Bcc(BCS,BGE,BLT,BVC), BRA          --- Not started
000010CC                           196  *$7                     GROUP_7: INVALID_OP                         --- DONE
000010CC                           197  *$8                     GROUP_8: DIVS, OR                           --- Not started
000010CC                           198  *$9                     GROUP_9: SUB                                --- Not started
000010CC                           199  *$A                     GROUP_A: INVALID_OP                         --- DONE
000010CC                           200  *$B                     GROUP_B: EOR, CMP                           --- Not started
000010CC                           201  *$C                     GROUP_C: MULS                               --- Not started
000010CC                           202  *$D                     GROUP_D: ADD, ADDA                          --- Not started
000010CC                           203  *$E                     GROUP_E: LSR, LSL, ASR, ASL, ROL, ROR       --- Not started
000010CC                           204  *$F                     GROUP_F: INVALID_OP                         --- DONE
000010CC                           205  
000010CC                           206  
000010CC                           207  * OP_JSR_Routine
000010CC                           208  **********************************************************************************
000010CC                           209  * Description: Catalog all supported OP codes into groupings based on their hex
000010CC                           210  * values. Sort the supported OP codes by looking at the first nibble for their
000010CC                           211  * grouping value. Call underlying subroutines for further identification of the
000010CC                           212  * op code.
000010CC                           213  *
000010CC                           214  * Registers used: A6,D0,D1 
000010CC                           215  *
000010CC                           216  * Precondition: Instruction set (size Word) has been loaded in the appropriate
000010CC                           217  * address to be parsed and read.
000010CC                           218  
000010CC                           219  * Postcondition: OP code has been identified as either valid or invalid. If it is
000010CC                           220  * valid, it is stored into A6 and EA parsing methods are called to pass needed
000010CC                           221  * information to EA. If invalid, DATA output will be utilized to indicate so.
000010CC                           222  **********************************************************************************
000010CC                           223  * These valid operand codes refer to the basic supported operand codes
000010CC                           224  * Groups refer to the first nibble value that is supported by the operand
000010CC                           225  LOAD_OP_CODE:
000010CC  3038 1000                226      MOVE.W CUR_OP_CODE,D0
000010D0  11FC 0001 1002           227      MOVE.B #1,IS_VALID
000010D6  4EB9 000010DC            228      JSR OP_JSR_Routine      ;Use the JSR routine to identify the op code
000010DC                           229  OP_JSR_Routine:
000010DC  48E7 C000                230      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
000010E0  720C                     231      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
000010E2  E2A8                     232      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
000010E4                           233  
000010E4                           234  GROUP_0:                ;$0| ORI, BCLR (static and dynamic), CMPI                  
000010E4  B03C 0000                235      CMP.B   #$0,D0                 ;Compare first nibble
000010E8  6600 000C                236      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
000010EC  4EB9 00001302            237      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
000010F2  6000 010C                238      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000010F6                           239      
000010F6                           240  GROUP_1:                ;$1| MOVE.B
000010F6  B03C 0001                241      CMP.B   #$1,D0                 ;Compare first nibble
000010FA  6600 000C                242      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
000010FE  4EB9 000014D0            243      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
00001104  6000 00FA                244      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001108                           245  
00001108                           246  GROUP_2:                ;$2| MOVE.L, MOVEA.L
00001108  B03C 0002                247      CMP.B   #$2,D0                 ;Compare first nibble
0000110C  6600 000C                248      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
00001110  4EB9 000014FA            249      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
00001116  6000 00E8                250      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000111A                           251  
0000111A                           252  GROUP_3:                ;$3| MOVE.W, MOVEA.W
0000111A  B03C 0003                253      CMP.B   #$3,D0                 ;Compare first nibble
0000111E  6600 000C                254      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
00001122  4EB9 0000155C            255      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
00001128  6000 00D6                256      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000112C                           257  
0000112C                           258  GROUP_4:                ;$4| LEA, JSR, RTS, NEG, MOVEM
0000112C  B03C 0004                259      CMP.B   #$4,D0                 ;Compare first nibble
00001130  6600 000C                260      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
00001134  4EB9 000015BE            261      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
0000113A  6000 00C4                262      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000113E                           263  
0000113E                           264  
0000113E                           265  GROUP_5:                ;$5| SUBQ
0000113E  B03C 0005                266      CMP.B   #$5,D0                 ;Compare first nibble
00001142  6600 000C                267      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
00001146  4EB9 0000183C            268      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
0000114C  6000 00B2                269      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001150                           270  
00001150                           271  
00001150                           272  GROUP_6:                ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
00001150  B03C 0006                273      CMP.B   #$6,D0                 ;Compare first nibble
00001154  6600 000C                274      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
00001158  4EB9 000018A2            275      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
0000115E  6000 00A0                276      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001162                           277  
00001162                           278  
00001162                           279  GROUP_7:                ;$7| Display: DATA, $WXYZ (Unsupported)
00001162  B03C 0007                280      CMP.B   #$7,D0                 ;Compare first nibble
00001166  6600 000C                281      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
0000116A  4EB9 00001948            282      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
00001170  6000 008E                283      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001174                           284  
00001174                           285  
00001174                           286  GROUP_8:                ;$8| DIVS, OR
00001174  B03C 0008                287      CMP.B   #$8,D0                 ;Compare first nibble
00001178  6600 000C                288      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
0000117C  4EB9 0000196C            289      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
00001182  6000 007C                290      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001186                           291  
00001186                           292  
00001186                           293  GROUP_9:                ;$9| SUB
00001186  B03C 0009                294      CMP.B   #$9,D0                 ;Compare first nibble
0000118A  6600 000C                295      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
0000118E  4EB9 000019C2            296      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
00001194  6000 006A                297      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001198                           298  
00001198                           299  
00001198                           300  GROUP_A:                ;$A| Display: DATA, $WXYZ (Unsupported)
00001198  B03C 000A                301      CMP.B   #$A,D0                 ;Compare first nibble
0000119C  6600 000C                302      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
000011A0  4EB9 00001A1C            303      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
000011A6  6000 0058                304      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011AA                           305  
000011AA                           306  
000011AA                           307  GROUP_B:                ;$B| EOR, CMP
000011AA  B03C 000B                308      CMP.B   #$B,D0                 ;Compare first nibble
000011AE  6600 000C                309      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
000011B2  4EB9 00001A24            310      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
000011B8  6000 0046                311      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011BC                           312  
000011BC                           313  
000011BC                           314  GROUP_C:                ;$C| MULS
000011BC  B03C 000C                315      CMP.B   #$C,D0                 ;Compare first nibble
000011C0  6600 000C                316      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
000011C4  4EB9 00001A84            317      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
000011CA  6000 0034                318      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011CE                           319  
000011CE                           320  
000011CE                           321  GROUP_D:                 ;$D| ADD, ADDA
000011CE  B03C 000D                322      CMP.B   #$D,D0                 ;Compare first nibble
000011D2  6600 000C                323      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
000011D6  4EB9 00001B1A            324      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
000011DC  6000 0022                325      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011E0                           326  
000011E0                           327  
000011E0                           328  GROUP_E:                ;$E| LSR, LSL, ASR, ASL, ROL, ROR
000011E0  B03C 000E                329      CMP.B   #$E,D0                 ;Compare first nibble
000011E4  6600 000C                330      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
000011E8  4EB9 00001B5C            331      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
000011EE  6000 0010                332      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011F2                           333  
000011F2                           334  
000011F2                           335  GROUP_F:                ;$F| Display: DATA, $WXYZ (Unsupported)
000011F2  B03C 000F                336      CMP.B   #$F,D0                 ;Compare first nibble
000011F6  4EB9 00001CF4            337      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
000011FC  6000 0002                338      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001200                           339  
00001200                           340  
00001200                           341  OP_JSR_DONE:
00001200  4CDF 0003                342           MOVEM.L (SP)+,D0-D1       ;Recover register D0
00001204  4EF9 00001D10            343           JMP READ_NEXT_INSTRUCTION
0000120A                           344  **********************************************************************************
0000120A                           345  
0000120A                           346  ********** EA Parsing ************************************************************
0000120A                           347  
0000120A                           348  * MOVE_LAST_6_BITS_TO_EA
0000120A                           349  **********************************************************************************
0000120A                           350  * Description: For OP codes with the last 6 bits specified as EA Mode and EA Reg,
0000120A                           351  * the last 6 bits will be parsed and moved into the appropriate registers.
0000120A                           352  *
0000120A                           353  * Registers used: A6,D0,D1,D6,D7 
0000120A                           354  
0000120A                           355  * Precondition: OP code has been identified with only the last 6 bits for EA,
0000120A                           356  * current instruction set is stored into A6.
0000120A                           357  
0000120A                           358  * Postcondition: Last 6 bits of instruction bit has been isolated and stored. Bits
0000120A                           359  * for EA Mode have been stored in D7, Bits for EA Reg been stored in D6.
0000120A                           360  **********************************************************************************
0000120A                           361  MOVE_LAST_6_BITS_TO_EA:      ;Move last 6 bits from EA field to relevant registers
0000120A                           362     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
0000120A  3038 1000                363      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
0000120E  323C 000A                364      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
00001212  E368                     365      LSL.W   D1,D0            ;Truncate to find the last 6 bits
00001214  E268                     366      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
00001216  3E00                     367      MOVE.W  D0,D7            ;Move last 6 bits into D7
00001218  323C 0003                368      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
0000121C  E26F                     369      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
0000121E  3C07                     370      MOVE.W  D7,D6            ;Move the 'upper' 3 bits into D6
00001220  323C 000D                371      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
00001224  E368                     372      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
00001226  E268                     373      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001228  3E00                     374      MOVE.W  D0,D7            ;Move the 'lower' 3 bits into D7
0000122A                           375     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
0000122A  4E75                     376      RTS                      ;Return to stack
0000122C                           377      
0000122C                           378  * FIND_2_BIT_SIZE_TO_EA
0000122C                           379  **********************************************************************************
0000122C                           380  * Description: For OP codes with 2 bit size fields, the 2 relevant bits (7-6) will 
0000122C                           381  * be parsed and moved to the appropriate registers.
0000122C                           382  *
0000122C                           383  * Registers used: A6,D0,D1,D5
0000122C                           384  *
0000122C                           385  * Precondition: OP code has been identified with 2 size bit field for EA, current
0000122C                           386  * instruction set for OP code is stored in to A6.
0000122C                           387  *
0000122C                           388  * Postcondition: 2 bit size field has been isolated and stored into D5.
0000122C                           389  **********************************************************************************
0000122C                           390  FIND_2_BIT_SIZE_TO_EA:      ;Move the 2 bit size field relevant register
0000122C                           391     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
0000122C  3038 1000                392      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
00001230  323C 0008                393      MOVE.W   #8,D1          ;Prepare 8 bit shift to D1
00001234  E368                     394      LSL.W    D1,D0          ;Truncate to find the 2 size bits
00001236  E268                     395      LSR.W    D1,D0          ;Reposition the bits
00001238  323C 0006                396      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
0000123C  E268                     397      LSR.W    D1,D0          ;Truncate to shift 2 bits to a byte
0000123E  3800                     398      MOVE.W   D0,D4          ;Move 2 size bits into D5
00001240                           399    ;  MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
00001240  4E75                     400      RTS                     ;Return to stack
00001242                           401  **********************************************************************************
00001242                           402  
00001242                           403  * FIND_3_BIT_REG_TO_EA
00001242                           404  **********************************************************************************
00001242                           405  * Description: OP codes with a dynamic 3 bit register in bits 11-9 will be parsed
00001242                           406  * and have those 3 bits isolated and moved to the appropriate registers.
00001242                           407  *
00001242                           408  * Registers used: A6,D0,D1,D5
00001242                           409  *
00001242                           410  * Precondition: OP code has been identified with a dynamic 3 bit register in bits
00001242                           411  * 11-9.
00001242                           412  *
00001242                           413  * Postcondition: 3 bit dynamic register has been isolated and stored into D4.
00001242                           414  **********************************************************************************
00001242                           415  FIND_3_BIT_REG_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
00001242                           416     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
00001242  3038 1000                417      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
00001246  323C 0004                418      MOVE.W   #4,D1          ;Prepare 4 bit shift to D1
0000124A  E368                     419      LSL.W    D1,D0          ;Truncate to find the 2 size bits
0000124C  E268                     420      LSR.W    D1,D0          ;Reposition the bits
0000124E  323C 0009                421      MOVE.W   #9,D1          ;Prepare 9 bit shift to D1
00001252  E268                     422      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
00001254  3A00                     423      MOVE.W   D0,D5          ;Move 3 register bits into D4
00001256                           424     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
00001256  4E75                     425      RTS                     ;Return to stack
00001258                           426  **********************************************************************************
00001258                           427  
00001258                           428  * MOVE_AND_MOVEA_PARSE_EA
00001258                           429  **********************************************************************************
00001258                           430  * Description: Special parsing for the SRC and DST Mode/Reg for MOVE/MOVE
00001258                           431  *
00001258                           432  * Registers used: A6,D0,D1,D7,D6,D5,D4
00001258                           433  *
00001258                           434  * Precondition: OP code has been identified with either MOVE or MOVEA
00001258                           435  *
00001258                           436  * Postcondition: Store all relevant EA bits into associated register.
00001258                           437  **********************************************************************************
00001258                           438  MOVE_AND_MOVEA_PARSE_EA:       ;Move the 3 bit dynamic register bits to proper register
00001258                           439     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001258  3038 1000                440      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
0000125C  323C 000A                441      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
00001260  E368                     442      LSL.W   D1,D0            ;Truncate to find the last 6 bits
00001262  E268                     443      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
00001264  3E00                     444      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
00001266  323C 0003                445      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
0000126A  E26F                     446      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
0000126C  3A07                     447      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
0000126E  323C 000D                448      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
00001272  E368                     449      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
00001274  E268                     450      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001276  3800                     451      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
00001278                           452      **************MOVING SOURCE*********** TO BE DONE LATER
00001278                           453      ; MOVE.W #%0011 011 001 001 101,(A6)              ;MOVEA.W A5,A3
00001278                           454      ; MOVE.W #%0010 011 001 001 101,D0                ;MOVEA.L A5,A3
00001278                           455       ;Expected values:
00001278                           456      ;D7, DST REG:   011
00001278                           457      ;D6, DST MODE:  001
00001278                           458      ;D5, SRC MODE:  001
00001278                           459      ;D4, SRC REG:   101
00001278                           460      ;00011001
00001278  3038 1000                461      MOVE.W CUR_OP_CODE,D0     ;Move current OP code into D0     
0000127C  323C 0004                462      MOVE.W  #4,D1             ;Prepare 4 bit shift to D1
00001280  E368                     463      LSL.W   D1,D0             ;Truncate to find bits 11-6
00001282  E268                     464      LSR.W   D1,D0             ;Reposition bits
00001284  323C 0006                465      MOVE.W  #6,D1             ;Prepare 6 bit shift to D1
00001288  E268                     466      LSR.W   D1,D0             ;Truncate the SRC Reg/Mode bits
0000128A  323C 0003                467      MOVE.W  #3,D1             ;Prepare a 3 bit shift to D1 for DST Reg/Mode
0000128E  3C00                     468      MOVE.W  D0,D6             ;Copy over the current 6 bits to D6
00001290  E268                     469      LSR.W   D1,D0             ;Truncate DST Mode  
00001292  3E00                     470      MOVE.W  D0,D7             ;Move DST Reg to D7
00001294  323C 000D                471      MOVE.W  #13,D1             
00001298  E36E                     472      LSL.W   D1,D6             ;Truncate 13 bits in D6
0000129A  E26E                     473      LSR.W   D1,D6             ;Reposition D6
0000129C                           474                                ;D6 now contains the DST Reg
0000129C                           475     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
0000129C  4E75                     476      RTS                     ;Return to stack
0000129E                           477  **********************************************************************************
0000129E                           478  
0000129E                           479  *FIND_TRAILING_BITS_TO_EA
0000129E                           480  **********************************************************************************
0000129E                           481  FIND_TRAILING_BITS_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
0000129E                           482     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
0000129E  3038 1000                483      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
000012A2  323C 0007                484      MOVE.W   #7,D1          ;Prepare 4 bit shift to D1
000012A6  E368                     485      LSL.W    D1,D0          ;Truncate to find the 2 size bits
000012A8  E268                     486      LSR.W    D1,D0          ;Reposition the bits
000012AA  323C 0006                487      MOVE.W   #6,D1          ;Prepare 9 bit shift to D1
000012AE  E268                     488      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
000012B0  3680                     489      MOVE.W   D0,(A3)          ;Move 3 register bits into D4
000012B2                           490     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
000012B2  4E75                     491      RTS                    ;Return to stack
000012B4                           492  **********************************************************************************
000012B4                           493  
000012B4                           494  *PARSE_EA_CONSTANT_BITS
000012B4                           495  **********************************************************************************
000012B4                           496  * Definition: Uses CUR_OP_CODE to shift the proper bits into the global constants
000012B4                           497  * used for EA (MNEMONIC,FIRST_3,SECOND_3,THIRD_3,FOURTH_3. Where MNEMONIC refers
000012B4                           498  * to the first 4 bits of CUR_OP_CODE (15-12), FIRST_3 refers to the first group
000012B4                           499  * of 3 bits (11-9), SECOND_3 refers to the second group of 3 bits (8-6), THIRD_3
000012B4                           500  * refers to the third group of 3 bits (5-3), and FOURTH_3 refers to the fourth
000012B4                           501  * group of 3 bits (2-0). Shifts CUR_OP_CODE bits to initialize constants.
000012B4                           502  *
000012B4                           503  * Registers used: D0,D1
000012B4                           504  *
000012B4                           505  * Precondition: CUR_OP_CODE has been set with an 4 hex instruction set
000012B4                           506  * 
000012B4                           507  * Postcondition: MNEMONIC, FIRST_3, SECOND_3, THIRD_3, FOURTH_3 have been set
000012B4                           508  * to the corresponding values.
000012B4                           509  **********************************************************************************
000012B4                           510  PARSE_EA_CONSTANT_BITS:
000012B4                           511      *MNEMONIC SHIFT
000012B4  3038 1000                512      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D0
000012B8  323C 000C                513      MOVE.W #12,D1               ;Prepare a bit shift of 12 into D1
000012BC  E268                     514      LSR.W D1,D0                 ;Shift 12 bits from D0 right
000012BE  11C0 10A4                515      MOVE.B D0,MNEMONIC          ;Set MNEMONIC to D0
000012C2                           516      *FIRST_3 SHIFT
000012C2  323C 0009                517      MOVE.W #9,D1                ;Prepare a bit shift of 9 into D1
000012C6  3038 1000                518      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012CA  E948                     519      LSL.W #4,D0                 ;Shift out bits 15-12 in D0
000012CC  E848                     520      LSR.W #4,D0                 ;Reposition D0
000012CE  E268                     521      LSR.W  D1,D0                ;Shift D0 9 bits right
000012D0  11C0 10A5                522      MOVE.B D0,FIRST_3           ;Set FIRST_3 to D0
000012D4                           523      *SECOND_3 SHIFT
000012D4  3038 1000                524      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012D8  EF48                     525      LSL.W #7,D0                 ;Shift out bits 15-9 in D0
000012DA  EE48                     526      LSR.W #7,D0                 ;Reposition D0
000012DC  EC48                     527      LSR.W #6,D0                 ;Shift D0 6 bits right
000012DE  11C0 10A6                528      MOVE.B D0,SECOND_3          ;Set SECOND_3 to D0
000012E2                           529      *THIRD_3 SHIFT
000012E2  3038 1000                530      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012E6  E648                     531      LSR.W #3,D0                 ;Shift D0 3 bits right
000012E8  323C 000D                532      MOVE.W #13,D1               ;Prepare a 13 bit shift into D1
000012EC  E368                     533      LSL.W D1,D0                 ;Truncate first 13 bits of D0
000012EE  E268                     534      LSR.W D1,D0                 ;Reposition D0
000012F0  11C0 10A7                535      MOVE.B D0,THIRD_3           ;Set THIRD_3 to D0
000012F4                           536      *FOURTH_3 SHIFT
000012F4  3038 1000                537      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012F8  E368                     538      LSL.W D1,D0                 ;Grab the fourth 3-bit group
000012FA  E268                     539      LSR.W D1,D0                 ;Shift D0 back into position
000012FC  11C0 10A8                540      MOVE.B D0,FOURTH_3          ;Set FOURTH_3 to Do
00001300  4E75                     541      RTS                         ;Return to stack
00001302                           542  **********************************************************************************
00001302                           543  ********** End of EA Parsing *****************************************************
00001302                           544  
00001302                           545  *******************JMP LABELS ****************************************************
00001302                           546  * Labelling for group codes will be in the following format
00001302                           547  
00001302                           548  * <JMP Labelname>
00001302                           549  ********************************************************************************
00001302                           550  * Checking List Order (If more than one value)
00001302                           551  * Operand1 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
00001302                           552  * Operand2 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
00001302                           553  
00001302                           554  * Where a-b will refer to the bit corresponding bit value in the instruction
00001302                           555  * format, and a specifier will be attached such as Size, EA Mode, SRC Reg, etc
00001302                           556  * to clarify what a specific bit range means.
00001302                           557  * Checking order refers to what order the checks will be performed in. 
00001302                           558  * Any other code outside of the listed ones will be INVALID_OP.
00001302                           559  ********************************************************************************
00001302                           560  
00001302                           561  ********************************************************************************
00001302                           562  * Global Field Descriptions
00001302                           563  * Size Field: Byte = 00 Word = 01 Long = 10
00001302                           564  * EA Mode: Refer to EA Address Modes
00001302                           565  * EA Reg: 3-bit input that is mapped to the respective binary value
00001302                           566  ********************************************************************************
00001302                           567  
00001302                           568  * GROUP_0                      
00001302                           569  ********************************************************************************
00001302                           570  * Description: Checks for the following listed OP codes to be present or not
00001302                           571  * Supported OP codes:
00001302                           572  * ORI: $00, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001302                           573  * CMPI: $0C, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001302                           574  * Dynamic BCLR: $0, 11-9 Register, 8-6 %110, 5-3 EA Mode, 2-0 EA Reg
00001302                           575  * Static BCLR: $01, 7-6 10, 5-3 EA Mode, 2-0 EA Reg
00001302                           576  *
00001302                           577  * Registers used: D0
00001302                           578  *
00001302                           579  * Precondition: First nibble has been identified as $0
00001302                           580  *
00001302                           581  * Postcondition: Parses proper OP code with a nibble value of $0 or finds an
00001302                           582  * invalid OP code. After a successful parse loading for EA values will be done
00001302                           583  * through a subroutine.
00001302                           584  * 
00001302                           585  * Unsupported OP codes:
00001302                           586  * ORI_TO_CCR, ORI_TO_SR, ANDI_TO_CCR, ANDI_TO_SR, ANDI, SUBI, ADDI, EORI_TO_CCR
00001302                           587  * EORI_TO_SR, EORI, STATIC_BTST, STATIC_BCHG, STATIC_BSET, DYNAMIC_BTST,
00001302                           588  * DYNAMIC_BCHG, DYNAMIC_BSET, MOVEP 
00001302                           589  ********************************************************************************
00001302                           590  C_GROUP_0:
00001302  48E7 C000                591      MOVEM.L D0-D1, -(SP)        ;Backup registers
00001306                           592  *Unsupported OP codes that are fully static in bits
00001306                           593  CHECK_OP_ORI_TO_CCR:
00001306  3038 1000                594      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
0000130A  B07C 003C                595      CMP.W #$003C,D0            ;Compare the direct full bits
0000130E  6700 01B4                596      BEQ GROUP0_INVALID         ;INVALID OP code found
00001312  6600 0002                597      BNE CHECK_OP_ORI_TO_SR     ;Check next routine
00001316                           598      
00001316                           599  CHECK_OP_ORI_TO_SR:
00001316  3038 1000                600      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
0000131A  B07C 007C                601      CMP.W #$007C,D0            ;Compare the direct full bits
0000131E  6700 01A4                602      BEQ GROUP0_INVALID         ;INVALID OP code found
00001322  6600 0002                603      BNE CHECK_OP_ANDI_TO_CCR   ;Check next routine
00001326                           604      
00001326                           605  CHECK_OP_ANDI_TO_CCR:
00001326  3038 1000                606      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
0000132A  B07C 023C                607      CMP.W #$023C,D0            ;Compare the direct full bits
0000132E  6700 0194                608      BEQ GROUP0_INVALID         ;INVALID OP code found
00001332  6600 0002                609      BNE CHECK_OP_ANDI_TO_SR    ;Check next routine
00001336                           610      
00001336                           611  CHECK_OP_ANDI_TO_SR:
00001336  3038 1000                612      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
0000133A  B07C 027C                613      CMP.W #$027C,D0            ;Compare the direct full bits
0000133E  6700 0184                614      BEQ GROUP0_INVALID         ;INVALID OP code found
00001342  6600 0022                615      BNE CHECK_OP_ANDI          ;Check next routine
00001346                           616  
00001346                           617  
00001346                           618  CHECK_OP_EORI_TO_CCR:
00001346  3038 1000                619      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
0000134A  B07C 0A3C                620      CMP.W #$0A3C,D0            ;Compare the direct full bits
0000134E  6700 0174                621      BEQ GROUP0_INVALID         ;INVALID OP code found
00001352  6600 0002                622      BNE CHECK_OP_EORI_TO_SR    ;Check next routine
00001356                           623      
00001356                           624  CHECK_OP_EORI_TO_SR:
00001356  3038 1000                625      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
0000135A  B07C 0A7C                626      CMP.W #$0A7C,D0            ;Compare the direct full bits
0000135E  6700 0164                627      BEQ GROUP0_INVALID         ;INVALID OP code found
00001362  6600 0002                628      BNE CHECK_OP_ANDI          ;Check next routine
00001366                           629      
00001366                           630  *Unsupported OP codes to check with partial static bits
00001366                           631  CHECK_OP_ANDI:
00001366  3038 1000                632      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
0000136A  0240 FF00                633      ANDI.W #$FF00,D0           ;Mask relevant bits to D0
0000136E  B07C 0200                634      CMP.W #$0200,D0            ;Compare the appropriate masked bits
00001372  6700 0150                635      BEQ GROUP0_INVALID         ;INVALID OP code found
00001376  6600 0002                636      BNE CHECK_OP_SUBI          ;Check next routine
0000137A                           637      
0000137A                           638  CHECK_OP_SUBI:
0000137A  3038 1000                639      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
0000137E  0240 FF00                640      ANDI.W #$FF00,D0           ;Mask relevant bits to D0
00001382  B07C 0400                641      CMP.W #$0400,D0            ;Compare the appropriate masked bits
00001386  6700 013C                642      BEQ GROUP0_INVALID         ;INVALID OP code found
0000138A  6600 0002                643      BNE CHECK_OP_ADDI          ;Check next routine
0000138E                           644  
0000138E                           645  CHECK_OP_ADDI:
0000138E  3038 1000                646      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
00001392  0240 FF00                647      ANDI.W #$FF00,D0           ;Mask relevant bits to D0
00001396  B07C 0600                648      CMP.W #$0600,D0            ;Compare the appropriate masked bits
0000139A  6700 0128                649      BEQ GROUP0_INVALID         ;INVALID OP code found
0000139E  6600 0002                650      BNE CHECK_OP_EORI          ;Check next routine 
000013A2                           651  
000013A2                           652  CHECK_OP_EORI:
000013A2  3038 1000                653      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
000013A6  0240 FF00                654      ANDI.W #$FF00,D0           ;Mask relevant bits to D0
000013AA  B07C 0A00                655      CMP.W #$0A00,D0            ;Compare the appropriate masked bits
000013AE  6700 0114                656      BEQ GROUP0_INVALID         ;INVALID OP code found
000013B2  6600 0002                657      BNE CHECK_OP_STATIC_BTST   ;Check next routine
000013B6                           658      
000013B6                           659  CHECK_OP_STATIC_BTST:
000013B6  3038 1000                660      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
000013BA  0240 FFC0                661      ANDI.W #$FFC0,D0           ;Mask relevant bits to D0
000013BE  B07C 0800                662      CMP.W #$0800,D0            ;Compare the appropriate masked bits
000013C2  6700 0100                663      BEQ GROUP0_INVALID         ;INVALID OP code found
000013C6  6600 0002                664      BNE CHECK_OP_STATIC_BCHG   ;Check next routine
000013CA                           665      
000013CA                           666  CHECK_OP_STATIC_BCHG:
000013CA  3038 1000                667      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
000013CE  0240 FFC0                668      ANDI.W #$FFC0,D0           ;Mask relevant bits to D0
000013D2  B07C 0840                669      CMP.W #$0840,D0            ;Compare the appropriate masked bits
000013D6  6700 00EC                670      BEQ GROUP0_INVALID         ;INVALID OP code found
000013DA  6600 0002                671      BNE CHECK_OP_STATIC_BSET   ;Check next routine
000013DE                           672  
000013DE                           673  CHECK_OP_STATIC_BSET:
000013DE  3038 1000                674      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
000013E2  0240 FFC0                675      ANDI.W #$FFC0,D0           ;Mask relevant bits to D0
000013E6  B07C 08C0                676      CMP.W #$08C0,D0            ;Compare the appropriate masked bits
000013EA  6700 00D8                677      BEQ GROUP0_INVALID         ;INVALID OP code found   
000013EE  6600 0002                678      BNE CHECK_OP_DYNAMIC_BTST  ;Check next routine
000013F2                           679  
000013F2                           680  CHECK_OP_DYNAMIC_BTST:
000013F2  3038 1000                681      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
000013F6  0240 F1C0                682      ANDI.W #$F1C0,D0           ;Mask relevant bits to D0
000013FA  B07C 0100                683      CMP.W #$0100,D0            ;Compare the appropriate masked bits
000013FE  6700 00C4                684      BEQ GROUP0_INVALID         ;INVALID OP code found
00001402  6600 0002                685      BNE CHECK_OP_DYNAMIC_BCHG  ;Check next routine
00001406                           686  
00001406                           687  CHECK_OP_DYNAMIC_BCHG:
00001406  3038 1000                688      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
0000140A  0240 F1C0                689      ANDI.W #$F1C0,D0            ;Mask relevant bits to D0
0000140E  B07C 0140                690      CMP.W #$0140,D0             ;Compare the appropriate masked bits 
00001412  6700 00B0                691      BEQ GROUP0_INVALID          ;INVALID OP code found
00001416  6600 0002                692      BNE CHECK_OP_DYNAMIC_BSET   ;Check next routine
0000141A                           693      
0000141A                           694  CHECK_OP_DYNAMIC_BSET:
0000141A                           695  
0000141A  3038 1000                696      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D0
0000141E  0240 F1C0                697      ANDI.W  #$F1C0,D0           ;Mask relevant bits to D0
00001422  B07C 01C0                698      CMP.W   #$01C0,D0           ;Compare the appropriate masked bits 
00001426  6700 0006                699      BEQ     BIT_CHECK_MOVEP     ;Check special case for MOVEP
0000142A  6600 001C                700      BNE     CHECK_OP_MOVEP      ;Check next routine
0000142E                           701  
0000142E                           702  BIT_CHECK_MOVEP:
0000142E                           703                                  ;This is a special case check for MOVEP
0000142E  3038 1000                704      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D0
00001432  323C 000A                705      MOVE.W  #10,D1              ;Prepare a 10-bit shift
00001436  E368                     706      LSL.W   D1,D0               ;Shift out 10 bits left 
00001438  E268                     707      LSR.W   D1,D0               ;Reposition D0 for last 6 bits
0000143A  E648                     708      LSR.W   #3,D0               ;Shift out 3 bits right, D0 contains bits 5-3
0000143C  B07C 0001                709      CMP.W   #$1,D0              ;Compare bits to D0
00001440  6700 0006                710      BEQ     CHECK_OP_MOVEP      ;If bits are $1 then it's addressing, goto MOVEP
00001444  6600 007E                711      BNE     GROUP0_INVALID      ;If not then it's DYNAMIC_BSET which is invalid                                                    
00001448                           712      
00001448                           713  CHECK_OP_MOVEP:
00001448  3038 1000                714      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
0000144C  0240 F138                715      ANDI.W #$F138,D0            ;Mask relevant bits to D0
00001450  B07C 0108                716      CMP.W #$0108,D0             ;Compare the appropriate masked bits
00001454  6700 08A6                717      BEQ INVALID_OP              ;INVALID OP code found
00001458  6600 0002                718      BNE CHECK_OP_ORI            ;Check next routine
0000145C                           719  
0000145C                           720  *Supported OP code checks
0000145C                           721  CHECK_OP_ORI:
0000145C  3038 1000                722      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001460  0240 FF00                723      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001464  B07C 0000                724      CMP.W   #$0000,D0               ;Compare the appropriate masked bits     
00001468  6600 000C                725      BNE     CHECK_OP_CMPI           ;Branch to next comparison if not equal
0000146C  4EB9 00001D3A            726      JSR     PRINT_OP_ORI            ;Print the OP code if equal    
00001472  6000 0056                727      BRA     GROUP0_SUCCESS          ;Finish routine
00001476                           728      
00001476                           729  CHECK_OP_CMPI:
00001476  3038 1000                730      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000147A  0240 FF00                731      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
0000147E  B07C 0C00                732      CMP.W   #$0C00,D0               ;Compare the appropriate masked bits   
00001482  6600 000C                733      BNE     CHECK_OP_STATIC_BCLR    ;Branch to next comparison if not equal       
00001486  4EB9 00001D48            734      JSR     PRINT_OP_CMPI           ;Print the OP code if equal
0000148C  6000 003C                735      BRA     GROUP0_SUCCESS          ;Finish routine
00001490                           736      
00001490                           737  CHECK_OP_STATIC_BCLR:
00001490  3038 1000                738      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001494  0240 FF00                739      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001498  B07C 0800                740      CMP.W   #$0800,D0               ;Compare the appropriate masked bits
0000149C  6600 000C                741      BNE     CHECK_OP_DYNAMIC_BCLR   ;Branch to next comparison if not equal
000014A0  4EB9 00001D56            742      JSR     PRINT_OP_STATIC_BCLR    ;Print the OP code if equal
000014A6  6000 0022                743      BRA     GROUP0_SUCCESS          ;Finish routine
000014AA                           744      
000014AA                           745  CHECK_OP_DYNAMIC_BCLR:
000014AA  3038 1000                746      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000014AE  0240 0180                747      ANDI.W  #%0000000110000000,D0   ;Do a direct binary bitmask to see which bits are needed
000014B2  B07C 0180                748      CMP.W   #%0000000110000000,D0   ;Compare the expected binary value
000014B6  6600 000C                749      BNE     GROUP0_INVALID          ;If not equal this must be an invalid OP code
000014BA  4EB9 00001D64            750      JSR     PRINT_OP_DYNAMIC_BCLR   ;Print the OP code if equal
000014C0  6000 0008                751      BRA     GROUP0_SUCCESS          ;Finish routine
000014C4                           752  
000014C4                           753  GROUP0_INVALID:                     ;Checks have been finished, invalid OP code has been found
000014C4  4EB9 00001CFC            754      JSR INVALID_OP                  ;INVALID OP code found
000014CA                           755      
000014CA                           756  GROUP0_SUCCESS:                     ;Checks have been finished,a valid OP code has been found
000014CA  4CDF 0003                757      MOVEM.L (SP)+,D0-D1             ;Restore registers
000014CE  4E75                     758      RTS                             ;Return to stack
000014D0                           759      
000014D0                           760  * GROUP_1                      
000014D0                           761  ********************************************************************************
000014D0                           762  * Supported OP code:
000014D0                           763  * MOVE.B: $1, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000014D0                           764  ********************************************************************************
000014D0                           765  C_GROUP_1:
000014D0  48E7 C000                766      MOVEM.L D0-D1,-(SP)             ;Save registers to stack
000014D4                           767  
000014D4                           768  CHECK_OP_MOVE_B:
000014D4  3038 1000                769      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0          
000014D8  0240 F000                770      ANDI.W  #$F000,D0               ;Mask relevant bits to D0
000014DC  B07C 1000                771      CMP.W   #$1000,D0               ;Compare the appropriate masked bits 
000014E0  6600 000C                772      BNE     GROUP1_INVALID          ;Invalid OP code has been found
000014E4  4EB9 00001D72            773      JSR     PRINT_OP_MOVEB          ;Print the OP code if equal
000014EA  6000 0008                774      BRA     GROUP1_SUCCESS          ;Finish routine
000014EE                           775      
000014EE                           776  GROUP1_INVALID:
000014EE  4EB9 00001CFC            777      JSR INVALID_OP                  ;Invalid OP code found
000014F4                           778      
000014F4                           779  GROUP1_SUCCESS:
000014F4  4CDF 0003                780      MOVEM.L (SP)+,D0-D1             ;Restore register
000014F8  4E75                     781      RTS                             ;Return to stack
000014FA                           782  * GROUP_2
000014FA                           783  ********************************************************************************
000014FA                           784  * Supported OP codes:
000014FA                           785  * MOVEA.L: $2, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
000014FA                           786  * MOVE.L: $2, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000014FA                           787  ********************************************************************************
000014FA                           788  C_GROUP_2:
000014FA  48E7 E000                789      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
000014FE                           790  
000014FE                           791  CHECK_OP_MOVEA_L:
000014FE  3038 1000                792      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0  
00001502  0240 F000                793      ANDI.W #$F000,D0                ;Mask relevant bits to D0
00001506  B07C 2000                794      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
0000150A  4EF9 00001510            795      JMP FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
00001510                           796      
00001510                           797  FIND_MOVEA_L_DIFFERENCE:            ;Finds difference between MOVEA and MOVE
00001510  3038 1000                798      MOVE.W   CUR_OP_CODE,D0         ;Move current OP code into D0
00001514  323C 0007                799      MOVE.W   #7,D1                  ;Prepare 7 bit shift to D1
00001518  E368                     800      LSL.W    D1,D0                  ;Truncate to find the 3 address mode bits
0000151A  E268                     801      LSR.W    D1,D0                  ;Reposition the bits
0000151C  323C 0006                802      MOVE.W   #6,D1                  ;Prepare 6 bit shift to D1
00001520  E268                     803      LSR.W    D1,D0                  ;Truncate to shift 3 bits to a register
00001522  3400                     804      MOVE.W   D0,D2                  ;Move 3 address mode bits into D6
00001524  B47C 0001                805      CMP.W   #$1,D2                  ;Check if the address mode value is MOVEA
00001528  6600 000C                806      BNE     CHECK_OP_MOVE_L         ;Branch if not equal to check MOVE
0000152C  4EB9 00001D80            807      JSR     PRINT_OP_MOVEA_L        ;Print the OP code if it's a match
00001532  6000 0022                808      BRA     GROUP2_SUCCESS          ;Finish routine
00001536                           809      
00001536                           810      
00001536                           811  CHECK_OP_MOVE_L:
00001536  3038 1000                812      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000153A  0240 F000                813      ANDI.W #$F000,D0                ;Mask relevant bits to D0
0000153E  B07C 2000                814      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
00001542  6600 000C                815      BNE GROUP2_INVALID              ;If not equal, OP code is invalid
00001546  4EB9 00001D8E            816      JSR PRINT_OP_MOVE_L             ;Print out MOVE.L
0000154C  6000 0008                817      BRA GROUP2_SUCCESS              ;Finish routine
00001550                           818      
00001550                           819  GROUP2_INVALID:    
00001550  4EB9 00001CFC            820      JSR INVALID_OP                  ;Invalid OP code found
00001556                           821      
00001556                           822  GROUP2_SUCCESS:
00001556  4CDF 0003                823      MOVEM.L (SP)+,D0-D1             ;Restore register
0000155A  4E75                     824      RTS                             ;Return to stack
0000155C                           825  * GROUP_3
0000155C                           826  ********************************************************************************
0000155C                           827  * Supported OP codes:
0000155C                           828  * MOVEA.W: $3, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
0000155C                           829  * MOVE.W: $3, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
0000155C                           830  ********************************************************************************
0000155C                           831  C_GROUP_3:
0000155C  48E7 E000                832      MOVEM.L D0-D2,-(SP)
00001560                           833  CHECK_OP_MOVEA_W:
00001560  3038 1000                834      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001564  0240 F000                835      ANDI.W   #$F000,D0
00001568  B07C 3000                836      CMP.W    #$3000,D0
0000156C  4EF9 00001572            837      JMP      FIND_MOVEA_W_DIFFERENCE
00001572                           838  
00001572                           839      
00001572                           840  FIND_MOVEA_W_DIFFERENCE:      ;Finds difference between MOVEA and MOVE
00001572  3038 1000                841      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001576  323C 0007                842      MOVE.W   #7,D1          ;Prepare 7 bit shift to D1
0000157A  E368                     843      LSL.W    D1,D0          ;Truncate to find the 3 address mode bits
0000157C  E268                     844      LSR.W    D1,D0          ;Reposition the bits
0000157E  323C 0006                845      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
00001582  E268                     846      LSR.W    D1,D0          ;Truncate to shift 3 bits to a register
00001584  3400                     847      MOVE.W   D0,D2          ;Move 3 address mode bits into D6
00001586  B47C 0001                848      CMP.W    #$1,D2          ;Check if the address mode value is MOVEA
0000158A  6600 000C                849      BNE      CHECK_OP_MOVE_W 
0000158E  4EB9 00001D9C            850      JSR      PRINT_OP_MOVEA_W  
00001594  6000 0022                851      BRA      GROUP3_SUCCESS
00001598                           852      
00001598                           853  CHECK_OP_MOVE_W:
00001598  3038 1000                854      MOVE.W   CUR_OP_CODE,D0    ;Move current instruction set into D0
0000159C  0240 F000                855      ANDI.W   #$F000,D0
000015A0  B07C 3000                856      CMP.W    #$3000,D0
000015A4  6600 000C                857      BNE      GROUP3_INVALID
000015A8  4EB9 00001DAA            858      JSR      PRINT_OP_MOVE_W
000015AE  6000 0008                859      BRA      GROUP3_SUCCESS
000015B2                           860      
000015B2                           861  GROUP3_INVALID:
000015B2  4EB9 00001CFC            862      JSR INVALID_OP
000015B8                           863  
000015B8                           864  GROUP3_SUCCESS:
000015B8  4CDF 0007                865      MOVEM.L (SP)+,D0-D2 
000015BC  4E75                     866      RTS
000015BE                           867  
000015BE                           868  * GROUP_4
000015BE                           869  ********************************************************************************
000015BE                           870  * Supported OP codes:
000015BE                           871  * LEA: $4, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
000015BE                           872  * JSR: $4E, 7-6 %10, 5-3 EA Mode, 2-0 EA Reg 
000015BE                           873  * RTS: $4E75
000015BE                           874  * NEG: $44, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
000015BE                           875  * MOVEM: $4, 11 %1, 10 %D, 9-7 %001, 6 S, 5-3 EA Mode, 2-0 EA Reg
000015BE                           876  * %D = 0 , Register to Memory, 1 Memory to Register
000015BE                           877  * Unsupported OP codes: MOVE_FROM_SR, MOVE_TO_CCR, MOVE_TO_SR, NEGX, CLR, NOT
000015BE                           878  * EXT, NBCD, SWAP, PEA, ILLEGAL, TAS, TST, TRAP, LINK, UNLK, MOVE_USP, RESET,
000015BE                           879  * NOP, STOP, RTE, TRAPV, RTR, JMP, CHK
000015BE                           880  ********************************************************************************
000015BE                           881  C_GROUP_4:
000015BE  2F00                     882      MOVE.L  D0,-(SP)         ;Save registers
000015C0                           883  *Unsupported OP codes to check that are full static bits
000015C0                           884  CHECK_OP_STOP:
000015C0  3038 1000                885      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000015C4  B07C 4E72                886      CMP.W  #$4E72,D0
000015C8  6700 0266                887      BEQ    GROUP4_INVALID
000015CC  6600 0002                888      BNE    CHECK_OP_RESET
000015D0                           889      
000015D0                           890  CHECK_OP_RESET:
000015D0  3038 1000                891      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000015D4  B07C 4E70                892      CMP.W  #$4E70,D0
000015D8  6700 0256                893      BEQ    GROUP4_INVALID
000015DC  6600 0002                894      BNE    CHECK_OP_NOP
000015E0                           895      
000015E0                           896  CHECK_OP_NOP:
000015E0  3038 1000                897      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000015E4  B07C 4E71                898      CMP.W  #$4E71,D0
000015E8  6700 0246                899      BEQ    GROUP4_INVALID 
000015EC  6600 0002                900      BNE    CHECK_OP_ILLEGAL
000015F0                           901      
000015F0                           902  CHECK_OP_ILLEGAL:
000015F0  3038 1000                903      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000015F4  B07C 4AFC                904      CMP.W  #$4AFC,D0
000015F8  6700 0236                905      BEQ    GROUP4_INVALID
000015FC  6600 0002                906      BNE    CHECK_OP_RTE
00001600                           907      
00001600                           908  CHECK_OP_RTE:    
00001600  3038 1000                909      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001604  B07C 4E73                910      CMP.W #$4E73,D0
00001608  6700 0226                911      BEQ   GROUP4_INVALID
0000160C  6600 0002                912      BNE   CHECK_OP_TRAPV
00001610                           913      
00001610                           914  CHECK_OP_TRAPV:
00001610  3038 1000                915      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001614  B07C 4E76                916      CMP.W  #$4E76,D0
00001618  6700 0216                917      BEQ    GROUP4_INVALID
0000161C  6600 0002                918      BNE    CHECK_OP_RTR
00001620                           919      
00001620                           920  CHECK_OP_RTR:
00001620  3038 1000                921      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001624  B07C 4E77                922      CMP.W #$4E77,D0
00001628  6700 0206                923      BEQ    GROUP4_INVALID
0000162C  6600 0002                924      BNE    CHECK_OP_MOVE_FROM_SR
00001630                           925  
00001630                           926  
00001630                           927  *Unsupported OP codes to check that have partial static bits
00001630                           928  CHECK_OP_MOVE_FROM_SR:
00001630  3038 1000                929      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001634  0240 FFC0                930      ANDI.W #$FFC0,D0
00001638  B07C 40C0                931      CMP.W  #$40C0,D0
0000163C  6700 01F2                932      BEQ    GROUP4_INVALID
00001640  6600 0002                933      BNE    CHECK_OP_MOVE_TO_CCR
00001644                           934      
00001644                           935  CHECK_OP_MOVE_TO_CCR:
00001644  3038 1000                936      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001648  0240 FFC0                937      ANDI.W #$FFC0,D0
0000164C  B07C 44C0                938      CMP.W  #$44C0,D0
00001650  6700 01DE                939      BEQ    GROUP4_INVALID
00001654  6600 0002                940      BNE    CHECK_OP_MOVE_TO_SR
00001658                           941      
00001658                           942  CHECK_OP_MOVE_TO_SR:
00001658  3038 1000                943      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000165C  0240 FFC0                944      ANDI.W #$FFC0,D0
00001660  B07C 46C0                945      CMP.W  #$46C0,D0
00001664  6700 01CA                946      BEQ    GROUP4_INVALID
00001668  6600 0002                947      BNE    CHECK_OP_NEGX
0000166C                           948      
0000166C                           949  CHECK_OP_NEGX:
0000166C  3038 1000                950      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001670  0240 FF00                951      ANDI.W #$FF00,D0
00001674  B07C 4000                952      CMP.W  #$4000,D0
00001678  6700 01B6                953      BEQ    GROUP4_INVALID
0000167C  6600 0002                954      BNE    CHECK_OP_CLR
00001680                           955      
00001680                           956  CHECK_OP_CLR:
00001680  3038 1000                957      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001684  0240 FF00                958      ANDI.W #$FF00,D0
00001688  B07C 4200                959      CMP.W  #$4200,D0
0000168C  6700 01A2                960      BEQ    GROUP4_INVALID
00001690  6600 0002                961      BNE    CHECK_OP_NOT
00001694                           962      
00001694                           963  CHECK_OP_NOT:
00001694  3038 1000                964      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001698  0240 FF00                965      ANDI.W #$FF00,D0
0000169C  B07C 4600                966      CMP.W  #$4600,D0
000016A0  6700 018E                967      BEQ    GROUP4_INVALID
000016A4  6600 0002                968      BNE    CHECK_OP_EXT
000016A8                           969      
000016A8                           970  CHECK_OP_EXT:
000016A8  3038 1000                971      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000016AC  0240 FF80                972      ANDI.W #$FF80,D0
000016B0  B07C 4880                973      CMP.W  #$4880,D0
000016B4  6700 0006                974      BEQ    BIT_CHECK_EXT
000016B8  6600 001C                975      BNE    CHECK_OP_NBCD
000016BC                           976  
000016BC                           977  BIT_CHECK_EXT:    
000016BC  3038 1000                978      MOVE.W CUR_OP_CODE,D0    ;This is a special case to check against MOVEM
000016C0  323C 000A                979      MOVE.W #10,D1
000016C4  E368                     980      LSL.W  D1,D0
000016C6  E068                     981      LSR.W  D0,D0
000016C8  E648                     982      LSR.W  #3,D0
000016CA  B078 0000                983      CMP.W  %000,D0
000016CE  6700 0160                984      BEQ    GROUP4_INVALID   ;This means that this OP code is EXT
000016D2  6600 0142                985      BNE    CHECK_OP_MOVEM   ;This is the only other possibility 
000016D6                           986      
000016D6                           987  CHECK_OP_NBCD:
000016D6  3038 1000                988      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000016DA  0240 FFC0                989      ANDI.W #$FFC0,D0
000016DE  B07C 4800                990      CMP.W  #$4800,D0
000016E2  6700 014C                991      BEQ    GROUP4_INVALID
000016E6  6600 0002                992      BNE    CHECK_OP_SWAP
000016EA                           993      
000016EA                           994  CHECK_OP_SWAP:                  ; This must go before CHECK_OP PEA as first 3 nibbles can be equivalent
000016EA  3038 1000                995      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000016EE  0240 FF48                996      ANDI.W #$FF48,D0
000016F2  B07C 4840                997      CMP.W  #$4840,D0
000016F6  6700 0138                998      BEQ    GROUP4_INVALID
000016FA  6600 0002                999      BNE    CHECK_OP_PEA
000016FE                          1000   
000016FE                          1001  CHECK_OP_PEA:               ; This must go after CHECK_OP_SWAP as first 3 nibbles can be equivalent
000016FE  3038 1000               1002      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001702  0240 FF40               1003      ANDI.W #$FF40,D0
00001706  B07C 4840               1004      CMP.W  #$4840,D0
0000170A  6700 0124               1005      BEQ    GROUP4_INVALID
0000170E  6600 0002               1006      BNE    CHECK_OP_TAS
00001712                          1007      
00001712                          1008  CHECK_OP_TAS:
00001712  3038 1000               1009      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001716  0240 FFC0               1010      ANDI.W #$FFC0,D0
0000171A  B07C 4AC0               1011      CMP.W  #$4AC0,D0
0000171E  6700 0110               1012      BEQ    GROUP4_INVALID
00001722  6600 0002               1013      BNE    CHECK_OP_TST
00001726                          1014  
00001726                          1015  CHECK_OP_TST:               ; This must go after CHECK_OP_TAS as first 2 nibbles are equivalent
00001726  3038 1000               1016      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000172A  0240 FF00               1017      ANDI.W #$FF00,D0
0000172E  B07C 4A00               1018      CMP.W  #$4A00,D0
00001732  6700 00FC               1019      BEQ    GROUP4_INVALID
00001736  6600 0002               1020      BNE    CHECK_OP_TRAP
0000173A                          1021      
0000173A                          1022  CHECK_OP_TRAP:
0000173A  3038 1000               1023      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000173E  0240 FFF0               1024      ANDI.W #$FFF0,D0
00001742  B07C 4E40               1025      CMP.W  #$4E40,D0
00001746  6700 00E8               1026      BEQ    GROUP4_INVALID
0000174A  6600 0002               1027      BNE    CHECK_OP_LINK
0000174E                          1028      
0000174E                          1029  CHECK_OP_LINK:
0000174E  3038 1000               1030      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001752  0240 FFF8               1031      ANDI.W #$FFF8,D0
00001756  B07C 4E50               1032      CMP.W  #$4E50,D0
0000175A  6700 00D4               1033      BEQ    GROUP4_INVALID
0000175E  6600 0002               1034      BNE    CHECK_OP_UNLK
00001762                          1035  
00001762                          1036  CHECK_OP_UNLK:
00001762  3038 1000               1037      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001766  0240 FFF8               1038      ANDI.W #$FFF8,D0
0000176A  B07C 4E58               1039      CMP.W  #$4E58,D0
0000176E  6700 00C0               1040      BEQ    GROUP4_INVALID
00001772  6600 0002               1041      BNE    CHECK_OP_MOVE_USP
00001776                          1042      
00001776                          1043  CHECK_OP_MOVE_USP:
00001776  3038 1000               1044      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000177A  0240 FFF0               1045      ANDI.W #$FFF0,D0
0000177E  B07C 4E60               1046      CMP.W  #$4E60,D0
00001782  6700 00AC               1047      BEQ    GROUP4_INVALID
00001786  6600 0002               1048      BNE    CHECK_OP_JMP
0000178A                          1049  
0000178A                          1050  CHECK_OP_JMP:
0000178A  3038 1000               1051       MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000178E  0240 FFC0               1052       ANDI.W #$FFC0,D0
00001792  B07C 4EC0               1053       CMP.W  #$4EC0,D0
00001796  6700 0098               1054       BEQ    GROUP4_INVALID
0000179A  6600 0002               1055       BNE    CHECK_OP_CHK
0000179E                          1056       
0000179E                          1057  CHECK_OP_CHK:
0000179E  3038 1000               1058      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
000017A2  0240 F1C0               1059      ANDI.W  #$F1C0,D0
000017A6  B07C 4180               1060      CMP.W   #$4180,D0
000017AA  6700 0550               1061      BEQ     INVALID_OP
000017AE  6600 0002               1062      BNE     CHECK_OP_RTS
000017B2                          1063  
000017B2                          1064  *Supported OP codes to check
000017B2                          1065  CHECK_OP_RTS:
000017B2  3038 1000               1066      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000017B6  B07C 4E75               1067      CMP.W  #$4E75,D0
000017BA  6600 000C               1068      BNE    CHECK_OP_LEA
000017BE  4EB9 00001DD4           1069      JSR    PRINT_OP_RTS
000017C4  6000 0070               1070      BRA    GROUP4_SUCCESS              ;Finish routine
000017C8                          1071   
000017C8                          1072  CHECK_OP_LEA:
000017C8  3038 1000               1073      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000017CC  0240 F1C0               1074      ANDI.W #$F1C0,D0
000017D0  B07C 41C0               1075      CMP.W  #$41C0,D0
000017D4  6600 000C               1076      BNE    CHECK_OP_JSR
000017D8  4EB9 00001DE2           1077      JSR    PRINT_OP_LEA
000017DE  6000 0056               1078      BRA    GROUP4_SUCCESS              ;Finish routine
000017E2                          1079   
000017E2                          1080  CHECK_OP_JSR:
000017E2  3038 1000               1081      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000017E6  0240 FFC0               1082      ANDI.W #$FFC0,D0
000017EA  B07C 4E80               1083      CMP.W  #$4E80,D0
000017EE  6600 000C               1084      BNE    CHECK_OP_NEG
000017F2  4EB9 00001DC6           1085      JSR    PRINT_OP_JSR
000017F8  6000 003C               1086      BRA    GROUP4_SUCCESS              ;Finish routine
000017FC                          1087      
000017FC                          1088  CHECK_OP_NEG:
000017FC  3038 1000               1089      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001800  0240 FF00               1090      ANDI.W #$FF00,D0
00001804  B07C 4400               1091      CMP.W  #$4400,D0
00001808  6600 000C               1092      BNE    CHECK_OP_MOVEM
0000180C  4EB9 00001DF0           1093      JSR    PRINT_OP_NEG
00001812  6000 0022               1094      BRA    GROUP4_SUCCESS              ;Finish routine
00001816                          1095  
00001816                          1096      
00001816                          1097  **************** COME BACK TO FINISH UP SIZE **********************************
00001816                          1098  CHECK_OP_MOVEM:
00001816  3038 1000               1099      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
0000181A  0240 FB80               1100      ANDI.W #$FB80,D0
0000181E  B07C 4880               1101      CMP.W  #$4880,D0
00001822  6600 04D8               1102      BNE    INVALID_OP       ;If no code is found, it is invalid
00001826  4EB9 00001DFE           1103      JSR    PRINT_OP_MOVEM_W
0000182C  6000 0008               1104      BRA    GROUP4_SUCCESS
00001830                          1105      
00001830                          1106  GROUP4_INVALID:
00001830  4EB9 00001CFC           1107      JSR INVALID_OP
00001836                          1108  
00001836                          1109  GROUP4_SUCCESS:
00001836  4CDF 0001               1110      MOVEM.L (SP)+,D0 
0000183A  4E75                    1111      RTS
0000183C                          1112  * GROUP_5
0000183C                          1113  ********************************************************************************
0000183C                          1114  * Supported OP code:
0000183C                          1115  * SUBQ: $5, 11-9 DATA, 8 %1, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
0000183C                          1116  * Unsupported OP codes: ADDQ, Scc, DBcc
0000183C                          1117  * Validation checking:
0000183C                          1118  * Check against, ADDQ, Scc, DBcc
0000183C                          1119  ********************************************************************************
0000183C                          1120  C_GROUP_5:
0000183C  48E7 8000               1121      MOVEM.L D0,-(SP)         ;Save registers to stack
00001840                          1122  *Unsupported OP codes
00001840                          1123  CHECK_OP_DBcc:               ;These are ordered first due to checking bits 7-6
00001840  3038 1000               1124      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001844  0240 F0C8               1125      ANDI.W #$F0C8,D0
00001848  B07C 50C8               1126      CMP.W  #$50C8,D0
0000184C  6700 0048               1127      BEQ    GROUP5_INVALID
00001850  6600 0002               1128      BNE    CHECK_OP_Scc 
00001854                          1129  
00001854                          1130  CHECK_OP_Scc:
00001854  3038 1000               1131      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001858  0240 F0C0               1132      ANDI.W #$F0C0,D0 
0000185C  B07C 50C0               1133      CMP.W  #$50C0,D0
00001860  6700 0034               1134      BEQ     GROUP5_INVALID
00001864  6600 0002               1135      BNE     CHECK_OP_ADDQ
00001868                          1136  
00001868                          1137  CHECK_OP_ADDQ:
00001868  3038 1000               1138      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000186C  0240 F100               1139      ANDI.W #$F100,D0
00001870  B07C 5000               1140      CMP.W  #$5000,D0
00001874  6700 0020               1141      BEQ    GROUP5_INVALID
00001878  6600 0002               1142      BNE    CHECK_OP_SUBQ
0000187C                          1143  
0000187C                          1144  *Supported OP code   
0000187C                          1145  CHECK_OP_SUBQ     
0000187C  3038 1000               1146      MOVE.W  CUR_OP_CODE,D0  ;Actual check for SUBQ
00001880  0240 F100               1147      ANDI.W #$F100,D0        ;Bitmask check for SUBQ
00001884  B07C 5100               1148      CMP.W  #$5100,D0        ;Compare the proper value
00001888  6600 000C               1149      BNE    GROUP5_INVALID       ;Else the operand is invalid
0000188C  4EB9 00001E1A           1150      JSR    PRINT_OP_SUBQ    ;If equal print it out
00001892  6000 0008               1151      BRA    GROUP5_SUCCESS   ;Finish routine
00001896                          1152      
00001896                          1153  GROUP5_INVALID: 
00001896  4EB9 00001CFC           1154      JSR INVALID_OP          ;INVALID OP has been found
0000189C                          1155  
0000189C                          1156  GROUP5_SUCCESS:
0000189C  4CDF 0001               1157      MOVEM.L (SP)+,D0        ;Restore registers from stack
000018A0  4E75                    1158      RTS                     ;Return to stack
000018A2                          1159      
000018A2                          1160  * GROUP_6
000018A2                          1161  ********************************************************************************
000018A2                          1162  * Supported OP codes
000018A2                          1163  * BRA: $60, 7-0 8-Bit Displacement
000018A2                          1164  * Bcc: $6, 11-8 Condition, 7-0 8-Bit Displacement
000018A2                          1165  *   Branch: <Condition>   
000018A2                          1166  *   BCS: %0101          
000018A2                          1167  *   BGE: %1100      
000018A2                          1168  *   BLT: %1101  
000018A2                          1169  *   BVC: %1000
000018A2                          1170  *   
000018A2                          1171  *   MOVE.W #%0110010100000000   ;BCS
000018A2                          1172  *   MOVE.W #%0110110001010101   ;BGE
000018A2                          1173  *   MVE.W #%0110110110101010    ;BLT
000018A2                          1174  *   MOVE.W #%0110100001010101   ;BVC
000018A2                          1175  * Unsupported OP code: BSR
000018A2                          1176  ********************************************************************************
000018A2                          1177  C_GROUP_6:
000018A2  48E7 8000               1178      MOVEM.L D0,-(SP)        ;Save register to stack
000018A6                          1179  *Unsupported OP code
000018A6                          1180  CHECK_OP_BSR:
000018A6  3038 1000               1181      MOVE.W  CUR_OP_CODE,D0
000018AA  0240 FF00               1182      ANDI.W  #$FF00,D0
000018AE  B07C 6100               1183      CMP.W   #$6100,D0
000018B2  6700 0088               1184      BEQ     GROUP6_INVALID
000018B6  6600 0002               1185      BNE     CHECK_OP_BRA
000018BA                          1186      
000018BA                          1187  *Supported OP codes
000018BA                          1188  CHECK_OP_BRA:
000018BA  3038 1000               1189      MOVE.W  CUR_OP_CODE,D0   ;Move current instruction set into D0       
000018BE  0240 FF00               1190      ANDI.W  #$FF00,D0
000018C2  B07C 6000               1191      CMP.W   #$6000,D0
000018C6  6600 000C               1192      BNE     CHECK_OP_BCS
000018CA  4EB9 00001E60           1193      JSR     PRINT_OP_BRA
000018D0  6000 0070               1194      BRA     GROUP6_SUCCESS
000018D4                          1195      
000018D4                          1196  CHECK_OP_BCS:
000018D4  3038 1000               1197      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000018D8  0240 FF00               1198      ANDI.W #$FF00,D0
000018DC  B07C 6500               1199      CMP.W  #$6500,D0 
000018E0  6600 000C               1200      BNE    CHECK_OP_BGE
000018E4  4EB9 00001E28           1201      JSR    PRINT_OP_BCS
000018EA  6000 0056               1202      BRA    GROUP6_SUCCESS
000018EE                          1203  
000018EE                          1204      
000018EE                          1205  CHECK_OP_BGE:
000018EE  3038 1000               1206      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000018F2  0240 FF00               1207      ANDI.W #$FF00,D0
000018F6  B07C 6C00               1208      CMP.W  #$6C00,D0 
000018FA  6600 000C               1209      BNE    CHECK_OP_BLT
000018FE  4EB9 00001E36           1210      JSR    PRINT_OP_BGE
00001904  6000 003C               1211      BRA    GROUP6_SUCCESS
00001908                          1212      
00001908                          1213      
00001908                          1214  CHECK_OP_BLT:
00001908  3038 1000               1215      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
0000190C  0240 FF00               1216      ANDI.W #$FF00,D0
00001910  B07C 6D00               1217      CMP.W  #$6D00,D0 
00001914  6600 000C               1218      BNE    CHECK_OP_BVC
00001918  4EB9 00001E44           1219      JSR    PRINT_OP_BLT
0000191E  6000 0022               1220      BRA    GROUP6_SUCCESS
00001922                          1221      
00001922                          1222  CHECK_OP_BVC:
00001922  3038 1000               1223      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001926  0240 FF00               1224      ANDI.W #$FF00,D0
0000192A  B07C 6800               1225      CMP.W  #$6800,D0 
0000192E  6600 000C               1226      BNE    GROUP6_INVALID
00001932  4EB9 00001E52           1227      JSR    PRINT_OP_BVC
00001938  6000 0008               1228      BRA    GROUP6_SUCCESS
0000193C                          1229      
0000193C                          1230  GROUP6_INVALID:
0000193C  4EB9 00001CFC           1231      JSR    INVALID_OP    
00001942                          1232          
00001942                          1233  GROUP6_SUCCESS:
00001942  4CDF 0001               1234      MOVEM.L (SP)+,D0
00001946  4E75                    1235      RTS
00001948                          1236      
00001948                          1237  *GROUP_7
00001948                          1238  ********************************************************************************
00001948                          1239  * Currently no OP codes here are supported. MOVEQ is the only code in this group
00001948                          1240  * Unsupported OP code: MOVEQ
00001948                          1241  ********************************************************************************
00001948                          1242  C_GROUP_7:
00001948  48E7 8000               1243      MOVEM.L D0,-(SP)        ;Save register to stack
0000194C                          1244      
0000194C                          1245  CHECK_OP_MOVEQ
0000194C  3038 1000               1246      MOVE.W CUR_OP_CODE,D0
00001950  0240 F100               1247      ANDI.W #$F100,D0
00001954  B07C 7000               1248      CMP.W  #$7000,D0
00001958  6600 0006               1249      BNE    GROUP7_INVALID
0000195C  6700 0008               1250      BEQ    GROUP7_SUCCESS
00001960                          1251      
00001960                          1252  GROUP7_INVALID:
00001960  4EB9 00001CFC           1253      JSR INVALID_OP
00001966                          1254      
00001966                          1255  GROUP7_SUCCESS:    
00001966  4CDF 0001               1256      MOVEM.L (SP)+,D0
0000196A  4E75                    1257      RTS
0000196C                          1258  * GROUP_8
0000196C                          1259  ********************************************************************************
0000196C                          1260  * Supported OP code:
0000196C                          1261  * DIVS: $8, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
0000196C                          1262  * OR: $80, 7-6 Size, 5-3 EA Mode, 2-0 EA Register
0000196C                          1263  * Unsupported OP codes: DIVU, SBCD
0000196C                          1264  ********************************************************************************
0000196C                          1265  C_GROUP_8:
0000196C  48E7 8000               1266      MOVEM.L D0,-(SP)
00001970                          1267  *Unsupported OP codes
00001970                          1268  CHECK_OP_DIVU:
00001970  3038 1000               1269      MOVE.W  CUR_OP_CODE,D0   ;Move current instruction set into D0
00001974  0240 F1C0               1270      ANDI.W  #$F1C0,D0
00001978  B07C 80C0               1271      CMP.W   #$80C0,D0
0000197C  6700 0038               1272      BEQ     GROUP8_INVALID
00001980  6600 0002               1273      BNE     CHECK_OP_SBCD 
00001984                          1274  
00001984                          1275  CHECK_OP_SBCD:
00001984  3038 1000               1276      MOVE.W  CUR_OP_CODE,D0   ;Move current instruction set into D0
00001988  0240 F1F0               1277      ANDI.W  #$F1F0,D0
0000198C  B07C 8100               1278      CMP.W   #$8100,D0
00001990  6700 0024               1279      BEQ     GROUP8_INVALID
00001994  6600 0002               1280      BNE     CHECK_OP_DIVS
00001998                          1281      
00001998                          1282  *Supported OP codes
00001998                          1283  CHECK_OP_DIVS:
00001998  3038 1000               1284      MOVE.W  CUR_OP_CODE,D0   ;Move current instruction set into D0
0000199C  0240 F1C0               1285      ANDI.W  #$F1C0,D0
000019A0  B07C 81C0               1286      CMP.W   #$81C0,D0
000019A4  6700 04C8               1287      BEQ     PRINT_OP_DIVS
000019A8  6600 0002               1288      BNE     CHECK_OP_OR
000019AC                          1289      
000019AC                          1290  CHECK_OP_OR:              ;At this point only remaining $8 code is OR
000019AC  4EB9 00001E7C           1291      JSR     PRINT_OP_OR
000019B2  6000 0008               1292      BRA     GROUP8_SUCCESS
000019B6                          1293  GROUP8_INVALID:
000019B6  4EB9 00001CFC           1294       JSR    INVALID_OP
000019BC                          1295       
000019BC                          1296  GROUP8_SUCCESS:
000019BC  4CDF 0001               1297       MOVEM.L (SP)+,D0
000019C0  4E75                    1298       RTS
000019C2                          1299       
000019C2                          1300  * GROUP_9                      
000019C2                          1301  ********************************************************************************
000019C2                          1302  * Supported OP code:
000019C2                          1303  * SUB: $9, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
000019C2                          1304  * Unsupported OP codes: SUBX, SUBA
000019C2                          1305  ********************************************************************************
000019C2                          1306  C_GROUP_9:
000019C2  48E7 C000               1307      MOVEM.L D0-D1,-(SP)     ;Save the registers
000019C6                          1308  CHECK_OP_SUBA:             ;Check SUBA first as it has static bits
000019C6  3038 1000               1309      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
000019CA  0240 F0C0               1310      ANDI.W  #$F0C0,D0
000019CE  B07C 90C0               1311      CMP.W   #$90C0,D0
000019D2  6700 0328               1312      BEQ     INVALID_OP
000019D6  6600 0002               1313      BNE     CHECK_OP_SUBX
000019DA                          1314  
000019DA                          1315  CHECK_OP_SUBX:
000019DA  3038 1000               1316      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
000019DE  0240 F130               1317      ANDI.W  #$F130,D0
000019E2  B07C 9100               1318      CMP.W   #$9100,D0
000019E6  6700 0006               1319      BEQ     BIT_CHECK_SUBX
000019EA  6600 0026               1320      BNE     GROUP9_INVALID     ;Cannot be a valid OP code here
000019EE                          1321      
000019EE                          1322  BIT_CHECK_SUBX:    
000019EE  3038 1000               1323      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D0
000019F2  323C 0007               1324      MOVE.W  #7,D1               ;Prepare a shift of 7 bits into D1
000019F6  E368                    1325      LSL.W   D1,D0               ;Shift left 7 bits truncate 15-9 bits
000019F8  E268                    1326      LSR.W   D1,D0               ;Reposition D0
000019FA  E848                    1327      LSR.W   #4,D0               ;Truncate 4 right most bits to
000019FC  0240 FF18               1328      ANDI.W  #$FF18,D0           ;Compare remaining static bits
00001A00  B07C 0018               1329      CMP.W   #$0018,D0           ;If equal to this value it's SUBX
00001A04  6700 000C               1330      BEQ     GROUP9_INVALID      ;INVALID OP code found
00001A08  6600 0002               1331      BNE     CHECK_OP_SUB        ;Not can only be SUB here
00001A0C                          1332      
00001A0C                          1333  CHECK_OP_SUB:                   ;At this point only remaining $9 is SUB
00001A0C  4EF9 00001E8A           1334      JMP     PRINT_OP_SUB
00001A12                          1335  
00001A12                          1336  GROUP9_INVALID:
00001A12  6000 02E8               1337      BRA     INVALID_OP
00001A16                          1338      
00001A16                          1339  GROUP9_SUCCESS:
00001A16  4CDF 0003               1340      MOVEM.L (SP)+,D0-D1         ;Restore registers
00001A1A  4E75                    1341      RTS                         ;Return to stack
00001A1C                          1342  
00001A1C                          1343  *GROUP_A
00001A1C                          1344  ********************************************************************************
00001A1C                          1345  * Currently no OP codes here are supported. There are no current OP codes here.
00001A1C                          1346  ********************************************************************************
00001A1C                          1347  C_GROUP_A:
00001A1C  4EB9 00001CFC           1348      JSR INVALID_OP
00001A22  4E75                    1349      RTS
00001A24                          1350      
00001A24                          1351  * GROUP_B                     
00001A24                          1352  ********************************************************************************
00001A24                          1353  * Supported OP codes:
00001A24                          1354  * EOR: $B, 11-9 Reg, 8 %1, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001A24                          1355  * CMP: $B, 11-9 Reg, 8 %0, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001A24                          1356  * The specific bit difference is listed 
00001A24                          1357  * Unsupported OP codes: CMPM, CMPA
00001A24                          1358  ********************************************************************************
00001A24                          1359  C_GROUP_B:
00001A24  48E7 8000               1360      MOVEM.L D0,-(SP)         ;Save current registers to stack
00001A28                          1361      
00001A28                          1362  CHECK_OP_CMPM
00001A28  3038 1000               1363      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A2C  0240 F138               1364      ANDI.W  #$F138,D0
00001A30  B07C B108               1365      CMP.W   #$B108,D0
00001A34  6700 0042               1366      BEQ     GROUPB_INVALID
00001A38  6600 0002               1367      BNE     CHECK_OP_CMPA
00001A3C                          1368      
00001A3C                          1369  CHECK_OP_CMPA:
00001A3C  3038 1000               1370      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A40  0240 F0C0               1371      ANDI.W  #$F0C0,D0
00001A44  B07C B0C0               1372      CMP.W   #$B0C0,D0
00001A48  6700 002E               1373      BEQ     GROUPB_INVALID
00001A4C  6600 0002               1374      BNE     CHECK_OP_EOR
00001A50                          1375      
00001A50                          1376  CHECK_OP_EOR:
00001A50  3038 1000               1377      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A54  0240 F100               1378      ANDI.W  #$F100,D0
00001A58  B07C B100               1379      CMP.W   #$B100,D0
00001A5C  6700 043A               1380      BEQ     PRINT_OP_EOR
00001A60  6600 0002               1381      BNE     CHECK_OP_CMP
00001A64                          1382      
00001A64                          1383  CHECK_OP_CMP:
00001A64  3038 1000               1384      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A68  0240 F100               1385      ANDI.W  #$F100,D0
00001A6C  B07C B000               1386      CMP.W   #$B000,D0
00001A70  6700 0434               1387      BEQ     PRINT_OP_CMP
00001A74  6600 0002               1388      BNE     GROUPB_INVALID
00001A78                          1389  
00001A78                          1390  GROUPB_INVALID:
00001A78  4EB9 00001CFC           1391      JSR     INVALID_OP           ;INVALID OP has been found 
00001A7E                          1392   
00001A7E                          1393  GROUPB_SUCCESS:
00001A7E  4CDF 0001               1394      MOVEM.L (SP)+,D0         ;Restore registers from stack
00001A82  4E75                    1395      RTS                      ;Return to stack
00001A84                          1396  * GROUP_C                     
00001A84                          1397  ********************************************************************************
00001A84                          1398  * Supported OP code:
00001A84                          1399  * MULS: $C, 11-8 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00001A84                          1400  * Note: EXG OP mode has to be 01000, 01001, 10001, as such can never be 11 for
00001A84                          1401  * bits 7-6
00001A84                          1402  * Unsupported OP codes: MULU, ABCD, EXG, AND
00001A84                          1403  ********************************************************************************
00001A84                          1404  C_GROUP_C:
00001A84                          1405  *Unsupported OP codes
00001A84  48E7 C000               1406      MOVEM.L D0-D1,-(SP)
00001A88                          1407      
00001A88                          1408  CHECK_OP_MULU:
00001A88  3038 1000               1409      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A8C  0240 F1C0               1410      ANDI.W  #$F1C0,D0
00001A90  B07C C0C0               1411      CMP.W   #$C0C0,D0
00001A94  6700 0078               1412      BEQ     GROUPC_INVALID
00001A98  6600 0002               1413      BNE     CHECK_OP_ABCD
00001A9C                          1414   
00001A9C                          1415  CHECK_OP_ABCD:
00001A9C  3038 1000               1416      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AA0  0240 F1F0               1417      ANDI.W  #$F1F0,D0
00001AA4  B07C C100               1418      CMP.W   #$C100,D0
00001AA8  6700 0064               1419      BEQ     GROUPC_INVALID
00001AAC  6600 0002               1420      BNE     CHECK_OP_EXG
00001AB0                          1421   
00001AB0                          1422  CHECK_OP_EXG:
00001AB0  3038 1000               1423      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AB4  0240 F130               1424      ANDI.W  #$F130,D0
00001AB8  B07C C100               1425      CMP.W   #$C100,D0
00001ABC  6700 0006               1426      BEQ     BIT_CHECK_EXG
00001AC0  6600 003C               1427      BNE     CHECK_OP_AND
00001AC4                          1428                          
00001AC4                          1429  BIT_CHECK_EXG:                 ;Checks the OP mode bits 7-6 which cannot be 11 for EXG
00001AC4  3038 1000               1430      MOVE.W  CUR_OP_CODE,D0
00001AC8  323C 0008               1431      MOVE.W  #8,D1
00001ACC  E368                    1432      LSL.W   D1,D0
00001ACE  E268                    1433      LSR.W   D1,D0
00001AD0  EC48                    1434      LSR.W   #6,D0
00001AD2  0240 FFF3               1435      ANDI.W  #$FFF3,D0
00001AD6  B07C 0003               1436      CMP.W   #$0003,D0          ;This bit then equals MULS
00001ADA  6700 000E               1437      BEQ     CHECK_OP_MULS
00001ADE  B07C 0000               1438      CMP.W   #$0000,D0          ;Second comparison to check if OP mode bit is valid
00001AE2  6700 001A               1439      BEQ     CHECK_OP_AND       ;If it's 0 it could be OP_AND
00001AE6  6600 0026               1440      BNE     GROUPC_INVALID         ;Otherwise it's EXG (01,10 op bits)
00001AEA                          1441  *Supported OP code
00001AEA                          1442  CHECK_OP_MULS:
00001AEA  3038 1000               1443      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AEE  0240 F1C0               1444      ANDI.W #$F1C0,D0
00001AF2  B07C C1C0               1445      CMP.W  #$C1C0,D0
00001AF6  6700 03BC               1446      BEQ    PRINT_OP_MULS
00001AFA  6600 0002               1447      BNE    CHECK_OP_AND          ; OP_AND is completely dynamic outside of first nibble
00001AFE                          1448  
00001AFE                          1449  *Odd completely dynamic unsupported OP code    
00001AFE                          1450  CHECK_OP_AND:                 ;This would be the only possible OP code left after CHECK_OP_MULS
00001AFE  3038 1000               1451      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B02  0240 F000               1452      ANDI.W  #$F000,D0
00001B06  B07C C000               1453      CMP.W   #$C000,D0
00001B0A  6700 0002               1454      BEQ     GROUPC_INVALID
00001B0E                          1455      
00001B0E                          1456  GROUPC_INVALID:
00001B0E  4EB9 00001CFC           1457      JSR     INVALID_OP
00001B14                          1458      
00001B14                          1459  GROUPC_SUCCESS:
00001B14  4CDF 0003               1460      MOVEM.L (SP)+,D0-D1
00001B18  4E75                    1461      RTS
00001B1A                          1462      
00001B1A                          1463  * GROUP_D                     
00001B1A                          1464  ********************************************************************************
00001B1A                          1465  * Supported OP codes:
00001B1A                          1466  * ADD: $D, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001B1A                          1467  * ADDA: $D, 11- 9 Reg, 8-6 OPMODE, 7-6 %11, 5-3 EA Mode, 2-0 EA Reg
00001B1A                          1468  * The specific bit difference is listed out in the OPMODE field.
00001B1A                          1469  * Unsupported: ADDX
00001B1A                          1470  ********************************************************************************
00001B1A                          1471  C_GROUP_D:
00001B1A  48E7 8000               1472      MOVEM.L D0,-(SP)        ;Save registers to stack
00001B1E                          1473      
00001B1E                          1474  CHECK_OP_ADDX:
00001B1E  3038 1000               1475      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B22  0240 F130               1476      ANDI.W #$F130,D0
00001B26  B07C D100               1477      CMP.W  #$D100,D0
00001B2A  6700 0024               1478      BEQ    GROUPD_INVALID
00001B2E  6600 0002               1479      BNE    CHECK_OP_ADDA
00001B32                          1480  
00001B32                          1481  CHECK_OP_ADDA:
00001B32  3038 1000               1482      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B36  0240 F0C0               1483      ANDI.W #$F0C0,D0
00001B3A  B07C D0C0               1484      CMP.W  #$D0C0,D0
00001B3E  6700 0390               1485      BEQ    PRINT_OP_ADDA
00001B42  6600 0002               1486      BNE    CHECK_OP_ADD
00001B46                          1487  
00001B46                          1488  CHECK_OP_ADD:
00001B46  4EB9 00001EC2           1489      JSR PRINT_OP_ADD        ;Only remaining OP in $D is ADD
00001B4C  6000 0008               1490      BRA GROUPD_SUCCESS
00001B50                          1491      
00001B50                          1492  GROUPD_INVALID:
00001B50  4EB9 00001CFC           1493      JSR INVALID_OP
00001B56                          1494      
00001B56                          1495  GROUPD_SUCCESS:
00001B56  4CDF 0001               1496      MOVEM.L (SP)+,D0        ;Restore registers from stack
00001B5A  4E75                    1497      RTS                     ;Return to stack
00001B5C                          1498      
00001B5C                          1499  * GROUP_E                     
00001B5C                          1500  ********************************************************************************
00001B5C                          1501  * Supported:
00001B5C                          1502  * LSR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00001B5C                          1503  * LSL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00001B5C                          1504  * ASR: $E, $0, 8 %0, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00001B5C                          1505  * ASL: $E, $0, 8 %1, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00001B5C                          1506  * ROR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00001B5C                          1507  * ROL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00001B5C                          1508  * Count/Reg for LSR/LSL refers to shift count, where 0 = shift count of 8, 1-7 
00001B5C                          1509  * refers to the respective value when i/r = 0. If i/r = 1, data register in the 
00001B5C                          1510  * Count/Reg field specifies the shift count.  
00001B5C                          1511  * For directional bit at 8, R = 0, L = 1
00001B5C                          1512  * Count/Reg for ROR/ROL specifies rotate count instead of shift count.
00001B5C                          1513  *
00001B5C                          1514  * Split into ROT and NO_ROT groups first to make identifying easier.
00001B5C                          1515  * Unsupported: ROXL, ROXR
00001B5C                          1516  ********************************************************************************
00001B5C                          1517  C_GROUP_E:
00001B5C  48E7 8000               1518      MOVEM.L D0,-(SP)
00001B60                          1519  *Unsupported OP codes
00001B60                          1520  CHECK_OP_ROXR_NO_ROT:
00001B60  3038 1000               1521      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B64  0240 FFC0               1522      ANDI.W #$FFC0,D0
00001B68  B07C E4C0               1523      CMP.W  #$E4C0,D0
00001B6C  6700 017A               1524      BEQ    GROUPE_INVALID
00001B70  6600 0002               1525      BNE    CHECK_OP_ROXL_NO_ROT
00001B74                          1526  
00001B74                          1527  CHECK_OP_ROXL_NO_ROT:
00001B74  3038 1000               1528      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B78  0240 FFC0               1529      ANDI.W #$FFC0,D0
00001B7C  B07C E5C0               1530      CMP.W  #$E5C0,D0
00001B80  6700 0166               1531      BEQ    GROUPE_INVALID
00001B84  6600 0002               1532      BNE    CHECK_OP_ROR_NO_ROT
00001B88                          1533  
00001B88                          1534  *Supported OP codes
00001B88                          1535  CHECK_OP_ROR_NO_ROT:
00001B88  3038 1000               1536      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B8C  0240 FFC0               1537      ANDI.W #$FFC0,D0
00001B90  B07C E6C0               1538      CMP.W  #$E6C0,D0
00001B94  6600 000C               1539      BNE    CHECK_OP_ROL_NO_ROT
00001B98  4EB9 00001F24           1540      JSR    PRINT_OP_ROR
00001B9E  6000 014E               1541      BRA    GROUPE_SUCCESS
00001BA2                          1542      
00001BA2                          1543  CHECK_OP_ROL_NO_ROT:
00001BA2  3038 1000               1544      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001BA6  0240 FFC0               1545      ANDI.W #$FFC0,D0
00001BAA  B07C E7C0               1546      CMP.W  #$E7C0,D0
00001BAE  6600 000C               1547      BNE    CHECK_OP_LSR_NO_ROT
00001BB2  4EB9 00001F16           1548      JSR    PRINT_OP_ROL
00001BB8  6000 0134               1549      BRA    GROUPE_SUCCESS
00001BBC                          1550   
00001BBC                          1551  CHECK_OP_LSR_NO_ROT:
00001BBC  3038 1000               1552      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001BC0  0240 FFC0               1553      ANDI.W #$FFC0,D0
00001BC4  B07C E2C0               1554      CMP.W  #$E2C0,D0
00001BC8  6600 000C               1555      BNE    CHECK_OP_LSL_NO_ROT
00001BCC  4EB9 00001EEC           1556      JSR    PRINT_OP_LSR
00001BD2  6000 011A               1557      BRA    GROUPE_SUCCESS
00001BD6                          1558  
00001BD6                          1559  CHECK_OP_LSL_NO_ROT:
00001BD6  3038 1000               1560      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001BDA  0240 FFC0               1561      ANDI.W #$FFC0,D0
00001BDE  B07C E3C0               1562      CMP.W  #$E3C0,D0
00001BE2  6600 000C               1563      BNE    CHECK_OP_ASR_NO_ROT
00001BE6  4EB9 00001EDE           1564      JSR    PRINT_OP_LSL
00001BEC  6000 0100               1565      BRA    GROUPE_SUCCESS
00001BF0                          1566  
00001BF0                          1567  CHECK_OP_ASR_NO_ROT:
00001BF0  3038 1000               1568      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001BF4  0240 FFC0               1569      ANDI.W #$FFC0,D0
00001BF8  B07C E0C0               1570      CMP.W  #$E0C0,D0
00001BFC  6600 000C               1571      BNE    CHECK_OP_ASL_NO_ROT
00001C00  4EB9 00001EFA           1572      JSR    PRINT_OP_ASR
00001C06  6000 00E6               1573      BRA    GROUPE_SUCCESS
00001C0A                          1574              
00001C0A                          1575  CHECK_OP_ASL_NO_ROT:
00001C0A  3038 1000               1576      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C0E  0240 FFC0               1577      ANDI.W #$FFC0,D0
00001C12  B07C E1C0               1578      CMP.W  #$E1C0,D0
00001C16  6600 000C               1579      BNE    CHECK_OP_ROXR
00001C1A  4EB9 00001F08           1580      JSR    PRINT_OP_ASL
00001C20  6000 00CC               1581      BRA    GROUPE_SUCCESS
00001C24                          1582  
00001C24                          1583  *Unsupported OP codes
00001C24                          1584  CHECK_OP_ROXR:
00001C24  3038 1000               1585      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C28  0240 F118               1586      ANDI.W #$F118,D0
00001C2C  B07C E010               1587      CMP.W  #$E010,D0
00001C30  6700 00B6               1588      BEQ    GROUPE_INVALID
00001C34  6600 0002               1589      BNE    CHECK_OP_ROXL
00001C38                          1590      
00001C38                          1591  CHECK_OP_ROXL:
00001C38  3038 1000               1592      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C3C  0240 F118               1593      ANDI.W #$F118,D0
00001C40  B07C E110               1594      CMP.W  #$E110,D0
00001C44  6700 00A2               1595      BEQ    GROUPE_INVALID
00001C48  6600 0002               1596      BNE    CHECK_OP_ROR
00001C4C                          1597      
00001C4C                          1598  *Supported OP codes
00001C4C                          1599  CHECK_OP_ROR:
00001C4C  3038 1000               1600      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C50  0240 F118               1601      ANDI.W #$F118,D0
00001C54  B07C E018               1602      CMP.W  #$E018,D0
00001C58  6600 000C               1603      BNE    CHECK_OP_ROL
00001C5C  4EB9 00001F24           1604      JSR    PRINT_OP_ROR
00001C62  6000 008A               1605      BRA    GROUPE_SUCCESS
00001C66                          1606  
00001C66                          1607  CHECK_OP_ROL:
00001C66  3038 1000               1608      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C6A  0240 F118               1609      ANDI.W #$F118,D0
00001C6E  B07C E118               1610      CMP.W  #$E118,D0
00001C72  6600 000C               1611      BNE    CHECK_OP_LSR
00001C76  4EB9 00001F16           1612      JSR    PRINT_OP_ROL
00001C7C  6000 0070               1613      BRA    GROUPE_SUCCESS
00001C80                          1614      
00001C80                          1615  CHECK_OP_LSR:
00001C80  3038 1000               1616      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C84  0240 F118               1617      ANDI.W #$F118,D0
00001C88  B07C E008               1618      CMP.W  #$E008,D0
00001C8C  6600 000C               1619      BNE    CHECK_OP_LSL
00001C90  4EB9 00001EEC           1620      JSR    PRINT_OP_LSR
00001C96  6000 0056               1621      BRA    GROUPE_SUCCESS
00001C9A                          1622  
00001C9A                          1623  CHECK_OP_LSL:
00001C9A  3038 1000               1624      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C9E  0240 F118               1625      ANDI.W #$F118,D0
00001CA2  B07C E108               1626      CMP.W  #$E108,D0
00001CA6  6600 000C               1627      BNE    CHECK_OP_ASR
00001CAA  4EB9 00001EDE           1628      JSR    PRINT_OP_LSL
00001CB0  6000 003C               1629      BRA    GROUPE_SUCCESS
00001CB4                          1630  
00001CB4                          1631  CHECK_OP_ASR:
00001CB4  3038 1000               1632      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001CB8  0240 F118               1633      ANDI.W #$F118,D0
00001CBC  B07C E000               1634      CMP.W  #$E000,D0
00001CC0  6600 000C               1635      BNE    CHECK_OP_ASL
00001CC4  4EB9 00001EFA           1636      JSR    PRINT_OP_ASR
00001CCA  6000 0022               1637      BRA    GROUPE_SUCCESS
00001CCE                          1638  
00001CCE                          1639  CHECK_OP_ASL:
00001CCE  3038 1000               1640      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001CD2  0240 F118               1641      ANDI.W #$F118,D0
00001CD6  B07C E100               1642      CMP.W  #$E100,D0
00001CDA  6600 000C               1643      BNE    GROUPE_INVALID      ;Last possible OP code
00001CDE  4EB9 00001F08           1644      JSR    PRINT_OP_ASL
00001CE4  6000 0008               1645      BRA    GROUPE_SUCCESS
00001CE8                          1646  
00001CE8                          1647  GROUPE_INVALID:
00001CE8  4EB9 00001CFC           1648      JSR     INVALID_OP
00001CEE                          1649      
00001CEE                          1650  GROUPE_SUCCESS:
00001CEE  4CDF 0001               1651      MOVEM.L (SP)+,D0
00001CF2  4E75                    1652      RTS
00001CF4                          1653  * GROUP_F
00001CF4                          1654  ********************************************************************************
00001CF4                          1655  * Currently no OP codes here are supported. There are no OP codes here
00001CF4                          1656  ********************************************************************************
00001CF4                          1657  C_GROUP_F:
00001CF4  4EB9 00001CFC           1658      JSR INVALID_OP
00001CFA  4E75                    1659      RTS
00001CFC                          1660      
00001CFC                          1661  * INVALID_OP                     
00001CFC                          1662  ********************************************************************************
00001CFC                          1663  * Any value that is not covered in the above groups would be considered invalid. 
00001CFC                          1664  * The following values in the first nibble would also indicate that the 
00001CFC                          1665  * operand codes is already invalid: $7, $A, $F.
00001CFC                          1666  * For unsupported OP codes, display DATA $WXYZ   
00001CFC                          1667  * THIS WILL NEED TO BE CHANGED TO DISPLAY: 1000 DATA $WXYZ IN THE FUTURE
00001CFC                          1668  ********************************************************************************
00001CFC                          1669  INVALID_OP:  ; Prints DATA for invalid op, THIS SHOULD BE SETTING THE IS_VALID BIT TO 0
00001CFC  43F9 00001F3A           1670      LEA P_INVALID_OP,A1
00001D02  103C 000D               1671      MOVE.B #13,D0
00001D06  4E4F                    1672      TRAP #15
00001D08  31FC 0000 1002          1673      MOVE.W #0,IS_VALID
00001D0E  4E75                    1674      RTS
00001D10                          1675      
00001D10                          1676  READ_NEXT_INSTRUCTION: ; Needs to read next instruction set {PLACEHOLDER}
00001D10  FFFF FFFF               1677      SIMHALT
00001D14                          1678  
00001D14                          1679  MAKE_VAL_ASCII:
00001D14  0C00 0009               1680      CMPI.B  #$9,D0
00001D18  6E00 0008               1681      BGT     LETTER_ASCII
00001D1C  6F00 000A               1682      BLE     NUMBER_ASCII
00001D20  4E75                    1683      RTS
00001D22                          1684      
00001D22                          1685  LETTER_ASCII:
00001D22  0600 0037               1686      ADDI.B #$37,D0 ; A-F
00001D26  4E75                    1687      RTS
00001D28                          1688      
00001D28                          1689  NUMBER_ASCII
00001D28  0600 0030               1690      ADDI.B #$30,D0 ; 0-9
00001D2C  4E75                    1691      RTS
00001D2E                          1692      
00001D2E                          1693  ADD_PERIOD:
00001D2E  2F00                    1694      MOVE.L D0,-(SP)
00001D30  103C 0000               1695      MOVE.B #$0,D0
00001D34  0600 0046               1696      ADDI.B #$46,D0
00001D38  201F                    1697      MOVE.L (SP)+,D0
00001D3A                          1698  ********************** PRINTING ROUTINES **************************************
00001D3A                          1699  * Description: These routines are to print the associated op codes, by placing
00001D3A                          1700  * them in the appropriate area to the buffer
00001D3A                          1701  *
00001D3A                          1702  * Registers used: A1 for loading, A6 for EA parsing.
00001D3A                          1703  *
00001D3A                          1704  * Precondition: The relevant opcode has been identified correctly.
00001D3A                          1705  *
00001D3A                          1706  * Postcondition: Prints out the associated opcode to the buffer.
00001D3A                          1707  
00001D3A                          1708  * THIS NEEDS TO BE RETOOLED TO PRINT TO BUFFER NOT TO CONSOLE
00001D3A                          1709  *******************************************************************************
00001D3A                          1710  
00001D3A                          1711  ****************************** GROUP 0 **************************************** 
00001D3A                          1712  PRINT_OP_ORI:
00001D3A  43F9 00001F51           1713      LEA P_OP_ORI,A1
00001D40  4EB9 00001F32           1714      JSR PRINT_OP
00001D46  4E75                    1715      RTS
00001D48                          1716  PRINT_OP_CMPI:
00001D48  43F9 00001F55           1717      LEA P_OP_CMPI,A1
00001D4E  4EB9 00001F32           1718      JSR PRINT_OP
00001D54  4E75                    1719      RTS
00001D56                          1720  PRINT_OP_STATIC_BCLR:
00001D56  43F9 00001F5A           1721      LEA P_OP_STATIC_BCLR,A1
00001D5C  4EB9 00001F32           1722      JSR PRINT_OP
00001D62  4E75                    1723      RTS
00001D64                          1724  PRINT_OP_DYNAMIC_BCLR:
00001D64  43F9 00001F5F           1725      LEA P_OP_DYNAMIC_BCLR,A1
00001D6A  4EB9 00001F32           1726      JSR PRINT_OP
00001D70  4E75                    1727      RTS
00001D72                          1728  ******************************* END OF GROUP 0 ********************************
00001D72                          1729  
00001D72                          1730  ****************************** GROUP 1 ****************************************    
00001D72                          1731  PRINT_OP_MOVEB:
00001D72  43F9 00001F64           1732      LEA P_OP_MOVEB,A1
00001D78  4EB9 00001F32           1733      JSR PRINT_OP
00001D7E  4E75                    1734      RTS
00001D80                          1735  ******************************* END OF GROUP 1 ********************************
00001D80                          1736      
00001D80                          1737  ****************************** GROUP 2 **************************************** 
00001D80                          1738  PRINT_OP_MOVEA_L:
00001D80  43F9 00001F6B           1739      LEA P_OP_MOVEA_L,A1
00001D86  4EB9 00001F32           1740      JSR PRINT_OP
00001D8C  4E75                    1741      RTS
00001D8E                          1742  PRINT_OP_MOVE_L:
00001D8E  43F9 00001F73           1743      LEA P_OP_MOVE_L,A1
00001D94  4EB9 00001F32           1744      JSR PRINT_OP
00001D9A  4E75                    1745      RTS
00001D9C                          1746  ******************************* END OF GROUP 2 ********************************
00001D9C                          1747      
00001D9C                          1748  ****************************** GROUP 3 ****************************************    
00001D9C                          1749  PRINT_OP_MOVEA_W:
00001D9C  43F9 00001F7A           1750      LEA P_OP_MOVEA_W,A1
00001DA2  4EB9 00001F32           1751      JSR PRINT_OP
00001DA8  4E75                    1752      RTS
00001DAA                          1753  PRINT_OP_MOVE_W:
00001DAA  43F9 00001F82           1754      LEA P_OP_MOVE_W,A1
00001DB0  4EB9 00001F32           1755      JSR PRINT_OP
00001DB6  4E75                    1756      RTS
00001DB8                          1757  ******************************* END OF GROUP 3 ********************************
00001DB8                          1758  
00001DB8                          1759  ****************************** GROUP 4 ****************************************
00001DB8                          1760  PRINT_OP_NOP:
00001DB8  43F9 00001FA1           1761      LEA P_OP_NOP,A1
00001DBE  4EB9 00001F32           1762      JSR PRINT_OP
00001DC4  4E75                    1763      RTS
00001DC6                          1764  PRINT_OP_JSR:
00001DC6  43F9 00001F9D           1765      LEA P_OP_JSR,A1
00001DCC  4EB9 00001F32           1766      JSR PRINT_OP
00001DD2  4E75                    1767      RTS
00001DD4                          1768  PRINT_OP_RTS:
00001DD4  43F9 00001FA5           1769      LEA P_OP_RTS,A1
00001DDA  4EB9 00001F32           1770      JSR PRINT_OP
00001DE0  4E75                    1771      RTS
00001DE2                          1772  PRINT_OP_LEA:
00001DE2  43F9 00001F99           1773      LEA P_OP_LEA,A1
00001DE8  4EB9 00001F32           1774      JSR PRINT_OP
00001DEE  4E75                    1775      RTS
00001DF0                          1776  PRINT_OP_NEG:
00001DF0  43F9 00001FA9           1777      LEA P_OP_NEG,A1
00001DF6  4EB9 00001F32           1778      JSR PRINT_OP
00001DFC  4E75                    1779      RTS
00001DFE                          1780  PRINT_OP_MOVEM_W:
00001DFE  43F9 00001F89           1781      LEA P_OP_MOVEM_W,A1
00001E04  4EB9 00001F32           1782      JSR PRINT_OP
00001E0A  4E75                    1783      RTS
00001E0C                          1784  PRINT_OP_MOVEM_L:
00001E0C  43F9 00001F91           1785      LEA P_OP_MOVEM_L,A1
00001E12  4EB9 00001F32           1786      JSR PRINT_OP
00001E18  4E75                    1787      RTS
00001E1A                          1788  ******************************* END OF GROUP 4 ********************************
00001E1A                          1789      
00001E1A                          1790  ****************************** GROUP 5 ****************************************
00001E1A                          1791  PRINT_OP_SUBQ:
00001E1A  43F9 00001FAD           1792      LEA P_OP_SUBQ,A1
00001E20  4EB9 00001F32           1793      JSR PRINT_OP
00001E26  4E75                    1794      RTS
00001E28                          1795  ******************************* END OF GROUP 5 ********************************
00001E28                          1796  
00001E28                          1797  ****************************** GROUP 6 ****************************************
00001E28                          1798  PRINT_OP_BCS:
00001E28  43F9 00001FB6           1799      LEA P_OP_BCS,A1
00001E2E  4EB9 00001F32           1800      JSR PRINT_OP
00001E34  4E75                    1801      RTS
00001E36                          1802  PRINT_OP_BGE:
00001E36  43F9 00001FBA           1803      LEA P_OP_BGE,A1
00001E3C  4EB9 00001F32           1804      JSR PRINT_OP
00001E42  4E75                    1805      RTS
00001E44                          1806  PRINT_OP_BLT:
00001E44  43F9 00001FBE           1807      LEA P_OP_BLT,A1
00001E4A  4EB9 00001F32           1808      JSR PRINT_OP
00001E50  4E75                    1809      RTS
00001E52                          1810  PRINT_OP_BVC:
00001E52  43F9 00001FC2           1811      LEA P_OP_BVC,A1
00001E58  4EB9 00001F32           1812      JSR PRINT_OP
00001E5E  4E75                    1813      RTS
00001E60                          1814  PRINT_OP_BRA:
00001E60  43F9 00001FB2           1815      LEA P_OP_BRA,A1
00001E66  4EB9 00001F32           1816      JSR PRINT_OP
00001E6C  4E75                    1817      RTS
00001E6E                          1818  ******************************* END OF GROUP 6 ********************************
00001E6E                          1819  
00001E6E                          1820  ****************************** GROUP 7 ****************************************
00001E6E                          1821  * No currently supported OP codes to print here.
00001E6E                          1822  ******************************* END OF GROUP 7 ********************************
00001E6E                          1823  
00001E6E                          1824  ****************************** GROUP 8 ****************************************
00001E6E                          1825  PRINT_OP_DIVS:
00001E6E  43F9 00001FC6           1826      LEA P_OP_DIVS,A1
00001E74  4EB9 00001F32           1827      JSR PRINT_OP
00001E7A  4E75                    1828      RTS
00001E7C                          1829  PRINT_OP_OR:
00001E7C  43F9 00001FCB           1830      LEA P_OP_OR,A1
00001E82  4EB9 00001F32           1831      JSR PRINT_OP
00001E88  4E75                    1832      RTS
00001E8A                          1833  ******************************* END OF GROUP 8 ********************************
00001E8A                          1834  
00001E8A                          1835  ****************************** GROUP 9 ****************************************
00001E8A                          1836  PRINT_OP_SUB:
00001E8A  43F9 00001FCE           1837      LEA P_OP_SUB,A1
00001E90  4EB9 00001F32           1838      JSR PRINT_OP
00001E96  4E75                    1839      RTS
00001E98                          1840  ******************************* END OF GROUP 9 ********************************
00001E98                          1841  
00001E98                          1842  ****************************** GROUP A ****************************************
00001E98                          1843  * No currently supported OP codes to print here.
00001E98                          1844  ******************************* END OF GROUP A ********************************
00001E98                          1845  
00001E98                          1846  ****************************** GROUP B ****************************************
00001E98                          1847  PRINT_OP_EOR:
00001E98  43F9 00001FD2           1848      LEA P_OP_EOR,A1
00001E9E  4EB9 00001F32           1849      JSR PRINT_OP
00001EA4  4E75                    1850      RTS
00001EA6                          1851  PRINT_OP_CMP:
00001EA6  43F9 00001FD6           1852      LEA P_OP_CMP,A1
00001EAC  4EB9 00001F32           1853      JSR PRINT_OP
00001EB2  4E75                    1854      RTS
00001EB4                          1855  ******************************* END OF GROUP B ********************************
00001EB4                          1856  
00001EB4                          1857  ****************************** GROUP C ****************************************
00001EB4                          1858  PRINT_OP_MULS:
00001EB4  43F9 00001FDA           1859      LEA P_OP_MULS,A1
00001EBA  4EB9 00001F32           1860      JSR PRINT_OP
00001EC0  4E75                    1861      RTS
00001EC2                          1862  ******************************* END OF GROUP C ********************************
00001EC2                          1863  
00001EC2                          1864  ****************************** GROUP D ****************************************
00001EC2                          1865  PRINT_OP_ADD:
00001EC2  43F9 00001FE4           1866      LEA P_OP_ADD,A1
00001EC8  4EB9 00001F32           1867      JSR PRINT_OP
00001ECE  4E75                    1868      RTS
00001ED0                          1869  PRINT_OP_ADDA:
00001ED0  43F9 00001FDF           1870      LEA P_OP_ADDA,A1
00001ED6  4EB9 00001F32           1871      JSR PRINT_OP
00001EDC  4E75                    1872      RTS
00001EDE                          1873  
00001EDE                          1874  ******************************* END OF GROUP D ********************************
00001EDE                          1875  
00001EDE                          1876  ****************************** GROUP E ****************************************
00001EDE                          1877  PRINT_OP_LSL:
00001EDE  43F9 00001FEC           1878      LEA P_OP_LSL,A1
00001EE4  4EB9 00001F32           1879      JSR PRINT_OP
00001EEA  4E75                    1880      RTS
00001EEC                          1881  PRINT_OP_LSR:
00001EEC  43F9 00001FE8           1882      LEA P_OP_LSR,A1
00001EF2  4EB9 00001F32           1883      JSR PRINT_OP
00001EF8  4E75                    1884      RTS
00001EFA                          1885  PRINT_OP_ASR:
00001EFA  43F9 00001FF0           1886      LEA P_OP_ASR,A1
00001F00  4EB9 00001F32           1887      JSR PRINT_OP
00001F06  4E75                    1888      RTS
00001F08                          1889  PRINT_OP_ASL:
00001F08  43F9 00001FF4           1890      LEA P_OP_ASL,A1
00001F0E  4EB9 00001F32           1891      JSR PRINT_OP
00001F14  4E75                    1892      RTS
00001F16                          1893  PRINT_OP_ROL:
00001F16  43F9 00001FFC           1894      LEA P_OP_ROL,A1
00001F1C  4EB9 00001F32           1895      JSR PRINT_OP
00001F22  4E75                    1896      RTS
00001F24                          1897  PRINT_OP_ROR:
00001F24  43F9 00001FF8           1898      LEA P_OP_ROR,A1
00001F2A  4EB9 00001F32           1899      JSR PRINT_OP
00001F30  4E75                    1900      RTS
00001F32                          1901  ******************************* END OF GROUP E ********************************
00001F32                          1902  
00001F32                          1903  ****************************** GROUP F ****************************************
00001F32                          1904  * No currently supported OP codes to print here.
00001F32                          1905  ******************************* END OF GROUP F ********************************
00001F32                          1906  
00001F32                          1907  
00001F32                          1908  
00001F32                          1909  PRINT_OP:   ;Prints current op code byte
00001F32                          1910      ;MOVE.W (A4),(A1)       ; NEEDS TO USE G_BUFFER LATER
00001F32  103C 000D               1911      MOVE.B #13,D0
00001F36  4E4F                    1912      TRAP #15
00001F38  4E75                    1913      RTS
00001F3A                          1914  ******************* END OF PRINTING ROUTINES **********************************
00001F3A                          1915  
00001F3A                          1916  ******************* END OF JMP LABELS *****************************************
00001F3A                          1917  
00001F3A                          1918  ******************* DATA CONSTANT PRINTS **************************************
00001F3A                          1919  * Formatting is as follows: P_OP_<OPCODE>, where P = Print, OP = Operation,
00001F3A                          1920  * <OPCODE> is any valid operand
00001F3A                          1921  
00001F3A= 44 41 54 41 00          1922  P_INVALID_OP    DC.B    'DATA',0
00001F3F= 46 6F 75 6E 64 20 ...   1923  OP_FOUND        DC.B    'Found OP',0 ; this should be taken out later
00001F48= 2E 42 00                1924  P_SIZE_B        DC.B    '.B',0
00001F4B= 2E 57 00                1925  P_SIZE_W        DC.B    '.W',0
00001F4E= 2E 4C 00                1926  P_SIZE_L        DC.B    '.L',0
00001F51= 4F 52 49 00             1927  P_OP_ORI        DC.B    'ORI',0
00001F55= 43 4D 50 49 00          1928  P_OP_CMPI       DC.B    'CMPI',0
00001F5A= 42 43 4C 52 00          1929  P_OP_STATIC_BCLR     DC.B    'BCLR',0
00001F5F= 42 43 4C 52 00          1930  P_OP_DYNAMIC_BCLR     DC.B    'BCLR',0
00001F64= 4D 4F 56 45 2E 42 00    1931  P_OP_MOVEB      DC.B    'MOVE.B',0
00001F6B= 4D 4F 56 45 41 2E ...   1932  P_OP_MOVEA_L    DC.B    'MOVEA.L',0 
00001F73= 4D 4F 56 45 2E 4C 00    1933  P_OP_MOVE_L     DC.B    'MOVE.L',0
00001F7A= 4D 4F 56 45 41 2E ...   1934  P_OP_MOVEA_W    DC.B    'MOVEA.W',0
00001F82= 4D 4F 56 45 2E 57 00    1935  P_OP_MOVE_W     DC.B    'MOVE.W',0
00001F89= 4D 4F 56 45 4D 2E ...   1936  P_OP_MOVEM_W    DC.B    'MOVEM.W',0
00001F91= 4D 4F 56 45 4D 2E ...   1937  P_OP_MOVEM_L    DC.B    'MOVEM.L',0
00001F99= 4C 45 41 00             1938  P_OP_LEA        DC.B    'LEA',0
00001F9D= 4A 53 52 00             1939  P_OP_JSR        DC.B    'JSR',0
00001FA1= 4E 4F 50 00             1940  P_OP_NOP        DC.B    'NOP',0
00001FA5= 52 54 53 00             1941  P_OP_RTS        DC.B    'RTS',0
00001FA9= 4E 45 47 00             1942  P_OP_NEG        DC.B    'NEG',0
00001FAD= 53 55 42 51 00          1943  P_OP_SUBQ       DC.B    'SUBQ',0
00001FB2= 42 52 41 00             1944  P_OP_BRA        DC.B    'BRA',0
00001FB6= 42 43 53 00             1945  P_OP_BCS        DC.B    'BCS',0
00001FBA= 42 47 45 00             1946  P_OP_BGE        DC.B    'BGE',0
00001FBE= 42 4C 54 00             1947  P_OP_BLT        DC.B    'BLT',0
00001FC2= 42 56 43 00             1948  P_OP_BVC        DC.B    'BVC',0
00001FC6= 44 49 56 53 00          1949  P_OP_DIVS       DC.B    'DIVS',0
00001FCB= 4F 52 00                1950  P_OP_OR         DC.B    'OR',0
00001FCE= 53 55 42 00             1951  P_OP_SUB        DC.B    'SUB',0
00001FD2= 45 4F 52 00             1952  P_OP_EOR        DC.B    'EOR',0
00001FD6= 43 4D 50 00             1953  P_OP_CMP        DC.B    'CMP',0
00001FDA= 4D 55 4C 53 00          1954  P_OP_MULS       DC.B    'MULS',0
00001FDF= 41 44 44 41 00          1955  P_OP_ADDA       DC.B    'ADDA',0
00001FE4= 41 44 44 00             1956  P_OP_ADD        DC.B    'ADD',0
00001FE8= 4C 53 52 00             1957  P_OP_LSR        DC.B    'LSR',0
00001FEC= 4C 53 4C 00             1958  P_OP_LSL        DC.B    'LSL',0
00001FF0= 41 53 52 00             1959  P_OP_ASR        DC.B    'ASR',0
00001FF4= 41 53 4C 00             1960  P_OP_ASL        DC.B    'ASL',0
00001FF8= 52 4F 52 00             1961  P_OP_ROR        DC.B    'ROR',0
00001FFC= 52 4F 4C 00             1962  P_OP_ROL        DC.B    'ROL',0
00002000                          1963  ***************** END OF DATA CONSTANT PRINTS ***********************************
00002000                          1964   
00002000                          1965  
00002000                          1966  **
00002000                          1967  * AddStrToBuffer
00002000                          1968  **
00002000                          1969  * Adds the given NULL-terminated string to the specified buffer.
00002000                          1970  *
00002000                          1971  * Default buffer length is 80 characters, but can be modified in the argument
00002000                          1972  * variables.
00002000                          1973  *
00002000                          1974  * If the buffer length is exceeded, either due to lack of a NULL character or
00002000                          1975  * an incorrectly specified length, 1 is returned. Otherwise, 0 is returned to
00002000                          1976  * indicate success.
00002000                          1977  *
00002000                          1978  **
00002000                          1979  * @param Arg_AddStrToBuffer_String              Pointer to string
00002000                          1980  * @param Arg_AddStrToBuffer_Buffer              Pointer to buffer
00002000                          1981  * @param Arg_AddStrToBuffer_BufferLength        Length of buffer (default 80 chars)
00002000                          1982  * @return Ret_AddStrToBuffer_Success            0 if successful, 1 otherwise.
00002000                          1983  * @branch _AddStrToBuffer_FindBufferNullLoop    Loop to find NULL in buffer
00002000                          1984  * @branch _AddStrToBuffer_AddLoop               Loop to add string to buffer
00002000                          1985  * @branch _AddStrToBuffer_Success               Branch when string successfully added
00002000                          1986  * @branch _AddStrToBuffer_StringLengthExceeded  Branch when length exceeded (either string or buffer)
00002000                          1987  * @branch _AddStrToBuffer_End                   End of subroutine
00002000                          1988  **
00002000                          1989  Arg_AddStrToBuffer_String           DS.L    1
00002004                          1990  Arg_AddStrToBuffer_Buffer           DS.L    1
00002008= 00000050                1991  Arg_AddStrToBuffer_BufferLength     DC.L    80
0000200C                          1992  Ret_AddStrToBuffer_Success          DS.B    1
0000200D                          1993  
0000200E                          1994  AddStrToBuffer:                     DS.W    0
0000200E  48E7 C0C0               1995      MOVEM.L     D0-D1/A0-A1, -(SP)                  * Backup registers to stack
00002012                          1996  
00002012  2078 2000               1997      MOVE.L      Arg_AddStrToBuffer_String, A0       * Load string pointer
00002016  2278 2004               1998      MOVE.L      Arg_AddStrToBuffer_Buffer, A1       * Load buffer pointer
0000201A  2038 2008               1999      MOVE.L      Arg_AddStrToBuffer_BufferLength, D0 * Load buffer length
0000201E  4278 200C               2000      CLR.W       Ret_AddStrToBuffer_Success          * Clear success bit
00002022  4281                    2001      CLR.L       D1                                  * Clear loop counter
00002024                          2002  
00002024                          2003  _AddStrToBuffer_BufferLoop
00002024  0C11 0000               2004      CMPI.B      #0, (A1)                            * If buffer char is NULL
00002028  6700 000E               2005      BEQ         _AddStrToBuffer_AddLoop             * Start adding string to bufer
0000202C                          2006      
0000202C  B280                    2007      CMP.L       D0, D1                              * If counter >= max length
0000202E  6C00 0024               2008      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
00002032                          2009      
00002032  5289                    2010      ADDQ.L      #1, A1                              * Go to next character
00002034  5201                    2011      ADDQ.B      #1, D1                              * Increment counter
00002036  60EC                    2012      BRA         _AddStrToBuffer_BufferLoop          * Loop back
00002038                          2013      
00002038                          2014  _AddStrToBuffer_AddLoop
00002038  0C10 0000               2015      CMPI.B      #0, (A0)                            * If string char is NULL
0000203C  6700 000E               2016      BEQ         _AddStrToBuffer_Success             * String successfully added
00002040                          2017      
00002040  B200                    2018      CMP.B       D0, D1                              * If counter >= max length
00002042  6C00 0010               2019      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
00002046                          2020      
00002046  12D8                    2021      MOVE.B      (A0)+, (A1)+                        * Move string char to buffer char
00002048  5201                    2022      ADDQ.B      #1, D1                              * Increment counter
0000204A  60EC                    2023      BRA         _AddStrToBuffer_AddLoop             * Loop back
0000204C                          2024  
0000204C                          2025  _AddStrToBuffer_Success
0000204C  12BC 0000               2026      MOVE.B      #0, (A1)                            * Add NULL to end of string
00002050  6000 0008               2027      BRA         _AddStrToBuffer_End                 * Finish subroutine
00002054                          2028  
00002054                          2029  _AddStrToBuffer_LengthExceeded
00002054  31FC 0001 200C          2030      MOVE.W      #1, Ret_AddStrToBuffer_Success      * Invalidate success bit
0000205A                          2031  
0000205A                          2032  _AddStrToBuffer_End
0000205A  4CDF 0303               2033      MOVEM.L     (SP)+, D0-D1/A0-A1                  * Restore registers from stack
0000205E  4E75                    2034      RTS                  
00002060                          2035     
00002060                          2036      END START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDSTRTOBUFFER      200E
ADD_PERIOD          1D2E
ARG_ADDSTRTOBUFFER_BUFFER  2004
ARG_ADDSTRTOBUFFER_BUFFERLENGTH  2008
ARG_ADDSTRTOBUFFER_STRING  2000
BIT_CHECK_EXG       1AC4
BIT_CHECK_EXT       16BC
BIT_CHECK_MOVEP     142E
BIT_CHECK_SUBX      19EE
B_BUFFER            1054
CHECK_OP_ABCD       1A9C
CHECK_OP_ADD        1B46
CHECK_OP_ADDA       1B32
CHECK_OP_ADDI       138E
CHECK_OP_ADDQ       1868
CHECK_OP_ADDX       1B1E
CHECK_OP_AND        1AFE
CHECK_OP_ANDI       1366
CHECK_OP_ANDI_TO_CCR  1326
CHECK_OP_ANDI_TO_SR  1336
CHECK_OP_ASL        1CCE
CHECK_OP_ASL_NO_ROT  1C0A
CHECK_OP_ASR        1CB4
CHECK_OP_ASR_NO_ROT  1BF0
CHECK_OP_BCS        18D4
CHECK_OP_BGE        18EE
CHECK_OP_BLT        1908
CHECK_OP_BRA        18BA
CHECK_OP_BSR        18A6
CHECK_OP_BVC        1922
CHECK_OP_CHK        179E
CHECK_OP_CLR        1680
CHECK_OP_CMP        1A64
CHECK_OP_CMPA       1A3C
CHECK_OP_CMPI       1476
CHECK_OP_CMPM       1A28
CHECK_OP_DBCC       1840
CHECK_OP_DIVS       1998
CHECK_OP_DIVU       1970
CHECK_OP_DYNAMIC_BCHG  1406
CHECK_OP_DYNAMIC_BCLR  14AA
CHECK_OP_DYNAMIC_BSET  141A
CHECK_OP_DYNAMIC_BTST  13F2
CHECK_OP_EOR        1A50
CHECK_OP_EORI       13A2
CHECK_OP_EORI_TO_CCR  1346
CHECK_OP_EORI_TO_SR  1356
CHECK_OP_EXG        1AB0
CHECK_OP_EXT        16A8
CHECK_OP_ILLEGAL    15F0
CHECK_OP_JMP        178A
CHECK_OP_JSR        17E2
CHECK_OP_LEA        17C8
CHECK_OP_LINK       174E
CHECK_OP_LSL        1C9A
CHECK_OP_LSL_NO_ROT  1BD6
CHECK_OP_LSR        1C80
CHECK_OP_LSR_NO_ROT  1BBC
CHECK_OP_MOVEA_L    14FE
CHECK_OP_MOVEA_W    1560
CHECK_OP_MOVEM      1816
CHECK_OP_MOVEP      1448
CHECK_OP_MOVEQ      194C
CHECK_OP_MOVE_B     14D4
CHECK_OP_MOVE_FROM_SR  1630
CHECK_OP_MOVE_L     1536
CHECK_OP_MOVE_TO_CCR  1644
CHECK_OP_MOVE_TO_SR  1658
CHECK_OP_MOVE_USP   1776
CHECK_OP_MOVE_W     1598
CHECK_OP_MULS       1AEA
CHECK_OP_MULU       1A88
CHECK_OP_NBCD       16D6
CHECK_OP_NEG        17FC
CHECK_OP_NEGX       166C
CHECK_OP_NOP        15E0
CHECK_OP_NOT        1694
CHECK_OP_OR         19AC
CHECK_OP_ORI        145C
CHECK_OP_ORI_TO_CCR  1306
CHECK_OP_ORI_TO_SR  1316
CHECK_OP_PEA        16FE
CHECK_OP_RESET      15D0
CHECK_OP_ROL        1C66
CHECK_OP_ROL_NO_ROT  1BA2
CHECK_OP_ROR        1C4C
CHECK_OP_ROR_NO_ROT  1B88
CHECK_OP_ROXL       1C38
CHECK_OP_ROXL_NO_ROT  1B74
CHECK_OP_ROXR       1C24
CHECK_OP_ROXR_NO_ROT  1B60
CHECK_OP_RTE        1600
CHECK_OP_RTR        1620
CHECK_OP_RTS        17B2
CHECK_OP_SBCD       1984
CHECK_OP_SCC        1854
CHECK_OP_STATIC_BCHG  13CA
CHECK_OP_STATIC_BCLR  1490
CHECK_OP_STATIC_BSET  13DE
CHECK_OP_STATIC_BTST  13B6
CHECK_OP_STOP       15C0
CHECK_OP_SUB        1A0C
CHECK_OP_SUBA       19C6
CHECK_OP_SUBI       137A
CHECK_OP_SUBQ       187C
CHECK_OP_SUBX       19DA
CHECK_OP_SWAP       16EA
CHECK_OP_TAS        1712
CHECK_OP_TRAP       173A
CHECK_OP_TRAPV      1610
CHECK_OP_TST        1726
CHECK_OP_UNLK       1762
CUR_OP_CODE         1000
C_GROUP_0           1302
C_GROUP_1           14D0
C_GROUP_2           14FA
C_GROUP_3           155C
C_GROUP_4           15BE
C_GROUP_5           183C
C_GROUP_6           18A2
C_GROUP_7           1948
C_GROUP_8           196C
C_GROUP_9           19C2
C_GROUP_A           1A1C
C_GROUP_B           1A24
C_GROUP_C           1A84
C_GROUP_D           1B1A
C_GROUP_E           1B5C
C_GROUP_F           1CF4
EA_SIZE             1003
FIND_2_BIT_SIZE_TO_EA  122C
FIND_3_BIT_REG_TO_EA  1242
FIND_MOVEA_L_DIFFERENCE  1510
FIND_MOVEA_W_DIFFERENCE  1572
FIND_TRAILING_BITS_TO_EA  129E
FIRST_3             10A5
FOURTH_3            10A8
GROUP0_INVALID      14C4
GROUP0_SUCCESS      14CA
GROUP1_INVALID      14EE
GROUP1_SUCCESS      14F4
GROUP2_INVALID      1550
GROUP2_SUCCESS      1556
GROUP3_INVALID      15B2
GROUP3_SUCCESS      15B8
GROUP4_INVALID      1830
GROUP4_SUCCESS      1836
GROUP5_INVALID      1896
GROUP5_SUCCESS      189C
GROUP6_INVALID      193C
GROUP6_SUCCESS      1942
GROUP7_INVALID      1960
GROUP7_SUCCESS      1966
GROUP8_INVALID      19B6
GROUP8_SUCCESS      19BC
GROUP9_INVALID      1A12
GROUP9_SUCCESS      1A16
GROUPB_INVALID      1A78
GROUPB_SUCCESS      1A7E
GROUPC_INVALID      1B0E
GROUPC_SUCCESS      1B14
GROUPD_INVALID      1B50
GROUPD_SUCCESS      1B56
GROUPE_INVALID      1CE8
GROUPE_SUCCESS      1CEE
GROUP_0             10E4
GROUP_1             10F6
GROUP_2             1108
GROUP_3             111A
GROUP_4             112C
GROUP_5             113E
GROUP_6             1150
GROUP_7             1162
GROUP_8             1174
GROUP_9             1186
GROUP_A             1198
GROUP_B             11AA
GROUP_C             11BC
GROUP_D             11CE
GROUP_E             11E0
GROUP_F             11F2
G_BUFFER            1004
INVALID_OP          1CFC
IS_VALID            1002
LETTER_ASCII        1D22
LOAD_OP_CODE        10CC
MAKE_VAL_ASCII      1D14
MNEMONIC            10A4
MOVE_AND_MOVEA_PARSE_EA  1258
MOVE_LAST_6_BITS_TO_EA  120A
NUMBER_ASCII        1D28
OP_FOUND            1F3F
OP_JSR_DONE         1200
OP_JSR_ROUTINE      10DC
PARSE_EA_CONSTANT_BITS  12B4
PRINT_OP            1F32
PRINT_OP_ADD        1EC2
PRINT_OP_ADDA       1ED0
PRINT_OP_ASL        1F08
PRINT_OP_ASR        1EFA
PRINT_OP_BCS        1E28
PRINT_OP_BGE        1E36
PRINT_OP_BLT        1E44
PRINT_OP_BRA        1E60
PRINT_OP_BVC        1E52
PRINT_OP_CMP        1EA6
PRINT_OP_CMPI       1D48
PRINT_OP_DIVS       1E6E
PRINT_OP_DYNAMIC_BCLR  1D64
PRINT_OP_EOR        1E98
PRINT_OP_JSR        1DC6
PRINT_OP_LEA        1DE2
PRINT_OP_LSL        1EDE
PRINT_OP_LSR        1EEC
PRINT_OP_MOVEA_L    1D80
PRINT_OP_MOVEA_W    1D9C
PRINT_OP_MOVEB      1D72
PRINT_OP_MOVEM_L    1E0C
PRINT_OP_MOVEM_W    1DFE
PRINT_OP_MOVE_L     1D8E
PRINT_OP_MOVE_W     1DAA
PRINT_OP_MULS       1EB4
PRINT_OP_NEG        1DF0
PRINT_OP_NOP        1DB8
PRINT_OP_OR         1E7C
PRINT_OP_ORI        1D3A
PRINT_OP_ROL        1F16
PRINT_OP_ROR        1F24
PRINT_OP_RTS        1DD4
PRINT_OP_STATIC_BCLR  1D56
PRINT_OP_SUB        1E8A
PRINT_OP_SUBQ       1E1A
P_INVALID_OP        1F3A
P_OP_ADD            1FE4
P_OP_ADDA           1FDF
P_OP_ASL            1FF4
P_OP_ASR            1FF0
P_OP_BCS            1FB6
P_OP_BGE            1FBA
P_OP_BLT            1FBE
P_OP_BRA            1FB2
P_OP_BVC            1FC2
P_OP_CMP            1FD6
P_OP_CMPI           1F55
P_OP_DIVS           1FC6
P_OP_DYNAMIC_BCLR   1F5F
P_OP_EOR            1FD2
P_OP_JSR            1F9D
P_OP_LEA            1F99
P_OP_LSL            1FEC
P_OP_LSR            1FE8
P_OP_MOVEA_L        1F6B
P_OP_MOVEA_L_A_L    10B6
P_OP_MOVEA_L_T      10AA
P_OP_MOVEA_W        1F7A
P_OP_MOVEB          1F64
P_OP_MOVEM_L        1F91
P_OP_MOVEM_W        1F89
P_OP_MOVE_L         1F73
P_OP_MOVE_W         1F82
P_OP_MULS           1FDA
P_OP_NEG            1FA9
P_OP_NOP            1FA1
P_OP_OR             1FCB
P_OP_ORI            1F51
P_OP_ROL            1FFC
P_OP_ROR            1FF8
P_OP_RTS            1FA5
P_OP_STATIC_BCLR    1F5A
P_OP_SUB            1FCE
P_OP_SUBQ           1FAD
P_SIZE_B            1F48
P_SIZE_L            1F4E
P_SIZE_W            1F4B
READ_NEXT_INSTRUCTION  1D10
RET_ADDSTRTOBUFFER_SUCCESS  200C
SECOND_3            10A6
START               10BE
THIRD_3             10A7
_ADDSTRTOBUFFER_ADDLOOP  2038
_ADDSTRTOBUFFER_BUFFERLOOP  2024
_ADDSTRTOBUFFER_END  205A
_ADDSTRTOBUFFER_LENGTHEXCEEDED  2054
_ADDSTRTOBUFFER_SUCCESS  204C
