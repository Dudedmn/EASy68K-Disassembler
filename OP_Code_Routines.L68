000010BE Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/11/2019 6:45:42 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OP Code routines for Disassembler
00000000                             3  * Written by : Daniel Yan
00000000                             4  * Date       : 2/28/2019, Updated 3/9/2019
00000000                             5  
00000000                             6  * Description: Op code determining to identify values
00000000                             7  
00000000                             8  
00000000                             9  ;FAHAD CODE
00000000                            10  ; ORG place for G_BUFFER
00000000                            11  ; ORG place for CUR_OP_CODE
00000000                            12  ; ORG place for VALID_OP_CODE
00000000                            13  ; ORG place for all other constants
00000000                            14  ; ORG START $1000
00000000                            15  ; WE NEED TO SEE APPROX HOW MUCH ADDRESS SPACE ALL OUR ROUTINES COVER
00000000                            16  ; ORG OUR CONSTANTS/BUFFERS AT A SAFE DISTANCE BETWEEN ROUTINES AND TEST PROGRAM
00000000                            17  
00000000                            18  ; MEMORY_ADDRESS OPCODE $HEX_VALUE
00000000                            19  ;G_BUFFER
00000000                            20  ; 1254 RTS $4E75
00000000                            21  ;B_BUFFER
00000000                            22  ; 1254 DATA $CURRENT_OP
00000000                            23  
00000000                            24  ; JSR INVALID_OP
00000000                            25  ; 
00000000                            26  
00000000                            27  ; 8800 MOVEA.L A3,A6 $3FCA
00000000                            28  ; 8800 DATA $3FCA
00000000                            29  
00001000                            30    ORG $1000 ; Start at Address $1000
00001000                            31  CUR_OP_CODE DS.W 1  ; Current OP Code Word
00001002                            32  ;$4E75 -> CUR_OP_CODE
00001002                            33  VALID_OP_CODE DS.B 1
00001004                            34  EA_SIZE     DS.W 1
00001006                            35  G_BUFFER    DS.B 80
00001056                            36  B_BUFFER    DS.B 80
000010A6                            37  
000010A6= 4D4F5645 412E4C00 ...     38  P_OP_MOVEA_L_T  DC.L    'MOVEA.L',0
000010B2= 412E4C00 00000000         39  P_OP_MOVEA_L_A_L DC.L   'A.L',0
000010BA  49F8 1006                 40      LEA G_BUFFER,A4
000010BE                            41  START
000010BE                            42  
000010BE                            43      ; Start the op code routine
000010BE  49F8 1006                 44      LEA G_BUFFER, A4
000010C2  18BC 0000                 45      MOVE.B #0, (A4)
000010C6                            46      
000010C6  201D                      47      MOVE.L (A5)+, D0
000010C8                            48      
000010C8                            49      ; Load the message onto A4
000010C8  23FC 000010A6 000017DC    50      MOVE.L #P_OP_MOVEA_L_T, Arg_AddStrToBuffer_String
000010D2  23FC 00001006 000017E0    51      MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer 
000010DC                            52      
000010DC                            53      
000010DC  4EB9 000017EA             54      JSR AddStrToBuffer
000010E2                            55      ;LEA G_BUFFER, A4   ; Load the value of the message onto the G_BUFFER
000010E2                            56      ;MOVE.L P_OP_MOVEA_L_T,(A4)+
000010E2                            57      ;MOVE.L P_OP_MOVEA_L_A_L,(A4)+
000010E2                            58      
000010E2                            59      
000010E2                            60      
000010E2                            61  
000010E2                            62      ; AFTER THIS POINT THE BUFFER HAS THIS 'MOVE' + 'A.L'          ; Increment 4 spaces in the address
000010E2                            63      
000010E2                            64      
000010E2                            65         
000010E2                            66      
000010E2                            67     
000010E2                            68     ;This is the right area for pointer now, however when I add here it can't go
000010E2                            69     ;back 
000010E2                            70  *********************************************************************************
000010E2                            71  * Here I'm attempting to 'skip' forward in the address to find the proper location for the string
000010E2                            72  * In the prior command 'LEA P_OP_MOVEA_L,A4' I have loaded 'MOVE' into address space. I cannot move
000010E2                            73  * more than 4 bytes (long) at a single time, so I need to move 'A.L' after which is 3 more bytes
000010E2                            74  * So what I need to do is LOAD 'MOVE' into the address space, skip 4 bytes, then load 'A.L' right
000010E2                            75  * after 'MOVE'. So this would show 'MOVEA.L' in the address space. Which then Denny can load his stuff
000010E2                            76  * after mine.
000010E2                            77  *
000010E2                            78  *In the ideal world this would look something like: P_OP_MOVEA_L then P_OP_A_L then _P_OP_TAB
000010E2                            79  * which would appear as 'MOVEA.L    ' in the address space. This would require 4 increments
000010E2                            80  * after MOVE, then 'A.L' being inserted, then 3 increments (or 7 from start) for the tab
000010E2                            81  ********************************************************************************* 
000010E2                            82      
000010E2                            83      ;ADD.L $FFFF,G_BUFFER_PREP
000010E2                            84      ;LEA P_OP_A_L,A1
000010E2                            85      ;MOVE.L (A4),G_BUFFER_PREP
000010E2                            86      
000010E2                            87  ***************************** Input Tests ********************************************
000010E2                            88      ;MOVE.W #%0000100010000010,CUR_OP_CODE       ;Static BCLR
000010E2                            89      ;MOVE.W #%0000111110001110,CUR_OP_CODE       ;Dynamic BCLR
000010E2                            90      ;MOVE.W #%0000000001000001,CUR_OP_CODE       ;ORI.W D1
000010E2                            91      
000010E2                            92      ;MOVE.W #%0000111110001110,D0              ;Dynamic BCLR
000010E2                            93      ;IN HEX $018E. D7 = 110, D6 = 001, D4 = %110, D5 = 7, (A6) = %0000
000010E2                            94      ;MOVE.W #%0000100010001110,D0              ;Static BCLR
000010E2                            95      ;IN HEX $018E. D7 = 110, D6 = 001, D4 = %110, D5 = 7, (A6) = %0000
000010E2                            96     
000010E2                            97      ;MOVE.W  #$018E,D0                        ;Dynamic BCLR in hex
000010E2                            98      ;MOVE.W  #$02FF,(A6)                         ;INVALID_OP code
000010E2                            99      ;MOVE.W #%0000110001010111,(A6)
000010E2                           100      ;MOVE.W #%0010011001001101,D0                       ;MOVEA  
000010E2                           101       ;MOVE.W #%0010001001001101,CUR_OP_CODE              ;MOVEA.L A5,A1
000010E2                           102      ;MOVE.W CUR_OP_CODE,(A6)
000010E2                           103      ;MOVE.W #$264D
000010E2                           104      ;Expected values:
000010E2                           105      ;D7, DST REG:   011
000010E2                           106      ;D6, DST MODE:  001
000010E2                           107      ;D5, SRC REG:   101
000010E2                           108      ;D4, SRC MODE:  001
000010E2                           109      ;CHECK IF DST MODE IS %111 or SRC MODE IS %111 for MOVE
000010E2                           110      ;(A3), DST TRAIL:  001
000010E2                           111      ;(A2), SRC TRAIL: ONLY FOR MOVE
000010E2                           112      ;MOVE.W #%0010000000001101,(A6)              ;MOVE.L A5,A1
000010E2                           113      ;MOVE.W #%0011011001001101,(A6)              ;MOVEA.W A5,A1
000010E2                           114      ;MOVE.W #%0011000000001101,(A6)              ;MOVE.W A5,A1
000010E2                           115      ;MOVE.W #%0000000001000001,(A6)              ;ORI.W D1
000010E2                           116      ;MOVE.W CUR_OP_CODE,A6                       ;Loading memory space to address register
000010E2                           117      ;MOVE.W CUR_OP_CODE,(A6)                     ;Loading memory value to address value
000010E2                           118   
000010E2                           119      ****GROUP 4 tests****
000010E2                           120      ;MOVE.W #$4E75,D0                            ;RTS
000010E2                           121      ;MOVE.W #$4E71,D0                            ;NOP
000010E2                           122      ;MOVE.W #$4415,D0                            ;NEG.L D5
000010E2                           123      ;MOVE.W #$43CC,D0                            ;LEA A1,A6
000010E2                           124      ;MOVE.W #%0100100010001110
000010E2                           125      ;MOVE.W #$488E,D0                            ;MOVEM.W Reg to Mem, A6
000010E2                           126      ;OVE.W #$4C8E,D0                             ;MOVEM.W Mem to Reg, A6
000010E2                           127      ;MOVE.W #$4E95,D0                            ;JSR (A5)               
000010E2                           128      ****GROUP 5 tests****
000010E2                           129      ;MOVE.W #%0101111110001111
000010E2  303C 5F8F                130      MOVE.W #$5F8F,D0
000010E6                           131     
000010E6                           132     
000010E6                           133  ************************************************************************************
000010E6                           134  LOAD_OP_CODE:
000010E6  31C0 1000                135      MOVE.W D0,CUR_OP_CODE
000010EA  3CB8 1000                136      MOVE.W CUR_OP_CODE,(A6)
000010EE  3016                     137      MOVE.W (A6),D0          ;Load current instruction set into D0
000010F0  4EB9 000010F6            138      JSR OP_JSR_Routine      ;Use the JSR routine to identify the op code
000010F6                           139  *-----------------------------------------------------------
000010F6                           140  *First Nibble Values (15-12)
000010F6                           141  *Value                  Operations
000010F6                           142  *$0                     GROUP_0: ORI,BCLR (static and dynamic),CMPI --- Partial, needs SIZE print for ORI, BCLR, CMPI
000010F6                           143  *$1                     GROUP_1: MOVE.B                             --- Partial, needs trailing bits
000010F6                           144  *$2                     GROUP_2: MOVE.L, MOVEA.L                    --- Partial, needs trailing bits
000010F6                           145  *$3                     GROUP_3: MOVE.W, MOVEA.W                    --- Partial, needs trailing bits
000010F6                           146  *$4                     GROUP_4: LEA,JSR,RTS,NEG,MOVEM              --- Partial, needs SIZE print for NEG, MOVE
000010F6                           147  *$5                     GROUP_5: SUBQ                               --- Partial, needs SIZE pri
000010F6                           148  *$6                     GROUP_6: Bcc(BCS,BGE,BLT,BVC), BRA          --- Not started
000010F6                           149  *$7                     GROUP_7: INVALID_OP                         --- DONE
000010F6                           150  *$8                     GROUP_8: DIVS, OR                           --- Not started
000010F6                           151  *$9                     GROUP_9: SUB                                --- Not started
000010F6                           152  *$A                     GROUP_A: INVALID_OP                         --- DONE
000010F6                           153  *$B                     GROUP_B: EOR, CMP                           --- Not started
000010F6                           154  *$C                     GROUP_C: MULS                               --- Not started
000010F6                           155  *$D                     GROUP_D: ADD, ADDA                          --- Not started
000010F6                           156  *$E                     GROUP_E: LSR, LSL, ASR, ASL, ROL, ROR       --- Not started
000010F6                           157  *$F                     GROUP_F: INVALID_OP                         --- DONE
000010F6                           158  
000010F6                           159  
000010F6                           160  * OP_JSR_Routine
000010F6                           161  **********************************************************************************
000010F6                           162  * Description: Catalog all supported OP codes into groupings based on their hex
000010F6                           163  * values. Sort the supported OP codes by looking at the first nibble for their
000010F6                           164  * grouping value. Call underlying subroutines for further identification of the
000010F6                           165  * op code.
000010F6                           166  *
000010F6                           167  * Registers used: A6,D0,D1 
000010F6                           168  *
000010F6                           169  * Precondition: Instruction set (size Word) has been loaded in the appropriate
000010F6                           170  * address to be parsed and read.
000010F6                           171  
000010F6                           172  * Postcondition: OP code has been identified as either valid or invalid. If it is
000010F6                           173  * valid, it is stored into A6 and EA parsing methods are called to pass needed
000010F6                           174  * information to EA. If invalid, DATA output will be utilized to indicate so.
000010F6                           175  **********************************************************************************
000010F6                           176  * These valid operand codes refer to the basic supported operand codes
000010F6                           177  * Groups refer to the first nibble value that is supported by the operand
000010F6                           178  OP_JSR_Routine:
000010F6  48E7 C000                179      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
000010FA  720C                     180      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
000010FC  E2A8                     181      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
000010FE                           182  
000010FE                           183  GROUP_0:                ;$0| ORI, BCLR (static and dynamic), CMPI                  
000010FE  B03C 0000                184      CMP.B   #$0,D0                 ;Compare first nibble
00001102  6600 000C                185      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
00001106  4EB9 000012C6            186      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
0000110C  6000 010C                187      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001110                           188      
00001110                           189  GROUP_1:                ;$1| MOVE.B
00001110  B03C 0001                190      CMP.B   #$1,D0                 ;Compare first nibble
00001114  6600 000C                191      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
00001118  4EB9 0000133C            192      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
0000111E  6000 00FA                193      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001122                           194  
00001122                           195  GROUP_2:                ;$2| MOVE.L, MOVEA.L
00001122  B03C 0002                196      CMP.B   #$2,D0                 ;Compare first nibble
00001126  6600 000C                197      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
0000112A  4EB9 00001352            198      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
00001130  6000 00E8                199      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001134                           200  
00001134                           201  GROUP_3:                ;$3| MOVE.W, MOVEA.W
00001134  B03C 0003                202      CMP.B   #$3,D0                 ;Compare first nibble
00001138  6600 000C                203      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
0000113C  4EB9 00001398            204      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
00001142  6000 00D6                205      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001146                           206  
00001146                           207  GROUP_4:                ;$4| LEA, JSR, RTS, NEG, MOVEM
00001146  B03C 0004                208      CMP.B   #$4,D0                 ;Compare first nibble
0000114A  6600 000C                209      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
0000114E  4EB9 000013E2            210      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
00001154  6000 00C4                211      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001158                           212  
00001158                           213  
00001158                           214  GROUP_5:                ;$5| SUBQ
00001158  B03C 0005                215      CMP.B   #$5,D0                 ;Compare first nibble
0000115C  6600 000C                216      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
00001160  4EB9 00001452            217      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
00001166  6000 00B2                218      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000116A                           219  
0000116A                           220  
0000116A                           221  GROUP_6:                ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
0000116A  B03C 0006                222      CMP.B   #$6,D0                 ;Compare first nibble
0000116E  6600 000C                223      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
00001172  4EB9 00001476            224      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
00001178  6000 00A0                225      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000117C                           226  
0000117C                           227  
0000117C                           228  GROUP_7:                ;$7| Display: DATA, $WXYZ (Unsupported)
0000117C  B03C 0007                229      CMP.B   #$7,D0                 ;Compare first nibble
00001180  6600 000C                230      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
00001184  4EB9 00001476            231      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
0000118A  6000 008E                232      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000118E                           233  
0000118E                           234  
0000118E                           235  GROUP_8:                ;$8| DIVS, OR
0000118E  B03C 0008                236      CMP.B   #$8,D0                 ;Compare first nibble
00001192  6600 000C                237      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
00001196  4EB9 0000147C            238      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
0000119C  6000 007C                239      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011A0                           240  
000011A0                           241  
000011A0                           242  GROUP_9:                ;$9| SUB
000011A0  B03C 0009                243      CMP.B   #$9,D0                 ;Compare first nibble
000011A4  6600 000C                244      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
000011A8  4EB9 0000147C            245      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
000011AE  6000 006A                246      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011B2                           247  
000011B2                           248  
000011B2                           249  GROUP_A:                ;$A| Display: DATA, $WXYZ (Unsupported)
000011B2  B03C 000A                250      CMP.B   #$A,D0                 ;Compare first nibble
000011B6  6600 000C                251      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
000011BA  4EB9 0000147C            252      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
000011C0  6000 0058                253      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011C4                           254  
000011C4                           255  
000011C4                           256  GROUP_B:                ;$B| EOR, CMP
000011C4  B03C 000B                257      CMP.B   #$B,D0                 ;Compare first nibble
000011C8  6600 000C                258      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
000011CC  4EB9 00001482            259      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
000011D2  6000 0046                260      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011D6                           261  
000011D6                           262  
000011D6                           263  GROUP_C:                ;$C| MULS
000011D6  B03C 000C                264      CMP.B   #$C,D0                 ;Compare first nibble
000011DA  6600 000C                265      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
000011DE  4EB9 00001482            266      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
000011E4  6000 0034                267      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011E8                           268  
000011E8                           269  
000011E8                           270  GROUP_D:                 ;$D| ADD, ADDA
000011E8  B03C 000D                271      CMP.B   #$D,D0                 ;Compare first nibble
000011EC  6600 000C                272      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
000011F0  4EB9 00001482            273      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
000011F6  6000 0022                274      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011FA                           275  
000011FA                           276  
000011FA                           277  GROUP_E:                ;$E| LSR, LSL, ASR, ASL, ROL, ROR
000011FA  B03C 000E                278      CMP.B   #$E,D0                 ;Compare first nibble
000011FE  6600 000C                279      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
00001202  4EB9 00001482            280      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
00001208  6000 0010                281      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000120C                           282  
0000120C                           283  
0000120C                           284  GROUP_F:                ;$F| Display: DATA, $WXYZ (Unsupported)
0000120C  B03C 000F                285      CMP.B   #$F,D0                 ;Compare first nibble
00001210  4EB9 00001482            286      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
00001216  6000 0002                287      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000121A                           288  
0000121A                           289  
0000121A                           290  OP_JSR_DONE:
0000121A  4CDF 0003                291           MOVEM.L (SP)+,D0-D1       ;Recover register D0
0000121E  4EF9 00001498            292           JMP READ_NEXT_INSTRUCTION
00001224                           293  **********************************************************************************
00001224                           294  
00001224                           295  ********** EA Parsing ************************************************************
00001224                           296  
00001224                           297  * MOVE_LAST_6_BITS_TO_EA
00001224                           298  **********************************************************************************
00001224                           299  * Description: For OP codes with the last 6 bits specified as EA Mode and EA Reg,
00001224                           300  * the last 6 bits will be parsed and moved into the appropriate registers.
00001224                           301  *
00001224                           302  * Registers used: A6,D0,D1,D6,D7 
00001224                           303  
00001224                           304  * Precondition: OP code has been identified with only the last 6 bits for EA,
00001224                           305  * current instruction set is stored into A6.
00001224                           306  
00001224                           307  * Postcondition: Last 6 bits of instruction bit has been isolated and stored. Bits
00001224                           308  * for EA Mode have been stored in D7, Bits for EA Reg been stored in D6.
00001224                           309  **********************************************************************************
00001224                           310  MOVE_LAST_6_BITS_TO_EA:      ;Move last 6 bits from EA field to relevant registers
00001224                           311     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001224  3016                     312      MOVE.W (A6),D0           ;Move current OP code into D0
00001226  323C 000A                313      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
0000122A  E368                     314      LSL.W   D1,D0            ;Truncate to find the last 6 bits
0000122C  E268                     315      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
0000122E  3E00                     316      MOVE.W  D0,D7            ;Move last 6 bits into D7
00001230  323C 0003                317      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
00001234  E26F                     318      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
00001236  3C07                     319      MOVE.W  D7,D6            ;Move the 'upper' 3 bits into D6
00001238  323C 000D                320      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
0000123C  E368                     321      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
0000123E  E268                     322      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001240  3E00                     323      MOVE.W  D0,D7            ;Move the 'lower' 3 bits into D7
00001242                           324     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
00001242  4E75                     325      RTS                      ;Return to stack
00001244                           326      
00001244                           327  * FIND_2_BIT_SIZE_TO_EA
00001244                           328  **********************************************************************************
00001244                           329  * Description: For OP codes with 2 bit size fields, the 2 relevant bits (7-6) will 
00001244                           330  * be parsed and moved to the appropriate registers.
00001244                           331  *
00001244                           332  * Registers used: A6,D0,D1,D5
00001244                           333  *
00001244                           334  * Precondition: OP code has been identified with 2 size bit field for EA, current
00001244                           335  * instruction set for OP code is stored in to A6.
00001244                           336  *
00001244                           337  * Postcondition: 2 bit size field has been isolated and stored into D5.
00001244                           338  **********************************************************************************
00001244                           339  FIND_2_BIT_SIZE_TO_EA:      ;Move the 2 bit size field relevant register
00001244                           340     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
00001244  3016                     341      MOVE.W   (A6),D0        ;Move current OP code into D0
00001246  323C 0008                342      MOVE.W   #8,D1          ;Prepare 8 bit shift to D1
0000124A  E368                     343      LSL.W    D1,D0          ;Truncate to find the 2 size bits
0000124C  E268                     344      LSR.W    D1,D0          ;Reposition the bits
0000124E  323C 0006                345      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
00001252  E268                     346      LSR.W    D1,D0          ;Truncate to shift 2 bits to a byte
00001254  3800                     347      MOVE.W   D0,D4          ;Move 2 size bits into D5
00001256                           348    ;  MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
00001256  4E75                     349      RTS                     ;Return to stack
00001258                           350  **********************************************************************************
00001258                           351  
00001258                           352  * FIND_3_BIT_REG_TO_EA
00001258                           353  **********************************************************************************
00001258                           354  * Description: OP codes with a dynamic 3 bit register in bits 11-9 will be parsed
00001258                           355  * and have those 3 bits isolated and moved to the appropriate registers.
00001258                           356  *
00001258                           357  * Registers used: A6,D0,D1,D5
00001258                           358  *
00001258                           359  * Precondition: OP code has been identified with a dynamic 3 bit register in bits
00001258                           360  * 11-9.
00001258                           361  *
00001258                           362  * Postcondition: 3 bit dynamic register has been isolated and stored into D4.
00001258                           363  **********************************************************************************
00001258                           364  FIND_3_BIT_REG_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
00001258                           365     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
00001258  3016                     366      MOVE.W   (A6),D0        ;Move current OP code into D0
0000125A  323C 0004                367      MOVE.W   #4,D1          ;Prepare 4 bit shift to D1
0000125E  E368                     368      LSL.W    D1,D0          ;Truncate to find the 2 size bits
00001260  E268                     369      LSR.W    D1,D0          ;Reposition the bits
00001262  323C 0009                370      MOVE.W   #9,D1          ;Prepare 9 bit shift to D1
00001266  E268                     371      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
00001268  3A00                     372      MOVE.W   D0,D5          ;Move 3 register bits into D4
0000126A                           373     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
0000126A  4E75                     374      RTS                     ;Return to stack
0000126C                           375  **********************************************************************************
0000126C                           376  
0000126C                           377  * MOVE_AND_MOVEA_PARSE_EA
0000126C                           378  **********************************************************************************
0000126C                           379  * Description: Special parsing for the SRC and DST Mode/Reg for MOVE/MOVE
0000126C                           380  *
0000126C                           381  * Registers used: A6,D0,D1,D7,D6,D5,D4
0000126C                           382  *
0000126C                           383  * Precondition: OP code has been identified with either MOVE or MOVEA
0000126C                           384  *
0000126C                           385  * Postcondition: Store all relevant EA bits into associated register.
0000126C                           386  **********************************************************************************
0000126C                           387  MOVE_AND_MOVEA_PARSE_EA:       ;Move the 3 bit dynamic register bits to proper register
0000126C                           388     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
0000126C  3038 1000                389      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
00001270  323C 000A                390      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
00001274  E368                     391      LSL.W   D1,D0            ;Truncate to find the last 6 bits
00001276  E268                     392      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
00001278  3E00                     393      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
0000127A  323C 0003                394      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
0000127E  E26F                     395      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
00001280  3A07                     396      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
00001282  323C 000D                397      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
00001286  E368                     398      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
00001288  E268                     399      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
0000128A  3800                     400      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
0000128C                           401      **************MOVING SOURCE*********** TO BE DONE LATER
0000128C                           402      ; MOVE.W #%0011 011 001 001 101,(A6)              ;MOVEA.W A5,A3
0000128C                           403      ; MOVE.W #%0010 011 001 001 101,D0                ;MOVEA.L A5,A3
0000128C                           404       ;Expected values:
0000128C                           405      ;D7, DST REG:   011
0000128C                           406      ;D6, DST MODE:  001
0000128C                           407      ;D5, SRC MODE:  001
0000128C                           408      ;D4, SRC REG:   101
0000128C                           409      ;00011001
0000128C  3038 1000                410      MOVE.W CUR_OP_CODE,D0     ;Move current OP code into D0     
00001290  323C 0004                411      MOVE.W  #4,D1             ;Prepare 4 bit shift to D1
00001294  E368                     412      LSL.W   D1,D0             ;Truncate to find bits 11-6
00001296  E268                     413      LSR.W   D1,D0             ;Reposition bits
00001298  323C 0006                414      MOVE.W  #6,D1             ;Prepare 6 bit shift to D1
0000129C  E268                     415      LSR.W   D1,D0             ;Truncate the SRC Reg/Mode bits
0000129E  323C 0003                416      MOVE.W  #3,D1             ;Prepare a 3 bit shift to D1 for DST Reg/Mode
000012A2  3C00                     417      MOVE.W  D0,D6             ;Copy over the current 6 bits to D6
000012A4  E268                     418      LSR.W   D1,D0             ;Truncate DST Mode  
000012A6  3E00                     419      MOVE.W  D0,D7             ;Move DST Reg to D7
000012A8  323C 000D                420      MOVE.W  #13,D1             
000012AC  E36E                     421      LSL.W   D1,D6             ;Truncate 13 bits in D6
000012AE  E26E                     422      LSR.W   D1,D6             ;Reposition D6
000012B0                           423                                ;D6 now contains the DST Reg
000012B0                           424     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
000012B0  4E75                     425      RTS                     ;Return to stack
000012B2                           426  **********************************************************************************
000012B2                           427  
000012B2                           428  *FIND_TRAILING_BITS_TO_EA
000012B2                           429  **********************************************************************************
000012B2                           430  FIND_TRAILING_BITS_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
000012B2                           431     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
000012B2  3016                     432      MOVE.W   (A6),D0        ;Move current OP code into D0
000012B4  323C 0007                433      MOVE.W   #7,D1          ;Prepare 4 bit shift to D1
000012B8  E368                     434      LSL.W    D1,D0          ;Truncate to find the 2 size bits
000012BA  E268                     435      LSR.W    D1,D0          ;Reposition the bits
000012BC  323C 0006                436      MOVE.W   #6,D1          ;Prepare 9 bit shift to D1
000012C0  E268                     437      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
000012C2  3680                     438      MOVE.W   D0,(A3)          ;Move 3 register bits into D4
000012C4                           439     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
000012C4  4E75                     440      RTS                    ;Return to stack
000012C6                           441  **********************************************************************************
000012C6                           442  
000012C6                           443  
000012C6                           444  
000012C6                           445  
000012C6                           446  
000012C6                           447  ********** End of EA Parsing *****************************************************
000012C6                           448  
000012C6                           449  *******************JMP LABELS ****************************************************
000012C6                           450  * Labelling for group codes will be in the following format
000012C6                           451  
000012C6                           452  * <JMP Labelname>
000012C6                           453  ********************************************************************************
000012C6                           454  * Checking List Order (If more than one value)
000012C6                           455  * Operand1 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
000012C6                           456  * Operand2 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
000012C6                           457  
000012C6                           458  * Where a-b will refer to the bit corresponding bit value in the instruction
000012C6                           459  * format, and a specifier will be attached such as Size, EA Mode, SRC Reg, etc
000012C6                           460  * to clarify what a specific bit range means.
000012C6                           461  * Checking order refers to what order the checks will be performed in. 
000012C6                           462  * Any other code outside of the listed ones will be INVALID_OP.
000012C6                           463  ********************************************************************************
000012C6                           464  
000012C6                           465  ********************************************************************************
000012C6                           466  * Global Field Descriptions
000012C6                           467  * Size Field: Byte = 00 Word = 01 Long = 10
000012C6                           468  * EA Mode: Refer to EA Address Modes
000012C6                           469  * EA Reg: 3-bit input that is mapped to the respective binary value
000012C6                           470  ********************************************************************************
000012C6                           471  
000012C6                           472  * GROUP_0                      
000012C6                           473  ********************************************************************************
000012C6                           474  * Description: Checks for the following listed OP codes to be present or not
000012C6                           475  *
000012C6                           476  * ORI: $00, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
000012C6                           477  * CMPI: $0C, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
000012C6                           478  * Dynamic BCLR: $0, 11-9 Register, 8-6 %110, 5-3 EA Mode, 2-0 EA Reg
000012C6                           479  * Static BCLR: $01, 7-6 10, 5-3 EA Mode, 2-0 EA Reg
000012C6                           480  *
000012C6                           481  * Precondition: First nibble has been identified as $0
000012C6                           482  * Postcondition: Parses proper OP code with a nibble value of $0 or finds an
000012C6                           483  * invalid OP code. After a successful parse loading for EA values will be done
000012C6                           484  * through a subroutine.
000012C6                           485  ********************************************************************************
000012C6                           486  C_GROUP_0:
000012C6  48E7 C000                487      MOVEM.L D0-D1, -(SP) ; Backup registers
000012CA                           488      
000012CA                           489  CHECK_OP_ORI:
000012CA  3038 1000                490      MOVE.W  CUR_OP_CODE,D0         ;Move current instruction set into D
000012CE  0240 FF00                491      ANDI.W  #$FF00,D0       ;Mask relevant bits to D0
000012D2  B07C 0000                492      CMP.W   #$0000,D0       ;Compare the appropriate masked bits     
000012D6  6600 0010                493      BNE     CHECK_OP_CMPI   ;Branch to next comparison if not equal
000012DA  4EB9 000014C2            494      JSR     PRINT_OP_ORI    ;Print the OP code if equal
000012E0  4EB8 1244                495      JSR     FIND_2_BIT_SIZE_TO_EA         
000012E4  6000 0054                496      BRA     CG0_C           ;Finish routine
000012E8                           497  CHECK_OP_CMPI:
000012E8  3038 1000                498      MOVE.W  CUR_OP_CODE,D0         ;Move current instruction set into D
000012EC  0240 FF00                499      ANDI.W  #$FF00,D0       ;Mask relevant bits to D0
000012F0  B07C 0C00                500      CMP.W   #$0C00,D0       ;Compare the appropriate masked bits   
000012F4  6600 000C                501      BNE     CHECK_OP_S_BCLR ;Branch to next comparison if not equal       
000012F8  4EB9 000014D0            502      JSR     PRINT_OP_CMPI   ;Print the OP code if equal
000012FE  6000 003A                503      BRA     CG0_C           ;Finish routine
00001302                           504  CHECK_OP_S_BCLR:
00001302  3038 1000                505      MOVE.W  CUR_OP_CODE,D0         ;Move current instruction set into D
00001306  0240 FF00                506      ANDI.W  #$FF00,D0       ;Mask relevant bits to D0
0000130A  B07C 0800                507      CMP.W   #$0800,D0       ;Compare the appropriate masked bits
0000130E  6600 000C                508      BNE     CHECK_OP_D_BCLR ;Branch to next comparison if not equal
00001312  4EB9 000014EA            509      JSR     PRINT_OP_S_BCLR ;Print the OP code if equal
00001318                           510      ;MOVEM.L (SP)+,D6-D7     ;POP STACK
00001318  6000 0020                511      BRA     CG0_C           ;Finish routine
0000131C                           512  CHECK_OP_D_BCLR:
0000131C  3038 1000                513      MOVE.W  CUR_OP_CODE,D0                ;Move current instruction set into D
00001320  0240 0180                514      ANDI.W  #%0000000110000000,D0 ;Do a direct binary bitmask to see which bits are needed
00001324  B07C 0180                515      CMP.W   #%0000000110000000,D0 ;Compare the expected binary value
00001328  6600 000C                516      BNE     CG0_F                 ;If not equal this must be an invalid OP code
0000132C  4EB9 00001508            517      JSR     PRINT_OP_D_BCLR       ;Print the OP code if equal
00001332  6000 0006                518      BRA     CG0_C                ;Finish routine
00001336                           519  CG0_F:                       ;Checks have been finished, invalid OP code has been found
00001336  6000 0150                520      BRA INVALID_OP    
0000133A                           521  CG0_C:                       ;Checks have been finished,a valid OP code has been found
0000133A  4E75                     522      RTS                      ;Return to stack
0000133C                           523      
0000133C                           524  * GROUP_1                      
0000133C                           525  ********************************************************************************
0000133C                           526  * MOVE.B: $1, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
0000133C                           527  ********************************************************************************
0000133C                           528  C_GROUP_1:
0000133C                           529  
0000133C                           530  CHECK_OP_MOVE_B:
0000133C  3038 1000                531      MOVE.W  CUR_OP_CODE,D0                  ;Move current instruction set into D0          
00001340  0240 FF00                532      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001344  B07C 1000                533      CMP.W #$1000,D0                 ;Compare the appropriate masked bits 
00001348  6600 013E                534      BNE INVALID_OP                  ;Invalid OP code has been found
0000134C  6700 01D8                535      BEQ PRINT_OP_MOVEB              ;Print the OP code if equal
00001350  4E75                     536      RTS                             ;Return to stack
00001352                           537  * GROUP_2
00001352                           538  ********************************************************************************
00001352                           539  * MOVEA.L: $2, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
00001352                           540  * MOVE.L: $2, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
00001352                           541  ********************************************************************************
00001352                           542  C_GROUP_2:
00001352                           543  
00001352                           544  CHECK_OP_MOVEA_L:
00001352  3038 1000                545      MOVE.W CUR_OP_CODE,D0                  ;Move current instruction set into D0  
00001356  0240 FF00                546      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
0000135A  B07C 2000                547      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
0000135E  6000 0002                548      BRA FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
00001362                           549  
00001362                           550      
00001362                           551  FIND_MOVEA_L_DIFFERENCE:    ;Finds difference between MOVEA and MOVE
00001362  3038 1000                552      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
00001366  323C 0007                553      MOVE.W   #7,D1          ;Prepare 7 bit shift to D1
0000136A  E368                     554      LSL.W    D1,D0          ;Truncate to find the 3 address mode bits
0000136C  E268                     555      LSR.W    D1,D0          ;Reposition the bits
0000136E  323C 0006                556      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
00001372  E268                     557      LSR.W    D1,D0          ;Truncate to shift 3 bits to a register
00001374  3C00                     558      MOVE.W   D0,D6          ;Move 3 address mode bits into D6
00001376  BC7C 0001                559      CMP.W   #$1,D6          ;Check if the address mode value is MOVEA
0000137A  6600 0006                560      BNE     CHECK_OP_MOVE_L  ;Branch if not equal to check MOVE
0000137E  6700 01BC                561      BEQ     PRINT_OP_MOVEA_L ;Print out the MOVEA address 
00001382                           562      
00001382                           563  CHECK_OP_MOVE_L:
00001382  3038 1000                564      MOVE.W CUR_OP_CODE,D0
00001386  0240 FF00                565      ANDI.W #$FF00,D0
0000138A  B07C 2000                566      CMP.W #$2000,D0
0000138E  6600 00F8                567      BNE INVALID_OP
00001392  6700 01BE                568      BEQ PRINT_OP_MOVE_L
00001396  4E75                     569      RTS
00001398                           570      
00001398                           571  * GROUP_3
00001398                           572  ********************************************************************************
00001398                           573  * MOVEA.W: $3, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
00001398                           574  * MOVE.W: $3, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
00001398                           575  ********************************************************************************
00001398                           576  C_GROUP_3:
00001398                           577  
00001398                           578  CHECK_OP_MOVEA_W:
00001398  3038 1000                579      MOVE.W CUR_OP_CODE,D0
0000139C  0240 FF00                580      ANDI.W #$FF00,D0
000013A0  B07C 3000                581      CMP.W #$3000,D0
000013A4  6000 0002                582      BRA FIND_MOVEA_W_DIFFERENCE
000013A8                           583  
000013A8                           584      
000013A8                           585  FIND_MOVEA_W_DIFFERENCE:      ;Finds difference between MOVEA and MOVE
000013A8  3038 1000                586      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
000013AC  323C 0007                587      MOVE.W   #7,D1          ;Prepare 7 bit shift to D1
000013B0  E368                     588      LSL.W    D1,D0          ;Truncate to find the 3 address mode bits
000013B2  E268                     589      LSR.W    D1,D0          ;Reposition the bits
000013B4  323C 0006                590      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
000013B8  E268                     591      LSR.W    D1,D0          ;Truncate to shift 3 bits to a register
000013BA  3C00                     592      MOVE.W   D0,D6          ;Move 3 address mode bits into D6
000013BC  BC7C 0001                593      CMP.W   #$1,D6          ;Check if the address mode value is MOVEA
000013C0  4EB8 126C                594      JSR     MOVE_AND_MOVEA_PARSE_EA
000013C4  6600 0006                595      BNE     CHECK_OP_MOVE_W 
000013C8  6700 019E                596      BEQ     PRINT_OP_MOVEA_W  
000013CC                           597      
000013CC                           598  CHECK_OP_MOVE_W:
000013CC  3038 1000                599      MOVE.W CUR_OP_CODE,D0
000013D0  0240 FF00                600      ANDI.W #$FF00,D0
000013D4  B07C 3000                601      CMP.W #$3000,D0
000013D8  6600 00AE                602      BNE INVALID_OP
000013DC  6700 01A0                603      BEQ PRINT_OP_MOVE_W
000013E0  4E75                     604      RTS
000013E2                           605  
000013E2                           606  * GROUP_4
000013E2                           607  ********************************************************************************
000013E2                           608  * LEA: $4, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
000013E2                           609  * JSR: $4E, 7-6 %10, 5-3 EA Mode, 2-0 EA Reg 
000013E2                           610  * RTS: $4E75
000013E2                           611  * NEG: $44, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
000013E2                           612  * MOVEM: $4, 11 %1, 10 %D, 9-7 %001, 6 S, 5-3 EA Mode, 2-0 EA Reg
000013E2                           613  * %D = 0 , Register to Memory, 1 Memory to Register
000013E2                           614  ********************************************************************************
000013E2                           615  C_GROUP_4:
000013E2                           616  CHECK_OP_RTS:
000013E2  3038 1000                617      MOVE.W CUR_OP_CODE,D0
000013E6  B07C 4E75                618      CMP.W  #$4E75,D0
000013EA  6600 0006                619      BNE    CHECK_OP_NOP
000013EE  6700 01C0                620      BEQ    PRINT_OP_RTS
000013F2                           621      
000013F2                           622  CHECK_OP_NOP:
000013F2  3038 1000                623      MOVE.W CUR_OP_CODE,D0
000013F6  B07C 4E71                624      CMP.W  #$4E71,D0
000013FA  6600 0006                625      BNE    CHECK_OP_LEA
000013FE  6700 0194                626      BEQ    PRINT_OP_NOP
00001402                           627      
00001402                           628  CHECK_OP_LEA:
00001402  3038 1000                629      MOVE.W CUR_OP_CODE,D0
00001406  0240 F1C0                630      ANDI.W #$F1C0,D0
0000140A  B07C 41C0                631      CMP.W  #$41C0,D0
0000140E  6600 0006                632      BNE    CHECK_OP_JSR
00001412  6700 01AA                633      BEQ    PRINT_OP_LEA
00001416                           634      
00001416                           635  CHECK_OP_JSR:
00001416  3038 1000                636      MOVE.W CUR_OP_CODE,D0
0000141A  0240 FFC0                637      ANDI.W #$FFC0,D0
0000141E  B07C 4E80                638      CMP.W  #$4E80,D0
00001422  6600 0006                639      BNE    CHECK_OP_NEG
00001426  6700 017A                640      BEQ    PRINT_OP_JSR
0000142A                           641      
0000142A                           642  CHECK_OP_NEG:
0000142A  3038 1000                643      MOVE.W CUR_OP_CODE,D0
0000142E  0240 FF00                644      ANDI.W #$FF00,D0
00001432  B07C 4400                645      CMP.W  #$4400,D0
00001436  6600 0006                646      BNE    CHECK_OP_MOVEM
0000143A  6700 0190                647      BEQ    PRINT_OP_NEG
0000143E                           648  **************** COME BACK TO FINISH UP SIZE **********************************
0000143E                           649  CHECK_OP_MOVEM:
0000143E  3038 1000                650      MOVE.W CUR_OP_CODE,D0
00001442  0240 FB80                651      ANDI.W #$FB80,D0
00001446  B07C 4880                652      CMP.W  #$4880,D0
0000144A  6600 003C                653      BNE    INVALID_OP
0000144E  6700 018A                654      BEQ    PRINT_OP_MOVEM_W
00001452                           655      
00001452                           656  * GROUP_5
00001452                           657  ********************************************************************************
00001452                           658  * SUBQ: $5, 11-9 DATA, 8 %1, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001452                           659  * Validation checking:
00001452                           660  * Check against, ADDQ, Scc, DBcc
00001452                           661  ********************************************************************************
00001452                           662  C_GROUP_5:
00001452                           663  
00001452                           664  CHECK_OP_SUBQ:
00001452  3038 1000                665      MOVE.W CUR_OP_CODE,D0
00001456  0240 F1C0                666      ANDI.W #$F1C0,D0        ;Bitmask check for Scc, DBcc and ADDQ
0000145A  B07C 5100                667      CMP.W  #$5100,D0        ;This should be the only valid one for SUBQ
0000145E  6600 0028                668      BNE    INVALID_OP       ;If not equal it's invalid
00001462  3038 1000                669      MOVE.W  CUR_OP_CODE,D0  ;Actual check for SUBQ
00001466  0240 F100                670      ANDI.W #$F100,D0        ;Bitmask check for SUBQ
0000146A  B07C 5100                671      CMP.W  #$5100,D0        ;Compare the proper value
0000146E  6700 0186                672      BEQ    PRINT_OP_SUBQ    ;If equal print it out
00001472  6600 0014                673      BNE    INVALID_OP       ;Else the operand is invalid
00001476                           674  * GROUP_6
00001476                           675  ********************************************************************************
00001476                           676  * BRA: $60, 7-0 8-Bit Displacement
00001476                           677  * Bcc: $6, 11-8 Condition, 7-0 8-Bit Displacement
00001476                           678  *   Branch: <Condition>   
00001476                           679  *   BCS: %0101          
00001476                           680  *   BGE: %1100      
00001476                           681  *   BLT: %1101  
00001476                           682  *   BVC: %1000
00001476                           683  
00001476                           684  ********************************************************************************
00001476                           685  C_GROUP_6:
00001476                           686  
00001476                           687  CHECK_OP_BRA:
00001476                           688  
00001476                           689  CHECK_OP_BCS:
00001476                           690  
00001476                           691  CHECK_OP_BGE:
00001476                           692  
00001476                           693  CHECK_OP_BLT:
00001476                           694  
00001476                           695  CHECK_OP_BVC:
00001476                           696  
00001476                           697  *GROUP_7
00001476                           698  ********************************************************************************
00001476                           699  * Currently no OP codes here are supported.
00001476                           700  ********************************************************************************
00001476                           701  C_GROUP_7:
00001476  4EB9 00001488            702      JSR INVALID_OP
0000147C                           703  
0000147C                           704  * GROUP_8
0000147C                           705  ********************************************************************************
0000147C                           706  * DIVS: $8, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
0000147C                           707  * OR: $80, 7-6 Size, 5-3 EA Mode, 2-0 EA Register
0000147C                           708  ********************************************************************************
0000147C                           709  C_GROUP_8:
0000147C                           710  
0000147C                           711  CHECK_OP_DIVS:
0000147C                           712  
0000147C                           713  CHECK_OP_OR:
0000147C                           714  
0000147C                           715  * GROUP_9                      
0000147C                           716  ********************************************************************************
0000147C                           717  * SUB: $9, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
0000147C                           718  ********************************************************************************
0000147C                           719  C_GROUP_9:
0000147C                           720  
0000147C                           721  CHECK_OP_SUB:
0000147C                           722  
0000147C                           723  *GROUP_A
0000147C                           724  ********************************************************************************
0000147C                           725  * Currently no OP codes here are supported.
0000147C                           726  ********************************************************************************
0000147C                           727  C_GROUP_A:
0000147C  4EB9 00001488            728      JSR INVALID_OP
00001482                           729  
00001482                           730  * GROUP_B                     
00001482                           731  ********************************************************************************
00001482                           732  * EOR: $B, 11-9 Reg, 8 %1, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001482                           733  * CMP: $B, 11-9 Reg, 8 %0, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001482                           734  * The specific bit difference is listed 
00001482                           735  ********************************************************************************
00001482                           736  C_GROUP_B:
00001482                           737  
00001482                           738  CHECK_OP_EOR:
00001482                           739  
00001482                           740  CHECK_OP_CMP:
00001482                           741  
00001482                           742  * GROUP_C                     
00001482                           743  ********************************************************************************
00001482                           744  * MULS: $C, 11-8 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00001482                           745  ********************************************************************************
00001482                           746  C_GROUP_C:
00001482                           747  
00001482                           748  CHECK_OP_MULS:
00001482                           749  
00001482                           750  * GROUP_D                     
00001482                           751  ********************************************************************************
00001482                           752  * ADD: $D, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001482                           753  * ADDA: $D, 11- 9 Reg, 8-6 OPMODE, 7-6 %11, 5-3 EA Mode, 2-0 EA Reg
00001482                           754  * The specific bit difference is listed out in the OPMODE field.
00001482                           755  ********************************************************************************
00001482                           756  C_GROUP_D:
00001482                           757  
00001482                           758  CHECK_OP_ADDA:
00001482                           759  
00001482                           760  CHECK_OP_ADD:
00001482                           761  
00001482                           762  * GROUP_E                     
00001482                           763  ********************************************************************************
00001482                           764  * LSR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00001482                           765  * LSL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00001482                           766  * ASR: $E, $0, 8 %0, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00001482                           767  * ASL: $E, $0, 8 %1, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00001482                           768  * ROR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00001482                           769  * ROL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00001482                           770  * Count/Reg for LSR/LSL refers to shift count, where 0 = shift count of 8, 1-7 
00001482                           771  * refers to the respective value when i/r = 0. If i/r = 1, data register in the 
00001482                           772  * Count/Reg field specifies the shift count.  
00001482                           773  * 
00001482                           774  * Count/Reg for ROR/ROL specifies rotate count instead of shift count.
00001482                           775  ********************************************************************************
00001482                           776  C_GROUP_E:
00001482                           777  
00001482                           778  CHECK_OP_LSR:
00001482                           779  
00001482                           780  CHECK_OP_LSL:
00001482                           781  
00001482                           782  CHECK_OP_ASL:
00001482                           783  
00001482                           784  CHECK_OP_ASR:
00001482                           785  
00001482                           786  CHECK_OP_ROL:
00001482                           787  
00001482                           788  CHECK_OP_ROR:
00001482                           789  
00001482                           790  * GROUP_F
00001482                           791  ********************************************************************************
00001482                           792  * Currently no OP codes here are supported.
00001482                           793  ********************************************************************************
00001482                           794  C_GROUP_F:
00001482  4EB9 00001488            795      JSR INVALID_OP
00001488                           796      
00001488                           797  * INVALID_OP                     
00001488                           798  ********************************************************************************
00001488                           799  * Any value that is not covered in the above groups would be considered invalid. 
00001488                           800  * The following values in the first nibble would also indicate that the 
00001488                           801  * operand codes is already invalid: $7, $A, $F.
00001488                           802  * For unsupported OP codes, display DATA $WXYZ   
00001488                           803  * THIS WILL NEED TO BE CHANGED TO DISPLAY: 1000 DATA $WXYZ IN THE FUTURE
00001488                           804  ********************************************************************************
00001488                           805  INVALID_OP:  ; Prints DATA for invalid op
00001488  43F9 00001716            806      LEA P_INVALID_OP,A1
0000148E  103C 000D                807      MOVE.B #13,D0
00001492  4E4F                     808      TRAP #15
00001494  FFFF FFFF                809      SIMHALT
00001498                           810  READ_NEXT_INSTRUCTION: ; Needs to read next instruction set {PLACEHOLDER}
00001498  FFFF FFFF                811      SIMHALT
0000149C                           812  
0000149C                           813  MAKE_VAL_ASCII:
0000149C  0C00 0009                814      CMPI.B  #$9,D0
000014A0  6E00 0008                815      BGT     LETTER_ASCII
000014A4  6F00 000A                816      BLE     NUMBER_ASCII
000014A8  4E75                     817      RTS
000014AA                           818      
000014AA                           819  LETTER_ASCII:
000014AA  0600 0037                820      ADDI.B #$37,D0 ; A-F
000014AE  4E75                     821      RTS
000014B0                           822      
000014B0                           823  NUMBER_ASCII
000014B0  0600 0030                824      ADDI.B #$30,D0 ; 0-9
000014B4  4E75                     825      RTS
000014B6                           826      
000014B6                           827  ADD_PERIOD:
000014B6  2F00                     828      MOVE.L D0,-(SP)
000014B8  103C 0000                829      MOVE.B #$0,D0
000014BC  0600 0046                830      ADDI.B #$46,D0
000014C0  201F                     831      MOVE.L (SP)+,D0
000014C2                           832  ********************** PRINTING ROUTINES **************************************
000014C2                           833  * Description: These routines are to print the associated op codes, by placing
000014C2                           834  * them in the appropriate area to the buffer
000014C2                           835  *
000014C2                           836  * Registers used: A1 for loading, A6 for EA parsing.
000014C2                           837  *
000014C2                           838  * Precondition: The relevant opcode has been identified correctly.
000014C2                           839  *
000014C2                           840  * Postcondition: Prints out the associated opcode to the buffer.
000014C2                           841  *******************************************************************************
000014C2                           842  
000014C2                           843  ****************************** GROUP 0 **************************************** 
000014C2                           844  PRINT_OP_ORI:
000014C2  43F9 0000172D            845      LEA P_OP_ORI,A1
000014C8  4EB9 0000170E            846      JSR PRINT_OP
000014CE  4E75                     847      RTS
000014D0                           848  PRINT_OP_CMPI:
000014D0  4EB8 1258                849      JSR FIND_3_BIT_REG_TO_EA
000014D4  4EB8 1244                850      JSR FIND_2_BIT_SIZE_TO_EA
000014D8  4EB8 1224                851      JSR MOVE_LAST_6_BITS_TO_EA
000014DC  43F9 00001731            852      LEA P_OP_CMPI,A1
000014E2  4EB9 0000170E            853      JSR PRINT_OP
000014E8  4E75                     854      RTS
000014EA                           855  PRINT_OP_S_BCLR:
000014EA  4EB8 1224                856      JSR MOVE_LAST_6_BITS_TO_EA
000014EE  4EB8 1258                857      JSR FIND_3_BIT_REG_TO_EA
000014F2  3CBC 0000                858      MOVE.W #$0,(A6)
000014F6  383C 0000                859      MOVE.W #%000, D4
000014FA  43F9 00001736            860      LEA P_OP_S_BCLR,A1
00001500  4EB9 0000170E            861      JSR PRINT_OP
00001506  4E75                     862      RTS
00001508                           863  PRINT_OP_D_BCLR:
00001508  4EB8 1224                864      JSR MOVE_LAST_6_BITS_TO_EA
0000150C  4EB8 1258                865      JSR FIND_3_BIT_REG_TO_EA
00001510  3CBC 0000                866      MOVE.W #$0,(A6)
00001514  383C 0006                867      MOVE.W #%110, D4
00001518  43F9 0000173B            868      LEA P_OP_D_BCLR,A1
0000151E  4EB9 0000170E            869      JSR PRINT_OP
00001524  4E75                     870      RTS
00001526                           871  ******************************* END OF GROUP 0 ********************************
00001526                           872  
00001526                           873  ****************************** GROUP 1 ****************************************    
00001526                           874  PRINT_OP_MOVEB:
00001526  4EB8 126C                875      JSR MOVE_AND_MOVEA_PARSE_EA
0000152A  3CBC 0001                876      MOVE.W #$1,(A6)
0000152E  43F9 00001740            877      LEA P_OP_MOVEB,A1
00001534  4EB9 0000170E            878      JSR PRINT_OP
0000153A  4E75                     879      RTS
0000153C                           880  ******************************* END OF GROUP 1 ********************************
0000153C                           881      
0000153C                           882  ****************************** GROUP 2 **************************************** 
0000153C                           883  PRINT_OP_MOVEA_L:
0000153C  4EB8 126C                884      JSR MOVE_AND_MOVEA_PARSE_EA
00001540  3CBC 0002                885      MOVE.W #$2,(A6)
00001544  43F9 00001747            886      LEA P_OP_MOVEA_L,A1
0000154A                           887      ;MOVE.L A1,G_BUFFER_PREP
0000154A                           888      ;MOVE.B (A1)+,D0
0000154A                           889      ;CMPI.B #$FF,D0
0000154A                           890      ;BNE MAKE_VAL_ASCII
0000154A                           891      ;MOVE.W P_OP_MOVEA_L,(A4)+
0000154A  4EB9 0000170E            892      JSR PRINT_OP
00001550  4E75                     893      RTS
00001552                           894  PRINT_OP_MOVE_L:
00001552  4EB8 126C                895      JSR MOVE_AND_MOVEA_PARSE_EA
00001556  3CBC 0002                896      MOVE.W #$2,(A6)
0000155A  43F9 0000174F            897      LEA P_OP_MOVE_L,A1
00001560  4EB9 0000170E            898      JSR PRINT_OP
00001566  4E75                     899      RTS
00001568                           900  ******************************* END OF GROUP 2 ********************************
00001568                           901      
00001568                           902  ****************************** GROUP 3 ****************************************    
00001568                           903  PRINT_OP_MOVEA_W:
00001568  4EB8 126C                904      JSR MOVE_AND_MOVEA_PARSE_EA
0000156C  3CBC 0003                905      MOVE.W #$3,(A6)
00001570  43F9 00001756            906      LEA P_OP_MOVEA_W,A1
00001576  4EB9 0000170E            907      JSR PRINT_OP
0000157C  4E75                     908      RTS
0000157E                           909  PRINT_OP_MOVE_W:
0000157E  4EB8 126C                910      JSR MOVE_AND_MOVEA_PARSE_EA
00001582  3CBC 0003                911      MOVE.W #$3,(A6)
00001586  43F9 0000175E            912      LEA P_OP_MOVE_W,A1
0000158C  4EB9 0000170E            913      JSR PRINT_OP
00001592  4E75                     914      RTS
00001594                           915  ******************************* END OF GROUP 3 ********************************
00001594                           916  
00001594                           917  ****************************** GROUP 4 ****************************************
00001594                           918  PRINT_OP_NOP:
00001594  43F9 0000177D            919      LEA P_OP_NOP,A1
0000159A  4EB9 0000170E            920      JSR PRINT_OP
000015A0  4E75                     921      RTS
000015A2                           922  PRINT_OP_JSR:
000015A2  43F9 00001779            923      LEA P_OP_JSR,A1
000015A8  4EB9 0000170E            924      JSR PRINT_OP
000015AE  4E75                     925      RTS
000015B0                           926  PRINT_OP_RTS:
000015B0  43F9 00001781            927      LEA P_OP_RTS,A1
000015B6  4EB9 0000170E            928      JSR PRINT_OP
000015BC  4E75                     929      RTS
000015BE                           930  PRINT_OP_LEA:
000015BE  43F9 00001775            931      LEA P_OP_LEA,A1
000015C4  4EB9 0000170E            932      JSR PRINT_OP
000015CA  4E75                     933      RTS
000015CC                           934  PRINT_OP_NEG:
000015CC  43F9 00001785            935      LEA P_OP_NEG,A1
000015D2  4EB9 0000170E            936      JSR PRINT_OP
000015D8  4E75                     937      RTS
000015DA                           938  PRINT_OP_MOVEM_W:
000015DA  43F9 00001765            939      LEA P_OP_MOVEM_W,A1
000015E0  4EB9 0000170E            940      JSR PRINT_OP
000015E6  4E75                     941      RTS
000015E8                           942  PRINT_OP_MOVEM_L:
000015E8  43F9 0000176D            943      LEA P_OP_MOVEM_L,A1
000015EE  4EB9 0000170E            944      JSR PRINT_OP
000015F4  4E75                     945      RTS
000015F6                           946  ******************************* END OF GROUP 4 ********************************
000015F6                           947      
000015F6                           948  ****************************** GROUP 5 ****************************************
000015F6                           949  PRINT_OP_SUBQ:
000015F6  43F9 00001789            950      LEA P_OP_SUBQ,A1
000015FC  4EB9 0000170E            951      JSR PRINT_OP
00001602  4E75                     952      RTS
00001604                           953  ******************************* END OF GROUP 5 ********************************
00001604                           954  
00001604                           955  ****************************** GROUP 6 ****************************************
00001604                           956  PRINT_OP_BCS:
00001604  43F9 00001792            957      LEA P_OP_BCS,A1
0000160A  4EB9 0000170E            958      JSR PRINT_OP
00001610  4E75                     959      RTS
00001612                           960  PRINT_OP_BGE:
00001612  43F9 00001796            961      LEA P_OP_BGE,A1
00001618  4EB9 0000170E            962      JSR PRINT_OP
0000161E  4E75                     963      RTS
00001620                           964  PRINT_OP_BLT:
00001620  43F9 0000179A            965      LEA P_OP_BLT,A1
00001626  4EB9 0000170E            966      JSR PRINT_OP
0000162C  4E75                     967      RTS
0000162E                           968  PRINT_OP_BVC:
0000162E  43F9 0000179E            969      LEA P_OP_BVC,A1
00001634  4EB9 0000170E            970      JSR PRINT_OP
0000163A  4E75                     971      RTS
0000163C                           972  PRINT_OP_BRA:
0000163C  43F9 0000178E            973      LEA P_OP_BRA,A1
00001642  4EB9 0000170E            974      JSR PRINT_OP
00001648  4E75                     975      RTS
0000164A                           976  ******************************* END OF GROUP 6 ********************************
0000164A                           977  
0000164A                           978  ****************************** GROUP 7 ****************************************
0000164A                           979  * No currently supported OP codes to print here.
0000164A                           980  ******************************* END OF GROUP 7 ********************************
0000164A                           981  
0000164A                           982  ****************************** GROUP 8 ****************************************
0000164A                           983  PRINT_OP_DIVS:
0000164A  43F9 000017A2            984      LEA P_OP_DIVS,A1
00001650  4EB9 0000170E            985      JSR PRINT_OP
00001656  4E75                     986      RTS
00001658                           987  PRINT_OP_OR:
00001658  43F9 000017A7            988      LEA P_OP_OR,A1
0000165E  4EB9 0000170E            989      JSR PRINT_OP
00001664  4E75                     990      RTS
00001666                           991  ******************************* END OF GROUP 8 ********************************
00001666                           992  
00001666                           993  ****************************** GROUP 9 ****************************************
00001666                           994  PRINT_OP_SUB:
00001666  43F9 000017AA            995      LEA P_OP_SUB,A1
0000166C  4EB9 0000170E            996      JSR PRINT_OP
00001672  4E75                     997      RTS
00001674                           998  ******************************* END OF GROUP 9 ********************************
00001674                           999  
00001674                          1000  ****************************** GROUP A ****************************************
00001674                          1001  * No currently supported OP codes to print here.
00001674                          1002  ******************************* END OF GROUP A ********************************
00001674                          1003  
00001674                          1004  ****************************** GROUP B ****************************************
00001674                          1005  PRINT_OP_EOR:
00001674  43F9 000017AE           1006      LEA P_OP_EOR,A1
0000167A  4EB9 0000170E           1007      JSR PRINT_OP
00001680  4E75                    1008      RTS
00001682                          1009  PRINT_OP_CMP:
00001682  43F9 000017B2           1010      LEA P_OP_CMP,A1
00001688  4EB9 0000170E           1011      JSR PRINT_OP
0000168E  4E75                    1012      RTS
00001690                          1013  ******************************* END OF GROUP B ********************************
00001690                          1014  
00001690                          1015  ****************************** GROUP C ****************************************
00001690                          1016  PRINT_OP_MULS:
00001690  43F9 000017B6           1017      LEA P_OP_MULS,A1
00001696  4EB9 0000170E           1018      JSR PRINT_OP
0000169C  4E75                    1019      RTS
0000169E                          1020  ******************************* END OF GROUP C ********************************
0000169E                          1021  
0000169E                          1022  ****************************** GROUP D ****************************************
0000169E                          1023  PRINT_OP_ADD:
0000169E  43F9 000017C0           1024      LEA P_OP_ADD,A1
000016A4  4EB9 0000170E           1025      JSR PRINT_OP
000016AA  4E75                    1026      RTS
000016AC                          1027  PRINT_OP_ADDA:
000016AC  43F9 000017BB           1028      LEA P_OP_ADDA,A1
000016B2  4EB9 0000170E           1029      JSR PRINT_OP
000016B8  4E75                    1030      RTS
000016BA                          1031  
000016BA                          1032  ******************************* END OF GROUP D ********************************
000016BA                          1033  
000016BA                          1034  ****************************** GROUP E ****************************************
000016BA                          1035  PRINT_OP_LSL:
000016BA  43F9 000017C8           1036      LEA P_OP_LSL,A1
000016C0  4EB9 0000170E           1037      JSR PRINT_OP
000016C6  4E75                    1038      RTS
000016C8                          1039  PRINT_OP_LSR:
000016C8  43F9 000017C4           1040      LEA P_OP_LSR,A1
000016CE  4EB9 0000170E           1041      JSR PRINT_OP
000016D4  4E75                    1042      RTS
000016D6                          1043  PRINT_OP_ASR:
000016D6  43F9 000017CC           1044      LEA P_OP_ASR,A1
000016DC  4EB9 0000170E           1045      JSR PRINT_OP
000016E2  4E75                    1046      RTS
000016E4                          1047  PRINT_OP_ASL:
000016E4  43F9 000017D0           1048      LEA P_OP_ASL,A1
000016EA  4EB9 0000170E           1049      JSR PRINT_OP
000016F0  4E75                    1050      RTS
000016F2                          1051  PRINT_OP_ROL:
000016F2  43F9 000017D8           1052      LEA P_OP_ROL,A1
000016F8  4EB9 0000170E           1053      JSR PRINT_OP
000016FE  4E75                    1054      RTS
00001700                          1055  PRINT_OP_ROR:
00001700  43F9 000017D4           1056      LEA P_OP_ROR,A1
00001706  4EB9 0000170E           1057      JSR PRINT_OP
0000170C  4E75                    1058      RTS
0000170E                          1059  ******************************* END OF GROUP E ********************************
0000170E                          1060  
0000170E                          1061  ****************************** GROUP F ****************************************
0000170E                          1062  * No currently supported OP codes to print here.
0000170E                          1063  ******************************* END OF GROUP F ********************************
0000170E                          1064  
0000170E                          1065  
0000170E                          1066  
0000170E                          1067  PRINT_OP:   ;Prints current op code byte
0000170E                          1068      ;MOVE.W (A4),(A1)       ; NEEDS TO USE G_BUFFER LATER
0000170E  103C 000D               1069      MOVE.B #13,D0
00001712  4E4F                    1070      TRAP #15
00001714  4E75                    1071      RTS
00001716                          1072  ******************* END OF PRINTING ROUTINES **********************************
00001716                          1073  
00001716                          1074  ******************* END OF JMP LABELS *****************************************
00001716                          1075  
00001716                          1076  ******************* DATA CONSTANT PRINTS **************************************
00001716                          1077  * Formatting is as follows: P_OP_<OPCODE>, where P = Print, OP = Operation,
00001716                          1078  * <OPCODE> is any valid operand
00001716                          1079  
00001716= 44 41 54 41 00          1080  P_INVALID_OP    DC.B    'DATA',0
0000171B= 46 6F 75 6E 64 20 ...   1081  OP_FOUND        DC.B    'Found OP',0 ; this should be taken out later
00001724= 2E 42 00                1082  P_SIZE_B        DC.B    '.B',0
00001727= 2E 57 00                1083  P_SIZE_W        DC.B    '.W',0
0000172A= 2E 4C 00                1084  P_SIZE_L        DC.B    '.L',0
0000172D= 4F 52 49 00             1085  P_OP_ORI        DC.B    'ORI',0
00001731= 43 4D 50 49 00          1086  P_OP_CMPI       DC.B    'CMPI',0
00001736= 42 43 4C 52 00          1087  P_OP_S_BCLR     DC.B    'BCLR',0
0000173B= 42 43 4C 52 00          1088  P_OP_D_BCLR     DC.B    'BCLR',0
00001740= 4D 4F 56 45 2E 42 00    1089  P_OP_MOVEB      DC.B    'MOVE.B',0
00001747= 4D 4F 56 45 41 2E ...   1090  P_OP_MOVEA_L    DC.B    'MOVEA.L',0 
0000174F= 4D 4F 56 45 2E 4C 00    1091  P_OP_MOVE_L     DC.B    'MOVE.L',0
00001756= 4D 4F 56 45 41 2E ...   1092  P_OP_MOVEA_W    DC.B    'MOVEA.W',0
0000175E= 4D 4F 56 45 2E 57 00    1093  P_OP_MOVE_W     DC.B    'MOVE.W',0
00001765= 4D 4F 56 45 4D 2E ...   1094  P_OP_MOVEM_W    DC.B    'MOVEM.W',0
0000176D= 4D 4F 56 45 4D 2E ...   1095  P_OP_MOVEM_L    DC.B    'MOVEM.L',0
00001775= 4C 45 41 00             1096  P_OP_LEA        DC.B    'LEA',0
00001779= 4A 53 52 00             1097  P_OP_JSR        DC.B    'JSR',0
0000177D= 4E 4F 50 00             1098  P_OP_NOP        DC.B    'NOP',0
00001781= 52 54 53 00             1099  P_OP_RTS        DC.B    'RTS',0
00001785= 4E 45 47 00             1100  P_OP_NEG        DC.B    'NEG',0
00001789= 53 55 42 51 00          1101  P_OP_SUBQ       DC.B    'SUBQ',0
0000178E= 42 52 41 00             1102  P_OP_BRA        DC.B    'BRA',0
00001792= 42 43 53 00             1103  P_OP_BCS        DC.B    'BCS',0
00001796= 42 47 45 00             1104  P_OP_BGE        DC.B    'BGE',0
0000179A= 42 4C 54 00             1105  P_OP_BLT        DC.B    'BLT',0
0000179E= 42 56 43 00             1106  P_OP_BVC        DC.B    'BVC',0
000017A2= 44 49 56 53 00          1107  P_OP_DIVS       DC.B    'DIVS',0
000017A7= 4F 52 00                1108  P_OP_OR         DC.B    'OR',0
000017AA= 53 55 42 00             1109  P_OP_SUB        DC.B    'SUB',0
000017AE= 45 4F 52 00             1110  P_OP_EOR        DC.B    'EOR',0
000017B2= 43 4D 50 00             1111  P_OP_CMP        DC.B    'CMP',0
000017B6= 4D 55 4C 53 00          1112  P_OP_MULS       DC.B    'MULS',0
000017BB= 41 44 44 41 00          1113  P_OP_ADDA       DC.B    'ADDA',0
000017C0= 41 44 44 00             1114  P_OP_ADD        DC.B    'ADD',0
000017C4= 4C 53 52 00             1115  P_OP_LSR        DC.B    'LSR',0
000017C8= 4C 53 4C 00             1116  P_OP_LSL        DC.B    'LSL',0
000017CC= 41 53 52 00             1117  P_OP_ASR        DC.B    'ASR',0
000017D0= 41 53 4C 00             1118  P_OP_ASL        DC.B    'ASL',0
000017D4= 52 4F 52 00             1119  P_OP_ROR        DC.B    'ROR',0
000017D8= 52 4F 4C 00             1120  P_OP_ROL        DC.B    'ROL',0
000017DC                          1121  ***************** END OF DATA CONSTANT PRINTS ***********************************
000017DC                          1122   
000017DC                          1123  
000017DC                          1124  **
000017DC                          1125  * AddStrToBuffer
000017DC                          1126  **
000017DC                          1127  * Adds the given NULL-terminated string to the specified buffer.
000017DC                          1128  *
000017DC                          1129  * Default buffer length is 80 characters, but can be modified in the argument
000017DC                          1130  * variables.
000017DC                          1131  *
000017DC                          1132  * If the buffer length is exceeded, either due to lack of a NULL character or
000017DC                          1133  * an incorrectly specified length, 1 is returned. Otherwise, 0 is returned to
000017DC                          1134  * indicate success.
000017DC                          1135  *
000017DC                          1136  **
000017DC                          1137  * @param Arg_AddStrToBuffer_String              Pointer to string
000017DC                          1138  * @param Arg_AddStrToBuffer_Buffer              Pointer to buffer
000017DC                          1139  * @param Arg_AddStrToBuffer_BufferLength        Length of buffer (default 80 chars)
000017DC                          1140  * @return Ret_AddStrToBuffer_Success            0 if successful, 1 otherwise.
000017DC                          1141  * @branch _AddStrToBuffer_FindBufferNullLoop    Loop to find NULL in buffer
000017DC                          1142  * @branch _AddStrToBuffer_AddLoop               Loop to add string to buffer
000017DC                          1143  * @branch _AddStrToBuffer_Success               Branch when string successfully added
000017DC                          1144  * @branch _AddStrToBuffer_StringLengthExceeded  Branch when length exceeded (either string or buffer)
000017DC                          1145  * @branch _AddStrToBuffer_End                   End of subroutine
000017DC                          1146  **
000017DC                          1147  Arg_AddStrToBuffer_String           DS.L    1
000017E0                          1148  Arg_AddStrToBuffer_Buffer           DS.L    1
000017E4= 00000050                1149  Arg_AddStrToBuffer_BufferLength     DC.L    80
000017E8                          1150  Ret_AddStrToBuffer_Success          DS.B    1
000017E9                          1151  
000017EA                          1152  AddStrToBuffer:                     DS.W    0
000017EA  48E7 C0C0               1153      MOVEM.L     D0-D1/A0-A1, -(SP)                  * Backup registers to stack
000017EE                          1154  
000017EE  2078 17DC               1155      MOVE.L      Arg_AddStrToBuffer_String, A0       * Load string pointer
000017F2  2278 17E0               1156      MOVE.L      Arg_AddStrToBuffer_Buffer, A1       * Load buffer pointer
000017F6  2038 17E4               1157      MOVE.L      Arg_AddStrToBuffer_BufferLength, D0 * Load buffer length
000017FA  4278 17E8               1158      CLR.W       Ret_AddStrToBuffer_Success          * Clear success bit
000017FE  4281                    1159      CLR.L       D1                                  * Clear loop counter
00001800                          1160  
00001800                          1161  _AddStrToBuffer_BufferLoop
00001800  0C11 0000               1162      CMPI.B      #0, (A1)                            * If buffer char is NULL
00001804  6700 000E               1163      BEQ         _AddStrToBuffer_AddLoop             * Start adding string to bufer
00001808                          1164      
00001808  B280                    1165      CMP.L       D0, D1                              * If counter >= max length
0000180A  6C00 0024               1166      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
0000180E                          1167      
0000180E  5289                    1168      ADDQ.L      #1, A1                              * Go to next character
00001810  5201                    1169      ADDQ.B      #1, D1                              * Increment counter
00001812  60EC                    1170      BRA         _AddStrToBuffer_BufferLoop          * Loop back
00001814                          1171      
00001814                          1172  _AddStrToBuffer_AddLoop
00001814  0C10 0000               1173      CMPI.B      #0, (A0)                            * If string char is NULL
00001818  6700 000E               1174      BEQ         _AddStrToBuffer_Success             * String successfully added
0000181C                          1175      
0000181C  B200                    1176      CMP.B       D0, D1                              * If counter >= max length
0000181E  6C00 0010               1177      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
00001822                          1178      
00001822  12D8                    1179      MOVE.B      (A0)+, (A1)+                        * Move string char to buffer char
00001824  5201                    1180      ADDQ.B      #1, D1                              * Increment counter
00001826  60EC                    1181      BRA         _AddStrToBuffer_AddLoop             * Loop back
00001828                          1182  
00001828                          1183  _AddStrToBuffer_Success
00001828  12BC 0000               1184      MOVE.B      #0, (A1)                            * Add NULL to end of string
0000182C  6000 0008               1185      BRA         _AddStrToBuffer_End                 * Finish subroutine
00001830                          1186  
00001830                          1187  _AddStrToBuffer_LengthExceeded
00001830  31FC 0001 17E8          1188      MOVE.W      #1, Ret_AddStrToBuffer_Success      * Invalidate success bit
00001836                          1189  
00001836                          1190  _AddStrToBuffer_End
00001836  4CDF 0303               1191      MOVEM.L     (SP)+, D0-D1/A0-A1                  * Restore registers from stack
0000183A  4E75                    1192      RTS                  
0000183C                          1193     
0000183C                          1194      END START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDSTRTOBUFFER      17EA
ADD_PERIOD          14B6
ARG_ADDSTRTOBUFFER_BUFFER  17E0
ARG_ADDSTRTOBUFFER_BUFFERLENGTH  17E4
ARG_ADDSTRTOBUFFER_STRING  17DC
B_BUFFER            1056
CG0_C               133A
CG0_F               1336
CHECK_OP_ADD        1482
CHECK_OP_ADDA       1482
CHECK_OP_ASL        1482
CHECK_OP_ASR        1482
CHECK_OP_BCS        1476
CHECK_OP_BGE        1476
CHECK_OP_BLT        1476
CHECK_OP_BRA        1476
CHECK_OP_BVC        1476
CHECK_OP_CMP        1482
CHECK_OP_CMPI       12E8
CHECK_OP_DIVS       147C
CHECK_OP_D_BCLR     131C
CHECK_OP_EOR        1482
CHECK_OP_JSR        1416
CHECK_OP_LEA        1402
CHECK_OP_LSL        1482
CHECK_OP_LSR        1482
CHECK_OP_MOVEA_L    1352
CHECK_OP_MOVEA_W    1398
CHECK_OP_MOVEM      143E
CHECK_OP_MOVE_B     133C
CHECK_OP_MOVE_L     1382
CHECK_OP_MOVE_W     13CC
CHECK_OP_MULS       1482
CHECK_OP_NEG        142A
CHECK_OP_NOP        13F2
CHECK_OP_OR         147C
CHECK_OP_ORI        12CA
CHECK_OP_ROL        1482
CHECK_OP_ROR        1482
CHECK_OP_RTS        13E2
CHECK_OP_SUB        147C
CHECK_OP_SUBQ       1452
CHECK_OP_S_BCLR     1302
CUR_OP_CODE         1000
C_GROUP_0           12C6
C_GROUP_1           133C
C_GROUP_2           1352
C_GROUP_3           1398
C_GROUP_4           13E2
C_GROUP_5           1452
C_GROUP_6           1476
C_GROUP_7           1476
C_GROUP_8           147C
C_GROUP_9           147C
C_GROUP_A           147C
C_GROUP_B           1482
C_GROUP_C           1482
C_GROUP_D           1482
C_GROUP_E           1482
C_GROUP_F           1482
EA_SIZE             1004
FIND_2_BIT_SIZE_TO_EA  1244
FIND_3_BIT_REG_TO_EA  1258
FIND_MOVEA_L_DIFFERENCE  1362
FIND_MOVEA_W_DIFFERENCE  13A8
FIND_TRAILING_BITS_TO_EA  12B2
GROUP_0             10FE
GROUP_1             1110
GROUP_2             1122
GROUP_3             1134
GROUP_4             1146
GROUP_5             1158
GROUP_6             116A
GROUP_7             117C
GROUP_8             118E
GROUP_9             11A0
GROUP_A             11B2
GROUP_B             11C4
GROUP_C             11D6
GROUP_D             11E8
GROUP_E             11FA
GROUP_F             120C
G_BUFFER            1006
INVALID_OP          1488
LETTER_ASCII        14AA
LOAD_OP_CODE        10E6
MAKE_VAL_ASCII      149C
MOVE_AND_MOVEA_PARSE_EA  126C
MOVE_LAST_6_BITS_TO_EA  1224
NUMBER_ASCII        14B0
OP_FOUND            171B
OP_JSR_DONE         121A
OP_JSR_ROUTINE      10F6
PRINT_OP            170E
PRINT_OP_ADD        169E
PRINT_OP_ADDA       16AC
PRINT_OP_ASL        16E4
PRINT_OP_ASR        16D6
PRINT_OP_BCS        1604
PRINT_OP_BGE        1612
PRINT_OP_BLT        1620
PRINT_OP_BRA        163C
PRINT_OP_BVC        162E
PRINT_OP_CMP        1682
PRINT_OP_CMPI       14D0
PRINT_OP_DIVS       164A
PRINT_OP_D_BCLR     1508
PRINT_OP_EOR        1674
PRINT_OP_JSR        15A2
PRINT_OP_LEA        15BE
PRINT_OP_LSL        16BA
PRINT_OP_LSR        16C8
PRINT_OP_MOVEA_L    153C
PRINT_OP_MOVEA_W    1568
PRINT_OP_MOVEB      1526
PRINT_OP_MOVEM_L    15E8
PRINT_OP_MOVEM_W    15DA
PRINT_OP_MOVE_L     1552
PRINT_OP_MOVE_W     157E
PRINT_OP_MULS       1690
PRINT_OP_NEG        15CC
PRINT_OP_NOP        1594
PRINT_OP_OR         1658
PRINT_OP_ORI        14C2
PRINT_OP_ROL        16F2
PRINT_OP_ROR        1700
PRINT_OP_RTS        15B0
PRINT_OP_SUB        1666
PRINT_OP_SUBQ       15F6
PRINT_OP_S_BCLR     14EA
P_INVALID_OP        1716
P_OP_ADD            17C0
P_OP_ADDA           17BB
P_OP_ASL            17D0
P_OP_ASR            17CC
P_OP_BCS            1792
P_OP_BGE            1796
P_OP_BLT            179A
P_OP_BRA            178E
P_OP_BVC            179E
P_OP_CMP            17B2
P_OP_CMPI           1731
P_OP_DIVS           17A2
P_OP_D_BCLR         173B
P_OP_EOR            17AE
P_OP_JSR            1779
P_OP_LEA            1775
P_OP_LSL            17C8
P_OP_LSR            17C4
P_OP_MOVEA_L        1747
P_OP_MOVEA_L_A_L    10B2
P_OP_MOVEA_L_T      10A6
P_OP_MOVEA_W        1756
P_OP_MOVEB          1740
P_OP_MOVEM_L        176D
P_OP_MOVEM_W        1765
P_OP_MOVE_L         174F
P_OP_MOVE_W         175E
P_OP_MULS           17B6
P_OP_NEG            1785
P_OP_NOP            177D
P_OP_OR             17A7
P_OP_ORI            172D
P_OP_ROL            17D8
P_OP_ROR            17D4
P_OP_RTS            1781
P_OP_SUB            17AA
P_OP_SUBQ           1789
P_OP_S_BCLR         1736
P_SIZE_B            1724
P_SIZE_L            172A
P_SIZE_W            1727
READ_NEXT_INSTRUCTION  1498
RET_ADDSTRTOBUFFER_SUCCESS  17E8
START               10BE
VALID_OP_CODE       1002
_ADDSTRTOBUFFER_ADDLOOP  1814
_ADDSTRTOBUFFER_BUFFERLOOP  1800
_ADDSTRTOBUFFER_END  1836
_ADDSTRTOBUFFER_LENGTHEXCEEDED  1830
_ADDSTRTOBUFFER_SUCCESS  1828
