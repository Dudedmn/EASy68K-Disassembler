000010BC Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/12/2019 3:13:34 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OP Code routines for Disassembler
00000000                             3  * Written by : Daniel Yan
00000000                             4  * Date       : 2/28/2019, Updated 3/12/2019
00000000                             5  
00000000                             6  * Description: Disassembler routines to identify any valid
00000000                             7  * OP code dependent on current supported list.
00000000                             8  *------------------------------------------------------------
00001000                             9    ORG $1000 ; Start at Address $1000
00001000                            10  CUR_OP_CODE DS.W 1  ; Current OP Code Word
00001002                            11  EA_SIZE     DS.B 1
00001003                            12  G_BUFFER    DS.B 80
00001053                            13  B_BUFFER    DS.B 80
000010A3                            14  MNEMONIC    DS.B 1
000010A4                            15  FIRST_3     DS.B 1
000010A5                            16  SECOND_3    DS.B 1
000010A6                            17  THIRD_3     DS.B 1
000010A7                            18  FOURTH_3    DS.B 1
000010A8                            19  
000010A8= 4D4F5645 412E4C00 ...     20  P_OP_MOVEA_L_T  DC.L    'MOVEA.L',0
000010B4= 412E4C00 00000000         21  P_OP_MOVEA_L_A_L DC.L   'A.L',0
000010BC                            22      
000010BC                            23  
000010BC                            24  START
000010BC  49F8 1003                 25      LEA G_BUFFER,A4
000010C0  18BC 0000                 26      MOVE.B #0, (A4)
000010C4                            27      
000010C4                            28      ;MOVE.L (A5)+, D0
000010C4                            29  ************** BUFFER PRINTING/LOADING EXAMPLES *************************************
000010C4                            30      ; Load the message onto A4
000010C4                            31      ;MOVE.L #P_OP_MOVEA_L_T, Arg_AddStrToBuffer_String
000010C4                            32      ;MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer 
000010C4                            33      ;JSR AddStrToBuffer
000010C4                            34      ;LEA G_BUFFER, A4   ; Load the value of the message onto the G_BUFFER
000010C4                            35      ;MOVE.L P_OP_MOVEA_L_T,(A4)+
000010C4                            36      ;MOVE.L P_OP_MOVEA_L_A_L,(A4)+
000010C4                            37      
000010C4                            38  ***************************** Input Tests ********************************************
000010C4                            39      ***GROUP 0 tests**** SUPPORTED: ORI, BCLR (static, dynamic), CMPI
000010C4                            40      ;MOVE.W #%0000000000111100,CUR_OP_CODE      ;ORI TO CCR             SHOULD FAIL
000010C4                            41      ;MOVE.W #%0000000001111100,CUR_OP_CODE      ;ORI TO SR              SHOULD FAIL
000010C4                            42      ;MOVE.W #%0000000010000101,CUR_OP_CODE      ;ORI.W D5               SHOULD PASS
000010C4                            43      ;MOVE.W #%0000001001111100,CUR_OP_CODE      ;ANDI TO CCR            SHOULD FAIL
000010C4                            44      ;MOVE.W #%0000001001111100,CUR_OP_CODE      ;ANDI TO SR             SHOULD FAIL
000010C4                            45      ;MOVE.W #%0000001010000101,CUR_OP_CODE      ;ANDI.W D5              SHOULD FAIL
000010C4                            46      ;MOVE.W #%0000010010000101,CUR_OP_CODE      ;SUBI.W D5              SHOULD FAIL
000010C4                            47      ;MOVE.W #%0000011010000101,CUR_OP_CODE      ;ADDI.W D5              SHOULD FAIL
000010C4                            48      ;MOVE.W #%0000101000111100,CUR_OP_CODE      ;EORI TO CCR            SHOULD FAIL
000010C4                            49      ;MOVE.W #%0000101001111100,CUR_OP_CODE      ;EORI TO SR             SHOULD FAIL
000010C4                            50      ;MOVE.W #%0000101010000101,CUR_OP_CODE      ;EORI.W D5              SHOULD FAIL
000010C4                            51      ;MOVE.W #%0000100000000101,CUR_OP_CODE      ;STATIC BTST.B D5       SHOULD FAIL
000010C4  31FC 0845 1000            52      MOVE.W #%0000100001000101,CUR_OP_CODE      ;STATIC BCHG.B D5       SHOULD FAIL
000010CA                            53      *MOVE.W #%0000100011000101,CUR_OP_CODE      ;STATIC BSET.B D5       SHOULD FAIL
000010CA                            54      *MOVE.W #%0000111100000101,CUR_OP_CODE      ;DYNAMIC BTST.B D7,D5   SHOULD FAIL
000010CA                            55      *MOVE.W #%0000111101000101,CUR_OP_CODE      ;DYNAMIC BCHG.B,D7,D5   SHOULD FAIL
000010CA                            56      *MOVE.W #%0000111111000101,CUR_OP_CODE      ;DYNAMIC BSET.B D7,D5   SHOULD FAIL
000010CA                            57      *MOVE.W #%0000111111001101,CUR_OP_CODE      ;MOVEP.L MEM TO REG, A5 SHOULD FAIL
000010CA                            58          
000010CA                            59      
000010CA                            60      
000010CA                            61      
000010CA                            62      ***GROUP 1 tests**** SUPPORTED: MOVE.B
000010CA                            63      
000010CA                            64      ***GROUP 2 tests**** SUPPORTED: MOVEA.L, MOVE.L
000010CA                            65      
000010CA                            66      ***GROUP 3 tests**** SUPPORTED: MOVEA.W, MOVE.W
000010CA                            67      
000010CA                            68      ***CATEGORIZE THESE TESTS INTO APPROPRIATE AREA****************
000010CA                            69      ;MOVE.W #%0000100010000010,CUR_OP_CODE       ;Static BCLR
000010CA                            70      ;MOVE.W #%0000111110001110,CUR_OP_CODE       ;Dynamic BCLR
000010CA                            71      ;MOVE.W #%0000000001000001,CUR_OP_CODE       ;ORI.W D1
000010CA                            72          
000010CA                            73      ;MOVE.W #%0000111110001110,CUR_OP_CODE              ;Dynamic BCLR
000010CA                            74      ;IN HEX $018E. D7 = 110, D6 = 001, D4 = %110, D5 = 7, (A6) = %0000
000010CA                            75      ;MOVE.W #%0000100010001110,CUR_OP_CODE              ;Static BCLR
000010CA                            76      ;IN HEX $018E. D7 = 110, D6 = 001, D4 = %110, D5 = 7, (A6) = %0000
000010CA                            77     
000010CA                            78      ;MOVE.W  #$018E,CUR_OP_CODE                        ;Dynamic BCLR in hex
000010CA                            79      ;MOVE.W  #$02FF,CUR_OP_CODE                         ;INVALID_OP code
000010CA                            80      ;MOVE.W #%0000110001010111,CUR_OP_CODE
000010CA                            81      ;MOVE.W #%0010011001001101,CUR_OP_CODE                       ;MOVEA  
000010CA                            82       ;MOVE.W #%0010001001001101,CUR_OP_CODE              ;MOVEA.L A5,A1
000010CA                            83      ;MOVE.W CUR_OP_CODE,(A6)
000010CA                            84      ;MOVE.W #$264D
000010CA                            85      ;Expected values:
000010CA                            86      ;D7, DST REG:   011
000010CA                            87      ;D6, DST MODE:  001
000010CA                            88      ;D5, SRC REG:   101
000010CA                            89      ;D4, SRC MODE:  001
000010CA                            90      ;CHECK IF DST MODE IS %111 or SRC MODE IS %111 for MOVE
000010CA                            91      ;(A3), DST TRAIL:  001
000010CA                            92      ;(A2), SRC TRAIL: ONLY FOR MOVE
000010CA                            93      ;MOVE.W #%0010000000001101,CUR_OP_CODE              ;MOVE.L A5,A1
000010CA                            94      ;MOVE.W #%0011011001001101,CUR_OP_CODE              ;MOVEA.W A5,A1
000010CA                            95      ;MOVE.W #%1001011001111101,CUR_OP_CODE               ;MOVE TO TEST PARSE_EA_CONSTANT_BITS
000010CA                            96      ;MOVE.W #%0011000000001101,CUR_OP_CODE              ;MOVE.W A5,A1
000010CA                            97      ;MOVE.W #%0000000001000001,CUR_OP_CODE              ;ORI.W D1
000010CA                            98      ;MOVE.W CUR_OP_CODE,A6                              ;Loading memory space to address register
000010CA                            99      ;MOVE.W CUR_OP_CODE,(A6)                            ;Loading memory value to address value
000010CA                           100      ***CATEGORIZE THESE TESTS INTO APPROPRIATE AREA***************
000010CA                           101      
000010CA                           102      
000010CA                           103      ****GROUP 4 tests**** SUPPORTED: LEA, JSR, RTS, NEG, MOVEM
000010CA                           104      ;MOVE.W #$4E75,CUR_OP_CODE                            ;RTS
000010CA                           105      ;MOVE.W #$4E71,CUR_OP_CODE                            ;NOP
000010CA                           106      ;MOVE.W #$4415,CUR_OP_CODE                            ;NEG.L D5
000010CA                           107      ;MOVE.W #$43CC,CUR_OP_CODE                            ;LEA A1,A6
000010CA                           108      ;MOVE.W #%0100100010001110,CUR_OP_CODE
000010CA                           109      ;MOVE.W #$488E,CUR_OP_CODE                            ;MOVEM.W Reg to Mem, A6
000010CA                           110      ;MOVE.W #$4C8E,CUR_OP_CODE                            ;MOVEM.W Mem to Reg, A6
000010CA                           111      ;MOVE.W #$4E95,CUR_OP_CODE                            ;JSR (A5)               
000010CA                           112      ****GROUP 5 tests****
000010CA                           113      ;MOVE.W #%0101111110001111
000010CA                           114      
000010CA                           115      *****GROUP 5 TESTS**** SUPPORTED: SUBQ
000010CA                           116      ;#%0101111100000101, SUBQ.B D5
000010CA                           117      ;MOVE.W #$5F05,CUR_OP_CODE ; for SUBQ.B D5
000010CA                           118      ;#%0101111110001110, SUBQ.L A6 
000010CA                           119      ;MOVE.W #$5F8E,CUR_OP_CODE
000010CA                           120      ******GROUP 5 VALIDATION TESTS**********
000010CA                           121      ;MOVE.W #%0101111000001110,CUR_OP_CODE  ; ADDQ
000010CA                           122      ;MOVE.W #%0101010011000110,CUR_OP_CODE ; Scc
000010CA                           123      ;MOVE.W #%0101010011001110,CUR_OP_CODE ; DBcc
000010CA                           124     
000010CA                           125      *****GROUP 6 TESTS********* SUPPORTED: BCS,BGE,BLT,BVC
000010CA                           126      ; DISPLACEMENT, $00 is 16 bits, $FF is 32 bits
000010CA                           127      ; DISPLACEMENT = Last 8 bits
000010CA                           128      ;MOVE.W #%0110000001010101,CUR_OP_CODE   ;BRA
000010CA                           129      ;MOVE.W #%0110010100000001,CUR_OP_CODE   ;BCS
000010CA                           130      ;MOVE.W #%0110110001010100,CUR_OP_CODE   ;BGE
000010CA                           131      ;MOVE.W #%0110110110101010,CUR_OP_CODE   ;BLT
000010CA                           132      ;MOVE.W #%0110100001010100,CUR_OP_CODE   ;BVC
000010CA                           133      
000010CA                           134      *****GROUP 7 TESTS**********        ;Should be ALL INVALID
000010CA                           135      
000010CA                           136      *****GROUP 8 TESTS********** SUPPORTED: DIVS, OR
000010CA                           137      
000010CA                           138      *****GROUP 9 TESTS********** SUPPORTED: SUB
000010CA                           139      
000010CA                           140      *****GROUP A TESTS**********        ;Should be ALL INVALID
000010CA                           141      
000010CA                           142      *****GROUP B TESTS********** SUPPORTED: EOR, CMP
000010CA                           143      
000010CA                           144      *****GROUP C TESTS********** SUPPORTED: MULS
000010CA                           145      
000010CA                           146      *****GROUP D TESTS********** SUPPORTED: ADD, ADDA
000010CA                           147      
000010CA                           148      *****GROUP E TESTS********** SUPPORTED: LSX, ASX, ROX
000010CA                           149      
000010CA                           150      *****GROUP F TESTS**********        ;Should be ALL INVALID
000010CA                           151      
000010CA                           152      
000010CA                           153      
000010CA                           154  ************************************************************************************
000010CA                           155  * PRINTING BUFFER FUNCTION HAS BEEN FINISHED
000010CA                           156  *-----------------------------------------------------------
000010CA                           157  *First Nibble Values (15-12)
000010CA                           158  *Value                  Operations
000010CA                           159  *$0                     GROUP_0: ORI,BCLR (static and dynamic),CMPI --- DONE, need validation testing
000010CA                           160  *$1                     GROUP_1: MOVE.B                             --- DONE, need validation testing
000010CA                           161  *$2                     GROUP_2: MOVE.L, MOVEA.L                    --- DONE, need validation testing
000010CA                           162  *$3                     GROUP_3: MOVE.W, MOVEA.W                    --- Partial, needs trailing bits
000010CA                           163  *$4                     GROUP_4: LEA,JSR,RTS,NEG,MOVEM              --- Partial, needs SIZE print for NEG, MOVE
000010CA                           164  *$5                     GROUP_5: SUBQ                               --- Partial, needs SIZE pri
000010CA                           165  *$6                     GROUP_6: Bcc(BCS,BGE,BLT,BVC), BRA          --- Not started
000010CA                           166  *$7                     GROUP_7: INVALID_OP                         --- DONE
000010CA                           167  *$8                     GROUP_8: DIVS, OR                           --- Not started
000010CA                           168  *$9                     GROUP_9: SUB                                --- Not started
000010CA                           169  *$A                     GROUP_A: INVALID_OP                         --- DONE
000010CA                           170  *$B                     GROUP_B: EOR, CMP                           --- Not started
000010CA                           171  *$C                     GROUP_C: MULS                               --- Not started
000010CA                           172  *$D                     GROUP_D: ADD, ADDA                          --- Not started
000010CA                           173  *$E                     GROUP_E: LSR, LSL, ASR, ASL, ROL, ROR       --- Not started
000010CA                           174  *$F                     GROUP_F: INVALID_OP                         --- DONE
000010CA                           175  
000010CA                           176  
000010CA                           177  * OP_JSR_Routine
000010CA                           178  **********************************************************************************
000010CA                           179  * Description: Catalog all supported OP codes into groupings based on their hex
000010CA                           180  * values. Sort the supported OP codes by looking at the first nibble for their
000010CA                           181  * grouping value. Call underlying subroutines for further identification of the
000010CA                           182  * op code.
000010CA                           183  *
000010CA                           184  * Registers used: A6,D0,D1 
000010CA                           185  *
000010CA                           186  * Precondition: Instruction set (size Word) has been loaded in the appropriate
000010CA                           187  * address to be parsed and read.
000010CA                           188  
000010CA                           189  * Postcondition: OP code has been identified as either valid or invalid. If it is
000010CA                           190  * valid, it is stored into A6 and EA parsing methods are called to pass needed
000010CA                           191  * information to EA. If invalid, DATA output will be utilized to indicate so.
000010CA                           192  **********************************************************************************
000010CA                           193  * These valid operand codes refer to the basic supported operand codes
000010CA                           194  * Groups refer to the first nibble value that is supported by the operand
000010CA                           195  LOAD_OP_CODE:
000010CA  3038 1000                196      MOVE.W CUR_OP_CODE,D0
000010CE  3CB8 1000                197      MOVE.W CUR_OP_CODE,(A6)
000010D2  3016                     198      MOVE.W (A6),D0          ;Load current instruction set into D0
000010D4  4EB9 000010DA            199      JSR OP_JSR_Routine      ;Use the JSR routine to identify the op code
000010DA                           200  OP_JSR_Routine:
000010DA  48E7 C000                201      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
000010DE  720C                     202      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
000010E0  E2A8                     203      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
000010E2                           204  
000010E2                           205  GROUP_0:                ;$0| ORI, BCLR (static and dynamic), CMPI                  
000010E2  B03C 0000                206      CMP.B   #$0,D0                 ;Compare first nibble
000010E6  6600 000C                207      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
000010EA  4EB9 00001300            208      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
000010F0  6000 010C                209      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000010F4                           210      
000010F4                           211  GROUP_1:                ;$1| MOVE.B
000010F4  B03C 0001                212      CMP.B   #$1,D0                 ;Compare first nibble
000010F8  6600 000C                213      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
000010FC  4EB9 000014AE            214      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
00001102  6000 00FA                215      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001106                           216  
00001106                           217  GROUP_2:                ;$2| MOVE.L, MOVEA.L
00001106  B03C 0002                218      CMP.B   #$2,D0                 ;Compare first nibble
0000110A  6600 000C                219      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
0000110E  4EB9 000014C4            220      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
00001114  6000 00E8                221      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001118                           222  
00001118                           223  GROUP_3:                ;$3| MOVE.W, MOVEA.W
00001118  B03C 0003                224      CMP.B   #$3,D0                 ;Compare first nibble
0000111C  6600 000C                225      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
00001120  4EB9 0000150A            226      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
00001126  6000 00D6                227      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000112A                           228  
0000112A                           229  GROUP_4:                ;$4| LEA, JSR, RTS, NEG, MOVEM
0000112A  B03C 0004                230      CMP.B   #$4,D0                 ;Compare first nibble
0000112E  6600 000C                231      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
00001132  4EB9 00001550            232      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
00001138  6000 00C4                233      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000113C                           234  
0000113C                           235  
0000113C                           236  GROUP_5:                ;$5| SUBQ
0000113C  B03C 0005                237      CMP.B   #$5,D0                 ;Compare first nibble
00001140  6600 000C                238      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
00001144  4EB9 00001788            239      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
0000114A  6000 00B2                240      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000114E                           241  
0000114E                           242  
0000114E                           243  GROUP_6:                ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
0000114E  B03C 0006                244      CMP.B   #$6,D0                 ;Compare first nibble
00001152  6600 000C                245      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
00001156  4EB9 000017D8            246      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
0000115C  6000 00A0                247      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001160                           248  
00001160                           249  
00001160                           250  GROUP_7:                ;$7| Display: DATA, $WXYZ (Unsupported)
00001160  B03C 0007                251      CMP.B   #$7,D0                 ;Compare first nibble
00001164  6600 000C                252      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
00001168  4EB9 00001850            253      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
0000116E  6000 008E                254      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001172                           255  
00001172                           256  
00001172                           257  GROUP_8:                ;$8| DIVS, OR
00001172  B03C 0008                258      CMP.B   #$8,D0                 ;Compare first nibble
00001176  6600 000C                259      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
0000117A  4EB9 00001862            260      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
00001180  6000 007C                261      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001184                           262  
00001184                           263  
00001184                           264  GROUP_9:                ;$9| SUB
00001184  B03C 0009                265      CMP.B   #$9,D0                 ;Compare first nibble
00001188  6600 000C                266      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
0000118C  4EB9 000018A4            267      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
00001192  6000 006A                268      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001196                           269  
00001196                           270  
00001196                           271  GROUP_A:                ;$A| Display: DATA, $WXYZ (Unsupported)
00001196  B03C 000A                272      CMP.B   #$A,D0                 ;Compare first nibble
0000119A  6600 000C                273      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
0000119E  4EB9 000018D2            274      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
000011A4  6000 0058                275      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011A8                           276  
000011A8                           277  
000011A8                           278  GROUP_B:                ;$B| EOR, CMP
000011A8  B03C 000B                279      CMP.B   #$B,D0                 ;Compare first nibble
000011AC  6600 000C                280      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
000011B0  4EB9 000018D8            281      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
000011B6  6000 0046                282      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011BA                           283  
000011BA                           284  
000011BA                           285  GROUP_C:                ;$C| MULS
000011BA  B03C 000C                286      CMP.B   #$C,D0                 ;Compare first nibble
000011BE  6600 000C                287      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
000011C2  4EB9 00001928            288      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
000011C8  6000 0034                289      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011CC                           290  
000011CC                           291  
000011CC                           292  GROUP_D:                 ;$D| ADD, ADDA
000011CC  B03C 000D                293      CMP.B   #$D,D0                 ;Compare first nibble
000011D0  6600 000C                294      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
000011D4  4EB9 00001988            295      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
000011DA  6000 0022                296      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011DE                           297  
000011DE                           298  
000011DE                           299  GROUP_E:                ;$E| LSR, LSL, ASR, ASL, ROL, ROR
000011DE  B03C 000E                300      CMP.B   #$E,D0                 ;Compare first nibble
000011E2  6600 000C                301      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
000011E6  4EB9 000019B6            302      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
000011EC  6000 0010                303      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011F0                           304  
000011F0                           305  
000011F0                           306  GROUP_F:                ;$F| Display: DATA, $WXYZ (Unsupported)
000011F0  B03C 000F                307      CMP.B   #$F,D0                 ;Compare first nibble
000011F4  4EB9 00001AF4            308      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
000011FA  6000 0002                309      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011FE                           310  
000011FE                           311  
000011FE                           312  OP_JSR_DONE:
000011FE  4CDF 0003                313           MOVEM.L (SP)+,D0-D1       ;Recover register D0
00001202  4EF9 00001B0A            314           JMP READ_NEXT_INSTRUCTION
00001208                           315  **********************************************************************************
00001208                           316  
00001208                           317  ********** EA Parsing ************************************************************
00001208                           318  
00001208                           319  * MOVE_LAST_6_BITS_TO_EA
00001208                           320  **********************************************************************************
00001208                           321  * Description: For OP codes with the last 6 bits specified as EA Mode and EA Reg,
00001208                           322  * the last 6 bits will be parsed and moved into the appropriate registers.
00001208                           323  *
00001208                           324  * Registers used: A6,D0,D1,D6,D7 
00001208                           325  
00001208                           326  * Precondition: OP code has been identified with only the last 6 bits for EA,
00001208                           327  * current instruction set is stored into A6.
00001208                           328  
00001208                           329  * Postcondition: Last 6 bits of instruction bit has been isolated and stored. Bits
00001208                           330  * for EA Mode have been stored in D7, Bits for EA Reg been stored in D6.
00001208                           331  **********************************************************************************
00001208                           332  MOVE_LAST_6_BITS_TO_EA:      ;Move last 6 bits from EA field to relevant registers
00001208                           333     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001208  3038 1000                334      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
0000120C  323C 000A                335      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
00001210  E368                     336      LSL.W   D1,D0            ;Truncate to find the last 6 bits
00001212  E268                     337      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
00001214  3E00                     338      MOVE.W  D0,D7            ;Move last 6 bits into D7
00001216  323C 0003                339      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
0000121A  E26F                     340      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
0000121C  3C07                     341      MOVE.W  D7,D6            ;Move the 'upper' 3 bits into D6
0000121E  323C 000D                342      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
00001222  E368                     343      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
00001224  E268                     344      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001226  3E00                     345      MOVE.W  D0,D7            ;Move the 'lower' 3 bits into D7
00001228                           346     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
00001228  4E75                     347      RTS                      ;Return to stack
0000122A                           348      
0000122A                           349  * FIND_2_BIT_SIZE_TO_EA
0000122A                           350  **********************************************************************************
0000122A                           351  * Description: For OP codes with 2 bit size fields, the 2 relevant bits (7-6) will 
0000122A                           352  * be parsed and moved to the appropriate registers.
0000122A                           353  *
0000122A                           354  * Registers used: A6,D0,D1,D5
0000122A                           355  *
0000122A                           356  * Precondition: OP code has been identified with 2 size bit field for EA, current
0000122A                           357  * instruction set for OP code is stored in to A6.
0000122A                           358  *
0000122A                           359  * Postcondition: 2 bit size field has been isolated and stored into D5.
0000122A                           360  **********************************************************************************
0000122A                           361  FIND_2_BIT_SIZE_TO_EA:      ;Move the 2 bit size field relevant register
0000122A                           362     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
0000122A  3038 1000                363      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
0000122E  323C 0008                364      MOVE.W   #8,D1          ;Prepare 8 bit shift to D1
00001232  E368                     365      LSL.W    D1,D0          ;Truncate to find the 2 size bits
00001234  E268                     366      LSR.W    D1,D0          ;Reposition the bits
00001236  323C 0006                367      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
0000123A  E268                     368      LSR.W    D1,D0          ;Truncate to shift 2 bits to a byte
0000123C  3800                     369      MOVE.W   D0,D4          ;Move 2 size bits into D5
0000123E                           370    ;  MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
0000123E  4E75                     371      RTS                     ;Return to stack
00001240                           372  **********************************************************************************
00001240                           373  
00001240                           374  * FIND_3_BIT_REG_TO_EA
00001240                           375  **********************************************************************************
00001240                           376  * Description: OP codes with a dynamic 3 bit register in bits 11-9 will be parsed
00001240                           377  * and have those 3 bits isolated and moved to the appropriate registers.
00001240                           378  *
00001240                           379  * Registers used: A6,D0,D1,D5
00001240                           380  *
00001240                           381  * Precondition: OP code has been identified with a dynamic 3 bit register in bits
00001240                           382  * 11-9.
00001240                           383  *
00001240                           384  * Postcondition: 3 bit dynamic register has been isolated and stored into D4.
00001240                           385  **********************************************************************************
00001240                           386  FIND_3_BIT_REG_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
00001240                           387     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
00001240  3038 1000                388      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
00001244  323C 0004                389      MOVE.W   #4,D1          ;Prepare 4 bit shift to D1
00001248  E368                     390      LSL.W    D1,D0          ;Truncate to find the 2 size bits
0000124A  E268                     391      LSR.W    D1,D0          ;Reposition the bits
0000124C  323C 0009                392      MOVE.W   #9,D1          ;Prepare 9 bit shift to D1
00001250  E268                     393      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
00001252  3A00                     394      MOVE.W   D0,D5          ;Move 3 register bits into D4
00001254                           395     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
00001254  4E75                     396      RTS                     ;Return to stack
00001256                           397  **********************************************************************************
00001256                           398  
00001256                           399  * MOVE_AND_MOVEA_PARSE_EA
00001256                           400  **********************************************************************************
00001256                           401  * Description: Special parsing for the SRC and DST Mode/Reg for MOVE/MOVE
00001256                           402  *
00001256                           403  * Registers used: A6,D0,D1,D7,D6,D5,D4
00001256                           404  *
00001256                           405  * Precondition: OP code has been identified with either MOVE or MOVEA
00001256                           406  *
00001256                           407  * Postcondition: Store all relevant EA bits into associated register.
00001256                           408  **********************************************************************************
00001256                           409  MOVE_AND_MOVEA_PARSE_EA:       ;Move the 3 bit dynamic register bits to proper register
00001256                           410     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001256  3038 1000                411      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
0000125A  323C 000A                412      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
0000125E  E368                     413      LSL.W   D1,D0            ;Truncate to find the last 6 bits
00001260  E268                     414      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
00001262  3E00                     415      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
00001264  323C 0003                416      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
00001268  E26F                     417      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
0000126A  3A07                     418      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
0000126C  323C 000D                419      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
00001270  E368                     420      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
00001272  E268                     421      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001274  3800                     422      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
00001276                           423      **************MOVING SOURCE*********** TO BE DONE LATER
00001276                           424      ; MOVE.W #%0011 011 001 001 101,(A6)              ;MOVEA.W A5,A3
00001276                           425      ; MOVE.W #%0010 011 001 001 101,D0                ;MOVEA.L A5,A3
00001276                           426       ;Expected values:
00001276                           427      ;D7, DST REG:   011
00001276                           428      ;D6, DST MODE:  001
00001276                           429      ;D5, SRC MODE:  001
00001276                           430      ;D4, SRC REG:   101
00001276                           431      ;00011001
00001276  3038 1000                432      MOVE.W CUR_OP_CODE,D0     ;Move current OP code into D0     
0000127A  323C 0004                433      MOVE.W  #4,D1             ;Prepare 4 bit shift to D1
0000127E  E368                     434      LSL.W   D1,D0             ;Truncate to find bits 11-6
00001280  E268                     435      LSR.W   D1,D0             ;Reposition bits
00001282  323C 0006                436      MOVE.W  #6,D1             ;Prepare 6 bit shift to D1
00001286  E268                     437      LSR.W   D1,D0             ;Truncate the SRC Reg/Mode bits
00001288  323C 0003                438      MOVE.W  #3,D1             ;Prepare a 3 bit shift to D1 for DST Reg/Mode
0000128C  3C00                     439      MOVE.W  D0,D6             ;Copy over the current 6 bits to D6
0000128E  E268                     440      LSR.W   D1,D0             ;Truncate DST Mode  
00001290  3E00                     441      MOVE.W  D0,D7             ;Move DST Reg to D7
00001292  323C 000D                442      MOVE.W  #13,D1             
00001296  E36E                     443      LSL.W   D1,D6             ;Truncate 13 bits in D6
00001298  E26E                     444      LSR.W   D1,D6             ;Reposition D6
0000129A                           445                                ;D6 now contains the DST Reg
0000129A                           446     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
0000129A  4E75                     447      RTS                     ;Return to stack
0000129C                           448  **********************************************************************************
0000129C                           449  
0000129C                           450  *FIND_TRAILING_BITS_TO_EA
0000129C                           451  **********************************************************************************
0000129C                           452  FIND_TRAILING_BITS_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
0000129C                           453     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
0000129C  3038 1000                454      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
000012A0  323C 0007                455      MOVE.W   #7,D1          ;Prepare 4 bit shift to D1
000012A4  E368                     456      LSL.W    D1,D0          ;Truncate to find the 2 size bits
000012A6  E268                     457      LSR.W    D1,D0          ;Reposition the bits
000012A8  323C 0006                458      MOVE.W   #6,D1          ;Prepare 9 bit shift to D1
000012AC  E268                     459      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
000012AE  3680                     460      MOVE.W   D0,(A3)          ;Move 3 register bits into D4
000012B0                           461     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
000012B0  4E75                     462      RTS                    ;Return to stack
000012B2                           463  **********************************************************************************
000012B2                           464  
000012B2                           465  *PARSE_EA_CONSTANT_BITS
000012B2                           466  **********************************************************************************
000012B2                           467  * Definition: Uses CUR_OP_CODE to shift the proper bits into the global constants
000012B2                           468  * used for EA (MNEMONIC,FIRST_3,SECOND_3,THIRD_3,FOURTH_3. Where MNEMONIC refers
000012B2                           469  * to the first 4 bits of CUR_OP_CODE (15-12), FIRST_3 refers to the first group
000012B2                           470  * of 3 bits (11-9), SECOND_3 refers to the second group of 3 bits (8-6), THIRD_3
000012B2                           471  * refers to the third group of 3 bits (5-3), and FOURTH_3 refers to the fourth
000012B2                           472  * group of 3 bits (2-0). Shifts CUR_OP_CODE bits to initialize constants.
000012B2                           473  *
000012B2                           474  * Registers used: D0,D1
000012B2                           475  *
000012B2                           476  * Precondition: CUR_OP_CODE has been set with an 4 hex instruction set
000012B2                           477  * 
000012B2                           478  * Postcondition: MNEMONIC, FIRST_3, SECOND_3, THIRD_3, FOURTH_3 have been set
000012B2                           479  * to the corresponding values.
000012B2                           480  **********************************************************************************
000012B2                           481  PARSE_EA_CONSTANT_BITS:
000012B2                           482      *MNEMONIC SHIFT
000012B2  3038 1000                483      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D0
000012B6  323C 000C                484      MOVE.W #12,D1               ;Prepare a bit shift of 12 into D1
000012BA  E268                     485      LSR.W D1,D0                 ;Shift 12 bits from D0 right
000012BC  11C0 10A3                486      MOVE.B D0,MNEMONIC          ;Set MNEMONIC to D0
000012C0                           487      *FIRST_3 SHIFT
000012C0  323C 0009                488      MOVE.W #9,D1                ;Prepare a bit shift of 9 into D1
000012C4  3038 1000                489      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012C8  E948                     490      LSL.W #4,D0                 ;Shift out bits 15-12 in D0
000012CA  E848                     491      LSR.W #4,D0                 ;Reposition D0
000012CC  E268                     492      LSR.W  D1,D0                ;Shift D0 9 bits right
000012CE  11C0 10A4                493      MOVE.B D0,FIRST_3           ;Set FIRST_3 to D0
000012D2                           494      *SECOND_3 SHIFT
000012D2  3038 1000                495      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012D6  EF48                     496      LSL.W #7,D0                 ;Shift out bits 15-9 in D0
000012D8  EE48                     497      LSR.W #7,D0                 ;Reposition D0
000012DA  EC48                     498      LSR.W #6,D0                 ;Shift D0 6 bits right
000012DC  11C0 10A5                499      MOVE.B D0,SECOND_3          ;Set SECOND_3 to D0
000012E0                           500      *THIRD_3 SHIFT
000012E0  3038 1000                501      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012E4  E648                     502      LSR.W #3,D0                 ;Shift D0 3 bits right
000012E6  323C 000D                503      MOVE.W #13,D1               ;Prepare a 13 bit shift into D1
000012EA  E368                     504      LSL.W D1,D0                 ;Truncate first 13 bits of D0
000012EC  E268                     505      LSR.W D1,D0                 ;Reposition D0
000012EE  11C0 10A6                506      MOVE.B D0,THIRD_3           ;Set THIRD_3 to D0
000012F2                           507      *FOURTH_3 SHIFT
000012F2  3038 1000                508      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012F6  E368                     509      LSL.W D1,D0                 ;Grab the fourth 3-bit group
000012F8  E268                     510      LSR.W D1,D0                 ;Shift D0 back into position
000012FA  11C0 10A7                511      MOVE.B D0,FOURTH_3          ;Set FOURTH_3 to Do
000012FE  4E75                     512      RTS                         ;Return to stack
00001300                           513  **********************************************************************************
00001300                           514  ********** End of EA Parsing *****************************************************
00001300                           515  
00001300                           516  *******************JMP LABELS ****************************************************
00001300                           517  * Labelling for group codes will be in the following format
00001300                           518  
00001300                           519  * <JMP Labelname>
00001300                           520  ********************************************************************************
00001300                           521  * Checking List Order (If more than one value)
00001300                           522  * Operand1 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
00001300                           523  * Operand2 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
00001300                           524  
00001300                           525  * Where a-b will refer to the bit corresponding bit value in the instruction
00001300                           526  * format, and a specifier will be attached such as Size, EA Mode, SRC Reg, etc
00001300                           527  * to clarify what a specific bit range means.
00001300                           528  * Checking order refers to what order the checks will be performed in. 
00001300                           529  * Any other code outside of the listed ones will be INVALID_OP.
00001300                           530  ********************************************************************************
00001300                           531  
00001300                           532  ********************************************************************************
00001300                           533  * Global Field Descriptions
00001300                           534  * Size Field: Byte = 00 Word = 01 Long = 10
00001300                           535  * EA Mode: Refer to EA Address Modes
00001300                           536  * EA Reg: 3-bit input that is mapped to the respective binary value
00001300                           537  ********************************************************************************
00001300                           538  
00001300                           539  * GROUP_0                      
00001300                           540  ********************************************************************************
00001300                           541  * Description: Checks for the following listed OP codes to be present or not
00001300                           542  * Supported OP codes:
00001300                           543  * ORI: $00, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001300                           544  * CMPI: $0C, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001300                           545  * Dynamic BCLR: $0, 11-9 Register, 8-6 %110, 5-3 EA Mode, 2-0 EA Reg
00001300                           546  * Static BCLR: $01, 7-6 10, 5-3 EA Mode, 2-0 EA Reg
00001300                           547  *
00001300                           548  * Registers used: D0
00001300                           549  *
00001300                           550  * Precondition: First nibble has been identified as $0
00001300                           551  *
00001300                           552  * Postcondition: Parses proper OP code with a nibble value of $0 or finds an
00001300                           553  * invalid OP code. After a successful parse loading for EA values will be done
00001300                           554  * through a subroutine.
00001300                           555  * 
00001300                           556  * Unsupported OP codes:
00001300                           557  * ORI_TO_CCR, ORI_TO_SR, ANDI_TO_CCR, ANDI_TO_SR, ANDI, SUBI, ADDI, EORI_TO_CCR
00001300                           558  * EORI_TO_SR, EORI, STATIC_BTST, STATIC_BCHG, STATIC_BSET, DYNAMIC_BTST,
00001300                           559  * DYNAMIC_BCHG, DYNAMIC_BSET, MOVEP 
00001300                           560  ********************************************************************************
00001300                           561  C_GROUP_0:
00001300  48E7 C000                562      MOVEM.L D0-D1, -(SP)        ;Backup registers
00001304                           563  *Unsupported OP codes that are fully static in bits
00001304                           564  CHECK_OP_ORI_TO_CCR:
00001304  3038 1000                565      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
00001308  B07C 003C                566      CMP.W #$003C,D0
0000130C  6700 07EC                567      BEQ INVALID_OP
00001310  6600 0002                568      BNE CHECK_OP_ORI_TO_SR
00001314                           569      
00001314                           570  CHECK_OP_ORI_TO_SR:
00001314  3038 1000                571      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
00001318  B07C 007C                572      CMP.W #$007C,D0
0000131C  6700 07DC                573      BEQ INVALID_OP
00001320  6600 0002                574      BNE CHECK_OP_ANDI_TO_CCR
00001324                           575      
00001324                           576  CHECK_OP_ANDI_TO_CCR:
00001324  3038 1000                577      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
00001328  B07C 023C                578      CMP.W #$023C,D0
0000132C  6700 07CC                579      BEQ INVALID_OP
00001330  6600 0002                580      BNE CHECK_OP_ANDI_TO_SR
00001334                           581      
00001334                           582  CHECK_OP_ANDI_TO_SR:
00001334  3038 1000                583      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
00001338  B07C 027C                584      CMP.W #$027C,D0
0000133C  6700 07BC                585      BEQ INVALID_OP
00001340  6600 0022                586      BNE CHECK_OP_ANDI
00001344                           587  
00001344                           588  CHECK_OP_EORI_TO_CCR:
00001344  3038 1000                589      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
00001348  B07C 0A3C                590      CMP.W #$0A3C,D0
0000134C  6700 07AC                591      BEQ INVALID_OP
00001350  6600 0002                592      BNE CHECK_OP_EORI_TO_SR
00001354                           593      
00001354                           594  CHECK_OP_EORI_TO_SR:
00001354  3038 1000                595      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
00001358  B07C 0A7C                596      CMP.W #$0A7C,D0
0000135C  6700 079C                597      BEQ INVALID_OP
00001360  6600 0002                598      BNE CHECK_OP_ANDI
00001364                           599      
00001364                           600  *Unsupported OP codes to check with partial static bits
00001364                           601  CHECK_OP_ANDI:
00001364  3038 1000                602      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
00001368  0240 FF00                603      ANDI.W #$FF00,D0
0000136C  B07C 0200                604      CMP.W #$0200,D0
00001370  6700 0788                605      BEQ INVALID_OP
00001374  6600 0002                606      BNE CHECK_OP_SUBI
00001378                           607      
00001378                           608  CHECK_OP_SUBI:
00001378  3038 1000                609      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
0000137C  0240 FF00                610      ANDI.W #$FF00,D0
00001380  B07C 0400                611      CMP.W #$0400,D0
00001384  6700 0774                612      BEQ INVALID_OP
00001388  6600 0002                613      BNE CHECK_OP_ADDI
0000138C                           614  
0000138C                           615  CHECK_OP_ADDI:
0000138C  3038 1000                616      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
00001390  0240 FF00                617      ANDI.W #$FF00,D0
00001394  B07C 0600                618      CMP.W #$0600,D0
00001398  6700 0760                619      BEQ INVALID_OP
0000139C  6600 0002                620      BNE CHECK_OP_EORI
000013A0                           621  
000013A0                           622  CHECK_OP_EORI:
000013A0  3038 1000                623      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
000013A4  0240 FF00                624      ANDI.W #$FF00,D0
000013A8  B07C 0A00                625      CMP.W #$0A00,D0
000013AC  6700 074C                626      BEQ INVALID_OP
000013B0  6600 0002                627      BNE CHECK_OP_STATIC_BTST
000013B4                           628      
000013B4                           629  CHECK_OP_STATIC_BTST:
000013B4  3038 1000                630      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
000013B8  0240 FFC0                631      ANDI.W #$FFC0,D0
000013BC  B07C 0800                632      CMP.W #$0800,D0
000013C0  6700 0738                633      BEQ INVALID_OP
000013C4  6600 0002                634      BNE CHECK_OP_STATIC_BCHG
000013C8                           635      
000013C8                           636  CHECK_OP_STATIC_BCHG:
000013C8  3038 1000                637      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
000013CC  0240 FFC0                638      ANDI.W #$FFC0,D0
000013D0  B07C 0840                639      CMP.W #$0840,D0
000013D4  6700 0724                640      BEQ INVALID_OP
000013D8  6600 0002                641      BNE CHECK_OP_STATIC_BSET
000013DC                           642      
000013DC                           643  CHECK_OP_STATIC_BSET:
000013DC  3038 1000                644      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
000013E0  0240 FFC0                645      ANDI.W #$FFC0,D0
000013E4  B07C 08C0                646      CMP.W #$08C0,D0
000013E8  6700 0710                647      BEQ INVALID_OP
000013EC  6600 0002                648      BNE CHECK_OP_DYNAMIC_BTST
000013F0                           649  
000013F0                           650  CHECK_OP_DYNAMIC_BTST:
000013F0  3038 1000                651      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
000013F4  0240 F1C0                652      ANDI.W #$F1C0,D0
000013F8  B07C 0100                653      CMP.W #$0100,D0
000013FC  6700 06FC                654      BEQ INVALID_OP
00001400  6600 0002                655      BNE CHECK_OP_DYNAMIC_BCHG
00001404                           656  
00001404                           657  CHECK_OP_DYNAMIC_BCHG:
00001404  3038 1000                658      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
00001408  0240 F1C0                659      ANDI.W #$F1C0,D0
0000140C  B07C 0140                660      CMP.W #$0140,D0
00001410  6700 06E8                661      BEQ INVALID_OP
00001414  6600 0002                662      BNE CHECK_OP_DYNAMIC_BSET
00001418                           663  
00001418                           664  CHECK_OP_DYNAMIC_BSET:
00001418  3038 1000                665      MOVE.W CUR_OP_CODE,D0      ;Move current instruction set into D0
0000141C  0240 F1C0                666      ANDI.W #$F1C0,D0
00001420  B07C 01C0                667      CMP.W #$01C0,D0
00001424  6700 06D4                668      BEQ INVALID_OP
00001428  6600 0002                669      BNE CHECK_OP_MOVEP
0000142C                           670      
0000142C                           671  CHECK_OP_MOVEP:
0000142C  3038 1000                672      MOVE.W CUR_OP_CODE,D0
00001430  0240 F138                673      ANDI.W #$F138,D0
00001434  B07C 0108                674      CMP.W #$0108,D0
00001438  6700 06C0                675      BEQ INVALID_OP
0000143C  6600 0002                676      BNE CHECK_OP_ORI
00001440                           677  
00001440                           678  *Supported OP code checks
00001440                           679  CHECK_OP_ORI:
00001440  3038 1000                680      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D0
00001444  0240 FF00                681      ANDI.W  #$FF00,D0           ;Mask relevant bits to D0
00001448  B07C 0000                682      CMP.W   #$0000,D0           ;Compare the appropriate masked bits     
0000144C  6600 000C                683      BNE     CHECK_OP_CMPI       ;Branch to next comparison if not equal
00001450  4EB9 00001B34            684      JSR     PRINT_OP_ORI        ;Print the OP code if equal    
00001456  6000 0054                685      BRA     CG0_C               ;Finish routine
0000145A                           686  CHECK_OP_CMPI:
0000145A  3038 1000                687      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D0
0000145E  0240 FF00                688      ANDI.W  #$FF00,D0           ;Mask relevant bits to D0
00001462  B07C 0C00                689      CMP.W   #$0C00,D0           ;Compare the appropriate masked bits   
00001466  6600 000C                690      BNE     CHECK_OP_STATIC_BCLR     ;Branch to next comparison if not equal       
0000146A  4EB9 00001B42            691      JSR     PRINT_OP_CMPI       ;Print the OP code if equal
00001470  6000 003A                692      BRA     CG0_C               ;Finish routine
00001474                           693  CHECK_OP_STATIC_BCLR:
00001474  3038 1000                694      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D0
00001478  0240 FF00                695      ANDI.W  #$FF00,D0           ;Mask relevant bits to D0
0000147C  B07C 0800                696      CMP.W   #$0800,D0           ;Compare the appropriate masked bits
00001480  6600 000C                697      BNE     CHECK_OP_DYNAMIC_BCLR     ;Branch to next comparison if not equal
00001484  4EB9 00001B50            698      JSR     PRINT_OP_STATIC_BCLR     ;Print the OP code if equal
0000148A  6000 0020                699      BRA     CG0_C               ;Finish routine
0000148E                           700  CHECK_OP_DYNAMIC_BCLR:
0000148E  3038 1000                701      MOVE.W  CUR_OP_CODE,D0        ;Move current instruction set into D0
00001492  0240 0180                702      ANDI.W  #%0000000110000000,D0 ;Do a direct binary bitmask to see which bits are needed
00001496  B07C 0180                703      CMP.W   #%0000000110000000,D0 ;Compare the expected binary value
0000149A  6600 000C                704      BNE     CG0_F                 ;If not equal this must be an invalid OP code
0000149E  4EB9 00001B5E            705      JSR     PRINT_OP_DYNAMIC_BCLR       ;Print the OP code if equal
000014A4  6000 0006                706      BRA     CG0_C                 ;Finish routine
000014A8                           707  CG0_F:                            ;Checks have been finished, invalid OP code has been found
000014A8  6000 0650                708      BRA INVALID_OP    
000014AC                           709  CG0_C:                            ;Checks have been finished,a valid OP code has been found
000014AC  4E75                     710      RTS                           ;Return to stack
000014AE                           711      
000014AE                           712  * GROUP_1                      
000014AE                           713  ********************************************************************************
000014AE                           714  * Supported OP code:
000014AE                           715  * MOVE.B: $1, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000014AE                           716  ********************************************************************************
000014AE                           717  C_GROUP_1:
000014AE                           718  
000014AE                           719  CHECK_OP_MOVE_B:
000014AE  3038 1000                720      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0          
000014B2  0240 FF00                721      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
000014B6  B07C 1000                722      CMP.W #$1000,D0                 ;Compare the appropriate masked bits 
000014BA  6600 063E                723      BNE INVALID_OP                  ;Invalid OP code has been found
000014BE  6700 06AC                724      BEQ PRINT_OP_MOVEB              ;Print the OP code if equal
000014C2  4E75                     725      RTS                             ;Return to stack
000014C4                           726  * GROUP_2
000014C4                           727  ********************************************************************************
000014C4                           728  * Supported OP codes:
000014C4                           729  * MOVEA.L: $2, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
000014C4                           730  * MOVE.L: $2, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000014C4                           731  ********************************************************************************
000014C4                           732  C_GROUP_2:
000014C4                           733  
000014C4                           734  CHECK_OP_MOVEA_L:
000014C4  3038 1000                735      MOVE.W CUR_OP_CODE,D0                  ;Move current instruction set into D0  
000014C8  0240 FF00                736      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
000014CC  B07C 2000                737      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
000014D0  6000 0002                738      BRA FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
000014D4                           739  
000014D4                           740      
000014D4                           741  FIND_MOVEA_L_DIFFERENCE:    ;Finds difference between MOVEA and MOVE
000014D4  3038 1000                742      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
000014D8  323C 0007                743      MOVE.W   #7,D1          ;Prepare 7 bit shift to D1
000014DC  E368                     744      LSL.W    D1,D0          ;Truncate to find the 3 address mode bits
000014DE  E268                     745      LSR.W    D1,D0          ;Reposition the bits
000014E0  323C 0006                746      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
000014E4  E268                     747      LSR.W    D1,D0          ;Truncate to shift 3 bits to a register
000014E6  3C00                     748      MOVE.W   D0,D6          ;Move 3 address mode bits into D6
000014E8  BC7C 0001                749      CMP.W   #$1,D6          ;Check if the address mode value is MOVEA
000014EC  6600 0006                750      BNE     CHECK_OP_MOVE_L  ;Branch if not equal to check MOVE
000014F0  6700 0688                751      BEQ     PRINT_OP_MOVEA_L ;Print out the MOVEA address 
000014F4                           752      
000014F4                           753  CHECK_OP_MOVE_L:
000014F4  3038 1000                754      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000014F8  0240 FF00                755      ANDI.W #$FF00,D0
000014FC  B07C 2000                756      CMP.W #$2000,D0
00001500  6600 05F8                757      BNE INVALID_OP
00001504  6700 0682                758      BEQ PRINT_OP_MOVE_L
00001508  4E75                     759      RTS
0000150A                           760      
0000150A                           761  * GROUP_3
0000150A                           762  ********************************************************************************
0000150A                           763  * Supported OP codes:
0000150A                           764  * MOVEA.W: $3, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
0000150A                           765  * MOVE.W: $3, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
0000150A                           766  ********************************************************************************
0000150A                           767  C_GROUP_3:
0000150A                           768  
0000150A                           769  CHECK_OP_MOVEA_W:
0000150A  3038 1000                770      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
0000150E  0240 FF00                771      ANDI.W #$FF00,D0
00001512  B07C 3000                772      CMP.W #$3000,D0
00001516  6000 0002                773      BRA FIND_MOVEA_W_DIFFERENCE
0000151A                           774  
0000151A                           775      
0000151A                           776  FIND_MOVEA_W_DIFFERENCE:      ;Finds difference between MOVEA and MOVE
0000151A  3038 1000                777      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
0000151E  323C 0007                778      MOVE.W   #7,D1          ;Prepare 7 bit shift to D1
00001522  E368                     779      LSL.W    D1,D0          ;Truncate to find the 3 address mode bits
00001524  E268                     780      LSR.W    D1,D0          ;Reposition the bits
00001526  323C 0006                781      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
0000152A  E268                     782      LSR.W    D1,D0          ;Truncate to shift 3 bits to a register
0000152C  3C00                     783      MOVE.W   D0,D6          ;Move 3 address mode bits into D6
0000152E  BC7C 0001                784      CMP.W   #$1,D6          ;Check if the address mode value is MOVEA
00001532  6600 0006                785      BNE     CHECK_OP_MOVE_W 
00001536  6700 065E                786      BEQ     PRINT_OP_MOVEA_W  
0000153A                           787      
0000153A                           788  CHECK_OP_MOVE_W:
0000153A  3038 1000                789      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000153E  0240 FF00                790      ANDI.W #$FF00,D0
00001542  B07C 3000                791      CMP.W #$3000,D0
00001546  6600 05B2                792      BNE INVALID_OP
0000154A  6700 0658                793      BEQ PRINT_OP_MOVE_W
0000154E  4E75                     794      RTS
00001550                           795  
00001550                           796  * GROUP_4
00001550                           797  ********************************************************************************
00001550                           798  * Supported OP codes:
00001550                           799  * LEA: $4, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00001550                           800  * JSR: $4E, 7-6 %10, 5-3 EA Mode, 2-0 EA Reg 
00001550                           801  * RTS: $4E75
00001550                           802  * NEG: $44, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001550                           803  * MOVEM: $4, 11 %1, 10 %D, 9-7 %001, 6 S, 5-3 EA Mode, 2-0 EA Reg
00001550                           804  * %D = 0 , Register to Memory, 1 Memory to Register
00001550                           805  * Unsupported OP codes: MOVE_FROM_SR, MOVE_TO_CCR, MOVE_TO_SR, NEGX, CLR, NOT
00001550                           806  * EXT, NBCD, SWAP, PEA, ILLEGAL, TAS, TST, TRAP, LINK, UNLK, MOVE_USP, RESET,
00001550                           807  * NOP, STOP, RTE, TRAPV, RTR, JMP, CHK
00001550                           808  ********************************************************************************
00001550                           809  C_GROUP_4:
00001550                           810  *Unsupported OP codes to check that are full static bits
00001550                           811  CHECK_OP_STOP:
00001550  3038 1000                812      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001554  B07C 4E72                813      CMP.W  #$4E72,D0
00001558  6700 05A0                814      BEQ    INVALID_OP
0000155C  6600 0002                815      BNE    CHECK_OP_RESET
00001560                           816      
00001560                           817  CHECK_OP_RESET:
00001560  3038 1000                818      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001564  B07C 4E70                819      CMP.W  #$4E70,D0
00001568  6700 0590                820      BEQ    INVALID_OP
0000156C  6600 0002                821      BNE    CHECK_OP_NOP
00001570                           822      
00001570                           823  CHECK_OP_NOP:
00001570  3038 1000                824      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001574  B07C 4E71                825      CMP.W  #$4E71,D0
00001578  6700 0580                826      BEQ    INVALID_OP 
0000157C  6600 0002                827      BNE    CHECK_OP_ILLEGAL
00001580                           828      
00001580                           829  CHECK_OP_ILLEGAL:
00001580  3038 1000                830      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001584  B07C 4AFC                831      CMP.W  #$4AFC,D0
00001588  6700 0570                832      BEQ    INVALID_OP
0000158C  6600 0046                833      BNE    CHECK_OP_MOVE_FROM_CCR
00001590                           834      
00001590                           835  CHECK_OP_RTE:    
00001590  3038 1000                836      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001594  B07C 4E73                837      CMP.W #$4E73,D0
00001598  6700 0560                838      BEQ   INVALID_OP
0000159C  6600 0002                839      BNE   CHECK_OP_TRAPV
000015A0                           840      
000015A0                           841  CHECK_OP_TRAPV:
000015A0  3038 1000                842      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000015A4  B07C 4E76                843      CMP.W  #$4E76,D0
000015A8  6700 0550                844      BEQ    INVALID_OP
000015AC  6600 0002                845      BNE    CHECK_OP_RTR
000015B0                           846      
000015B0                           847  CHECK_OP_RTR:
000015B0  3038 1000                848      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000015B4  B07C 4E77                849      CMP.W #$4E77,D0
000015B8  6700 0540                850      BEQ    INVALID_OP
000015BC  6600 0002                851      BNE    CHECK_OP_MOVE_FROM_SR
000015C0                           852  
000015C0                           853  
000015C0                           854  *Unsupported OP codes to check that have partial static bits
000015C0                           855  CHECK_OP_MOVE_FROM_SR:
000015C0  3038 1000                856      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000015C4  0240 FFC0                857      ANDI.W #$FFC0,D0
000015C8  B07C 40C0                858      CMP.W  #$40C0,D0
000015CC  6700 052C                859      BEQ    INVALID_OP
000015D0  6600 0002                860      BNE    CHECK_OP_MOVE_FROM_CCR
000015D4                           861      
000015D4                           862  CHECK_OP_MOVE_FROM_CCR:
000015D4  3038 1000                863      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000015D8  0240 FFC0                864      ANDI.W #$FFC0,D0
000015DC  B07C 44C0                865      CMP.W  #$44C0,D0
000015E0  6700 0518                866      BEQ    INVALID_OP
000015E4  6600 0002                867      BNE    CHECK_OP_MOVE_TO_SR
000015E8                           868      
000015E8                           869  CHECK_OP_MOVE_TO_SR:
000015E8  3038 1000                870      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000015EC  0240 FFC0                871      ANDI.W #$FFC0,D0
000015F0  B07C 46C0                872      CMP.W  #$46C0,D0
000015F4  6700 0504                873      BEQ    INVALID_OP
000015F8  6600 0002                874      BNE    CHECK_OP_NEGX
000015FC                           875      
000015FC                           876  CHECK_OP_NEGX:
000015FC  3038 1000                877      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001600  0240 FF00                878      ANDI.W #$FF00,D0
00001604  B07C 4000                879      CMP.W  #$4000,D0
00001608  6700 04F0                880      BEQ    INVALID_OP
0000160C  6600 0002                881      BNE    CHECK_OP_CLR
00001610                           882      
00001610                           883  CHECK_OP_CLR:
00001610  3038 1000                884      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001614  0240 FF00                885      ANDI.W #$FF00,D0
00001618  B07C 4200                886      CMP.W  #$4200,D0
0000161C  6700 04DC                887      BEQ    INVALID_OP
00001620  6600 0002                888      BNE    CHECK_OP_NOT
00001624                           889      
00001624                           890  CHECK_OP_NOT:
00001624  3038 1000                891      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001628  0240 FF00                892      ANDI.W #$FF00,D0
0000162C  B07C 4600                893      CMP.W  #$4600,D0
00001630  6700 04C8                894      BEQ    INVALID_OP
00001634  6600 0002                895      BNE    CHECK_OP_EXT
00001638                           896      
00001638                           897  CHECK_OP_EXT:
00001638  3038 1000                898      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000163C  0240 FFF8                899      ANDI.W #$FFF8,D0
00001640  B07C 4E80                900      CMP.W  #$4E80,D0
00001644  6700 04B4                901      BEQ    INVALID_OP
00001648  6600 0002                902      BNE    CHECK_OP_NBCD
0000164C                           903  
0000164C                           904  CHECK_OP_NBCD:
0000164C  3038 1000                905      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001650  0240 FFC0                906      ANDI.W #$FFC0,D0
00001654  B07C 4800                907      CMP.W  #$4800,D0
00001658  6700 04A0                908      BEQ    INVALID_OP
0000165C  6600 0002                909      BNE    CHECK_OP_SWAP
00001660                           910      
00001660                           911  CHECK_OP_SWAP:                  ; This must go before CHECK_OP PEA as first 3 nibbles can be equivalent
00001660  3038 1000                912      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001664  0240 FF48                913      ANDI.W #$FF48,D0
00001668  B07C 4840                914      CMP.W  #$4840,D0
0000166C  6700 048C                915      BEQ    INVALID_OP
00001670  6600 0002                916      BNE    CHECK_OP_PEA
00001674                           917   
00001674                           918  CHECK_OP_PEA:               ; This must go after CHECK_OP_SWAP as first 3 nibbles can be equivalent
00001674  3038 1000                919      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001678  0240 FF40                920      ANDI.W #$FF40,D0
0000167C  B07C 4840                921      CMP.W  #$4840,D0
00001680  6700 0478                922      BEQ    INVALID_OP
00001684  6600 0002                923      BNE    CHECK_OP_TAS
00001688                           924      
00001688                           925  CHECK_OP_TAS:
00001688  3038 1000                926      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000168C  0240 FFC0                927      ANDI.W #$FFC0,D0
00001690  B07C 45C0                928      CMP.W  #$45C0,D0
00001694  6700 0464                929      BEQ    INVALID_OP
00001698  6600 0002                930      BNE    CHECK_OP_TST
0000169C                           931  
0000169C                           932  CHECK_OP_TST:               ; This must go after CHECK_OP_TAS as first 2 nibbles are equivalent
0000169C  3038 1000                933      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000016A0  0240 FF00                934      ANDI.W #$FF00,D0
000016A4  B07C 4500                935      CMP.W  #$4500,D0
000016A8  6700 0450                936      BEQ    INVALID_OP
000016AC  6600 0002                937      BNE    CHECK_OP_TRAP
000016B0                           938      
000016B0                           939  CHECK_OP_TRAP:
000016B0  3038 1000                940      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000016B4  0240 FFF0                941      ANDI.W #$FFF0,D0
000016B8  B07C 4E40                942      CMP.W  #$4E40,D0
000016BC  6700 043C                943      BEQ    INVALID_OP
000016C0  6600 0002                944      BNE    CHECK_OP_LINK
000016C4                           945      
000016C4                           946  CHECK_OP_LINK:
000016C4  3038 1000                947      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000016C8  0240 FFF8                948      ANDI.W #$FFF8,D0
000016CC  B07C 4E50                949      CMP.W  #$4E50,D0
000016D0  6700 0428                950      BEQ    INVALID_OP
000016D4  6600 0002                951      BNE    CHECK_OP_UNLK
000016D8                           952  
000016D8                           953  CHECK_OP_UNLK:
000016D8  3038 1000                954      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000016DC  0240 FFF8                955      ANDI.W #$FFF8,D0
000016E0  B07C 4E58                956      CMP.W  #$4E58,D0
000016E4  6700 0414                957      BEQ    INVALID_OP
000016E8  6600 0002                958      BNE    CHECK_OP_MOVE_USP
000016EC                           959      
000016EC                           960  CHECK_OP_MOVE_USP:
000016EC  3038 1000                961      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000016F0  0240 FFF0                962      ANDI.W #$FFF0,D0
000016F4  B07C 4E60                963      CMP.W  #$4E60,D0
000016F8  6700 0400                964      BEQ    INVALID_OP
000016FC  6600 002A                965      BNE    CHECK_OP_RTS
00001700                           966  
00001700                           967  CHECK_OP_JMP:
00001700  3038 1000                968       MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001704  0240 FFC0                969       ANDI.W #$FFC0,D0
00001708  B07C 4EC0                970       CMP.W  #$4EC0,D0
0000170C  6700 03EC                971       BEQ    INVALID_OP
00001710  6600 0002                972       BNE    CHECK_OP_CHK
00001714                           973       
00001714                           974  CHECK_OP_CHK:
00001714  3038 1000                975      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001718  0240 F180                976      ANDI.W  #$F180,D0
0000171C  B07C 4180                977      CMP.W   #$4180,D0
00001720  6700 03D8                978      BEQ     INVALID_OP
00001724  6600 0002                979      BNE     CHECK_OP_RTS
00001728                           980  
00001728                           981  *Supported OP codes to check
00001728                           982  CHECK_OP_RTS:
00001728  3038 1000                983      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000172C  B07C 4E75                984      CMP.W  #$4E75,D0
00001730  6600 FE3E                985      BNE    CHECK_OP_NOP
00001734  6700 0498                986      BEQ    PRINT_OP_RTS
00001738                           987      
00001738                           988  CHECK_OP_LEA:
00001738  3038 1000                989      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
0000173C  0240 F1C0                990      ANDI.W #$F1C0,D0
00001740  B07C 41C0                991      CMP.W  #$41C0,D0
00001744  6600 0006                992      BNE    CHECK_OP_JSR
00001748  6700 0492                993      BEQ    PRINT_OP_LEA
0000174C                           994      
0000174C                           995  CHECK_OP_JSR:
0000174C  3038 1000                996      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001750  0240 FFC0                997      ANDI.W #$FFC0,D0
00001754  B07C 4E80                998      CMP.W  #$4E80,D0
00001758  6600 0006                999      BNE    CHECK_OP_NEG
0000175C  6700 0462               1000      BEQ    PRINT_OP_JSR
00001760                          1001      
00001760                          1002  CHECK_OP_NEG:
00001760  3038 1000               1003      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001764  0240 FF00               1004      ANDI.W #$FF00,D0
00001768  B07C 4400               1005      CMP.W  #$4400,D0
0000176C  6600 0006               1006      BNE    CHECK_OP_MOVEM
00001770  6700 0478               1007      BEQ    PRINT_OP_NEG
00001774                          1008      
00001774                          1009  **************** COME BACK TO FINISH UP SIZE **********************************
00001774                          1010  CHECK_OP_MOVEM:
00001774  3038 1000               1011      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001778  0240 FB80               1012      ANDI.W #$FB80,D0
0000177C  B07C 4880               1013      CMP.W  #$4880,D0
00001780  6600 0378               1014      BNE    INVALID_OP       ;If no code is found, it is invalid
00001784  6700 0472               1015      BEQ    PRINT_OP_MOVEM_W
00001788                          1016      
00001788                          1017  * GROUP_5
00001788                          1018  ********************************************************************************
00001788                          1019  * Supported OP code:
00001788                          1020  * SUBQ: $5, 11-9 DATA, 8 %1, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001788                          1021  * Unsupported OP codes: ADDQ, Scc, DBcc
00001788                          1022  * Validation checking:
00001788                          1023  * Check against, ADDQ, Scc, DBcc
00001788                          1024  ********************************************************************************
00001788                          1025  C_GROUP_5:
00001788                          1026  
00001788                          1027  *Unsupported OP codes
00001788                          1028  CHECK_OP_ADDQ:
00001788  3038 1000               1029      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000178C  0240 F100               1030      ANDI.W #$F100,D0
00001790  B07C 5100               1031      CMP.W  #$5100,D0
00001794  6700 0364               1032      BEQ    INVALID_OP
00001798  6600 0016               1033      BNE    CHECK_OP_Scc
0000179C                          1034      
0000179C                          1035  CHECK_OP_DBcc:
0000179C  3038 1000               1036      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000017A0  0240 F0C8               1037      ANDI.W #$F0C8,D0
000017A4  B07C 50C8               1038      CMP.W  #$50C8,D0
000017A8  6700 0350               1039      BEQ    INVALID_OP
000017AC  6600 0002               1040      BNE    CHECK_OP_Scc 
000017B0                          1041  
000017B0                          1042  CHECK_OP_Scc:
000017B0  3038 1000               1043      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000017B4  0240 F0C0               1044      ANDI.W #$F0C0,D0 
000017B8  B07C 50C0               1045      CMP.W  #$50C0,D0
000017BC  6700 033C               1046      BEQ     INVALID_OP
000017C0  6600 0002               1047      BNE     CHECK_OP_SUBQ
000017C4                          1048      
000017C4                          1049  ;VALID_CHECK_OP_SUBQ:
000017C4                          1050  ;    MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000017C4                          1051  ;    ANDI.W #$F1C0,D0        ;Bitmask check for Scc, DBcc and ADDQ
000017C4                          1052  ;    CMP.W  #$51C0,D0        ;This should be the only valid one for SUBQ
000017C4                          1053  ;    BEQ    INVALID_OP       ;If not equal it's invalid
000017C4                          1054  ;    BNE    CHECK_OP_SUBQ
000017C4                          1055  
000017C4                          1056  *Supported OP code   
000017C4                          1057  CHECK_OP_SUBQ     
000017C4  3038 1000               1058      MOVE.W  CUR_OP_CODE,D0  ;Actual check for SUBQ
000017C8  0240 F100               1059      ANDI.W #$F100,D0        ;Bitmask check for SUBQ
000017CC  B07C 5100               1060      CMP.W  #$5100,D0        ;Compare the proper value
000017D0  6700 0442               1061      BEQ    PRINT_OP_SUBQ    ;If equal print it out
000017D4  6600 0324               1062      BNE    INVALID_OP       ;Else the operand is invalid
000017D8                          1063      
000017D8                          1064  * GROUP_6
000017D8                          1065  ********************************************************************************
000017D8                          1066  * Supported OP codes
000017D8                          1067  * BRA: $60, 7-0 8-Bit Displacement
000017D8                          1068  * Bcc: $6, 11-8 Condition, 7-0 8-Bit Displacement
000017D8                          1069  *   Branch: <Condition>   
000017D8                          1070  *   BCS: %0101          
000017D8                          1071  *   BGE: %1100      
000017D8                          1072  *   BLT: %1101  
000017D8                          1073  *   BVC: %1000
000017D8                          1074  *   
000017D8                          1075  *   MOVE.W #%0110010100000000   ;BCS
000017D8                          1076  *   MOVE.W #%0110110001010101   ;BGE
000017D8                          1077  *   MVE.W #%0110110110101010    ;BLT
000017D8                          1078  *   MOVE.W #%0110100001010101   ;BVC
000017D8                          1079  * Unsupported OP code: BSR
000017D8                          1080  ********************************************************************************
000017D8                          1081  C_GROUP_6:
000017D8                          1082  
000017D8                          1083  *Unsupported OP code
000017D8                          1084  CHECK_OP_BSR:
000017D8  3038 1000               1085      MOVE.W CUR_OP_CODE,D0
000017DC  0240 FF00               1086      ANDI.W #$FF00,D0
000017E0  B07C 6100               1087      CMP.W  #$6100,D0
000017E4  6700 0314               1088      BEQ     INVALID_OP
000017E8  6600 0002               1089      BNE     CHECK_OP_BRA
000017EC                          1090      
000017EC                          1091  *Supported OP codes
000017EC                          1092  CHECK_OP_BRA:
000017EC  3038 1000               1093      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0       
000017F0  0240 FF00               1094      ANDI.W #$FF00,D0
000017F4  B07C 6000               1095      CMP.W  #$6000,D0
000017F8  6700 0460               1096      BEQ     PRINT_OP_BRA
000017FC  6600 0002               1097      BNE     CHECK_OP_BCS
00001800                          1098  
00001800                          1099  CHECK_OP_BCS:
00001800  3038 1000               1100      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001804  0240 FF00               1101      ANDI.W #$FF00,D0
00001808  B07C 6500               1102      CMP.W  #$6500,D0 
0000180C  6700 0414               1103      BEQ    PRINT_OP_BCS
00001810  6600 0002               1104      BNE    CHECK_OP_BGE
00001814                          1105      
00001814                          1106  CHECK_OP_BGE:
00001814  3038 1000               1107      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001818  0240 FF00               1108      ANDI.W #$FF00,D0
0000181C  B07C 6C00               1109      CMP.W  #$6C00,D0 
00001820  6700 040E               1110      BEQ    PRINT_OP_BGE
00001824  6600 0002               1111      BNE    CHECK_OP_BLT
00001828                          1112      
00001828                          1113  CHECK_OP_BLT:
00001828  3038 1000               1114      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
0000182C  0240 FF00               1115      ANDI.W #$FF00,D0
00001830  B07C 6D00               1116      CMP.W  #$6D00,D0 
00001834  6700 0408               1117      BEQ    PRINT_OP_BLT
00001838  6600 0002               1118      BNE    CHECK_OP_BVC
0000183C                          1119      
0000183C                          1120  CHECK_OP_BVC:
0000183C  3038 1000               1121      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001840  0240 FF00               1122      ANDI.W #$FF00,D0
00001844  B07C 6800               1123      CMP.W  #$6800,D0 
00001848  6700 0402               1124      BEQ    PRINT_OP_BVC
0000184C  6600 02AC               1125      BNE    INVALID_OP
00001850                          1126      
00001850                          1127      
00001850                          1128  *GROUP_7
00001850                          1129  ********************************************************************************
00001850                          1130  * Currently no OP codes here are supported. MOVEQ is the only code in this group
00001850                          1131  * Unsupported OP code: MOVEQ
00001850                          1132  ********************************************************************************
00001850                          1133  C_GROUP_7:
00001850                          1134  CHECK_OP_MOVEQ
00001850  3038 1000               1135      MOVE.W CUR_OP_CODE,D0
00001854  0240 F100               1136      ANDI.W #$F100,D0
00001858  B07C 7000               1137      CMP.W  #$7000,D0
0000185C  4EF9 00001AFA           1138      JMP    INVALID_OP
00001862                          1139  
00001862                          1140  * GROUP_8
00001862                          1141  ********************************************************************************
00001862                          1142  * Supported OP code:
00001862                          1143  * DIVS: $8, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00001862                          1144  * OR: $80, 7-6 Size, 5-3 EA Mode, 2-0 EA Register
00001862                          1145  * Unsupported OP codes: DIVU, SBCD
00001862                          1146  ********************************************************************************
00001862                          1147  C_GROUP_8:
00001862                          1148  
00001862                          1149  *Unsupported OP codes
00001862                          1150  CHECK_OP_DIVU:
00001862  3038 1000               1151      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001866  0240 F1C0               1152      ANDI.W #$F1C0,D0
0000186A  B07C 80C0               1153      CMP.W #$80C0,D0
0000186E  6700 028A               1154      BEQ   INVALID_OP
00001872  6600 0002               1155      BNE   CHECK_OP_SBCD 
00001876                          1156  
00001876                          1157  CHECK_OP_SBCD:
00001876  3038 1000               1158      MOVE.W  CUR_OP_CODE,D0   ;Move current instruction set into D0
0000187A  0240 F100               1159      ANDI.W  #$F100,D0
0000187E  B07C 8100               1160      CMP.W   #$8100,D0
00001882  6700 0276               1161      BEQ     INVALID_OP
00001886  6600 0002               1162      BNE     CHECK_OP_DIVS
0000188A                          1163      
0000188A                          1164  *Supported OP codes
0000188A                          1165  CHECK_OP_DIVS:
0000188A  3038 1000               1166      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
0000188E  0240 F1C0               1167      ANDI.W #$F1C0,D0
00001892  B07C 81C0               1168      CMP.W #$81C0,D0
00001896  6700 03D0               1169      BEQ PRINT_OP_DIVS
0000189A  6600 0002               1170      BNE CHECK_OP_OR
0000189E                          1171      
0000189E                          1172  CHECK_OP_OR:              ;At this point only remaining $8 code is OR
0000189E  4EF9 00001C76           1173      JMP PRINT_OP_OR
000018A4                          1174  * GROUP_9                      
000018A4                          1175  ********************************************************************************
000018A4                          1176  * Supported OP code:
000018A4                          1177  * SUB: $9, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
000018A4                          1178  * Unsupported OP codes: SUBX, SUBA
000018A4                          1179  ********************************************************************************
000018A4                          1180  C_GROUP_9:
000018A4                          1181  
000018A4                          1182  CHECK_OP_SUBA:             ;Check SUBA first as it has static bits
000018A4  3038 1000               1183      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000018A8  0240 F0C0               1184      ANDI.W #$F0C0,D0
000018AC  B07C 90C0               1185      CMP.W #$90C0,D0
000018B0  6700 0248               1186      BEQ INVALID_OP
000018B4  6600 0002               1187      BNE CHECK_OP_SUBX
000018B8                          1188  
000018B8                          1189  CHECK_OP_SUBX:
000018B8  3038 1000               1190      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000018BC  0240 F130               1191      ANDI.W #$F130,D0
000018C0  B07C 9100               1192      CMP.W #$9100,D0
000018C4  6700 0234               1193      BEQ INVALID_OP
000018C8  6600 0002               1194      BNE CHECK_OP_SUB
000018CC                          1195  
000018CC                          1196  CHECK_OP_SUB:           ;At this point only remaining $9 is SUB
000018CC  4EF9 00001C84           1197      JMP PRINT_OP_SUB
000018D2                          1198  
000018D2                          1199  *GROUP_A
000018D2                          1200  ********************************************************************************
000018D2                          1201  * Currently no OP codes here are supported. There are no current OP codes here.
000018D2                          1202  ********************************************************************************
000018D2                          1203  C_GROUP_A:
000018D2  4EF9 00001AFA           1204      JMP INVALID_OP
000018D8                          1205  
000018D8                          1206  * GROUP_B                     
000018D8                          1207  ********************************************************************************
000018D8                          1208  * Supported OP codes:
000018D8                          1209  * EOR: $B, 11-9 Reg, 8 %1, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
000018D8                          1210  * CMP: $B, 11-9 Reg, 8 %0, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
000018D8                          1211  * The specific bit difference is listed 
000018D8                          1212  * Unsupported OP codes: CMPM, CMPA
000018D8                          1213  ********************************************************************************
000018D8                          1214  C_GROUP_B:
000018D8                          1215  
000018D8                          1216  CHECK_OP_CMPM
000018D8  3038 1000               1217      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000018DC  0240 F138               1218      ANDI.W #$F138,D0
000018E0  B07C B108               1219      CMP.W  #$B108,D0
000018E4  6700 0214               1220      BEQ INVALID_OP
000018E8  6600 0002               1221      BNE CHECK_OP_CMPA
000018EC                          1222      
000018EC                          1223  CHECK_OP_CMPA:
000018EC  3038 1000               1224      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000018F0  0240 F0C0               1225      ANDI.W #$F0C0,D0
000018F4  B07C B0C0               1226      CMP.W  #$B0C0,D0
000018F8  6700 0200               1227      BEQ INVALID_OP
000018FC  6600 0002               1228      BNE CHECK_OP_EOR
00001900                          1229      
00001900                          1230  CHECK_OP_EOR:
00001900  3038 1000               1231      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001904  0240 F100               1232      ANDI.W #$F100,D0
00001908  B07C B100               1233      CMP.W #$B100,D0
0000190C  6700 0384               1234      BEQ PRINT_OP_EOR
00001910  6600 0002               1235      BNE CHECK_OP_CMP
00001914                          1236      
00001914                          1237  CHECK_OP_CMP:
00001914  3038 1000               1238      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001918  0240 F100               1239      ANDI.W #$F100,D0
0000191C  B07C B000               1240      CMP.W #$B000,D0
00001920  6700 037E               1241      BEQ PRINT_OP_CMP
00001924  6600 01D4               1242      BNE INVALID_OP
00001928                          1243      
00001928                          1244  * GROUP_C                     
00001928                          1245  ********************************************************************************
00001928                          1246  * Supported OP code:
00001928                          1247  * MULS: $C, 11-8 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00001928                          1248  * Note: EXG OP mode has to be 01000, 01001, 10001, as such can never be 11 for
00001928                          1249  * bits 7-6
00001928                          1250  * Unsupported OP codes: MULU, ABCD, EXG, AND
00001928                          1251  ********************************************************************************
00001928                          1252  C_GROUP_C:
00001928                          1253  *Unsupported OP codes
00001928                          1254  CHECK_OP_MULU:
00001928  3038 1000               1255      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
0000192C  0240 F1C0               1256      ANDI.W  #$F1C0,D0
00001930  B07C C0C0               1257      CMP.W   #$C0C0,D0
00001934  6700 01C4               1258      BEQ     INVALID_OP
00001938  6600 0002               1259      BNE     CHECK_OP_ABCD
0000193C                          1260   
0000193C                          1261  CHECK_OP_ABCD:
0000193C  3038 1000               1262      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001940  0240 F1F0               1263      ANDI.W  #$F1F0,D0
00001944  B07C C100               1264      CMP.W   #$C100,D0
00001948  6700 01B0               1265      BEQ     INVALID_OP
0000194C  6600 0002               1266      BNE     CHECK_OP_EXG
00001950                          1267   
00001950                          1268  CHECK_OP_EXG:
00001950  3038 1000               1269      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001954  0240 F130               1270      ANDI.W  #$F130,D0
00001958  B07C C100               1271      CMP.W   #$C100,D0
0000195C  6700 019C               1272      BEQ     INVALID_OP
00001960  6600 0016               1273      BNE     CHECK_OP_AND
00001964                          1274         
00001964                          1275  *Supported OP code
00001964                          1276  CHECK_OP_MULS:
00001964  3038 1000               1277      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001968  0240 F1C0               1278      ANDI.W #$F1C0,D0
0000196C  B07C C1C0               1279      CMP.W  #$C1C0,D0
00001970  6700 033C               1280      BEQ    PRINT_OP_MULS
00001974  6600 0002               1281      BNE    CHECK_OP_AND          ; OP_AND is completely dynamic outside of first nibble
00001978                          1282  
00001978                          1283  *Odd completely dynamic unsupported OP code    
00001978                          1284  CHECK_OP_AND:                 ;This would be the only possible OP code left after CHECK_OP_MULS
00001978  3038 1000               1285      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
0000197C  0240 F000               1286      ANDI.W  #$F000,D0
00001980  B07C C000               1287      CMP.W   #$C000,D0
00001984  6700 0174               1288      BEQ     INVALID_OP
00001988                          1289  
00001988                          1290  * GROUP_D                     
00001988                          1291  ********************************************************************************
00001988                          1292  * Supported OP codes:
00001988                          1293  * ADD: $D, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001988                          1294  * ADDA: $D, 11- 9 Reg, 8-6 OPMODE, 7-6 %11, 5-3 EA Mode, 2-0 EA Reg
00001988                          1295  * The specific bit difference is listed out in the OPMODE field.
00001988                          1296  * Unsupported: ADDX
00001988                          1297  ********************************************************************************
00001988                          1298  C_GROUP_D:
00001988                          1299  
00001988                          1300  CHECK_OP_ADDX:
00001988  3038 1000               1301      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000198C  0240 F130               1302      ANDI.W #$F130,D0
00001990  B07C D100               1303      CMP.W #$D100,D0
00001994  6700 0164               1304      BEQ   INVALID_OP
00001998  6600 0002               1305      BNE CHECK_OP_ADDA
0000199C                          1306  
0000199C                          1307  CHECK_OP_ADDA:
0000199C  3038 1000               1308      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000019A0  0240 F0C0               1309      ANDI.W #$F0C0,D0
000019A4  B07C D0C0               1310      CMP.W #$D0C0,D0
000019A8  6700 0320               1311      BEQ   PRINT_OP_ADDA
000019AC  6600 0002               1312      BNE   CHECK_OP_ADD
000019B0                          1313  
000019B0                          1314  CHECK_OP_ADD:
000019B0  4EF9 00001CBC           1315      JMP PRINT_OP_ADD        ;Only remaining OP in $D is ADD
000019B6                          1316      
000019B6                          1317  * GROUP_E                     
000019B6                          1318  ********************************************************************************
000019B6                          1319  * Supported:
000019B6                          1320  * LSR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
000019B6                          1321  * LSL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
000019B6                          1322  * ASR: $E, $0, 8 %0, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
000019B6                          1323  * ASL: $E, $0, 8 %1, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
000019B6                          1324  * ROR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
000019B6                          1325  * ROL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
000019B6                          1326  * Count/Reg for LSR/LSL refers to shift count, where 0 = shift count of 8, 1-7 
000019B6                          1327  * refers to the respective value when i/r = 0. If i/r = 1, data register in the 
000019B6                          1328  * Count/Reg field specifies the shift count.  
000019B6                          1329  * For directional bit at 8, R = 0, L = 1
000019B6                          1330  * Count/Reg for ROR/ROL specifies rotate count instead of shift count.
000019B6                          1331  *
000019B6                          1332  * Unsupported: ROXL, ROXR
000019B6                          1333  ********************************************************************************
000019B6                          1334  C_GROUP_E:
000019B6                          1335  
000019B6                          1336  CHECK_OP_ROXR_NO_ROT:
000019B6  3038 1000               1337      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000019BA  0240 F4C0               1338      ANDI.W #$F4C0,D0
000019BE  B07C E4C0               1339      CMP.W #$E4C0,D0
000019C2  6700 0136               1340      BEQ   INVALID_OP
000019C6  6600 0002               1341      BNE   CHECK_OP_ROXL_NO_ROT
000019CA                          1342  
000019CA                          1343  CHECK_OP_ROXL_NO_ROT:
000019CA  3038 1000               1344      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000019CE  0240 F5C0               1345      ANDI.W #$F5C0,D0
000019D2  B07C E5C0               1346      CMP.W #$E5C0,D0
000019D6  6700 0122               1347      BEQ   INVALID_OP
000019DA  6600 002A               1348      BNE   CHECK_OP_LSR_NO_ROT
000019DE                          1349  
000019DE                          1350  CHECK_OP_ROR_NO_ROT:
000019DE  3038 1000               1351      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000019E2  0240 F7C0               1352      ANDI.W #$F7C0,D0
000019E6  B07C E6C0               1353      CMP.W #$E6C0,D0
000019EA  6700 0332               1354      BEQ   PRINT_OP_ROR
000019EE  6600 0002               1355      BNE   CHECK_OP_ROL_NO_ROT
000019F2                          1356      
000019F2                          1357  CHECK_OP_ROL_NO_ROT:
000019F2  3038 1000               1358      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000019F6  0240 F7C0               1359      ANDI.W #$F7C0,D0
000019FA  B07C E7C0               1360      CMP.W #$E7C0,D0
000019FE  6700 0310               1361      BEQ   PRINT_OP_ROL
00001A02  6600 0002               1362      BNE   CHECK_OP_LSR_NO_ROT
00001A06                          1363   
00001A06                          1364  CHECK_OP_LSR_NO_ROT:
00001A06  3038 1000               1365      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A0A  0240 F2C0               1366      ANDI.W #$F2C0,D0
00001A0E  B07C E2C0               1367      CMP.W #$E2C0,D0
00001A12  6700 02D2               1368      BEQ   PRINT_OP_LSR
00001A16  6600 0002               1369      BNE   CHECK_OP_LSL_NO_ROT
00001A1A                          1370  
00001A1A                          1371  CHECK_OP_LSL_NO_ROT:
00001A1A  3038 1000               1372      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A1E  0240 F3C0               1373      ANDI.W #$F3C0,D0
00001A22  B07C E3C0               1374      CMP.W #$E3C0,D0
00001A26  6700 02B0               1375      BEQ   PRINT_OP_LSL
00001A2A  6600 0016               1376      BNE   CHECK_OP_ASL_NO_ROT
00001A2E                          1377  
00001A2E                          1378  CHECK_OP_ASR_NO_ROT:
00001A2E  3038 1000               1379      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A32  0240 F1C0               1380      ANDI.W #$F1C0,D0
00001A36  B07C E0C0               1381      CMP.W #$E0C0,D0
00001A3A  6700 02B8               1382      BEQ   PRINT_OP_ASR
00001A3E  6600 0002               1383      BNE   CHECK_OP_ASL_NO_ROT
00001A42                          1384  
00001A42                          1385  CHECK_OP_ASL_NO_ROT:
00001A42  3038 1000               1386      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A46  0240 F1C0               1387      ANDI.W #$F1C0,D0
00001A4A  B07C 01C0               1388      CMP.W #$01C0,D0
00001A4E  6700 02B2               1389      BEQ   PRINT_OP_ASL
00001A52  668A                    1390      BNE   CHECK_OP_ROR_NO_ROT
00001A54                          1391  
00001A54                          1392  CHECK_OP_ROXR:
00001A54  3038 1000               1393      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A58  0240 F118               1394      ANDI.W #$F118,D0
00001A5C  B07C E010               1395      CMP.W  #$E010,D0
00001A60  6700 0098               1396      BEQ    INVALID_OP
00001A64  6600 0002               1397      BNE    CHECK_OP_ROXL
00001A68                          1398      
00001A68                          1399  CHECK_OP_ROXL:
00001A68  3038 1000               1400      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A6C  0240 F118               1401      ANDI.W #$F118,D0
00001A70  B07C E110               1402      CMP.W  #$E110,D0
00001A74  6700 0084               1403      BEQ    INVALID_OP
00001A78  6600 0002               1404      BNE    CHECK_OP_ROR
00001A7C                          1405  
00001A7C                          1406  CHECK_OP_ROR:
00001A7C  3038 1000               1407      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A80  0240 F118               1408      ANDI.W #$F118,D0
00001A84  B07C E018               1409      CMP.W  #$E018,D0
00001A88  6700 0294               1410      BEQ    PRINT_OP_ROR
00001A8C  6600 0002               1411      BNE    CHECK_OP_ROL
00001A90                          1412  
00001A90                          1413  CHECK_OP_ROL:
00001A90  3038 1000               1414      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A94  0240 F118               1415      ANDI.W #$F118,D0
00001A98  B07C E118               1416      CMP.W  #$E118,D0
00001A9C  6700 0272               1417      BEQ    PRINT_OP_ROL
00001AA0  6600 0002               1418      BNE    CHECK_OP_LSR
00001AA4                          1419      
00001AA4                          1420  CHECK_OP_LSR:
00001AA4  3038 1000               1421      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AA8  0240 F118               1422      ANDI.W #$F118,D0
00001AAC  B07C E008               1423      CMP.W  #$E008,D0
00001AB0  6700 0234               1424      BEQ    PRINT_OP_LSR
00001AB4  6600 0002               1425      BNE    CHECK_OP_LSL
00001AB8                          1426  
00001AB8                          1427  CHECK_OP_LSL:
00001AB8  3038 1000               1428      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001ABC  0240 F118               1429      ANDI.W #$F118,D0
00001AC0  B07C E108               1430      CMP.W  #$E108,D0
00001AC4  6700 0212               1431      BEQ    PRINT_OP_LSL
00001AC8  6600 0002               1432      BNE    CHECK_OP_ASR
00001ACC                          1433  
00001ACC                          1434  CHECK_OP_ASR:
00001ACC  3038 1000               1435      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AD0  0240 F118               1436      ANDI.W #$F118,D0
00001AD4  B07C E000               1437      CMP.W  #$E000,D0
00001AD8  6700 021A               1438      BEQ    PRINT_OP_ASR
00001ADC  6600 0002               1439      BNE    CHECK_OP_ASL
00001AE0                          1440  
00001AE0                          1441  CHECK_OP_ASL:
00001AE0  3038 1000               1442      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AE4  0240 F118               1443      ANDI.W #$F118,D0
00001AE8  B07C E100               1444      CMP.W  #$E100,D0
00001AEC  6700 0214               1445      BEQ    PRINT_OP_ASL
00001AF0  6600 0008               1446      BNE    INVALID_OP      ;Last possible OP code
00001AF4                          1447  
00001AF4                          1448  
00001AF4                          1449  * GROUP_F
00001AF4                          1450  ********************************************************************************
00001AF4                          1451  * Currently no OP codes here are supported. There are no OP codes here
00001AF4                          1452  ********************************************************************************
00001AF4                          1453  C_GROUP_F:
00001AF4  4EF9 00001AFA           1454      JMP INVALID_OP
00001AFA                          1455      
00001AFA                          1456  * INVALID_OP                     
00001AFA                          1457  ********************************************************************************
00001AFA                          1458  * Any value that is not covered in the above groups would be considered invalid. 
00001AFA                          1459  * The following values in the first nibble would also indicate that the 
00001AFA                          1460  * operand codes is already invalid: $7, $A, $F.
00001AFA                          1461  * For unsupported OP codes, display DATA $WXYZ   
00001AFA                          1462  * THIS WILL NEED TO BE CHANGED TO DISPLAY: 1000 DATA $WXYZ IN THE FUTURE
00001AFA                          1463  ********************************************************************************
00001AFA                          1464  INVALID_OP:  ; Prints DATA for invalid op
00001AFA  43F9 00001D34           1465      LEA P_INVALID_OP,A1
00001B00  103C 000D               1466      MOVE.B #13,D0
00001B04  4E4F                    1467      TRAP #15
00001B06  FFFF FFFF               1468      SIMHALT
00001B0A                          1469      
00001B0A                          1470  READ_NEXT_INSTRUCTION: ; Needs to read next instruction set {PLACEHOLDER}
00001B0A  FFFF FFFF               1471      SIMHALT
00001B0E                          1472  
00001B0E                          1473  MAKE_VAL_ASCII:
00001B0E  0C00 0009               1474      CMPI.B  #$9,D0
00001B12  6E00 0008               1475      BGT     LETTER_ASCII
00001B16  6F00 000A               1476      BLE     NUMBER_ASCII
00001B1A  4E75                    1477      RTS
00001B1C                          1478      
00001B1C                          1479  LETTER_ASCII:
00001B1C  0600 0037               1480      ADDI.B #$37,D0 ; A-F
00001B20  4E75                    1481      RTS
00001B22                          1482      
00001B22                          1483  NUMBER_ASCII
00001B22  0600 0030               1484      ADDI.B #$30,D0 ; 0-9
00001B26  4E75                    1485      RTS
00001B28                          1486      
00001B28                          1487  ADD_PERIOD:
00001B28  2F00                    1488      MOVE.L D0,-(SP)
00001B2A  103C 0000               1489      MOVE.B #$0,D0
00001B2E  0600 0046               1490      ADDI.B #$46,D0
00001B32  201F                    1491      MOVE.L (SP)+,D0
00001B34                          1492  ********************** PRINTING ROUTINES **************************************
00001B34                          1493  * Description: These routines are to print the associated op codes, by placing
00001B34                          1494  * them in the appropriate area to the buffer
00001B34                          1495  *
00001B34                          1496  * Registers used: A1 for loading, A6 for EA parsing.
00001B34                          1497  *
00001B34                          1498  * Precondition: The relevant opcode has been identified correctly.
00001B34                          1499  *
00001B34                          1500  * Postcondition: Prints out the associated opcode to the buffer.
00001B34                          1501  
00001B34                          1502  * THIS NEEDS TO BE RETOOLED TO PRINT TO BUFFER NOT TO CONSOLE
00001B34                          1503  *******************************************************************************
00001B34                          1504  
00001B34                          1505  ****************************** GROUP 0 **************************************** 
00001B34                          1506  PRINT_OP_ORI:
00001B34  43F9 00001D4B           1507      LEA P_OP_ORI,A1
00001B3A  4EB9 00001D2C           1508      JSR PRINT_OP
00001B40  4E75                    1509      RTS
00001B42                          1510  PRINT_OP_CMPI:
00001B42  43F9 00001D4F           1511      LEA P_OP_CMPI,A1
00001B48  4EB9 00001D2C           1512      JSR PRINT_OP
00001B4E  4E75                    1513      RTS
00001B50                          1514  PRINT_OP_STATIC_BCLR:
00001B50  43F9 00001D54           1515      LEA P_OP_STATIC_BCLR,A1
00001B56  4EB9 00001D2C           1516      JSR PRINT_OP
00001B5C  4E75                    1517      RTS
00001B5E                          1518  PRINT_OP_DYNAMIC_BCLR:
00001B5E  43F9 00001D59           1519      LEA P_OP_DYNAMIC_BCLR,A1
00001B64  4EB9 00001D2C           1520      JSR PRINT_OP
00001B6A  4E75                    1521      RTS
00001B6C                          1522  ******************************* END OF GROUP 0 ********************************
00001B6C                          1523  
00001B6C                          1524  ****************************** GROUP 1 ****************************************    
00001B6C                          1525  PRINT_OP_MOVEB:
00001B6C  43F9 00001D5E           1526      LEA P_OP_MOVEB,A1
00001B72  4EB9 00001D2C           1527      JSR PRINT_OP
00001B78  4E75                    1528      RTS
00001B7A                          1529  ******************************* END OF GROUP 1 ********************************
00001B7A                          1530      
00001B7A                          1531  ****************************** GROUP 2 **************************************** 
00001B7A                          1532  PRINT_OP_MOVEA_L:
00001B7A  43F9 00001D65           1533      LEA P_OP_MOVEA_L,A1
00001B80  4EB9 00001D2C           1534      JSR PRINT_OP
00001B86  4E75                    1535      RTS
00001B88                          1536  PRINT_OP_MOVE_L:
00001B88  43F9 00001D6D           1537      LEA P_OP_MOVE_L,A1
00001B8E  4EB9 00001D2C           1538      JSR PRINT_OP
00001B94  4E75                    1539      RTS
00001B96                          1540  ******************************* END OF GROUP 2 ********************************
00001B96                          1541      
00001B96                          1542  ****************************** GROUP 3 ****************************************    
00001B96                          1543  PRINT_OP_MOVEA_W:
00001B96  43F9 00001D74           1544      LEA P_OP_MOVEA_W,A1
00001B9C  4EB9 00001D2C           1545      JSR PRINT_OP
00001BA2  4E75                    1546      RTS
00001BA4                          1547  PRINT_OP_MOVE_W:
00001BA4  43F9 00001D7C           1548      LEA P_OP_MOVE_W,A1
00001BAA  4EB9 00001D2C           1549      JSR PRINT_OP
00001BB0  4E75                    1550      RTS
00001BB2                          1551  ******************************* END OF GROUP 3 ********************************
00001BB2                          1552  
00001BB2                          1553  ****************************** GROUP 4 ****************************************
00001BB2                          1554  PRINT_OP_NOP:
00001BB2  43F9 00001D9B           1555      LEA P_OP_NOP,A1
00001BB8  4EB9 00001D2C           1556      JSR PRINT_OP
00001BBE  4E75                    1557      RTS
00001BC0                          1558  PRINT_OP_JSR:
00001BC0  43F9 00001D97           1559      LEA P_OP_JSR,A1
00001BC6  4EB9 00001D2C           1560      JSR PRINT_OP
00001BCC  4E75                    1561      RTS
00001BCE                          1562  PRINT_OP_RTS:
00001BCE  43F9 00001D9F           1563      LEA P_OP_RTS,A1
00001BD4  4EB9 00001D2C           1564      JSR PRINT_OP
00001BDA  4E75                    1565      RTS
00001BDC                          1566  PRINT_OP_LEA:
00001BDC  43F9 00001D93           1567      LEA P_OP_LEA,A1
00001BE2  4EB9 00001D2C           1568      JSR PRINT_OP
00001BE8  4E75                    1569      RTS
00001BEA                          1570  PRINT_OP_NEG:
00001BEA  43F9 00001DA3           1571      LEA P_OP_NEG,A1
00001BF0  4EB9 00001D2C           1572      JSR PRINT_OP
00001BF6  4E75                    1573      RTS
00001BF8                          1574  PRINT_OP_MOVEM_W:
00001BF8  43F9 00001D83           1575      LEA P_OP_MOVEM_W,A1
00001BFE  4EB9 00001D2C           1576      JSR PRINT_OP
00001C04  4E75                    1577      RTS
00001C06                          1578  PRINT_OP_MOVEM_L:
00001C06  43F9 00001D8B           1579      LEA P_OP_MOVEM_L,A1
00001C0C  4EB9 00001D2C           1580      JSR PRINT_OP
00001C12  4E75                    1581      RTS
00001C14                          1582  ******************************* END OF GROUP 4 ********************************
00001C14                          1583      
00001C14                          1584  ****************************** GROUP 5 ****************************************
00001C14                          1585  PRINT_OP_SUBQ:
00001C14  43F9 00001DA7           1586      LEA P_OP_SUBQ,A1
00001C1A  4EB9 00001D2C           1587      JSR PRINT_OP
00001C20  4E75                    1588      RTS
00001C22                          1589  ******************************* END OF GROUP 5 ********************************
00001C22                          1590  
00001C22                          1591  ****************************** GROUP 6 ****************************************
00001C22                          1592  PRINT_OP_BCS:
00001C22  43F9 00001DB0           1593      LEA P_OP_BCS,A1
00001C28  4EB9 00001D2C           1594      JSR PRINT_OP
00001C2E  4E75                    1595      RTS
00001C30                          1596  PRINT_OP_BGE:
00001C30  43F9 00001DB4           1597      LEA P_OP_BGE,A1
00001C36  4EB9 00001D2C           1598      JSR PRINT_OP
00001C3C  4E75                    1599      RTS
00001C3E                          1600  PRINT_OP_BLT:
00001C3E  43F9 00001DB8           1601      LEA P_OP_BLT,A1
00001C44  4EB9 00001D2C           1602      JSR PRINT_OP
00001C4A  4E75                    1603      RTS
00001C4C                          1604  PRINT_OP_BVC:
00001C4C  43F9 00001DBC           1605      LEA P_OP_BVC,A1
00001C52  4EB9 00001D2C           1606      JSR PRINT_OP
00001C58  4E75                    1607      RTS
00001C5A                          1608  PRINT_OP_BRA:
00001C5A  43F9 00001DAC           1609      LEA P_OP_BRA,A1
00001C60  4EB9 00001D2C           1610      JSR PRINT_OP
00001C66  4E75                    1611      RTS
00001C68                          1612  ******************************* END OF GROUP 6 ********************************
00001C68                          1613  
00001C68                          1614  ****************************** GROUP 7 ****************************************
00001C68                          1615  * No currently supported OP codes to print here.
00001C68                          1616  ******************************* END OF GROUP 7 ********************************
00001C68                          1617  
00001C68                          1618  ****************************** GROUP 8 ****************************************
00001C68                          1619  PRINT_OP_DIVS:
00001C68  43F9 00001DC0           1620      LEA P_OP_DIVS,A1
00001C6E  4EB9 00001D2C           1621      JSR PRINT_OP
00001C74  4E75                    1622      RTS
00001C76                          1623  PRINT_OP_OR:
00001C76  43F9 00001DC5           1624      LEA P_OP_OR,A1
00001C7C  4EB9 00001D2C           1625      JSR PRINT_OP
00001C82  4E75                    1626      RTS
00001C84                          1627  ******************************* END OF GROUP 8 ********************************
00001C84                          1628  
00001C84                          1629  ****************************** GROUP 9 ****************************************
00001C84                          1630  PRINT_OP_SUB:
00001C84  43F9 00001DC8           1631      LEA P_OP_SUB,A1
00001C8A  4EB9 00001D2C           1632      JSR PRINT_OP
00001C90  4E75                    1633      RTS
00001C92                          1634  ******************************* END OF GROUP 9 ********************************
00001C92                          1635  
00001C92                          1636  ****************************** GROUP A ****************************************
00001C92                          1637  * No currently supported OP codes to print here.
00001C92                          1638  ******************************* END OF GROUP A ********************************
00001C92                          1639  
00001C92                          1640  ****************************** GROUP B ****************************************
00001C92                          1641  PRINT_OP_EOR:
00001C92  43F9 00001DCC           1642      LEA P_OP_EOR,A1
00001C98  4EB9 00001D2C           1643      JSR PRINT_OP
00001C9E  4E75                    1644      RTS
00001CA0                          1645  PRINT_OP_CMP:
00001CA0  43F9 00001DD0           1646      LEA P_OP_CMP,A1
00001CA6  4EB9 00001D2C           1647      JSR PRINT_OP
00001CAC  4E75                    1648      RTS
00001CAE                          1649  ******************************* END OF GROUP B ********************************
00001CAE                          1650  
00001CAE                          1651  ****************************** GROUP C ****************************************
00001CAE                          1652  PRINT_OP_MULS:
00001CAE  43F9 00001DD4           1653      LEA P_OP_MULS,A1
00001CB4  4EB9 00001D2C           1654      JSR PRINT_OP
00001CBA  4E75                    1655      RTS
00001CBC                          1656  ******************************* END OF GROUP C ********************************
00001CBC                          1657  
00001CBC                          1658  ****************************** GROUP D ****************************************
00001CBC                          1659  PRINT_OP_ADD:
00001CBC  43F9 00001DDE           1660      LEA P_OP_ADD,A1
00001CC2  4EB9 00001D2C           1661      JSR PRINT_OP
00001CC8  4E75                    1662      RTS
00001CCA                          1663  PRINT_OP_ADDA:
00001CCA  43F9 00001DD9           1664      LEA P_OP_ADDA,A1
00001CD0  4EB9 00001D2C           1665      JSR PRINT_OP
00001CD6  4E75                    1666      RTS
00001CD8                          1667  
00001CD8                          1668  ******************************* END OF GROUP D ********************************
00001CD8                          1669  
00001CD8                          1670  ****************************** GROUP E ****************************************
00001CD8                          1671  PRINT_OP_LSL:
00001CD8  43F9 00001DE6           1672      LEA P_OP_LSL,A1
00001CDE  4EB9 00001D2C           1673      JSR PRINT_OP
00001CE4  4E75                    1674      RTS
00001CE6                          1675  PRINT_OP_LSR:
00001CE6  43F9 00001DE2           1676      LEA P_OP_LSR,A1
00001CEC  4EB9 00001D2C           1677      JSR PRINT_OP
00001CF2  4E75                    1678      RTS
00001CF4                          1679  PRINT_OP_ASR:
00001CF4  43F9 00001DEA           1680      LEA P_OP_ASR,A1
00001CFA  4EB9 00001D2C           1681      JSR PRINT_OP
00001D00  4E75                    1682      RTS
00001D02                          1683  PRINT_OP_ASL:
00001D02  43F9 00001DEE           1684      LEA P_OP_ASL,A1
00001D08  4EB9 00001D2C           1685      JSR PRINT_OP
00001D0E  4E75                    1686      RTS
00001D10                          1687  PRINT_OP_ROL:
00001D10  43F9 00001DF6           1688      LEA P_OP_ROL,A1
00001D16  4EB9 00001D2C           1689      JSR PRINT_OP
00001D1C  4E75                    1690      RTS
00001D1E                          1691  PRINT_OP_ROR:
00001D1E  43F9 00001DF2           1692      LEA P_OP_ROR,A1
00001D24  4EB9 00001D2C           1693      JSR PRINT_OP
00001D2A  4E75                    1694      RTS
00001D2C                          1695  ******************************* END OF GROUP E ********************************
00001D2C                          1696  
00001D2C                          1697  ****************************** GROUP F ****************************************
00001D2C                          1698  * No currently supported OP codes to print here.
00001D2C                          1699  ******************************* END OF GROUP F ********************************
00001D2C                          1700  
00001D2C                          1701  
00001D2C                          1702  
00001D2C                          1703  PRINT_OP:   ;Prints current op code byte
00001D2C                          1704      ;MOVE.W (A4),(A1)       ; NEEDS TO USE G_BUFFER LATER
00001D2C  103C 000D               1705      MOVE.B #13,D0
00001D30  4E4F                    1706      TRAP #15
00001D32  4E75                    1707      RTS
00001D34                          1708  ******************* END OF PRINTING ROUTINES **********************************
00001D34                          1709  
00001D34                          1710  ******************* END OF JMP LABELS *****************************************
00001D34                          1711  
00001D34                          1712  ******************* DATA CONSTANT PRINTS **************************************
00001D34                          1713  * Formatting is as follows: P_OP_<OPCODE>, where P = Print, OP = Operation,
00001D34                          1714  * <OPCODE> is any valid operand
00001D34                          1715  
00001D34= 44 41 54 41 00          1716  P_INVALID_OP    DC.B    'DATA',0
00001D39= 46 6F 75 6E 64 20 ...   1717  OP_FOUND        DC.B    'Found OP',0 ; this should be taken out later
00001D42= 2E 42 00                1718  P_SIZE_B        DC.B    '.B',0
00001D45= 2E 57 00                1719  P_SIZE_W        DC.B    '.W',0
00001D48= 2E 4C 00                1720  P_SIZE_L        DC.B    '.L',0
00001D4B= 4F 52 49 00             1721  P_OP_ORI        DC.B    'ORI',0
00001D4F= 43 4D 50 49 00          1722  P_OP_CMPI       DC.B    'CMPI',0
00001D54= 42 43 4C 52 00          1723  P_OP_STATIC_BCLR     DC.B    'BCLR',0
00001D59= 42 43 4C 52 00          1724  P_OP_DYNAMIC_BCLR     DC.B    'BCLR',0
00001D5E= 4D 4F 56 45 2E 42 00    1725  P_OP_MOVEB      DC.B    'MOVE.B',0
00001D65= 4D 4F 56 45 41 2E ...   1726  P_OP_MOVEA_L    DC.B    'MOVEA.L',0 
00001D6D= 4D 4F 56 45 2E 4C 00    1727  P_OP_MOVE_L     DC.B    'MOVE.L',0
00001D74= 4D 4F 56 45 41 2E ...   1728  P_OP_MOVEA_W    DC.B    'MOVEA.W',0
00001D7C= 4D 4F 56 45 2E 57 00    1729  P_OP_MOVE_W     DC.B    'MOVE.W',0
00001D83= 4D 4F 56 45 4D 2E ...   1730  P_OP_MOVEM_W    DC.B    'MOVEM.W',0
00001D8B= 4D 4F 56 45 4D 2E ...   1731  P_OP_MOVEM_L    DC.B    'MOVEM.L',0
00001D93= 4C 45 41 00             1732  P_OP_LEA        DC.B    'LEA',0
00001D97= 4A 53 52 00             1733  P_OP_JSR        DC.B    'JSR',0
00001D9B= 4E 4F 50 00             1734  P_OP_NOP        DC.B    'NOP',0
00001D9F= 52 54 53 00             1735  P_OP_RTS        DC.B    'RTS',0
00001DA3= 4E 45 47 00             1736  P_OP_NEG        DC.B    'NEG',0
00001DA7= 53 55 42 51 00          1737  P_OP_SUBQ       DC.B    'SUBQ',0
00001DAC= 42 52 41 00             1738  P_OP_BRA        DC.B    'BRA',0
00001DB0= 42 43 53 00             1739  P_OP_BCS        DC.B    'BCS',0
00001DB4= 42 47 45 00             1740  P_OP_BGE        DC.B    'BGE',0
00001DB8= 42 4C 54 00             1741  P_OP_BLT        DC.B    'BLT',0
00001DBC= 42 56 43 00             1742  P_OP_BVC        DC.B    'BVC',0
00001DC0= 44 49 56 53 00          1743  P_OP_DIVS       DC.B    'DIVS',0
00001DC5= 4F 52 00                1744  P_OP_OR         DC.B    'OR',0
00001DC8= 53 55 42 00             1745  P_OP_SUB        DC.B    'SUB',0
00001DCC= 45 4F 52 00             1746  P_OP_EOR        DC.B    'EOR',0
00001DD0= 43 4D 50 00             1747  P_OP_CMP        DC.B    'CMP',0
00001DD4= 4D 55 4C 53 00          1748  P_OP_MULS       DC.B    'MULS',0
00001DD9= 41 44 44 41 00          1749  P_OP_ADDA       DC.B    'ADDA',0
00001DDE= 41 44 44 00             1750  P_OP_ADD        DC.B    'ADD',0
00001DE2= 4C 53 52 00             1751  P_OP_LSR        DC.B    'LSR',0
00001DE6= 4C 53 4C 00             1752  P_OP_LSL        DC.B    'LSL',0
00001DEA= 41 53 52 00             1753  P_OP_ASR        DC.B    'ASR',0
00001DEE= 41 53 4C 00             1754  P_OP_ASL        DC.B    'ASL',0
00001DF2= 52 4F 52 00             1755  P_OP_ROR        DC.B    'ROR',0
00001DF6= 52 4F 4C 00             1756  P_OP_ROL        DC.B    'ROL',0
00001DFA                          1757  ***************** END OF DATA CONSTANT PRINTS ***********************************
00001DFA                          1758   
00001DFA                          1759  
00001DFA                          1760  **
00001DFA                          1761  * AddStrToBuffer
00001DFA                          1762  **
00001DFA                          1763  * Adds the given NULL-terminated string to the specified buffer.
00001DFA                          1764  *
00001DFA                          1765  * Default buffer length is 80 characters, but can be modified in the argument
00001DFA                          1766  * variables.
00001DFA                          1767  *
00001DFA                          1768  * If the buffer length is exceeded, either due to lack of a NULL character or
00001DFA                          1769  * an incorrectly specified length, 1 is returned. Otherwise, 0 is returned to
00001DFA                          1770  * indicate success.
00001DFA                          1771  *
00001DFA                          1772  **
00001DFA                          1773  * @param Arg_AddStrToBuffer_String              Pointer to string
00001DFA                          1774  * @param Arg_AddStrToBuffer_Buffer              Pointer to buffer
00001DFA                          1775  * @param Arg_AddStrToBuffer_BufferLength        Length of buffer (default 80 chars)
00001DFA                          1776  * @return Ret_AddStrToBuffer_Success            0 if successful, 1 otherwise.
00001DFA                          1777  * @branch _AddStrToBuffer_FindBufferNullLoop    Loop to find NULL in buffer
00001DFA                          1778  * @branch _AddStrToBuffer_AddLoop               Loop to add string to buffer
00001DFA                          1779  * @branch _AddStrToBuffer_Success               Branch when string successfully added
00001DFA                          1780  * @branch _AddStrToBuffer_StringLengthExceeded  Branch when length exceeded (either string or buffer)
00001DFA                          1781  * @branch _AddStrToBuffer_End                   End of subroutine
00001DFA                          1782  **
00001DFA                          1783  Arg_AddStrToBuffer_String           DS.L    1
00001DFE                          1784  Arg_AddStrToBuffer_Buffer           DS.L    1
00001E02= 00000050                1785  Arg_AddStrToBuffer_BufferLength     DC.L    80
00001E06                          1786  Ret_AddStrToBuffer_Success          DS.B    1
00001E07                          1787  
00001E08                          1788  AddStrToBuffer:                     DS.W    0
00001E08  48E7 C0C0               1789      MOVEM.L     D0-D1/A0-A1, -(SP)                  * Backup registers to stack
00001E0C                          1790  
00001E0C  2078 1DFA               1791      MOVE.L      Arg_AddStrToBuffer_String, A0       * Load string pointer
00001E10  2278 1DFE               1792      MOVE.L      Arg_AddStrToBuffer_Buffer, A1       * Load buffer pointer
00001E14  2038 1E02               1793      MOVE.L      Arg_AddStrToBuffer_BufferLength, D0 * Load buffer length
00001E18  4278 1E06               1794      CLR.W       Ret_AddStrToBuffer_Success          * Clear success bit
00001E1C  4281                    1795      CLR.L       D1                                  * Clear loop counter
00001E1E                          1796  
00001E1E                          1797  _AddStrToBuffer_BufferLoop
00001E1E  0C11 0000               1798      CMPI.B      #0, (A1)                            * If buffer char is NULL
00001E22  6700 000E               1799      BEQ         _AddStrToBuffer_AddLoop             * Start adding string to bufer
00001E26                          1800      
00001E26  B280                    1801      CMP.L       D0, D1                              * If counter >= max length
00001E28  6C00 0024               1802      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
00001E2C                          1803      
00001E2C  5289                    1804      ADDQ.L      #1, A1                              * Go to next character
00001E2E  5201                    1805      ADDQ.B      #1, D1                              * Increment counter
00001E30  60EC                    1806      BRA         _AddStrToBuffer_BufferLoop          * Loop back
00001E32                          1807      
00001E32                          1808  _AddStrToBuffer_AddLoop
00001E32  0C10 0000               1809      CMPI.B      #0, (A0)                            * If string char is NULL
00001E36  6700 000E               1810      BEQ         _AddStrToBuffer_Success             * String successfully added
00001E3A                          1811      
00001E3A  B200                    1812      CMP.B       D0, D1                              * If counter >= max length
00001E3C  6C00 0010               1813      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
00001E40                          1814      
00001E40  12D8                    1815      MOVE.B      (A0)+, (A1)+                        * Move string char to buffer char
00001E42  5201                    1816      ADDQ.B      #1, D1                              * Increment counter
00001E44  60EC                    1817      BRA         _AddStrToBuffer_AddLoop             * Loop back
00001E46                          1818  
00001E46                          1819  _AddStrToBuffer_Success
00001E46  12BC 0000               1820      MOVE.B      #0, (A1)                            * Add NULL to end of string
00001E4A  6000 0008               1821      BRA         _AddStrToBuffer_End                 * Finish subroutine
00001E4E                          1822  
00001E4E                          1823  _AddStrToBuffer_LengthExceeded
00001E4E  31FC 0001 1E06          1824      MOVE.W      #1, Ret_AddStrToBuffer_Success      * Invalidate success bit
00001E54                          1825  
00001E54                          1826  _AddStrToBuffer_End
00001E54  4CDF 0303               1827      MOVEM.L     (SP)+, D0-D1/A0-A1                  * Restore registers from stack
00001E58  4E75                    1828      RTS                  
00001E5A                          1829     
00001E5A                          1830      END START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDSTRTOBUFFER      1E08
ADD_PERIOD          1B28
ARG_ADDSTRTOBUFFER_BUFFER  1DFE
ARG_ADDSTRTOBUFFER_BUFFERLENGTH  1E02
ARG_ADDSTRTOBUFFER_STRING  1DFA
B_BUFFER            1053
CG0_C               14AC
CG0_F               14A8
CHECK_OP_ABCD       193C
CHECK_OP_ADD        19B0
CHECK_OP_ADDA       199C
CHECK_OP_ADDI       138C
CHECK_OP_ADDQ       1788
CHECK_OP_ADDX       1988
CHECK_OP_AND        1978
CHECK_OP_ANDI       1364
CHECK_OP_ANDI_TO_CCR  1324
CHECK_OP_ANDI_TO_SR  1334
CHECK_OP_ASL        1AE0
CHECK_OP_ASL_NO_ROT  1A42
CHECK_OP_ASR        1ACC
CHECK_OP_ASR_NO_ROT  1A2E
CHECK_OP_BCS        1800
CHECK_OP_BGE        1814
CHECK_OP_BLT        1828
CHECK_OP_BRA        17EC
CHECK_OP_BSR        17D8
CHECK_OP_BVC        183C
CHECK_OP_CHK        1714
CHECK_OP_CLR        1610
CHECK_OP_CMP        1914
CHECK_OP_CMPA       18EC
CHECK_OP_CMPI       145A
CHECK_OP_CMPM       18D8
CHECK_OP_DBCC       179C
CHECK_OP_DIVS       188A
CHECK_OP_DIVU       1862
CHECK_OP_DYNAMIC_BCHG  1404
CHECK_OP_DYNAMIC_BCLR  148E
CHECK_OP_DYNAMIC_BSET  1418
CHECK_OP_DYNAMIC_BTST  13F0
CHECK_OP_EOR        1900
CHECK_OP_EORI       13A0
CHECK_OP_EORI_TO_CCR  1344
CHECK_OP_EORI_TO_SR  1354
CHECK_OP_EXG        1950
CHECK_OP_EXT        1638
CHECK_OP_ILLEGAL    1580
CHECK_OP_JMP        1700
CHECK_OP_JSR        174C
CHECK_OP_LEA        1738
CHECK_OP_LINK       16C4
CHECK_OP_LSL        1AB8
CHECK_OP_LSL_NO_ROT  1A1A
CHECK_OP_LSR        1AA4
CHECK_OP_LSR_NO_ROT  1A06
CHECK_OP_MOVEA_L    14C4
CHECK_OP_MOVEA_W    150A
CHECK_OP_MOVEM      1774
CHECK_OP_MOVEP      142C
CHECK_OP_MOVEQ      1850
CHECK_OP_MOVE_B     14AE
CHECK_OP_MOVE_FROM_CCR  15D4
CHECK_OP_MOVE_FROM_SR  15C0
CHECK_OP_MOVE_L     14F4
CHECK_OP_MOVE_TO_SR  15E8
CHECK_OP_MOVE_USP   16EC
CHECK_OP_MOVE_W     153A
CHECK_OP_MULS       1964
CHECK_OP_MULU       1928
CHECK_OP_NBCD       164C
CHECK_OP_NEG        1760
CHECK_OP_NEGX       15FC
CHECK_OP_NOP        1570
CHECK_OP_NOT        1624
CHECK_OP_OR         189E
CHECK_OP_ORI        1440
CHECK_OP_ORI_TO_CCR  1304
CHECK_OP_ORI_TO_SR  1314
CHECK_OP_PEA        1674
CHECK_OP_RESET      1560
CHECK_OP_ROL        1A90
CHECK_OP_ROL_NO_ROT  19F2
CHECK_OP_ROR        1A7C
CHECK_OP_ROR_NO_ROT  19DE
CHECK_OP_ROXL       1A68
CHECK_OP_ROXL_NO_ROT  19CA
CHECK_OP_ROXR       1A54
CHECK_OP_ROXR_NO_ROT  19B6
CHECK_OP_RTE        1590
CHECK_OP_RTR        15B0
CHECK_OP_RTS        1728
CHECK_OP_SBCD       1876
CHECK_OP_SCC        17B0
CHECK_OP_STATIC_BCHG  13C8
CHECK_OP_STATIC_BCLR  1474
CHECK_OP_STATIC_BSET  13DC
CHECK_OP_STATIC_BTST  13B4
CHECK_OP_STOP       1550
CHECK_OP_SUB        18CC
CHECK_OP_SUBA       18A4
CHECK_OP_SUBI       1378
CHECK_OP_SUBQ       17C4
CHECK_OP_SUBX       18B8
CHECK_OP_SWAP       1660
CHECK_OP_TAS        1688
CHECK_OP_TRAP       16B0
CHECK_OP_TRAPV      15A0
CHECK_OP_TST        169C
CHECK_OP_UNLK       16D8
CUR_OP_CODE         1000
C_GROUP_0           1300
C_GROUP_1           14AE
C_GROUP_2           14C4
C_GROUP_3           150A
C_GROUP_4           1550
C_GROUP_5           1788
C_GROUP_6           17D8
C_GROUP_7           1850
C_GROUP_8           1862
C_GROUP_9           18A4
C_GROUP_A           18D2
C_GROUP_B           18D8
C_GROUP_C           1928
C_GROUP_D           1988
C_GROUP_E           19B6
C_GROUP_F           1AF4
EA_SIZE             1002
FIND_2_BIT_SIZE_TO_EA  122A
FIND_3_BIT_REG_TO_EA  1240
FIND_MOVEA_L_DIFFERENCE  14D4
FIND_MOVEA_W_DIFFERENCE  151A
FIND_TRAILING_BITS_TO_EA  129C
FIRST_3             10A4
FOURTH_3            10A7
GROUP_0             10E2
GROUP_1             10F4
GROUP_2             1106
GROUP_3             1118
GROUP_4             112A
GROUP_5             113C
GROUP_6             114E
GROUP_7             1160
GROUP_8             1172
GROUP_9             1184
GROUP_A             1196
GROUP_B             11A8
GROUP_C             11BA
GROUP_D             11CC
GROUP_E             11DE
GROUP_F             11F0
G_BUFFER            1003
INVALID_OP          1AFA
LETTER_ASCII        1B1C
LOAD_OP_CODE        10CA
MAKE_VAL_ASCII      1B0E
MNEMONIC            10A3
MOVE_AND_MOVEA_PARSE_EA  1256
MOVE_LAST_6_BITS_TO_EA  1208
NUMBER_ASCII        1B22
OP_FOUND            1D39
OP_JSR_DONE         11FE
OP_JSR_ROUTINE      10DA
PARSE_EA_CONSTANT_BITS  12B2
PRINT_OP            1D2C
PRINT_OP_ADD        1CBC
PRINT_OP_ADDA       1CCA
PRINT_OP_ASL        1D02
PRINT_OP_ASR        1CF4
PRINT_OP_BCS        1C22
PRINT_OP_BGE        1C30
PRINT_OP_BLT        1C3E
PRINT_OP_BRA        1C5A
PRINT_OP_BVC        1C4C
PRINT_OP_CMP        1CA0
PRINT_OP_CMPI       1B42
PRINT_OP_DIVS       1C68
PRINT_OP_DYNAMIC_BCLR  1B5E
PRINT_OP_EOR        1C92
PRINT_OP_JSR        1BC0
PRINT_OP_LEA        1BDC
PRINT_OP_LSL        1CD8
PRINT_OP_LSR        1CE6
PRINT_OP_MOVEA_L    1B7A
PRINT_OP_MOVEA_W    1B96
PRINT_OP_MOVEB      1B6C
PRINT_OP_MOVEM_L    1C06
PRINT_OP_MOVEM_W    1BF8
PRINT_OP_MOVE_L     1B88
PRINT_OP_MOVE_W     1BA4
PRINT_OP_MULS       1CAE
PRINT_OP_NEG        1BEA
PRINT_OP_NOP        1BB2
PRINT_OP_OR         1C76
PRINT_OP_ORI        1B34
PRINT_OP_ROL        1D10
PRINT_OP_ROR        1D1E
PRINT_OP_RTS        1BCE
PRINT_OP_STATIC_BCLR  1B50
PRINT_OP_SUB        1C84
PRINT_OP_SUBQ       1C14
P_INVALID_OP        1D34
P_OP_ADD            1DDE
P_OP_ADDA           1DD9
P_OP_ASL            1DEE
P_OP_ASR            1DEA
P_OP_BCS            1DB0
P_OP_BGE            1DB4
P_OP_BLT            1DB8
P_OP_BRA            1DAC
P_OP_BVC            1DBC
P_OP_CMP            1DD0
P_OP_CMPI           1D4F
P_OP_DIVS           1DC0
P_OP_DYNAMIC_BCLR   1D59
P_OP_EOR            1DCC
P_OP_JSR            1D97
P_OP_LEA            1D93
P_OP_LSL            1DE6
P_OP_LSR            1DE2
P_OP_MOVEA_L        1D65
P_OP_MOVEA_L_A_L    10B4
P_OP_MOVEA_L_T      10A8
P_OP_MOVEA_W        1D74
P_OP_MOVEB          1D5E
P_OP_MOVEM_L        1D8B
P_OP_MOVEM_W        1D83
P_OP_MOVE_L         1D6D
P_OP_MOVE_W         1D7C
P_OP_MULS           1DD4
P_OP_NEG            1DA3
P_OP_NOP            1D9B
P_OP_OR             1DC5
P_OP_ORI            1D4B
P_OP_ROL            1DF6
P_OP_ROR            1DF2
P_OP_RTS            1D9F
P_OP_STATIC_BCLR    1D54
P_OP_SUB            1DC8
P_OP_SUBQ           1DA7
P_SIZE_B            1D42
P_SIZE_L            1D48
P_SIZE_W            1D45
READ_NEXT_INSTRUCTION  1B0A
RET_ADDSTRTOBUFFER_SUCCESS  1E06
SECOND_3            10A5
START               10BC
THIRD_3             10A6
_ADDSTRTOBUFFER_ADDLOOP  1E32
_ADDSTRTOBUFFER_BUFFERLOOP  1E1E
_ADDSTRTOBUFFER_END  1E54
_ADDSTRTOBUFFER_LENGTHEXCEEDED  1E4E
_ADDSTRTOBUFFER_SUCCESS  1E46
