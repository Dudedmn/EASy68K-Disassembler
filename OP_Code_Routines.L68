00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/9/2019 4:20:33 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by : Daniel Yan
00000000                             4  * Date       : 2/28/2019
00000000                             5  * Description: Op code determining process guide through branches/groupings
00000000                             6  
00002000                             7    ORG $2000
00002000                             8  CUR_OP_CODE DS.W 1  ; Current OP Code Word   
00001000                             9    ORG $1000 ; Start at Address $1000
00001000                            10  
00001000                            11  START ; Start the op code routine
00001000                            12      ;MOVE.W #%0000100010000010,CUR_OP_CODE   ;Static BCLR
00001000  31FC 0F8E 2000            13      MOVE.W #%0000111110001110,CUR_OP_CODE    ; Dymanic BCLR
00001006  3C78 2000                 14      MOVE.W CUR_OP_CODE,A6
0000100A  3CB8 2000                 15      MOVE.W CUR_OP_CODE,(A6)
0000100E  3016                      16      MOVE.W (A6),D0
00001010                            17      ;MOVE.W #$0800,D0          ;ORI.B #$5, D2
00001010                            18      
00001010  4EB9 00001016             19      JSR OP_JSR_Routine      ;Use the JSR routine to identify the op code
00001016                            20  *-----------------------------------------------------------
00001016                            21  *First Nibble Values (15-12)
00001016                            22  *Value                  Operations
00001016                            23  *$0                     GROUP_0: ORI,BCLR (static and dynamic),CMPI
00001016                            24  *$1                     GROUP_1: MOVE.B                   
00001016                            25  *$2                     GROUP_2: MOVE.L, MOVEA.L
00001016                            26  *$3                     GROUP_3: MOVE.W, MOVEA.W
00001016                            27  *$4                     GROUP_4: LEA,JSR,RTS,NEG,MOVEM
00001016                            28  *$5                     GROUP_4: INVALID_OP
00001016                            29  *$6                     GROUP_6: SUBQ, Bcc(BCS,BGE,BLT,BVC), BRA
00001016                            30  *$7                     GROUP_7: INVALID_OP
00001016                            31  *$8                     GROUP_8: DIVS, OR
00001016                            32  *$9                     GROUP_7: SUB
00001016                            33  *$A                     GROUP_A: INVALID_OP
00001016                            34  *$B                     GROUP_B: EOR, CMP
00001016                            35  *$C                     GROUP_C: MULS
00001016                            36  *$D                     GROUP_D: ADD, ADDA
00001016                            37  *$E                     GROUP_E: LSR, LSL, ASR, ASL, ROL, ROR
00001016                            38  *$F                     GROUP_F: INVALID_OP
00001016                            39  
00001016                            40  ********************OPCode JSR Routines***************************************
00001016                            41  * These valid operand codes refer to the basic supported operand codes
00001016                            42  * Groups refer to the first nibble value that is supported by the operand
00001016                            43  OP_JSR_Routine:
00001016  48E7 C000                 44      MOVEM.L D0-D1, -(SP)              ;Backup register D0 by pushing it on the Stack
0000101A  720C                      45      MOVE.L #12, D1                 ; Prepare bit shift left for D1   
0000101C  E2A8                      46      LSR.L   D1,D0                  ; Shift 12 bits to only get first 4 bits for D0
0000101E                            47  
0000101E                            48  GROUP_0:     ;$0| ORI, BCLR (static and dynamic), CMPI                  
0000101E  B03C 0000                 49      CMP.B   #$0,D0          ; Compare first nibble
00001022  6600 000C                 50      BNE     GROUP_1         ; If first nibble isn't 0, branch to second next group
00001026  4EB9 00001140             51      JSR     C_GROUP_0
0000102C  6000 010C                 52      BRA     OP_JSR_DONE
00001030                            53      
00001030                            54  GROUP_1:     ;$1| MOVE.B
00001030  B03C 0001                 55      CMP.B   #$1,D0
00001034  6600 000C                 56      BNE     GROUP_2
00001038  4EB9 000011CC             57      JSR     C_GROUP_1
0000103E  6000 00FA                 58      BRA     OP_JSR_DONE
00001042                            59  
00001042                            60  GROUP_2:     ;$2| MOVE.L, MOVEA.L
00001042  B03C 0002                 61      CMP.B   #$2,D0
00001046  6600 000C                 62      BNE     GROUP_3
0000104A  4EB9 000011DA             63      JSR     C_GROUP_2
00001050  6000 00E8                 64      BRA     OP_JSR_DONE
00001054                            65  
00001054                            66  GROUP_3:     ;$3| MOVE.W, MOVEA.W
00001054  B03C 0003                 67      CMP.B   #$3,D0
00001058  6600 000C                 68      BNE     GROUP_4
0000105C  4EB9 000011DA             69      JSR     C_GROUP_3
00001062  6000 00D6                 70      BRA     OP_JSR_DONE
00001066                            71  
00001066                            72  GROUP_4:     ;$4| LEA, JSR, RTS, NEG, MOVEM
00001066  B03C 0004                 73      CMP.B   #$4,D0
0000106A  6600 000C                 74      BNE     GROUP_5
0000106E  4EB9 000011DA             75      JSR     C_GROUP_4
00001074  6000 00C4                 76      BRA     OP_JSR_DONE
00001078                            77  
00001078                            78  
00001078                            79  GROUP_5:     ;$5| SUBQ
00001078  B03C 0005                 80      CMP.B   #$5,D0
0000107C  6600 000C                 81      BNE     GROUP_6
00001080  4EB9 000011DA             82      JSR     C_GROUP_5
00001086  6000 00B2                 83      BRA     OP_JSR_DONE
0000108A                            84  
0000108A                            85  
0000108A                            86  GROUP_6:     ;$6| Bcc, BRA
0000108A  B03C 0006                 87      CMP.B   #$6,D0
0000108E  6600 000C                 88      BNE     GROUP_7
00001092  4EB9 000011DA             89      JSR     C_GROUP_6
00001098  6000 00A0                 90      BRA     OP_JSR_DONE
0000109C                            91  
0000109C                            92  
0000109C                            93  GROUP_7:     ;$7| Display: DATA, $WXYZ (Unsupported)
0000109C  B03C 0007                 94      CMP.B   #$7,D0
000010A0  6600 000C                 95      BNE     GROUP_8
000010A4  4EB9 000011DA             96      JSR     C_GROUP_7
000010AA  6000 008E                 97      BRA     OP_JSR_DONE
000010AE                            98  
000010AE                            99  
000010AE                           100  GROUP_8:     ;$8| DIVS, OR
000010AE  B03C 0008                101      CMP.B   #$8,D0
000010B2  6600 000C                102      BNE     GROUP_9
000010B6  4EB9 000011E0            103      JSR     C_GROUP_8
000010BC  6000 007C                104      BRA     OP_JSR_DONE
000010C0                           105  
000010C0                           106  
000010C0                           107  GROUP_9:     ;$9| SUB
000010C0  B03C 0009                108      CMP.B   #$9,D0
000010C4  6600 000C                109      BNE     GROUP_A
000010C8  4EB9 000011E0            110      JSR     C_GROUP_9
000010CE  6000 006A                111      BRA     OP_JSR_DONE
000010D2                           112  
000010D2                           113  
000010D2                           114  GROUP_A:     ;$A| Display: DATA, $WXYZ (Unsupported)
000010D2  B03C 000A                115      CMP.B   #$A,D0
000010D6  6600 000C                116      BNE     GROUP_B
000010DA  4EB9 000011E0            117      JSR     C_GROUP_A
000010E0  6000 0058                118      BRA     OP_JSR_DONE
000010E4                           119  
000010E4                           120  
000010E4                           121  GROUP_B:     ;$B| EOR, CMP
000010E4  B03C 000B                122      CMP.B   #$B,D0
000010E8  6600 000C                123      BNE     GROUP_C
000010EC  4EB9 000011E6            124      JSR     C_GROUP_B
000010F2  6000 0046                125      BRA     OP_JSR_DONE
000010F6                           126  
000010F6                           127  
000010F6                           128  GROUP_C:     ;$C| MULS
000010F6  B03C 000C                129      CMP.B   #$C,D0
000010FA  6600 000C                130      BNE     GROUP_D
000010FE  4EB9 000011E6            131      JSR     C_GROUP_C
00001104  6000 0034                132      BRA     OP_JSR_DONE
00001108                           133  
00001108                           134  
00001108                           135  GROUP_D:     ;$D| ADD, ADDA
00001108  B03C 000D                136      CMP.B   #$D,D0
0000110C  6600 000C                137      BNE     GROUP_E
00001110  4EB9 000011E6            138      JSR     C_GROUP_D
00001116  6000 0022                139      BRA     OP_JSR_DONE
0000111A                           140  
0000111A                           141  
0000111A                           142  GROUP_E:     ;$E| LSR, LSL, ASR, ASL, ROL, ROR
0000111A  B03C 000E                143      CMP.B   #$E,D0
0000111E  6600 000C                144      BNE     GROUP_F
00001122  4EB9 000011E6            145      JSR     C_GROUP_E
00001128  6000 0010                146      BRA     OP_JSR_DONE
0000112C                           147  
0000112C                           148  
0000112C                           149  GROUP_F:     ;$F| Display: DATA, $WXYZ (Unsupported)
0000112C  B03C 000F                150      CMP.B   #$F,D0
00001130  4EB9 000011E6            151      JSR     C_GROUP_F
00001136  6000 0002                152      BRA     OP_JSR_DONE
0000113A                           153  
0000113A                           154  
0000113A                           155  OP_JSR_DONE:
0000113A  4CDF 0003                156           MOVEM.L (SP)+,D0-D1 ;Recover register D0
0000113E  4E75                     157           RTS             ;Return to stack
00001140                           158  ********************************************************************************
00001140                           159  
00001140                           160  *******************JMP LABELS **************************************************
00001140                           161  * Labelling for group codes will be in the following format
00001140                           162  
00001140                           163  * <JMP Labelname>
00001140                           164  ********************************************************************************
00001140                           165  * Checking List Order (If more than one value)
00001140                           166  * Operand1 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
00001140                           167  * Operand2 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
00001140                           168  
00001140                           169  * Where a-b will refer to the bit corresponding bit value in the instruction
00001140                           170  * format, and a specifier will be attached such as Size, EA Mode, SRC Reg, etc
00001140                           171  * to clarify what a specific bit range means.
00001140                           172  * Checking order refers to what order the checks will be performed in. 
00001140                           173  * Any other code outside of the listed ones will be INVALID_OP.
00001140                           174  ********************************************************************************
00001140                           175  
00001140                           176  ********************************************************************************
00001140                           177  * Global Field Descriptions
00001140                           178  * Size Field: Byte = 00 Word = 01 Long = 10
00001140                           179  * EA Mode: Refer to EA Address Modes
00001140                           180  * EA Reg: 3-bit input that is mapped to the respective binary value
00001140                           181  ********************************************************************************
00001140                           182  
00001140                           183  * GROUP_0                      
00001140                           184  ********************************************************************************
00001140                           185  * ORI: $00, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001140                           186  * CMPI: $0C, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001140                           187  * Dynamic BCLR: $0, 11-9 Register, 8-6 %110, 5-3 EA Mode, 2-0 EA Reg
00001140                           188  * Static BCLR: $01, 7-6 10, 5-3 EA Mode, 2-0 EA Reg
00001140                           189  ********************************************************************************
00001140                           190  C_GROUP_0:
00001140  48E7 C000                191      MOVEM.L D0-D1, -(SP) ; Backup registers
00001144                           192      
00001144                           193  check_OP_ORI:
00001144  3016                     194      MOVE.W  (A6),D0         ;Move current OP code into D0
00001146  0240 FF00                195      ANDI.W  #$FF00,D0       ;Mask relevant bits to D0
0000114A  B07C 0000                196      CMP.W   #$0000,D0       ;Compare the appropriate masked bits     
0000114E  6600 000C                197      BNE     check_OP_CMPI   ;Branch to next comparison if not equal
00001152  4EB9 000011FC            198      JSR     PRINT_OP_ORI    ;Print the OP code if equal         
00001158  6000 004E                199      BRA     CG0_C           ;Finish routine
0000115C                           200  check_OP_CMPI:
0000115C  3016                     201      MOVE.W  (A6),D0         ;Move current OP code into D0
0000115E  0240 FF00                202      ANDI.W  #$FF00,D0       ;Mask relevant bits to D0
00001162  B07C 0C00                203      CMP.W   #$0C00,D0       ;Compare the appropriate masked bits   
00001166  6600 000C                204      BNE     check_OP_S_BCLR ;Branch to next comparison if not equal       
0000116A  4EB9 0000120A            205      JSR     PRINT_OP_CMPI   ;Print the OP code if equal
00001170  6000 0036                206      BRA     CG0_C           ;Finish routine
00001174                           207  check_OP_S_BCLR:
00001174  3016                     208      MOVE.W  (A6),D0         ;Move current OP code into D0
00001176  0240 FF00                209      ANDI.W  #$FF00,D0       ;Mask relevant bits to D0
0000117A  B07C 0800                210      CMP.W   #$0800,D0       ;Compare the appropriate masked bits
0000117E  6600 000C                211      BNE     check_OP_D_BCLR ;Branch to next comparison if not equal
00001182  4EB9 00001218            212      JSR     PRINT_OP_S_BCLR ;Print the OP code if equal
00001188  6000 001E                213      BRA     CG0_C           ;Finish routine
0000118C                           214  check_OP_D_BCLR:
0000118C  3016                     215      MOVE.W (A6),D0          ;Move current OP code into D0
0000118E  0240 0180                216      ANDI.W #%0000000110000000,D0 ;Do a direct binary bitmask to see which bits are needed
00001192  B07C 0180                217      CMP.W  #%0000000110000000,D0 ;Compare the expected binary value
00001196  6600 000C                218      BNE CG0_F                ;If not equal this must be an invalid OP code
0000119A  4EB9 00001226            219      JSR PRINT_OP_D_BCLR      ;Print the OP code if equal
000011A0  6000 0006                220      BRA CG0_C                ;Finish routine
000011A4                           221  CG0_F:                       ;Checks have been finished, invalid OP code has been found
000011A4  6000 0046                222      BRA INVALID_OP    
000011A8                           223  CG0_C:                       ;Checks have been finished,a valid OP code has been found
000011A8                           224  move_Last_6_Bits_To_EA:      ;Move last 6 bits from EA field to relevant registers
000011A8  3016                     225      MOVE.W (A6),D0           ;Move current OP code into D0
000011AA  323C 000A                226      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
000011AE  E368                     227      LSL.W   D1,D0            ;Truncate to find the last 6 bits
000011B0  E268                     228      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
000011B2  3E00                     229      MOVE.W D0,D7             ;Move last 6 bits into D7
000011B4  323C 0003                230      MOVE.W  #3,D1
000011B8  E26F                     231      LSR.W   D1,D7
000011BA  3C07                     232      MOVE.W  D7,D6             ;Move the 'upper' 3 bits into D6
000011BC  323C 000C                233      MOVE.W  #12,D1
000011C0  E368                     234      LSL.W   D1,D0
000011C2  E268                     235      LSR.W   D1,D0
000011C4  3E00                     236      MOVE.W  D0,D7              ;Move the 'lower' 3 bits into D7
000011C6  4CDF 0003                237      MOVEM.L (SP)+,D0-D1 ; Restore registers
000011CA  4E75                     238      RTS
000011CC                           239  * GROUP_1                      
000011CC                           240  ********************************************************************************
000011CC                           241  * MOVE.B: $1, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000011CC                           242  ********************************************************************************
000011CC                           243  C_GROUP_1:
000011CC                           244  
000011CC                           245  check_OP_MOVE_B:
000011CC  B03C 0001                246      CMP.B #$01,D0
000011D0  6600 001A                247      BNE INVALID_OP
000011D4  6700 005E                248      BEQ PRINT_OP_MOVEB
000011D8  4E75                     249      RTS
000011DA                           250  * GROUP_2
000011DA                           251  ********************************************************************************
000011DA                           252  * MOVEA.L: $2, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
000011DA                           253  * MOVE.L: $2, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000011DA                           254  ********************************************************************************
000011DA                           255  C_GROUP_2:
000011DA                           256  
000011DA                           257  check_OP_MOVEA_L:
000011DA                           258  
000011DA                           259  check_OP_MOVE_L:
000011DA                           260  
000011DA                           261  * GROUP_3
000011DA                           262  ********************************************************************************
000011DA                           263  * MOVEA.W: $3, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
000011DA                           264  * MOVE.W: $3, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000011DA                           265  ********************************************************************************
000011DA                           266  C_GROUP_3:
000011DA                           267  
000011DA                           268  check_OP_MOVEA_W:
000011DA                           269  
000011DA                           270  check_OP_MOVEB_W:
000011DA                           271  
000011DA                           272  * GROUP_4
000011DA                           273  ********************************************************************************
000011DA                           274  * LEA: $4, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
000011DA                           275  * JSR: $4E, 7-6 %10, 5-3 EA Mode, 2-0 EA Reg 
000011DA                           276  * RTS: $4E75
000011DA                           277  * NEG: $44, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
000011DA                           278  * MOVEM: $4, 11 %1, 10 %D, 9-7 %001, 6 S, 5-3 EA Mode, 2-0 EA Reg
000011DA                           279  * %D = 0 , Register to Memory, 1 Memory to Register
000011DA                           280  ********************************************************************************
000011DA                           281  C_GROUP_4:
000011DA                           282  
000011DA                           283  check_OP_LEA:
000011DA                           284  
000011DA                           285  check_OP_JSR:
000011DA                           286  
000011DA                           287  check_OP_RTS:
000011DA                           288  
000011DA                           289  check_OP_NEG:
000011DA                           290  
000011DA                           291  * GROUP_5
000011DA                           292  ********************************************************************************
000011DA                           293  * SUBQ: $5, 11-9 DATA, 8 %1, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
000011DA                           294  ********************************************************************************
000011DA                           295  C_GROUP_5:
000011DA                           296  
000011DA                           297  check_OP_SUBQ:
000011DA                           298  
000011DA                           299  * GROUP_6
000011DA                           300  ********************************************************************************
000011DA                           301  * BRA: $60, 7-0 8-Bit Displacement
000011DA                           302  * Bcc: $6, 11-8 Condition, 7-0 8-Bit Displacement
000011DA                           303  *   Branch: <Condition>   
000011DA                           304  *   BCS: %0101          
000011DA                           305  *   BGE: %1100      
000011DA                           306  *   BLT: %1101  
000011DA                           307  *   BVC: %1000
000011DA                           308  
000011DA                           309  ********************************************************************************
000011DA                           310  C_GROUP_6:
000011DA                           311  
000011DA                           312  check_OP_BRA:
000011DA                           313  
000011DA                           314  check_OP_BCS:
000011DA                           315  
000011DA                           316  check_OP_BGE:
000011DA                           317  
000011DA                           318  check_OP_BLT:
000011DA                           319  
000011DA                           320  check_OP_BVC:
000011DA                           321  
000011DA                           322  *GROUP_7
000011DA                           323  ********************************************************************************
000011DA                           324  * Currently no OP codes here are supported.
000011DA                           325  ********************************************************************************
000011DA                           326  C_GROUP_7:
000011DA  4EB9 000011EC            327      JSR INVALID_OP
000011E0                           328  
000011E0                           329  * GROUP_8
000011E0                           330  ********************************************************************************
000011E0                           331  * DIVS: $8, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
000011E0                           332  * OR: $80, 7-6 Size, 5-3 EA Mode, 2-0 EA Register
000011E0                           333  ********************************************************************************
000011E0                           334  C_GROUP_8:
000011E0                           335  
000011E0                           336  check_OP_DIVS:
000011E0                           337  
000011E0                           338  check_OP_OR:
000011E0                           339  
000011E0                           340  * GROUP_9                      
000011E0                           341  ********************************************************************************
000011E0                           342  * SUB: $9, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
000011E0                           343  ********************************************************************************
000011E0                           344  C_GROUP_9:
000011E0                           345  
000011E0                           346  check_OP_SUB:
000011E0                           347  
000011E0                           348  *GROUP_A
000011E0                           349  ********************************************************************************
000011E0                           350  * Currently no OP codes here are supported.
000011E0                           351  ********************************************************************************
000011E0                           352  C_GROUP_A:
000011E0  4EB9 000011EC            353      JSR INVALID_OP
000011E6                           354  
000011E6                           355  * GROUP_B                     
000011E6                           356  ********************************************************************************
000011E6                           357  * EOR: $B, 11-9 Reg, 8 %1, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
000011E6                           358  * CMP: $B, 11-9 Reg, 8 %0, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
000011E6                           359  * The specific bit difference is listed 
000011E6                           360  ********************************************************************************
000011E6                           361  C_GROUP_B:
000011E6                           362  
000011E6                           363  check_OP_EOR:
000011E6                           364  
000011E6                           365  check_OP_CMP:
000011E6                           366  
000011E6                           367  * GROUP_C                     
000011E6                           368  ********************************************************************************
000011E6                           369  * MULS: $C, 11-8 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
000011E6                           370  ********************************************************************************
000011E6                           371  C_GROUP_C:
000011E6                           372  
000011E6                           373  check_OP_MULS:
000011E6                           374  
000011E6                           375  * GROUP_D                     
000011E6                           376  ********************************************************************************
000011E6                           377  * ADD: $D, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
000011E6                           378  * ADDA: $D, 11- 9 Reg, 8-6 OPMODE, 7-6 %11, 5-3 EA Mode, 2-0 EA Reg
000011E6                           379  * The specific bit difference is listed out in the OPMODE field.
000011E6                           380  ********************************************************************************
000011E6                           381  C_GROUP_D:
000011E6                           382  
000011E6                           383  check_OP_ADDA:
000011E6                           384  
000011E6                           385  check_OP_ADD:
000011E6                           386  
000011E6                           387  * GROUP_E                     
000011E6                           388  ********************************************************************************
000011E6                           389  * LSR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
000011E6                           390  * LSL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
000011E6                           391  * ASR: $E, $0, 8 %0, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
000011E6                           392  * ASL: $E, $0, 8 %1, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
000011E6                           393  * ROR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
000011E6                           394  * ROL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
000011E6                           395  * Count/Reg for LSR/LSL refers to shift count, where 0 = shift count of 8, 1-7 
000011E6                           396  * refers to the respective value when i/r = 0. If i/r = 1, data register in the 
000011E6                           397  * Count/Reg field specifies the shift count.  
000011E6                           398  * 
000011E6                           399  * Count/Reg for ROR/ROL specifies rotate count instead of shift count.
000011E6                           400  ********************************************************************************
000011E6                           401  C_GROUP_E:
000011E6                           402  
000011E6                           403  check_OP_LSR:
000011E6                           404  
000011E6                           405  check_OP_LSL:
000011E6                           406  
000011E6                           407  check_OP_ASL:
000011E6                           408  
000011E6                           409  check_OP_ASR:
000011E6                           410  
000011E6                           411  check_OP_ROL:
000011E6                           412  
000011E6                           413  check_OP_ROR:
000011E6                           414  
000011E6                           415  * GROUP_F
000011E6                           416  ********************************************************************************
000011E6                           417  * Currently no OP codes here are supported.
000011E6                           418  ********************************************************************************
000011E6                           419  C_GROUP_F:
000011E6  4EB9 000011EC            420      JSR INVALID_OP
000011EC                           421      
000011EC                           422  * INVALID_OP                     
000011EC                           423  ********************************************************************************
000011EC                           424  * Any value that is not covered in the above groups would be considered invalid. 
000011EC                           425  * The following values in the first nibble would also indicate that the 
000011EC                           426  * operand codes is already invalid: $7, $A, $F.
000011EC                           427  * For unsupported OP codes, display DATA $WXYZ   
000011EC                           428  * THIS WILL NEED TO BE CHANGED TO DISPLAY: 1000 DATA $WXYZ IN THE FUTURE
000011EC                           429  ********************************************************************************
000011EC                           430  INVALID_OP:  ; Prints DATA for invalid op
000011EC  43F9 0000124A            431      LEA P_INVALID_OP,A1
000011F2  103C 000D                432      MOVE.B #13,D0
000011F6  4E4F                     433      TRAP #15
000011F8  FFFF FFFF                434      SIMHALT
000011FC                           435      
000011FC                           436      
000011FC                           437  ********************** PRINTING ROUTINES ****************************************
000011FC                           438  PRINT_OP_ORI:
000011FC  43F9 00001258            439      LEA P_OP_ORI,A1
00001202  4EB9 00001242            440      JSR PRINT_OP
00001208  4E75                     441      RTS
0000120A                           442  PRINT_OP_CMPI:
0000120A  43F9 0000125C            443      LEA P_OP_CMPI,A1
00001210  4EB9 00001242            444      JSR PRINT_OP
00001216  4E75                     445      RTS
00001218                           446  PRINT_OP_S_BCLR:
00001218  43F9 00001261            447      LEA P_OP_S_BCLR,A1
0000121E  4EB9 00001242            448      JSR PRINT_OP
00001224  4E75                     449      RTS
00001226                           450  PRINT_OP_D_BCLR:
00001226  43F9 00001266            451      LEA P_OP_D_BCLR,A1
0000122C  4EB9 00001242            452      JSR PRINT_OP
00001232  4E75                     453      RTS    
00001234                           454  PRINT_OP_MOVEB:
00001234  43F9 0000126B            455      LEA P_OP_MOVEB,A1
0000123A  4EB9 00001242            456      JSR PRINT_OP
00001240  4E75                     457      RTS
00001242                           458  PRINT_OP:   ;Prints current op code byte
00001242  103C 000D                459      MOVE.B #13,D0
00001246  4E4F                     460      TRAP #15
00001248  4E75                     461      RTS
0000124A                           462  ******************* END OF PRINTING ROUTINES ***********************************
0000124A                           463  
0000124A                           464  ******************* END OF JMP LABELS ******************************************
0000124A                           465  
0000124A                           466  ******************* DATA CONSTANT PRINTS ***************************************
0000124A                           467  * Formatting is as follows: P_OP_<OPCODE>, where P = Print, OP = Operation,
0000124A                           468  * <OPCODE> is any valid operand
0000124A                           469  
0000124A= 44 41 54 41 00           470  P_INVALID_OP    DC.B    'DATA',0
0000124F= 46 6F 75 6E 64 20 ...    471  OP_FOUND        DC.B    'Found OP',0 ; this should be taken out later
00001258= 4F 52 49 00              472  P_OP_ORI        DC.B    'ORI',0
0000125C= 43 4D 50 49 00           473  P_OP_CMPI       DC.B    'CMPI',0
00001261= 42 43 4C 52 00           474  P_OP_S_BCLR       DC.B    'BCLR',0
00001266= 42 43 4C 52 00           475  P_OP_D_BCLR       DC.B    'BCLR',0
0000126B= 4D 4F 56 45 2E 42 00     476  P_OP_MOVEB      DC.B    'MOVE.B',0
00001272= 4D 4F 56 45 41 2E ...    477  P_OP_MOVEA_L    DC.B    'MOVEA.L',0
0000127A= 4D 4F 56 45 2E 4C 00     478  P_OP_MOVE_L     DC.B    'MOVE.L',0
00001281= 4D 4F 56 45 41 2E ...    479  P_OP_MOVEA_W    DC.B    'MOVEA.W',0
00001289= 4D 4F 56 45 2E 57 00     480  P_OP_MOVE_W     DC.B    'MOVE.W',0
00001290= 4C 45 41 00              481  P_OP_LEA        DC.B    'LEA',0
00001294= 4A 53 52 00              482  P_OP_JSR        DC.B    'JSR',0
00001298= 52 54 53 00              483  P_OP_RTS        DC.B    'RTS',0
0000129C= 4E 45 47 00              484  P_OP_NEG        DC.B    'NEG',0
000012A0= 53 55 42 51 00           485  P_OP_SUBQ       DC.B    'SUBQ',0
000012A5= 42 52 41 00              486  P_OP_BRA        DC.B    'BRA',0
000012A9= 42 43 53 00              487  P_OP_BCS        DC.B    'BCS',0
000012AD= 42 47 45 00              488  P_OP_BGE        DC.B    'BGE',0
000012B1= 42 4C 54 00              489  P_OP_BLT        DC.B    'BLT',0
000012B5= 42 56 43 00              490  P_OP_BVC        DC.B    'BVC',0
000012B9= 44 49 56 53 00           491  P_OP_DIVS       DC.B    'DIVS',0
000012BE= 4F 52 00                 492  P_OP_OR         DC.B    'OR',0
000012C1= 53 55 42 00              493  P_OP_SUB        DC.B    'SUB',0
000012C5= 45 4F 52 00              494  P_OP_EOR        DC.B    'EOR',0
000012C9= 43 4D 50 00              495  P_OP_CMP        DC.B    'CMP',0
000012CD= 4D 55 4C 53 00           496  P_OP_MULS       DC.B    'MULS',0
000012D2= 41 44 44 41 00           497  P_OP_ADDA       DC.B    'ADDA',0
000012D7= 41 44 44 00              498  P_OP_ADD        DC.B    'ADD',0
000012DB= 4C 53 52 00              499  P_OP_LSR        DC.B    'LSR',0
000012DF= 4C 53 4C 00              500  P_OP_LSL        DC.B    'LSL',0
000012E3= 41 53 52 00              501  P_OP_ASR        DC.B    'ASR',0
000012E7= 41 53 4C 00              502  P_OP_ASL        DC.B    'ASL',0
000012EB= 52 4F 52 00              503  P_OP_ROR        DC.B    'ROR',0
000012EF= 52 4F 4C 00              504  P_OP_ROL        DC.B    'ROL',0
000012F3                           505  ***************** END OF DATA CONSTANT PRINTS ***********************************
000012F3                           506      END START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CG0_C               11A8
CG0_F               11A4
CHECK_OP_ADD        11E6
CHECK_OP_ADDA       11E6
CHECK_OP_ASL        11E6
CHECK_OP_ASR        11E6
CHECK_OP_BCS        11DA
CHECK_OP_BGE        11DA
CHECK_OP_BLT        11DA
CHECK_OP_BRA        11DA
CHECK_OP_BVC        11DA
CHECK_OP_CMP        11E6
CHECK_OP_CMPI       115C
CHECK_OP_DIVS       11E0
CHECK_OP_D_BCLR     118C
CHECK_OP_EOR        11E6
CHECK_OP_JSR        11DA
CHECK_OP_LEA        11DA
CHECK_OP_LSL        11E6
CHECK_OP_LSR        11E6
CHECK_OP_MOVEA_L    11DA
CHECK_OP_MOVEA_W    11DA
CHECK_OP_MOVEB_W    11DA
CHECK_OP_MOVE_B     11CC
CHECK_OP_MOVE_L     11DA
CHECK_OP_MULS       11E6
CHECK_OP_NEG        11DA
CHECK_OP_OR         11E0
CHECK_OP_ORI        1144
CHECK_OP_ROL        11E6
CHECK_OP_ROR        11E6
CHECK_OP_RTS        11DA
CHECK_OP_SUB        11E0
CHECK_OP_SUBQ       11DA
CHECK_OP_S_BCLR     1174
CUR_OP_CODE         2000
C_GROUP_0           1140
C_GROUP_1           11CC
C_GROUP_2           11DA
C_GROUP_3           11DA
C_GROUP_4           11DA
C_GROUP_5           11DA
C_GROUP_6           11DA
C_GROUP_7           11DA
C_GROUP_8           11E0
C_GROUP_9           11E0
C_GROUP_A           11E0
C_GROUP_B           11E6
C_GROUP_C           11E6
C_GROUP_D           11E6
C_GROUP_E           11E6
C_GROUP_F           11E6
GROUP_0             101E
GROUP_1             1030
GROUP_2             1042
GROUP_3             1054
GROUP_4             1066
GROUP_5             1078
GROUP_6             108A
GROUP_7             109C
GROUP_8             10AE
GROUP_9             10C0
GROUP_A             10D2
GROUP_B             10E4
GROUP_C             10F6
GROUP_D             1108
GROUP_E             111A
GROUP_F             112C
INVALID_OP          11EC
MOVE_LAST_6_BITS_TO_EA  11A8
OP_FOUND            124F
OP_JSR_DONE         113A
OP_JSR_ROUTINE      1016
PRINT_OP            1242
PRINT_OP_CMPI       120A
PRINT_OP_D_BCLR     1226
PRINT_OP_MOVEB      1234
PRINT_OP_ORI        11FC
PRINT_OP_S_BCLR     1218
P_INVALID_OP        124A
P_OP_ADD            12D7
P_OP_ADDA           12D2
P_OP_ASL            12E7
P_OP_ASR            12E3
P_OP_BCS            12A9
P_OP_BGE            12AD
P_OP_BLT            12B1
P_OP_BRA            12A5
P_OP_BVC            12B5
P_OP_CMP            12C9
P_OP_CMPI           125C
P_OP_DIVS           12B9
P_OP_D_BCLR         1266
P_OP_EOR            12C5
P_OP_JSR            1294
P_OP_LEA            1290
P_OP_LSL            12DF
P_OP_LSR            12DB
P_OP_MOVEA_L        1272
P_OP_MOVEA_W        1281
P_OP_MOVEB          126B
P_OP_MOVE_L         127A
P_OP_MOVE_W         1289
P_OP_MULS           12CD
P_OP_NEG            129C
P_OP_OR             12BE
P_OP_ORI            1258
P_OP_ROL            12EF
P_OP_ROR            12EB
P_OP_RTS            1298
P_OP_SUB            12C1
P_OP_SUBQ           12A0
P_OP_S_BCLR         1261
START               1000
