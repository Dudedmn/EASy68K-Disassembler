000010A4 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/17/2019 12:01:57 AM

00000000                             1  *--------------------------------------------------------------------------
00000000                             2  * Title      : Disassembler 
00000000                             3  * Written by : TEAM REEE Denny, Daniel, Fahad
00000000                             4  * Date       : 3/16/2019 
00000000                             5  * 
00000000                             6  * 
00000000                             7  * Description: This code contains a method for you to use
00000000                             8  * with your Disassembler project IO, and a short demo of 
00000000                             9  * how to call this method in the body of the "START" code.
00000000                            10  *---------------------------------------------------------------------------
00001000                            11      ORG    $1000    
00001000                            12  *---------------------------------------------------------------------------
00001000                            13  
00001000                            14  *declare the variable startaddr with size 1 long
00001000                            15  G_BUFFER        DS.B    80  ;Used to print out the needed letters to the buffer
00001050                            16  B_BUFFER        DS.B    80  ;Bad buffer used to load bad data
000010A0                            17  CUR_OP_CODE     DS.W    1   ;Used to determine the current 4 hex OP code
000010A2                            18  IS_VALID        DS.B    1   ;Validity bit to check if a code is valid or not
000010A3                            19                              ;1 = valid, 0 = invalid
000010A3                            20                              
000010A3                            21  START:
000010A3                            22  
000010A4  43F9 00001430             23      LEA MAIN_CONSOLE, A1
000010AA  4EB9 000012E4             24      JSR TrapTask13
000010B0                            25  
000010B0                            26      
000010B0                            27      
000010B0                            28      ******************************************
000010B0                            29      **
000010B0                            30      **     ___         ___        /  __  
000010B0                            31      **    |__  | |    |__     |  /  /  \  
000010B0                            32      **    |    | |___ |___    | /   \__/ 
000010B0                            33      **                           
000010B0                            34      **
000010B0                            35      ** This is the begninning of the code for reading from files
000010B0                            36      ******************************************
000010B0                            37  
000010B0                            38  
000010B0                            39      ;Open config.cfg (trap subtasks 50-59) (this is an IO responsibility if 3 team members)
000010B0                            40      
000010B0                            41  
000010B0                            42                   ; perform task
000010B0                            43  ; Attempt to open file for input
000010B0  43F9 000016F6             44          lea     fileName,A1             ; name of file to open
000010B6  103C 0033                 45          move.b  #51,D0                  ; trap task #51, open existing file
000010BA  4E4F                      46          trap    #15                     ; perform task
000010BC  23C1 0000174E             47          move.l  D1,fileID               ; save file ID
000010C2                            48  
000010C2                            49  ; Read string from file
000010C2  43F9 00001738             50          lea     string,A1               ; location of string buffer
000010C8  2239 0000174E             51          move.l  fileID,D1               ; file ID of file to read from
000010CE  4282                      52          clr.l   D2
000010D0  343C 0014                 53          move.w  #SIZE,D2                ; number of bytes to read
000010D4  103C 0035                 54          move.b  #53,D0                  ; trap task #53, read from file
000010D8  4E4F                      55          trap    #15                     ; perform task
000010DA                            56  ; Close file when finished
000010DA  103C 0038                 57          move.b  #56,D0                  ; trap task #56, close file, D1 contains fileID
000010DE  4E4F                      58          trap    #15                     ; perform task
000010E0                            59  
000010E0                            60          
000010E0                            61  
000010E0                            62      ;load start and end address as longs
000010E0                            63      ; Start Address is in A5     
000010E0  43F9 00001738             64      LEA string, A1
000010E6  4EB9 0000137A             65      JSR AsciiToHex     ;  example of how to convert ascii to hex
000010EC  2A47                      66      MOVE.L D7, A5
000010EE                            67      
000010EE                            68      ; End Address is in A6
000010EE  5489                      69      ADDA.L #2, A1
000010F0  4EB9 0000137A             70      JSR AsciiToHex
000010F6  2C47                      71      MOVE.L D7, A6
000010F8                            72      
000010F8                            73      
000010F8                            74      ;loop from start to end, printing out the instruction or DATA if not recognized 
000010F8                            75      ;   use my method below (printStringToFileAndConsole) to print out the individual instruction (or DATA)
000010F8                            76      
000010F8                            77      ;TODO : validate start and ending address 
000010F8                            78      
000010F8                            79  Validate_Start_Address
000010F8  200D                      80      MOVE.L A5, D0
000010FA                            81  *----------------------------------------------------------------------------------
000010FA                            82  * Method Name: ValidatePositiveAddress
000010FA                            83  * Description: Checks if the start address is positve it then branches
000010FA                            84  *              to validate if the address in the config.cfg file is even
000010FA                            85  *
000010FA                            86  *  Preconditions & Input of a start address that is even
000010FA                            87  *       A1 (input) points to a memory buffer holding 8 ascii chars (not null-terminated) 
000010FA                            88  *       This function calls another function (strip_ascii)
000010FA                            89  *
000010FA                            90  *  Postconditions & Output
000010FA                            91  *   
000010FA                            92  *----------------------------------------------------------------------------------
000010FA                            93  ValidatePositiveAddress
000010FA  200D                      94      MOVE.L A5, D0
000010FC  0280 80000000             95      ANDI.L #$80000000, D0 * checking if the start address address is postive
00001102  B0BC 00000000             96      CMP.L #0, D0
00001108  6700 0034                 97      BEQ validate_even
0000110C                            98      
0000110C  43F9 00001752             99      LEA invalid_address_message, A1
00001112  103C 000E                100      MOVE.B #14, D0    
00001116  4E4F                     101      TRAP #15        
00001118                           102      
00001118                           103      
00001118  6000 0138                104      BRA DONE
0000111C                           105  
0000111C                           106  validate_end_pos
0000111C  200E                     107      MOVE.L A6, D0
0000111E  0280 80000000            108      ANDI.L #$80000000, D0 * checking if the end address address is postive
00001124  B0BC 00000000            109      CMP.L #0, D0
0000112A  6700 0012                110      BEQ validate_even
0000112E                           111      
0000112E  43F9 00001752            112      LEA invalid_address_message, A1
00001134  103C 000E                113      MOVE.B #14, D0    
00001138  4E4F                     114      TRAP #15        
0000113A                           115      
0000113A                           116      
0000113A  6000 0116                117      BRA DONE
0000113E                           118      
0000113E                           119      
0000113E                           120  validate_even
0000113E  200D                     121      MOVE.L A5, D0     *MOVE STARTING ADDRESS TO D0
00001140  0280 00000001            122      ANDI.L #$00000001, D0            
00001146  B0BC 00000000            123      CMP.L #0, D0
0000114C  6700 0012                124      BEQ mainloop
00001150                           125      *handle odd addresses        
00001150                           126      
00001150  43F9 00001752            127      LEA invalid_address_message, A1
00001156  103C 000E                128      MOVE.B #14, D0    
0000115A  4E4F                     129      TRAP #15        
0000115C                           130              
0000115C  6000 00F4                131      BRA DONE 
00001160                           132              
00001160                           133  
00001160                           134  
00001160                           135              
00001160  49F8 1000                136  mainloop    LEA G_BUFFER,A4
00001164                           137      
00001164  BDCD                     138              CMPA.L A5, A6
00001166  6D00 00EA                139              BLT DONE
0000116A                           140              
0000116A                           141              *clear both buffers 
0000116A  23FC 00001000 000012B8   142              MOVE.L #G_BUFFER, Arg_ClearBuffer_Buffer  
00001174  4EB9 000012C0            143              JSR ClearBuffer
0000117A                           144              
0000117A  23FC 00001050 000012B8   145              MOVE.L #B_BUFFER, Arg_ClearBuffer_Buffer  
00001184  4EB9 000012C0            146              JSR ClearBuffer
0000118A                           147              
0000118A                           148              * Add address to both buffers
0000118A                           149              
0000118A  23CD 000013C2            150              MOVE.L A5, Arg_NumToHexStr_Num  * the current address is stored to A5, so we need to move to the arg of converting from NumToHex
00001190  13FC 0008 000013C6       151              MOVE.B #8, Arg_NumToHexStr_Length    *this specifies the number of characters that needs to be convorted.
00001198  4EB9 000013D0            152              JSR NumToHexStr 
0000119E                           153              
0000119E  23FC 000013C7 00001256   154              MOVE.L #Ret_NumToHexStr_Str, Arg_AddStrToBuffer_String
000011A8  23FC 00001000 0000125A   155              MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer  * printing the address to the good buffer
000011B2  4EB9 00001264            156              JSR AddStrToBuffer
000011B8                           157      
000011B8                           158             
000011B8                           159      
000011B8  31DD 10A0                160              MOVE.W (A5)+, CUR_OP_CODE * read the current opcode
000011BC                           161              
000011BC                           162              
000011BC                           163               
000011BC  4EF9 00001772            164              JMP OP_JSR_Routine
000011C2                           165  
000011C2                           166  *********************************
000011C2                           167  *Checks if its valid print or invalid
000011C2                           168  * @pre checks invalid
000011C2                           169  * @post Branches to the respective branch
000011C2                           170  ************************************
000011C2                           171  check_print
000011C2  0C38 0001 10A2           172              CMP.B #1,IS_VALID
000011C8  6700 0006                173              BEQ   print_instruction
000011CC  6600 0012                174              BNE   print_data
000011D0                           175              
000011D0                           176  print_instruction  
000011D0  6600 000E                177              BNE print_data
000011D4                           178              *print the opcode if valid
000011D4  43F8 1000                179              LEA G_BUFFER,A1
000011D8  4EB9 000012E4            180              JSR TrapTask13
000011DE  6080                     181              BRA mainloop
000011E0                           182   
000011E0                           183              *otherwise print data
000011E0                           184  print_data  
000011E0  23CD 000013C2            185              MOVE.L A5, Arg_NumToHexStr_Num  * the current address is stored to A5, so we need to move to the arg of converting from NumToHex
000011E6  13FC 0008 000013C6       186              MOVE.B #8, Arg_NumToHexStr_Length    *this specifies the number of characters that needs to be convorted.
000011EE  4EB9 000013D0            187              JSR NumToHexStr 
000011F4  23FC 000013C7 00001256   188              MOVE.L #Ret_NumToHexStr_Str, Arg_AddStrToBuffer_String 
000011FE                           189              
000011FE  23FC 00001050 0000125A   190              MOVE.L #B_BUFFER, Arg_AddStrToBuffer_Buffer
00001208  4EB9 00001264            191              JSR AddStrToBuffer
0000120E                           192              * Add bad data to bad buffer
0000120E  23FC 00002734 00001256   193              MOVE.L #P_INVALID_OP, Arg_AddStrToBuffer_String *printing data to the bad buffer
00001218  4EB9 00001264            194              JSR AddStrToBuffer
0000121E                           195              
0000121E  33F8 10A0 000013C2       196              MOVE.W CUR_OP_CODE, Arg_NumToHexStr_Num  * the current address is stored to A5, so we need to move to the arg of converting from NumToHex
00001226  13FC 0008 000013C6       197              MOVE.B #8, Arg_NumToHexStr_Length    *this specifies the number of characters that needs to be convorted.
0000122E  4EB9 000013D0            198              JSR NumToHexStr 
00001234                           199              
00001234  23FC 000013C7 00001256   200              MOVE.L #Ret_NumToHexStr_Str, Arg_AddStrToBuffer_String
0000123E  4EB9 00001264            201              JSR AddStrToBuffer
00001244                           202              
00001244  43F8 1050                203              LEA B_BUFFER,A1
00001248  4EB9 000012E4            204              JSR TrapTask13          
0000124E  6000 FF10                205              BRA mainLoop
00001252                           206  
00001252                           207  
00001252                           208  DONE            
00001252  FFFF FFFF                209              SIMHALT 
00001256                           210              
00001256                           211   
00001256                           212  **
00001256                           213  * AddStrToBuffer
00001256                           214  **
00001256                           215  * Adds the given NULL-terminated string to the specified buffer.
00001256                           216  *
00001256                           217  * Default buffer length is 80 characters, but can be modified in the argument
00001256                           218  * variables.
00001256                           219  *
00001256                           220  * If the buffer length is exceeded, either due to lack of a NULL character or
00001256                           221  * an incorrectly specified length, 1 is returned. Otherwise, 0 is returned to
00001256                           222  * indicate success.
00001256                           223  *
00001256                           224  **
00001256                           225  * @param Arg_AddStrToBuffer_String              Pointer to string
00001256                           226  * @param Arg_AddStrToBuffer_Buffer              Pointer to buffer
00001256                           227  * @param Arg_AddStrToBuffer_BufferLength        Length of buffer (default 80 chars)
00001256                           228  * @return Ret_AddStrToBuffer_Success            0 if successful, 1 otherwise.
00001256                           229  * @branch _AddStrToBuffer_FindBufferNullLoop    Loop to find NULL in buffer
00001256                           230  * @branch _AddStrToBuffer_AddLoop               Loop to add string to buffer
00001256                           231  * @branch _AddStrToBuffer_Success               Branch when string successfully added
00001256                           232  * @branch _AddStrToBuffer_StringLengthExceeded  Branch when length exceeded (either string or buffer)
00001256                           233  * @branch _AddStrToBuffer_End                   End of subroutine
00001256                           234  **
00001256                           235  Arg_AddStrToBuffer_String           DS.L    1
0000125A                           236  Arg_AddStrToBuffer_Buffer           DS.L    1
0000125E= 00000050                 237  Arg_AddStrToBuffer_BufferLength     DC.L    80
00001262                           238  Ret_AddStrToBuffer_Success          DS.B    1
00001263                           239  
00001264                           240  AddStrToBuffer:                     DS.W    0
00001264  48E7 C0C0                241      MOVEM.L     D0-D1/A0-A1, -(SP)                  * Backup registers to stack
00001268                           242      
00001268  2078 1256                243      MOVE.L      Arg_AddStrToBuffer_String, A0       * Load string pointer
0000126C  2278 125A                244      MOVE.L      Arg_AddStrToBuffer_Buffer, A1       * Load buffer pointer
00001270  2038 125E                245      MOVE.L      Arg_AddStrToBuffer_BufferLength, D0 * Load buffer length
00001274  4278 1262                246      CLR.W       Ret_AddStrToBuffer_Success          * Clear success bit
00001278  4281                     247      CLR.L       D1                                  * Clear loop counter
0000127A                           248  
0000127A                           249  _AddStrToBuffer_BufferLoop
0000127A  0C11 0000                250      CMPI.B      #0, (A1)                            * If buffer char is NULL
0000127E  6700 000E                251      BEQ         _AddStrToBuffer_AddLoop             * Start adding string to bufer
00001282                           252      
00001282  B280                     253      CMP.L       D0, D1                              * If counter >= max length
00001284  6C00 0026                254      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
00001288                           255      
00001288  5289                     256      ADDQ.L      #1, A1                              * Go to next character
0000128A  5201                     257      ADDQ.B      #1, D1                              * Increment counter
0000128C  60EC                     258      BRA         _AddStrToBuffer_BufferLoop          * Loop back
0000128E                           259      
0000128E                           260  _AddStrToBuffer_AddLoop
0000128E  0C10 0000                261      CMPI.B      #0, (A0)                            * If string char is NULL
00001292  6700 0010                262      BEQ         _AddStrToBuffer_Success             * String successfully added
00001296                           263      
00001296  B200                     264      CMP.B       D0, D1                              * If counter >= max length
00001298  6C00 0012                265      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
0000129C                           266      
0000129C  12D8                     267      MOVE.B      (A0)+, (A1)+                        * Move string char to buffer char
0000129E  5201                     268      ADDQ.B      #1, D1                              * Increment counter
000012A0  524C                     269      ADDQ.W      #1, A4
000012A2  60EA                     270      BRA         _AddStrToBuffer_AddLoop             * Loop back
000012A4                           271  
000012A4                           272  _AddStrToBuffer_Success
000012A4  12BC 0000                273      MOVE.B      #0, (A1)                            * Add NULL to end of string
000012A8  6000 0008                274      BRA         _AddStrToBuffer_End                 * Finish subroutine
000012AC                           275  
000012AC                           276  _AddStrToBuffer_LengthExceeded
000012AC  31FC 0001 1262           277      MOVE.W      #1, Ret_AddStrToBuffer_Success      * Invalidate success bit
000012B2                           278  
000012B2                           279  _AddStrToBuffer_End
000012B2  4CDF 0303                280      MOVEM.L     (SP)+, D0-D1/A0-A1                  * Restore registers from stack
000012B6  4E75                     281      RTS                  
000012B8                           282   
000012B8                           283   
000012B8                           284   
000012B8                           285  **************************************************************************
000012B8                           286  * ClearBuffer
000012B8                           287  ***********************************************************************
000012B8                           288  * Clears the given buffer by filling it with NULL. By default it will fill 80
000012B8                           289  * bytes from the buffer pointer with NULL, so make sure the buffer reserves
000012B8                           290  * that many bytes. The default can be changed.
000012B8                           291  *
000012B8                           292  **
000012B8                           293  * @param Arg_ClearBuffer_Buffer     Pointer to buffer
000012B8                           294  * @param Arg_ClearBuffer_Length     Byte length of buffer, default 80
000012B8                           295  * @branch _ClearBuffer_Loop         Buffer loop
000012B8                           296  * @branch _ClearBuffer_End          Subroutine end
000012B8                           297  *****************************************************************************
000012B8                           298  Arg_ClearBuffer_Buffer  DS.L    1
000012BC= 00000050                 299  Arg_ClearBuffer_Length  DC.L    80
000012C0                           300  
000012C0                           301  ClearBuffer:            DS.W    0
000012C0  48E7 C080                302      MOVEM.L     D0-D1/A0, -(SP)             * Backup registers to stack
000012C4  2078 12B8                303      MOVEA.L     Arg_ClearBuffer_Buffer, A0  * Load buffer address
000012C8  2038 12BC                304      MOVE.L      Arg_ClearBuffer_Length, D0  * Load buffer length
000012CC  4281                     305      CLR.L       D1                          * Clear counter
000012CE                           306      
000012CE                           307  _ClearBuffer_Loop
000012CE  B280                     308      CMP.L       D0, D1                      * If counter >= length
000012D0  6C00 0008                309      BGE         _ClearBuffer_End            * Finish subroutine
000012D4                           310      
000012D4  4218                     311      CLR.B       (A0)+                       * Clear current character in buffer
000012D6  5241                     312      ADDQ        #1, D1                      * Increment counter
000012D8  60F4                     313      BRA         _ClearBuffer_Loop           * Loop back
000012DA                           314      
000012DA                           315  _ClearBuffer_End
000012DA  4CDF 0103                316      MOVEM.L     (SP)+, D0-D1/A0             * Restore registers from stack
000012DE  4E75                     317      RTS                                     * Exit subroutine
000012E0                           318  
000012E0                           319  
000012E0  FFFF FFFF                320      SIMHALT
000012E4                           321  
000012E4                           322  
000012E4                           323  
000012E4                           324  *********************************************************************************
000012E4                           325  * Method Name: TrapTask13
000012E4                           326  * Description: Creates a file if none exists, and appends bytes to that file
000012E4                           327  *   while also echoing the written bytes to the screen.  You shouldn't need to
000012E4                           328  *   change this code.
000012E4                           329  *
000012E4                           330  * Calling Convention: Callee-Saved 
000012E4                           331  *
000012E4                           332  * Preconditions & Method Input:
000012E4                           333  *   A1 points to the null-terminated buffer to write (newline will be added for you)
000012E4                           334  *
000012E4                           335  * Postconditions & Output:
000012E4                           336  *   ALL files that were previously open will be CLOSED (FileIDs will be invalid)
000012E4                           337  *   See 'Output.txt' in directory for the results, also piped to the console
000012E4                           338  *
000012E4                           339  *
000012E4                           340  *  A2 holds a pointer to null terminated string to write (input)
000012E4                           341  *  A3 points to the null-terminated file name
000012E4                           342  *  D3 holds the number of bytes already in the file to write
000012E4                           343  *
000012E4                           344  *  D5 holds number of bytes to write
000012E4                           345  ********************************************************************************
000012E4                           346  toSave REG D0-D5/A2-A3
000012E4                           347  TrapTask13:
000012E4                           348      *******************************************************************
000012E4                           349      * Method initialization, regsiter spilling, parameter saving, etc.
000012E4                           350      *******************************************************************
000012E4  48E7 FC30                351      MOVEM.L toSave, -(SP)   ;  Callee-Saved, so save and restore     
000012E8                           352        
000012E8  2449                     353      MOVEA.L A1, A2 ; save this buffer to write
000012EA  47F9 000016E2            354      LEA outFilename, A3  ; save this for later, too
000012F0                           355        
000012F0  303C 0032                356      move #50,d0   
000012F4  4E4F                     357      trap #15 ; close all files, suggested to begin any IO 
000012F6                           358      *******************************************************************
000012F6                           359      * End Method Init
000012F6                           360      *******************************************************************
000012F6                           361  
000012F6                           362      ******************************************************************************************
000012F6                           363      * Calculate the number of bytes to write by searching for the null in the target buffer A0
000012F6                           364      ******************************************************************************************
000012F6  4285                     365      CLR.L D5 *D5 is now the number of bytes to write
000012F8                           366  nullLoop:
000012F8  1019                     367      MOVE.B (A1)+, D0
000012FA  0C00 0000                368      CMPI.B #0,D0  * compare to null
000012FE  6700 0006                369      BEQ findNullLoopDone
00001302  5245                     370      ADDI.W #1, D5
00001304  60F2                     371      BRA nullLoop
00001306                           372      
00001306                           373  findNullLoopDone:
00001306  224B                     374      MOVEA.L A3, A1 * reset A1 so it points to the file to write to (to open, next)
00001308                           375      
00001308                           376      ;check if file exists, and open with task 51 if so, otherwise 52
00001308                           377      ;(precondition here is A1 points to the null-terminated filename )
00001308  103C 0033                378      MOVE.B #51, D0      ;open file (task 51 is existing, 52 is new)
0000130C  4E4F                     379      trap #15
0000130E                           380        
0000130E                           381      if.w D0 <NE> #0 then.s         ; if file error (404, not found)
00001314  103C 0034                382          MOVE.B #52, D0             ; open new file (52 is new)
00001318  4E4F                     383          trap #15
0000131A                           384      endi
0000131A                           385      
0000131A                           386      ********************************************************************************************************* 
0000131A                           387      * Seek to END of FILE by counting the number of bytes, closing, reopening, then seeking.
0000131A                           388      *    (first, count number of bytes already in the file to obtain seek position)
0000131A                           389      *********************************************************************************************************
0000131A  4283                     390      Clr.L D3   ;TODO: reg save, D3 is now our count of bytes read
0000131C  7401                     391      MOVE.L #1, D2 ; read one byte at a time
0000131E  43F9 000016ED            392      LEA byteRead, A1
00001324                           393      
00001324                           394  countLoop:
00001324  103C 0035                395      MOVE.B #53, D0 ; try to read one byte (TODO: move out of loop)
00001328  4E4F                     396      trap #15
0000132A                           397      
0000132A  0C40 0001                398      CMPI.W #1,D0  ;1 == EOF
0000132E  6700 0006                399      BEQ countDone
00001332  5243                     400      ADDI #1, D3
00001334  60EE                     401      BRA countLoop
00001336                           402      
00001336                           403  countDone:    
00001336                           404      * close this file
00001336  303C 0038                405       move #56,d0  
0000133A  4E4F                     406       trap #15 
0000133C                           407       
0000133C                           408       * reopen the target file
0000133C  224B                     409       MOVE.L A3,A1
0000133E  303C 0033                410       MOVE #51, D0
00001342  4E4F                     411       trap #15
00001344                           412       
00001344                           413      * seek to right position, then continue with writing
00001344  2403                     414      MOVE.L D3, D2 ; move the number of bytes found in the file to D2
00001346  303C 0037                415      MOVE #55, D0  ; position file task
0000134A  4E4F                     416      trap #15
0000134C                           417  
0000134C                           418      ******************************************************************************
0000134C                           419      * Actually write the buffer to the file, after caculating the number of bytes 
0000134C                           420      *  to write and after seeking to the right location in the file for append
0000134C                           421      ******************************************************************************
0000134C                           422  
0000134C  2405                     423      MOVE.L D5, D2 ; restore this for the actually writing the buffer 
0000134E                           424      ; assumes A0 hasnt changed since handed to this method      
0000134E  224A                     425      MOVEA.L A2, A1 ; load the address of the buffer we want to write to disk
00001350                           426      ; assumes file ID is still stored in D1.L  
00001350  103C 0036                427      MOVE.B #54, D0 ; subtask 54 is write to open file (append, or?), assumes D2 holds # of bytes
00001354  4E4F                     428      trap #15
00001356                           429  
00001356                           430      ; add a newline to the file output
00001356  43F9 000016DC            431      LEA NEWLINE, A1
0000135C  103C 0036                432      MOVE.B #54, D0 
00001360  143C 0002                433      MOVE.B #2,D2  ; kills # of bytes to write from input param
00001364  4E4F                     434      trap #15
00001366                           435      
00001366                           436      ; finally, close only this file
00001366  103C 0038                437      MOVE.B #56, D0 ; close file task
0000136A  4E4F                     438      trap #15
0000136C                           439    
0000136C                           440      ; report to screen
0000136C  224A                     441      MOVEA.L A2, A1 ; load the address of the buffer we want to write to disk & screen
0000136E  103C 000D                442      MOVE.B #13, D0
00001372  4E4F                     443      trap #15
00001374                           444        
00001374                           445      ; restore context
00001374  4CDF 0C3F                446      MOVEM.L (SP)+, toSave
00001378                           447      
00001378  4E75                     448      RTS
0000137A                           449      
0000137A                           450      
0000137A                           451  *----------------------------------------------------------------------------------
0000137A                           452  * Method Name: AsciiToHex
0000137A                           453  * Written by : Berger, Modified by Nash
0000137A                           454  * Date       : 3/1/2019
0000137A                           455  * Description: Converts chars '0'-'9' and 'a'-'f' to 0-9,a-F
0000137A                           456  *              Transforms/unpacks 8 chars (8b each) pointed to by A1 into 
0000137A                           457  *              its (4b each) equivalent hex value 
0000137A                           458  *  
0000137A                           459  *  Preconditions & Input
0000137A                           460  *       A1 (input) points to a memory buffer holding 8 ascii chars (not null-terminated) 
0000137A                           461  *       This function calls another function (strip_ascii)
0000137A                           462  *
0000137A                           463  *  Postconditions & Output
0000137A                           464  *       D7 (output) holds the converted value 
0000137A                           465  *       Caller-Saved : D0 is temp, D6 is a loop var
0000137A                           466  *----------------------------------------------------------------------------------
0000137A                           467  AsciiToHexRegList REG D0,D6
0000137A                           468  AsciiToHex     
0000137A  48E7 8000                469      MOVEM.L asciiToHexRegList, -(SP)  *save context
0000137E  4287                     470      CLR.L D7 * clear our return value
00001380  7C08                     471      MOVE.L #8, D6 ; and set up our loop counter
00001382                           472  
00001382                           473  chrLoop
00001382  1019                     474      MOVE.B (A1)+,D0 * Get the first byte
00001384  4EB9 0000139C            475      jsr strip_ascii * Get rid of the ascii code    
0000138A  8E40                     476      OR.W D0,D7 * Load the bits into D7
0000138C                           477      
0000138C  5306                     478      subI.B #1,D6  *decrement our loop variable
0000138E  6700 0006                479      BEQ chrDone   *skip shifting if we are done
00001392                           480      
00001392  E987                     481      ASL.L #4,D7 * shift left 4 bits to prepare for next byte
00001394  60EC                     482      BRA chrLoop
00001396                           483  
00001396                           484  chrDone
00001396  4CDF 0001                485      MOVEM.L (SP)+,asciiToHexRegList 
0000139A  4E75                     486      RTS
0000139C                           487  
0000139C                           488  
0000139C                           489  **********************************************************************
0000139C                           490  * SUBROUTINE: strip_ascii
0000139C                           491  * remove the ascii code from the digits 0-9,a-f, or A-F
0000139C                           492  * Input Parameters: <D0> = ascii code
0000139C                           493  *
0000139C                           494  * Return parameters: D0.B = number 0...F, returned as 00...0F
0000139C                           495  * Registers used internally: D0
0000139C                           496  * Assumptions: D0 contains $30-$39, $41-$46 or $61-66
0000139C                           497  *
0000139C                           498  ***********************************************************************
0000139C                           499  strip_ascii
0000139C  B03C 0039                500        CMP.B #$39,D0 * Is it in range of 0-9?
000013A0  6F00 001A                501        BLE sub30 * Its a number
000013A4  B03C 0046                502        CMP.B #$46,D0 * Is is A...F?
000013A8  6F00 000A                503        BLE sub37 * Its A...F
000013AC  0400 0057                504        SUB.B #$57,D0 * Its a...f
000013B0  6000 000E                505        BRA ret_sa * Go back
000013B4  0400 0037                506  sub37 SUB.B #$37,D0 * Strip 37
000013B8  6000 0006                507        BRA ret_sa * Go back
000013BC  0400 0030                508  sub30 SUB.B #$30,D0 * Strip 30
000013C0  4E75                     509  ret_sa RTS * Go back
000013C2                           510  
000013C2                           511  
000013C2                           512  **
000013C2                           513  * NumToHexStr
000013C2                           514  **
000013C2                           515  * Converts the given number to a NULL-terminated hexadecimal character string
000013C2                           516  * with the specified length.
000013C2                           517  *
000013C2                           518  * By default, the number is converted to an 8-character string, but this can be
000013C2                           519  * changed in the length argument, which can be between 1 and 8 characters
000013C2                           520  * inclusive.
000013C2                           521  *
000013C2                           522  * Additionally, the conversion starts from the rightmost bit of the number, so
000013C2                           523  * keep this in mind when converting numbers with lengths < 8. For example,
000013C2                           524  * converting the number 0x0642FFFF with length = 4 results in the string 'FFFF'.
000013C2                           525  *
000013C2                           526  * The converted string will remain until the subroutine is called again, so
000013C2                           527  * make sure to store it elsewhere before calling this again.
000013C2                           528  *
000013C2                           529  **
000013C2                           530  * @param Arg_NumToHexStr_Num        Number to convert
000013C2                           531  * @param Arg_NumToHexStr_Length     Number of characters to convert, between 0-8
000013C2                           532  * @return Ret_NumToHexStr_Str       Converted hexadecimal character string
000013C2                           533  * @branch _NumToHexStr_PosLength    Branch for checking positive length
000013C2                           534  * @branch _NumToHexStr_ValidLength  Branch for checking valid length
000013C2                           535  * @branch _NumToHexStr_Loop         Loop through each digit
000013C2                           536  * @branch _NumToHexStr_Letter       Branch for converting to hex letter
000013C2                           537  * @branch _NumToHexStr_AddChar      Add character to string
000013C2                           538  **
000013C2                           539  Arg_NumToHexStr_Num     DS.L    1
000013C6= 08                       540  Arg_NumToHexStr_Length  DC.B    8
000013C7                           541  Ret_NumToHexStr_Str     DS.B    9
000013D0                           542  
000013D0                           543  NumToHexStr:            DS.W    0
000013D0  48E7 F0C0                544      MOVEM.L     D0-D3/A0-A1, -(SP)          * Backup registers to stack
000013D4  4281                     545      CLR.L       D1
000013D6  4280                     546      CLR.L       D0
000013D8  2038 13C2                547      MOVE.L      Arg_NumToHexStr_Num, D0     * Load number
000013DC  1238 13C6                548      MOVE.B      Arg_NumToHexStr_Length, D1  * Load length
000013E0  207C 000013C7            549      MOVEA.L     #Ret_NumToHexStr_Str, A0    * Load string address
000013E6                           550      
000013E6  0C01 0001                551      CMPI.B      #1, D1
000013EA  6C00 0004                552      BGE         _NumToHexStr_PosLength
000013EE  7201                     553      MOVEQ       #1, D1
000013F0                           554      
000013F0                           555  _NumToHexStr_PosLength
000013F0  0C01 0008                556      CMPI.B      #8, D1
000013F4  6F00 0004                557      BLE         _NumToHexStr_ValidLength
000013F8  7208                     558      MOVEQ       #8, D1
000013FA                           559      
000013FA                           560  _NumToHexStr_ValidLength
000013FA  2248                     561      MOVEA.L     A0, A1                      * A0 contains start, A1 contains current
000013FC  D2C1                     562      ADDA.W      D1, A1                      * Move to last digit
000013FE  4211                     563      CLR.B       (A1)                        * NULL last digit
00001400  740F                     564      MOVEQ       #$0F, D2                    * Bitmask for rightmost nibble, which is last hex
00001402                           565      
00001402                           566  _NumToHexStr_Loop
00001402  1600                     567      MOVE.B      D0, D3                      * Get byte (2 hex chars) from number
00001404  C602                     568      AND.B       D2, D3                      * Mask to get last hex char
00001406                           569      
00001406  0C03 0009                570      CMPI.B      #9, D3                      * If the value > 9
0000140A  6E00 000A                571      BGT         _NumToHexStr_Letter         * It's a letter, so branch to letter
0000140E                           572      
0000140E  0603 0030                573      ADDI.B      #'0', D3                    * Get to ASCII value for 0-9
00001412  6000 000A                574      BRA         _NumToHexStr_AddChar        * Branch to add char to string
00001416                           575  
00001416                           576  _NumToHexStr_Letter
00001416  0403 000A                577      SUBI.B      #10, D3                     * Subtract 10 first to get correct ASCII
0000141A  0603 0041                578      ADDI.B      #'A', D3                    * Get to ASCII value for A-F
0000141E                           579  
0000141E                           580  _NumToHexStr_AddChar
0000141E  1303                     581      MOVE.B      D3, -(A1)                   * Add char to string and decrement pointer
00001420  E888                     582      LSR.L       #4, D0                      * Shift the number a nibble (hex char) to the right
00001422  B3C8                     583      CMPA.L      A0, A1                      * If current pointer is > string start address
00001424  6EDC                     584      BGT         _NumToHexStr_Loop           * Loop back
00001426                           585      
00001426  42B8 13C2                586      CLR.L  Arg_NumToHexStr_Num 
0000142A                           587      
0000142A  4CDF 030F                588      MOVEM.L     (SP)+, D0-D3/A0-A1          * Restore registers from stack
0000142E  4E75                     589      RTS                                     * Exit subroutine
00001430                           590  
00001430                           591  
00001430                           592  MAIN_CONSOLE
00001430                           593     
00001430= 3D 3D 3D 3D 3D 3D ...    594        DC.B '============================================================',CR,LF
0000146E= 7C 7C 20 20 20 20 ...    595        DC.B '||                                                        ||',CR,LF
000014AC= 7C 7C 20 20 20 23 ...    596        DC.B '||   #####      ###    ##   ##                            ||',CR,LF
000014EA= 7C 7C 20 20 23 23 ...    597        DC.B '||  ##        ##   ##  ## ##                              ||',CR,LF
00001528= 7C 7C 20 23 23 20 ...    598        DC.B '|| ## ####     #####   ####                               ||',CR,LF
00001566= 7C 7C 20 23 23 20 ...    599        DC.B '|| ##    ##  ##    ##  ####                               ||',CR,LF
000015A4= 7C 7C 20 23 23 20 ...    600        DC.B '|| ##    ##  ##    ##  ## ##                              ||',CR,LF
000015E2= 7C 7C 20 20 23 23 ...    601        DC.B '||  #####     ######   ##  ##                             ||',CR,LF
00001620= 7C 7C 20 20 20 20 ...    602        DC.B '||                                                        ||',CR,LF
0000165E= 7C 7C 20 20 20 44 ...    603        DC.B '||   Daniel Yan, Fahad Alshehri, Denny Park               ||',CR,LF
0000169C= 3D 3D 3D 3D 3D 3D ...    604        DC.B '============================================================',CR,LF,0
000016DB                           605      
000016DB                           606  * Required variables and constants go here for your Disassembler
000016DB  =0000000D                607  CR                  EQU $0D
000016DB  =0000000A                608  LF                  EQU $0A
000016DC= 000D 000A 0000           609  NEWLINE             DC.W CR,LF,0  
000016E2= 4F 75 74 70 75 74 ...    610  outFilename         DC.B 'Output.txt',0
000016ED                           611  byteRead            DS.B 1
000016EE= 31 41 30 30 31 41 ...    612  ascii_val           DC.B $31,$41,$30,$30,$31,$41,$30,$30 * Test value $1A001A00
000016F6                           613  
000016F6                           614  * Variables and constants
000016F6                           615  ;CR              EQU     $D              ; ASCII code for carriage return
000016F6                           616  ;LF              EQU     $A              ; ASCII code for line feed
000016F6  =00000014                617  SIZE            EQU     20             ; Max string size
000016F6= 43 6F 6E 66 69 67 ...    618  fileName        DC.B    'Config.cfg',0   ; name of text file
00001702= 4120 6669 6C65 2...      619  errorFile       DC.W    'A file error occurred.',CR,LF,0
0000171E= 4669 6C65 2072 6...      620  success         DC.W    'File read complete.',CR,LF,0
00001738                           621  string          DS.B    SIZE            ; I/O buffer
0000174C                           622  strSize         DS.W    1               ; Size if input string
0000174E                           623  fileID          DS.L    1               ; File ID
00001752= 496E 7661 6C69 6...      624  invalid_address_message DC.W 'Invalid Hex Address' ,CR,LF,0
0000176C                           625  
0000176C                           626  
0000176C                           627      INCLUDE "OP_Code_Routines.x68"
0000176C                           628  
0000176C                           629  OP_SIZE         DS.B    1   ;This constant refers to the size of the current OP code 
0000176D                           630  MNEMONIC        DS.B    1   ;Constant for EA, first 4 bits (15-12) of a 4 hex OP code
0000176E                           631  FIRST_3         DS.B    1   ;Constant for EA, 3 bits (11-9) of a 4 hex OP code
0000176F                           632  SECOND_3        DS.B    1   ;Constant for EA, 3 bits (8-6) of a 4 hex OP code
00001770                           633  THIRD_3         DS.B    1   ;Constant for EA, 3 bits (5-3) of a 4 hex OP code
00001771                           634  FOURTH_3        DS.B    1   ;Constant for EA, 3 bits (2-0) of a 4 hex OP code
00001772                           635  
00001772                           636  
00001772                           637  
00001772                           638  
00001772                           639  
00001772                           640  OP_JSR_Routine:
00001772  48E7 C000                641      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
00001776  3038 10A0                642      MOVE.W CUR_OP_CODE,D0
0000177A  11FC 0001 10A2           643      MOVE.B #1,IS_VALID
00001780  720C                     644      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
00001782  E2A8                     645      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
00001784                           646  
00001784                           647  GROUP_0:                ;$0| ORI, BCLR (static and dynamic), CMPI                  
00001784  B03C 0000                648      CMP.B   #$0,D0                 ;Compare first nibble
00001788  6600 000C                649      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
0000178C  4EB9 000019DE            650      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
00001792  6000 010C                651      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001796                           652      
00001796                           653  GROUP_1:                ;$1| MOVE.B
00001796  B03C 0001                654      CMP.B   #$1,D0                 ;Compare first nibble
0000179A  6600 000C                655      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
0000179E  4EB9 00001BBC            656      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
000017A4  6000 00FA                657      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017A8                           658  
000017A8                           659  GROUP_2:                ;$2| MOVE.L, MOVEA.L
000017A8  B03C 0002                660      CMP.B   #$2,D0                 ;Compare first nibble
000017AC  6600 000C                661      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
000017B0  4EB9 00001BE6            662      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
000017B6  6000 00E8                663      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017BA                           664  
000017BA                           665  GROUP_3:                ;$3| MOVE.W, MOVEA.W
000017BA  B03C 0003                666      CMP.B   #$3,D0                 ;Compare first nibble
000017BE  6600 000C                667      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
000017C2  4EB9 00001C48            668      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
000017C8  6000 00D6                669      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017CC                           670  
000017CC                           671  GROUP_4:                ;$4| LEA, JSR, RTS, NEG, MOVEM
000017CC  B03C 0004                672      CMP.B   #$4,D0                 ;Compare first nibble
000017D0  6600 000C                673      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
000017D4  4EB9 00001CAA            674      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
000017DA  6000 00C4                675      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017DE                           676  
000017DE                           677  
000017DE                           678  GROUP_5:                ;$5| SUBQ
000017DE  B03C 0005                679      CMP.B   #$5,D0                 ;Compare first nibble
000017E2  6600 000C                680      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
000017E6  4EB9 00001F32            681      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
000017EC  6000 00B2                682      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017F0                           683  
000017F0                           684  
000017F0                           685  GROUP_6:                ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
000017F0  B03C 0006                686      CMP.B   #$6,D0                 ;Compare first nibble
000017F4  6600 000C                687      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
000017F8  4EB9 00001F9C            688      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
000017FE  6000 00A0                689      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001802                           690  
00001802                           691  
00001802                           692  GROUP_7:                ;$7| Display: DATA, $WXYZ (Unsupported)
00001802  B03C 0007                693      CMP.B   #$7,D0                 ;Compare first nibble
00001806  6600 000C                694      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
0000180A  4EB9 00002042            695      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
00001810  6000 008E                696      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001814                           697  
00001814                           698  
00001814                           699  GROUP_8:                ;$8| DIVS, OR
00001814  B03C 0008                700      CMP.B   #$8,D0                 ;Compare first nibble
00001818  6600 000C                701      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
0000181C  4EB9 00002066            702      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
00001822  6000 007C                703      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001826                           704  
00001826                           705  
00001826                           706  GROUP_9:                ;$9| SUB
00001826  B03C 0009                707      CMP.B   #$9,D0                 ;Compare first nibble
0000182A  6600 000C                708      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
0000182E  4EB9 000020C6            709      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
00001834  6000 006A                710      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001838                           711  
00001838                           712  
00001838                           713  GROUP_A:                ;$A| Display: DATA, $WXYZ (Unsupported)
00001838  B03C 000A                714      CMP.B   #$A,D0                 ;Compare first nibble
0000183C  6600 000C                715      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
00001840  4EB9 00002126            716      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
00001846  6000 0058                717      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000184A                           718  
0000184A                           719  
0000184A                           720  GROUP_B:                ;$B| EOR, CMP
0000184A  B03C 000B                721      CMP.B   #$B,D0                 ;Compare first nibble
0000184E  6600 000C                722      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
00001852  4EB9 0000212E            723      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
00001858  6000 0046                724      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000185C                           725  
0000185C                           726  
0000185C                           727  GROUP_C:                ;$C| MULS
0000185C  B03C 000C                728      CMP.B   #$C,D0                 ;Compare first nibble
00001860  6600 000C                729      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
00001864  4EB9 000021A2            730      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
0000186A  6000 0034                731      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000186E                           732  
0000186E                           733  
0000186E                           734  GROUP_D:                 ;$D| ADD, ADDA
0000186E  B03C 000D                735      CMP.B   #$D,D0                 ;Compare first nibble
00001872  6600 000C                736      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
00001876  4EB9 00002242            737      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
0000187C  6000 0022                738      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001880                           739  
00001880                           740  
00001880                           741  GROUP_E:                ;$E| LSR, LSL, ASR, ASL, ROL, ROR
00001880  B03C 000E                742      CMP.B   #$E,D0                 ;Compare first nibble
00001884  6600 000C                743      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
00001888  4EB9 00002292            744      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
0000188E  6000 0010                745      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001892                           746  
00001892                           747  
00001892                           748  GROUP_F:                ;$F| Display: DATA, $WXYZ (Unsupported)
00001892  B03C 000F                749      CMP.B   #$F,D0                 ;Compare first nibble
00001896  4EB9 00002442            750      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
0000189C  6000 0002                751      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000018A0                           752  
000018A0                           753  
000018A0                           754  OP_JSR_DONE:
000018A0  4CDF 0003                755           MOVEM.L (SP)+,D0-D1       ;Recover register D0
000018A4  0C38 0001 10A2           756           CMP.B #1,IS_VALID
000018AA  6700 0FD4                757           BEQ    main_EA
000018AE  6600 F912                758           BNE    check_print
000018B2                           759           ;JMP EA_ROUTINE        ;This runs EA's routines after OP code portion is finished
000018B2                           760  
000018B2                           761  
000018B2                           762  
000018B2                           763  
000018B2                           764  MOVE_LAST_6_BITS_TO_EA:      ;Move last 6 bits from EA field to relevant registers
000018B2                           765     ; MOVEM.L D0-D7/A6, -(SP) ;Save all changed registers
000018B2  3038 10A0                766      MOVE.W CUR_OP_CODE,D0    ;Move current OP code into D0
000018B6  323C 000A                767      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
000018BA  E368                     768      LSL.W   D1,D0            ;Truncate to find the last 6 bits
000018BC  E268                     769      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
000018BE  3E00                     770      MOVE.W  D0,D7            ;Move last 6 bits into D7
000018C0  323C 0003                771      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
000018C4  E26F                     772      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
000018C6  3C07                     773      MOVE.W  D7,D6            ;Move the 'upper' 3 bits into D6
000018C8  323C 000D                774      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
000018CC  E368                     775      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
000018CE  E268                     776      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
000018D0  3E00                     777      MOVE.W  D0,D7            ;Move the 'lower' 3 bits into D7
000018D2                           778     ; MOVEM.L (SP)+,D0-D7/A6  ;Restore registers
000018D2  4E75                     779      RTS                      ;Return to stack
000018D4                           780      
000018D4                           781  FIND_2_BIT_SIZE_7_TO_6:         ;Move the 2 bit size field relevant register
000018D4  48E7 C000                782      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
000018D8  3038 10A0                783      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
000018DC  323C 0008                784      MOVE.W   #8,D1              ;Prepare 8 bit shift to D1
000018E0  E368                     785      LSL.W    D1,D0              ;Truncate to find the 2 size bits
000018E2  E268                     786      LSR.W    D1,D0              ;Reposition the bits
000018E4  323C 0006                787      MOVE.W   #6,D1              ;Prepare 6 bit shift to D1
000018E8  E268                     788      LSR.W    D1,D0              ;Truncate to shift 2 bits to a byte
000018EA  11C0 176C                789      MOVE.B   D0,OP_SIZE         ;Move 2 size bits into OP_SIZE
000018EE  4CDF 0003                790      MOVEM.L (SP)+,D0-D1         ;Restore registers
000018F2  4E75                     791      RTS                         ;Return to stack
000018F4                           792  
000018F4                           793  FIND_1_BIT_SIZE_6:              ;Move the 1 bit size field relevant register
000018F4  48E7 C000                794      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
000018F8  3038 10A0                795      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
000018FC  323C 0009                796      MOVE.W   #9,D1              ;Prepare 9 bit shift to D1
00001900  E368                     797      LSL.W    D1,D0              ;Truncate to find the size bit
00001902  E268                     798      LSR.W    D1,D0              ;Reposition the bits
00001904  323C 0006                799      MOVE.W   #6,D1              ;Prepare 6 bit shift to D1
00001908  E268                     800      LSR.W    D1,D0              ;Truncate to shift 1 bit to a byte
0000190A  11C0 176C                801      MOVE.B   D0,OP_SIZE         ;Move 1 size bit into OP_SIZE
0000190E  4CDF 0003                802      MOVEM.L (SP)+,D0-D1         ;Restore registers
00001912  4E75                     803      RTS                         ;Return to stack
00001914                           804  
00001914                           805  FIND_1_BIT_SIZE_8:         ;Move the 1 bit size field relevant register
00001914  48E7 C000                806      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
00001918  3038 10A0                807      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
0000191C  323C 0007                808      MOVE.W   #7,D1              ;Prepare 7 bit shift to D1
00001920  E368                     809      LSL.W    D1,D0              ;Truncate to find the 1 size bit
00001922  E268                     810      LSR.W    D1,D0              ;Reposition the bits
00001924  323C 0008                811      MOVE.W   #8,D1              ;Prepare 8 bit shift to D1
00001928  E268                     812      LSR.W    D1,D0              ;Truncate to shift 1 bit to a byte
0000192A  11C0 176C                813      MOVE.B   D0,OP_SIZE         ;Move 1 size bit into OP_SIZE
0000192E  4CDF 0003                814      MOVEM.L (SP)+,D0-D1         ;Restore registers
00001932  4E75                     815      RTS                         ;Return to stack
00001934                           816  
00001934                           817  FIND_3_BIT_REG_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
00001934                           818     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
00001934  3038 10A0                819      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
00001938  323C 0004                820      MOVE.W   #4,D1          ;Prepare 4 bit shift to D1
0000193C  E368                     821      LSL.W    D1,D0          ;Truncate to find the 2 size bits
0000193E  E268                     822      LSR.W    D1,D0          ;Reposition the bits
00001940  323C 0009                823      MOVE.W   #9,D1          ;Prepare 9 bit shift to D1
00001944  E268                     824      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
00001946  3A00                     825      MOVE.W   D0,D5          ;Move 3 register bits into D4
00001948                           826     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
00001948  4E75                     827      RTS                     ;Return to stack
0000194A                           828  
0000194A                           829  MOVE_AND_MOVEA_PARSE_EA:       ;Move the 3 bit dynamic register bits to proper register
0000194A                           830     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
0000194A  3038 10A0                831      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
0000194E  323C 000A                832      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
00001952  E368                     833      LSL.W   D1,D0            ;Truncate to find the last 6 bits
00001954  E268                     834      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
00001956  3E00                     835      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
00001958  323C 0003                836      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
0000195C  E26F                     837      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
0000195E  3A07                     838      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
00001960  323C 000D                839      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
00001964  E368                     840      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
00001966  E268                     841      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001968  3800                     842      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
0000196A  3038 10A0                843      MOVE.W CUR_OP_CODE,D0     ;Move current OP code into D0     
0000196E  323C 0004                844      MOVE.W  #4,D1             ;Prepare 4 bit shift to D1
00001972  E368                     845      LSL.W   D1,D0             ;Truncate to find bits 11-6
00001974  E268                     846      LSR.W   D1,D0             ;Reposition bits
00001976  323C 0006                847      MOVE.W  #6,D1             ;Prepare 6 bit shift to D1
0000197A  E268                     848      LSR.W   D1,D0             ;Truncate the SRC Reg/Mode bits
0000197C  323C 0003                849      MOVE.W  #3,D1             ;Prepare a 3 bit shift to D1 for DST Reg/Mode
00001980  3C00                     850      MOVE.W  D0,D6             ;Copy over the current 6 bits to D6
00001982  E268                     851      LSR.W   D1,D0             ;Truncate DST Mode  
00001984  3E00                     852      MOVE.W  D0,D7             ;Move DST Reg to D7
00001986  323C 000D                853      MOVE.W  #13,D1             
0000198A  E36E                     854      LSL.W   D1,D6             ;Truncate 13 bits in D6
0000198C  E26E                     855      LSR.W   D1,D6             ;Reposition D6
0000198E                           856                                ;D6 now contains the DST Reg
0000198E                           857     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
0000198E  4E75                     858      RTS                     ;Return to stack
00001990                           859  PARSE_EA_CONSTANT_BITS:
00001990                           860      *MNEMONIC SHIFT
00001990  3038 10A0                861      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D0
00001994  323C 000C                862      MOVE.W #12,D1               ;Prepare a bit shift of 12 into D1
00001998  E268                     863      LSR.W D1,D0                 ;Shift 12 bits from D0 right
0000199A  11C0 176D                864      MOVE.B D0,MNEMONIC          ;Set MNEMONIC to D0
0000199E                           865      *FIRST_3 SHIFT
0000199E  323C 0009                866      MOVE.W #9,D1                ;Prepare a bit shift of 9 into D1
000019A2  3038 10A0                867      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000019A6  E948                     868      LSL.W #4,D0                 ;Shift out bits 15-12 in D0
000019A8  E848                     869      LSR.W #4,D0                 ;Reposition D0
000019AA  E268                     870      LSR.W  D1,D0                ;Shift D0 9 bits right
000019AC  11C0 176E                871      MOVE.B D0,FIRST_3           ;Set FIRST_3 to D0
000019B0                           872      *SECOND_3 SHIFT
000019B0  3038 10A0                873      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000019B4  EF48                     874      LSL.W #7,D0                 ;Shift out bits 15-9 in D0
000019B6  EE48                     875      LSR.W #7,D0                 ;Reposition D0
000019B8  EC48                     876      LSR.W #6,D0                 ;Shift D0 6 bits right
000019BA  11C0 176F                877      MOVE.B D0,SECOND_3          ;Set SECOND_3 to D0
000019BE                           878      *THIRD_3 SHIFT
000019BE  3038 10A0                879      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000019C2  E648                     880      LSR.W #3,D0                 ;Shift D0 3 bits right
000019C4  323C 000D                881      MOVE.W #13,D1               ;Prepare a 13 bit shift into D1
000019C8  E368                     882      LSL.W D1,D0                 ;Truncate first 13 bits of D0
000019CA  E268                     883      LSR.W D1,D0                 ;Reposition D0
000019CC  11C0 1770                884      MOVE.B D0,THIRD_3           ;Set THIRD_3 to D0
000019D0                           885      *FOURTH_3 SHIFT
000019D0  3038 10A0                886      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000019D4  E368                     887      LSL.W D1,D0                 ;Grab the fourth 3-bit group
000019D6  E268                     888      LSR.W D1,D0                 ;Shift D0 back into position
000019D8  11C0 1771                889      MOVE.B D0,FOURTH_3          ;Set FOURTH_3 to Do
000019DC  4E75                     890      RTS                         ;Return to stack
000019DE                           891  
000019DE                           892  
000019DE                           893  
000019DE                           894  
000019DE                           895  
000019DE                           896  C_GROUP_0:
000019DE  48E7 C000                897      MOVEM.L D0-D1, -(SP)            ;Backup registers
000019E2                           898      
000019E2                           899  CHECK_OP_ORI_TO_CCR:
000019E2  3038 10A0                900      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019E6  B07C 003C                901      CMP.W #$003C,D0                 ;Compare the direct full bits
000019EA  6700 01C4                902      BEQ GROUP0_INVALID              ;INVALID OP code found
000019EE  6600 0002                903      BNE CHECK_OP_ORI_TO_SR          ;Check next routine
000019F2                           904      
000019F2                           905  CHECK_OP_ORI_TO_SR:
000019F2  3038 10A0                906      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019F6  B07C 007C                907      CMP.W #$007C,D0                 ;Compare the direct full bits
000019FA  6700 01B4                908      BEQ GROUP0_INVALID              ;INVALID OP code found
000019FE  6600 0002                909      BNE CHECK_OP_ANDI_TO_CCR        ;Check next routine
00001A02                           910      
00001A02                           911  CHECK_OP_ANDI_TO_CCR:
00001A02  3038 10A0                912      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A06  B07C 023C                913      CMP.W #$023C,D0                 ;Compare the direct full bits
00001A0A  6700 01A4                914      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A0E  6600 0002                915      BNE CHECK_OP_ANDI_TO_SR         ;Check next routine
00001A12                           916      
00001A12                           917  CHECK_OP_ANDI_TO_SR:
00001A12  3038 10A0                918      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A16  B07C 027C                919      CMP.W #$027C,D0                 ;Compare the direct full bits
00001A1A  6700 0194                920      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A1E  6600 0002                921      BNE CHECK_OP_EORI_TO_CCR                ;Check next routine
00001A22                           922  
00001A22                           923  CHECK_OP_EORI_TO_CCR:
00001A22  3038 10A0                924      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A26  B07C 0A3C                925      CMP.W #$0A3C,D0                 ;Compare the direct full bits
00001A2A  6700 0184                926      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A2E  6600 0002                927      BNE CHECK_OP_EORI_TO_SR         ;Check next routine
00001A32                           928      
00001A32                           929  CHECK_OP_EORI_TO_SR:
00001A32  3038 10A0                930      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A36  B07C 0A7C                931      CMP.W #$0A7C,D0                 ;Compare the direct full bits
00001A3A  6700 0174                932      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A3E  6600 0002                933      BNE CHECK_OP_ANDI               ;Check next routine
00001A42                           934      
00001A42                           935  CHECK_OP_ANDI:
00001A42  3038 10A0                936      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A46  0240 FF00                937      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001A4A  B07C 0200                938      CMP.W #$0200,D0                 ;Compare the appropriate masked bits
00001A4E  6700 0160                939      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A52  6600 0002                940      BNE CHECK_OP_SUBI               Check next routine
00001A56                           941      
00001A56                           942  CHECK_OP_SUBI:
00001A56  3038 10A0                943      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A5A  0240 FF00                944      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001A5E  B07C 0400                945      CMP.W #$0400,D0                 ;Compare the appropriate masked bits
00001A62  6700 014C                946      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A66  6600 0002                947      BNE CHECK_OP_ADDI               ;Check next routine
00001A6A                           948  
00001A6A                           949  CHECK_OP_ADDI:
00001A6A  3038 10A0                950      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A6E  0240 FF00                951      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001A72  B07C 0600                952      CMP.W #$0600,D0                 ;Compare the appropriate masked bits
00001A76  6700 0138                953      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A7A  6600 0002                954      BNE CHECK_OP_EORI               ;Check next routine 
00001A7E                           955  
00001A7E                           956  CHECK_OP_EORI:
00001A7E  3038 10A0                957      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A82  0240 FF00                958      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001A86  B07C 0A00                959      CMP.W #$0A00,D0                 ;Compare the appropriate masked bits
00001A8A  6700 0124                960      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A8E  6600 0002                961      BNE CHECK_OP_STATIC_BTST        ;Check next routine
00001A92                           962      
00001A92                           963  CHECK_OP_STATIC_BTST:
00001A92  3038 10A0                964      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A96  0240 FFC0                965      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001A9A  B07C 0800                966      CMP.W #$0800,D0                 ;Compare the appropriate masked bits
00001A9E  6700 0110                967      BEQ GROUP0_INVALID              ;INVALID OP code found
00001AA2  6600 0002                968      BNE CHECK_OP_STATIC_BCHG        ;Check next routine
00001AA6                           969      
00001AA6                           970  CHECK_OP_STATIC_BCHG:
00001AA6  3038 10A0                971      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001AAA  0240 FFC0                972      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001AAE  B07C 0840                973      CMP.W #$0840,D0                 ;Compare the appropriate masked bits
00001AB2  6700 00FC                974      BEQ GROUP0_INVALID              ;INVALID OP code found
00001AB6  6600 0002                975      BNE CHECK_OP_STATIC_BSET        ;Check next routine
00001ABA                           976  
00001ABA                           977  CHECK_OP_STATIC_BSET:
00001ABA  3038 10A0                978      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001ABE  0240 FFC0                979      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001AC2  B07C 08C0                980      CMP.W #$08C0,D0                 ;Compare the appropriate masked bits
00001AC6  6700 00E8                981      BEQ GROUP0_INVALID              ;INVALID OP code found   
00001ACA  6600 0002                982      BNE CHECK_OP_DYNAMIC_BTST       ;Check next routine
00001ACE                           983  
00001ACE                           984  CHECK_OP_DYNAMIC_BTST:
00001ACE  3038 10A0                985      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001AD2  0240 F1C0                986      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
00001AD6  B07C 0100                987      CMP.W #$0100,D0                 ;Compare the appropriate masked bits
00001ADA  6700 00D4                988      BEQ GROUP0_INVALID              ;INVALID OP code found
00001ADE  6600 0002                989      BNE CHECK_OP_DYNAMIC_BCHG       ;Check next routine
00001AE2                           990  
00001AE2                           991  CHECK_OP_DYNAMIC_BCHG:
00001AE2  3038 10A0                992      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001AE6  0240 F1C0                993      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
00001AEA  B07C 0140                994      CMP.W #$0140,D0                 ;Compare the appropriate masked bits 
00001AEE  6700 00C0                995      BEQ GROUP0_INVALID              ;INVALID OP code found
00001AF2  6600 0002                996      BNE CHECK_OP_DYNAMIC_BSET       ;Check next routine
00001AF6                           997      
00001AF6                           998  CHECK_OP_DYNAMIC_BSET:
00001AF6                           999  
00001AF6  3038 10A0               1000      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001AFA  0240 F1C0               1001      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
00001AFE  B07C 01C0               1002      CMP.W   #$01C0,D0               ;Compare the appropriate masked bits 
00001B02  6700 0006               1003      BEQ     BIT_CHECK_MOVEP         ;Check special case for MOVEP
00001B06  6600 001C               1004      BNE     CHECK_OP_MOVEP          ;Check next routine
00001B0A                          1005  
00001B0A                          1006  BIT_CHECK_MOVEP:                                ;This is a special case check for MOVEP
00001B0A  3038 10A0               1007      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001B0E  323C 000A               1008      MOVE.W  #10,D1                  ;Prepare a 10-bit shift
00001B12  E368                    1009      LSL.W   D1,D0                   ;Shift out 10 bits left 
00001B14  E268                    1010      LSR.W   D1,D0                   ;Reposition D0 for last 6 bits
00001B16  E648                    1011      LSR.W   #3,D0                   ;Shift out 3 bits right, D0 contains bits 5-3
00001B18  B07C 0001               1012      CMP.W   #$1,D0                  ;Compare bits to D0
00001B1C  6700 0006               1013      BEQ     CHECK_OP_MOVEP          ;If bits are $1 then it's addressing, goto MOVEP
00001B20  6600 008E               1014      BNE     GROUP0_INVALID          ;If not then it's DYNAMIC_BSET which is invalid
00001B24                          1015      
00001B24                          1016  CHECK_OP_MOVEP:
00001B24  3038 10A0               1017      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001B28  0240 F138               1018      ANDI.W #$F138,D0                ;Mask relevant bits to D0
00001B2C  B07C 0108               1019      CMP.W #$0108,D0                 ;Compare the appropriate masked bits
00001B30  6700 0918               1020      BEQ INVALID_OP                  ;INVALID OP code found
00001B34  6600 0002               1021      BNE CHECK_OP_ORI                ;Check next routine
00001B38                          1022  
00001B38                          1023  CHECK_OP_ORI:
00001B38  3038 10A0               1024      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001B3C  0240 FF00               1025      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001B40  B07C 0000               1026      CMP.W   #$0000,D0               ;Compare the appropriate masked bits     
00001B44  6600 0010               1027      BNE     CHECK_OP_CMPI           ;Branch to next comparison if not equal
00001B48  4EB8 18D4               1028      JSR     FIND_2_BIT_SIZE_7_TO_6
00001B4C  4EB9 00002460           1029      JSR     PRINT_OP_ORI            ;Print the OP code if equal    
00001B52  6000 0062               1030      BRA     GROUP0_SUCCESS          ;Finish routine
00001B56                          1031      
00001B56                          1032  CHECK_OP_CMPI:
00001B56  3038 10A0               1033      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001B5A  0240 FF00               1034      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001B5E  B07C 0C00               1035      CMP.W   #$0C00,D0               ;Compare the appropriate masked bits   
00001B62  6600 0010               1036      BNE     CHECK_OP_STATIC_BCLR    ;Branch to next comparison if not equal       
00001B66  4EB8 18D4               1037      JSR     FIND_2_BIT_SIZE_7_TO_6
00001B6A  4EB9 00002474           1038      JSR     PRINT_OP_CMPI           ;Print the OP code if equal
00001B70  6000 0044               1039      BRA     GROUP0_SUCCESS          ;Finish routine
00001B74                          1040      
00001B74                          1041  CHECK_OP_STATIC_BCLR:
00001B74  3038 10A0               1042      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001B78  0240 FF00               1043      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001B7C  B07C 0800               1044      CMP.W   #$0800,D0               ;Compare the appropriate masked bits
00001B80  6600 0010               1045      BNE     CHECK_OP_DYNAMIC_BCLR   ;Branch to next comparison if not equal
00001B84  4EB8 18D4               1046      JSR     FIND_2_BIT_SIZE_7_TO_6
00001B88  4EB9 00002488           1047      JSR     PRINT_OP_STATIC_BCLR    ;Print the OP code if equal
00001B8E  6000 0026               1048      BRA     GROUP0_SUCCESS          ;Finish routine
00001B92                          1049      
00001B92                          1050  CHECK_OP_DYNAMIC_BCLR:
00001B92  3038 10A0               1051      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001B96  0240 0180               1052      ANDI.W  #$0180,D0               ;Mask relevant bits to D0
00001B9A  B07C 0180               1053      CMP.W   #$0180,D0               ;Compare the appropriate masked bits
00001B9E  6600 0010               1054      BNE     GROUP0_INVALID          ;If not equal this must be an invalid OP code
00001BA2  4EB8 18D4               1055      JSR     FIND_2_BIT_SIZE_7_TO_6
00001BA6  4EB9 0000249C           1056      JSR     PRINT_OP_DYNAMIC_BCLR   ;Print the OP code if equal
00001BAC  6000 0008               1057      BRA     GROUP0_SUCCESS          ;Finish routine
00001BB0                          1058  
00001BB0                          1059  GROUP0_INVALID:                     ;Checks have been finished, invalid OP code has been found
00001BB0  4EB9 0000244A           1060      JSR INVALID_OP                  ;INVALID OP code found
00001BB6                          1061  GROUP0_SUCCESS:                     ;Checks have been finished,a valid OP code has been found
00001BB6  4CDF 0003               1062      MOVEM.L (SP)+,D0-D1             ;Restore registers
00001BBA  4E75                    1063      RTS                             ;Return to stack
00001BBC                          1064      
00001BBC                          1065  C_GROUP_1:
00001BBC  48E7 C000               1066      MOVEM.L D0-D1,-(SP)             ;Save registers to stack
00001BC0                          1067  
00001BC0                          1068  CHECK_OP_MOVE_B:
00001BC0  3038 10A0               1069      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0          
00001BC4  0240 F000               1070      ANDI.W  #$F000,D0               ;Mask relevant bits to D0
00001BC8  B07C 1000               1071      CMP.W   #$1000,D0               ;Compare the appropriate masked bits 
00001BCC  6600 000C               1072      BNE     GROUP1_INVALID          ;Invalid OP code has been found
00001BD0  4EB9 000024B0           1073      JSR     PRINT_OP_MOVEB          ;Print the OP code if equal
00001BD6  6000 0008               1074      BRA     GROUP1_SUCCESS          ;Finish routine
00001BDA                          1075      
00001BDA                          1076  GROUP1_INVALID:
00001BDA  4EB9 0000244A           1077      JSR INVALID_OP                  ;Invalid OP code found
00001BE0                          1078  GROUP1_SUCCESS:
00001BE0  4CDF 0003               1079      MOVEM.L (SP)+,D0-D1             ;Restore register
00001BE4  4E75                    1080      RTS                             ;Return to stack
00001BE6                          1081  C_GROUP_2:
00001BE6  48E7 E000               1082      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
00001BEA                          1083  
00001BEA                          1084  CHECK_OP_MOVEA_L:
00001BEA  3038 10A0               1085      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0  
00001BEE  0240 F000               1086      ANDI.W #$F000,D0                ;Mask relevant bits to D0
00001BF2  B07C 2000               1087      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
00001BF6  4EF9 00001BFC           1088      JMP FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
00001BFC                          1089      
00001BFC                          1090  FIND_MOVEA_L_DIFFERENCE:            ;Finds difference between MOVEA and MOVE
00001BFC  3038 10A0               1091      MOVE.W   CUR_OP_CODE,D0         ;Move current OP code into D0
00001C00  323C 0007               1092      MOVE.W   #7,D1                  ;Prepare 7 bit shift to D1
00001C04  E368                    1093      LSL.W    D1,D0                  ;Truncate to find the 3 address mode bits
00001C06  E268                    1094      LSR.W    D1,D0                  ;Reposition the bits
00001C08  323C 0006               1095      MOVE.W   #6,D1                  ;Prepare 6 bit shift to D1
00001C0C  E268                    1096      LSR.W    D1,D0                  ;Truncate to shift 3 bits to a register
00001C0E  3400                    1097      MOVE.W   D0,D2                  ;Move 3 address mode bits into D6
00001C10  B47C 0001               1098      CMP.W   #$1,D2                  ;Check if the address mode value is MOVEA
00001C14  6600 000C               1099      BNE     CHECK_OP_MOVE_L         ;Branch if not equal to check MOVE
00001C18  4EB9 000024BE           1100      JSR     PRINT_OP_MOVEA_L        ;Print the OP code if it's a match
00001C1E  6000 0022               1101      BRA     GROUP2_SUCCESS          ;Finish routine
00001C22                          1102      
00001C22                          1103      
00001C22                          1104  CHECK_OP_MOVE_L:
00001C22  3038 10A0               1105      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001C26  0240 F000               1106      ANDI.W #$F000,D0                ;Mask relevant bits to D0
00001C2A  B07C 2000               1107      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
00001C2E  6600 000C               1108      BNE GROUP2_INVALID              ;If not equal, OP code is invalid
00001C32  4EB9 000024CC           1109      JSR PRINT_OP_MOVE_L             ;Print out MOVE.L
00001C38  6000 0008               1110      BRA GROUP2_SUCCESS              ;Finish routine
00001C3C                          1111      
00001C3C                          1112  GROUP2_INVALID:    
00001C3C  4EB9 0000244A           1113      JSR INVALID_OP                  ;Invalid OP code found
00001C42                          1114  GROUP2_SUCCESS:
00001C42  4CDF 0007               1115      MOVEM.L (SP)+,D0-D2             ;Restore register
00001C46  4E75                    1116      RTS                             ;Return to stack
00001C48                          1117  C_GROUP_3:
00001C48  48E7 E000               1118      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
00001C4C                          1119      
00001C4C                          1120  CHECK_OP_MOVEA_W:
00001C4C  3038 10A0               1121      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001C50  0240 F000               1122      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00001C54  B07C 3000               1123      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
00001C58  4EF9 00001C5E           1124      JMP      FIND_MOVEA_W_DIFF     ;Custom routine to differentiate MOVE and MOVEA
00001C5E                          1125  
00001C5E                          1126      
00001C5E                          1127  FIND_MOVEA_W_DIFF:                 ;Finds difference between MOVEA and MOVE
00001C5E  3038 10A0               1128      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001C62  323C 0007               1129      MOVE.W   #7,D1                 ;Prepare 7 bit shift to D1
00001C66  E368                    1130      LSL.W    D1,D0                 ;Truncate to find the 3 address mode bits
00001C68  E268                    1131      LSR.W    D1,D0                 ;Reposition the bits
00001C6A  323C 0006               1132      MOVE.W   #6,D1                 ;Prepare 6 bit shift to D1
00001C6E  E268                    1133      LSR.W    D1,D0                 ;Truncate to shift 3 bits to a register
00001C70  3400                    1134      MOVE.W   D0,D2                 ;Move 3 address mode bits into D6
00001C72  B47C 0001               1135      CMP.W    #$1,D2                ;Check if the address mode value is MOVEA
00001C76  6600 000C               1136      BNE      CHECK_OP_MOVE_W       ;If bits do not match, try MOVE 
00001C7A  4EB9 000024DA           1137      JSR      PRINT_OP_MOVEA_W      ;Print the OP code if it's a match
00001C80  6000 0022               1138      BRA      GROUP3_SUCCESS        ;Finish routine
00001C84                          1139      
00001C84                          1140  CHECK_OP_MOVE_W:
00001C84  3038 10A0               1141      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001C88  0240 F000               1142      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00001C8C  B07C 3000               1143      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
00001C90  6600 000C               1144      BNE      GROUP3_INVALID        ;INVALID OP code found
00001C94  4EB9 000024E8           1145      JSR      PRINT_OP_MOVE_W       ;Print the OP code if it's a match
00001C9A  6000 0008               1146      BRA      GROUP3_SUCCESS        ;Finish routine
00001C9E                          1147      
00001C9E                          1148  GROUP3_INVALID:
00001C9E  4EB9 0000244A           1149      JSR INVALID_OP                 ;INVALID OP code found
00001CA4                          1150  GROUP3_SUCCESS:
00001CA4  4CDF 0007               1151      MOVEM.L (SP)+,D0-D2            ;Restore registers from stack
00001CA8  4E75                    1152      RTS                            ;Return to stack
00001CAA                          1153  
00001CAA                          1154  C_GROUP_4:
00001CAA  2F00                    1155      MOVE.L  D0,-(SP)            ;Save registers
00001CAC                          1156      
00001CAC                          1157  CHECK_OP_STOP:
00001CAC  3038 10A0               1158      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CB0  B07C 4E72               1159      CMP.W  #$4E72,D0                ;Compare the appropriate bits
00001CB4  6700 026A               1160      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CB8  6600 0002               1161      BNE    CHECK_OP_RESET           ;Check next OP code
00001CBC                          1162      
00001CBC                          1163  CHECK_OP_RESET:
00001CBC  3038 10A0               1164      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CC0  B07C 4E70               1165      CMP.W  #$4E70,D0                ;Compare the appropriate bits
00001CC4  6700 025A               1166      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CC8  6600 0002               1167      BNE    CHECK_OP_NOP             ;Check next OP code
00001CCC                          1168      
00001CCC                          1169  CHECK_OP_NOP:
00001CCC  3038 10A0               1170      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CD0  B07C 4E71               1171      CMP.W  #$4E71,D0                ;Compare the appropriate bits
00001CD4  6700 024A               1172      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CD8  6600 0002               1173      BNE    CHECK_OP_ILLEGAL         ;Check next OP code
00001CDC                          1174      
00001CDC                          1175  CHECK_OP_ILLEGAL:
00001CDC  3038 10A0               1176      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CE0  B07C 4AFC               1177      CMP.W  #$4AFC,D0                ;Compare the appropriate bits
00001CE4  6700 023A               1178      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CE8  6600 0002               1179      BNE    CHECK_OP_RTE             ;Check next OP code
00001CEC                          1180      
00001CEC                          1181  CHECK_OP_RTE:    
00001CEC  3038 10A0               1182      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CF0  B07C 4E73               1183      CMP.W #$4E73,D0                 ;Compare the appropriate bits
00001CF4  6700 022A               1184      BEQ   GROUP4_INVALID            ;INVALID OP code found
00001CF8  6600 0002               1185      BNE   CHECK_OP_TRAPV            ;Check next OP code
00001CFC                          1186      
00001CFC                          1187  CHECK_OP_TRAPV:
00001CFC  3038 10A0               1188      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D00  B07C 4E76               1189      CMP.W  #$4E76,D0                ;Compare the appropriate bits
00001D04  6700 021A               1190      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D08  6600 0002               1191      BNE    CHECK_OP_RTR             ;Check next OP code
00001D0C                          1192      
00001D0C                          1193  CHECK_OP_RTR:
00001D0C  3038 10A0               1194      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D10  B07C 4E77               1195      CMP.W #$4E77,D0                 ;Compare the appropriate bits
00001D14  6700 020A               1196      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D18  6600 0002               1197      BNE    CHECK_OP_MOVE_FROM_SR    ;Check next OP code
00001D1C                          1198  
00001D1C                          1199  
00001D1C                          1200  CHECK_OP_MOVE_FROM_SR:
00001D1C  3038 10A0               1201      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D20  0240 FFC0               1202      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001D24  B07C 40C0               1203      CMP.W  #$40C0,D0                ;Compare the appropriate masked bits
00001D28  6700 01F6               1204      BEQ    GROUP4_INVALID           ;INVALID OP code found  
00001D2C  6600 0002               1205      BNE    CHECK_OP_MOVE_TO_CCR     ;Check next OP code
00001D30                          1206      
00001D30                          1207  CHECK_OP_MOVE_TO_CCR:
00001D30  3038 10A0               1208      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D34  0240 FFC0               1209      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001D38  B07C 44C0               1210      CMP.W  #$44C0,D0                ;Compare the appropriate masked bits
00001D3C  6700 01E2               1211      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D40  6600 0002               1212      BNE    CHECK_OP_MOVE_TO_SR      ;Check next OP code
00001D44                          1213      
00001D44                          1214  CHECK_OP_MOVE_TO_SR:
00001D44  3038 10A0               1215      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D48  0240 FFC0               1216      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001D4C  B07C 46C0               1217      CMP.W  #$46C0,D0                ;Compare the appropriate masked bits
00001D50  6700 01CE               1218      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D54  6600 0002               1219      BNE    CHECK_OP_NEGX            ;Check next OP code
00001D58                          1220      
00001D58                          1221  CHECK_OP_NEGX:
00001D58  3038 10A0               1222      MOVE.W CUR_OP_CODE,D0            ;Move current instruction set into D0
00001D5C  0240 FF00               1223      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001D60  B07C 4000               1224      CMP.W  #$4000,D0                ;Compare the appropriate masked bits
00001D64  6700 01BA               1225      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D68  6600 0002               1226      BNE    CHECK_OP_CLR             ;Check next OP code
00001D6C                          1227      
00001D6C                          1228  CHECK_OP_CLR:
00001D6C  3038 10A0               1229      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D70  0240 FF00               1230      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001D74  B07C 4200               1231      CMP.W  #$4200,D0                ;Compare the appropriate masked bits
00001D78  6700 01A6               1232      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D7C  6600 0002               1233      BNE    CHECK_OP_NOT             ;Check next OP code
00001D80                          1234      
00001D80                          1235  CHECK_OP_NOT:
00001D80  3038 10A0               1236      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D84  0240 FF00               1237      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001D88  B07C 4600               1238      CMP.W  #$4600,D0                ;Compare the appropriate masked bits
00001D8C  6700 0192               1239      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D90  6600 0002               1240      BNE    CHECK_OP_EXT             ;Check next OP code
00001D94                          1241      
00001D94                          1242  CHECK_OP_EXT:
00001D94  3038 10A0               1243      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D98  0240 FF88               1244      ANDI.W #$FF88,D0                ;Mask relevant bits to D0
00001D9C  B07C 4880               1245      CMP.W  #$4880,D0                ;Compare the appropriate masked bits
00001DA0  6700 017E               1246      BEQ    GROUP4_INVALID           ;INVALID OP code BIT_CHECK_EXT
00001DA4  6600 001C               1247      BNE    CHECK_OP_NBCD            ;Check next OP code
00001DA8                          1248  
00001DA8                          1249  BIT_CHECK_EXT:    
00001DA8  3038 10A0               1250      MOVE.W CUR_OP_CODE,D0           ;This is a special case to check against MOVEM
00001DAC  323C 000A               1251      MOVE.W #10,D1                   ;Prepare a 10 bit shift into D1
00001DB0  E368                    1252      LSL.W  D1,D0                    ;Shift D0 left 10 bits
00001DB2  E068                    1253      LSR.W  D0,D0                    ;Reposition D0
00001DB4  E648                    1254      LSR.W  #3,D0                    ;Shift D0 3 bits
00001DB6  B078 0000               1255      CMP.W  %000,D0                  ;Check the specific bits needed to differentiate EXT
00001DBA  6700 0164               1256      BEQ    GROUP4_INVALID           ;This means that this OP code is EXT
00001DBE  6600 0146               1257      BNE    CHECK_OP_MOVEM           ;This is the only other possibility 
00001DC2                          1258      
00001DC2                          1259  CHECK_OP_NBCD:
00001DC2  3038 10A0               1260      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DC6  0240 FFC0               1261      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0           
00001DCA  B07C 4800               1262      CMP.W  #$4800,D0                ;Compare the appropriate masked bits
00001DCE  6700 0150               1263      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DD2  6600 0002               1264      BNE    CHECK_OP_SWAP            ;Check next OP code
00001DD6                          1265      
00001DD6                          1266  CHECK_OP_SWAP:                      ; This must go before CHECK_OP PEA as first 3 nibbles can be equivalent
00001DD6  3038 10A0               1267      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DDA  0240 FF48               1268      ANDI.W #$FF48,D0                ;Mask relevant bits to D0
00001DDE  B07C 4840               1269      CMP.W  #$4840,D0                ;Compare the appropriate masked bits
00001DE2  6700 013C               1270      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DE6  6600 0002               1271      BNE    CHECK_OP_PEA             ;Check next OP code
00001DEA                          1272   
00001DEA                          1273  CHECK_OP_PEA:                       ;This must go after CHECK_OP_SWAP as first 3 nibbles can be equivalent
00001DEA  3038 10A0               1274      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DEE  0240 FF40               1275      ANDI.W #$FF40,D0                ;Mask relevant bits to D0
00001DF2  B07C 4840               1276      CMP.W  #$4840,D0                ;Compare the appropriate masked bits
00001DF6  6700 0128               1277      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DFA  6600 0002               1278      BNE    CHECK_OP_TAS             ;Check next OP code
00001DFE                          1279      
00001DFE                          1280  CHECK_OP_TAS:
00001DFE  3038 10A0               1281      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E02  0240 FFC0               1282      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001E06  B07C 4AC0               1283      CMP.W  #$4AC0,D0                ;Compare the appropriate masked bits
00001E0A  6700 0114               1284      BEQ    GROUP4_INVALID           ;INVALID OP code
00001E0E  6600 0002               1285      BNE    CHECK_OP_TST             ;Check next OP code
00001E12                          1286  
00001E12                          1287  CHECK_OP_TST:                       ;This must go after CHECK_OP_TAS as first 2 nibbles are equivalent
00001E12  3038 10A0               1288      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E16  0240 FF00               1289      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001E1A  B07C 4A00               1290      CMP.W  #$4A00,D0                ;Compare the appropriate masked bits
00001E1E  6700 0100               1291      BEQ    GROUP4_INVALID           ;INVALID OP code
00001E22  6600 0002               1292      BNE    CHECK_OP_TRAP            ;Check next OP code
00001E26                          1293      
00001E26                          1294  CHECK_OP_TRAP:
00001E26  3038 10A0               1295      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E2A  0240 FFF0               1296      ANDI.W #$FFF0,D0                ;Mask relevant bits to D0
00001E2E  B07C 4E40               1297      CMP.W  #$4E40,D0                ;Compare the appropriate masked bits
00001E32  6700 00EC               1298      BEQ    GROUP4_INVALID           ;INVALID OP code
00001E36  6600 0002               1299      BNE    CHECK_OP_LINK            ;Check next OP code
00001E3A                          1300      
00001E3A                          1301  CHECK_OP_LINK:
00001E3A  3038 10A0               1302      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E3E  0240 FFF8               1303      ANDI.W #$FFF8,D0                ;Mask relevant bits to D0
00001E42  B07C 4E50               1304      CMP.W  #$4E50,D0                ;Compare the appropriate masked bits
00001E46  6700 00D8               1305      BEQ    GROUP4_INVALID           ;INVALID OP code
00001E4A  6600 0002               1306      BNE    CHECK_OP_UNLK            ;Check next OP code
00001E4E                          1307  
00001E4E                          1308  CHECK_OP_UNLK:
00001E4E  3038 10A0               1309      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E52  0240 FFF8               1310      ANDI.W #$FFF8,D0                ;Mask relevant bits to D0
00001E56  B07C 4E58               1311      CMP.W  #$4E58,D0                ;Compare the appropriate masked bits
00001E5A  6700 00C4               1312      BEQ    GROUP4_INVALID           ;INVALID OP code
00001E5E  6600 0002               1313      BNE    CHECK_OP_MOVE_USP        ;Check next OP
00001E62                          1314      
00001E62                          1315  CHECK_OP_MOVE_USP:
00001E62  3038 10A0               1316      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E66  0240 FFF0               1317      ANDI.W #$FFF0,D0                ;Mask relevant bits to D0
00001E6A  B07C 4E60               1318      CMP.W  #$4E60,D0                ;Compare the appropriate masked bits
00001E6E  6700 00B0               1319      BEQ    GROUP4_INVALID           ;INVALID OP code
00001E72  6600 0002               1320      BNE    CHECK_OP_JMP             ;Check next OP
00001E76                          1321  
00001E76                          1322  CHECK_OP_JMP:
00001E76  3038 10A0               1323       MOVE.W CUR_OP_CODE,D0          ;Move current instruction set into D0
00001E7A  0240 FFC0               1324       ANDI.W #$FFC0,D0               ;Mask relevant bits to D0
00001E7E  B07C 4EC0               1325       CMP.W  #$4EC0,D0               ;Compare the appropriate masked bits
00001E82  6700 009C               1326       BEQ    GROUP4_INVALID          ;INVALID OP code
00001E86  6600 0002               1327       BNE    CHECK_OP_CHK            ;Check next OP code
00001E8A                          1328       
00001E8A                          1329  CHECK_OP_CHK:
00001E8A  3038 10A0               1330      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001E8E  0240 F1C0               1331      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
00001E92  B07C 4180               1332      CMP.W   #$4180,D0               ;Compare the appropriate masked bits
00001E96  6700 05B2               1333      BEQ     INVALID_OP              ;INVALID OP code
00001E9A  6600 0002               1334      BNE     CHECK_OP_RTS            ;Check next OP code
00001E9E                          1335  
00001E9E                          1336  CHECK_OP_RTS:
00001E9E  3038 10A0               1337      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001EA2  B07C 4E75               1338      CMP.W  #$4E75,D0                ;Mask exact bits for RTS    
00001EA6  6600 000C               1339      BNE    CHECK_OP_LEA             ;If it's equal check next code
00001EAA  4EB9 0000250A           1340      JSR    PRINT_OP_RTS             ;Print out OP code
00001EB0  6000 007A               1341      BRA    GROUP4_SUCCESS           ;Finish routine
00001EB4                          1342   
00001EB4                          1343  CHECK_OP_LEA:
00001EB4  3038 10A0               1344      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001EB8  0240 F1C0               1345      ANDI.W #$F1C0,D0                ;Mask appropriate bits
00001EBC  B07C 41C0               1346      CMP.W  #$41C0,D0                ;Compare masked bits
00001EC0  6600 000C               1347      BNE    CHECK_OP_JSR             ;Check next OP code
00001EC4  4EB9 0000251E           1348      JSR    PRINT_OP_LEA             ;Print out OP code
00001ECA  6000 0060               1349      BRA    GROUP4_SUCCESS           ;Finish routine
00001ECE                          1350   
00001ECE                          1351  CHECK_OP_JSR:
00001ECE  3038 10A0               1352      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001ED2  0240 FFC0               1353      ANDI.W #$FFC0,D0                ;Mask appropriate bits
00001ED6  B07C 4E80               1354      CMP.W  #$4E80,D0                ;Compare masked bits
00001EDA  6600 000C               1355      BNE    CHECK_OP_NEG             ;Check next OP code
00001EDE  4EB9 000024F6           1356      JSR    PRINT_OP_JSR             ;Print out OP code
00001EE4  6000 0046               1357      BRA    GROUP4_SUCCESS           ;Finish routine
00001EE8                          1358      
00001EE8                          1359  CHECK_OP_NEG:
00001EE8  3038 10A0               1360      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001EEC  0240 FF00               1361      ANDI.W #$FF00,D0                ;Mask appropriate bits
00001EF0  B07C 4400               1362      CMP.W  #$4400,D0                ;Compare masked bits
00001EF4  6600 0010               1363      BNE    CHECK_OP_MOVEM           ;Check next OP code
00001EF8  4EB8 18D4               1364      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Find size field
00001EFC  4EB9 00002532           1365      JSR    PRINT_OP_NEG             ;Print out OP code
00001F02  6000 0028               1366      BRA    GROUP4_SUCCESS           ;Finish routine
00001F06                          1367      
00001F06                          1368  CHECK_OP_MOVEM:
00001F06  3038 10A0               1369      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001F0A  0240 FB80               1370      ANDI.W #$FB80,D0                ;Mask appropriate bits
00001F0E  B07C 4880               1371      CMP.W  #$4880,D0                ;Compare masked bits
00001F12  6600 0536               1372      BNE    INVALID_OP               ;If no code is found, it is invalid
00001F16  4EB9 00002546           1373      JSR    PRINT_OP_MOVEM_W         ;Print out OP code
00001F1C  6000 000E               1374      BRA    GROUP4_SUCCESS           ;Finish routine
00001F20                          1375      
00001F20                          1376  GROUP4_INVALID:
00001F20  4EB9 0000244A           1377      JSR INVALID_OP                  ;INVALID op code has been found, set IS_VALID to 0
00001F26  4EF9 00001F2C           1378      JMP GROUP4_SUCCESS 
00001F2C                          1379  GROUP4_SUCCESS:
00001F2C  4CDF 0001               1380      MOVEM.L (SP)+,D0                ;Restore saved registers
00001F30  4E75                    1381      RTS                             ;Return to stack
00001F32                          1382  C_GROUP_5:
00001F32  48E7 8000               1383      MOVEM.L D0,-(SP)                ;Save registers to stack
00001F36                          1384  CHECK_OP_DBcc:                      ;These are ordered first due to checking bits 7-6
00001F36  3038 10A0               1385      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001F3A  0240 F0C8               1386      ANDI.W #$F0C8,D0                ;Mask appropriate bits
00001F3E  B07C 50C8               1387      CMP.W  #$50C8,D0                ;Compare appropriate masked bits
00001F42  6700 004C               1388      BEQ    GROUP5_INVALID           ;INVALID op code found
00001F46  6600 0002               1389      BNE    CHECK_OP_Scc             ;Check next OP code
00001F4A                          1390  
00001F4A                          1391  CHECK_OP_Scc:
00001F4A  3038 10A0               1392      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001F4E  0240 F0C0               1393      ANDI.W #$F0C0,D0                ;Mask appropriate bits
00001F52  B07C 50C0               1394      CMP.W  #$50C0,D0                ;Compare appropriate masked bits
00001F56  6700 0038               1395      BEQ     GROUP5_INVALID          ;INVALID OP code found
00001F5A  6600 0002               1396      BNE     CHECK_OP_ADDQ           ;Check next OP code
00001F5E                          1397  
00001F5E                          1398  CHECK_OP_ADDQ:
00001F5E  3038 10A0               1399      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001F62  0240 F100               1400      ANDI.W #$F100,D0                ;Mask appropriate bits
00001F66  B07C 5000               1401      CMP.W  #$5000,D0                ;Compare appropriate masked bits
00001F6A  6700 0024               1402      BEQ    GROUP5_INVALID           ;INVALID OP code found
00001F6E  6600 0002               1403      BNE    CHECK_OP_SUBQ            ;Check next OP code
00001F72                          1404  
00001F72                          1405  CHECK_OP_SUBQ     
00001F72  3038 10A0               1406      MOVE.W  CUR_OP_CODE,D0          ;Actual check for SUBQ
00001F76  0240 F100               1407      ANDI.W #$F100,D0                ;Bitmask check for SUBQ
00001F7A  B07C 5100               1408      CMP.W  #$5100,D0                ;Compare the proper value
00001F7E  6600 0010               1409      BNE    GROUP5_INVALID           ;Else the operand is invalid
00001F82  4EB8 18D4               1410      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Find size bit to print
00001F86  4EB9 00002562           1411      JSR    PRINT_OP_SUBQ            ;If equal print it out
00001F8C  6000 0008               1412      BRA    GROUP5_SUCCESS           ;Finish routine
00001F90                          1413      
00001F90                          1414  GROUP5_INVALID: 
00001F90  4EB9 0000244A           1415      JSR INVALID_OP                  ;INVALID OP has been found, set IS_VALID to 0
00001F96                          1416  GROUP5_SUCCESS:
00001F96  4CDF 0001               1417      MOVEM.L (SP)+,D0                ;Restore registers from stack
00001F9A  4E75                    1418      RTS                             ;Return to stack
00001F9C                          1419      
00001F9C                          1420  C_GROUP_6:
00001F9C  48E7 8000               1421      MOVEM.L D0,-(SP)            ;Save register to stack
00001FA0                          1422  CHECK_OP_BSR:
00001FA0  3038 10A0               1423      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set to D0
00001FA4  0240 FF00               1424      ANDI.W  #$FF00,D0           ;Mask appropriate bits
00001FA8  B07C 6100               1425      CMP.W   #$6100,D0           ;Compare masked bits
00001FAC  6700 0088               1426      BEQ     GROUP6_INVALID      ;INVALID OP code found
00001FB0  6600 0002               1427      BNE     CHECK_OP_BRA        ;Check next OP code
00001FB4                          1428      
00001FB4                          1429  CHECK_OP_BRA:
00001FB4  3038 10A0               1430      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D0       
00001FB8  0240 FF00               1431      ANDI.W  #$FF00,D0           ;Mask appropriate bits
00001FBC  B07C 6000               1432      CMP.W   #$6000,D0           ;Compare masked bits
00001FC0  6600 000C               1433      BNE     CHECK_OP_BCS        ;Check next OP code
00001FC4  4EB9 000025C6           1434      JSR     PRINT_OP_BRA        ;Print out OP code
00001FCA  6000 0070               1435      BRA     GROUP6_SUCCESS      ;Finish routine
00001FCE                          1436      
00001FCE                          1437  CHECK_OP_BCS:
00001FCE  3038 10A0               1438      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001FD2  0240 FF00               1439      ANDI.W #$FF00,D0            ;Mask appropriate bits
00001FD6  B07C 6500               1440      CMP.W  #$6500,D0            ;Compare masked bits
00001FDA  6600 000C               1441      BNE    CHECK_OP_BGE         ;Check next OP code
00001FDE  4EB9 00002576           1442      JSR    PRINT_OP_BCS         ;Print out OP code
00001FE4  6000 0056               1443      BRA    GROUP6_SUCCESS       ;Finish routine
00001FE8                          1444  
00001FE8                          1445      
00001FE8                          1446  CHECK_OP_BGE:
00001FE8  3038 10A0               1447      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001FEC  0240 FF00               1448      ANDI.W #$FF00,D0            ;Mask appropriate bits
00001FF0  B07C 6C00               1449      CMP.W  #$6C00,D0            ;Compare masked bits
00001FF4  6600 000C               1450      BNE    CHECK_OP_BLT         ;Check next OP code
00001FF8  4EB9 0000258A           1451      JSR    PRINT_OP_BGE         ;Print out OP code
00001FFE  6000 003C               1452      BRA    GROUP6_SUCCESS       ;Finish routine
00002002                          1453      
00002002                          1454      
00002002                          1455  CHECK_OP_BLT:
00002002  3038 10A0               1456      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00002006  0240 FF00               1457      ANDI.W #$FF00,D0            ;Mask appropriate bits
0000200A  B07C 6D00               1458      CMP.W  #$6D00,D0            ;Compare masked bits
0000200E  6600 000C               1459      BNE    CHECK_OP_BVC         ;Check next OP code
00002012  4EB9 0000259E           1460      JSR    PRINT_OP_BLT         ;Print out OP code
00002018  6000 0022               1461      BRA    GROUP6_SUCCESS       ;Finish routine
0000201C                          1462      
0000201C                          1463  CHECK_OP_BVC:
0000201C  3038 10A0               1464      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00002020  0240 FF00               1465      ANDI.W #$FF00,D0            ;Mask appropriate bits
00002024  B07C 6800               1466      CMP.W  #$6800,D0            ;Compare masked bits
00002028  6600 000C               1467      BNE    GROUP6_INVALID       ;Check next OP code
0000202C  4EB9 000025B2           1468      JSR    PRINT_OP_BVC         ;Print out OP code
00002032  6000 0008               1469      BRA    GROUP6_SUCCESS       ;Finish routine
00002036                          1470      
00002036                          1471  GROUP6_INVALID:
00002036  4EB9 0000244A           1472      JSR    INVALID_OP           ;INVALID OP code found, set IS_VALID to 0
0000203C                          1473  GROUP6_SUCCESS:
0000203C  4CDF 0001               1474      MOVEM.L (SP)+,D0            ;Restore registers from stack
00002040  4E75                    1475      RTS                         ;Return from stack
00002042                          1476      
00002042                          1477  C_GROUP_7:
00002042  48E7 8000               1478      MOVEM.L D0,-(SP)            ;Save register to stack
00002046                          1479      
00002046                          1480  CHECK_OP_MOVEQ
00002046  3038 10A0               1481      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set to D0
0000204A  0240 F100               1482      ANDI.W #$F100,D0            ;Mask appropriate bits
0000204E  B07C 7000               1483      CMP.W  #$7000,D0            ;Compare masked bits
00002052  6600 0006               1484      BNE    GROUP7_INVALID       ;INVALID OP code found
00002056  6700 0008               1485      BEQ    GROUP7_SUCCESS       ;Finish routine
0000205A                          1486      
0000205A                          1487  GROUP7_INVALID:
0000205A  4EB9 0000244A           1488      JSR INVALID_OP              ;INVALID OP code found, set IS_VALID to 0
00002060                          1489  GROUP7_SUCCESS:    
00002060  4CDF 0001               1490      MOVEM.L (SP)+,D0            ;Restore registers from stack
00002064  4E75                    1491      RTS                         ;Return from stack
00002066                          1492  C_GROUP_8:
00002066  48E7 8000               1493      MOVEM.L D0,-(SP)
0000206A                          1494  CHECK_OP_DIVU:
0000206A  3038 10A0               1495      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
0000206E  0240 F1C0               1496      ANDI.W  #$F1C0,D0                   ;Mask appropriate bits
00002072  B07C 80C0               1497      CMP.W   #$80C0,D0                   ;Compare masked bits
00002076  6700 0042               1498      BEQ     GROUP8_INVALID              ;INVALID OP code found
0000207A  6600 0002               1499      BNE     CHECK_OP_SBCD               ;Check next OP code
0000207E                          1500  
0000207E                          1501  CHECK_OP_SBCD:
0000207E  3038 10A0               1502      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00002082  0240 F1F0               1503      ANDI.W  #$F1F0,D0                   ;Mask appropriate bits
00002086  B07C 8100               1504      CMP.W   #$8100,D0                   ;Compare masked bits
0000208A  6700 002E               1505      BEQ     GROUP8_INVALID              ;INVALID OP code found
0000208E  6600 0002               1506      BNE     CHECK_OP_DIVS               ;Check next OP code
00002092                          1507      
00002092                          1508  CHECK_OP_DIVS:
00002092  3038 10A0               1509      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00002096  0240 F1C0               1510      ANDI.W  #$F1C0,D0                   ;Mask appropriate bits
0000209A  B07C 81C0               1511      CMP.W   #$81C0,D0                   ;Compare masked bits
0000209E  6600 000C               1512      BNE     CHECK_OP_OR                 ;Check next OP code
000020A2  4EB9 000025DA           1513      JSR     PRINT_OP_DIVS               ;OP Code found
000020A8  6000 0016               1514      BRA     GROUP8_SUCCESS
000020AC                          1515  CHECK_OP_OR:                            ;At this point only remaining $8 code is OR
000020AC  4EB8 18D4               1516      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Finding size bit to print out
000020B0  4EB9 000025E8           1517      JSR     PRINT_OP_OR                 ;Print out OR
000020B6  6000 0008               1518      BRA     GROUP8_SUCCESS              ;Finish routine
000020BA                          1519  GROUP8_INVALID:
000020BA  4EB9 0000244A           1520       JSR     INVALID_OP                 ;INVALID OP code found, set IS_VALID to 0
000020C0                          1521  GROUP8_SUCCESS:
000020C0  4CDF 0001               1522       MOVEM.L (SP)+,D0                   ;Restore register from stack
000020C4  4E75                    1523       RTS                                ;Return to stack
000020C6                          1524       
000020C6                          1525  C_GROUP_9:
000020C6  48E7 C000               1526      MOVEM.L D0-D1,-(SP)                 ;Save the registers
000020CA                          1527  CHECK_OP_SUBA:                          ;Check SUBA first as it has static bits
000020CA  3038 10A0               1528      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000020CE  0240 F0C0               1529      ANDI.W  #$F0C0,D0                   ;Mask appropriate bits
000020D2  B07C 90C0               1530      CMP.W   #$90C0,D0                   ;Compare masked bits
000020D6  6700 0042               1531      BEQ     GROUP9_INVALID              ;INVALID OP has been found
000020DA  6600 0002               1532      BNE     CHECK_OP_SUBX               ;Check next OP
000020DE                          1533  
000020DE                          1534  CHECK_OP_SUBX:
000020DE  3038 10A0               1535      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000020E2  0240 F130               1536      ANDI.W  #$F130,D0                   ;Mask appropriate bits
000020E6  B07C 9100               1537      CMP.W   #$9100,D0                   ;Compare masked bits
000020EA  6000 0002               1538      BRA     BIT_CHECK_SUBX              ;Checking if this code is SUBX through bit shifts
000020EE                          1539      
000020EE                          1540  BIT_CHECK_SUBX:    
000020EE  3038 10A0               1541      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000020F2  323C 0007               1542      MOVE.W  #7,D1                       ;Prepare a shift of 7 bits into D1
000020F6  E368                    1543      LSL.W   D1,D0                       ;Shift left 7 bits truncate 15-9 bits
000020F8  E268                    1544      LSR.W   D1,D0                       ;Reposition D0
000020FA  E848                    1545      LSR.W   #4,D0                       ;Truncate 4 right most bits to
000020FC  0240 FF18               1546      ANDI.W  #$FF18,D0                   ;Compare remaining static bits
00002100  B07C 0018               1547      CMP.W   #$0018,D0                   ;If equal to this value it's SUBX
00002104  6700 0014               1548      BEQ     GROUP9_INVALID              ;INVALID OP code found
00002108  6600 0002               1549      BNE     CHECK_OP_SUB                ;Not can only be SUB here
0000210C                          1550      
0000210C                          1551  CHECK_OP_SUB:                           ;At this point only remaining $9 is SUB
0000210C  4EB8 18D4               1552      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find the size bit to print out
00002110  4EB9 000025FC           1553      JSR     PRINT_OP_SUB                ;Print out SUB
00002116  6000 0008               1554      BRA     GROUP9_SUCCESS              ;Finish routine
0000211A                          1555      
0000211A                          1556  GROUP9_INVALID:
0000211A  4EB9 0000244A           1557       JSR     INVALID_OP                 ;INVALID OP code found, set IS_VALID to 0
00002120                          1558  GROUP9_SUCCESS: 
00002120  4CDF 0003               1559      MOVEM.L (SP)+,D0-D1                 ;Restore registers
00002124  4E75                    1560      RTS                                 ;Return to stack
00002126                          1561  
00002126                          1562  C_GROUP_A:
00002126  4EB9 0000244A           1563      JSR INVALID_OP                      ;INVALID OP code found, set IS_VALID to 0
0000212C  4E75                    1564      RTS                                 ;Return to stack
0000212E                          1565      
0000212E                          1566  C_GROUP_B:
0000212E  48E7 8000               1567      MOVEM.L D0,-(SP)                    ;Save current registers to stack
00002132                          1568  CHECK_OP_CMPM
00002132  3038 10A0               1569      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00002136  0240 F138               1570      ANDI.W  #$F138,D0                   ;Mask appropriate bits
0000213A  B07C B108               1571      CMP.W   #$B108,D0                   ;Compare masked bits
0000213E  6700 0056               1572      BEQ     GROUPB_INVALID              ;INVALID OP found
00002142  6600 0002               1573      BNE     CHECK_OP_CMPA               ;Check next OP
00002146                          1574      
00002146                          1575  CHECK_OP_CMPA:
00002146  3038 10A0               1576      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
0000214A  0240 F0C0               1577      ANDI.W  #$F0C0,D0                   ;Mask appropriate bits
0000214E  B07C B0C0               1578      CMP.W   #$B0C0,D0                   ;Compare masked bits
00002152  6700 0042               1579      BEQ     GROUPB_INVALID              ;INVALID OP found
00002156  6600 0002               1580      BNE     CHECK_OP_EOR                ;Check next OP
0000215A                          1581  
0000215A                          1582  CHECK_OP_EOR:
0000215A  3038 10A0               1583      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
0000215E  0240 F100               1584      ANDI.W  #$F100,D0                   ;Mask appropriate bits
00002162  B07C B100               1585      CMP.W   #$B100,D0                   ;Compare masked bits
00002166  6600 0010               1586      BNE     CHECK_OP_CMP                ;Check next OP 
0000216A  4EB8 18D4               1587      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find size bit field to print out size
0000216E  4EB9 00002610           1588      JSR     PRINT_OP_EOR                ;Print out OP code
00002174  6000 0026               1589      BRA     GROUPB_SUCCESS              ;Finish routine
00002178                          1590      
00002178                          1591  CHECK_OP_CMP:
00002178  3038 10A0               1592      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
0000217C  0240 F100               1593      ANDI.W  #$F100,D0                   ;Mask appropriate bits
00002180  B07C B000               1594      CMP.W   #$B000,D0                   ;Compare masked bits
00002184  6600 0010               1595      BNE     GROUPB_INVALID              ;INVALID OP code found
00002188  4EB8 18D4               1596      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find size bit field to print out size
0000218C  4EB9 00002624           1597      JSR     PRINT_OP_CMP                ;Print out OP code
00002192  6000 0008               1598      BRA     GROUPB_SUCCESS              ;Finish routine
00002196                          1599      
00002196                          1600  GROUPB_INVALID:
00002196  4EB9 0000244A           1601      JSR     INVALID_OP                  ;INVALID OP has been found, set IS_VALID to 0
0000219C                          1602  GROUPB_SUCCESS:
0000219C  4CDF 0001               1603      MOVEM.L (SP)+,D0                    ;Restore registers from stack
000021A0  4E75                    1604      RTS                                 ;Return to stack
000021A2                          1605  C_GROUP_C:
000021A2  48E7 C000               1606      MOVEM.L D0-D1,-(SP)
000021A6                          1607      
000021A6                          1608  CHECK_OP_MULU:
000021A6  3038 10A0               1609      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
000021AA  0240 F1C0               1610      ANDI.W  #$F1C0,D0
000021AE  B07C C0C0               1611      CMP.W   #$C0C0,D0
000021B2  6700 0082               1612      BEQ     GROUPC_INVALID
000021B6  6600 0002               1613      BNE     CHECK_OP_ABCD
000021BA                          1614   
000021BA                          1615  CHECK_OP_ABCD:
000021BA  3038 10A0               1616      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
000021BE  0240 F1F0               1617      ANDI.W  #$F1F0,D0
000021C2  B07C C100               1618      CMP.W   #$C100,D0
000021C6  6700 006E               1619      BEQ     GROUPC_INVALID
000021CA  6600 0002               1620      BNE     CHECK_OP_EXG
000021CE                          1621   
000021CE                          1622  CHECK_OP_EXG:
000021CE  3038 10A0               1623      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
000021D2  0240 F130               1624      ANDI.W  #$F130,D0
000021D6  B07C C100               1625      CMP.W   #$C100,D0
000021DA  6700 0006               1626      BEQ     BIT_CHECK_EXG
000021DE  6600 0042               1627      BNE     CHECK_OP_AND
000021E2                          1628                          
000021E2                          1629  BIT_CHECK_EXG:                 ;Checks the OP mode bits 7-6 which cannot be 11 for EXG
000021E2  3038 10A0               1630      MOVE.W  CUR_OP_CODE,D0
000021E6  323C 0008               1631      MOVE.W  #8,D1
000021EA  E368                    1632      LSL.W   D1,D0
000021EC  E268                    1633      LSR.W   D1,D0
000021EE  EC48                    1634      LSR.W   #6,D0
000021F0  0240 FFF3               1635      ANDI.W  #$FFF3,D0
000021F4  B07C 0003               1636      CMP.W   #$0003,D0          ;This bit then equals MULS
000021F8  6700 000E               1637      BEQ     CHECK_OP_MULS
000021FC  B07C 0000               1638      CMP.W   #$0000,D0          ;Second comparison to check if OP mode bit is valid
00002200  6700 0020               1639      BEQ     CHECK_OP_AND       ;If it's 0 it could be OP_AND
00002204  6600 0030               1640      BNE     GROUPC_INVALID         ;Otherwise it's EXG (01,10 op bits)
00002208                          1641  CHECK_OP_MULS:
00002208  3038 10A0               1642      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000220C  0240 F1C0               1643      ANDI.W #$F1C0,D0
00002210  B07C C1C0               1644      CMP.W  #$C1C0,D0
00002214  6600 000C               1645      BNE    CHECK_OP_AND          ; OP_AND is completely dynamic outside of first nibble
00002218  4EB9 00002638           1646      JSR    PRINT_OP_MULS
0000221E  6000 001C               1647      BRA    GROUPC_SUCCESS
00002222                          1648  CHECK_OP_AND:                 ;This would be the only possible OP code left after CHECK_OP_MULS
00002222  3038 10A0               1649      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00002226  0240 F000               1650      ANDI.W  #$F000,D0
0000222A  B07C C000               1651      CMP.W   #$C000,D0
0000222E  6700 0006               1652      BEQ     GROUPC_INVALID
00002232  6000 0002               1653      BRA    GROUPC_INVALID    
00002236                          1654  GROUPC_INVALID:
00002236  4EB9 0000244A           1655      JSR     INVALID_OP
0000223C                          1656  GROUPC_SUCCESS:
0000223C  4CDF 0003               1657      MOVEM.L (SP)+,D0-D1
00002240  4E75                    1658      RTS
00002242                          1659      
00002242                          1660  C_GROUP_D:
00002242  48E7 8000               1661      MOVEM.L D0,-(SP)                ;Save registers to stack
00002246                          1662  CHECK_OP_ADDX:
00002246  3038 10A0               1663      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
0000224A  0240 F130               1664      ANDI.W #$F130,D0                ;Mask appropriate bits
0000224E  B07C D100               1665      CMP.W  #$D100,D0                ;Compare masked bits
00002252  6700 0032               1666      BEQ    GROUPD_INVALID           ;INVALID OP code found
00002256  6600 0002               1667      BNE    CHECK_OP_ADDA            ;Check next OP code
0000225A                          1668  
0000225A                          1669  CHECK_OP_ADDA:
0000225A  3038 10A0               1670      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
0000225E  0240 F0C0               1671      ANDI.W #$F0C0,D0                ;Mask applicable bits
00002262  B07C D0C0               1672      CMP.W  #$D0C0,D0                ;Compare masked bits
00002266  6600 0010               1673      BNE    CHECK_OP_ADD             ;Check next OP code
0000226A  4EB8 1914               1674      JSR    FIND_1_BIT_SIZE_8        ;Size bit to print
0000226E  4EB9 0000265A           1675      JSR    PRINT_OP_ADDA            ;Print out OP code
00002274  6000 0016               1676      BRA    GROUPD_SUCCESS           ;Finish routine
00002278                          1677  CHECK_OP_ADD:
00002278  4EB8 18D4               1678      JSR FIND_2_BIT_SIZE_7_TO_6
0000227C  4EB9 00002646           1679      JSR PRINT_OP_ADD                ;Only remaining OP in $D is ADD
00002282  6000 0008               1680      BRA GROUPD_SUCCESS
00002286                          1681      
00002286                          1682  GROUPD_INVALID:
00002286  4EB9 0000244A           1683      JSR INVALID_OP
0000228C                          1684  GROUPD_SUCCESS:
0000228C  4CDF 0001               1685      MOVEM.L (SP)+,D0                ;Restore registers from stack
00002290  4E75                    1686      RTS                             ;Return to stack
00002292                          1687      
00002292                          1688  C_GROUP_E:
00002292  48E7 8000               1689      MOVEM.L D0,-(SP)
00002296                          1690  CHECK_OP_ROXR_NO_ROT:
00002296  3038 10A0               1691      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000229A  0240 FFC0               1692      ANDI.W #$FFC0,D0
0000229E  B07C E4C0               1693      CMP.W  #$E4C0,D0
000022A2  6700 0192               1694      BEQ    GROUPE_INVALID
000022A6  6600 0002               1695      BNE    CHECK_OP_ROXL_NO_ROT
000022AA                          1696  
000022AA                          1697  CHECK_OP_ROXL_NO_ROT:
000022AA  3038 10A0               1698      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000022AE  0240 FFC0               1699      ANDI.W #$FFC0,D0
000022B2  B07C E5C0               1700      CMP.W  #$E5C0,D0
000022B6  6700 017E               1701      BEQ    GROUPE_INVALID
000022BA  6600 0002               1702      BNE    CHECK_OP_ROR_NO_ROT
000022BE                          1703  
000022BE                          1704  CHECK_OP_ROR_NO_ROT:
000022BE  3038 10A0               1705      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000022C2  0240 FFC0               1706      ANDI.W #$FFC0,D0
000022C6  B07C E6C0               1707      CMP.W  #$E6C0,D0
000022CA  6600 000C               1708      BNE    CHECK_OP_ROL_NO_ROT
000022CE  4EB9 000026D2           1709      JSR    PRINT_OP_ROR
000022D4  6000 0166               1710      BRA    GROUPE_SUCCESS
000022D8                          1711      
000022D8                          1712  CHECK_OP_ROL_NO_ROT:
000022D8  3038 10A0               1713      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000022DC  0240 FFC0               1714      ANDI.W #$FFC0,D0
000022E0  B07C E7C0               1715      CMP.W  #$E7C0,D0
000022E4  6600 000C               1716      BNE    CHECK_OP_LSR_NO_ROT
000022E8  4EB9 000026BE           1717      JSR    PRINT_OP_ROL
000022EE  6000 014C               1718      BRA    GROUPE_SUCCESS
000022F2                          1719   
000022F2                          1720  CHECK_OP_LSR_NO_ROT:
000022F2  3038 10A0               1721      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000022F6  0240 FFC0               1722      ANDI.W #$FFC0,D0
000022FA  B07C E2C0               1723      CMP.W  #$E2C0,D0
000022FE  6600 000C               1724      BNE    CHECK_OP_LSL_NO_ROT
00002302  4EB9 00002682           1725      JSR    PRINT_OP_LSR
00002308  6000 0132               1726      BRA    GROUPE_SUCCESS
0000230C                          1727  
0000230C                          1728  CHECK_OP_LSL_NO_ROT:
0000230C  3038 10A0               1729      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002310  0240 FFC0               1730      ANDI.W #$FFC0,D0
00002314  B07C E3C0               1731      CMP.W  #$E3C0,D0
00002318  6600 000C               1732      BNE    CHECK_OP_ASR_NO_ROT
0000231C  4EB9 0000266E           1733      JSR    PRINT_OP_LSL
00002322  6000 0118               1734      BRA    GROUPE_SUCCESS
00002326                          1735  
00002326                          1736  CHECK_OP_ASR_NO_ROT:
00002326  3038 10A0               1737      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000232A  0240 FFC0               1738      ANDI.W #$FFC0,D0
0000232E  B07C E0C0               1739      CMP.W  #$E0C0,D0
00002332  6600 000C               1740      BNE    CHECK_OP_ASL_NO_ROT
00002336  4EB9 00002696           1741      JSR    PRINT_OP_ASR
0000233C  6000 00FE               1742      BRA    GROUPE_SUCCESS
00002340                          1743              
00002340                          1744  CHECK_OP_ASL_NO_ROT:
00002340  3038 10A0               1745      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002344  0240 FFC0               1746      ANDI.W #$FFC0,D0
00002348  B07C E1C0               1747      CMP.W  #$E1C0,D0
0000234C  6600 000C               1748      BNE    CHECK_OP_ROXR
00002350  4EB9 000026AA           1749      JSR    PRINT_OP_ASL
00002356  6000 00E4               1750      BRA    GROUPE_SUCCESS
0000235A                          1751  
0000235A                          1752  CHECK_OP_ROXR:
0000235A  3038 10A0               1753      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000235E  0240 F118               1754      ANDI.W #$F118,D0
00002362  B07C E010               1755      CMP.W  #$E010,D0
00002366  6700 00CE               1756      BEQ    GROUPE_INVALID
0000236A  6600 0002               1757      BNE    CHECK_OP_ROXL
0000236E                          1758      
0000236E                          1759  CHECK_OP_ROXL:
0000236E  3038 10A0               1760      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002372  0240 F118               1761      ANDI.W #$F118,D0
00002376  B07C E110               1762      CMP.W  #$E110,D0
0000237A  6700 00BA               1763      BEQ    GROUPE_INVALID
0000237E  6600 0002               1764      BNE    CHECK_OP_ROR
00002382                          1765      
00002382                          1766  CHECK_OP_ROR:
00002382  3038 10A0               1767      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002386  0240 F118               1768      ANDI.W #$F118,D0
0000238A  B07C E018               1769      CMP.W  #$E018,D0
0000238E  6600 0010               1770      BNE    CHECK_OP_ROL
00002392  4EB8 18D4               1771      JSR    FIND_2_BIT_SIZE_7_TO_6     
00002396  4EB9 000026D2           1772      JSR    PRINT_OP_ROR
0000239C  6000 009E               1773      BRA    GROUPE_SUCCESS
000023A0                          1774  
000023A0                          1775  CHECK_OP_ROL:
000023A0  3038 10A0               1776      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000023A4  0240 F118               1777      ANDI.W #$F118,D0
000023A8  B07C E118               1778      CMP.W  #$E118,D0
000023AC  6600 0010               1779      BNE    CHECK_OP_LSR
000023B0  4EB8 18D4               1780      JSR    FIND_2_BIT_SIZE_7_TO_6     
000023B4  4EB9 000026BE           1781      JSR    PRINT_OP_ROL
000023BA  6000 0080               1782      BRA    GROUPE_SUCCESS
000023BE                          1783      
000023BE                          1784  CHECK_OP_LSR:
000023BE  3038 10A0               1785      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000023C2  0240 F118               1786      ANDI.W #$F118,D0
000023C6  B07C E008               1787      CMP.W  #$E008,D0
000023CA  6600 0010               1788      BNE    CHECK_OP_LSL
000023CE  4EB8 18D4               1789      JSR    FIND_2_BIT_SIZE_7_TO_6     
000023D2  4EB9 00002682           1790      JSR    PRINT_OP_LSR
000023D8  6000 0062               1791      BRA    GROUPE_SUCCESS
000023DC                          1792  
000023DC                          1793  CHECK_OP_LSL:
000023DC  3038 10A0               1794      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000023E0  0240 F118               1795      ANDI.W #$F118,D0
000023E4  B07C E108               1796      CMP.W  #$E108,D0
000023E8  6600 0010               1797      BNE    CHECK_OP_ASR
000023EC  4EB8 18D4               1798      JSR    FIND_2_BIT_SIZE_7_TO_6     
000023F0  4EB9 0000266E           1799      JSR    PRINT_OP_LSL
000023F6  6000 0044               1800      BRA    GROUPE_SUCCESS
000023FA                          1801  
000023FA                          1802  CHECK_OP_ASR:
000023FA  3038 10A0               1803      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000023FE  0240 F118               1804      ANDI.W #$F118,D0
00002402  B07C E000               1805      CMP.W  #$E000,D0
00002406  6600 0010               1806      BNE    CHECK_OP_ASL
0000240A  4EB8 18D4               1807      JSR    FIND_2_BIT_SIZE_7_TO_6     
0000240E  4EB9 00002696           1808      JSR    PRINT_OP_ASR
00002414  6000 0026               1809      BRA    GROUPE_SUCCESS
00002418                          1810  
00002418                          1811  CHECK_OP_ASL:
00002418  3038 10A0               1812      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000241C  0240 F118               1813      ANDI.W #$F118,D0
00002420  B07C E100               1814      CMP.W  #$E100,D0
00002424  6600 0010               1815      BNE    GROUPE_INVALID      ;Last possible OP code
00002428  4EB8 18D4               1816      JSR    FIND_2_BIT_SIZE_7_TO_6     
0000242C  4EB9 000026AA           1817      JSR    PRINT_OP_ASL
00002432  6000 0008               1818      BRA    GROUPE_SUCCESS
00002436                          1819  
00002436                          1820  GROUPE_INVALID:
00002436  4EB9 0000244A           1821      JSR     INVALID_OP
0000243C                          1822  GROUPE_SUCCESS:
0000243C  4CDF 0001               1823      MOVEM.L (SP)+,D0
00002440  4E75                    1824      RTS
00002442                          1825  C_GROUP_F:
00002442  4EB9 0000244A           1826      JSR INVALID_OP
00002448  4E75                    1827      RTS
0000244A                          1828      
0000244A                          1829  INVALID_OP:  ; ONLY SETS IS_VALID TO 0
0000244A  11FC 0000 10A2          1830      MOVE.B #0,IS_VALID
00002450  4E75                    1831      RTS
00002452                          1832  
00002452                          1833  
00002452                          1834  
00002452                          1835  PRINT_TO_BUFFER:
00002452  21FC 00001000 125A      1836      MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer
0000245A  4EB8 1264               1837      JSR AddStrToBuffer
0000245E  4E75                    1838      RTS
00002460                          1839      
00002460                          1840  PRINT_OP_ORI:
00002460  21FC 00002755 1256      1841      MOVE.L #P_OP_ORI, Arg_AddStrToBuffer_String
00002468  4EB8 2452               1842      JSR PRINT_TO_BUFFER
0000246C  4EB9 00002710           1843      JSR PRINT_OP_SIZE
00002472  4E75                    1844      RTS
00002474                          1845  PRINT_OP_CMPI:
00002474  21FC 0000275C 1256      1846      MOVE.L #P_OP_CMPI, Arg_AddStrToBuffer_String
0000247C  4EB8 2452               1847      JSR PRINT_TO_BUFFER
00002480  4EB9 00002710           1848      JSR PRINT_OP_SIZE
00002486  4E75                    1849      RTS
00002488                          1850  PRINT_OP_STATIC_BCLR:
00002488  21FC 00002764 1256      1851      MOVE.L #P_OP_BCLR, Arg_AddStrToBuffer_String
00002490  4EB8 2452               1852      JSR PRINT_TO_BUFFER
00002494  4EB9 00002710           1853      JSR PRINT_OP_SIZE
0000249A  4E75                    1854      RTS
0000249C                          1855      
0000249C                          1856  PRINT_OP_DYNAMIC_BCLR:
0000249C  21FC 00002764 1256      1857      MOVE.L #P_OP_BCLR, Arg_AddStrToBuffer_String
000024A4  4EB8 2452               1858      JSR PRINT_TO_BUFFER
000024A8  4EB9 00002710           1859      JSR PRINT_OP_SIZE
000024AE  4E75                    1860      RTS
000024B0                          1861  
000024B0                          1862  PRINT_OP_MOVEB:
000024B0  21FC 0000276C 1256      1863      MOVE.L #P_OP_MOVEB, Arg_AddStrToBuffer_String
000024B8  4EB8 2452               1864      JSR PRINT_TO_BUFFER
000024BC  4E75                    1865      RTS
000024BE                          1866      
000024BE                          1867  PRINT_OP_MOVEA_L:
000024BE  21FC 00002777 1256      1868      MOVE.L #P_OP_MOVEA_L, Arg_AddStrToBuffer_String
000024C6  4EB8 2452               1869      JSR PRINT_TO_BUFFER
000024CA  4E75                    1870      RTS
000024CC                          1871  PRINT_OP_MOVE_L:
000024CC  21FC 00002783 1256      1872      MOVE.L #P_OP_MOVE_L, Arg_AddStrToBuffer_String
000024D4  4EB8 2452               1873      JSR PRINT_TO_BUFFER
000024D8  4E75                    1874      RTS
000024DA                          1875      
000024DA                          1876  PRINT_OP_MOVEA_W:
000024DA  21FC 0000278E 1256      1877      MOVE.L #P_OP_MOVEA_W, Arg_AddStrToBuffer_String
000024E2  4EB8 2452               1878      JSR PRINT_TO_BUFFER
000024E6  4E75                    1879      RTS
000024E8                          1880  PRINT_OP_MOVE_W:
000024E8  21FC 0000279A 1256      1881      MOVE.L #P_OP_MOVE_W, Arg_AddStrToBuffer_String
000024F0  4EB8 2452               1882      JSR PRINT_TO_BUFFER
000024F4  4E75                    1883      RTS
000024F6                          1884  
000024F6                          1885  PRINT_OP_JSR:
000024F6  21FC 000027C4 1256      1886      MOVE.L #P_OP_JSR, Arg_AddStrToBuffer_String
000024FE  4EB8 2452               1887      JSR PRINT_TO_BUFFER
00002502  4EB9 00002710           1888      JSR PRINT_OP_SIZE
00002508  4E75                    1889      RTS
0000250A                          1890  PRINT_OP_RTS:
0000250A  21FC 000027D2 1256      1891      MOVE.L #P_OP_RTS, Arg_AddStrToBuffer_String
00002512  4EB8 2452               1892      JSR PRINT_TO_BUFFER
00002516  4EB9 00002710           1893      JSR PRINT_OP_SIZE
0000251C  4E75                    1894      RTS
0000251E                          1895  PRINT_OP_LEA:
0000251E  21FC 000027BD 1256      1896      MOVE.L #P_OP_LEA, Arg_AddStrToBuffer_String
00002526  4EB8 2452               1897      JSR PRINT_TO_BUFFER
0000252A  4EB9 00002710           1898      JSR PRINT_OP_SIZE
00002530  4E75                    1899      RTS
00002532                          1900  PRINT_OP_NEG:
00002532  21FC 000027D9 1256      1901      MOVE.L #P_OP_NEG, Arg_AddStrToBuffer_String
0000253A  4EB8 2452               1902      JSR PRINT_TO_BUFFER
0000253E  4EB9 00002710           1903      JSR PRINT_OP_SIZE
00002544  4E75                    1904      RTS
00002546                          1905  PRINT_OP_MOVEM_W:
00002546  21FC 000027A5 1256      1906      MOVE.L #P_OP_MOVEM_W, Arg_AddStrToBuffer_String
0000254E  4EB8 2452               1907      JSR PRINT_TO_BUFFER
00002552  4E75                    1908      RTS
00002554                          1909  PRINT_OP_MOVEM_L:
00002554  21FC 000027B1 1256      1910      MOVE.L #P_OP_MOVEM_L, Arg_AddStrToBuffer_String
0000255C  4EB8 2452               1911      JSR PRINT_TO_BUFFER
00002560  4E75                    1912      RTS
00002562                          1913      
00002562                          1914  PRINT_OP_SUBQ:
00002562  21FC 000027E0 1256      1915      MOVE.L #P_OP_SUBQ, Arg_AddStrToBuffer_String
0000256A  4EB8 2452               1916      JSR PRINT_TO_BUFFER
0000256E  4EB9 00002710           1917      JSR PRINT_OP_SIZE
00002574  4E75                    1918      RTS
00002576                          1919  
00002576                          1920  PRINT_OP_BCS:
00002576  21FC 000027EF 1256      1921      MOVE.L #P_OP_BCS, Arg_AddStrToBuffer_String
0000257E  4EB8 2452               1922      JSR PRINT_TO_BUFFER
00002582  4EB9 00002710           1923      JSR PRINT_OP_SIZE
00002588  4E75                    1924      RTS
0000258A                          1925  PRINT_OP_BGE:
0000258A  21FC 000027F6 1256      1926      MOVE.L #P_OP_BGE, Arg_AddStrToBuffer_String
00002592  4EB8 2452               1927      JSR PRINT_TO_BUFFER
00002596  4EB9 00002710           1928      JSR PRINT_OP_SIZE
0000259C  4E75                    1929      RTS
0000259E                          1930  PRINT_OP_BLT:
0000259E  21FC 000027FD 1256      1931      MOVE.L #P_OP_BLT, Arg_AddStrToBuffer_String
000025A6  4EB8 2452               1932      JSR PRINT_TO_BUFFER
000025AA  4EB9 00002710           1933      JSR PRINT_OP_SIZE
000025B0  4E75                    1934      RTS
000025B2                          1935  PRINT_OP_BVC:
000025B2  21FC 00002804 1256      1936      MOVE.L #P_OP_BVC, Arg_AddStrToBuffer_String
000025BA  4EB8 2452               1937      JSR PRINT_TO_BUFFER
000025BE  4EB9 00002710           1938      JSR PRINT_OP_SIZE
000025C4  4E75                    1939      RTS
000025C6                          1940  PRINT_OP_BRA:
000025C6  21FC 000027E8 1256      1941      MOVE.L #P_OP_BRA, Arg_AddStrToBuffer_String
000025CE  4EB8 2452               1942      JSR PRINT_TO_BUFFER
000025D2  4EB9 00002710           1943      JSR PRINT_OP_SIZE
000025D8  4E75                    1944      RTS
000025DA                          1945  
000025DA                          1946  
000025DA                          1947  PRINT_OP_DIVS:
000025DA  21FC 0000280B 1256      1948      MOVE.L #P_OP_DIVS, Arg_AddStrToBuffer_String
000025E2  4EB8 2452               1949      JSR PRINT_TO_BUFFER
000025E6  4E75                    1950      RTS
000025E8                          1951  PRINT_OP_OR:
000025E8  21FC 00002816 1256      1952      MOVE.L #P_OP_OR, Arg_AddStrToBuffer_String
000025F0  4EB8 2452               1953      JSR PRINT_TO_BUFFER
000025F4  4EB9 00002710           1954      JSR PRINT_OP_SIZE
000025FA  4E75                    1955      RTS
000025FC                          1956  
000025FC                          1957  PRINT_OP_SUB:
000025FC  21FC 0000281C 1256      1958      MOVE.L #P_OP_SUB, Arg_AddStrToBuffer_String
00002604  4EB8 2452               1959      JSR PRINT_TO_BUFFER
00002608  4EB9 00002710           1960      JSR PRINT_OP_SIZE
0000260E  4E75                    1961      RTS
00002610                          1962  
00002610                          1963  
00002610                          1964  PRINT_OP_EOR:
00002610  21FC 00002823 1256      1965      MOVE.L #P_OP_EOR, Arg_AddStrToBuffer_String
00002618  4EB8 2452               1966      JSR PRINT_TO_BUFFER
0000261C  4EB9 00002710           1967      JSR PRINT_OP_SIZE
00002622  4E75                    1968      RTS
00002624                          1969  PRINT_OP_CMP:
00002624  21FC 0000282A 1256      1970      MOVE.L #P_OP_CMP, Arg_AddStrToBuffer_String
0000262C  4EB8 2452               1971      JSR PRINT_TO_BUFFER
00002630  4EB9 00002710           1972      JSR PRINT_OP_SIZE
00002636  4E75                    1973      RTS
00002638                          1974  
00002638                          1975  PRINT_OP_MULS:
00002638  21FC 00002831 1256      1976      MOVE.L #P_OP_MULS, Arg_AddStrToBuffer_String
00002640  4EB8 2452               1977      JSR PRINT_TO_BUFFER
00002644  4E75                    1978      RTS
00002646                          1979  
00002646                          1980  PRINT_OP_ADD:
00002646  21FC 00002843 1256      1981      MOVE.L #P_OP_ADD, Arg_AddStrToBuffer_String
0000264E  4EB8 2452               1982      JSR PRINT_TO_BUFFER
00002652  4EB9 00002710           1983      JSR PRINT_OP_SIZE
00002658  4E75                    1984      RTS
0000265A                          1985  PRINT_OP_ADDA:
0000265A  21FC 0000283B 1256      1986      MOVE.L #P_OP_ADDA, Arg_AddStrToBuffer_String
00002662  4EB8 2452               1987      JSR PRINT_TO_BUFFER
00002666  4EB9 0000272A           1988      JSR PRINT_OP_SIZE_ADDA
0000266C  4E75                    1989      RTS
0000266E                          1990  
0000266E                          1991  
0000266E                          1992  PRINT_OP_LSL:
0000266E  21FC 00002851 1256      1993      MOVE.L #P_OP_LSL, Arg_AddStrToBuffer_String
00002676  4EB8 2452               1994      JSR PRINT_TO_BUFFER
0000267A  4EB9 00002710           1995      JSR PRINT_OP_SIZE
00002680  4E75                    1996      RTS
00002682                          1997  PRINT_OP_LSR:
00002682  21FC 0000284A 1256      1998      MOVE.L #P_OP_LSR, Arg_AddStrToBuffer_String
0000268A  4EB8 2452               1999      JSR PRINT_TO_BUFFER
0000268E  4EB9 00002710           2000      JSR PRINT_OP_SIZE
00002694  4E75                    2001      RTS
00002696                          2002  PRINT_OP_ASR:
00002696  21FC 00002858 1256      2003      MOVE.L #P_OP_ASR, Arg_AddStrToBuffer_String
0000269E  4EB8 2452               2004      JSR PRINT_TO_BUFFER
000026A2  4EB9 00002710           2005      JSR PRINT_OP_SIZE
000026A8  4E75                    2006      RTS
000026AA                          2007  PRINT_OP_ASL:
000026AA  21FC 0000285F 1256      2008      MOVE.L #P_OP_ASL, Arg_AddStrToBuffer_String
000026B2  4EB8 2452               2009      JSR PRINT_TO_BUFFER
000026B6  4EB9 00002710           2010      JSR PRINT_OP_SIZE
000026BC  4E75                    2011      RTS
000026BE                          2012  PRINT_OP_ROL:
000026BE  21FC 0000286D 1256      2013      MOVE.L #P_OP_ROL, Arg_AddStrToBuffer_String
000026C6  4EB8 2452               2014      JSR PRINT_TO_BUFFER
000026CA  4EB9 00002710           2015      JSR PRINT_OP_SIZE
000026D0  4E75                    2016      RTS
000026D2                          2017  PRINT_OP_ROR:
000026D2  21FC 00002866 1256      2018      MOVE.L #P_OP_ROR, Arg_AddStrToBuffer_String
000026DA  4EB8 2452               2019      JSR PRINT_TO_BUFFER
000026DE  4EB9 00002710           2020      JSR PRINT_OP_SIZE
000026E4  4E75                    2021      RTS
000026E6                          2022  
000026E6                          2023  
000026E6                          2024  PRINT_SIZE_BYTE:
000026E6  21FC 00002749 1256      2025      MOVE.L #P_SIZE_B, Arg_AddStrToBuffer_String
000026EE  4EB8 2452               2026      JSR PRINT_TO_BUFFER
000026F2  4E75                    2027      RTS    
000026F4                          2028  
000026F4                          2029  PRINT_SIZE_WORD:
000026F4  21FC 0000274D 1256      2030      MOVE.L #P_SIZE_W, Arg_AddStrToBuffer_String
000026FC  4EB8 2452               2031      JSR PRINT_TO_BUFFER
00002700  4E75                    2032      RTS
00002702                          2033      
00002702                          2034  PRINT_SIZE_LONG:
00002702  21FC 00002751 1256      2035      MOVE.L #P_SIZE_L, Arg_AddStrToBuffer_String
0000270A  4EB8 2452               2036      JSR PRINT_TO_BUFFER
0000270E  4E75                    2037      RTS
00002710                          2038  
00002710                          2039  PRINT_OP_SIZE:                     ;Prints current OP code byte size if applicable
00002710  0C38 0000 176C          2040      CMP.B  #%00,OP_SIZE         ;Checks for byte size
00002716  67CE                    2041      BEQ    PRINT_SIZE_BYTE      ;Print .B to buffer
00002718  0C38 0001 176C          2042      CMP.B  #%01,OP_SIZE         ;Check for word size
0000271E  67D4                    2043      BEQ    PRINT_SIZE_WORD      ;Print .W to buffer
00002720  0C38 0002 176C          2044      CMP.B  #%10,OP_SIZE         ;Check for long size
00002726  67DA                    2045      BEQ    PRINT_SIZE_LONG      ;Print .L to buffer
00002728  4E75                    2046      RTS
0000272A                          2047      
0000272A                          2048  PRINT_OP_SIZE_ADDA:                  ;Special  print for ADDA
0000272A  0C38 0000 176C          2049      CMP.B #%0,OP_SIZE
00002730  67C2                    2050      BEQ    PRINT_SIZE_WORD
00002732  66CE                    2051      BNE    PRINT_SIZE_LONG
00002734                          2052      
00002734                          2053  
00002734                          2054  
00002734                          2055  
00002734                          2056  
00002734= 20 20 20 44 41 54 ...   2057  P_INVALID_OP    DC.B    '   DATA   $',0
00002740= 46 6F 75 6E 64 20 ...   2058  OP_FOUND        DC.B    'Found OP',0 ; this should be taken out later
00002749= 2E 42 20 00             2059  P_SIZE_B        DC.B    '.B ',0
0000274D= 2E 57 20 00             2060  P_SIZE_W        DC.B    '.W ',0
00002751= 2E 4C 20 00             2061  P_SIZE_L        DC.B    '.L ',0
00002755= 20 20 20 4F 52 49 00    2062  P_OP_ORI        DC.B    '   ORI',0
0000275C= 20 20 20 43 4D 50 ...   2063  P_OP_CMPI       DC.B    '   CMPI',0
00002764= 20 20 20 42 43 4C ...   2064  P_OP_BCLR       DC.B    '   BCLR',0
0000276C= 20 20 20 4D 4F 56 ...   2065  P_OP_MOVEB      DC.B    '   MOVE.B ',0
00002777= 20 20 20 4D 4F 56 ...   2066  P_OP_MOVEA_L    DC.B    '   MOVEA.L ',0 
00002783= 20 20 20 4D 4F 56 ...   2067  P_OP_MOVE_L     DC.B    '   MOVE.L ',0
0000278E= 20 20 20 4D 4F 56 ...   2068  P_OP_MOVEA_W    DC.B    '   MOVEA.W ',0
0000279A= 20 20 20 4D 4F 56 ...   2069  P_OP_MOVE_W     DC.B    '   MOVE.W ',0
000027A5= 20 20 20 4D 4F 56 ...   2070  P_OP_MOVEM_W    DC.B    '   MOVEM.W ',0
000027B1= 20 20 20 4D 4F 56 ...   2071  P_OP_MOVEM_L    DC.B    '   MOVEM.L ',0
000027BD= 20 20 20 4C 45 41 00    2072  P_OP_LEA        DC.B    '   LEA',0
000027C4= 20 20 20 4A 53 52 00    2073  P_OP_JSR        DC.B    '   JSR',0
000027CB= 20 20 20 4E 4F 50 00    2074  P_OP_NOP        DC.B    '   NOP',0
000027D2= 20 20 20 52 54 53 00    2075  P_OP_RTS        DC.B    '   RTS',0
000027D9= 20 20 20 4E 45 47 00    2076  P_OP_NEG        DC.B    '   NEG',0
000027E0= 20 20 20 53 55 42 ...   2077  P_OP_SUBQ       DC.B    '   SUBQ',0
000027E8= 20 20 20 42 52 41 00    2078  P_OP_BRA        DC.B    '   BRA',0
000027EF= 20 20 20 42 43 53 00    2079  P_OP_BCS        DC.B    '   BCS',0
000027F6= 20 20 20 42 47 45 00    2080  P_OP_BGE        DC.B    '   BGE',0
000027FD= 20 20 20 42 4C 54 00    2081  P_OP_BLT        DC.B    '   BLT',0
00002804= 20 20 20 42 56 43 00    2082  P_OP_BVC        DC.B    '   BVC',0
0000280B= 20 20 20 44 49 56 ...   2083  P_OP_DIVS       DC.B    '   DIVS.W ',0
00002816= 20 20 20 4F 52 00       2084  P_OP_OR         DC.B    '   OR',0
0000281C= 20 20 20 53 55 42 00    2085  P_OP_SUB        DC.B    '   SUB',0
00002823= 20 20 20 45 4F 52 00    2086  P_OP_EOR        DC.B    '   EOR',0
0000282A= 20 20 20 43 4D 50 00    2087  P_OP_CMP        DC.B    '   CMP',0
00002831= 20 20 20 4D 55 4C ...   2088  P_OP_MULS       DC.B    '   MULS.W',0
0000283B= 20 20 20 41 44 44 ...   2089  P_OP_ADDA       DC.B    '   ADDA',0
00002843= 20 20 20 41 44 44 00    2090  P_OP_ADD        DC.B    '   ADD',0
0000284A= 20 20 20 4C 53 52 00    2091  P_OP_LSR        DC.B    '   LSR',0
00002851= 20 20 20 4C 53 4C 00    2092  P_OP_LSL        DC.B    '   LSL',0
00002858= 20 20 20 41 53 52 00    2093  P_OP_ASR        DC.B    '   ASR',0
0000285F= 20 20 20 41 53 4C 00    2094  P_OP_ASL        DC.B    '   ASL',0
00002866= 20 20 20 52 4F 52 00    2095  P_OP_ROR        DC.B    '   ROR',0
0000286D= 20 20 20 52 4F 4C 00    2096  P_OP_ROL        DC.B    '   ROL',0
00002874                          2097   
00002874                          2098  
00002874                          2099  
00002874                          2100  
00002874                          2101  
00002874                          2102  
00002874                          2103  
00002874                          2104  
00002874                          2105  
00002874                          2106  
00002874                          2107  
00002874                          2108  -------------------- end include --------------------
00002874                          2109      INCLUDE "EA_ver2.x68"
00002874                          2110  
00002874                          2111  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00002874                          2112  
00002874                          2113  
00002874= 41                      2114  ADDRESS         DC.B    $41
00002875= 44                      2115  DATA            DC.B    $44
00002876                          2116  
00002876= 28                      2117  PTHSIS_OPEN     DC.B    $28
00002877= 29                      2118  PTHSIS_CLSD     DC.B    $29
00002878= 24                      2119  HEX_SIGN        DC.B    $24
00002879= 23                      2120  IMMDTE_VALU     DC.B    $23
0000287A= 2B                      2121  PLUS_SIGN       DC.B    $2B
0000287B= 2D                      2122  MINUS_SIGN      DC.B    $2D
0000287C                          2123  
0000287C= 2C                      2124  COMMA           DC.B    $2C
0000287D= 20                      2125  SPACE           DC.B    $20
0000287E                          2126  
0000287E  =0000000D               2127  CR              EQU     $0D              ; ASCII code for carriage return
0000287E  =0000000A               2128  LF              EQU     $0A              ; ASCII code for line feed
0000287E                          2129  
0000287E                          2130  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000287E                          2131  
0000287E                          2132  
0000287E                          2133  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000287E                          2134  TRAILING_SIZE   DS.W    1 * Size of any immediate or
00002880                          2135                            * address values. Immediate or address
00002880                          2136                            * value of a BYTE is still processed as
00002880                          2137                            * WORD because the trailing bytes
00002880                          2138                            * are represented as a word regardless.
00002880                          2139                            * $1 = BYTE, $2 = WORD, $4 = LONG
00002880                          2140  ;START_ADDRESS   EQU     $4000 * Used to parse through the entire instruction
00002880                          2141  ;END_ADDRESS     EQU     $5000
00002880                          2142  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00002880                          2143   
00002880                          2144  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00002880                          2145  main_EA:
00002880  4EB8 1990               2146      JSR PARSE_EA_CONSTANT_BITS    
00002884                          2147      ;MOVE.W  A5, D0
00002884                          2148      ;ADDI.B  #2, D0
00002884                          2149      ;MOVEA.L D0, A5
00002884                          2150      *MOVEA.L #START_ADDRESS, A5
00002884                          2151      
00002884                          2152  
00002884  4EB9 0000288E           2153      JSR     CHECK_XXXX
0000288A                          2154  EXT 
0000288A  4EF8 11C2               2155      JMP check_print * This EXT alias is critical for NOT loading error
0000288E                          2156  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000288E                          2157  
0000288E                          2158  
0000288E                          2159  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000288E                          2160  
0000288E                          2161  CHECK_XXXX:
0000288E  0C38 0008 176D          2162      CMPI.B  #$8, MNEMONIC
00002894  6D00 0008               2163      BLT     CHECK_0XXX
00002898  4EF9 000028AE           2164      JMP     CHECK_1XXX
0000289E                          2165  
0000289E                          2166  CHECK_0XXX:
0000289E  0C38 0004 176D          2167      CMPI.B  #$4, MNEMONIC
000028A4  6D00 004C               2168      BLT     CHECK_00XX
000028A8  4EF9 00002900           2169      JMP     CHECK_01XX
000028AE                          2170  
000028AE                          2171  CHECK_1XXX:
000028AE  0C38 0008 176D          2172      CMPI.B  #$8, MNEMONIC
000028B4  6700 0302               2173      BEQ     LOAD_1000
000028B8  0C38 0009 176D          2174      CMPI.B  #$9, MNEMONIC
000028BE  6700 02F2               2175      BEQ     LOAD_1001
000028C2  0C38 000B 176D          2176      CMPI.B  #$B, MNEMONIC
000028C8  6700 02E2               2177      BEQ     LOAD_1011
000028CC  0C38 000C 176D          2178      CMPI.B  #$C, MNEMONIC
000028D2  6700 02D2               2179      BEQ     LOAD_1100
000028D6  0C38 000D 176D          2180      CMPI.B  #$D, MNEMONIC
000028DC  6700 026C               2181      BEQ     LOAD_1101
000028E0  0C38 000E 176D          2182      CMPI.B  #$E, MNEMONIC
000028E6  6700 0038               2183      BEQ     LOAD_1110
000028EA                          2184      
000028EA  4EF9 00003270           2185      JMP     INVALID
000028F0                          2186      
000028F0  4E75                    2187      RTS
000028F2                          2188  
000028F2                          2189  CHECK_00XX:
000028F2  0C38 0001 176D          2190      CMPI.B  #$1, MNEMONIC
000028F8  6D00 0596               2191      BLT     LOAD_0000
000028FC  6C00 06FA               2192      BGE     LOAD_00XX
00002900                          2193  
00002900                          2194  CHECK_01XX:
00002900  0C38 0004 176D          2195      CMPI.B  #%0100, MNEMONIC
00002906  6700 042C               2196      BEQ     LOAD_0100
0000290A  0C38 0005 176D          2197      CMPI.B  #%0101, MNEMONIC
00002910  6700 0398               2198      BEQ     LOAD_0101
00002914  0C38 0006 176D          2199      CMPI.B  #%0110, MNEMONIC
0000291A  6700 0124               2200      BEQ     LOAD_0110
0000291E  4E75                    2201      RTS
00002920                          2202  
00002920                          2203  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00002920                          2204  
00002920                          2205  
00002920                          2206  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00002920                          2207  
00002920                          2208  LOAD_1110:
00002920  247C 00000000           2209              MOVEA.L #0, A2
00002926  267C 00000000           2210              MOVEA.L #0, A3
0000292C  4285                    2211              CLR.L   D5
0000292E                          2212      
0000292E  1A38 176F               2213              MOVE.B  SECOND_3, D5
00002932  0205 0003               2214              ANDI.B  #%011, D5
00002936                          2215      
00002936  0C05 0003               2216              CMPI.B  #%11, D5
0000293A  6700 0006               2217              BEQ     MYBE_ASd_1
0000293E  6600 0068               2218              BNE     MYBE_ASd_2
00002942                          2219  
00002942  0C38 0000 176E          2220  MYBE_ASd_1  CMPI.B  #%000, FIRST_3
00002948  6700 001C               2221              BEQ     ASd_1
0000294C  0C38 0001 176E          2222              CMPI.B  #%001, FIRST_3
00002952  6700 0012               2223              BEQ     ASd_1 * LSd
00002956  0C38 0003 176E          2224              CMPI.B  #%011, FIRST_3
0000295C  6700 0008               2225              BEQ     ASd_1 * ROd
00002960  4EF9 00003270           2226              JMP     INVALID
00002966                          2227  
00002966  0C38 0007 1770          2228  ASd_1       CMPI.B  #%111, THIRD_3
0000296C  6600 0902               2229              BNE     INVALID
00002970                          2230              
00002970  0C38 0004 1771          2231              CMPI.B  #%100, FOURTH_3
00002976  6700 08F8               2232              BEQ     INVALID
0000297A                          2233              
0000297A  367C 2992               2234              MOVEA.W #ASd_1_BACK, A3
0000297E  0C38 0000 1771          2235              CMPI.B  #%000, FOURTH_3
00002984  6700 0782               2236              BEQ     SIZE_W
00002988  0C38 0001 1771          2237              CMPI.B  #%001, FOURTH_3
0000298E  6700 0780               2238              BEQ     SIZE_L
00002992                          2239  
00002992  1638 1770               2240  ASd_1_BACK  MOVE.B  THIRD_3, D3
00002996  1438 1771               2241              MOVE.B  FOURTH_3, D2
0000299A                          2242              
0000299A  4EB9 0000305C           2243              JSR     LOAD_EA
000029A0  4EB9 000031BE           2244              JSR     LOAD_NEW_LINE
000029A6  4E75                    2245              RTS
000029A8                          2246  
000029A8  4285                    2247  MYBE_ASd_2  CLR.L   D5
000029AA                          2248  
000029AA  1A38 1770               2249              MOVE.B  THIRD_3, D5
000029AE  0205 0003               2250              ANDI.B  #%011, D5
000029B2  0C05 0002               2251              CMPI.B  #%10, D5
000029B6  6600 0006               2252              BNE     ASd_2 * or LSd or ROd
000029BA  6700 08B4               2253              BEQ     INVALID
000029BE                          2254              
000029BE  4285                    2255  ASd_2       CLR.L   D5
000029C0                          2256  
000029C0  1A38 1770               2257              MOVE.B  THIRD_3, D5
000029C4  0205 0004               2258              ANDI.B  #%100, D5
000029C8  0C05 0004               2259              CMPI.B  #%100, D5
000029CC  6700 0048               2260              BEQ     ASd_2_REG
000029D0  6600 0002               2261              BNE     ASd_2_IMD
000029D4                          2262              
000029D4  347C 29FA               2263  ASd_2_IMD   MOVEA.W #ASd_2_IMD_B, A2
000029D8  0C38 0000 176E          2264              CMPI.B  #%000, FIRST_3
000029DE  6700 0006               2265              BEQ     LOAD_8
000029E2  6600 000C               2266              BNE     LOAD_FIRST3
000029E6                          2267              
000029E6  183C 0008               2268  LOAD_8      MOVE.B  #8, D4
000029EA  4EF9 0000318A           2269              JMP     LOAD_IMMDTE
000029F0                          2270  
000029F0  1838 176E               2271  LOAD_FIRST3 MOVE.B  FIRST_3, D4
000029F4  4EF9 0000318A           2272              JMP     LOAD_IMMDTE
000029FA                          2273  
000029FA  4EB9 000031C0           2274  ASd_2_IMD_B JSR     LOAD_COMMA_SPACE
00002A00                          2275  
00002A00  1638 1770               2276              MOVE.B  THIRD_3, D3
00002A04  1438 1771               2277              MOVE.B  FOURTH_3, D2
00002A08                          2278              
00002A08  4EB9 0000305C           2279              JSR     LOAD_EA
00002A0E  4EB9 000031BE           2280              JSR     LOAD_NEW_LINE
00002A14  4E75                    2281              RTS
00002A16                          2282  
00002A16  163C 0000               2283  ASd_2_REG   MOVE.B  #%000, D3
00002A1A  1438 176E               2284              MOVE.B  FIRST_3, D2
00002A1E                          2285              
00002A1E  4EB9 0000305C           2286              JSR     LOAD_EA
00002A24  4EB9 000031C0           2287              JSR     LOAD_COMMA_SPACE
00002A2A                          2288              
00002A2A  163C 0000               2289              MOVE.B  #%000, D3
00002A2E  1438 1771               2290              MOVE.B  FOURTH_3, D2
00002A32                          2291              
00002A32  4EB9 0000305C           2292              JSR     LOAD_EA
00002A38  4EB9 000031BE           2293              JSR     LOAD_NEW_LINE
00002A3E  4E75                    2294              RTS
00002A40                          2295  
00002A40                          2296  
00002A40                          2297  
00002A40                          2298  LOAD_0110:
00002A40  247C 00000000           2299              MOVEA.L #0, A2
00002A46  267C 00000000           2300              MOVEA.L #0, A3
00002A4C  4285                    2301              CLR.L   D5
00002A4E  4286                    2302              CLR.L   D6
00002A50  4284                    2303              CLR.L   D4
00002A52                          2304  
00002A52  0C38 0000 176E          2305              CMPI.B  #%000, FIRST_3
00002A58  6700 0006               2306              BEQ     MYBE_BRA
00002A5C  6600 0010               2307              BNE     NOT_BRA
00002A60  0C38 0004 176F          2308  MYBE_BRA    CMPI.B  #%100, SECOND_3
00002A66  6D00 003A               2309              BLT     BRA
00002A6A  6C00 0002               2310              BGE     NOT_BRA
00002A6E                          2311              
00002A6E  1A38 176E               2312  NOT_BRA     MOVE.B  FIRST_3, D5
00002A72  E305                    2313              ASL.B   #1, D5
00002A74  1C38 176F               2314              MOVE.B  SECOND_3, D6
00002A78  E406                    2315              ASR.B   #2, D6
00002A7A  DA06                    2316              ADD.B   D6, D5
00002A7C                          2317              
00002A7C  0C05 0005               2318              CMPI.B  #%0101, D5
00002A80  6700 0020               2319              BEQ     BRA * CS
00002A84  0C05 0008               2320              CMPI.B  #%1000, D5
00002A88  6700 0018               2321              BEQ     BRA * VC
00002A8C  0C05 000C               2322              CMPI.B  #%1100, D5
00002A90  6700 0010               2323              BEQ     BRA * GE
00002A94  0C05 000D               2324              CMPI.B  #%1101, D5
00002A98  6700 0008               2325              BEQ     BRA * LT
00002A9C                          2326              
00002A9C  4EF9 00003270           2327              JMP     INVALID
00002AA2                          2328              
00002AA2                          2329              
00002AA2  4285                    2330  BRA         CLR.L   D5
00002AA4  4286                    2331              CLR.L   D6
00002AA6                          2332  
00002AA6  3A0D                    2333              MOVE.W  A5, D5 * D5 has $1002 (Starting + MNEMONICS)
00002AA8  3C38 10A0               2334              MOVE.W  CUR_OP_CODE, D6
00002AAC  0246 00FF               2335              ANDI.W  #$00FF, D6 * D6 now has $E
00002AB0  0C06 0000               2336              CMPI.B  #$00, D6
00002AB4  6700 0052               2337              BEQ     BRA_WORD * word. there is 4 hex trailing bits (word)
00002AB8                          2338  
00002AB8  0C06 00FF               2339              CMPI.B  #$FF, D6
00002ABC  6700 0010               2340              BEQ     BRA_BYTE
00002AC0  0C06 00FE               2341              CMPI.B  #$FE, D6
00002AC4  6700 0008               2342              BEQ     BRA_BYTE
00002AC8                          2343  
00002AC8  4EF9 00003270           2344              JMP     INVALID
00002ACE                          2345              
00002ACE  0C06 00FE               2346  BRA_BYTE    CMPI.B  #$FE, D6
00002AD2  6700 0010               2347              BEQ     DOWN_ZERO
00002AD6  0C06 00FF               2348              CMPI.B  #$FF, D6
00002ADA  6700 0010               2349              BEQ     DOWN_ONE
00002ADE                          2350              
00002ADE  4EF9 00003270           2351              JMP     INVALID
00002AE4                          2352              
00002AE4  5505                    2353  DOWN_ZERO   SUBI.B  #$2, D5 * D5 has $1000 (Starting)
00002AE6  4EF9 00002AF4           2354              JMP     BRA_BYTE2
00002AEC                          2355              
00002AEC  5305                    2356  DOWN_ONE    SUBI.B  #$1, D5 * D5 has $1001 (Starting + 1)
00002AEE  4EF9 00002AF4           2357              JMP     BRA_BYTE2
00002AF4                          2358              
00002AF4  347C 2B00               2359  BRA_BYTE2   MOVE.W  #BRA_BYTE3, A2
00002AF8  3805                    2360              MOVE.W  D5, D4
00002AFA  4EF9 00003166           2361              JMP     LOAD_ABS_SHORT
00002B00  4EB9 000031BE           2362  BRA_BYTE3   JSR     LOAD_NEW_LINE
00002B06  4E75                    2363              RTS
00002B08                          2364  
00002B08  381D                    2365  BRA_WORD    MOVE.W  (A5)+, D4 * D4 now has $000E
00002B0A                          2366  
00002B0A  0C84 00008000           2367              CMPI.L  #$8000, D4
00002B10  6C00 001A               2368              BGE     NEG_WORD
00002B14  6D00 0002               2369              BLT     POS_WORD
00002B18                          2370              
00002B18  347C 2B24               2371  POS_WORD    MOVE.W  #BRA_WORD_BK, A2
00002B1C  D845                    2372              ADD.W   D5, D4 * D4 now has $100E
00002B1E  4EF9 00003166           2373              JMP     LOAD_ABS_SHORT
00002B24  4EB9 000031BE           2374  BRA_WORD_BK JSR     LOAD_NEW_LINE
00002B2A  4E75                    2375              RTS
00002B2C                          2376  
00002B2C  347C 2B42               2377  NEG_WORD    MOVE.W  #BRA_WRD_BK2, A2
00002B30  4444                    2378              NEG     D4
00002B32                          2379              
00002B32  B885                    2380              CMP.L   D5, D4 * $4002 vs DISPLACEMENT
00002B34  6E00 073A               2381              BGT     INVALID
00002B38                          2382              
00002B38  9A44                    2383              SUB.W   D4, D5 * D5 now has $1000 - 2cmp'ed $000E
00002B3A  3805                    2384              MOVE.W  D5, D4
00002B3C  4EF9 00003166           2385              JMP     LOAD_ABS_SHORT
00002B42  4EB9 000031BE           2386  BRA_WRD_BK2 JSR     LOAD_NEW_LINE
00002B48  4E75                    2387              RTS
00002B4A                          2388  
00002B4A                          2389  
00002B4A                          2390  
00002B4A                          2391  LOAD_1101:
00002B4A  0C38 0003 176F          2392              CMPI.B  #%011, SECOND_3
00002B50  6700 0012               2393              BEQ     ADDA
00002B54  0C38 0007 176F          2394              CMPI.B  #%111, SECOND_3
00002B5A  6700 0008               2395              BEQ     ADDA
00002B5E                          2396              
00002B5E  4EF9 00002BB8           2397              JMP     LOAD_1000
00002B64                          2398              
00002B64  367C 2B7C               2399  ADDA        MOVEA.W #ADDA_BACK, A3
00002B68  0C38 0000 1771          2400              CMPI.B  #%000, FOURTH_3
00002B6E  6700 0598               2401              BEQ     SIZE_W
00002B72  0C38 0001 1771          2402              CMPI.B  #%001, FOURTH_3
00002B78  6700 0596               2403              BEQ     SIZE_L
00002B7C                          2404              
00002B7C  1638 1770               2405  ADDA_BACK   MOVE.B  THIRD_3, D3
00002B80  1438 1771               2406              MOVE.B  FOURTH_3, D2
00002B84                          2407  
00002B84  4EB9 0000305C           2408              JSR     LOAD_EA
00002B8A  4EB9 000031C0           2409              JSR     LOAD_COMMA_SPACE
00002B90                          2410              
00002B90  163C 0001               2411              MOVE.B  #%001, D3
00002B94  1438 176E               2412              MOVE.B  FIRST_3, D2
00002B98                          2413              
00002B98  4EB9 0000305C           2414              JSR     LOAD_EA
00002B9E  4EB9 000031BE           2415              JSR     LOAD_NEW_LINE
00002BA4  4E75                    2416              RTS
00002BA6                          2417  
00002BA6                          2418  LOAD_1100:
00002BA6  4EF9 00002BB8           2419      JMP     LOAD_1000
00002BAC                          2420      
00002BAC                          2421  LOAD_1011:
00002BAC  4EF9 00002BB8           2422      JMP     LOAD_1000
00002BB2                          2423  
00002BB2                          2424  
00002BB2                          2425  LOAD_1001:
00002BB2  4EF9 00002BB8           2426      JMP     LOAD_1000
00002BB8                          2427  
00002BB8                          2428  
00002BB8                          2429  LOAD_1000:
00002BB8  4283                    2430              CLR.L   D3
00002BBA  4282                    2431              CLR.L   D2
00002BBC  267C 00000000           2432              MOVEA.L #0, A3
00002BC2                          2433              
00002BC2  0C38 0007 176F          2434              CMPI.B  #%111, SECOND_3
00002BC8  6700 009E               2435              BEQ     DIVS
00002BCC                          2436              
00002BCC  0C38 0003 176F          2437              CMPI.B  #%011, SECOND_3
00002BD2  6700 069C               2438              BEQ     INVALID
00002BD6                          2439              
00002BD6  0C38 0004 176F          2440              CMPI.B  #%100, SECOND_3
00002BDC  6D00 0006               2441              BLT     DIR_0 * direction bit 0
00002BE0  6C00 0044               2442              BGE     DIR_1 * direction bit 1
00002BE4                          2443              
00002BE4  367C 2BFC               2444  DIR_0       MOVEA.W #OR_BACK, A3
00002BE8  0C38 0000 1771          2445              CMPI.B  #%000, FOURTH_3
00002BEE  6700 0518               2446              BEQ     SIZE_W
00002BF2  0C38 0001 1771          2447              CMPI.B  #%001, FOURTH_3
00002BF8  6700 0516               2448              BEQ     SIZE_L
00002BFC                          2449              
00002BFC  1638 1770               2450  OR_BACK     MOVE.B  THIRD_3, D3
00002C00  1438 1771               2451              MOVE.B  FOURTH_3, D2
00002C04                          2452  
00002C04  4EB9 0000305C           2453              JSR     LOAD_EA
00002C0A  4EB9 000031C0           2454              JSR     LOAD_COMMA_SPACE
00002C10                          2455              
00002C10  163C 0000               2456              MOVE.B  #%000, D3
00002C14  1438 176E               2457              MOVE.B  FIRST_3, D2
00002C18                          2458              
00002C18  4EB9 0000305C           2459              JSR     LOAD_EA
00002C1E  4EB9 000031BE           2460              JSR     LOAD_NEW_LINE
00002C24  4E75                    2461              RTS
00002C26                          2462              
00002C26  163C 0000               2463  DIR_1       MOVE.B  #%000, D3
00002C2A  1438 176E               2464              MOVE.B  FIRST_3, D2
00002C2E                          2465              
00002C2E  4EB9 0000305C           2466              JSR     LOAD_EA
00002C34  4EB9 000031C0           2467              JSR     LOAD_COMMA_SPACE
00002C3A                          2468              
00002C3A  367C 2C52               2469              MOVEA.W #OR_BACK2, A3
00002C3E  0C38 0000 1771          2470              CMPI.B  #%000, FOURTH_3
00002C44  6700 04C2               2471              BEQ     SIZE_W
00002C48  0C38 0001 1771          2472              CMPI.B  #%001, FOURTH_3
00002C4E  6700 04C0               2473              BEQ     SIZE_L
00002C52                          2474              
00002C52  1638 1770               2475  OR_BACK2    MOVE.B  THIRD_3, D3
00002C56  1438 1771               2476              MOVE.B  FOURTH_3, D2
00002C5A                          2477  
00002C5A  4EB9 0000305C           2478              JSR     LOAD_EA
00002C60  4EB9 000031BE           2479              JSR     LOAD_NEW_LINE
00002C66  4E75                    2480              RTS    
00002C68                          2481              
00002C68  163C 0000               2482  DIVS        MOVE.B  #%000, D3
00002C6C  1438 176E               2483              MOVE.B  FIRST_3, D2
00002C70                          2484  
00002C70  4EB9 0000305C           2485              JSR     LOAD_EA
00002C76  4EB9 000031C0           2486              JSR     LOAD_COMMA_SPACE
00002C7C                          2487              
00002C7C  367C 2C94               2488              MOVEA.W #DIVS_BACK, A3
00002C80  0C38 0000 1771          2489              CMPI.B  #%000, FOURTH_3
00002C86  6700 0480               2490              BEQ     SIZE_W
00002C8A  0C38 0001 1771          2491              CMPI.B  #%001, FOURTH_3
00002C90  6700 047E               2492              BEQ     SIZE_L
00002C94                          2493              
00002C94  1638 1770               2494  DIVS_BACK   MOVE.B  THIRD_3, D3
00002C98  1438 1771               2495              MOVE.B  FOURTH_3, D2
00002C9C                          2496              
00002C9C  4EB9 0000305C           2497              JSR     LOAD_EA
00002CA2  4EB9 000031BE           2498              JSR     LOAD_NEW_LINE
00002CA8  4E75                    2499              RTS
00002CAA                          2500  
00002CAA                          2501  
00002CAA                          2502  LOAD_0101:
00002CAA  4283                    2503              CLR.L   D3
00002CAC  4282                    2504              CLR.L   D2
00002CAE  267C 00000000           2505              MOVEA.L #0, A3
00002CB4                          2506  
00002CB4  0C38 0007 176E          2507              CMPI.B  #%111, FIRST_3
00002CBA  6F00 0008               2508              BLE     MYBE_SUBQ1
00002CBE  4EF9 00003270           2509              JMP     INVALID
00002CC4                          2510              
00002CC4  0C38 0003 176F          2511  MYBE_SUBQ1  CMPI.B  #%011, SECOND_3
00002CCA  6E00 0008               2512              BGT     MYBE_SUBQ2
00002CCE  4EF9 00003270           2513              JMP     INVALID
00002CD4                          2514  
00002CD4  0C38 0007 176F          2515  MYBE_SUBQ2  CMPI.B  #%111, SECOND_3
00002CDA  6D00 0008               2516              BLT     SUBQ
00002CDE  4EF9 00003270           2517              JMP     INVALID
00002CE4                          2518  
00002CE4  5238 176E               2519  SUBQ        ADDI.B  #%1, FIRST_3
00002CE8  1838 176E               2520              MOVE.B  FIRST_3, D4
00002CEC                          2521              
00002CEC  347C 2CF6               2522              MOVEA.W #SUBQ_SAVED, A2
00002CF0  4EF9 0000318A           2523              JMP     LOAD_IMMDTE
00002CF6                          2524              
00002CF6  4EB9 000031C0           2525  SUBQ_SAVED  JSR     LOAD_COMMA_SPACE
00002CFC                          2526  
00002CFC  367C 2D1E               2527              MOVEA.W #SUBQ_BACK, A3
00002D00  0C38 0004 176F          2528              CMPI.B  #%100, SECOND_3
00002D06  6700 03F8               2529              BEQ     SIZE_B
00002D0A  0C38 0005 176F          2530              CMPI.B  #%101, SECOND_3
00002D10  6700 03F6               2531              BEQ     SIZE_W
00002D14  0C38 0006 176F          2532              CMPI.B  #%110, SECOND_3
00002D1A  6700 03F4               2533              BEQ     SIZE_L
00002D1E                          2534              
00002D1E  1638 1770               2535  SUBQ_BACK   MOVE.B  THIRD_3, D3
00002D22  1438 1771               2536              MOVE.B  FOURTH_3, D2
00002D26                          2537  
00002D26  4EB9 0000305C           2538              JSR     LOAD_EA
00002D2C  4EB9 000031BE           2539              JSR     LOAD_NEW_LINE
00002D32  4E75                    2540              RTS
00002D34                          2541  
00002D34                          2542  LOAD_0100:
00002D34  4283                    2543              CLR.L   D3
00002D36  4282                    2544              CLR.L   D2
00002D38  267C 00000000           2545              MOVEA.L #0, A3
00002D3E                          2546  
00002D3E  0C38 0002 176E          2547              CMPI.B  #%010, FIRST_3
00002D44  6700 0006               2548              BEQ     MYBE_NEG
00002D48  6600 000C               2549              BNE     NOT_NEG
00002D4C  0C38 0003 176F          2550  MYBE_NEG    CMPI.B  #%011, SECOND_3
00002D52  6D00 0084               2551              BLT     NEG
00002D56                          2552  
00002D56  0C38 0007 176E          2553  NOT_NEG     CMPI.B  #%111, FIRST_3
00002D5C  6700 0006               2554              BEQ     MYBE_RTS1
00002D60  6600 0028               2555              BNE     NOT_RTS
00002D64  0C38 0001 176F          2556  MYBE_RTS1   CMPI.B  #%001, SECOND_3
00002D6A  6700 0006               2557              BEQ     MYBE_RTS2
00002D6E  6600 001A               2558              BNE     NOT_RTS
00002D72  0C38 0006 1770          2559  MYBE_RTS2   CMPI.B  #%110, THIRD_3
00002D78  6700 0006               2560              BEQ     MYBE_RTS3
00002D7C  6600 000C               2561              BNE     NOT_RTS
00002D80  0C38 0005 1771          2562  MYBE_RTS3   CMPI.B  #%101, FOURTH_3
00002D86  6700 0088               2563              BEQ     RTS
00002D8A                          2564              
00002D8A  0C38 0007 176E          2565  NOT_RTS     CMPI.B  #%111, FIRST_3
00002D90  6700 0006               2566              BEQ     MYBE_JSR
00002D94  6600 000C               2567              BNE     NOT_JSR
00002D98  0C38 0002 176F          2568  MYBE_JSR    CMPI.B  #%010, SECOND_3
00002D9E  6700 0078               2569              BEQ     JSR
00002DA2                          2570  
00002DA2  4286                    2571  NOT_JSR     CLR.L   D6
00002DA4  1C38 176E               2572              MOVE.B  FIRST_3, D6
00002DA8  0206 0005               2573              ANDI.B  #%101, D6 * Making %1X0 -> %100
00002DAC  0C06 0004               2574              CMPI.B  #%100, D6
00002DB0  6700 0006               2575              BEQ     MYBE_MOVEM
00002DB4  6600 0012               2576              BNE     NOT_MOVEM
00002DB8                          2577              
00002DB8  1C38 176F               2578  MYBE_MOVEM  MOVE.B  SECOND_3, D6
00002DBC  0206 0006               2579              ANDI.B  #%110, D6
00002DC0  0C06 0002               2580              CMPI.B  #%010, D6
00002DC4  6700 0080               2581              BEQ     MOVEM
00002DC8                          2582              
00002DC8  0C38 0007 176F          2583  NOT_MOVEM   CMPI.B  #%111, SECOND_3
00002DCE  6700 007E               2584              BEQ     LEA
00002DD2                          2585              
00002DD2  4EF9 00003270           2586              JMP     INVALID
00002DD8                          2587  
00002DD8                          2588  NEG:
00002DD8  367C 2DFA               2589              MOVEA.W #NEG_BACK, A3
00002DDC  0C38 0000 176F          2590              CMPI.B  #%000, SECOND_3
00002DE2  6700 031C               2591              BEQ     SIZE_B
00002DE6  0C38 0001 176F          2592              CMPI.B  #%001, SECOND_3
00002DEC  6700 031A               2593              BEQ     SIZE_W
00002DF0  0C38 0002 176F          2594              CMPI.B  #%010, SECOND_3
00002DF6  6700 0318               2595              BEQ     SIZE_L
00002DFA                          2596              
00002DFA  1638 1770               2597  NEG_BACK    MOVE.B  THIRD_3, D3
00002DFE  1438 1771               2598              MOVE.B  FOURTH_3, D2
00002E02                          2599  
00002E02  4EB9 0000305C           2600              JSR     LOAD_EA
00002E08  4EB9 000031BE           2601              JSR     LOAD_NEW_LINE
00002E0E  4E75                    2602              RTS
00002E10                          2603              
00002E10                          2604  RTS:
00002E10  4EB9 000031BE           2605              JSR     LOAD_NEW_LINE
00002E16  4E75                    2606              RTS
00002E18                          2607  
00002E18                          2608  JSR:
00002E18  367C 2E30               2609              MOVEA.W #JSR_BACK, A3
00002E1C  0C38 0000 1771          2610              CMPI.B  #%000, FOURTH_3
00002E22  6700 02E4               2611              BEQ     SIZE_W
00002E26  0C38 0001 1771          2612              CMPI.B  #%001, FOURTH_3
00002E2C  6700 02E2               2613              BEQ     SIZE_L
00002E30                          2614              
00002E30  1638 1770               2615  JSR_BACK    MOVE.B  THIRD_3, D3
00002E34  1438 1771               2616              MOVE.B  FOURTH_3, D2
00002E38                          2617              
00002E38  4EB9 0000305C           2618              JSR     LOAD_EA
00002E3E  4EB9 000031BE           2619              JSR     LOAD_NEW_LINE
00002E44  4E75                    2620              RTS
00002E46                          2621  
00002E46                          2622  MOVEM:
00002E46  4EB9 000031BE           2623              JSR     LOAD_NEW_LINE
00002E4C  4E75                    2624              RTS
00002E4E                          2625      
00002E4E                          2626  LEA:
00002E4E  367C 2E66               2627              MOVEA.W #LEA_BACK, A3
00002E52  0C38 0000 1771          2628              CMPI.B  #%000, FOURTH_3
00002E58  6700 02AE               2629              BEQ     SIZE_W
00002E5C  0C38 0001 1771          2630              CMPI.B  #%001, FOURTH_3
00002E62  6700 02AC               2631              BEQ     SIZE_L
00002E66                          2632              
00002E66  1638 1770               2633  LEA_BACK    MOVE.B  THIRD_3, D3
00002E6A  1438 1771               2634              MOVE.B  FOURTH_3, D2
00002E6E                          2635              
00002E6E  4EB9 0000305C           2636              JSR     LOAD_EA
00002E74  4EB9 000031C0           2637              JSR     LOAD_COMMA_SPACE
00002E7A                          2638              
00002E7A  163C 0001               2639              MOVE.B  #%001, D3
00002E7E  1438 176E               2640              MOVE.B  FIRST_3, D2
00002E82                          2641              
00002E82  4EB9 0000305C           2642              JSR     LOAD_EA
00002E88  4EB9 000031BE           2643              JSR     LOAD_NEW_LINE
00002E8E  4E75                    2644              RTS
00002E90                          2645  
00002E90                          2646  LOAD_0000:
00002E90  4283                    2647              CLR.L   D3
00002E92  4282                    2648              CLR.L   D2
00002E94  267C 00000000           2649              MOVEA.L #0, A3
00002E9A                          2650  
00002E9A  0C38 0000 176E          2651              CMPI.B  #%000, FIRST_3
00002EA0  6700 0006               2652              BEQ     MYBE_ORI
00002EA4  6600 000C               2653              BNE     NOT_ORI
00002EA8  0C38 0003 176F          2654  MYBE_ORI    CMPI.B  #%011, SECOND_3
00002EAE  6D00 0042               2655              BLT     ORI_CMPI            
00002EB2                          2656  
00002EB2  0C38 0006 176E          2657  NOT_ORI     CMPI.B  #%110, FIRST_3
00002EB8  6700 0006               2658              BEQ     MYBE_CMPI
00002EBC  6600 000C               2659              BNE     NOT_CMPI
00002EC0  0C38 0003 176F          2660  MYBE_CMPI   CMPI.B  #%011, SECOND_3
00002EC6  6D00 002A               2661              BLT     ORI_CMPI
00002ECA                          2662              
00002ECA  0C38 0004 176E          2663  NOT_CMPI    CMPI.B  #%100, FIRST_3
00002ED0  6700 0006               2664              BEQ     MYBE_BCLR
00002ED4  6600 000C               2665              BNE     NOT_BCLR
00002ED8  0C38 0002 176F          2666  MYBE_BCLR   CMPI.B  #%010, SECOND_3
00002EDE  6700 0076               2667              BEQ     BCLR
00002EE2                          2668  
00002EE2  0C38 0006 176F          2669  NOT_BCLR    CMPI.B  #%110, SECOND_3
00002EE8  6700 00CC               2670              BEQ     DYNMC_BCLR
00002EEC                          2671              
00002EEC  4EF9 00003270           2672              JMP     INVALID
00002EF2                          2673              
00002EF2  367C 2F14               2674  ORI_CMPI    MOVEA.W #BACK, A3
00002EF6  0C38 0000 176F          2675              CMPI.B  #%000, SECOND_3
00002EFC  6700 0202               2676              BEQ     SIZE_B
00002F00  0C38 0001 176F          2677              CMPI.B  #%001, SECOND_3
00002F06  6700 0200               2678              BEQ     SIZE_W
00002F0A  0C38 0002 176F          2679              CMPI.B  #%010, SECOND_3
00002F10  6700 01FE               2680              BEQ     SIZE_L
00002F14                          2681  
00002F14  163C 0007               2682  BACK        MOVE.B  #%111, D3
00002F18  143C 0004               2683              MOVE.B  #%100, D2
00002F1C                          2684              
00002F1C  4EB9 0000305C           2685              JSR     LOAD_EA
00002F22  4EB9 000031C0           2686              JSR     LOAD_COMMA_SPACE
00002F28                          2687              
00002F28  367C 2F40               2688              MOVEA.W #BACK2, A3   
00002F2C  0C38 0000 1771          2689              CMPI.B  #%000, FOURTH_3
00002F32  6700 01D4               2690              BEQ     SIZE_W
00002F36  0C38 0001 1771          2691              CMPI.B  #%001, FOURTH_3
00002F3C  6700 01D2               2692              BEQ     SIZE_L
00002F40                          2693  
00002F40  1638 1770               2694  BACK2       MOVE.B  THIRD_3, D3
00002F44  1438 1771               2695              MOVE.B  FOURTH_3, D2
00002F48                          2696          
00002F48  4EB9 0000305C           2697              JSR     LOAD_EA
00002F4E  4EB9 000031BE           2698              JSR     LOAD_NEW_LINE
00002F54  4E75                    2699              RTS
00002F56                          2700  
00002F56  4285                    2701  BCLR        CLR.L   D5
00002F58  4284                    2702              CLR.L   D4
00002F5A  247C 00000000           2703              MOVEA.L #0, A2
00002F60                          2704  
00002F60  3A0E                    2705              MOVE.W  A6, D5
00002F62  9A4D                    2706              SUB.W   A5, D5
00002F64  0C45 0002               2707              CMPI.W  #$2, D5
00002F68  6D00 0306               2708              BLT     INVALID
00002F6C                          2709  
00002F6C  381D                    2710              MOVE.W  (A5)+, D4
00002F6E  4284                    2711              CLR.L   D4
00002F70  381D                    2712              MOVE.W  (A5)+, D4
00002F72  0244 00FF               2713              ANDI.W  #$00FF, D4
00002F76  247C 00002F82           2714              MOVEA.L #BACK4, A2
00002F7C  4EF9 0000318A           2715              JMP     LOAD_IMMDTE
00002F82                          2716              
00002F82  4EB9 000031C0           2717  BACK4       JSR     LOAD_COMMA_SPACE
00002F88                          2718              
00002F88  367C 2FA0               2719              MOVEA.W #BACK3, A3
00002F8C  0C38 0000 1771          2720              CMPI.B  #%000, FOURTH_3
00002F92  6700 0174               2721              BEQ     SIZE_W
00002F96  0C38 0001 1771          2722              CMPI.B  #%001, FOURTH_3
00002F9C  6700 0172               2723              BEQ     SIZE_L
00002FA0                          2724  
00002FA0  1638 1770               2725  BACK3       MOVE.B  THIRD_3, D3
00002FA4  1438 1771               2726              MOVE.B  FOURTH_3, D2
00002FA8                          2727  
00002FA8  4EB9 0000305C           2728              JSR     LOAD_EA
00002FAE  4EB9 000031BE           2729              JSR     LOAD_NEW_LINE
00002FB4                          2730  
00002FB4  4E75                    2731              RTS
00002FB6                          2732  
00002FB6  163C 0000               2733  DYNMC_BCLR  MOVE.B  #%000, D3
00002FBA  1438 176E               2734              MOVE.B  FIRST_3, D2
00002FBE                          2735              
00002FBE  4EB9 0000305C           2736              JSR     LOAD_EA
00002FC4  4EB9 000031C0           2737              JSR     LOAD_COMMA_SPACE
00002FCA                          2738  
00002FCA  367C 2FE2               2739              MOVEA.W #BACK5, A3
00002FCE  0C38 0000 1771          2740              CMPI.B  #%000, FOURTH_3
00002FD4  6700 0132               2741              BEQ     SIZE_W
00002FD8  0C38 0001 1771          2742              CMPI.B  #%001, FOURTH_3
00002FDE  6700 0130               2743              BEQ     SIZE_L
00002FE2                          2744              
00002FE2  1638 1770               2745  BACK5       MOVE.B  THIRD_3, D3
00002FE6  1438 1771               2746              MOVE.B  FOURTH_3, D2
00002FEA                          2747              
00002FEA  4EB9 0000305C           2748              JSR     LOAD_EA
00002FF0  4EB9 000031BE           2749              JSR     LOAD_NEW_LINE
00002FF6                          2750              
00002FF6  4E75                    2751              RTS
00002FF8                          2752  
00002FF8                          2753  LOAD_00XX:
00002FF8  4283                    2754          CLR.L   D3
00002FFA  4282                    2755          CLR.L   D2
00002FFC  267C 00000000           2756          MOVEA.L #0, A3
00003002                          2757          
00003002  367C 301A               2758          MOVEA.W #GOO, A3
00003006  0C38 0003 176D          2759          CMPI.B  #%0011, MNEMONIC
0000300C  6700 00FA               2760          BEQ     SIZE_W
00003010  0C38 0002 176D          2761          CMPI.B  #%0010, MNEMONIC
00003016  6700 00F8               2762          BEQ     SIZE_L
0000301A                          2763  
0000301A  1638 1770               2764  GOO     MOVE.B  THIRD_3, D3
0000301E  1438 1771               2765          MOVE.B  FOURTH_3, D2
00003022                          2766      
00003022  4EB9 0000305C           2767          JSR     LOAD_EA
00003028  4EB9 000031C0           2768          JSR     LOAD_COMMA_SPACE
0000302E                          2769      
0000302E  367C 3046               2770          MOVEA.W #GOO2, A3
00003032  0C38 0000 176E          2771          CMPI.B  #%000, FIRST_3
00003038  6700 00CE               2772          BEQ     SIZE_W
0000303C  0C38 0001 176E          2773          CMPI.B  #%001, FIRST_3
00003042  6700 00CC               2774          BEQ     SIZE_L
00003046                          2775      
00003046  1638 176F               2776  GOO2    MOVE.B  SECOND_3, D3
0000304A  1438 176E               2777          MOVE.B  FIRST_3, D2
0000304E                          2778              
0000304E  4EB9 0000305C           2779          JSR     LOAD_EA
00003054  4EB9 000031BE           2780          JSR     LOAD_NEW_LINE
0000305A                          2781      
0000305A  4E75                    2782          RTS
0000305C                          2783  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000305C                          2784  
0000305C                          2785  
0000305C                          2786  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000305C                          2787  
0000305C                          2788  LOAD_EA:
0000305C  347C 306C               2789          MOVEA.W #SAVED, A2 * remember to come back!
00003060                          2790  
00003060  0C43 0007               2791          CMPI    #%111, D3
00003064  6D00 0008               2792          BLT     LOAD_LT_111
00003068  6C00 0032               2793          BGE     LOAD_GE_111
0000306C                          2794      
0000306C  4E75                    2795  SAVED   RTS
0000306E                          2796  
0000306E                          2797  LOAD_LT_111:
0000306E  0C43 0000               2798      CMPI    #%000, D3 * e.g. D3
00003072  6700 00A4               2799      BEQ     LOAD_DATA_REGISTER
00003076  0C43 0001               2800      CMPI    #%001, D3 * e.g. A3
0000307A  6700 00AE               2801      BEQ     LOAD_ADDR_REGISTER
0000307E  0C43 0002               2802      CMPI    #%010, D3 * e.g. (A3)
00003082  6700 00B8               2803      BEQ     LOAD_ADDRESS
00003086  0C43 0003               2804      CMPI    #%011, D3 * e.g. (A3)+
0000308A  6700 00C2               2805      BEQ     LOAD_ADDRESS_W_POST_INC
0000308E  0C43 0004               2806      CMPI    #%100, D3 * e.g. -(A3)
00003092  6700 00C6               2807      BEQ     LOAD_ADDRESS_W_PRE_DEC
00003096                          2808      
00003096  4EF9 00003270           2809      JMP     INVALID
0000309C                          2810      
0000309C                          2811  LOAD_GE_111:
0000309C  4285                    2812              CLR.L   D5
0000309E  4284                    2813              CLR.L   D4
000030A0                          2814  
000030A0  3A0E                    2815              MOVE.W  A6, D5
000030A2  9A4D                    2816              SUB.W   A5, D5
000030A4  BA78 287E               2817              CMP.W   TRAILING_SIZE, D5
000030A8  6D00 01C6               2818              BLT     INVALID
000030AC                          2819  
000030AC  0C78 0001 287E          2820              CMPI.W  #$1, TRAILING_SIZE
000030B2  6700 0016               2821              BEQ     CHUMP_BYTE
000030B6  0C78 0002 287E          2822              CMPI.W  #$2, TRAILING_SIZE
000030BC  6700 0014               2823              BEQ     CHUMP_WORD
000030C0  0C78 0004 287E          2824              CMPI.W  #$4, TRAILING_SIZE
000030C6  6700 0012               2825              BEQ     CHUMP_LONG
000030CA                          2826  
000030CA  381D                    2827  CHUMP_BYTE  MOVE.W  (A5)+, D4 * Minimum 4 hex (e.g. MOVE.B #1, $2 = XXXX 0001 0002)
000030CC  4EF9 000030E2           2828              JMP     GO
000030D2                          2829  
000030D2  381D                    2830  CHUMP_WORD  MOVE.W  (A5)+, D4
000030D4  4EF9 000030E2           2831              JMP     GO
000030DA                          2832              
000030DA  281D                    2833  CHUMP_LONG  MOVE.L  (A5)+, D4
000030DC  4EF9 000030E2           2834              JMP     GO
000030E2                          2835  
000030E2  0C42 0000               2836  GO          CMPI    #%000, D2
000030E6  6700 007E               2837              BEQ     LOAD_ABS_SHORT
000030EA  0C42 0001               2838              CMPI    #%001, D2
000030EE  6700 0088               2839              BEQ     LOAD_ABS_LONG
000030F2  0C42 0004               2840              CMPI    #%100, D2
000030F6  6700 0092               2841              BEQ     LOAD_IMMDTE
000030FA                          2842      
000030FA  4EF9 00003270           2843              JMP     INVALID
00003100                          2844  TRAILING_HELPER:            
00003100  31FC 0002 287E          2845  SIZE_B  MOVE.W  #$2, TRAILING_SIZE
00003106  4ED3                    2846          JMP     (A3)
00003108                          2847  
00003108  31FC 0002 287E          2848  SIZE_W  MOVE.W  #$2, TRAILING_SIZE
0000310E  4ED3                    2849          JMP     (A3)
00003110                          2850          
00003110  31FC 0004 287E          2851  SIZE_L  MOVE.W  #$4, TRAILING_SIZE
00003116  4ED3                    2852          JMP     (A3)
00003118                          2853  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003118                          2854  
00003118                          2855  
00003118                          2856  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003118                          2857  
00003118                          2858  LOAD_DATA_REGISTER:
00003118  4280                    2859      CLR.L   D0
0000311A                          2860      
0000311A  4EB9 000031D8           2861      JSR     LOAD_D
00003120  1002                    2862      MOVE.B  D2, D0
00003122  4EB9 0000324C           2863      JSR     LOAD_NUM
00003128  4ED2                    2864      JMP     (A2)
0000312A                          2865  
0000312A                          2866  LOAD_ADDR_REGISTER:
0000312A  4280                    2867      CLR.L   D0
0000312C                          2868  
0000312C  4EB9 000031E6           2869      JSR     LOAD_A
00003132  1002                    2870      MOVE.B  D2, D0
00003134  4EB9 0000324C           2871      JSR     LOAD_NUM
0000313A  4ED2                    2872      JMP     (A2)
0000313C                          2873  
0000313C                          2874  LOAD_ADDRESS:
0000313C  4EB9 000031F4           2875      JSR     LOAD_PTHSIS_OPEN
00003142  4EB8 312A               2876      JSR     LOAD_ADDR_REGISTER
00003146  4EB9 00003202           2877      JSR     LOAD_PTHSIS_CLSD
0000314C  4ED2                    2878      JMP     (A2)
0000314E                          2879  
0000314E                          2880  LOAD_ADDRESS_W_POST_INC:
0000314E  4EB8 313C               2881      JSR     LOAD_ADDRESS
00003152  4EB9 0000322C           2882      JSR     LOAD_PLUS_SIGN
00003158  4ED2                    2883      JMP     (A2)
0000315A                          2884  
0000315A                          2885  LOAD_ADDRESS_W_PRE_DEC:
0000315A  4EB9 0000323A           2886      JSR     LOAD_MINUS_SIGN
00003160  4EB8 313C               2887      JSR     LOAD_ADDRESS
00003164  4ED2                    2888      JMP     (A2)
00003166                          2889  
00003166                          2890  LOAD_ABS_SHORT:
00003166  4280                    2891      CLR.L   D0
00003168                          2892  
00003168  4EB9 00003210           2893      JSR     LOAD_HEX_SIGN
0000316E  3004                    2894      MOVE.W  D4, D0
00003170  4EB9 00003194           2895      JSR     LOAD_BYTES
00003176  4ED2                    2896      JMP     (A2)
00003178                          2897  
00003178                          2898  LOAD_ABS_LONG:
00003178  4280                    2899      CLR.L   D0
0000317A                          2900  
0000317A  4EB9 00003210           2901      JSR     LOAD_HEX_SIGN
00003180  2004                    2902      MOVE.L  D4, D0
00003182  4EB9 00003194           2903      JSR     LOAD_BYTES
00003188  4ED2                    2904      JMP     (A2)
0000318A                          2905  
0000318A                          2906  LOAD_IMMDTE:
0000318A  4EB9 0000321E           2907      JSR     LOAD_IMMDTE_VALU
00003190  4EF8 3178               2908      JMP     LOAD_ABS_LONG
00003194                          2909  
00003194                          2910  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003194                          2911  
00003194                          2912  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003194                          2913  
00003194                          2914  LOAD_BYTES:
00003194  4285                    2915          CLR.L   D5
00003196  4281                    2916          CLR.L   D1
00003198                          2917  
00003198  2200                    2918          MOVE.L  D0, D1
0000319A  1A3C 0008               2919          MOVE.B  #8, D5
0000319E  0C45 0000               2920  LOOP    CMPI    #0, D5
000031A2  6E00 0004               2921          BGT     ROTATE
000031A6  4E75                    2922          RTS
000031A8                          2923      
000031A8  E999                    2924  ROTATE  ROL.L   #$04, D1
000031AA  1001                    2925          MOVE.B  D1, D0
000031AC  0280 0000000F           2926          ANDI.L  #$0000000F, D0
000031B2  4EB9 0000324C           2927          JSR     LOAD_NUM
000031B8  5345                    2928          SUBI    #1, D5
000031BA  4EF8 319E               2929          JMP     LOOP        
000031BE                          2930  
000031BE                          2931  LOAD_NEW_LINE:
000031BE                          2932      ;CLR.L   D0
000031BE                          2933  
000031BE                          2934      ;MOVE.B  CR, D0
000031BE                          2935      ;JSR     LOAD_THIS_SHIT
000031BE                          2936      ;MOVE.B  LF, D0
000031BE                          2937      ;JSR     LOAD_THIS_SHIT
000031BE  4E75                    2938      RTS
000031C0                          2939  
000031C0                          2940  LOAD_COMMA_SPACE:
000031C0  4280                    2941      CLR.L   D0
000031C2                          2942  
000031C2  1038 287C               2943      MOVE.B  COMMA, D0
000031C6  4EB9 00003248           2944      JSR     LOAD_THIS_SHIT
000031CC  1038 287D               2945      MOVE.B  SPACE, D0
000031D0  4EB9 00003248           2946      JSR     LOAD_THIS_SHIT
000031D6                          2947      
000031D6  4E75                    2948      RTS
000031D8                          2949  
000031D8                          2950  LOAD_D:
000031D8  4280                    2951      CLR.L   D0
000031DA                          2952  
000031DA  1038 2875               2953      MOVE.B  DATA, D0
000031DE  4EB9 00003248           2954      JSR     LOAD_THIS_SHIT
000031E4  4E75                    2955      RTS
000031E6                          2956  
000031E6                          2957  LOAD_A:
000031E6  4280                    2958      CLR.L   D0
000031E8                          2959  
000031E8  1038 2874               2960      MOVE.B  ADDRESS, D0
000031EC  4EB9 00003248           2961      JSR     LOAD_THIS_SHIT
000031F2  4E75                    2962      RTS
000031F4                          2963  
000031F4                          2964  LOAD_PTHSIS_OPEN:
000031F4  4280                    2965      CLR.L   D0
000031F6                          2966  
000031F6  1038 2876               2967      MOVE.B  PTHSIS_OPEN, D0
000031FA  4EB9 00003248           2968      JSR     LOAD_THIS_SHIT
00003200  4E75                    2969      RTS
00003202                          2970  
00003202                          2971  LOAD_PTHSIS_CLSD:
00003202  4280                    2972      CLR.L   D0
00003204                          2973  
00003204  1038 2877               2974      MOVE.B  PTHSIS_CLSD, D0
00003208  4EB9 00003248           2975      JSR     LOAD_THIS_SHIT
0000320E  4E75                    2976      RTS
00003210                          2977  
00003210                          2978  LOAD_HEX_SIGN:
00003210  4280                    2979      CLR.L   D0
00003212                          2980  
00003212  1038 2878               2981      MOVE.B  HEX_SIGN, D0
00003216  4EB9 00003248           2982      JSR     LOAD_THIS_SHIT
0000321C  4E75                    2983      RTS
0000321E                          2984  
0000321E                          2985  LOAD_IMMDTE_VALU:
0000321E  4280                    2986      CLR.L   D0
00003220                          2987  
00003220  1038 2879               2988      MOVE.B  IMMDTE_VALU, D0
00003224  4EB9 00003248           2989      JSR     LOAD_THIS_SHIT
0000322A  4E75                    2990      RTS
0000322C                          2991  
0000322C                          2992  LOAD_PLUS_SIGN:
0000322C  4280                    2993      CLR.L   D0
0000322E                          2994  
0000322E  1038 287A               2995      MOVE.B  PLUS_SIGN, D0
00003232  4EB9 00003248           2996      JSR     LOAD_THIS_SHIT
00003238  4E75                    2997      RTS
0000323A                          2998  
0000323A                          2999  LOAD_MINUS_SIGN:
0000323A  4280                    3000      CLR.L   D0
0000323C                          3001  
0000323C  1038 287B               3002      MOVE.B  MINUS_SIGN, D0
00003240  4EB9 00003248           3003      JSR     LOAD_THIS_SHIT
00003246  4E75                    3004      RTS
00003248                          3005  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003248                          3006  
00003248                          3007  
00003248                          3008  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003248                          3009  LOAD_THIS_SHIT:
00003248  18C0                    3010      MOVE.B  D0, (A4)+
0000324A  4E75                    3011      RTS
0000324C                          3012  
0000324C                          3013  LOAD_NUM:
0000324C  0C00 0009               3014      CMPI.B  #$9, D0
00003250  6E00 0006               3015      BGT     GT
00003254  6F00 000C               3016      BLE     LE
00003258                          3017      
00003258  0600 0037               3018  GT  ADDI.B  #$37, D0 * A~F
0000325C  4EF9 0000326C           3019      JMP     END
00003262  0600 0030               3020  LE  ADDI.B  #$30, D0 * 0~9
00003266  4EF9 0000326C           3021      JMP     END
0000326C                          3022  
0000326C  18C0                    3023  END MOVE.B  D0, (A4)+
0000326E  4E75                    3024      RTS
00003270                          3025  
00003270                          3026  INVALID:
00003270  11FC 0000 10A2          3027              MOVE.B  #%0, IS_VALID
00003276  4EF8 11C2               3028              JMP     check_print
0000327A                          3029  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000327A                          3030  
0000327A                          3031  
0000327A                          3032  
0000327A                          3033  
0000327A                          3034  
0000327A                          3035  
0000327A                          3036  
0000327A                          3037  
0000327A                          3038  -------------------- end include --------------------
0000327A                          3039      INCLUDE "Test.x68"
0000327A                          3040  
00009000                          3041      ORG $9000
00009000  E289                    3042      LSR.L #$1,D1        ; CHECK THIS Prints #$1,A1 instead of #$,D1    
00009002                          3043          
00009002  5301                    3044      SUBQ.B #$1,D1       ; CHECK THIS Prints #$2,D1 instead of #$1,D1
00009004                          3045       
00009004  E709                    3046      LSL.B #3,D1         ; CHECK THIS Prints #3,A1 instead of #3,D1
00009006                          3047      
00009006  5301                    3048      SUBQ.B #$1,D1       ; CHECK THIS Prints #$2,D1 instead of #$1,D1
00009008                          3049  
00009008  0881 0003               3050      BCLR.L #$3,D1       ; CHECK THIS Prints #$57,D1 instead of #$3,D1
0000900C                          3051      
0000900C                          3052      ;LSR.W #$1,D1        ; This doesn't show up if it's placed right after BCLR    
0000900C                          3053      ;LSL.W #$1,D1        ; This doesn't show up if it's placed right after BCLR    
0000900C                          3054      
0000900C                          3055      ;ASL.B  D3,D5     
0000900C                          3056      ;ASR.W  D3,D5
0000900C  0041 2501               3057      ORI.W #$2501, D1
00009010                          3058       
00009010  E7BD                    3059      ROL.L  D3,D5     
00009012                          3060     
00009012  E6BD                    3061      ROR.L  D3,D5     
00009014  8497                    3062      OR.L (SP),D2
00009016                          3063      
00009016  8358                    3064      OR.W D1,(A0)+
00009018                          3065      
00009018                          3066  
00009018  4E71                    3067      NOP
0000901A                          3068      
0000901A  4E75                    3069      RTS
0000901C                          3070      
0000901C  4E71                    3071      NOP
0000901E                          3072      
0000901E  4E75                    3073      RTS
00009020                          3074      
00009020  0041 2501               3075      ORI.W #$2501, D1
00009024                          3076      
00009024  5300                    3077      SUBQ.B  #1,D0
00009026                          3078      
00009026  5541                    3079      SUBQ.W  #$2, D1
00009028                          3080      
00009028  5982                    3081      SUBQ.L  #4,D2
0000902A                          3082      
0000902A  41D0                    3083      LEA     (A0),A0
0000902C                          3084      
0000902C  41D1                    3085      LEA     (A1),A0
0000902E                          3086      
0000902E  41F8 0100               3087      LEA     $0100,A0
00009032                          3088      
00009032  41F9 00009300           3089      LEA     $9300,A0
00009038                          3090      
00009038  41D5                    3091      LEA     (A5),A0
0000903A                          3092  
0000903A  41D7                    3093      LEA     (A7),A0
0000903C                          3094  
0000903C  4FD0                    3095      LEA     (A0),A7
0000903E                          3096  
0000903E  4FD5                    3097      LEA     (A5),A7
00009040                          3098  
00009040  4FD7                    3099      LEA     (A7),A7
00009042                          3100  
00009042  4200                    3101      CLR.B     D0
00009044                          3102  
00009044  4207                    3103      CLR.B     D7
00009046                          3104  
00009046  4240                    3105      CLR.W     D0
00009048                          3106  
00009048  4247                    3107      CLR.W     D7
0000904A                          3108  
0000904A  4280                    3109      CLR.L     D0
0000904C                          3110  
0000904C  4287                    3111      CLR.L     D7
0000904E                          3112  
0000904E  4210                    3113      CLR.B     (A0)
00009050                          3114  
00009050  4217                    3115      CLR.B     (A7)
00009052                          3116  
00009052  4250                    3117      CLR.W     (A0)
00009054                          3118  
00009054  4257                    3119      CLR.W     (A7)
00009056                          3120  
00009056  4290                    3121      CLR.L     (A0)
00009058                          3122  
00009058  4297                    3123      CLR.L     (A7)
0000905A                          3124  
0000905A  4218                    3125      CLR.B     (A0)+
0000905C                          3126  
0000905C  421F                    3127      CLR.B     (A7)+
0000905E                          3128  
0000905E  4258                    3129      CLR.W     (A0)+
00009060                          3130  
00009060  425F                    3131      CLR.W     (A7)+
00009062                          3132  
00009062  4298                    3133      CLR.L     (A0)+
00009064                          3134  
00009064  429F                    3135      CLR.L     (A7)+
00009066                          3136  
00009066  4220                    3137      CLR.B     -(A0)
00009068                          3138  
00009068  4227                    3139      CLR.B     -(A7)
0000906A                          3140  
0000906A  4260                    3141      CLR.W     -(A0)
0000906C                          3142  
0000906C  4267                    3143      CLR.W     -(A7)
0000906E                          3144  
0000906E  42A0                    3145      CLR.L     -(A0)
00009070                          3146  
00009070  42A7                    3147      CLR.L     -(A7)
00009072                          3148  
00009072  1200                    3149      MOVE.B    D0,D1
00009074                          3150  
00009074  1080                    3151      MOVE.B    D0,(A0)
00009076                          3152  
00009076  10C0                    3153      MOVE.B    D0,(A0)+
00009078                          3154  
00009078  1100                    3155      MOVE.B    D0,-(A0)
0000907A                          3156  
0000907A  1010                    3157      MOVE.B    (A0),D0
0000907C                          3158  
0000907C  1290                    3159      MOVE.B    (A0),(A1)
0000907E                          3160  
0000907E  12D0                    3161      MOVE.B    (A0),(A1)+
00009080                          3162  
00009080  1310                    3163      MOVE.B    (A0),-(A1)
00009082                          3164  
00009082  1018                    3165      MOVE.B    (A0)+,D0
00009084                          3166  
00009084  1298                    3167      MOVE.B    (A0)+,(A1)
00009086                          3168  
00009086  12D8                    3169      MOVE.B    (A0)+,(A1)+
00009088                          3170  
00009088  1318                    3171      MOVE.B    (A0)+,-(A1)
0000908A                          3172  
0000908A  1020                    3173      MOVE.B    -(A0),D0
0000908C                          3174  
0000908C  12A0                    3175      MOVE.B    -(A0),(A1)
0000908E                          3176  
0000908E  12E0                    3177      MOVE.B    -(A0),(A1)+
00009090                          3178  
00009090  1320                    3179      MOVE.B    -(A0),-(A1)
00009092                          3180  
00009092  3200                    3181      MOVE.W    D0,D1
00009094                          3182  
00009094  3080                    3183      MOVE.W    D0,(A0)
00009096                          3184  
00009096  30C0                    3185      MOVE.W    D0,(A0)+
00009098                          3186  
00009098  3100                    3187      MOVE.W    D0,-(A0)
0000909A                          3188  
0000909A  3008                    3189      MOVE.W    A0,D0
0000909C                          3190  
0000909C  3288                    3191      MOVE.W    A0,(A1)
0000909E                          3192  
0000909E  32C8                    3193      MOVE.W    A0,(A1)+
000090A0                          3194  
000090A0  3308                    3195      MOVE.W    A0,-(A1)
000090A2                          3196  
000090A2  3010                    3197      MOVE.W    (A0),D0
000090A4                          3198  
000090A4  3290                    3199      MOVE.W    (A0),(A1)
000090A6                          3200  
000090A6  32D0                    3201      MOVE.W    (A0),(A1)+
000090A8                          3202  
000090A8  3310                    3203      MOVE.W    (A0),-(A1)
000090AA                          3204  
000090AA  3018                    3205      MOVE.W    (A0)+,D0
000090AC                          3206  
000090AC  3298                    3207      MOVE.W    (A0)+,(A1)
000090AE                          3208  
000090AE  32D8                    3209      MOVE.W    (A0)+,(A1)+
000090B0                          3210  
000090B0  3318                    3211      MOVE.W    (A0)+,-(A1)
000090B2                          3212  
000090B2  3020                    3213      MOVE.W    -(A0),D0
000090B4                          3214  
000090B4  32A0                    3215      MOVE.W    -(A0),(A1)
000090B6                          3216  
000090B6  32E0                    3217      MOVE.W    -(A0),(A1)+
000090B8                          3218  
000090B8  3320                    3219      MOVE.W    -(A0),-(A1)
000090BA                          3220  
000090BA  2200                    3221      MOVE.L    D0,D1
000090BC                          3222  
000090BC  2080                    3223      MOVE.L    D0,(A0)
000090BE                          3224  
000090BE  20C0                    3225      MOVE.L    D0,(A0)+
000090C0                          3226  
000090C0  2100                    3227      MOVE.L    D0,-(A0)
000090C2                          3228  
000090C2  2008                    3229      MOVE.L    A0,D0
000090C4                          3230  
000090C4  2288                    3231      MOVE.L    A0,(A1)
000090C6                          3232  
000090C6  22C8                    3233      MOVE.L    A0,(A1)+
000090C8                          3234  
000090C8  2308                    3235      MOVE.L    A0,-(A1)
000090CA                          3236  
000090CA  2010                    3237      MOVE.L    (A0),D0
000090CC                          3238  
000090CC  2290                    3239      MOVE.L    (A0),(A1)
000090CE                          3240  
000090CE  22D0                    3241      MOVE.L    (A0),(A1)+
000090D0                          3242  
000090D0  2310                    3243      MOVE.L    (A0),-(A1)
000090D2                          3244  
000090D2  2018                    3245      MOVE.L    (A0)+,D0
000090D4                          3246  
000090D4  2298                    3247      MOVE.L    (A0)+,(A1)
000090D6                          3248  
000090D6  22D8                    3249      MOVE.L    (A0)+,(A1)+
000090D8                          3250  
000090D8  2318                    3251      MOVE.L    (A0)+,-(A1)
000090DA                          3252  
000090DA  2020                    3253      MOVE.L    -(A0),D0
000090DC                          3254  
000090DC  22A0                    3255      MOVE.L    -(A0),(A1)
000090DE                          3256  
000090DE  22E0                    3257      MOVE.L    -(A0),(A1)+
000090E0                          3258  
000090E0  2320                    3259      MOVE.L    -(A0),-(A1)
000090E2                          3260  
000090E2  3040                    3261      MOVEA.W    D0,A0
000090E4                          3262  
000090E4  3048                    3263      MOVEA.W    A0,A0
000090E6                          3264  
000090E6  3050                    3265      MOVEA.W    (A0),A0
000090E8                          3266  
000090E8  3058                    3267      MOVEA.W    (A0)+,A0
000090EA                          3268  
000090EA  3060                    3269      MOVEA.W    -(A0),A0
000090EC                          3270  
000090EC  2040                    3271      MOVEA.L    D0,A0
000090EE                          3272  
000090EE  2048                    3273      MOVEA.L    A0,A0
000090F0                          3274  
000090F0  2050                    3275      MOVEA.L    (A0),A0
000090F2                          3276  
000090F2  2058                    3277      MOVEA.L    (A0)+,A0
000090F4                          3278  
000090F4  2060                    3279      MOVEA.L    -(A0),A0  
000090F6                          3280  
000090F6  D401                    3281      ADD.B     D1,D2
000090F8                          3282  
000090F8  D311                    3283      ADD.B     D1,(A1)
000090FA                          3284  
000090FA  D319                    3285      ADD.B     D1,(A1)+
000090FC                          3286  
000090FC  D321                    3287      ADD.B     D1,-(A1)
000090FE                          3288  
000090FE  D211                    3289      ADD.B     (A1),D1
00009100                          3290  
00009100  D219                    3291      ADD.B     (A1)+,D1
00009102                          3292  
00009102  D221                    3293      ADD.B     -(A1),D1
00009104                          3294  
00009104  D441                    3295      ADD.W     D1,D2
00009106                          3296  
00009106  D351                    3297      ADD.W     D1,(A1)
00009108                          3298  
00009108  D359                    3299      ADD.W     D1,(A1)+
0000910A                          3300  
0000910A  D361                    3301      ADD.W     D1,-(A1)
0000910C                          3302  
0000910C  D251                    3303      ADD.W     (A1),D1
0000910E                          3304  
0000910E  D259                    3305      ADD.W     (A1)+,D1
00009110                          3306  
00009110  D261                    3307      ADD.W     -(A1),D1
00009112                          3308  
00009112  D481                    3309      ADD.L     D1,D2
00009114                          3310  
00009114  D391                    3311      ADD.L     D1,(A1)
00009116                          3312  
00009116  D399                    3313      ADD.L     D1,(A1)+
00009118                          3314  
00009118  D3A1                    3315      ADD.L     D1,-(A1)
0000911A                          3316  
0000911A  D291                    3317      ADD.L     (A1),D1
0000911C                          3318  
0000911C  D299                    3319      ADD.L     (A1)+,D1
0000911E                          3320  
0000911E  D2A1                    3321      ADD.L     -(A1),D1
00009120                          3322  
00009120  D4C1                    3323      ADDA.W        D1,A2
00009122                          3324  
00009122  D4D1                    3325      ADDA.W        (A1),A2
00009124                          3326  
00009124  D4D9                    3327      ADDA.W        (A1)+,A2
00009126                          3328  
00009126  D4E1                    3329      ADDA.W        -(A1),A2
00009128                          3330  
00009128  D5C1                    3331      ADDA.L        D1,A2
0000912A                          3332  
0000912A  D5D1                    3333      ADDA.L        (A1),A2
0000912C                          3334  
0000912C  D5D9                    3335      ADDA.L        (A1)+,A2
0000912E                          3336  
0000912E  D5E1                    3337      ADDA.L        -(A1),A2
00009130                          3338     
00009130  9401                    3339      SUB.B     D1,D2
00009132                          3340  
00009132  9311                    3341      SUB.B     D1,(A1)
00009134                          3342  
00009134  9319                    3343      SUB.B     D1,(A1)+
00009136                          3344  
00009136  9321                    3345      SUB.B     D1,-(A1)
00009138                          3346  
00009138  9211                    3347      SUB.B     (A1),D1
0000913A                          3348  
0000913A  9219                    3349      SUB.B     (A1)+,D1
0000913C                          3350  
0000913C  9221                    3351      SUB.B     -(A1),D1
0000913E                          3352  
0000913E  9441                    3353      SUB.W     D1,D2
00009140                          3354  
00009140  92C1                    3355      SUB.W     D1,A1
00009142                          3356  
00009142  9351                    3357      SUB.W     D1,(A1)
00009144                          3358  
00009144  9359                    3359      SUB.W     D1,(A1)+
00009146                          3360  
00009146  9361                    3361      SUB.W     D1,-(A1)
00009148                          3362  
00009148  9249                    3363      SUB.W     A1,D1
0000914A                          3364  
0000914A  9251                    3365      SUB.W     (A1),D1
0000914C                          3366  
0000914C  9259                    3367      SUB.W     (A1)+,D1
0000914E                          3368  
0000914E  9261                    3369      SUB.W     -(A1),D1
00009150                          3370  
00009150  9481                    3371      SUB.L     D1,D2
00009152                          3372  
00009152  93C1                    3373      SUB.L     D1,A1
00009154                          3374  
00009154  9391                    3375      SUB.L     D1,(A1)
00009156                          3376  
00009156  9399                    3377      SUB.L     D1,(A1)+
00009158                          3378  
00009158  93A1                    3379      SUB.L     D1,-(A1)
0000915A                          3380  
0000915A  9289                    3381      SUB.L     A1,D1
0000915C                          3382  
0000915C  9291                    3383      SUB.L     (A1),D1
0000915E                          3384  
0000915E  9299                    3385      SUB.L     (A1)+,D1
00009160                          3386  
00009160  92A1                    3387      SUB.L     -(A1),D1    
00009162                          3388  
00009162  C3C0                    3389      MULS.W    D0,D1
00009164                          3390  
00009164  C3D0                    3391      MULS.W    (A0),D1
00009166                          3392  
00009166  C3E0                    3393      MULS.W    -(A0),D1
00009168                          3394  
00009168  C3D8                    3395      MULS.W    (A0)+,D1
0000916A                          3396  
0000916A  83C0                    3397      DIVS.W    D0,D1
0000916C                          3398  
0000916C  83D0                    3399      DIVS.W    (A0),D1
0000916E                          3400  
0000916E  83E0                    3401      DIVS.W    -(A0),D1
00009170                          3402  
00009170  83D8                    3403      DIVS.W    (A0)+,D1
00009172                          3404  
00009172  C401                    3405      AND.B     D1,D2
00009174                          3406  
00009174  C311                    3407      AND.B     D1,(A1)
00009176                          3408  
00009176  C319                    3409      AND.B     D1,(A1)+
00009178                          3410  
00009178  C321                    3411      AND.B     D1,-(A1)
0000917A                          3412  
0000917A  C211                    3413      AND.B     (A1),D1
0000917C                          3414  
0000917C  C219                    3415      AND.B     (A1)+,D1
0000917E                          3416  
0000917E  C221                    3417      AND.B     -(A1),D1
00009180                          3418  
00009180  C441                    3419      AND.W     D1,D2
00009182                          3420  
00009182  C351                    3421      AND.W     D1,(A1)
00009184                          3422  
00009184  C359                    3423      AND.W     D1,(A1)+
00009186                          3424  
00009186  C361                    3425      AND.W     D1,-(A1)
00009188                          3426  
00009188  C251                    3427      AND.W     (A1),D1
0000918A                          3428  
0000918A  C259                    3429      AND.W     (A1)+,D1
0000918C                          3430  
0000918C  C261                    3431      AND.W     -(A1),D1
0000918E                          3432  
0000918E  C481                    3433      AND.L     D1,D2
00009190                          3434  
00009190  C391                    3435      AND.L     D1,(A1)
00009192                          3436  
00009192  C399                    3437      AND.L     D1,(A1)+
00009194                          3438  
00009194  C3A1                    3439      AND.L     D1,-(A1)
00009196                          3440  
00009196  C291                    3441      AND.L     (A1),D1
00009198                          3442  
00009198  C299                    3443      AND.L     (A1)+,D1
0000919A                          3444  
0000919A  C2A1                    3445      AND.L     -(A1),D1
0000919C                          3446      
0000919C  B302                    3447      EOR.B      D1,D2
0000919E                          3448      
0000919E  B511                    3449      EOR.B      D2,(A1)
000091A0                          3450  
000091A0  8401                    3451      OR.B     D1,D2
000091A2                          3452  
000091A2  8311                    3453      OR.B     D1,(A1)
000091A4                          3454  
000091A4  8319                    3455      OR.B     D1,(A1)+
000091A6                          3456  
000091A6  8321                    3457      OR.B     D1,-(A1)
000091A8                          3458  
000091A8  8211                    3459      OR.B     (A1),D1
000091AA                          3460  
000091AA  8219                    3461      OR.B     (A1)+,D1
000091AC                          3462  
000091AC  8221                    3463      OR.B     -(A1),D1
000091AE                          3464  
000091AE  8441                    3465      OR.W     D1,D2
000091B0                          3466  
000091B0  8351                    3467      OR.W     D1,(A1)
000091B2                          3468  
000091B2  8359                    3469      OR.W     D1,(A1)+
000091B4                          3470  
000091B4  8361                    3471      OR.W     D1,-(A1)
000091B6                          3472  
000091B6  8251                    3473      OR.W     (A1),D1
000091B8                          3474  
000091B8  8259                    3475      OR.W     (A1)+,D1
000091BA                          3476  
000091BA  8261                    3477      OR.W     -(A1),D1
000091BC                          3478  
000091BC  8481                    3479      OR.L     D1,D2
000091BE                          3480  
000091BE  8391                    3481      OR.L     D1,(A1)
000091C0                          3482  
000091C0  8399                    3483      OR.L     D1,(A1)+
000091C2                          3484  
000091C2  83A1                    3485      OR.L     D1,-(A1)
000091C4                          3486  
000091C4  8291                    3487      OR.L     (A1),D1
000091C6                          3488  
000091C6  8299                    3489      OR.L     (A1)+,D1
000091C8                          3490  
000091C8  82A1                    3491      OR.L     -(A1),D1
000091CA                          3492  
000091CA  E32A                    3493      LSL.B     D1,D2
000091CC                          3494  
000091CC  E36A                    3495      LSL.W     D1,D2
000091CE                          3496  
000091CE  E3D1                    3497      LSL.W     (A1)
000091D0                          3498  
000091D0  E3D9                    3499      LSL.W     (A1)+
000091D2                          3500  
000091D2  E3E1                    3501      LSL.W     -(A1)
000091D4                          3502  
000091D4  E3AA                    3503      LSL.L     D1,D2
000091D6                          3504  
000091D6  E22A                    3505      LSR.B     D1,D2
000091D8                          3506  
000091D8  E26A                    3507      LSR.W     D1,D2
000091DA                          3508  
000091DA  E2D1                    3509      LSR.W     (A1)
000091DC                          3510  
000091DC  E2D9                    3511      LSR.W     (A1)+
000091DE                          3512  
000091DE  E2E1                    3513      LSR.W     -(A1)
000091E0                          3514  
000091E0  E2AA                    3515      LSR.L     D1,D2    
000091E2                          3516  
000091E2  E222                    3517      ASR.B     D1,D2
000091E4                          3518  
000091E4  E262                    3519      ASR.W     D1,D2
000091E6                          3520  
000091E6  E0D1                    3521      ASR.W     (A1)
000091E8                          3522  
000091E8  E0D9                    3523      ASR.W     (A1)+
000091EA                          3524  
000091EA  E0E1                    3525      ASR.W     -(A1)
000091EC                          3526  
000091EC  E2A2                    3527      ASR.L     D1,D2
000091EE                          3528  
000091EE  E322                    3529      ASL.B     D1,D2
000091F0                          3530  
000091F0  E362                    3531      ASL.W     D1,D2
000091F2                          3532  
000091F2  E1D1                    3533      ASL.W     (A1)
000091F4                          3534  
000091F4  E1D9                    3535      ASL.W     (A1)+
000091F6                          3536  
000091F6  E1E1                    3537      ASL.W     -(A1)
000091F8                          3538  
000091F8  E3A2                    3539      ASL.L     D1,D2
000091FA                          3540  
000091FA  E33A                    3541      ROL.B     D1,D2
000091FC                          3542  
000091FC  E37A                    3543      ROL.W     D1,D2
000091FE                          3544  
000091FE  E7D1                    3545      ROL.W     (A1)
00009200                          3546  
00009200  E7D9                    3547      ROL.W     (A1)+
00009202                          3548  
00009202  E7E1                    3549      ROL.W     -(A1)
00009204                          3550  
00009204  E3BA                    3551      ROL.L     D1,D2
00009206                          3552  
00009206  E23A                    3553      ROR.B     D1,D2
00009208                          3554  
00009208  E27A                    3555      ROR.W     D1,D2
0000920A                          3556  
0000920A  E6D1                    3557      ROR.W     (A1)
0000920C                          3558  
0000920C  E6D9                    3559      ROR.W     (A1)+
0000920E                          3560  
0000920E  E6E1                    3561      ROR.W     -(A1)
00009210                          3562  
00009210  E2BA                    3563      ROR.L     D1,D2    
00009212                          3564  
00009212  B200                    3565      CMP.B    D0,D1
00009214                          3566  
00009214  B210                    3567      CMP.B    (A0),D1
00009216                          3568  
00009216  B220                    3569      CMP.B    -(A0),D1
00009218                          3570  
00009218  B218                    3571      CMP.B    (A0)+,D1
0000921A                          3572  
0000921A  B240                    3573      CMP.W    D0,D1
0000921C                          3574  
0000921C  B248                    3575      CMP.W    A0,D1
0000921E                          3576  
0000921E  B250                    3577      CMP.W    (A0),D1
00009220                          3578  
00009220  B260                    3579      CMP.W    -(A0),D1
00009222                          3580  
00009222  B258                    3581      CMP.W    (A0)+,D1
00009224                          3582  
00009224  B280                    3583      CMP.L    D0,D1
00009226                          3584  
00009226  B288                    3585      CMP.L    A0,D1
00009228                          3586  
00009228  B290                    3587      CMP.L    (A0),D1
0000922A                          3588  
0000922A  B2A0                    3589      CMP.L    -(A0),D1
0000922C                          3590  
0000922C  B298                    3591      CMP.L    (A0)+,D1
0000922E                          3592      
0000922E  6000 0002               3593      BRA       lss      
00009232                          3594  
00009232  644E                    3595  lss BCC.B     label1
00009234                          3596  
00009234  644C                    3597      BCC.B     label2
00009236                          3598  
00009236  6E4A                    3599      BGT.B     label1
00009238                          3600  
00009238  6E48                    3601      BGT.B     label2
0000923A                          3602  
0000923A  6F46                    3603      BLE.B     label1
0000923C                          3604  
0000923C  6F44                    3605      BLE.B     label2
0000923E                          3606  
0000923E  6400 0042               3607      BCC.W     label1
00009242                          3608  
00009242  6400 003E               3609      BCC.W     label2
00009246                          3610  
00009246  6400 003A               3611      BCC.W     label3
0000924A                          3612  
0000924A  6E00 0036               3613      BGT.W     label1
0000924E                          3614  
0000924E  6E00 0032               3615      BGT.W     label2
00009252                          3616  
00009252  6E00 002E               3617      BGT.W     label3
00009256                          3618  
00009256  6F00 002A               3619      BLE.W     label1
0000925A                          3620  
0000925A  6F00 0026               3621      BLE.W     label2
0000925E                          3622  
0000925E  6F00 0022               3623      BLE.W     label3
00009262                          3624  
00009262  4E90                    3625      JSR       (A0)
00009264                          3626  
00009264  4EB8 1234               3627      JSR       $1234
00009268                          3628  
00009268  4EB9 12345678           3629      JSR       $12345678
0000926E                          3630  
0000926E  4EB9 00009282           3631      JSR       label1
00009274                          3632  
00009274  4EB9 00009282           3633      JSR       label2
0000927A                          3634  
0000927A  4EB9 00009282           3635      JSR       label3
00009280                          3636  
00009280  4E71                    3637      NOP
00009282                          3638  
00009282                          3639  label1
00009282                          3640  label2
00009282                          3641  label3
00009282                          3642  
00009282  4E75                    3643      RTS
00009284                          3644      
00009284  48A1 007F               3645      MOVEM.W   A1-A7,-(A1)
00009288                          3646  
00009288  48E1 7F00               3647      MOVEM.L   D1-D7,-(A1)
0000928C                          3648  
0000928C  48A1 0140               3649      MOVEM.W   A1/D7,-(A1)
00009290                          3650  
00009290  48E1 0140               3651      MOVEM.L   A1/D7,-(A1)
00009294                          3652  
00009294  4891 FE00               3653      MOVEM.W   A1-A7,(A1)
00009298                          3654  
00009298  48D1 00FE               3655      MOVEM.L   D1-D7,(A1)
0000929C                          3656  
0000929C  4891 0280               3657      MOVEM.W   A1/D7,(A1)
000092A0                          3658  
000092A0  48D1 0280               3659      MOVEM.L   A1/D7,(A1)
000092A4                          3660  
000092A4  4C99 FE00               3661      MOVEM.W   (A1)+,A1-A7
000092A8                          3662  
000092A8  4CD9 00FE               3663      MOVEM.L   (A1)+,D1-D7
000092AC                          3664  
000092AC  4C99 0280               3665      MOVEM.W   (A1)+,A1/D7
000092B0                          3666  
000092B0  4CD9 0280               3667      MOVEM.L   (A1)+,A1/D7
000092B4                          3668  
000092B4  4C91 FE00               3669      MOVEM.W   (A1),A1-A7
000092B8                          3670  
000092B8  4CD1 00FE               3671      MOVEM.L   (A1),D1-D7
000092BC                          3672  
000092BC  4C91 0280               3673      MOVEM.W   (A1),A1/D7
000092C0                          3674  
000092C0  4CD1 0280               3675      MOVEM.L   (A1),A1/D7
000092C4                          3676      
000092C4                          3677      
000092C4                          3678  
000092C4                          3679      
000092C4                          3680   
000092C4                          3681  
000092C4                          3682  
000092C4                          3683  
000092C4                          3684  
000092C4                          3685  
000092C4                          3686  
000092C4                          3687  
000092C4                          3688  
000092C4                          3689  
000092C4                          3690  
000092C4                          3691  
000092C4                          3692  
000092C4                          3693  
000092C4                          3694  
000092C4                          3695  
000092C4                          3696  
000092C4                          3697  
000092C4                          3698  -------------------- end include --------------------
000092C4                          3699      
000092C4                          3700      
Line 3701 WARNING: Origin value is odd (Location counter set to next highest address)
000092C4                          3701     END    START        ; last line of source

No errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA                2B64
ADDA_BACK           2B7C
ADDRESS             2874
ADDSTRTOBUFFER      1264
ARG_ADDSTRTOBUFFER_BUFFER  125A
ARG_ADDSTRTOBUFFER_BUFFERLENGTH  125E
ARG_ADDSTRTOBUFFER_STRING  1256
ARG_CLEARBUFFER_BUFFER  12B8
ARG_CLEARBUFFER_LENGTH  12BC
ARG_NUMTOHEXSTR_LENGTH  13C6
ARG_NUMTOHEXSTR_NUM  13C2
ASCIITOHEX          137A
ASCIITOHEXREGLIST   1
ASCII_VAL           16EE
ASD_1               2966
ASD_1_BACK          2992
ASD_2               29BE
ASD_2_IMD           29D4
ASD_2_IMD_B         29FA
ASD_2_REG           2A16
BACK                2F14
BACK2               2F40
BACK3               2FA0
BACK4               2F82
BACK5               2FE2
BCLR                2F56
BIT_CHECK_EXG       21E2
BIT_CHECK_EXT       1DA8
BIT_CHECK_MOVEP     1B0A
BIT_CHECK_SUBX      20EE
BRA                 2AA2
BRA_BYTE            2ACE
BRA_BYTE2           2AF4
BRA_BYTE3           2B00
BRA_WORD            2B08
BRA_WORD_BK         2B24
BRA_WRD_BK2         2B42
BYTEREAD            16ED
B_BUFFER            1050
CHECK_00XX          28F2
CHECK_01XX          2900
CHECK_0XXX          289E
CHECK_1XXX          28AE
CHECK_OP_ABCD       21BA
CHECK_OP_ADD        2278
CHECK_OP_ADDA       225A
CHECK_OP_ADDI       1A6A
CHECK_OP_ADDQ       1F5E
CHECK_OP_ADDX       2246
CHECK_OP_AND        2222
CHECK_OP_ANDI       1A42
CHECK_OP_ANDI_TO_CCR  1A02
CHECK_OP_ANDI_TO_SR  1A12
CHECK_OP_ASL        2418
CHECK_OP_ASL_NO_ROT  2340
CHECK_OP_ASR        23FA
CHECK_OP_ASR_NO_ROT  2326
CHECK_OP_BCS        1FCE
CHECK_OP_BGE        1FE8
CHECK_OP_BLT        2002
CHECK_OP_BRA        1FB4
CHECK_OP_BSR        1FA0
CHECK_OP_BVC        201C
CHECK_OP_CHK        1E8A
CHECK_OP_CLR        1D6C
CHECK_OP_CMP        2178
CHECK_OP_CMPA       2146
CHECK_OP_CMPI       1B56
CHECK_OP_CMPM       2132
CHECK_OP_DBCC       1F36
CHECK_OP_DIVS       2092
CHECK_OP_DIVU       206A
CHECK_OP_DYNAMIC_BCHG  1AE2
CHECK_OP_DYNAMIC_BCLR  1B92
CHECK_OP_DYNAMIC_BSET  1AF6
CHECK_OP_DYNAMIC_BTST  1ACE
CHECK_OP_EOR        215A
CHECK_OP_EORI       1A7E
CHECK_OP_EORI_TO_CCR  1A22
CHECK_OP_EORI_TO_SR  1A32
CHECK_OP_EXG        21CE
CHECK_OP_EXT        1D94
CHECK_OP_ILLEGAL    1CDC
CHECK_OP_JMP        1E76
CHECK_OP_JSR        1ECE
CHECK_OP_LEA        1EB4
CHECK_OP_LINK       1E3A
CHECK_OP_LSL        23DC
CHECK_OP_LSL_NO_ROT  230C
CHECK_OP_LSR        23BE
CHECK_OP_LSR_NO_ROT  22F2
CHECK_OP_MOVEA_L    1BEA
CHECK_OP_MOVEA_W    1C4C
CHECK_OP_MOVEM      1F06
CHECK_OP_MOVEP      1B24
CHECK_OP_MOVEQ      2046
CHECK_OP_MOVE_B     1BC0
CHECK_OP_MOVE_FROM_SR  1D1C
CHECK_OP_MOVE_L     1C22
CHECK_OP_MOVE_TO_CCR  1D30
CHECK_OP_MOVE_TO_SR  1D44
CHECK_OP_MOVE_USP   1E62
CHECK_OP_MOVE_W     1C84
CHECK_OP_MULS       2208
CHECK_OP_MULU       21A6
CHECK_OP_NBCD       1DC2
CHECK_OP_NEG        1EE8
CHECK_OP_NEGX       1D58
CHECK_OP_NOP        1CCC
CHECK_OP_NOT        1D80
CHECK_OP_OR         20AC
CHECK_OP_ORI        1B38
CHECK_OP_ORI_TO_CCR  19E2
CHECK_OP_ORI_TO_SR  19F2
CHECK_OP_PEA        1DEA
CHECK_OP_RESET      1CBC
CHECK_OP_ROL        23A0
CHECK_OP_ROL_NO_ROT  22D8
CHECK_OP_ROR        2382
CHECK_OP_ROR_NO_ROT  22BE
CHECK_OP_ROXL       236E
CHECK_OP_ROXL_NO_ROT  22AA
CHECK_OP_ROXR       235A
CHECK_OP_ROXR_NO_ROT  2296
CHECK_OP_RTE        1CEC
CHECK_OP_RTR        1D0C
CHECK_OP_RTS        1E9E
CHECK_OP_SBCD       207E
CHECK_OP_SCC        1F4A
CHECK_OP_STATIC_BCHG  1AA6
CHECK_OP_STATIC_BCLR  1B74
CHECK_OP_STATIC_BSET  1ABA
CHECK_OP_STATIC_BTST  1A92
CHECK_OP_STOP       1CAC
CHECK_OP_SUB        210C
CHECK_OP_SUBA       20CA
CHECK_OP_SUBI       1A56
CHECK_OP_SUBQ       1F72
CHECK_OP_SUBX       20DE
CHECK_OP_SWAP       1DD6
CHECK_OP_TAS        1DFE
CHECK_OP_TRAP       1E26
CHECK_OP_TRAPV      1CFC
CHECK_OP_TST        1E12
CHECK_OP_UNLK       1E4E
CHECK_PRINT         11C2
CHECK_XXXX          288E
CHRDONE             1396
CHRLOOP             1382
CHUMP_BYTE          30CA
CHUMP_LONG          30DA
CHUMP_WORD          30D2
CLEARBUFFER         12C0
COMMA               287C
COUNTDONE           1336
COUNTLOOP           1324
CR                  D
CUR_OP_CODE         10A0
C_GROUP_0           19DE
C_GROUP_1           1BBC
C_GROUP_2           1BE6
C_GROUP_3           1C48
C_GROUP_4           1CAA
C_GROUP_5           1F32
C_GROUP_6           1F9C
C_GROUP_7           2042
C_GROUP_8           2066
C_GROUP_9           20C6
C_GROUP_A           2126
C_GROUP_B           212E
C_GROUP_C           21A2
C_GROUP_D           2242
C_GROUP_E           2292
C_GROUP_F           2442
DATA                2875
DIR_0               2BE4
DIR_1               2C26
DIVS                2C68
DIVS_BACK           2C94
DONE                1252
DOWN_ONE            2AEC
DOWN_ZERO           2AE4
DYNMC_BCLR          2FB6
END                 326C
ERRORFILE           1702
EXT                 288A
FILEID              174E
FILENAME            16F6
FINDNULLLOOPDONE    1306
FIND_1_BIT_SIZE_6   18F4
FIND_1_BIT_SIZE_8   1914
FIND_2_BIT_SIZE_7_TO_6  18D4
FIND_3_BIT_REG_TO_EA  1934
FIND_MOVEA_L_DIFFERENCE  1BFC
FIND_MOVEA_W_DIFF   1C5E
FIRST_3             176E
FOURTH_3            1771
GO                  30E2
GOO                 301A
GOO2                3046
GROUP0_INVALID      1BB0
GROUP0_SUCCESS      1BB6
GROUP1_INVALID      1BDA
GROUP1_SUCCESS      1BE0
GROUP2_INVALID      1C3C
GROUP2_SUCCESS      1C42
GROUP3_INVALID      1C9E
GROUP3_SUCCESS      1CA4
GROUP4_INVALID      1F20
GROUP4_SUCCESS      1F2C
GROUP5_INVALID      1F90
GROUP5_SUCCESS      1F96
GROUP6_INVALID      2036
GROUP6_SUCCESS      203C
GROUP7_INVALID      205A
GROUP7_SUCCESS      2060
GROUP8_INVALID      20BA
GROUP8_SUCCESS      20C0
GROUP9_INVALID      211A
GROUP9_SUCCESS      2120
GROUPB_INVALID      2196
GROUPB_SUCCESS      219C
GROUPC_INVALID      2236
GROUPC_SUCCESS      223C
GROUPD_INVALID      2286
GROUPD_SUCCESS      228C
GROUPE_INVALID      2436
GROUPE_SUCCESS      243C
GROUP_0             1784
GROUP_1             1796
GROUP_2             17A8
GROUP_3             17BA
GROUP_4             17CC
GROUP_5             17DE
GROUP_6             17F0
GROUP_7             1802
GROUP_8             1814
GROUP_9             1826
GROUP_A             1838
GROUP_B             184A
GROUP_C             185C
GROUP_D             186E
GROUP_E             1880
GROUP_F             1892
GT                  3258
G_BUFFER            1000
HEX_SIGN            2878
IMMDTE_VALU         2879
INVALID             3270
INVALID_ADDRESS_MESSAGE  1752
INVALID_OP          244A
IS_VALID            10A2
JSR                 2E18
JSR_BACK            2E30
LABEL1              9282
LABEL2              9282
LABEL3              9282
LE                  3262
LEA                 2E4E
LEA_BACK            2E66
LF                  A
LOAD_0000           2E90
LOAD_00XX           2FF8
LOAD_0100           2D34
LOAD_0101           2CAA
LOAD_0110           2A40
LOAD_1000           2BB8
LOAD_1001           2BB2
LOAD_1011           2BAC
LOAD_1100           2BA6
LOAD_1101           2B4A
LOAD_1110           2920
LOAD_8              29E6
LOAD_A              31E6
LOAD_ABS_LONG       3178
LOAD_ABS_SHORT      3166
LOAD_ADDRESS        313C
LOAD_ADDRESS_W_POST_INC  314E
LOAD_ADDRESS_W_PRE_DEC  315A
LOAD_ADDR_REGISTER  312A
LOAD_BYTES          3194
LOAD_COMMA_SPACE    31C0
LOAD_D              31D8
LOAD_DATA_REGISTER  3118
LOAD_EA             305C
LOAD_FIRST3         29F0
LOAD_GE_111         309C
LOAD_HEX_SIGN       3210
LOAD_IMMDTE         318A
LOAD_IMMDTE_VALU    321E
LOAD_LT_111         306E
LOAD_MINUS_SIGN     323A
LOAD_NEW_LINE       31BE
LOAD_NUM            324C
LOAD_PLUS_SIGN      322C
LOAD_PTHSIS_CLSD    3202
LOAD_PTHSIS_OPEN    31F4
LOAD_THIS_SHIT      3248
LOOP                319E
LSS                 9232
MAINLOOP            1160
MAIN_CONSOLE        1430
MAIN_EA             2880
MINUS_SIGN          287B
MNEMONIC            176D
MOVEM               2E46
MOVE_AND_MOVEA_PARSE_EA  194A
MOVE_LAST_6_BITS_TO_EA  18B2
MYBE_ASD_1          2942
MYBE_ASD_2          29A8
MYBE_BCLR           2ED8
MYBE_BRA            2A60
MYBE_CMPI           2EC0
MYBE_JSR            2D98
MYBE_MOVEM          2DB8
MYBE_NEG            2D4C
MYBE_ORI            2EA8
MYBE_RTS1           2D64
MYBE_RTS2           2D72
MYBE_RTS3           2D80
MYBE_SUBQ1          2CC4
MYBE_SUBQ2          2CD4
NEG                 2DD8
NEG_BACK            2DFA
NEG_WORD            2B2C
NEWLINE             16DC
NOT_BCLR            2EE2
NOT_BRA             2A6E
NOT_CMPI            2ECA
NOT_JSR             2DA2
NOT_MOVEM           2DC8
NOT_NEG             2D56
NOT_ORI             2EB2
NOT_RTS             2D8A
NULLLOOP            12F8
NUMTOHEXSTR         13D0
OP_FOUND            2740
OP_JSR_DONE         18A0
OP_JSR_ROUTINE      1772
OP_SIZE             176C
ORI_CMPI            2EF2
OR_BACK             2BFC
OR_BACK2            2C52
OUTFILENAME         16E2
PARSE_EA_CONSTANT_BITS  1990
PLUS_SIGN           287A
POS_WORD            2B18
PRINT_DATA          11E0
PRINT_INSTRUCTION   11D0
PRINT_OP_ADD        2646
PRINT_OP_ADDA       265A
PRINT_OP_ASL        26AA
PRINT_OP_ASR        2696
PRINT_OP_BCS        2576
PRINT_OP_BGE        258A
PRINT_OP_BLT        259E
PRINT_OP_BRA        25C6
PRINT_OP_BVC        25B2
PRINT_OP_CMP        2624
PRINT_OP_CMPI       2474
PRINT_OP_DIVS       25DA
PRINT_OP_DYNAMIC_BCLR  249C
PRINT_OP_EOR        2610
PRINT_OP_JSR        24F6
PRINT_OP_LEA        251E
PRINT_OP_LSL        266E
PRINT_OP_LSR        2682
PRINT_OP_MOVEA_L    24BE
PRINT_OP_MOVEA_W    24DA
PRINT_OP_MOVEB      24B0
PRINT_OP_MOVEM_L    2554
PRINT_OP_MOVEM_W    2546
PRINT_OP_MOVE_L     24CC
PRINT_OP_MOVE_W     24E8
PRINT_OP_MULS       2638
PRINT_OP_NEG        2532
PRINT_OP_OR         25E8
PRINT_OP_ORI        2460
PRINT_OP_ROL        26BE
PRINT_OP_ROR        26D2
PRINT_OP_RTS        250A
PRINT_OP_SIZE       2710
PRINT_OP_SIZE_ADDA  272A
PRINT_OP_STATIC_BCLR  2488
PRINT_OP_SUB        25FC
PRINT_OP_SUBQ       2562
PRINT_SIZE_BYTE     26E6
PRINT_SIZE_LONG     2702
PRINT_SIZE_WORD     26F4
PRINT_TO_BUFFER     2452
PTHSIS_CLSD         2877
PTHSIS_OPEN         2876
P_INVALID_OP        2734
P_OP_ADD            2843
P_OP_ADDA           283B
P_OP_ASL            285F
P_OP_ASR            2858
P_OP_BCLR           2764
P_OP_BCS            27EF
P_OP_BGE            27F6
P_OP_BLT            27FD
P_OP_BRA            27E8
P_OP_BVC            2804
P_OP_CMP            282A
P_OP_CMPI           275C
P_OP_DIVS           280B
P_OP_EOR            2823
P_OP_JSR            27C4
P_OP_LEA            27BD
P_OP_LSL            2851
P_OP_LSR            284A
P_OP_MOVEA_L        2777
P_OP_MOVEA_W        278E
P_OP_MOVEB          276C
P_OP_MOVEM_L        27B1
P_OP_MOVEM_W        27A5
P_OP_MOVE_L         2783
P_OP_MOVE_W         279A
P_OP_MULS           2831
P_OP_NEG            27D9
P_OP_NOP            27CB
P_OP_OR             2816
P_OP_ORI            2755
P_OP_ROL            286D
P_OP_ROR            2866
P_OP_RTS            27D2
P_OP_SUB            281C
P_OP_SUBQ           27E0
P_SIZE_B            2749
P_SIZE_L            2751
P_SIZE_W            274D
RET_ADDSTRTOBUFFER_SUCCESS  1262
RET_NUMTOHEXSTR_STR  13C7
RET_SA              13C0
ROTATE              31A8
RTS                 2E10
SAVED               306C
SECOND_3            176F
SIZE                14
SIZE_B              3100
SIZE_L              3110
SIZE_W              3108
SPACE               287D
START               10A3
STRING              1738
STRIP_ASCII         139C
STRSIZE             174C
SUB30               13BC
SUB37               13B4
SUBQ                2CE4
SUBQ_BACK           2D1E
SUBQ_SAVED          2CF6
SUCCESS             171E
THIRD_3             1770
TOSAVE              C3F
TRAILING_HELPER     3100
TRAILING_SIZE       287E
TRAPTASK13          12E4
VALIDATEPOSITIVEADDRESS  10FA
VALIDATE_END_POS    111C
VALIDATE_EVEN       113E
VALIDATE_START_ADDRESS  10F8
_00000000           131A
_ADDSTRTOBUFFER_ADDLOOP  128E
_ADDSTRTOBUFFER_BUFFERLOOP  127A
_ADDSTRTOBUFFER_END  12B2
_ADDSTRTOBUFFER_LENGTHEXCEEDED  12AC
_ADDSTRTOBUFFER_SUCCESS  12A4
_CLEARBUFFER_END    12DA
_CLEARBUFFER_LOOP   12CE
_NUMTOHEXSTR_ADDCHAR  141E
_NUMTOHEXSTR_LETTER  1416
_NUMTOHEXSTR_LOOP   1402
_NUMTOHEXSTR_POSLENGTH  13F0
_NUMTOHEXSTR_VALIDLENGTH  13FA
