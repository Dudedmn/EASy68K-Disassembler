000010A4 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/17/2019 10:53:20 AM

00000000                             1  **--------------------------------------------------------------------------
00000000                             2  * Title      : Disassembler 
00000000                             3  * Written by : TEAM REEE Denny, Daniel, Fahad
00000000                             4  * Date       : 3/16/2019 
00000000                             5  * 
00000000                             6  * 
00000000                             7  * Description: This code contains a method for you to use
00000000                             8  * with your Disassembler project IO, and a short demo of 
00000000                             9  * how to call this method in the body of the "START" code.
00000000                            10  *---------------------------------------------------------------------------
00001000                            11      ORG    $1000    
00001000                            12  *---------------------------------------------------------------------------
00001000                            13  
00001000                            14  *declare the variable startaddr with size 1 long
00001000                            15  G_BUFFER        DS.B    80  ;Used to print out the needed letters to the buffer
00001050                            16  B_BUFFER        DS.B    80  ;Bad buffer used to load bad data
000010A0                            17  CUR_OP_CODE     DS.W    1   ;Used to determine the current 4 hex OP code
000010A2                            18  IS_VALID        DS.B    1   ;Validity bit to check if a code is valid or not
000010A3                            19                              ;1 = valid, 0 = invalid
000010A3                            20                              
000010A3                            21  START:
000010A3                            22  
000010A4  43F9 00001430             23      LEA MAIN_CONSOLE, A1
000010AA  4EB9 000012E4             24      JSR TrapTask13
000010B0                            25  
000010B0                            26      
000010B0                            27      
000010B0                            28      ******************************************
000010B0                            29      **
000010B0                            30      **     ___         ___        /  __  
000010B0                            31      **    |__  | |    |__     |  /  /  \  
000010B0                            32      **    |    | |___ |___    | /   \__/ 
000010B0                            33      **                           
000010B0                            34      **
000010B0                            35      ** This is the begninning of the code for reading from files
000010B0                            36      ******************************************
000010B0                            37  
000010B0                            38  
000010B0                            39      ;Open config.cfg (trap subtasks 50-59) (this is an IO responsibility if 3 team members)
000010B0                            40      
000010B0                            41  
000010B0                            42                   ; perform task
000010B0                            43  ; Attempt to open file for input
000010B0  43F9 00001702             44          lea     fileName,A1             ; name of file to open
000010B6  103C 0033                 45          move.b  #51,D0                  ; trap task #51, open existing file
000010BA  4E4F                      46          trap    #15                     ; perform task
000010BC  23C1 0000175A             47          move.l  D1,fileID               ; save file ID
000010C2                            48  
000010C2                            49  ; Read string from file
000010C2  43F9 00001744             50          lea     string,A1               ; location of string buffer
000010C8  2239 0000175A             51          move.l  fileID,D1               ; file ID of file to read from
000010CE  4282                      52          clr.l   D2
000010D0  343C 0014                 53          move.w  #SIZE,D2                ; number of bytes to read
000010D4  103C 0035                 54          move.b  #53,D0                  ; trap task #53, read from file
000010D8  4E4F                      55          trap    #15                     ; perform task
000010DA                            56  ; Close file when finished
000010DA  103C 0038                 57          move.b  #56,D0                  ; trap task #56, close file, D1 contains fileID
000010DE  4E4F                      58          trap    #15                     ; perform task
000010E0                            59  
000010E0                            60          
000010E0                            61  
000010E0                            62      ;load start and end address as longs
000010E0                            63      ; Start Address is in A5     
000010E0  43F9 00001744             64      LEA string, A1
000010E6  4EB9 0000137A             65      JSR AsciiToHex     ;  example of how to convert ascii to hex
000010EC  2A47                      66      MOVE.L D7, A5
000010EE                            67      
000010EE                            68      ; End Address is in A6
000010EE  5489                      69      ADDA.L #2, A1
000010F0  4EB9 0000137A             70      JSR AsciiToHex
000010F6  2C47                      71      MOVE.L D7, A6
000010F8                            72      
000010F8                            73      
000010F8                            74      ;loop from start to end, printing out the instruction or DATA if not recognized 
000010F8                            75      ;   use my method below (printStringToFileAndConsole) to print out the individual instruction (or DATA)
000010F8                            76      
000010F8                            77      ;TODO : validate start and ending address 
000010F8                            78      
000010F8                            79  Validate_Start_Address
000010F8  200D                      80      MOVE.L A5, D0
000010FA                            81  *----------------------------------------------------------------------------------
000010FA                            82  * Method Name: ValidatePositiveAddress
000010FA                            83  * Description: Checks if the start address is positve it then branches
000010FA                            84  *              to validate if the address in the config.cfg file is even
000010FA                            85  *
000010FA                            86  *  Preconditions & Input of a start address that is even
000010FA                            87  *       A1 (input) points to a memory buffer holding 8 ascii chars (not null-terminated) 
000010FA                            88  *       This function calls another function (strip_ascii)
000010FA                            89  *
000010FA                            90  *  Postconditions & Output
000010FA                            91  *   
000010FA                            92  *----------------------------------------------------------------------------------
000010FA                            93  ValidatePositiveAddress
000010FA  200D                      94      MOVE.L A5, D0
000010FC  0280 80000000             95      ANDI.L #$80000000, D0 * checking if the start address address is postive
00001102  B0BC 00000000             96      CMP.L #0, D0
00001108  6700 0034                 97      BEQ validate_even
0000110C                            98      
0000110C  43F9 0000175E             99      LEA invalid_address_message, A1
00001112  103C 000E                100      MOVE.B #14, D0    
00001116  4E4F                     101      TRAP #15        
00001118                           102      
00001118                           103      
00001118  6000 0138                104      BRA DONE
0000111C                           105  
0000111C                           106  validate_end_pos
0000111C  200E                     107      MOVE.L A6, D0
0000111E  0280 80000000            108      ANDI.L #$80000000, D0 * checking if the end address address is postive
00001124  B0BC 00000000            109      CMP.L #0, D0
0000112A  6700 0012                110      BEQ validate_even
0000112E                           111      
0000112E  43F9 0000175E            112      LEA invalid_address_message, A1
00001134  103C 000E                113      MOVE.B #14, D0    
00001138  4E4F                     114      TRAP #15        
0000113A                           115      
0000113A                           116      
0000113A  6000 0116                117      BRA DONE
0000113E                           118      
0000113E                           119      
0000113E                           120  validate_even
0000113E  200D                     121      MOVE.L A5, D0     *MOVE STARTING ADDRESS TO D0
00001140  0280 00000001            122      ANDI.L #$00000001, D0            
00001146  B0BC 00000000            123      CMP.L #0, D0
0000114C  6700 0012                124      BEQ mainloop
00001150                           125      *handle odd addresses        
00001150                           126      
00001150  43F9 0000175E            127      LEA invalid_address_message, A1
00001156  103C 000E                128      MOVE.B #14, D0    
0000115A  4E4F                     129      TRAP #15        
0000115C                           130              
0000115C  6000 00F4                131      BRA DONE 
00001160                           132              
00001160                           133  
00001160                           134  
00001160                           135              
00001160  49F8 1000                136  mainloop    LEA G_BUFFER,A4
00001164                           137      
00001164  BDCD                     138              CMPA.L A5, A6
00001166  6D00 00EA                139              BLT DONE
0000116A                           140              
0000116A                           141              *clear both buffers 
0000116A  23FC 00001000 000012B8   142              MOVE.L #G_BUFFER, Arg_ClearBuffer_Buffer  
00001174  4EB9 000012C0            143              JSR ClearBuffer
0000117A                           144              
0000117A  23FC 00001050 000012B8   145              MOVE.L #B_BUFFER, Arg_ClearBuffer_Buffer  
00001184  4EB9 000012C0            146              JSR ClearBuffer
0000118A                           147              
0000118A                           148              * Add address to both buffers
0000118A                           149              
0000118A  23CD 000013C2            150              MOVE.L A5, Arg_NumToHexStr_Num  * the current address is stored to A5, so we need to move to the arg of converting from NumToHex
00001190  13FC 0008 000013C6       151              MOVE.B #8, Arg_NumToHexStr_Length    *this specifies the number of characters that needs to be convorted.
00001198  4EB9 000013D0            152              JSR NumToHexStr 
0000119E                           153              
0000119E  23FC 000013C7 00001256   154              MOVE.L #Ret_NumToHexStr_Str, Arg_AddStrToBuffer_String
000011A8  23FC 00001000 0000125A   155              MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer  * printing the address to the good buffer
000011B2  4EB9 00001264            156              JSR AddStrToBuffer
000011B8                           157      
000011B8                           158             
000011B8                           159      
000011B8  31DD 10A0                160              MOVE.W (A5)+, CUR_OP_CODE * read the current opcode
000011BC                           161              
000011BC                           162              
000011BC                           163               
000011BC  4EF9 0000177E            164              JMP OP_JSR_Routine
000011C2                           165  
000011C2                           166  *********************************
000011C2                           167  *Checks if its valid print or invalid
000011C2                           168  * @pre checks invalid
000011C2                           169  * @post Branches to the respective branch
000011C2                           170  ************************************
000011C2                           171  check_print
000011C2  0C38 0001 10A2           172              CMP.B #1,IS_VALID
000011C8  6700 0006                173              BEQ   print_instruction
000011CC  6600 0012                174              BNE   print_data
000011D0                           175              
000011D0                           176  print_instruction  
000011D0  6600 000E                177              BNE print_data
000011D4                           178              *print the opcode if valid
000011D4  43F8 1000                179              LEA G_BUFFER,A1
000011D8  4EB9 000012E4            180              JSR TrapTask13
000011DE  6080                     181              BRA mainloop
000011E0                           182   
000011E0                           183              *otherwise print data
000011E0                           184  print_data  
000011E0  23CD 000013C2            185              MOVE.L A5, Arg_NumToHexStr_Num  * the current address is stored to A5, so we need to move to the arg of converting from NumToHex
000011E6  13FC 0008 000013C6       186              MOVE.B #8, Arg_NumToHexStr_Length    *this specifies the number of characters that needs to be convorted.
000011EE  4EB9 000013D0            187              JSR NumToHexStr 
000011F4  23FC 000013C7 00001256   188              MOVE.L #Ret_NumToHexStr_Str, Arg_AddStrToBuffer_String 
000011FE                           189              
000011FE  23FC 00001050 0000125A   190              MOVE.L #B_BUFFER, Arg_AddStrToBuffer_Buffer
00001208  4EB9 00001264            191              JSR AddStrToBuffer
0000120E                           192              * Add bad data to bad buffer
0000120E  23FC 000027CE 00001256   193              MOVE.L #P_INVALID_OP, Arg_AddStrToBuffer_String *printing data to the bad buffer
00001218  4EB9 00001264            194              JSR AddStrToBuffer
0000121E                           195              
0000121E  33F8 10A0 000013C2       196              MOVE.W CUR_OP_CODE, Arg_NumToHexStr_Num  * the current address is stored to A5, so we need to move to the arg of converting from NumToHex
00001226  13FC 0008 000013C6       197              MOVE.B #8, Arg_NumToHexStr_Length    *this specifies the number of characters that needs to be convorted.
0000122E  4EB9 000013D0            198              JSR NumToHexStr 
00001234                           199              
00001234  23FC 000013C7 00001256   200              MOVE.L #Ret_NumToHexStr_Str, Arg_AddStrToBuffer_String
0000123E  4EB9 00001264            201              JSR AddStrToBuffer
00001244                           202              
00001244  43F8 1050                203              LEA B_BUFFER,A1
00001248  4EB9 000012E4            204              JSR TrapTask13          
0000124E  6000 FF10                205              BRA mainLoop
00001252                           206  
00001252                           207  
00001252                           208  DONE            
00001252  FFFF FFFF                209              SIMHALT 
00001256                           210              
00001256                           211   
00001256                           212  **
00001256                           213  * AddStrToBuffer
00001256                           214  **
00001256                           215  * Adds the given NULL-terminated string to the specified buffer.
00001256                           216  *
00001256                           217  * Default buffer length is 80 characters, but can be modified in the argument
00001256                           218  * variables.
00001256                           219  *
00001256                           220  * If the buffer length is exceeded, either due to lack of a NULL character or
00001256                           221  * an incorrectly specified length, 1 is returned. Otherwise, 0 is returned to
00001256                           222  * indicate success.
00001256                           223  *
00001256                           224  **
00001256                           225  * @param Arg_AddStrToBuffer_String              Pointer to string
00001256                           226  * @param Arg_AddStrToBuffer_Buffer              Pointer to buffer
00001256                           227  * @param Arg_AddStrToBuffer_BufferLength        Length of buffer (default 80 chars)
00001256                           228  * @return Ret_AddStrToBuffer_Success            0 if successful, 1 otherwise.
00001256                           229  * @branch _AddStrToBuffer_FindBufferNullLoop    Loop to find NULL in buffer
00001256                           230  * @branch _AddStrToBuffer_AddLoop               Loop to add string to buffer
00001256                           231  * @branch _AddStrToBuffer_Success               Branch when string successfully added
00001256                           232  * @branch _AddStrToBuffer_StringLengthExceeded  Branch when length exceeded (either string or buffer)
00001256                           233  * @branch _AddStrToBuffer_End                   End of subroutine
00001256                           234  **
00001256                           235  Arg_AddStrToBuffer_String           DS.L    1
0000125A                           236  Arg_AddStrToBuffer_Buffer           DS.L    1
0000125E= 00000050                 237  Arg_AddStrToBuffer_BufferLength     DC.L    80
00001262                           238  Ret_AddStrToBuffer_Success          DS.B    1
00001263                           239  
00001264                           240  AddStrToBuffer:                     DS.W    0
00001264  48E7 C0C0                241      MOVEM.L     D0-D1/A0-A1, -(SP)                  * Backup registers to stack
00001268                           242      
00001268  2078 1256                243      MOVE.L      Arg_AddStrToBuffer_String, A0       * Load string pointer
0000126C  2278 125A                244      MOVE.L      Arg_AddStrToBuffer_Buffer, A1       * Load buffer pointer
00001270  2038 125E                245      MOVE.L      Arg_AddStrToBuffer_BufferLength, D0 * Load buffer length
00001274  4278 1262                246      CLR.W       Ret_AddStrToBuffer_Success          * Clear success bit
00001278  4281                     247      CLR.L       D1                                  * Clear loop counter
0000127A                           248  
0000127A                           249  _AddStrToBuffer_BufferLoop
0000127A  0C11 0000                250      CMPI.B      #0, (A1)                            * If buffer char is NULL
0000127E  6700 000E                251      BEQ         _AddStrToBuffer_AddLoop             * Start adding string to bufer
00001282                           252      
00001282  B280                     253      CMP.L       D0, D1                              * If counter >= max length
00001284  6C00 0026                254      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
00001288                           255      
00001288  5289                     256      ADDQ.L      #1, A1                              * Go to next character
0000128A  5201                     257      ADDQ.B      #1, D1                              * Increment counter
0000128C  60EC                     258      BRA         _AddStrToBuffer_BufferLoop          * Loop back
0000128E                           259      
0000128E                           260  _AddStrToBuffer_AddLoop
0000128E  0C10 0000                261      CMPI.B      #0, (A0)                            * If string char is NULL
00001292  6700 0010                262      BEQ         _AddStrToBuffer_Success             * String successfully added
00001296                           263      
00001296  B200                     264      CMP.B       D0, D1                              * If counter >= max length
00001298  6C00 0012                265      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
0000129C                           266      
0000129C  12D8                     267      MOVE.B      (A0)+, (A1)+                        * Move string char to buffer char
0000129E  5201                     268      ADDQ.B      #1, D1                              * Increment counter
000012A0  524C                     269      ADDQ.W      #1, A4
000012A2  60EA                     270      BRA         _AddStrToBuffer_AddLoop             * Loop back
000012A4                           271  
000012A4                           272  _AddStrToBuffer_Success
000012A4  12BC 0000                273      MOVE.B      #0, (A1)                            * Add NULL to end of string
000012A8  6000 0008                274      BRA         _AddStrToBuffer_End                 * Finish subroutine
000012AC                           275  
000012AC                           276  _AddStrToBuffer_LengthExceeded
000012AC  31FC 0001 1262           277      MOVE.W      #1, Ret_AddStrToBuffer_Success      * Invalidate success bit
000012B2                           278  
000012B2                           279  _AddStrToBuffer_End
000012B2  4CDF 0303                280      MOVEM.L     (SP)+, D0-D1/A0-A1                  * Restore registers from stack
000012B6  4E75                     281      RTS                  
000012B8                           282   
000012B8                           283   
000012B8                           284   
000012B8                           285  **************************************************************************
000012B8                           286  * ClearBuffer
000012B8                           287  ***********************************************************************
000012B8                           288  * Clears the given buffer by filling it with NULL. By default it will fill 80
000012B8                           289  * bytes from the buffer pointer with NULL, so make sure the buffer reserves
000012B8                           290  * that many bytes. The default can be changed.
000012B8                           291  *
000012B8                           292  **
000012B8                           293  * @param Arg_ClearBuffer_Buffer     Pointer to buffer
000012B8                           294  * @param Arg_ClearBuffer_Length     Byte length of buffer, default 80
000012B8                           295  * @branch _ClearBuffer_Loop         Buffer loop
000012B8                           296  * @branch _ClearBuffer_End          Subroutine end
000012B8                           297  *****************************************************************************
000012B8                           298  Arg_ClearBuffer_Buffer  DS.L    1
000012BC= 00000050                 299  Arg_ClearBuffer_Length  DC.L    80
000012C0                           300  
000012C0                           301  ClearBuffer:            DS.W    0
000012C0  48E7 C080                302      MOVEM.L     D0-D1/A0, -(SP)             * Backup registers to stack
000012C4  2078 12B8                303      MOVEA.L     Arg_ClearBuffer_Buffer, A0  * Load buffer address
000012C8  2038 12BC                304      MOVE.L      Arg_ClearBuffer_Length, D0  * Load buffer length
000012CC  4281                     305      CLR.L       D1                          * Clear counter
000012CE                           306      
000012CE                           307  _ClearBuffer_Loop
000012CE  B280                     308      CMP.L       D0, D1                      * If counter >= length
000012D0  6C00 0008                309      BGE         _ClearBuffer_End            * Finish subroutine
000012D4                           310      
000012D4  4218                     311      CLR.B       (A0)+                       * Clear current character in buffer
000012D6  5241                     312      ADDQ        #1, D1                      * Increment counter
000012D8  60F4                     313      BRA         _ClearBuffer_Loop           * Loop back
000012DA                           314      
000012DA                           315  _ClearBuffer_End
000012DA  4CDF 0103                316      MOVEM.L     (SP)+, D0-D1/A0             * Restore registers from stack
000012DE  4E75                     317      RTS                                     * Exit subroutine
000012E0                           318  
000012E0                           319  
000012E0  FFFF FFFF                320      SIMHALT
000012E4                           321  
000012E4                           322  
000012E4                           323  
000012E4                           324  *********************************************************************************
000012E4                           325  * Method Name: TrapTask13
000012E4                           326  * Description: Creates a file if none exists, and appends bytes to that file
000012E4                           327  *   while also echoing the written bytes to the screen.  You shouldn't need to
000012E4                           328  *   change this code.
000012E4                           329  *
000012E4                           330  * Calling Convention: Callee-Saved 
000012E4                           331  *
000012E4                           332  * Preconditions & Method Input:
000012E4                           333  *   A1 points to the null-terminated buffer to write (newline will be added for you)
000012E4                           334  *
000012E4                           335  * Postconditions & Output:
000012E4                           336  *   ALL files that were previously open will be CLOSED (FileIDs will be invalid)
000012E4                           337  *   See 'Output.txt' in directory for the results, also piped to the console
000012E4                           338  *
000012E4                           339  *
000012E4                           340  *  A2 holds a pointer to null terminated string to write (input)
000012E4                           341  *  A3 points to the null-terminated file name
000012E4                           342  *  D3 holds the number of bytes already in the file to write
000012E4                           343  *
000012E4                           344  *  D5 holds number of bytes to write
000012E4                           345  ********************************************************************************
000012E4                           346  toSave REG D0-D5/A2-A3
000012E4                           347  TrapTask13:
000012E4                           348      *******************************************************************
000012E4                           349      * Method initialization, regsiter spilling, parameter saving, etc.
000012E4                           350      *******************************************************************
000012E4  48E7 FC30                351      MOVEM.L toSave, -(SP)   ;  Callee-Saved, so save and restore     
000012E8                           352        
000012E8  2449                     353      MOVEA.L A1, A2 ; save this buffer to write
000012EA  47F9 000016E2            354      LEA outFilename, A3  ; save this for later, too
000012F0                           355        
000012F0  303C 0032                356      move #50,d0   
000012F4  4E4F                     357      trap #15 ; close all files, suggested to begin any IO 
000012F6                           358      *******************************************************************
000012F6                           359      * End Method Init
000012F6                           360      *******************************************************************
000012F6                           361  
000012F6                           362      ******************************************************************************************
000012F6                           363      * Calculate the number of bytes to write by searching for the null in the target buffer A0
000012F6                           364      ******************************************************************************************
000012F6  4285                     365      CLR.L D5 *D5 is now the number of bytes to write
000012F8                           366  nullLoop:
000012F8  1019                     367      MOVE.B (A1)+, D0
000012FA  0C00 0000                368      CMPI.B #0,D0  * compare to null
000012FE  6700 0006                369      BEQ findNullLoopDone
00001302  5245                     370      ADDI.W #1, D5
00001304  60F2                     371      BRA nullLoop
00001306                           372      
00001306                           373  findNullLoopDone:
00001306  224B                     374      MOVEA.L A3, A1 * reset A1 so it points to the file to write to (to open, next)
00001308                           375      
00001308                           376      ;check if file exists, and open with task 51 if so, otherwise 52
00001308                           377      ;(precondition here is A1 points to the null-terminated filename )
00001308  103C 0033                378      MOVE.B #51, D0      ;open file (task 51 is existing, 52 is new)
0000130C  4E4F                     379      trap #15
0000130E                           380        
0000130E                           381      if.w D0 <NE> #0 then.s         ; if file error (404, not found)
00001314  103C 0034                382          MOVE.B #52, D0             ; open new file (52 is new)
00001318  4E4F                     383          trap #15
0000131A                           384      endi
0000131A                           385      
0000131A                           386      ********************************************************************************************************* 
0000131A                           387      * Seek to END of FILE by counting the number of bytes, closing, reopening, then seeking.
0000131A                           388      *    (first, count number of bytes already in the file to obtain seek position)
0000131A                           389      *********************************************************************************************************
0000131A  4283                     390      Clr.L D3   ;TODO: reg save, D3 is now our count of bytes read
0000131C  7401                     391      MOVE.L #1, D2 ; read one byte at a time
0000131E  43F9 000016F9            392      LEA byteRead, A1
00001324                           393      
00001324                           394  countLoop:
00001324  103C 0035                395      MOVE.B #53, D0 ; try to read one byte (TODO: move out of loop)
00001328  4E4F                     396      trap #15
0000132A                           397      
0000132A  0C40 0001                398      CMPI.W #1,D0  ;1 == EOF
0000132E  6700 0006                399      BEQ countDone
00001332  5243                     400      ADDI #1, D3
00001334  60EE                     401      BRA countLoop
00001336                           402      
00001336                           403  countDone:    
00001336                           404      * close this file
00001336  303C 0038                405       move #56,d0  
0000133A  4E4F                     406       trap #15 
0000133C                           407       
0000133C                           408       * reopen the target file
0000133C  224B                     409       MOVE.L A3,A1
0000133E  303C 0033                410       MOVE #51, D0
00001342  4E4F                     411       trap #15
00001344                           412       
00001344                           413      * seek to right position, then continue with writing
00001344  2403                     414      MOVE.L D3, D2 ; move the number of bytes found in the file to D2
00001346  303C 0037                415      MOVE #55, D0  ; position file task
0000134A  4E4F                     416      trap #15
0000134C                           417  
0000134C                           418      ******************************************************************************
0000134C                           419      * Actually write the buffer to the file, after caculating the number of bytes 
0000134C                           420      *  to write and after seeking to the right location in the file for append
0000134C                           421      ******************************************************************************
0000134C                           422  
0000134C  2405                     423      MOVE.L D5, D2 ; restore this for the actually writing the buffer 
0000134E                           424      ; assumes A0 hasnt changed since handed to this method      
0000134E  224A                     425      MOVEA.L A2, A1 ; load the address of the buffer we want to write to disk
00001350                           426      ; assumes file ID is still stored in D1.L  
00001350  103C 0036                427      MOVE.B #54, D0 ; subtask 54 is write to open file (append, or?), assumes D2 holds # of bytes
00001354  4E4F                     428      trap #15
00001356                           429  
00001356                           430      ; add a newline to the file output
00001356  43F9 000016DC            431      LEA NEWLINE, A1
0000135C  103C 0036                432      MOVE.B #54, D0 
00001360  143C 0002                433      MOVE.B #2,D2  ; kills # of bytes to write from input param
00001364  4E4F                     434      trap #15
00001366                           435      
00001366                           436      ; finally, close only this file
00001366  103C 0038                437      MOVE.B #56, D0 ; close file task
0000136A  4E4F                     438      trap #15
0000136C                           439    
0000136C                           440      ; report to screen
0000136C  224A                     441      MOVEA.L A2, A1 ; load the address of the buffer we want to write to disk & screen
0000136E  103C 000D                442      MOVE.B #13, D0
00001372  4E4F                     443      trap #15
00001374                           444        
00001374                           445      ; restore context
00001374  4CDF 0C3F                446      MOVEM.L (SP)+, toSave
00001378                           447      
00001378  4E75                     448      RTS
0000137A                           449      
0000137A                           450      
0000137A                           451  *----------------------------------------------------------------------------------
0000137A                           452  * Method Name: AsciiToHex
0000137A                           453  * Written by : Berger, Modified by Nash
0000137A                           454  * Date       : 3/1/2019
0000137A                           455  * Description: Converts chars '0'-'9' and 'a'-'f' to 0-9,a-F
0000137A                           456  *              Transforms/unpacks 8 chars (8b each) pointed to by A1 into 
0000137A                           457  *              its (4b each) equivalent hex value 
0000137A                           458  *  
0000137A                           459  *  Preconditions & Input
0000137A                           460  *       A1 (input) points to a memory buffer holding 8 ascii chars (not null-terminated) 
0000137A                           461  *       This function calls another function (strip_ascii)
0000137A                           462  *
0000137A                           463  *  Postconditions & Output
0000137A                           464  *       D7 (output) holds the converted value 
0000137A                           465  *       Caller-Saved : D0 is temp, D6 is a loop var
0000137A                           466  *----------------------------------------------------------------------------------
0000137A                           467  AsciiToHexRegList REG D0,D6
0000137A                           468  AsciiToHex     
0000137A  48E7 8000                469      MOVEM.L asciiToHexRegList, -(SP)  *save context
0000137E  4287                     470      CLR.L D7 * clear our return value
00001380  7C08                     471      MOVE.L #8, D6 ; and set up our loop counter
00001382                           472  
00001382                           473  chrLoop
00001382  1019                     474      MOVE.B (A1)+,D0 * Get the first byte
00001384  4EB9 0000139C            475      jsr strip_ascii * Get rid of the ascii code    
0000138A  8E40                     476      OR.W D0,D7 * Load the bits into D7
0000138C                           477      
0000138C  5306                     478      subI.B #1,D6  *decrement our loop variable
0000138E  6700 0006                479      BEQ chrDone   *skip shifting if we are done
00001392                           480      
00001392  E987                     481      ASL.L #4,D7 * shift left 4 bits to prepare for next byte
00001394  60EC                     482      BRA chrLoop
00001396                           483  
00001396                           484  chrDone
00001396  4CDF 0001                485      MOVEM.L (SP)+,asciiToHexRegList 
0000139A  4E75                     486      RTS
0000139C                           487  
0000139C                           488  
0000139C                           489  **********************************************************************
0000139C                           490  * SUBROUTINE: strip_ascii
0000139C                           491  * remove the ascii code from the digits 0-9,a-f, or A-F
0000139C                           492  * Input Parameters: <D0> = ascii code
0000139C                           493  *
0000139C                           494  * Return parameters: D0.B = number 0...F, returned as 00...0F
0000139C                           495  * Registers used internally: D0
0000139C                           496  * Assumptions: D0 contains $30-$39, $41-$46 or $61-66
0000139C                           497  *
0000139C                           498  ***********************************************************************
0000139C                           499  strip_ascii
0000139C  B03C 0039                500        CMP.B #$39,D0 * Is it in range of 0-9?
000013A0  6F00 001A                501        BLE sub30 * Its a number
000013A4  B03C 0046                502        CMP.B #$46,D0 * Is is A...F?
000013A8  6F00 000A                503        BLE sub37 * Its A...F
000013AC  0400 0057                504        SUB.B #$57,D0 * Its a...f
000013B0  6000 000E                505        BRA ret_sa * Go back
000013B4  0400 0037                506  sub37 SUB.B #$37,D0 * Strip 37
000013B8  6000 0006                507        BRA ret_sa * Go back
000013BC  0400 0030                508  sub30 SUB.B #$30,D0 * Strip 30
000013C0  4E75                     509  ret_sa RTS * Go back
000013C2                           510  
000013C2                           511  
000013C2                           512  **
000013C2                           513  * NumToHexStr
000013C2                           514  **
000013C2                           515  * Converts the given number to a NULL-terminated hexadecimal character string
000013C2                           516  * with the specified length.
000013C2                           517  *
000013C2                           518  * By default, the number is converted to an 8-character string, but this can be
000013C2                           519  * changed in the length argument, which can be between 1 and 8 characters
000013C2                           520  * inclusive.
000013C2                           521  *
000013C2                           522  * Additionally, the conversion starts from the rightmost bit of the number, so
000013C2                           523  * keep this in mind when converting numbers with lengths < 8. For example,
000013C2                           524  * converting the number 0x0642FFFF with length = 4 results in the string 'FFFF'.
000013C2                           525  *
000013C2                           526  * The converted string will remain until the subroutine is called again, so
000013C2                           527  * make sure to store it elsewhere before calling this again.
000013C2                           528  *
000013C2                           529  **
000013C2                           530  * @param Arg_NumToHexStr_Num        Number to convert
000013C2                           531  * @param Arg_NumToHexStr_Length     Number of characters to convert, between 0-8
000013C2                           532  * @return Ret_NumToHexStr_Str       Converted hexadecimal character string
000013C2                           533  * @branch _NumToHexStr_PosLength    Branch for checking positive length
000013C2                           534  * @branch _NumToHexStr_ValidLength  Branch for checking valid length
000013C2                           535  * @branch _NumToHexStr_Loop         Loop through each digit
000013C2                           536  * @branch _NumToHexStr_Letter       Branch for converting to hex letter
000013C2                           537  * @branch _NumToHexStr_AddChar      Add character to string
000013C2                           538  **
000013C2                           539  Arg_NumToHexStr_Num     DS.L    1
000013C6= 08                       540  Arg_NumToHexStr_Length  DC.B    8
000013C7                           541  Ret_NumToHexStr_Str     DS.B    9
000013D0                           542  
000013D0                           543  NumToHexStr:            DS.W    0
000013D0  48E7 F0C0                544      MOVEM.L     D0-D3/A0-A1, -(SP)          * Backup registers to stack
000013D4  4281                     545      CLR.L       D1
000013D6  4280                     546      CLR.L       D0
000013D8  2038 13C2                547      MOVE.L      Arg_NumToHexStr_Num, D0     * Load number
000013DC  1238 13C6                548      MOVE.B      Arg_NumToHexStr_Length, D1  * Load length
000013E0  207C 000013C7            549      MOVEA.L     #Ret_NumToHexStr_Str, A0    * Load string address
000013E6                           550      
000013E6  0C01 0001                551      CMPI.B      #1, D1
000013EA  6C00 0004                552      BGE         _NumToHexStr_PosLength
000013EE  7201                     553      MOVEQ       #1, D1
000013F0                           554      
000013F0                           555  _NumToHexStr_PosLength
000013F0  0C01 0008                556      CMPI.B      #8, D1
000013F4  6F00 0004                557      BLE         _NumToHexStr_ValidLength
000013F8  7208                     558      MOVEQ       #8, D1
000013FA                           559      
000013FA                           560  _NumToHexStr_ValidLength
000013FA  2248                     561      MOVEA.L     A0, A1                      * A0 contains start, A1 contains current
000013FC  D2C1                     562      ADDA.W      D1, A1                      * Move to last digit
000013FE  4211                     563      CLR.B       (A1)                        * NULL last digit
00001400  740F                     564      MOVEQ       #$0F, D2                    * Bitmask for rightmost nibble, which is last hex
00001402                           565      
00001402                           566  _NumToHexStr_Loop
00001402  1600                     567      MOVE.B      D0, D3                      * Get byte (2 hex chars) from number
00001404  C602                     568      AND.B       D2, D3                      * Mask to get last hex char
00001406                           569      
00001406  0C03 0009                570      CMPI.B      #9, D3                      * If the value > 9
0000140A  6E00 000A                571      BGT         _NumToHexStr_Letter         * It's a letter, so branch to letter
0000140E                           572      
0000140E  0603 0030                573      ADDI.B      #'0', D3                    * Get to ASCII value for 0-9
00001412  6000 000A                574      BRA         _NumToHexStr_AddChar        * Branch to add char to string
00001416                           575  
00001416                           576  _NumToHexStr_Letter
00001416  0403 000A                577      SUBI.B      #10, D3                     * Subtract 10 first to get correct ASCII
0000141A  0603 0041                578      ADDI.B      #'A', D3                    * Get to ASCII value for A-F
0000141E                           579  
0000141E                           580  _NumToHexStr_AddChar
0000141E  1303                     581      MOVE.B      D3, -(A1)                   * Add char to string and decrement pointer
00001420  E888                     582      LSR.L       #4, D0                      * Shift the number a nibble (hex char) to the right
00001422  B3C8                     583      CMPA.L      A0, A1                      * If current pointer is > string start address
00001424  6EDC                     584      BGT         _NumToHexStr_Loop           * Loop back
00001426                           585      
00001426  42B8 13C2                586      CLR.L  Arg_NumToHexStr_Num 
0000142A                           587      
0000142A  4CDF 030F                588      MOVEM.L     (SP)+, D0-D3/A0-A1          * Restore registers from stack
0000142E  4E75                     589      RTS                                     * Exit subroutine
00001430                           590  
00001430                           591  
00001430                           592  MAIN_CONSOLE
00001430                           593     
00001430= 3D 3D 3D 3D 3D 3D ...    594        DC.B '============================================================',CR,LF
0000146E= 7C 7C 20 20 20 20 ...    595        DC.B '||                                                        ||',CR,LF
000014AC= 7C 7C 20 20 20 23 ...    596        DC.B '||   #####      ###    ##   ##                            ||',CR,LF
000014EA= 7C 7C 20 20 23 23 ...    597        DC.B '||  ##        ##   ##  ## ##                              ||',CR,LF
00001528= 7C 7C 20 23 23 20 ...    598        DC.B '|| ## ####     #####   ####                               ||',CR,LF
00001566= 7C 7C 20 23 23 20 ...    599        DC.B '|| ##    ##  ##    ##  ####                               ||',CR,LF
000015A4= 7C 7C 20 23 23 20 ...    600        DC.B '|| ##    ##  ##    ##  ## ##                              ||',CR,LF
000015E2= 7C 7C 20 20 23 23 ...    601        DC.B '||  #####     ######   ##  ##                             ||',CR,LF
00001620= 7C 7C 20 20 20 20 ...    602        DC.B '||                                                        ||',CR,LF
0000165E= 7C 7C 20 20 20 44 ...    603        DC.B '||   Daniel Yan, Fahad Alshehri, Denny Park               ||',CR,LF
0000169C= 3D 3D 3D 3D 3D 3D ...    604        DC.B '============================================================',CR,LF,0
000016DB                           605      
000016DB                           606  * Required variables and constants go here for your Disassembler
000016DB  =0000000D                607  CR                  EQU $0D
000016DB  =0000000A                608  LF                  EQU $0A
000016DC= 000D 000A 0000           609  NEWLINE             DC.W CR,LF,0  
000016E2= 44 69 73 61 73 73 ...    610  outFilename         DC.B 'DisassemblerOutput.txt',0
000016F9                           611  byteRead            DS.B 1
000016FA= 31 41 30 30 31 41 ...    612  ascii_val           DC.B $31,$41,$30,$30,$31,$41,$30,$30 * Test value $1A001A00
00001702                           613  
00001702                           614  * Variables and constants
00001702                           615  ;CR              EQU     $D              ; ASCII code for carriage return
00001702                           616  ;LF              EQU     $A              ; ASCII code for line feed
00001702  =00000014                617  SIZE            EQU     20             ; Max string size
00001702= 43 6F 6E 66 69 67 ...    618  fileName        DC.B    'Config.cfg',0   ; name of text file
0000170E= 4120 6669 6C65 2...      619  errorFile       DC.W    'A file error occurred.',CR,LF,0
0000172A= 4669 6C65 2072 6...      620  success         DC.W    'File read complete.',CR,LF,0
00001744                           621  string          DS.B    SIZE            ; I/O buffer
00001758                           622  strSize         DS.W    1               ; Size if input string
0000175A                           623  fileID          DS.L    1               ; File ID
0000175E= 496E 7661 6C69 6...      624  invalid_address_message DC.W 'Invalid Hex Address' ,CR,LF,0
00001778                           625  
00001778                           626  
00001778                           627      INCLUDE "OP_Code_Routines.x68"
00001778                           628  
00001778                           629  OP_SIZE         DS.B    1   ;This constant refers to the size of the current OP code 
00001779                           630  MNEMONIC        DS.B    1   ;Constant for EA, first 4 bits (15-12) of a 4 hex OP code
0000177A                           631  FIRST_3         DS.B    1   ;Constant for EA, 3 bits (11-9) of a 4 hex OP code
0000177B                           632  SECOND_3        DS.B    1   ;Constant for EA, 3 bits (8-6) of a 4 hex OP code
0000177C                           633  THIRD_3         DS.B    1   ;Constant for EA, 3 bits (5-3) of a 4 hex OP code
0000177D                           634  FOURTH_3        DS.B    1   ;Constant for EA, 3 bits (2-0) of a 4 hex OP code
0000177E                           635  
0000177E                           636  
0000177E                           637  
0000177E                           638  
0000177E                           639  
0000177E                           640  OP_JSR_Routine:
0000177E  48E7 C000                641      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
00001782  3038 10A0                642      MOVE.W CUR_OP_CODE,D0
00001786  11FC 0001 10A2           643      MOVE.B #1,IS_VALID
0000178C  720C                     644      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
0000178E  E2A8                     645      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
00001790                           646  
00001790                           647  GROUP_0:                ;$0| ORI, BCLR (static and dynamic), CMPI                  
00001790  B03C 0000                648      CMP.B   #$0,D0                 ;Compare first nibble
00001794  6600 000C                649      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
00001798  4EB9 000019C6            650      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
0000179E  6000 010C                651      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017A2                           652      
000017A2                           653  GROUP_1:                ;$1| MOVE.B
000017A2  B03C 0001                654      CMP.B   #$1,D0                 ;Compare first nibble
000017A6  6600 000C                655      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
000017AA  4EB9 00001BA4            656      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
000017B0  6000 00FA                657      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017B4                           658  
000017B4                           659  GROUP_2:                ;$2| MOVE.L, MOVEA.L
000017B4  B03C 0002                660      CMP.B   #$2,D0                 ;Compare first nibble
000017B8  6600 000C                661      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
000017BC  4EB9 00001BCE            662      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
000017C2  6000 00E8                663      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017C6                           664  
000017C6                           665  GROUP_3:                ;$3| MOVE.W, MOVEA.W
000017C6  B03C 0003                666      CMP.B   #$3,D0                 ;Compare first nibble
000017CA  6600 000C                667      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
000017CE  4EB9 00001C30            668      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
000017D4  6000 00D6                669      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017D8                           670  
000017D8                           671  GROUP_4:                ;$4| LEA, JSR, RTS, NEG, MOVEM
000017D8  B03C 0004                672      CMP.B   #$4,D0                 ;Compare first nibble
000017DC  6600 000C                673      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
000017E0  4EB9 00001C92            674      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
000017E6  6000 00C4                675      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017EA                           676  
000017EA                           677  
000017EA                           678  GROUP_5:                ;$5| SUBQ
000017EA  B03C 0005                679      CMP.B   #$5,D0                 ;Compare first nibble
000017EE  6600 000C                680      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
000017F2  4EB9 00001F20            681      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
000017F8  6000 00B2                682      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017FC                           683  
000017FC                           684  
000017FC                           685  GROUP_6:                ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
000017FC  B03C 0006                686      CMP.B   #$6,D0                 ;Compare first nibble
00001800  6600 000C                687      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
00001804  4EB9 00001F8A            688      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
0000180A  6000 00A0                689      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000180E                           690  
0000180E                           691  
0000180E                           692  GROUP_7:                ;$7| Display: DATA, $WXYZ (Unsupported)
0000180E  B03C 0007                693      CMP.B   #$7,D0                 ;Compare first nibble
00001812  6600 000C                694      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
00001816  4EB9 000020D0            695      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
0000181C  6000 008E                696      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001820                           697  
00001820                           698  
00001820                           699  GROUP_8:                ;$8| DIVS, OR
00001820  B03C 0008                700      CMP.B   #$8,D0                 ;Compare first nibble
00001824  6600 000C                701      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
00001828  4EB9 000020F4            702      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
0000182E  6000 007C                703      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001832                           704  
00001832                           705  
00001832                           706  GROUP_9:                ;$9| SUB
00001832  B03C 0009                707      CMP.B   #$9,D0                 ;Compare first nibble
00001836  6600 000C                708      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
0000183A  4EB9 00002154            709      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
00001840  6000 006A                710      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001844                           711  
00001844                           712  
00001844                           713  GROUP_A:                ;$A| Display: DATA, $WXYZ (Unsupported)
00001844  B03C 000A                714      CMP.B   #$A,D0                 ;Compare first nibble
00001848  6600 000C                715      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
0000184C  4EB9 000021C6            716      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
00001852  6000 0058                717      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001856                           718  
00001856                           719  
00001856                           720  GROUP_B:                ;$B| EOR, CMP
00001856  B03C 000B                721      CMP.B   #$B,D0                 ;Compare first nibble
0000185A  6600 000C                722      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
0000185E  4EB9 000021CE            723      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
00001864  6000 0046                724      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001868                           725  
00001868                           726  
00001868                           727  GROUP_C:                ;$C| MULS
00001868  B03C 000C                728      CMP.B   #$C,D0                 ;Compare first nibble
0000186C  6600 000C                729      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
00001870  4EB9 00002242            730      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
00001876  6000 0034                731      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000187A                           732  
0000187A                           733  
0000187A                           734  GROUP_D:                 ;$D| ADD, ADDA
0000187A  B03C 000D                735      CMP.B   #$D,D0                 ;Compare first nibble
0000187E  6600 000C                736      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
00001882  4EB9 000022CA            737      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
00001888  6000 0022                738      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000188C                           739  
0000188C                           740  
0000188C                           741  GROUP_E:                ;$E| LSR, LSL, ASR, ASL, ROL, ROR
0000188C  B03C 000E                742      CMP.B   #$E,D0                 ;Compare first nibble
00001890  6600 000C                743      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
00001894  4EB9 0000232A            744      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
0000189A  6000 0010                745      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000189E                           746  
0000189E                           747  
0000189E                           748  GROUP_F:                ;$F| Display: DATA, $WXYZ (Unsupported)
0000189E  B03C 000F                749      CMP.B   #$F,D0                 ;Compare first nibble
000018A2  4EB9 000024DA            750      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
000018A8  6000 0002                751      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000018AC                           752  
000018AC                           753  
000018AC                           754  OP_JSR_DONE:
000018AC  4CDF 0003                755           MOVEM.L (SP)+,D0-D1       ;Recover register D0
000018B0  4EB9 000018B6            756           JSR    check_NOP
000018B6                           757  check_NOP                           ;THIS IS A TEMPORARY ROUTINE MADE FOR NOP until EA UPDATES NOP validity
000018B6  0C78 4E71 10A0           758           CMP.W #$4E71,CUR_OP_CODE
000018BC  6700 F904                759           BEQ    check_print
000018C0  6600 0002                760           BNE    normal_CHECK
000018C4                           761  normal_CHECK         
000018C4  0C38 0001 10A2           762           CMP.B #1,IS_VALID
000018CA  6700 1050                763           BEQ    main_EA             ;This runs EA's routines after OP code portion is finished
000018CE  6600 F8F2                764           BNE    check_print
000018D2                           765  FIND_2_BIT_SIZE_7_TO_6:         ;Move the 2 bit size field relevant register
000018D2  48E7 C000                766      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
000018D6  3038 10A0                767      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
000018DA  323C 0008                768      MOVE.W   #8,D1              ;Prepare 8 bit shift to D1
000018DE  E368                     769      LSL.W    D1,D0              ;Truncate to find the 2 size bits
000018E0  E268                     770      LSR.W    D1,D0              ;Reposition the bits
000018E2  323C 0006                771      MOVE.W   #6,D1              ;Prepare 6 bit shift to D1
000018E6  E268                     772      LSR.W    D1,D0              ;Truncate to shift 2 bits to a byte
000018E8  11C0 1778                773      MOVE.B   D0,OP_SIZE         ;Move 2 size bits into OP_SIZE
000018EC  4CDF 0003                774      MOVEM.L (SP)+,D0-D1         ;Restore registers
000018F0  4E75                     775      RTS                         ;Return to stack
000018F2                           776  
000018F2                           777  FIND_1_BIT_SIZE_6:              ;Move the 1 bit size field relevant register
000018F2  48E7 C000                778      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
000018F6  3038 10A0                779      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
000018FA  323C 0009                780      MOVE.W   #9,D1              ;Prepare 9 bit shift to D1
000018FE  E368                     781      LSL.W    D1,D0              ;Truncate to find the size bit
00001900  E268                     782      LSR.W    D1,D0              ;Reposition the bits
00001902  323C 0006                783      MOVE.W   #6,D1              ;Prepare 6 bit shift to D1
00001906  E268                     784      LSR.W    D1,D0              ;Truncate to shift 1 bit to a byte
00001908  11C0 1778                785      MOVE.B   D0,OP_SIZE         ;Move 1 size bit into OP_SIZE
0000190C  4CDF 0003                786      MOVEM.L (SP)+,D0-D1         ;Restore registers
00001910  4E75                     787      RTS                         ;Return to stack
00001912                           788  
00001912                           789  FIND_1_BIT_SIZE_8:         ;Move the 1 bit size field relevant register
00001912  48E7 C000                790      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
00001916  3038 10A0                791      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
0000191A  323C 0007                792      MOVE.W   #7,D1              ;Prepare 7 bit shift to D1
0000191E  E368                     793      LSL.W    D1,D0              ;Truncate to find the 1 size bit
00001920  E268                     794      LSR.W    D1,D0              ;Reposition the bits
00001922  323C 0008                795      MOVE.W   #8,D1              ;Prepare 8 bit shift to D1
00001926  E268                     796      LSR.W    D1,D0              ;Truncate to shift 1 bit to a byte
00001928  11C0 1778                797      MOVE.B   D0,OP_SIZE         ;Move 1 size bit into OP_SIZE
0000192C  4CDF 0003                798      MOVEM.L (SP)+,D0-D1         ;Restore registers
00001930  4E75                     799      RTS                         ;Return to stack
00001932                           800  
00001932                           801  MOVE_AND_MOVEA_PARSE_EA:       ;Move the 3 bit dynamic register bits to proper register
00001932                           802     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001932  3038 10A0                803      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
00001936  323C 000A                804      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
0000193A  E368                     805      LSL.W   D1,D0            ;Truncate to find the last 6 bits
0000193C  E268                     806      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
0000193E  3E00                     807      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
00001940  323C 0003                808      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
00001944  E26F                     809      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
00001946  3A07                     810      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
00001948  323C 000D                811      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
0000194C  E368                     812      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
0000194E  E268                     813      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001950  3800                     814      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
00001952  3038 10A0                815      MOVE.W CUR_OP_CODE,D0     ;Move current OP code into D0     
00001956  323C 0004                816      MOVE.W  #4,D1             ;Prepare 4 bit shift to D1
0000195A  E368                     817      LSL.W   D1,D0             ;Truncate to find bits 11-6
0000195C  E268                     818      LSR.W   D1,D0             ;Reposition bits
0000195E  323C 0006                819      MOVE.W  #6,D1             ;Prepare 6 bit shift to D1
00001962  E268                     820      LSR.W   D1,D0             ;Truncate the SRC Reg/Mode bits
00001964  323C 0003                821      MOVE.W  #3,D1             ;Prepare a 3 bit shift to D1 for DST Reg/Mode
00001968  3C00                     822      MOVE.W  D0,D6             ;Copy over the current 6 bits to D6
0000196A  E268                     823      LSR.W   D1,D0             ;Truncate DST Mode  
0000196C  3E00                     824      MOVE.W  D0,D7             ;Move DST Reg to D7
0000196E  323C 000D                825      MOVE.W  #13,D1             
00001972  E36E                     826      LSL.W   D1,D6             ;Truncate 13 bits in D6
00001974  E26E                     827      LSR.W   D1,D6             ;Reposition D6
00001976                           828                                ;D6 now contains the DST Reg
00001976                           829     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
00001976  4E75                     830      RTS                     ;Return to stack
00001978                           831  PARSE_EA_CONSTANT_BITS:
00001978                           832      *MNEMONIC SHIFT
00001978  3038 10A0                833      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D0
0000197C  323C 000C                834      MOVE.W #12,D1               ;Prepare a bit shift of 12 into D1
00001980  E268                     835      LSR.W D1,D0                 ;Shift 12 bits from D0 right
00001982  11C0 1779                836      MOVE.B D0,MNEMONIC          ;Set MNEMONIC to D0
00001986                           837      *FIRST_3 SHIFT
00001986  323C 0009                838      MOVE.W #9,D1                ;Prepare a bit shift of 9 into D1
0000198A  3038 10A0                839      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
0000198E  E948                     840      LSL.W #4,D0                 ;Shift out bits 15-12 in D0
00001990  E848                     841      LSR.W #4,D0                 ;Reposition D0
00001992  E268                     842      LSR.W  D1,D0                ;Shift D0 9 bits right
00001994  11C0 177A                843      MOVE.B D0,FIRST_3           ;Set FIRST_3 to D0
00001998                           844      *SECOND_3 SHIFT
00001998  3038 10A0                845      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
0000199C  EF48                     846      LSL.W #7,D0                 ;Shift out bits 15-9 in D0
0000199E  EE48                     847      LSR.W #7,D0                 ;Reposition D0
000019A0  EC48                     848      LSR.W #6,D0                 ;Shift D0 6 bits right
000019A2  11C0 177B                849      MOVE.B D0,SECOND_3          ;Set SECOND_3 to D0
000019A6                           850      *THIRD_3 SHIFT
000019A6  3038 10A0                851      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000019AA  E648                     852      LSR.W #3,D0                 ;Shift D0 3 bits right
000019AC  323C 000D                853      MOVE.W #13,D1               ;Prepare a 13 bit shift into D1
000019B0  E368                     854      LSL.W D1,D0                 ;Truncate first 13 bits of D0
000019B2  E268                     855      LSR.W D1,D0                 ;Reposition D0
000019B4  11C0 177C                856      MOVE.B D0,THIRD_3           ;Set THIRD_3 to D0
000019B8                           857      *FOURTH_3 SHIFT
000019B8  3038 10A0                858      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000019BC  E368                     859      LSL.W D1,D0                 ;Grab the fourth 3-bit group
000019BE  E268                     860      LSR.W D1,D0                 ;Shift D0 back into position
000019C0  11C0 177D                861      MOVE.B D0,FOURTH_3          ;Set FOURTH_3 to Do
000019C4  4E75                     862      RTS                         ;Return to stack
000019C6                           863  
000019C6                           864  
000019C6                           865  
000019C6                           866  
000019C6                           867  
000019C6                           868  C_GROUP_0:
000019C6  48E7 C000                869      MOVEM.L D0-D1, -(SP)            ;Backup registers
000019CA                           870      
000019CA                           871  CHECK_OP_ORI_TO_CCR:
000019CA  3038 10A0                872      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019CE  B07C 003C                873      CMP.W #$003C,D0                 ;Compare the direct full bits
000019D2  6700 01C4                874      BEQ GROUP0_INVALID              ;INVALID OP code found
000019D6  6600 0002                875      BNE CHECK_OP_ORI_TO_SR          ;Check next routine
000019DA                           876      
000019DA                           877  CHECK_OP_ORI_TO_SR:
000019DA  3038 10A0                878      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019DE  B07C 007C                879      CMP.W #$007C,D0                 ;Compare the direct full bits
000019E2  6700 01B4                880      BEQ GROUP0_INVALID              ;INVALID OP code found
000019E6  6600 0002                881      BNE CHECK_OP_ANDI_TO_CCR        ;Check next routine
000019EA                           882      
000019EA                           883  CHECK_OP_ANDI_TO_CCR:
000019EA  3038 10A0                884      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019EE  B07C 023C                885      CMP.W #$023C,D0                 ;Compare the direct full bits
000019F2  6700 01A4                886      BEQ GROUP0_INVALID              ;INVALID OP code found
000019F6  6600 0002                887      BNE CHECK_OP_ANDI_TO_SR         ;Check next routine
000019FA                           888      
000019FA                           889  CHECK_OP_ANDI_TO_SR:
000019FA  3038 10A0                890      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019FE  B07C 027C                891      CMP.W #$027C,D0                 ;Compare the direct full bits
00001A02  6700 0194                892      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A06  6600 0002                893      BNE CHECK_OP_EORI_TO_CCR                ;Check next routine
00001A0A                           894  
00001A0A                           895  CHECK_OP_EORI_TO_CCR:
00001A0A  3038 10A0                896      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A0E  B07C 0A3C                897      CMP.W #$0A3C,D0                 ;Compare the direct full bits
00001A12  6700 0184                898      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A16  6600 0002                899      BNE CHECK_OP_EORI_TO_SR         ;Check next routine
00001A1A                           900      
00001A1A                           901  CHECK_OP_EORI_TO_SR:
00001A1A  3038 10A0                902      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A1E  B07C 0A7C                903      CMP.W #$0A7C,D0                 ;Compare the direct full bits
00001A22  6700 0174                904      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A26  6600 0002                905      BNE CHECK_OP_ANDI               ;Check next routine
00001A2A                           906      
00001A2A                           907  CHECK_OP_ANDI:
00001A2A  3038 10A0                908      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A2E  0240 FF00                909      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001A32  B07C 0200                910      CMP.W #$0200,D0                 ;Compare the appropriate masked bits
00001A36  6700 0160                911      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A3A  6600 0002                912      BNE CHECK_OP_SUBI               Check next routine
00001A3E                           913      
00001A3E                           914  CHECK_OP_SUBI:
00001A3E  3038 10A0                915      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A42  0240 FF00                916      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001A46  B07C 0400                917      CMP.W #$0400,D0                 ;Compare the appropriate masked bits
00001A4A  6700 014C                918      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A4E  6600 0002                919      BNE CHECK_OP_ADDI               ;Check next routine
00001A52                           920  
00001A52                           921  CHECK_OP_ADDI:
00001A52  3038 10A0                922      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A56  0240 FF00                923      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001A5A  B07C 0600                924      CMP.W #$0600,D0                 ;Compare the appropriate masked bits
00001A5E  6700 0138                925      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A62  6600 0002                926      BNE CHECK_OP_EORI               ;Check next routine 
00001A66                           927  
00001A66                           928  CHECK_OP_EORI:
00001A66  3038 10A0                929      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A6A  0240 FF00                930      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001A6E  B07C 0A00                931      CMP.W #$0A00,D0                 ;Compare the appropriate masked bits
00001A72  6700 0124                932      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A76  6600 0002                933      BNE CHECK_OP_STATIC_BTST        ;Check next routine
00001A7A                           934      
00001A7A                           935  CHECK_OP_STATIC_BTST:
00001A7A  3038 10A0                936      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A7E  0240 FFC0                937      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001A82  B07C 0800                938      CMP.W #$0800,D0                 ;Compare the appropriate masked bits
00001A86  6700 0110                939      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A8A  6600 0002                940      BNE CHECK_OP_STATIC_BCHG        ;Check next routine
00001A8E                           941      
00001A8E                           942  CHECK_OP_STATIC_BCHG:
00001A8E  3038 10A0                943      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A92  0240 FFC0                944      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001A96  B07C 0840                945      CMP.W #$0840,D0                 ;Compare the appropriate masked bits
00001A9A  6700 00FC                946      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A9E  6600 0002                947      BNE CHECK_OP_STATIC_BSET        ;Check next routine
00001AA2                           948  
00001AA2                           949  CHECK_OP_STATIC_BSET:
00001AA2  3038 10A0                950      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001AA6  0240 FFC0                951      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001AAA  B07C 08C0                952      CMP.W #$08C0,D0                 ;Compare the appropriate masked bits
00001AAE  6700 00E8                953      BEQ GROUP0_INVALID              ;INVALID OP code found   
00001AB2  6600 0002                954      BNE CHECK_OP_DYNAMIC_BTST       ;Check next routine
00001AB6                           955  
00001AB6                           956  CHECK_OP_DYNAMIC_BTST:
00001AB6  3038 10A0                957      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001ABA  0240 F1C0                958      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
00001ABE  B07C 0100                959      CMP.W #$0100,D0                 ;Compare the appropriate masked bits
00001AC2  6700 00D4                960      BEQ GROUP0_INVALID              ;INVALID OP code found
00001AC6  6600 0002                961      BNE CHECK_OP_DYNAMIC_BCHG       ;Check next routine
00001ACA                           962  
00001ACA                           963  CHECK_OP_DYNAMIC_BCHG:
00001ACA  3038 10A0                964      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001ACE  0240 F1C0                965      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
00001AD2  B07C 0140                966      CMP.W #$0140,D0                 ;Compare the appropriate masked bits 
00001AD6  6700 00C0                967      BEQ GROUP0_INVALID              ;INVALID OP code found
00001ADA  6600 0002                968      BNE CHECK_OP_DYNAMIC_BSET       ;Check next routine
00001ADE                           969      
00001ADE                           970  CHECK_OP_DYNAMIC_BSET:
00001ADE                           971  
00001ADE  3038 10A0                972      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001AE2  0240 F1C0                973      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
00001AE6  B07C 01C0                974      CMP.W   #$01C0,D0               ;Compare the appropriate masked bits 
00001AEA  6700 0006                975      BEQ     BIT_CHECK_MOVEP         ;Check special case for MOVEP
00001AEE  6600 001C                976      BNE     CHECK_OP_MOVEP          ;Check next routine
00001AF2                           977  
00001AF2                           978  BIT_CHECK_MOVEP:                                ;This is a special case check for MOVEP
00001AF2  3038 10A0                979      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001AF6  323C 000A                980      MOVE.W  #10,D1                  ;Prepare a 10-bit shift
00001AFA  E368                     981      LSL.W   D1,D0                   ;Shift out 10 bits left 
00001AFC  E268                     982      LSR.W   D1,D0                   ;Reposition D0 for last 6 bits
00001AFE  E648                     983      LSR.W   #3,D0                   ;Shift out 3 bits right, D0 contains bits 5-3
00001B00  B07C 0001                984      CMP.W   #$1,D0                  ;Compare bits to D0
00001B04  6700 0006                985      BEQ     CHECK_OP_MOVEP          ;If bits are $1 then it's addressing, goto MOVEP
00001B08  6600 008E                986      BNE     GROUP0_INVALID          ;If not then it's DYNAMIC_BSET which is invalid
00001B0C                           987      
00001B0C                           988  CHECK_OP_MOVEP:
00001B0C  3038 10A0                989      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001B10  0240 F138                990      ANDI.W #$F138,D0                ;Mask relevant bits to D0
00001B14  B07C 0108                991      CMP.W #$0108,D0                 ;Compare the appropriate masked bits
00001B18  6700 09C8                992      BEQ INVALID_OP                  ;INVALID OP code found
00001B1C  6600 0002                993      BNE CHECK_OP_ORI                ;Check next routine
00001B20                           994  
00001B20                           995  CHECK_OP_ORI:
00001B20  3038 10A0                996      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001B24  0240 FF00                997      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001B28  B07C 0000                998      CMP.W   #$0000,D0               ;Compare the appropriate masked bits     
00001B2C  6600 0010                999      BNE     CHECK_OP_CMPI           ;Branch to next comparison if not equal
00001B30  4EB8 18D2               1000      JSR     FIND_2_BIT_SIZE_7_TO_6
00001B34  4EB9 000024F8           1001      JSR     PRINT_OP_ORI            ;Print the OP code if equal    
00001B3A  6000 0062               1002      BRA     GROUP0_SUCCESS          ;Finish routine
00001B3E                          1003      
00001B3E                          1004  CHECK_OP_CMPI:
00001B3E  3038 10A0               1005      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001B42  0240 FF00               1006      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001B46  B07C 0C00               1007      CMP.W   #$0C00,D0               ;Compare the appropriate masked bits   
00001B4A  6600 0010               1008      BNE     CHECK_OP_STATIC_BCLR    ;Branch to next comparison if not equal       
00001B4E  4EB8 18D2               1009      JSR     FIND_2_BIT_SIZE_7_TO_6
00001B52  4EB9 0000250C           1010      JSR     PRINT_OP_CMPI           ;Print the OP code if equal
00001B58  6000 0044               1011      BRA     GROUP0_SUCCESS          ;Finish routine
00001B5C                          1012      
00001B5C                          1013  CHECK_OP_STATIC_BCLR:
00001B5C  3038 10A0               1014      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001B60  0240 FF00               1015      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001B64  B07C 0800               1016      CMP.W   #$0800,D0               ;Compare the appropriate masked bits
00001B68  6600 0010               1017      BNE     CHECK_OP_DYNAMIC_BCLR   ;Branch to next comparison if not equal
00001B6C  4EB8 18D2               1018      JSR     FIND_2_BIT_SIZE_7_TO_6
00001B70  4EB9 00002520           1019      JSR     PRINT_OP_STATIC_BCLR    ;Print the OP code if equal
00001B76  6000 0026               1020      BRA     GROUP0_SUCCESS          ;Finish routine
00001B7A                          1021      
00001B7A                          1022  CHECK_OP_DYNAMIC_BCLR:
00001B7A  3038 10A0               1023      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001B7E  0240 0180               1024      ANDI.W  #$0180,D0               ;Mask relevant bits to D0
00001B82  B07C 0180               1025      CMP.W   #$0180,D0               ;Compare the appropriate masked bits
00001B86  6600 0010               1026      BNE     GROUP0_INVALID          ;If not equal this must be an invalid OP code
00001B8A  4EB8 18D2               1027      JSR     FIND_2_BIT_SIZE_7_TO_6
00001B8E  4EB9 00002534           1028      JSR     PRINT_OP_DYNAMIC_BCLR   ;Print the OP code if equal
00001B94  6000 0008               1029      BRA     GROUP0_SUCCESS          ;Finish routine
00001B98                          1030  
00001B98                          1031  GROUP0_INVALID:                     ;Checks have been finished, invalid OP code has been found
00001B98  4EB9 000024E2           1032      JSR INVALID_OP                  ;INVALID OP code found
00001B9E                          1033  GROUP0_SUCCESS:                     ;Checks have been finished,a valid OP code has been found
00001B9E  4CDF 0003               1034      MOVEM.L (SP)+,D0-D1             ;Restore registers
00001BA2  4E75                    1035      RTS                             ;Return to stack
00001BA4                          1036      
00001BA4                          1037  C_GROUP_1:
00001BA4  48E7 C000               1038      MOVEM.L D0-D1,-(SP)             ;Save registers to stack
00001BA8                          1039  
00001BA8                          1040  CHECK_OP_MOVE_B:
00001BA8  3038 10A0               1041      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0          
00001BAC  0240 F000               1042      ANDI.W  #$F000,D0               ;Mask relevant bits to D0
00001BB0  B07C 1000               1043      CMP.W   #$1000,D0               ;Compare the appropriate masked bits 
00001BB4  6600 000C               1044      BNE     GROUP1_INVALID          ;Invalid OP code has been found
00001BB8  4EB9 00002548           1045      JSR     PRINT_OP_MOVEB          ;Print the OP code if equal
00001BBE  6000 0008               1046      BRA     GROUP1_SUCCESS          ;Finish routine
00001BC2                          1047      
00001BC2                          1048  GROUP1_INVALID:
00001BC2  4EB9 000024E2           1049      JSR INVALID_OP                  ;Invalid OP code found
00001BC8                          1050  GROUP1_SUCCESS:
00001BC8  4CDF 0003               1051      MOVEM.L (SP)+,D0-D1             ;Restore register
00001BCC  4E75                    1052      RTS                             ;Return to stack
00001BCE                          1053  C_GROUP_2:
00001BCE  48E7 E000               1054      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
00001BD2                          1055  
00001BD2                          1056  CHECK_OP_MOVEA_L:
00001BD2  3038 10A0               1057      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0  
00001BD6  0240 F000               1058      ANDI.W #$F000,D0                ;Mask relevant bits to D0
00001BDA  B07C 2000               1059      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
00001BDE  4EF9 00001BE4           1060      JMP FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
00001BE4                          1061      
00001BE4                          1062  FIND_MOVEA_L_DIFFERENCE:            ;Finds difference between MOVEA and MOVE
00001BE4  3038 10A0               1063      MOVE.W   CUR_OP_CODE,D0         ;Move current OP code into D0
00001BE8  323C 0007               1064      MOVE.W   #7,D1                  ;Prepare 7 bit shift to D1
00001BEC  E368                    1065      LSL.W    D1,D0                  ;Truncate to find the 3 address mode bits
00001BEE  E268                    1066      LSR.W    D1,D0                  ;Reposition the bits
00001BF0  323C 0006               1067      MOVE.W   #6,D1                  ;Prepare 6 bit shift to D1
00001BF4  E268                    1068      LSR.W    D1,D0                  ;Truncate to shift 3 bits to a register
00001BF6  3400                    1069      MOVE.W   D0,D2                  ;Move 3 address mode bits into D6
00001BF8  B47C 0001               1070      CMP.W   #$1,D2                  ;Check if the address mode value is MOVEA
00001BFC  6600 000C               1071      BNE     CHECK_OP_MOVE_L         ;Branch if not equal to check MOVE
00001C00  4EB9 00002556           1072      JSR     PRINT_OP_MOVEA_L        ;Print the OP code if it's a match
00001C06  6000 0022               1073      BRA     GROUP2_SUCCESS          ;Finish routine
00001C0A                          1074      
00001C0A                          1075      
00001C0A                          1076  CHECK_OP_MOVE_L:
00001C0A  3038 10A0               1077      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001C0E  0240 F000               1078      ANDI.W #$F000,D0                ;Mask relevant bits to D0
00001C12  B07C 2000               1079      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
00001C16  6600 000C               1080      BNE GROUP2_INVALID              ;If not equal, OP code is invalid
00001C1A  4EB9 00002564           1081      JSR PRINT_OP_MOVE_L             ;Print out MOVE.L
00001C20  6000 0008               1082      BRA GROUP2_SUCCESS              ;Finish routine
00001C24                          1083      
00001C24                          1084  GROUP2_INVALID:    
00001C24  4EB9 000024E2           1085      JSR INVALID_OP                  ;Invalid OP code found
00001C2A                          1086  GROUP2_SUCCESS:
00001C2A  4CDF 0007               1087      MOVEM.L (SP)+,D0-D2             ;Restore register
00001C2E  4E75                    1088      RTS                             ;Return to stack
00001C30                          1089  C_GROUP_3:
00001C30  48E7 E000               1090      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
00001C34                          1091      
00001C34                          1092  CHECK_OP_MOVEA_W:
00001C34  3038 10A0               1093      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001C38  0240 F000               1094      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00001C3C  B07C 3000               1095      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
00001C40  4EF9 00001C46           1096      JMP      FIND_MOVEA_W_DIFF     ;Custom routine to differentiate MOVE and MOVEA
00001C46                          1097  
00001C46                          1098      
00001C46                          1099  FIND_MOVEA_W_DIFF:                 ;Finds difference between MOVEA and MOVE
00001C46  3038 10A0               1100      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001C4A  323C 0007               1101      MOVE.W   #7,D1                 ;Prepare 7 bit shift to D1
00001C4E  E368                    1102      LSL.W    D1,D0                 ;Truncate to find the 3 address mode bits
00001C50  E268                    1103      LSR.W    D1,D0                 ;Reposition the bits
00001C52  323C 0006               1104      MOVE.W   #6,D1                 ;Prepare 6 bit shift to D1
00001C56  E268                    1105      LSR.W    D1,D0                 ;Truncate to shift 3 bits to a register
00001C58  3400                    1106      MOVE.W   D0,D2                 ;Move 3 address mode bits into D6
00001C5A  B47C 0001               1107      CMP.W    #$1,D2                ;Check if the address mode value is MOVEA
00001C5E  6600 000C               1108      BNE      CHECK_OP_MOVE_W       ;If bits do not match, try MOVE 
00001C62  4EB9 00002572           1109      JSR      PRINT_OP_MOVEA_W      ;Print the OP code if it's a match
00001C68  6000 0022               1110      BRA      GROUP3_SUCCESS        ;Finish routine
00001C6C                          1111      
00001C6C                          1112  CHECK_OP_MOVE_W:
00001C6C  3038 10A0               1113      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001C70  0240 F000               1114      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00001C74  B07C 3000               1115      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
00001C78  6600 000C               1116      BNE      GROUP3_INVALID        ;INVALID OP code found
00001C7C  4EB9 00002580           1117      JSR      PRINT_OP_MOVE_W       ;Print the OP code if it's a match
00001C82  6000 0008               1118      BRA      GROUP3_SUCCESS        ;Finish routine
00001C86                          1119      
00001C86                          1120  GROUP3_INVALID:
00001C86  4EB9 000024E2           1121      JSR INVALID_OP                 ;INVALID OP code found
00001C8C                          1122  GROUP3_SUCCESS:
00001C8C  4CDF 0007               1123      MOVEM.L (SP)+,D0-D2            ;Restore registers from stack
00001C90  4E75                    1124      RTS                            ;Return to stack
00001C92                          1125  
00001C92                          1126  C_GROUP_4:
00001C92  2F00                    1127      MOVE.L  D0,-(SP)            ;Save registers
00001C94                          1128      
00001C94                          1129  CHECK_OP_STOP:
00001C94  3038 10A0               1130      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001C98  B07C 4E72               1131      CMP.W  #$4E72,D0                ;Compare the appropriate bits
00001C9C  6700 0270               1132      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CA0  6600 0002               1133      BNE    CHECK_OP_RESET           ;Check next OP code
00001CA4                          1134      
00001CA4                          1135  CHECK_OP_RESET:
00001CA4  3038 10A0               1136      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CA8  B07C 4E70               1137      CMP.W  #$4E70,D0                ;Compare the appropriate bits
00001CAC  6700 0260               1138      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CB0  6600 0002               1139      BNE    CHECK_OP_ILLEGAL         ;Check next OP code
00001CB4                          1140          
00001CB4                          1141  CHECK_OP_ILLEGAL:
00001CB4  3038 10A0               1142      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CB8  B07C 4AFC               1143      CMP.W  #$4AFC,D0                ;Compare the appropriate bits
00001CBC  6700 0250               1144      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CC0  6600 0002               1145      BNE    CHECK_OP_RTE             ;Check next OP code
00001CC4                          1146      
00001CC4                          1147  CHECK_OP_RTE:    
00001CC4  3038 10A0               1148      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CC8  B07C 4E73               1149      CMP.W #$4E73,D0                 ;Compare the appropriate bits
00001CCC  6700 0240               1150      BEQ   GROUP4_INVALID            ;INVALID OP code found
00001CD0  6600 0002               1151      BNE   CHECK_OP_TRAPV            ;Check next OP code
00001CD4                          1152      
00001CD4                          1153  CHECK_OP_TRAPV:
00001CD4  3038 10A0               1154      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CD8  B07C 4E76               1155      CMP.W  #$4E76,D0                ;Compare the appropriate bits
00001CDC  6700 0230               1156      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CE0  6600 0002               1157      BNE    CHECK_OP_RTR             ;Check next OP code
00001CE4                          1158      
00001CE4                          1159  CHECK_OP_RTR:
00001CE4  3038 10A0               1160      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CE8  B07C 4E77               1161      CMP.W #$4E77,D0                 ;Compare the appropriate bits
00001CEC  6700 0220               1162      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CF0  6600 0002               1163      BNE    CHECK_OP_MOVE_FROM_SR    ;Check next OP code
00001CF4                          1164  
00001CF4                          1165  
00001CF4                          1166  CHECK_OP_MOVE_FROM_SR:
00001CF4  3038 10A0               1167      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CF8  0240 FFC0               1168      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001CFC  B07C 40C0               1169      CMP.W  #$40C0,D0                ;Compare the appropriate masked bits
00001D00  6700 020C               1170      BEQ    GROUP4_INVALID           ;INVALID OP code found  
00001D04  6600 0002               1171      BNE    CHECK_OP_MOVE_TO_CCR     ;Check next OP code
00001D08                          1172      
00001D08                          1173  CHECK_OP_MOVE_TO_CCR:
00001D08  3038 10A0               1174      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D0C  0240 FFC0               1175      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001D10  B07C 44C0               1176      CMP.W  #$44C0,D0                ;Compare the appropriate masked bits
00001D14  6700 01F8               1177      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D18  6600 0002               1178      BNE    CHECK_OP_MOVE_TO_SR      ;Check next OP code
00001D1C                          1179      
00001D1C                          1180  CHECK_OP_MOVE_TO_SR:
00001D1C  3038 10A0               1181      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D20  0240 FFC0               1182      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001D24  B07C 46C0               1183      CMP.W  #$46C0,D0                ;Compare the appropriate masked bits
00001D28  6700 01E4               1184      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D2C  6600 0002               1185      BNE    CHECK_OP_NEGX            ;Check next OP code
00001D30                          1186      
00001D30                          1187  CHECK_OP_NEGX:
00001D30  3038 10A0               1188      MOVE.W CUR_OP_CODE,D0            ;Move current instruction set into D0
00001D34  0240 FF00               1189      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001D38  B07C 4000               1190      CMP.W  #$4000,D0                ;Compare the appropriate masked bits
00001D3C  6700 01D0               1191      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D40  6600 0002               1192      BNE    CHECK_OP_CLR             ;Check next OP code
00001D44                          1193      
00001D44                          1194  CHECK_OP_CLR:
00001D44  3038 10A0               1195      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D48  0240 FF00               1196      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001D4C  B07C 4200               1197      CMP.W  #$4200,D0                ;Compare the appropriate masked bits
00001D50  6700 01BC               1198      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D54  6600 0002               1199      BNE    CHECK_OP_NOT             ;Check next OP code
00001D58                          1200      
00001D58                          1201  CHECK_OP_NOT:
00001D58  3038 10A0               1202      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D5C  0240 FF00               1203      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001D60  B07C 4600               1204      CMP.W  #$4600,D0                ;Compare the appropriate masked bits
00001D64  6700 01A8               1205      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D68  6600 0002               1206      BNE    CHECK_OP_EXT             ;Check next OP code
00001D6C                          1207      
00001D6C                          1208  CHECK_OP_EXT:
00001D6C  3038 10A0               1209      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D70  0240 FF88               1210      ANDI.W #$FF88,D0                ;Mask relevant bits to D0
00001D74  B07C 4880               1211      CMP.W  #$4880,D0                ;Compare the appropriate masked bits
00001D78  6700 0194               1212      BEQ    GROUP4_INVALID           ;INVALID OP code BIT_CHECK_EXT
00001D7C  6600 001C               1213      BNE    CHECK_OP_NBCD            ;Check next OP code
00001D80                          1214  
00001D80                          1215  BIT_CHECK_EXT:    
00001D80  3038 10A0               1216      MOVE.W CUR_OP_CODE,D0           ;This is a special case to check against MOVEM
00001D84  323C 000A               1217      MOVE.W #10,D1                   ;Prepare a 10 bit shift into D1
00001D88  E368                    1218      LSL.W  D1,D0                    ;Shift D0 left 10 bits
00001D8A  E068                    1219      LSR.W  D0,D0                    ;Reposition D0
00001D8C  E648                    1220      LSR.W  #3,D0                    ;Shift D0 3 bits
00001D8E  B078 0000               1221      CMP.W  %000,D0                  ;Check the specific bits needed to differentiate EXT
00001D92  6700 017A               1222      BEQ    GROUP4_INVALID           ;This means that this OP code is EXT
00001D96  6600 015C               1223      BNE    CHECK_OP_MOVEM           ;This is the only other possibility 
00001D9A                          1224      
00001D9A                          1225  CHECK_OP_NBCD:
00001D9A  3038 10A0               1226      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D9E  0240 FFC0               1227      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0           
00001DA2  B07C 4800               1228      CMP.W  #$4800,D0                ;Compare the appropriate masked bits
00001DA6  6700 0166               1229      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DAA  6600 0002               1230      BNE    CHECK_OP_SWAP            ;Check next OP code
00001DAE                          1231      
00001DAE                          1232  CHECK_OP_SWAP:                      ; This must go before CHECK_OP PEA as first 3 nibbles can be equivalent
00001DAE  3038 10A0               1233      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DB2  0240 FF48               1234      ANDI.W #$FF48,D0                ;Mask relevant bits to D0
00001DB6  B07C 4840               1235      CMP.W  #$4840,D0                ;Compare the appropriate masked bits
00001DBA  6700 0152               1236      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DBE  6600 0002               1237      BNE    CHECK_OP_PEA             ;Check next OP code
00001DC2                          1238   
00001DC2                          1239  CHECK_OP_PEA:                       ;This must go after CHECK_OP_SWAP as first 3 nibbles can be equivalent
00001DC2  3038 10A0               1240      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DC6  0240 FF40               1241      ANDI.W #$FF40,D0                ;Mask relevant bits to D0
00001DCA  B07C 4840               1242      CMP.W  #$4840,D0                ;Compare the appropriate masked bits
00001DCE  6700 013E               1243      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DD2  6600 0002               1244      BNE    CHECK_OP_TAS             ;Check next OP code
00001DD6                          1245      
00001DD6                          1246  CHECK_OP_TAS:
00001DD6  3038 10A0               1247      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DDA  0240 FFC0               1248      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001DDE  B07C 4AC0               1249      CMP.W  #$4AC0,D0                ;Compare the appropriate masked bits
00001DE2  6700 012A               1250      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DE6  6600 0002               1251      BNE    CHECK_OP_TST             ;Check next OP code
00001DEA                          1252  
00001DEA                          1253  CHECK_OP_TST:                       ;This must go after CHECK_OP_TAS as first 2 nibbles are equivalent
00001DEA  3038 10A0               1254      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DEE  0240 FF00               1255      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001DF2  B07C 4A00               1256      CMP.W  #$4A00,D0                ;Compare the appropriate masked bits
00001DF6  6700 0116               1257      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DFA  6600 0002               1258      BNE    CHECK_OP_TRAP            ;Check next OP code
00001DFE                          1259      
00001DFE                          1260  CHECK_OP_TRAP:
00001DFE  3038 10A0               1261      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E02  0240 FFF0               1262      ANDI.W #$FFF0,D0                ;Mask relevant bits to D0
00001E06  B07C 4E40               1263      CMP.W  #$4E40,D0                ;Compare the appropriate masked bits
00001E0A  6700 0102               1264      BEQ    GROUP4_INVALID           ;INVALID OP code
00001E0E  6600 0002               1265      BNE    CHECK_OP_LINK            ;Check next OP code
00001E12                          1266      
00001E12                          1267  CHECK_OP_LINK:
00001E12  3038 10A0               1268      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E16  0240 FFF8               1269      ANDI.W #$FFF8,D0                ;Mask relevant bits to D0
00001E1A  B07C 4E50               1270      CMP.W  #$4E50,D0                ;Compare the appropriate masked bits
00001E1E  6700 00EE               1271      BEQ    GROUP4_INVALID           ;INVALID OP code
00001E22  6600 0002               1272      BNE    CHECK_OP_UNLK            ;Check next OP code
00001E26                          1273  
00001E26                          1274  CHECK_OP_UNLK:
00001E26  3038 10A0               1275      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E2A  0240 FFF8               1276      ANDI.W #$FFF8,D0                ;Mask relevant bits to D0
00001E2E  B07C 4E58               1277      CMP.W  #$4E58,D0                ;Compare the appropriate masked bits
00001E32  6700 00DA               1278      BEQ    GROUP4_INVALID           ;INVALID OP code
00001E36  6600 0002               1279      BNE    CHECK_OP_MOVE_USP        ;Check next OP
00001E3A                          1280      
00001E3A                          1281  CHECK_OP_MOVE_USP:
00001E3A  3038 10A0               1282      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E3E  0240 FFF0               1283      ANDI.W #$FFF0,D0                ;Mask relevant bits to D0
00001E42  B07C 4E60               1284      CMP.W  #$4E60,D0                ;Compare the appropriate masked bits
00001E46  6700 00C6               1285      BEQ    GROUP4_INVALID           ;INVALID OP code
00001E4A  6600 0002               1286      BNE    CHECK_OP_JMP             ;Check next OP
00001E4E                          1287  
00001E4E                          1288  CHECK_OP_JMP:
00001E4E  3038 10A0               1289       MOVE.W CUR_OP_CODE,D0          ;Move current instruction set into D0
00001E52  0240 FFC0               1290       ANDI.W #$FFC0,D0               ;Mask relevant bits to D0
00001E56  B07C 4EC0               1291       CMP.W  #$4EC0,D0               ;Compare the appropriate masked bits
00001E5A  6700 00B2               1292       BEQ    GROUP4_INVALID          ;INVALID OP code
00001E5E  6600 0002               1293       BNE    CHECK_OP_CHK            ;Check next OP code
00001E62                          1294       
00001E62                          1295  CHECK_OP_CHK:
00001E62  3038 10A0               1296      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001E66  0240 F1C0               1297      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
00001E6A  B07C 4180               1298      CMP.W   #$4180,D0               ;Compare the appropriate masked bits
00001E6E  6700 0672               1299      BEQ     INVALID_OP              ;INVALID OP code
00001E72  6600 0002               1300      BNE     CHECK_OP_NOP            ;Check next OP code
00001E76                          1301  
00001E76                          1302  CHECK_OP_NOP:                       ;While this code is not in the supported docs, Nash covered it in class and expects it to be implemented
00001E76  3038 10A0               1303      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E7A  B07C 4E71               1304      CMP.W  #$4E71,D0                ;Compare the appropriate bits
00001E7E  6600 000C               1305      BNE    CHECK_OP_RTS             ;Check next OP code
00001E82  4EB9 000025AA           1306      JSR    PRINT_OP_NOP             ;Print out OP code
00001E88  6000 0090               1307      BRA    GROUP4_SUCCESS           ;Finish routine
00001E8C                          1308      
00001E8C                          1309  CHECK_OP_RTS:
00001E8C  3038 10A0               1310      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E90  B07C 4E75               1311      CMP.W  #$4E75,D0                ;Mask exact bits for RTS    
00001E94  6600 000C               1312      BNE    CHECK_OP_LEA             ;If it's equal check next code
00001E98  4EB9 0000259C           1313      JSR    PRINT_OP_RTS             ;Print out OP code
00001E9E  6000 007A               1314      BRA    GROUP4_SUCCESS           ;Finish routine
00001EA2                          1315   
00001EA2                          1316  CHECK_OP_LEA:
00001EA2  3038 10A0               1317      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001EA6  0240 F1C0               1318      ANDI.W #$F1C0,D0                ;Mask appropriate bits
00001EAA  B07C 41C0               1319      CMP.W  #$41C0,D0                ;Compare masked bits
00001EAE  6600 000C               1320      BNE    CHECK_OP_JSR             ;Check next OP code
00001EB2  4EB9 000025B8           1321      JSR    PRINT_OP_LEA             ;Print out OP code
00001EB8  6000 0060               1322      BRA    GROUP4_SUCCESS           ;Finish routine
00001EBC                          1323   
00001EBC                          1324  CHECK_OP_JSR:
00001EBC  3038 10A0               1325      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001EC0  0240 FFC0               1326      ANDI.W #$FFC0,D0                ;Mask appropriate bits
00001EC4  B07C 4E80               1327      CMP.W  #$4E80,D0                ;Compare masked bits
00001EC8  6600 000C               1328      BNE    CHECK_OP_NEG             ;Check next OP code
00001ECC  4EB9 0000258E           1329      JSR    PRINT_OP_JSR             ;Print out OP code
00001ED2  6000 0046               1330      BRA    GROUP4_SUCCESS           ;Finish routine
00001ED6                          1331      
00001ED6                          1332  CHECK_OP_NEG:
00001ED6  3038 10A0               1333      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001EDA  0240 FF00               1334      ANDI.W #$FF00,D0                ;Mask appropriate bits
00001EDE  B07C 4400               1335      CMP.W  #$4400,D0                ;Compare masked bits
00001EE2  6600 0010               1336      BNE    CHECK_OP_MOVEM           ;Check next OP code
00001EE6  4EB8 18D2               1337      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Find size field
00001EEA  4EB9 000025CC           1338      JSR    PRINT_OP_NEG             ;Print out OP code
00001EF0  6000 0028               1339      BRA    GROUP4_SUCCESS           ;Finish routine
00001EF4                          1340      
00001EF4                          1341  CHECK_OP_MOVEM:
00001EF4  3038 10A0               1342      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001EF8  0240 FB80               1343      ANDI.W #$FB80,D0                ;Mask appropriate bits
00001EFC  B07C 4880               1344      CMP.W  #$4880,D0                ;Compare masked bits
00001F00  6600 05E0               1345      BNE    INVALID_OP               ;If no code is found, it is invalid
00001F04  4EB9 000025E0           1346      JSR    PRINT_OP_MOVEM_W         ;Print out OP code
00001F0A  6000 000E               1347      BRA    GROUP4_SUCCESS           ;Finish routine
00001F0E                          1348      
00001F0E                          1349  GROUP4_INVALID:
00001F0E  4EB9 000024E2           1350      JSR INVALID_OP                  ;INVALID op code has been found, set IS_VALID to 0
00001F14  4EF9 00001F1A           1351      JMP GROUP4_SUCCESS 
00001F1A                          1352  GROUP4_SUCCESS:
00001F1A  4CDF 0001               1353      MOVEM.L (SP)+,D0                ;Restore saved registers
00001F1E  4E75                    1354      RTS                             ;Return to stack
00001F20                          1355  C_GROUP_5:
00001F20  48E7 8000               1356      MOVEM.L D0,-(SP)                ;Save registers to stack
00001F24                          1357  CHECK_OP_DBcc:                      ;These are ordered first due to checking bits 7-6
00001F24  3038 10A0               1358      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001F28  0240 F0C8               1359      ANDI.W #$F0C8,D0                ;Mask appropriate bits
00001F2C  B07C 50C8               1360      CMP.W  #$50C8,D0                ;Compare appropriate masked bits
00001F30  6700 004C               1361      BEQ    GROUP5_INVALID           ;INVALID op code found
00001F34  6600 0002               1362      BNE    CHECK_OP_Scc             ;Check next OP code
00001F38                          1363  
00001F38                          1364  CHECK_OP_Scc:
00001F38  3038 10A0               1365      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001F3C  0240 F0C0               1366      ANDI.W #$F0C0,D0                ;Mask appropriate bits
00001F40  B07C 50C0               1367      CMP.W  #$50C0,D0                ;Compare appropriate masked bits
00001F44  6700 0038               1368      BEQ     GROUP5_INVALID          ;INVALID OP code found
00001F48  6600 0002               1369      BNE     CHECK_OP_ADDQ           ;Check next OP code
00001F4C                          1370  
00001F4C                          1371  CHECK_OP_ADDQ:
00001F4C  3038 10A0               1372      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001F50  0240 F100               1373      ANDI.W #$F100,D0                ;Mask appropriate bits
00001F54  B07C 5000               1374      CMP.W  #$5000,D0                ;Compare appropriate masked bits
00001F58  6700 0024               1375      BEQ    GROUP5_INVALID           ;INVALID OP code found
00001F5C  6600 0002               1376      BNE    CHECK_OP_SUBQ            ;Check next OP code
00001F60                          1377  
00001F60                          1378  CHECK_OP_SUBQ     
00001F60  3038 10A0               1379      MOVE.W  CUR_OP_CODE,D0          ;Actual check for SUBQ
00001F64  0240 F100               1380      ANDI.W #$F100,D0                ;Bitmask check for SUBQ
00001F68  B07C 5100               1381      CMP.W  #$5100,D0                ;Compare the proper value
00001F6C  6600 0010               1382      BNE    GROUP5_INVALID           ;Else the operand is invalid
00001F70  4EB8 18D2               1383      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Find size bit to print
00001F74  4EB9 000025FC           1384      JSR    PRINT_OP_SUBQ            ;If equal print it out
00001F7A  6000 0008               1385      BRA    GROUP5_SUCCESS           ;Finish routine
00001F7E                          1386      
00001F7E                          1387  GROUP5_INVALID: 
00001F7E  4EB9 000024E2           1388      JSR INVALID_OP                  ;INVALID OP has been found, set IS_VALID to 0
00001F84                          1389  GROUP5_SUCCESS:
00001F84  4CDF 0001               1390      MOVEM.L (SP)+,D0                ;Restore registers from stack
00001F88  4E75                    1391      RTS                             ;Return to stack
00001F8A                          1392      
00001F8A                          1393  C_GROUP_6:
00001F8A  48E7 8000               1394      MOVEM.L D0,-(SP)            ;Save register to stack
00001F8E                          1395  CHECK_OP_BSR:
00001F8E  3038 10A0               1396      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set to D0
00001F92  0240 FF00               1397      ANDI.W  #$FF00,D0           ;Mask appropriate bits
00001F96  B07C 6100               1398      CMP.W   #$6100,D0           ;Compare masked bits
00001F9A  6700 0128               1399      BEQ     GROUP6_INVALID      ;INVALID OP code found
00001F9E  6600 0002               1400      BNE     CHECK_OP_BGT        ;Check next OP code
00001FA2                          1401      
00001FA2                          1402  CHECK_OP_BGT:
00001FA2  3038 10A0               1403      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001FA6  0240 FF00               1404      ANDI.W #$FF00,D0            ;Mask appropriate bits
00001FAA  B07C 6E00               1405      CMP.W  #$6E00,D0            ;Compare masked bits
00001FAE  6700 0114               1406      BEQ    GROUP6_INVALID       ;INVALID OP code found
00001FB2  6600 0002               1407      BNE    CHECK_OP_BCC         ;Check next OP code
00001FB6                          1408  
00001FB6                          1409  CHECK_OP_BCC:
00001FB6  3038 10A0               1410      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001FBA  0240 FF00               1411      ANDI.W #$FF00,D0            ;Mask appropriate bits
00001FBE  B07C 6400               1412      CMP.W  #$6400,D0            ;Compare masked bits
00001FC2  6700 0100               1413      BEQ    GROUP6_INVALID       ;INVALID OP code found
00001FC6  6600 0002               1414      BNE    CHECK_OP_BEQ         ;Check next OP code 
00001FCA                          1415  
00001FCA                          1416  CHECK_OP_BEQ:
00001FCA  3038 10A0               1417      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001FCE  0240 FF00               1418      ANDI.W #$FF00,D0            ;Mask appropriate bits
00001FD2  B07C 6700               1419      CMP.W  #$6700,D0            ;Compare masked bits
00001FD6  6700 00EC               1420      BEQ    GROUP6_INVALID       ;INVALID OP code found
00001FDA  6600 0002               1421      BNE    CHECK_OP_BHI         ;Check next OP code
00001FDE                          1422  
00001FDE                          1423  CHECK_OP_BHI:
00001FDE  3038 10A0               1424      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001FE2  0240 FF00               1425      ANDI.W #$FF00,D0            ;Mask appropriate bits
00001FE6  B07C 6200               1426      CMP.W  #$6200,D0            ;Compare masked bits
00001FEA  6700 00D8               1427      BEQ    GROUP6_INVALID       ;INVALID OP code found
00001FEE  6600 0002               1428      BNE    CHECK_OP_BLS         ;Check next OP code
00001FF2                          1429  
00001FF2                          1430  CHECK_OP_BLS:
00001FF2  3038 10A0               1431      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001FF6  0240 FF00               1432      ANDI.W #$FF00,D0            ;Mask appropriate bits
00001FFA  B07C 6300               1433      CMP.W  #$6300,D0            ;Compare masked bits
00001FFE  6700 00C4               1434      BEQ    GROUP6_INVALID       ;INVALID OP code found
00002002  6600 0002               1435      BNE    CHECK_OP_BMI         ;Check next OP code
00002006                          1436  
00002006                          1437  CHECK_OP_BMI:
00002006  3038 10A0               1438      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
0000200A  0240 FF00               1439      ANDI.W #$FF00,D0            ;Mask appropriate bits
0000200E  B07C 6B00               1440      CMP.W  #$6B00,D0            ;Compare masked bits
00002012  6700 00B0               1441      BEQ    GROUP6_INVALID       ;INVALID OP code found
00002016  6600 0002               1442      BNE    CHECK_OP_BNE         ;Check next OP code
0000201A                          1443  
0000201A                          1444  CHECK_OP_BNE:
0000201A  3038 10A0               1445      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
0000201E  0240 FF00               1446      ANDI.W #$FF00,D0            ;Mask appropriate bits
00002022  B07C 6600               1447      CMP.W  #$6600,D0            ;Compare masked bits
00002026  6700 009C               1448      BEQ    GROUP6_INVALID       ;INVALID OP code found
0000202A  6600 0002               1449      BNE    CHECK_OP_BPL         ;Check next OP code    
0000202E                          1450  
0000202E                          1451  CHECK_OP_BPL:
0000202E  3038 10A0               1452      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00002032  0240 FF00               1453      ANDI.W #$FF00,D0            ;Mask appropriate bits
00002036  B07C 6A00               1454      CMP.W  #$6A00,D0            ;Compare masked bits
0000203A  6700 0088               1455      BEQ    GROUP6_INVALID       ;INVALID OP code found
0000203E  6600 0002               1456      BNE    CHECK_OP_BRA         ;Check next OP code 
00002042                          1457  
00002042                          1458  
00002042                          1459  CHECK_OP_BRA:
00002042  3038 10A0               1460      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D0       
00002046  0240 FF00               1461      ANDI.W  #$FF00,D0           ;Mask appropriate bits
0000204A  B07C 6000               1462      CMP.W   #$6000,D0           ;Compare masked bits
0000204E  6600 000C               1463      BNE     CHECK_OP_BCS        ;Check next OP code
00002052  4EB9 00002660           1464      JSR     PRINT_OP_BRA        ;Print out OP code
00002058  6000 0070               1465      BRA     GROUP6_SUCCESS      ;Finish routine
0000205C                          1466      
0000205C                          1467  CHECK_OP_BCS:
0000205C  3038 10A0               1468      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00002060  0240 FF00               1469      ANDI.W #$FF00,D0            ;Mask appropriate bits
00002064  B07C 6500               1470      CMP.W  #$6500,D0            ;Compare masked bits
00002068  6600 000C               1471      BNE    CHECK_OP_BGE         ;Check next OP code
0000206C  4EB9 00002610           1472      JSR    PRINT_OP_BCS         ;Print out OP code
00002072  6000 0056               1473      BRA    GROUP6_SUCCESS       ;Finish routine
00002076                          1474  
00002076                          1475      
00002076                          1476  CHECK_OP_BGE:
00002076  3038 10A0               1477      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
0000207A  0240 FF00               1478      ANDI.W #$FF00,D0            ;Mask appropriate bits
0000207E  B07C 6C00               1479      CMP.W  #$6C00,D0            ;Compare masked bits
00002082  6600 000C               1480      BNE    CHECK_OP_BLT         ;Check next OP code
00002086  4EB9 00002624           1481      JSR    PRINT_OP_BGE         ;Print out OP code
0000208C  6000 003C               1482      BRA    GROUP6_SUCCESS       ;Finish routine
00002090                          1483      
00002090                          1484      
00002090                          1485  CHECK_OP_BLT:
00002090  3038 10A0               1486      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00002094  0240 FF00               1487      ANDI.W #$FF00,D0            ;Mask appropriate bits
00002098  B07C 6D00               1488      CMP.W  #$6D00,D0            ;Compare masked bits
0000209C  6600 000C               1489      BNE    CHECK_OP_BVC         ;Check next OP code
000020A0  4EB9 00002638           1490      JSR    PRINT_OP_BLT         ;Print out OP code
000020A6  6000 0022               1491      BRA    GROUP6_SUCCESS       ;Finish routine
000020AA                          1492      
000020AA                          1493  CHECK_OP_BVC:
000020AA  3038 10A0               1494      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000020AE  0240 FF00               1495      ANDI.W #$FF00,D0            ;Mask appropriate bits
000020B2  B07C 6800               1496      CMP.W  #$6800,D0            ;Compare masked bits
000020B6  6600 000C               1497      BNE    GROUP6_INVALID       ;Check next OP code
000020BA  4EB9 0000264C           1498      JSR    PRINT_OP_BVC         ;Print out OP code
000020C0  6000 0008               1499      BRA    GROUP6_SUCCESS       ;Finish routine
000020C4                          1500      
000020C4                          1501  GROUP6_INVALID:
000020C4  4EB9 000024E2           1502      JSR    INVALID_OP           ;INVALID OP code found, set IS_VALID to 0
000020CA                          1503  GROUP6_SUCCESS:
000020CA  4CDF 0001               1504      MOVEM.L (SP)+,D0            ;Restore registers from stack
000020CE  4E75                    1505      RTS                         ;Return from stack
000020D0                          1506      
000020D0                          1507  C_GROUP_7:
000020D0  48E7 8000               1508      MOVEM.L D0,-(SP)            ;Save register to stack
000020D4                          1509      
000020D4                          1510  CHECK_OP_MOVEQ
000020D4  3038 10A0               1511      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set to D0
000020D8  0240 F100               1512      ANDI.W #$F100,D0            ;Mask appropriate bits
000020DC  B07C 7000               1513      CMP.W  #$7000,D0            ;Compare masked bits
000020E0  6600 0006               1514      BNE    GROUP7_INVALID       ;INVALID OP code found
000020E4  6700 0008               1515      BEQ    GROUP7_SUCCESS       ;Finish routine
000020E8                          1516      
000020E8                          1517  GROUP7_INVALID:
000020E8  4EB9 000024E2           1518      JSR INVALID_OP              ;INVALID OP code found, set IS_VALID to 0
000020EE                          1519  GROUP7_SUCCESS:    
000020EE  4CDF 0001               1520      MOVEM.L (SP)+,D0            ;Restore registers from stack
000020F2  4E75                    1521      RTS                         ;Return from stack
000020F4                          1522  C_GROUP_8:
000020F4  48E7 8000               1523      MOVEM.L D0,-(SP)
000020F8                          1524  CHECK_OP_DIVU:
000020F8  3038 10A0               1525      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000020FC  0240 F1C0               1526      ANDI.W  #$F1C0,D0                   ;Mask appropriate bits
00002100  B07C 80C0               1527      CMP.W   #$80C0,D0                   ;Compare masked bits
00002104  6700 0042               1528      BEQ     GROUP8_INVALID              ;INVALID OP code found
00002108  6600 0002               1529      BNE     CHECK_OP_SBCD               ;Check next OP code
0000210C                          1530  
0000210C                          1531  CHECK_OP_SBCD:
0000210C  3038 10A0               1532      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00002110  0240 F1F0               1533      ANDI.W  #$F1F0,D0                   ;Mask appropriate bits
00002114  B07C 8100               1534      CMP.W   #$8100,D0                   ;Compare masked bits
00002118  6700 002E               1535      BEQ     GROUP8_INVALID              ;INVALID OP code found
0000211C  6600 0002               1536      BNE     CHECK_OP_DIVS               ;Check next OP code
00002120                          1537      
00002120                          1538  CHECK_OP_DIVS:
00002120  3038 10A0               1539      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00002124  0240 F1C0               1540      ANDI.W  #$F1C0,D0                   ;Mask appropriate bits
00002128  B07C 81C0               1541      CMP.W   #$81C0,D0                   ;Compare masked bits
0000212C  6600 000C               1542      BNE     CHECK_OP_OR                 ;Check next OP code
00002130  4EB9 00002674           1543      JSR     PRINT_OP_DIVS               ;OP Code found
00002136  6000 0016               1544      BRA     GROUP8_SUCCESS
0000213A                          1545  CHECK_OP_OR:                            ;At this point only remaining $8 code is OR
0000213A  4EB8 18D2               1546      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Finding size bit to print out
0000213E  4EB9 00002682           1547      JSR     PRINT_OP_OR                 ;Print out OR
00002144  6000 0008               1548      BRA     GROUP8_SUCCESS              ;Finish routine
00002148                          1549  GROUP8_INVALID:
00002148  4EB9 000024E2           1550       JSR     INVALID_OP                 ;INVALID OP code found, set IS_VALID to 0
0000214E                          1551  GROUP8_SUCCESS:
0000214E  4CDF 0001               1552       MOVEM.L (SP)+,D0                   ;Restore register from stack
00002152  4E75                    1553       RTS                                ;Return to stack
00002154                          1554       
00002154                          1555  C_GROUP_9:
00002154  48E7 C000               1556      MOVEM.L D0-D1,-(SP)                 ;Save the registers
00002158                          1557  CHECK_SIZE_BIT_FOR_SUB:
00002158  4EB8 18D2               1558      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find the size bits in 7-6
0000215C  0C38 0003 1778          1559      CMP.B   #%11,OP_SIZE                ;If the bits are %11, it has to be SUBA
00002162  6700 0006               1560      BEQ     CHECK_OP_SUBA               ;If the bits equal it must be SUBA
00002166  6600 0016               1561      BNE     CHECK_OP_SUBX               ;If the bits are not equal it could be SUBX
0000216A                          1562      
0000216A                          1563  CHECK_OP_SUBA:                          ;Check SUBA first as it has static bits
0000216A  3038 10A0               1564      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
0000216E  0240 F0C0               1565      ANDI.W  #$F0C0,D0                   ;Mask appropriate bits
00002172  B07C 90C0               1566      CMP.W   #$90C0,D0                   ;Compare masked bits
00002176  6700 0042               1567      BEQ     GROUP9_INVALID              ;INVALID OP has been found
0000217A  6600 0002               1568      BNE     CHECK_OP_SUBX               ;Check next OP
0000217E                          1569  
0000217E                          1570  CHECK_OP_SUBX:
0000217E  3038 10A0               1571      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00002182  0240 F130               1572      ANDI.W  #$F130,D0                   ;Mask appropriate bits
00002186  B07C 9100               1573      CMP.W   #$9100,D0                   ;Compare masked bits
0000218A  6000 0002               1574      BRA     BIT_CHECK_SUBX              ;Checking if this code is SUBX through bit shifts
0000218E                          1575      
0000218E                          1576  BIT_CHECK_SUBX:    
0000218E  3038 10A0               1577      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00002192  323C 0007               1578      MOVE.W  #7,D1                       ;Prepare a shift of 7 bits into D1
00002196  E368                    1579      LSL.W   D1,D0                       ;Shift left 7 bits truncate 15-9 bits
00002198  E268                    1580      LSR.W   D1,D0                       ;Reposition D0
0000219A  E848                    1581      LSR.W   #4,D0                       ;Truncate 4 right most bits to
0000219C  0240 FF13               1582      ANDI.W  #$FF13,D0                   ;Compare remaining static bits
000021A0  B07C 0010               1583      CMP.W   #$0010,D0                   ;If equal to this value it's SUBX
000021A4  6700 0014               1584      BEQ     GROUP9_INVALID              ;INVALID OP code found
000021A8  6600 0002               1585      BNE     CHECK_OP_SUB                ;Not can only be SUB here
000021AC                          1586      
000021AC                          1587  CHECK_OP_SUB:                           ;At this point only remaining $9 is SUB
000021AC  4EB8 18D2               1588      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find the size bit to print out
000021B0  4EB9 00002696           1589      JSR     PRINT_OP_SUB                ;Print out SUB
000021B6  6000 0008               1590      BRA     GROUP9_SUCCESS              ;Finish routine
000021BA                          1591      
000021BA                          1592  GROUP9_INVALID:
000021BA  4EB9 000024E2           1593       JSR     INVALID_OP                 ;INVALID OP code found, set IS_VALID to 0
000021C0                          1594  GROUP9_SUCCESS: 
000021C0  4CDF 0003               1595      MOVEM.L (SP)+,D0-D1                 ;Restore registers
000021C4  4E75                    1596      RTS                                 ;Return to stack
000021C6                          1597  
000021C6                          1598  C_GROUP_A:
000021C6  4EB9 000024E2           1599      JSR INVALID_OP                      ;INVALID OP code found, set IS_VALID to 0
000021CC  4E75                    1600      RTS                                 ;Return to stack
000021CE                          1601      
000021CE                          1602  C_GROUP_B:
000021CE  48E7 8000               1603      MOVEM.L D0,-(SP)                    ;Save current registers to stack
000021D2                          1604  CHECK_OP_CMPM
000021D2  3038 10A0               1605      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000021D6  0240 F138               1606      ANDI.W  #$F138,D0                   ;Mask appropriate bits
000021DA  B07C B108               1607      CMP.W   #$B108,D0                   ;Compare masked bits
000021DE  6700 0056               1608      BEQ     GROUPB_INVALID              ;INVALID OP found
000021E2  6600 0002               1609      BNE     CHECK_OP_CMPA               ;Check next OP
000021E6                          1610      
000021E6                          1611  CHECK_OP_CMPA:
000021E6  3038 10A0               1612      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000021EA  0240 F0C0               1613      ANDI.W  #$F0C0,D0                   ;Mask appropriate bits
000021EE  B07C B0C0               1614      CMP.W   #$B0C0,D0                   ;Compare masked bits
000021F2  6700 0042               1615      BEQ     GROUPB_INVALID              ;INVALID OP found
000021F6  6600 0002               1616      BNE     CHECK_OP_EOR                ;Check next OP
000021FA                          1617  
000021FA                          1618  CHECK_OP_EOR:
000021FA  3038 10A0               1619      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000021FE  0240 F100               1620      ANDI.W  #$F100,D0                   ;Mask appropriate bits
00002202  B07C B100               1621      CMP.W   #$B100,D0                   ;Compare masked bits
00002206  6600 0010               1622      BNE     CHECK_OP_CMP                ;Check next OP 
0000220A  4EB8 18D2               1623      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find size bit field to print out size
0000220E  4EB9 000026AA           1624      JSR     PRINT_OP_EOR                ;Print out OP code
00002214  6000 0026               1625      BRA     GROUPB_SUCCESS              ;Finish routine
00002218                          1626      
00002218                          1627  CHECK_OP_CMP:
00002218  3038 10A0               1628      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
0000221C  0240 F100               1629      ANDI.W  #$F100,D0                   ;Mask appropriate bits
00002220  B07C B000               1630      CMP.W   #$B000,D0                   ;Compare masked bits
00002224  6600 0010               1631      BNE     GROUPB_INVALID              ;INVALID OP code found
00002228  4EB8 18D2               1632      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find size bit field to print out size
0000222C  4EB9 000026BE           1633      JSR     PRINT_OP_CMP                ;Print out OP code
00002232  6000 0008               1634      BRA     GROUPB_SUCCESS              ;Finish routine
00002236                          1635      
00002236                          1636  GROUPB_INVALID:
00002236  4EB9 000024E2           1637      JSR     INVALID_OP                  ;INVALID OP has been found, set IS_VALID to 0
0000223C                          1638  GROUPB_SUCCESS:
0000223C  4CDF 0001               1639      MOVEM.L (SP)+,D0                    ;Restore registers from stack
00002240  4E75                    1640      RTS                                 ;Return to stack
00002242                          1641  C_GROUP_C:
00002242  48E7 C000               1642      MOVEM.L D0-D1,-(SP)
00002246                          1643      
00002246                          1644  CHECK_OP_MULU:
00002246  3038 10A0               1645      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
0000224A  0240 F1C0               1646      ANDI.W  #$F1C0,D0
0000224E  B07C C0C0               1647      CMP.W   #$C0C0,D0
00002252  6700 006A               1648      BEQ     GROUPC_INVALID
00002256  6600 0002               1649      BNE     CHECK_OP_ABCD
0000225A                          1650   
0000225A                          1651  CHECK_OP_ABCD:
0000225A  3038 10A0               1652      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
0000225E  0240 F1F0               1653      ANDI.W  #$F1F0,D0
00002262  B07C C100               1654      CMP.W   #$C100,D0
00002266  6700 0056               1655      BEQ     GROUPC_INVALID
0000226A  6600 0002               1656      BNE     CHECK_OP_EXG
0000226E                          1657   
0000226E                          1658  CHECK_OP_EXG:
0000226E  6000 0002               1659      BRA     BIT_CHECK_EXG       ;Always do bit check here
00002272                          1660                          
00002272                          1661  BIT_CHECK_EXG:                 ;Checks the OP mode bits 7-6 which cannot be 11 for EXG
00002272  3038 10A0               1662      MOVE.W  CUR_OP_CODE,D0
00002276  323C 0007               1663      MOVE.W  #7,D1
0000227A  E368                    1664      LSL.W   D1,D0
0000227C  E268                    1665      LSR.W   D1,D0
0000227E  E848                    1666      LSR.W   #4,D0
00002280  0240 FF83               1667      ANDI.W  #$FF83,D0
00002284  B07C 0010               1668      CMP.W   #$0010,D0          ;Bit mask static EXG bits
00002288  6700 0034               1669      BEQ     GROUPC_INVALID     ;If this equals, then OP must be EXG
0000228C  6600 0002               1670      BNE     CHECK_OP_MULS      ;Otherwise it's MULS
00002290                          1671  CHECK_OP_MULS:
00002290  3038 10A0               1672      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00002294  0240 F1C0               1673      ANDI.W #$F1C0,D0
00002298  B07C C1C0               1674      CMP.W  #$C1C0,D0
0000229C  6600 000C               1675      BNE    CHECK_OP_AND          ; OP_AND is completely dynamic outside of first nibble
000022A0  4EB9 000026D2           1676      JSR    PRINT_OP_MULS
000022A6  6000 001C               1677      BRA    GROUPC_SUCCESS
000022AA                          1678  CHECK_OP_AND:                 ;This would be the only possible OP code left after CHECK_OP_MULS
000022AA  3038 10A0               1679      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
000022AE  0240 F000               1680      ANDI.W  #$F000,D0
000022B2  B07C C000               1681      CMP.W   #$C000,D0
000022B6  6700 0006               1682      BEQ     GROUPC_INVALID
000022BA  6000 0002               1683      BRA    GROUPC_INVALID    
000022BE                          1684  GROUPC_INVALID:
000022BE  4EB9 000024E2           1685      JSR     INVALID_OP
000022C4                          1686  GROUPC_SUCCESS:
000022C4  4CDF 0003               1687      MOVEM.L (SP)+,D0-D1
000022C8  4E75                    1688      RTS
000022CA                          1689      
000022CA                          1690  C_GROUP_D:
000022CA  48E7 8000               1691      MOVEM.L D0,-(SP)                ;Save registers to stack
000022CE                          1692  BIT_SIZE_CHECK
000022CE  3038 10A0               1693      MOVE    CUR_OP_CODE,D0          ;Move current instruction set into D0
000022D2  4EB8 18D2               1694      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Specific size bit checking to see if it's 11
000022D6  0C38 0003 1778          1695      CMP.B   #%11,OP_SIZE            ;If it's %11 it cannot be ADDX and is either ADDA or ADD
000022DC  6700 0024               1696      BEQ     CHECK_OP_ADDA           ;If it's equal check ADDA
000022E0  6600 0002               1697      BNE     CHECK_OP_ADDX           ;If it's not equal check ADDX
000022E4                          1698      
000022E4                          1699  CHECK_OP_ADDX:
000022E4  3038 10A0               1700      MOVE    CUR_OP_CODE,D0
000022E8  0240 F130               1701      ANDI.W #$F130,D0                ;Mask appropriate bits
000022EC  B07C D100               1702      CMP.W  #$D100,D0                ;Compare masked bits
000022F0  6700 002C               1703      BEQ    GROUPD_INVALID           ;INVALID OP code found
000022F4  6600 0002               1704      BNE    CHECK_OP_ADD             ;Check next OP code
000022F8                          1705      
000022F8                          1706  CHECK_OP_ADD:
000022F8  4EB9 000026E0           1707      JSR PRINT_OP_ADD                ;Only remaining OP in $D is ADD at this point
000022FE  6000 0024               1708      BRA GROUPD_SUCCESS              ;Finish routine
00002302                          1709  
00002302                          1710  CHECK_OP_ADDA:
00002302  3038 10A0               1711      MOVE    CUR_OP_CODE,D0          ;Move current instruction set into D0
00002306  0240 F0C0               1712      ANDI.W #$F0C0,D0                ;Mask applicable bits
0000230A  B07C D0C0               1713      CMP.W  #$D0C0,D0                ;Compare masked bits
0000230E  66E8                    1714      BNE    CHECK_OP_ADD             ;Check next OP code
00002310  4EB8 1912               1715      JSR    FIND_1_BIT_SIZE_8        ;Size bit to print
00002314  4EB9 000026F4           1716      JSR    PRINT_OP_ADDA            ;Print out OP code
0000231A  6000 0008               1717      BRA    GROUPD_SUCCESS           ;Finish routine
0000231E                          1718      
0000231E                          1719  GROUPD_INVALID:
0000231E  4EB9 000024E2           1720      JSR INVALID_OP                  ;INVALID OP code found
00002324                          1721  GROUPD_SUCCESS:
00002324  4CDF 0001               1722      MOVEM.L (SP)+,D0                ;Restore registers from stack
00002328  4E75                    1723      RTS                             ;Return to stack
0000232A                          1724      
0000232A                          1725  C_GROUP_E:
0000232A  48E7 8000               1726      MOVEM.L D0,-(SP)
0000232E                          1727  CHECK_OP_ROXR_NO_ROT:
0000232E  3038 10A0               1728      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002332  0240 FFC0               1729      ANDI.W #$FFC0,D0
00002336  B07C E4C0               1730      CMP.W  #$E4C0,D0
0000233A  6700 0192               1731      BEQ    GROUPE_INVALID
0000233E  6600 0002               1732      BNE    CHECK_OP_ROXL_NO_ROT
00002342                          1733  
00002342                          1734  CHECK_OP_ROXL_NO_ROT:
00002342  3038 10A0               1735      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002346  0240 FFC0               1736      ANDI.W #$FFC0,D0
0000234A  B07C E5C0               1737      CMP.W  #$E5C0,D0
0000234E  6700 017E               1738      BEQ    GROUPE_INVALID
00002352  6600 0002               1739      BNE    CHECK_OP_ROR_NO_ROT
00002356                          1740  
00002356                          1741  CHECK_OP_ROR_NO_ROT:
00002356  3038 10A0               1742      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000235A  0240 FFC0               1743      ANDI.W #$FFC0,D0
0000235E  B07C E6C0               1744      CMP.W  #$E6C0,D0
00002362  6600 000C               1745      BNE    CHECK_OP_ROL_NO_ROT
00002366  4EB9 0000276C           1746      JSR    PRINT_OP_ROR
0000236C  6000 0166               1747      BRA    GROUPE_SUCCESS
00002370                          1748      
00002370                          1749  CHECK_OP_ROL_NO_ROT:
00002370  3038 10A0               1750      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002374  0240 FFC0               1751      ANDI.W #$FFC0,D0
00002378  B07C E7C0               1752      CMP.W  #$E7C0,D0
0000237C  6600 000C               1753      BNE    CHECK_OP_LSR_NO_ROT
00002380  4EB9 00002758           1754      JSR    PRINT_OP_ROL
00002386  6000 014C               1755      BRA    GROUPE_SUCCESS
0000238A                          1756   
0000238A                          1757  CHECK_OP_LSR_NO_ROT:
0000238A  3038 10A0               1758      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000238E  0240 FFC0               1759      ANDI.W #$FFC0,D0
00002392  B07C E2C0               1760      CMP.W  #$E2C0,D0
00002396  6600 000C               1761      BNE    CHECK_OP_LSL_NO_ROT
0000239A  4EB9 0000271C           1762      JSR    PRINT_OP_LSR
000023A0  6000 0132               1763      BRA    GROUPE_SUCCESS
000023A4                          1764  
000023A4                          1765  CHECK_OP_LSL_NO_ROT:
000023A4  3038 10A0               1766      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000023A8  0240 FFC0               1767      ANDI.W #$FFC0,D0
000023AC  B07C E3C0               1768      CMP.W  #$E3C0,D0
000023B0  6600 000C               1769      BNE    CHECK_OP_ASR_NO_ROT
000023B4  4EB9 00002708           1770      JSR    PRINT_OP_LSL
000023BA  6000 0118               1771      BRA    GROUPE_SUCCESS
000023BE                          1772  
000023BE                          1773  CHECK_OP_ASR_NO_ROT:
000023BE  3038 10A0               1774      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000023C2  0240 FFC0               1775      ANDI.W #$FFC0,D0
000023C6  B07C E0C0               1776      CMP.W  #$E0C0,D0
000023CA  6600 000C               1777      BNE    CHECK_OP_ASL_NO_ROT
000023CE  4EB9 00002730           1778      JSR    PRINT_OP_ASR
000023D4  6000 00FE               1779      BRA    GROUPE_SUCCESS
000023D8                          1780              
000023D8                          1781  CHECK_OP_ASL_NO_ROT:
000023D8  3038 10A0               1782      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000023DC  0240 FFC0               1783      ANDI.W #$FFC0,D0
000023E0  B07C E1C0               1784      CMP.W  #$E1C0,D0
000023E4  6600 000C               1785      BNE    CHECK_OP_ROXR
000023E8  4EB9 00002744           1786      JSR    PRINT_OP_ASL
000023EE  6000 00E4               1787      BRA    GROUPE_SUCCESS
000023F2                          1788  
000023F2                          1789  CHECK_OP_ROXR:
000023F2  3038 10A0               1790      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000023F6  0240 F118               1791      ANDI.W #$F118,D0
000023FA  B07C E010               1792      CMP.W  #$E010,D0
000023FE  6700 00CE               1793      BEQ    GROUPE_INVALID
00002402  6600 0002               1794      BNE    CHECK_OP_ROXL
00002406                          1795      
00002406                          1796  CHECK_OP_ROXL:
00002406  3038 10A0               1797      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000240A  0240 F118               1798      ANDI.W #$F118,D0
0000240E  B07C E110               1799      CMP.W  #$E110,D0
00002412  6700 00BA               1800      BEQ    GROUPE_INVALID
00002416  6600 0002               1801      BNE    CHECK_OP_ROR
0000241A                          1802      
0000241A                          1803  CHECK_OP_ROR:
0000241A  3038 10A0               1804      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000241E  0240 F118               1805      ANDI.W #$F118,D0
00002422  B07C E018               1806      CMP.W  #$E018,D0
00002426  6600 0010               1807      BNE    CHECK_OP_ROL
0000242A  4EB8 18D2               1808      JSR    FIND_2_BIT_SIZE_7_TO_6     
0000242E  4EB9 0000276C           1809      JSR    PRINT_OP_ROR
00002434  6000 009E               1810      BRA    GROUPE_SUCCESS
00002438                          1811  
00002438                          1812  CHECK_OP_ROL:
00002438  3038 10A0               1813      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000243C  0240 F118               1814      ANDI.W #$F118,D0
00002440  B07C E118               1815      CMP.W  #$E118,D0
00002444  6600 0010               1816      BNE    CHECK_OP_LSR
00002448  4EB8 18D2               1817      JSR    FIND_2_BIT_SIZE_7_TO_6     
0000244C  4EB9 00002758           1818      JSR    PRINT_OP_ROL
00002452  6000 0080               1819      BRA    GROUPE_SUCCESS
00002456                          1820      
00002456                          1821  CHECK_OP_LSR:
00002456  3038 10A0               1822      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000245A  0240 F118               1823      ANDI.W #$F118,D0
0000245E  B07C E008               1824      CMP.W  #$E008,D0
00002462  6600 0010               1825      BNE    CHECK_OP_LSL
00002466  4EB8 18D2               1826      JSR    FIND_2_BIT_SIZE_7_TO_6     
0000246A  4EB9 0000271C           1827      JSR    PRINT_OP_LSR
00002470  6000 0062               1828      BRA    GROUPE_SUCCESS
00002474                          1829  
00002474                          1830  CHECK_OP_LSL:
00002474  3038 10A0               1831      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002478  0240 F118               1832      ANDI.W #$F118,D0
0000247C  B07C E108               1833      CMP.W  #$E108,D0
00002480  6600 0010               1834      BNE    CHECK_OP_ASR
00002484  4EB8 18D2               1835      JSR    FIND_2_BIT_SIZE_7_TO_6     
00002488  4EB9 00002708           1836      JSR    PRINT_OP_LSL
0000248E  6000 0044               1837      BRA    GROUPE_SUCCESS
00002492                          1838  
00002492                          1839  CHECK_OP_ASR:
00002492  3038 10A0               1840      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002496  0240 F118               1841      ANDI.W #$F118,D0
0000249A  B07C E000               1842      CMP.W  #$E000,D0
0000249E  6600 0010               1843      BNE    CHECK_OP_ASL
000024A2  4EB8 18D2               1844      JSR    FIND_2_BIT_SIZE_7_TO_6     
000024A6  4EB9 00002730           1845      JSR    PRINT_OP_ASR
000024AC  6000 0026               1846      BRA    GROUPE_SUCCESS
000024B0                          1847  
000024B0                          1848  CHECK_OP_ASL:
000024B0  3038 10A0               1849      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000024B4  0240 F118               1850      ANDI.W #$F118,D0
000024B8  B07C E100               1851      CMP.W  #$E100,D0
000024BC  6600 0010               1852      BNE    GROUPE_INVALID      ;Last possible OP code
000024C0  4EB8 18D2               1853      JSR    FIND_2_BIT_SIZE_7_TO_6     
000024C4  4EB9 00002744           1854      JSR    PRINT_OP_ASL
000024CA  6000 0008               1855      BRA    GROUPE_SUCCESS
000024CE                          1856  
000024CE                          1857  GROUPE_INVALID:
000024CE  4EB9 000024E2           1858      JSR     INVALID_OP
000024D4                          1859  GROUPE_SUCCESS:
000024D4  4CDF 0001               1860      MOVEM.L (SP)+,D0
000024D8  4E75                    1861      RTS
000024DA                          1862  C_GROUP_F:
000024DA  4EB9 000024E2           1863      JSR INVALID_OP
000024E0  4E75                    1864      RTS
000024E2                          1865      
000024E2                          1866  INVALID_OP:  ; ONLY SETS IS_VALID TO 0
000024E2  11FC 0000 10A2          1867      MOVE.B #0,IS_VALID
000024E8  4E75                    1868      RTS
000024EA                          1869  
000024EA                          1870  
000024EA                          1871  
000024EA                          1872  PRINT_TO_BUFFER:
000024EA  21FC 00001000 125A      1873      MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer
000024F2  4EB8 1264               1874      JSR AddStrToBuffer
000024F6  4E75                    1875      RTS
000024F8                          1876      
000024F8                          1877  PRINT_OP_ORI:
000024F8  21FC 000027EF 1256      1878      MOVE.L #P_OP_ORI, Arg_AddStrToBuffer_String
00002500  4EB8 24EA               1879      JSR PRINT_TO_BUFFER
00002504  4EB9 000027AA           1880      JSR PRINT_OP_SIZE
0000250A  4E75                    1881      RTS
0000250C                          1882  PRINT_OP_CMPI:
0000250C  21FC 000027F6 1256      1883      MOVE.L #P_OP_CMPI, Arg_AddStrToBuffer_String
00002514  4EB8 24EA               1884      JSR PRINT_TO_BUFFER
00002518  4EB9 000027AA           1885      JSR PRINT_OP_SIZE
0000251E  4E75                    1886      RTS
00002520                          1887  PRINT_OP_STATIC_BCLR:
00002520  21FC 000027FE 1256      1888      MOVE.L #P_OP_BCLR, Arg_AddStrToBuffer_String
00002528  4EB8 24EA               1889      JSR PRINT_TO_BUFFER
0000252C  4EB9 000027AA           1890      JSR PRINT_OP_SIZE
00002532  4E75                    1891      RTS
00002534                          1892      
00002534                          1893  PRINT_OP_DYNAMIC_BCLR:
00002534  21FC 000027FE 1256      1894      MOVE.L #P_OP_BCLR, Arg_AddStrToBuffer_String
0000253C  4EB8 24EA               1895      JSR PRINT_TO_BUFFER
00002540  4EB9 000027AA           1896      JSR PRINT_OP_SIZE
00002546  4E75                    1897      RTS
00002548                          1898  
00002548                          1899  PRINT_OP_MOVEB:
00002548  21FC 00002806 1256      1900      MOVE.L #P_OP_MOVEB, Arg_AddStrToBuffer_String
00002550  4EB8 24EA               1901      JSR PRINT_TO_BUFFER
00002554  4E75                    1902      RTS
00002556                          1903      
00002556                          1904  PRINT_OP_MOVEA_L:
00002556  21FC 00002811 1256      1905      MOVE.L #P_OP_MOVEA_L, Arg_AddStrToBuffer_String
0000255E  4EB8 24EA               1906      JSR PRINT_TO_BUFFER
00002562  4E75                    1907      RTS
00002564                          1908  PRINT_OP_MOVE_L:
00002564  21FC 0000281D 1256      1909      MOVE.L #P_OP_MOVE_L, Arg_AddStrToBuffer_String
0000256C  4EB8 24EA               1910      JSR PRINT_TO_BUFFER
00002570  4E75                    1911      RTS
00002572                          1912      
00002572                          1913  PRINT_OP_MOVEA_W:
00002572  21FC 00002828 1256      1914      MOVE.L #P_OP_MOVEA_W, Arg_AddStrToBuffer_String
0000257A  4EB8 24EA               1915      JSR PRINT_TO_BUFFER
0000257E  4E75                    1916      RTS
00002580                          1917  PRINT_OP_MOVE_W:
00002580  21FC 00002834 1256      1918      MOVE.L #P_OP_MOVE_W, Arg_AddStrToBuffer_String
00002588  4EB8 24EA               1919      JSR PRINT_TO_BUFFER
0000258C  4E75                    1920      RTS
0000258E                          1921  
0000258E                          1922  PRINT_OP_JSR:
0000258E  21FC 0000285E 1256      1923      MOVE.L #P_OP_JSR, Arg_AddStrToBuffer_String
00002596  4EB8 24EA               1924      JSR PRINT_TO_BUFFER
0000259A  4E75                    1925      RTS
0000259C                          1926  PRINT_OP_RTS:
0000259C  21FC 0000286C 1256      1927      MOVE.L #P_OP_RTS, Arg_AddStrToBuffer_String
000025A4  4EB8 24EA               1928      JSR PRINT_TO_BUFFER
000025A8  4E75                    1929      RTS
000025AA                          1930  PRINT_OP_NOP:
000025AA  21FC 00002865 1256      1931      MOVE.L #P_OP_NOP, Arg_AddStrToBuffer_String
000025B2  4EB8 24EA               1932      JSR PRINT_TO_BUFFER
000025B6  4E75                    1933      RTS
000025B8                          1934  PRINT_OP_LEA:
000025B8  21FC 00002857 1256      1935      MOVE.L #P_OP_LEA, Arg_AddStrToBuffer_String
000025C0  4EB8 24EA               1936      JSR PRINT_TO_BUFFER
000025C4  4EB9 000027AA           1937      JSR PRINT_OP_SIZE
000025CA  4E75                    1938      RTS
000025CC                          1939  PRINT_OP_NEG:
000025CC  21FC 00002873 1256      1940      MOVE.L #P_OP_NEG, Arg_AddStrToBuffer_String
000025D4  4EB8 24EA               1941      JSR PRINT_TO_BUFFER
000025D8  4EB9 000027AA           1942      JSR PRINT_OP_SIZE
000025DE  4E75                    1943      RTS
000025E0                          1944  PRINT_OP_MOVEM_W:
000025E0  21FC 0000283F 1256      1945      MOVE.L #P_OP_MOVEM_W, Arg_AddStrToBuffer_String
000025E8  4EB8 24EA               1946      JSR PRINT_TO_BUFFER
000025EC  4E75                    1947      RTS
000025EE                          1948  PRINT_OP_MOVEM_L:
000025EE  21FC 0000284B 1256      1949      MOVE.L #P_OP_MOVEM_L, Arg_AddStrToBuffer_String
000025F6  4EB8 24EA               1950      JSR PRINT_TO_BUFFER
000025FA  4E75                    1951      RTS
000025FC                          1952      
000025FC                          1953  PRINT_OP_SUBQ:
000025FC  21FC 0000287A 1256      1954      MOVE.L #P_OP_SUBQ, Arg_AddStrToBuffer_String
00002604  4EB8 24EA               1955      JSR PRINT_TO_BUFFER
00002608  4EB9 000027AA           1956      JSR PRINT_OP_SIZE
0000260E  4E75                    1957      RTS
00002610                          1958  
00002610                          1959  PRINT_OP_BCS:
00002610  21FC 00002889 1256      1960      MOVE.L #P_OP_BCS, Arg_AddStrToBuffer_String
00002618  4EB8 24EA               1961      JSR PRINT_TO_BUFFER
0000261C  4EB9 000027AA           1962      JSR PRINT_OP_SIZE
00002622  4E75                    1963      RTS
00002624                          1964  PRINT_OP_BGE:
00002624  21FC 00002890 1256      1965      MOVE.L #P_OP_BGE, Arg_AddStrToBuffer_String
0000262C  4EB8 24EA               1966      JSR PRINT_TO_BUFFER
00002630  4EB9 000027AA           1967      JSR PRINT_OP_SIZE
00002636  4E75                    1968      RTS
00002638                          1969  PRINT_OP_BLT:
00002638  21FC 00002897 1256      1970      MOVE.L #P_OP_BLT, Arg_AddStrToBuffer_String
00002640  4EB8 24EA               1971      JSR PRINT_TO_BUFFER
00002644  4EB9 000027AA           1972      JSR PRINT_OP_SIZE
0000264A  4E75                    1973      RTS
0000264C                          1974  PRINT_OP_BVC:
0000264C  21FC 0000289E 1256      1975      MOVE.L #P_OP_BVC, Arg_AddStrToBuffer_String
00002654  4EB8 24EA               1976      JSR PRINT_TO_BUFFER
00002658  4EB9 000027AA           1977      JSR PRINT_OP_SIZE
0000265E  4E75                    1978      RTS
00002660                          1979  PRINT_OP_BRA:
00002660  21FC 00002882 1256      1980      MOVE.L #P_OP_BRA, Arg_AddStrToBuffer_String
00002668  4EB8 24EA               1981      JSR PRINT_TO_BUFFER
0000266C  4EB9 000027AA           1982      JSR PRINT_OP_SIZE
00002672  4E75                    1983      RTS
00002674                          1984  
00002674                          1985  
00002674                          1986  PRINT_OP_DIVS:
00002674  21FC 000028A5 1256      1987      MOVE.L #P_OP_DIVS, Arg_AddStrToBuffer_String
0000267C  4EB8 24EA               1988      JSR PRINT_TO_BUFFER
00002680  4E75                    1989      RTS
00002682                          1990  PRINT_OP_OR:
00002682  21FC 000028B0 1256      1991      MOVE.L #P_OP_OR, Arg_AddStrToBuffer_String
0000268A  4EB8 24EA               1992      JSR PRINT_TO_BUFFER
0000268E  4EB9 000027AA           1993      JSR PRINT_OP_SIZE
00002694  4E75                    1994      RTS
00002696                          1995  
00002696                          1996  PRINT_OP_SUB:
00002696  21FC 000028B6 1256      1997      MOVE.L #P_OP_SUB, Arg_AddStrToBuffer_String
0000269E  4EB8 24EA               1998      JSR PRINT_TO_BUFFER
000026A2  4EB9 000027AA           1999      JSR PRINT_OP_SIZE
000026A8  4E75                    2000      RTS
000026AA                          2001  
000026AA                          2002  
000026AA                          2003  PRINT_OP_EOR:
000026AA  21FC 000028BD 1256      2004      MOVE.L #P_OP_EOR, Arg_AddStrToBuffer_String
000026B2  4EB8 24EA               2005      JSR PRINT_TO_BUFFER
000026B6  4EB9 000027AA           2006      JSR PRINT_OP_SIZE
000026BC  4E75                    2007      RTS
000026BE                          2008  PRINT_OP_CMP:
000026BE  21FC 000028C4 1256      2009      MOVE.L #P_OP_CMP, Arg_AddStrToBuffer_String
000026C6  4EB8 24EA               2010      JSR PRINT_TO_BUFFER
000026CA  4EB9 000027AA           2011      JSR PRINT_OP_SIZE
000026D0  4E75                    2012      RTS
000026D2                          2013  
000026D2                          2014  PRINT_OP_MULS:
000026D2  21FC 000028CB 1256      2015      MOVE.L #P_OP_MULS, Arg_AddStrToBuffer_String
000026DA  4EB8 24EA               2016      JSR PRINT_TO_BUFFER
000026DE  4E75                    2017      RTS
000026E0                          2018  
000026E0                          2019  PRINT_OP_ADD:
000026E0  21FC 000028DE 1256      2020      MOVE.L #P_OP_ADD, Arg_AddStrToBuffer_String
000026E8  4EB8 24EA               2021      JSR PRINT_TO_BUFFER
000026EC  4EB9 000027AA           2022      JSR PRINT_OP_SIZE
000026F2  4E75                    2023      RTS
000026F4                          2024  PRINT_OP_ADDA:
000026F4  21FC 000028D6 1256      2025      MOVE.L #P_OP_ADDA, Arg_AddStrToBuffer_String
000026FC  4EB8 24EA               2026      JSR PRINT_TO_BUFFER
00002700  4EB9 000027C4           2027      JSR PRINT_OP_SIZE_ADDA
00002706  4E75                    2028      RTS
00002708                          2029  
00002708                          2030  
00002708                          2031  PRINT_OP_LSL:
00002708  21FC 000028EC 1256      2032      MOVE.L #P_OP_LSL, Arg_AddStrToBuffer_String
00002710  4EB8 24EA               2033      JSR PRINT_TO_BUFFER
00002714  4EB9 000027AA           2034      JSR PRINT_OP_SIZE
0000271A  4E75                    2035      RTS
0000271C                          2036  PRINT_OP_LSR:
0000271C  21FC 000028E5 1256      2037      MOVE.L #P_OP_LSR, Arg_AddStrToBuffer_String
00002724  4EB8 24EA               2038      JSR PRINT_TO_BUFFER
00002728  4EB9 000027AA           2039      JSR PRINT_OP_SIZE
0000272E  4E75                    2040      RTS
00002730                          2041  PRINT_OP_ASR:
00002730  21FC 000028F3 1256      2042      MOVE.L #P_OP_ASR, Arg_AddStrToBuffer_String
00002738  4EB8 24EA               2043      JSR PRINT_TO_BUFFER
0000273C  4EB9 000027AA           2044      JSR PRINT_OP_SIZE
00002742  4E75                    2045      RTS
00002744                          2046  PRINT_OP_ASL:
00002744  21FC 000028FA 1256      2047      MOVE.L #P_OP_ASL, Arg_AddStrToBuffer_String
0000274C  4EB8 24EA               2048      JSR PRINT_TO_BUFFER
00002750  4EB9 000027AA           2049      JSR PRINT_OP_SIZE
00002756  4E75                    2050      RTS
00002758                          2051  PRINT_OP_ROL:
00002758  21FC 00002908 1256      2052      MOVE.L #P_OP_ROL, Arg_AddStrToBuffer_String
00002760  4EB8 24EA               2053      JSR PRINT_TO_BUFFER
00002764  4EB9 000027AA           2054      JSR PRINT_OP_SIZE
0000276A  4E75                    2055      RTS
0000276C                          2056  PRINT_OP_ROR:
0000276C  21FC 00002901 1256      2057      MOVE.L #P_OP_ROR, Arg_AddStrToBuffer_String
00002774  4EB8 24EA               2058      JSR PRINT_TO_BUFFER
00002778  4EB9 000027AA           2059      JSR PRINT_OP_SIZE
0000277E  4E75                    2060      RTS
00002780                          2061  
00002780                          2062  
00002780                          2063  PRINT_SIZE_BYTE:
00002780  21FC 000027E3 1256      2064      MOVE.L #P_SIZE_B, Arg_AddStrToBuffer_String
00002788  4EB8 24EA               2065      JSR PRINT_TO_BUFFER
0000278C  4E75                    2066      RTS    
0000278E                          2067  
0000278E                          2068  PRINT_SIZE_WORD:
0000278E  21FC 000027E7 1256      2069      MOVE.L #P_SIZE_W, Arg_AddStrToBuffer_String
00002796  4EB8 24EA               2070      JSR PRINT_TO_BUFFER
0000279A  4E75                    2071      RTS
0000279C                          2072      
0000279C                          2073  PRINT_SIZE_LONG:
0000279C  21FC 000027EB 1256      2074      MOVE.L #P_SIZE_L, Arg_AddStrToBuffer_String
000027A4  4EB8 24EA               2075      JSR PRINT_TO_BUFFER
000027A8  4E75                    2076      RTS
000027AA                          2077  
000027AA                          2078  PRINT_OP_SIZE:                     ;Prints current OP code byte size if applicable
000027AA  0C38 0000 1778          2079      CMP.B  #%00,OP_SIZE         ;Checks for byte size
000027B0  67CE                    2080      BEQ    PRINT_SIZE_BYTE      ;Print .B to buffer
000027B2  0C38 0001 1778          2081      CMP.B  #%01,OP_SIZE         ;Check for word size
000027B8  67D4                    2082      BEQ    PRINT_SIZE_WORD      ;Print .W to buffer
000027BA  0C38 0002 1778          2083      CMP.B  #%10,OP_SIZE         ;Check for long size
000027C0  67DA                    2084      BEQ    PRINT_SIZE_LONG      ;Print .L to buffer
000027C2  4E75                    2085      RTS
000027C4                          2086      
000027C4                          2087  PRINT_OP_SIZE_ADDA:                  ;Special  print for ADDA
000027C4  0C38 0000 1778          2088      CMP.B #%0,OP_SIZE
000027CA  67C2                    2089      BEQ    PRINT_SIZE_WORD
000027CC  66CE                    2090      BNE    PRINT_SIZE_LONG
000027CE                          2091      
000027CE                          2092  
000027CE                          2093  
000027CE                          2094  
000027CE                          2095  
000027CE= 20 20 20 44 41 54 ...   2096  P_INVALID_OP    DC.B    '   DATA   $',0
000027DA= 46 6F 75 6E 64 20 ...   2097  OP_FOUND        DC.B    'Found OP',0 ; this should be taken out later
000027E3= 2E 42 20 00             2098  P_SIZE_B        DC.B    '.B ',0
000027E7= 2E 57 20 00             2099  P_SIZE_W        DC.B    '.W ',0
000027EB= 2E 4C 20 00             2100  P_SIZE_L        DC.B    '.L ',0
000027EF= 20 20 20 4F 52 49 00    2101  P_OP_ORI        DC.B    '   ORI',0
000027F6= 20 20 20 43 4D 50 ...   2102  P_OP_CMPI       DC.B    '   CMPI',0
000027FE= 20 20 20 42 43 4C ...   2103  P_OP_BCLR       DC.B    '   BCLR',0
00002806= 20 20 20 4D 4F 56 ...   2104  P_OP_MOVEB      DC.B    '   MOVE.B ',0
00002811= 20 20 20 4D 4F 56 ...   2105  P_OP_MOVEA_L    DC.B    '   MOVEA.L ',0 
0000281D= 20 20 20 4D 4F 56 ...   2106  P_OP_MOVE_L     DC.B    '   MOVE.L ',0
00002828= 20 20 20 4D 4F 56 ...   2107  P_OP_MOVEA_W    DC.B    '   MOVEA.W ',0
00002834= 20 20 20 4D 4F 56 ...   2108  P_OP_MOVE_W     DC.B    '   MOVE.W ',0
0000283F= 20 20 20 4D 4F 56 ...   2109  P_OP_MOVEM_W    DC.B    '   MOVEM.W ',0
0000284B= 20 20 20 4D 4F 56 ...   2110  P_OP_MOVEM_L    DC.B    '   MOVEM.L ',0
00002857= 20 20 20 4C 45 41 00    2111  P_OP_LEA        DC.B    '   LEA',0
0000285E= 20 20 20 4A 53 52 00    2112  P_OP_JSR        DC.B    '   JSR',0
00002865= 20 20 20 4E 4F 50 00    2113  P_OP_NOP        DC.B    '   NOP',0
0000286C= 20 20 20 52 54 53 00    2114  P_OP_RTS        DC.B    '   RTS',0
00002873= 20 20 20 4E 45 47 00    2115  P_OP_NEG        DC.B    '   NEG',0
0000287A= 20 20 20 53 55 42 ...   2116  P_OP_SUBQ       DC.B    '   SUBQ',0
00002882= 20 20 20 42 52 41 00    2117  P_OP_BRA        DC.B    '   BRA',0
00002889= 20 20 20 42 43 53 00    2118  P_OP_BCS        DC.B    '   BCS',0
00002890= 20 20 20 42 47 45 00    2119  P_OP_BGE        DC.B    '   BGE',0
00002897= 20 20 20 42 4C 54 00    2120  P_OP_BLT        DC.B    '   BLT',0
0000289E= 20 20 20 42 56 43 00    2121  P_OP_BVC        DC.B    '   BVC',0
000028A5= 20 20 20 44 49 56 ...   2122  P_OP_DIVS       DC.B    '   DIVS.W ',0
000028B0= 20 20 20 4F 52 00       2123  P_OP_OR         DC.B    '   OR',0
000028B6= 20 20 20 53 55 42 00    2124  P_OP_SUB        DC.B    '   SUB',0
000028BD= 20 20 20 45 4F 52 00    2125  P_OP_EOR        DC.B    '   EOR',0
000028C4= 20 20 20 43 4D 50 00    2126  P_OP_CMP        DC.B    '   CMP',0
000028CB= 20 20 20 4D 55 4C ...   2127  P_OP_MULS       DC.B    '   MULS.W ',0
000028D6= 20 20 20 41 44 44 ...   2128  P_OP_ADDA       DC.B    '   ADDA',0
000028DE= 20 20 20 41 44 44 00    2129  P_OP_ADD        DC.B    '   ADD',0
000028E5= 20 20 20 4C 53 52 00    2130  P_OP_LSR        DC.B    '   LSR',0
000028EC= 20 20 20 4C 53 4C 00    2131  P_OP_LSL        DC.B    '   LSL',0
000028F3= 20 20 20 41 53 52 00    2132  P_OP_ASR        DC.B    '   ASR',0
000028FA= 20 20 20 41 53 4C 00    2133  P_OP_ASL        DC.B    '   ASL',0
00002901= 20 20 20 52 4F 52 00    2134  P_OP_ROR        DC.B    '   ROR',0
00002908= 20 20 20 52 4F 4C 00    2135  P_OP_ROL        DC.B    '   ROL',0
0000290F                          2136   
0000290F                          2137  
0000290F                          2138  
0000290F                          2139  
0000290F                          2140  
0000290F                          2141  
0000290F                          2142  
0000290F                          2143  
0000290F                          2144  
0000290F                          2145  
0000290F                          2146  
0000290F                          2147  
0000290F                          2148  
0000290F                          2149  -------------------- end include --------------------
0000290F                          2150      INCLUDE "EA_Integrated.x68"
0000290F                          2151  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000290F                          2152  
0000290F                          2153  
0000290F= 41                      2154  ADDRESS         DC.B    $41
00002910= 44                      2155  DATA            DC.B    $44
00002911                          2156  
00002911= 28                      2157  PTHSIS_OPEN     DC.B    $28
00002912= 29                      2158  PTHSIS_CLSD     DC.B    $29
00002913= 24                      2159  HEX_SIGN        DC.B    $24
00002914= 23                      2160  IMMDTE_VALU     DC.B    $23
00002915= 2B                      2161  PLUS_SIGN       DC.B    $2B
00002916= 2D                      2162  MINUS_SIGN      DC.B    $2D
00002917                          2163  
00002917= 2C                      2164  COMMA           DC.B    $2C
00002918= 20                      2165  SPACE           DC.B    $20
00002919                          2166  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00002919                          2167  
00002919                          2168  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
0000291A                          2169  TRAILING_SIZE   DS.W    1 * Size of any immediate or
0000291C                          2170                            * address values. Immediate or address
0000291C                          2171                            * value of a BYTE is still processed as
0000291C                          2172                            * WORD because the trailing bytes
0000291C                          2173                            * are represented as a word regardless.
0000291C                          2174                            * $1 = BYTE, $2 = WORD, $4 = LONG
0000291C                          2175  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000291C                          2176   
0000291C                          2177  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
0000291C                          2178  
0000291C                          2179  main_EA:
0000291C  4EB8 1978               2180      JSR PARSE_EA_CONSTANT_BITS    
00002920                          2181  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00002920                          2182  
00002920                          2183  
00002920                          2184  
00002920                          2185  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      
00002920                          2186  
00002920  4EB9 0000292A           2187      JSR     CHECK_XXXX
00002926                          2188  EXT                        * Main EXT alias to finish routine
00002926  4EF8 11C2               2189      JMP check_print 
0000292A                          2190  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000292A                          2191  
0000292A                          2192  CHECK_XXXX:
0000292A  0C38 0008 1779          2193      CMPI.B  #$8, MNEMONIC
00002930  6D00 0008               2194      BLT     CHECK_0XXX
00002934  4EF9 0000294A           2195      JMP     CHECK_1XXX
0000293A                          2196  
0000293A                          2197  CHECK_0XXX:
0000293A  0C38 0004 1779          2198      CMPI.B  #$4, MNEMONIC
00002940  6D00 004C               2199      BLT     CHECK_00XX
00002944  4EF9 0000299C           2200      JMP     CHECK_01XX
0000294A                          2201  
0000294A                          2202  CHECK_1XXX:
0000294A  0C38 0008 1779          2203      CMPI.B  #$8, MNEMONIC
00002950  6700 0308               2204      BEQ     LOAD_1000
00002954  0C38 0009 1779          2205      CMPI.B  #$9, MNEMONIC
0000295A  6700 02F8               2206      BEQ     LOAD_1001
0000295E  0C38 000B 1779          2207      CMPI.B  #$B, MNEMONIC
00002964  6700 02E8               2208      BEQ     LOAD_1011
00002968  0C38 000C 1779          2209      CMPI.B  #$C, MNEMONIC
0000296E  6700 02D8               2210      BEQ     LOAD_1100
00002972  0C38 000D 1779          2211      CMPI.B  #$D, MNEMONIC
00002978  6700 026C               2212      BEQ     LOAD_1101
0000297C  0C38 000E 1779          2213      CMPI.B  #$E, MNEMONIC
00002982  6700 0038               2214      BEQ     LOAD_1110
00002986                          2215      
00002986  4EF9 0000336A           2216      JMP     INVALID
0000298C                          2217      
0000298C  4E75                    2218      RTS
0000298E                          2219  
0000298E                          2220  CHECK_00XX:
0000298E  0C38 0001 1779          2221      CMPI.B  #$1, MNEMONIC
00002994  6D00 05D6               2222      BLT     LOAD_0000
00002998  6C00 0758               2223      BGE     LOAD_00XX
0000299C                          2224  
0000299C                          2225  CHECK_01XX:
0000299C  0C38 0004 1779          2226      CMPI.B  #%0100, MNEMONIC
000029A2  6700 0458               2227      BEQ     LOAD_0100
000029A6  0C38 0005 1779          2228      CMPI.B  #%0101, MNEMONIC
000029AC  6700 03C4               2229      BEQ     LOAD_0101
000029B0  0C38 0006 1779          2230      CMPI.B  #%0110, MNEMONIC
000029B6  6700 0124               2231      BEQ     LOAD_0110
000029BA  4E75                    2232      RTS
000029BC                          2233  
000029BC                          2234  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000029BC                          2235  
000029BC                          2236  
000029BC                          2237  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000029BC                          2238  
000029BC                          2239  LOAD_1110:
000029BC  247C 00000000           2240              MOVEA.L #0, A2
000029C2  267C 00000000           2241              MOVEA.L #0, A3
000029C8  4285                    2242              CLR.L   D5
000029CA                          2243      
000029CA  1A38 177B               2244              MOVE.B  SECOND_3, D5
000029CE  0205 0003               2245              ANDI.B  #%011, D5
000029D2                          2246      
000029D2  0C05 0003               2247              CMPI.B  #%11, D5
000029D6  6700 0006               2248              BEQ     MYBE_ASd_1
000029DA  6600 0068               2249              BNE     MYBE_ASd_2
000029DE                          2250  
000029DE  0C38 0000 177A          2251  MYBE_ASd_1  CMPI.B  #%000, FIRST_3
000029E4  6700 001C               2252              BEQ     ASd_1
000029E8  0C38 0001 177A          2253              CMPI.B  #%001, FIRST_3
000029EE  6700 0012               2254              BEQ     ASd_1 * LSd
000029F2  0C38 0003 177A          2255              CMPI.B  #%011, FIRST_3
000029F8  6700 0008               2256              BEQ     ASd_1 * ROd
000029FC  4EF9 0000336A           2257              JMP     INVALID
00002A02                          2258  
00002A02  0C38 0007 177C          2259  ASd_1       CMPI.B  #%111, THIRD_3
00002A08  6600 000C               2260              BNE     MOVEON  
00002A0C  0C38 0004 177D          2261              CMPI.B  #%100, FOURTH_3
00002A12  6700 0956               2262              BEQ     INVALID
00002A16                          2263  
00002A16  367C 2A2E               2264  MOVEON      MOVEA.W #ASd_1_BACK, A3           
00002A1A  0C38 0000 177D          2265              CMPI.B  #%000, FOURTH_3
00002A20  6700 07E0               2266              BEQ     SIZE_W
00002A24  0C38 0001 177D          2267              CMPI.B  #%001, FOURTH_3
00002A2A  6700 07DE               2268              BEQ     SIZE_L
00002A2E                          2269  
00002A2E  1638 177C               2270  ASd_1_BACK  MOVE.B  THIRD_3, D3
00002A32  1438 177D               2271              MOVE.B  FOURTH_3, D2
00002A36                          2272              
00002A36  4EB9 00003156           2273              JSR     LOAD_EA
00002A3C  4EB9 000032B8           2274              JSR     LOAD_NEW_LINE
00002A42  4E75                    2275              RTS
00002A44                          2276  
00002A44  4285                    2277  MYBE_ASd_2  CLR.L   D5
00002A46                          2278  
00002A46  1A38 177C               2279              MOVE.B  THIRD_3, D5
00002A4A  0205 0003               2280              ANDI.B  #%011, D5
00002A4E  0C05 0002               2281              CMPI.B  #%10, D5
00002A52  6600 0006               2282              BNE     ASd_2 * or LSd or ROd
00002A56  6700 0912               2283              BEQ     INVALID
00002A5A                          2284              
00002A5A  4285                    2285  ASd_2       CLR.L   D5
00002A5C                          2286  
00002A5C  1A38 177C               2287              MOVE.B  THIRD_3, D5
00002A60  0205 0004               2288              ANDI.B  #%100, D5
00002A64  0C05 0004               2289              CMPI.B  #%100, D5
00002A68  6700 0048               2290              BEQ     ASd_2_REG
00002A6C  6600 0002               2291              BNE     ASd_2_IMD
00002A70                          2292              
00002A70  347C 2A96               2293  ASd_2_IMD   MOVEA.W #ASd_2_IMD_B, A2
00002A74  0C38 0000 177A          2294              CMPI.B  #%000, FIRST_3
00002A7A  6700 0006               2295              BEQ     LOAD_8
00002A7E  6600 000C               2296              BNE     LOAD_FIRST3
00002A82                          2297              
00002A82  183C 0008               2298  LOAD_8      MOVE.B  #8, D4
00002A86  4EF9 00003284           2299              JMP     LOAD_IMMDTE
00002A8C                          2300  
00002A8C  1838 177A               2301  LOAD_FIRST3 MOVE.B  FIRST_3, D4
00002A90  4EF9 00003284           2302              JMP     LOAD_IMMDTE
00002A96                          2303  
00002A96  4EB9 000032BA           2304  ASd_2_IMD_B JSR     LOAD_COMMA_SPACE
00002A9C                          2305  
00002A9C  163C 0000               2306              MOVE.B  #%000, D3
00002AA0  1438 177D               2307              MOVE.B  FOURTH_3, D2
00002AA4                          2308              
00002AA4  4EB9 00003156           2309              JSR     LOAD_EA
00002AAA  4EB9 000032B8           2310              JSR     LOAD_NEW_LINE
00002AB0  4E75                    2311              RTS
00002AB2                          2312  
00002AB2  163C 0000               2313  ASd_2_REG   MOVE.B  #%000, D3
00002AB6  1438 177A               2314              MOVE.B  FIRST_3, D2
00002ABA                          2315              
00002ABA  4EB9 00003156           2316              JSR     LOAD_EA
00002AC0  4EB9 000032BA           2317              JSR     LOAD_COMMA_SPACE
00002AC6                          2318              
00002AC6  163C 0000               2319              MOVE.B  #%000, D3
00002ACA  1438 177D               2320              MOVE.B  FOURTH_3, D2
00002ACE                          2321              
00002ACE  4EB9 00003156           2322              JSR     LOAD_EA
00002AD4  4EB9 000032B8           2323              JSR     LOAD_NEW_LINE
00002ADA  4E75                    2324              RTS
00002ADC                          2325  
00002ADC                          2326  
00002ADC                          2327  
00002ADC                          2328  LOAD_0110:
00002ADC  247C 00000000           2329              MOVEA.L #0, A2
00002AE2  267C 00000000           2330              MOVEA.L #0, A3
00002AE8  4285                    2331              CLR.L   D5
00002AEA  4286                    2332              CLR.L   D6
00002AEC  4284                    2333              CLR.L   D4
00002AEE                          2334  
00002AEE  0C38 0000 177A          2335              CMPI.B  #%000, FIRST_3
00002AF4  6700 0006               2336              BEQ     MYBE_BRA
00002AF8  6600 0010               2337              BNE     NOT_BRA
00002AFC  0C38 0004 177B          2338  MYBE_BRA    CMPI.B  #%100, SECOND_3
00002B02  6D00 003A               2339              BLT     BRA
00002B06  6C00 0002               2340              BGE     NOT_BRA
00002B0A                          2341              
00002B0A  1A38 177A               2342  NOT_BRA     MOVE.B  FIRST_3, D5
00002B0E  E305                    2343              ASL.B   #1, D5
00002B10  1C38 177B               2344              MOVE.B  SECOND_3, D6
00002B14  E406                    2345              ASR.B   #2, D6
00002B16  DA06                    2346              ADD.B   D6, D5
00002B18                          2347              
00002B18  0C05 0005               2348              CMPI.B  #%0101, D5
00002B1C  6700 0020               2349              BEQ     BRA * CS
00002B20  0C05 0008               2350              CMPI.B  #%1000, D5
00002B24  6700 0018               2351              BEQ     BRA * VC
00002B28  0C05 000C               2352              CMPI.B  #%1100, D5
00002B2C  6700 0010               2353              BEQ     BRA * GE
00002B30  0C05 000D               2354              CMPI.B  #%1101, D5
00002B34  6700 0008               2355              BEQ     BRA * LT
00002B38                          2356              
00002B38  4EF9 0000336A           2357              JMP     INVALID
00002B3E                          2358              
00002B3E                          2359              
00002B3E  4285                    2360  BRA         CLR.L   D5
00002B40  4286                    2361              CLR.L   D6
00002B42                          2362  
00002B42  3A0D                    2363              MOVE.W  A5, D5 * D5 has $1002 (Starting + MNEMONICS)
00002B44  3C38 10A0               2364              MOVE.W  CUR_OP_CODE, D6
00002B48  0246 00FF               2365              ANDI.W  #$00FF, D6 * D6 now has $E
00002B4C  0C06 0000               2366              CMPI.B  #$00, D6
00002B50  6700 0052               2367              BEQ     BRA_WORD * word. there is 4 hex trailing bits (word)
00002B54                          2368  
00002B54  0C06 00FF               2369              CMPI.B  #$FF, D6
00002B58  6700 0010               2370              BEQ     BRA_BYTE
00002B5C  0C06 00FE               2371              CMPI.B  #$FE, D6
00002B60  6700 0008               2372              BEQ     BRA_BYTE
00002B64                          2373  
00002B64  4EF9 0000336A           2374              JMP     INVALID
00002B6A                          2375              
00002B6A  0C06 00FE               2376  BRA_BYTE    CMPI.B  #$FE, D6
00002B6E  6700 0010               2377              BEQ     DOWN_ZERO
00002B72  0C06 00FF               2378              CMPI.B  #$FF, D6
00002B76  6700 0010               2379              BEQ     DOWN_ONE
00002B7A                          2380              
00002B7A  4EF9 0000336A           2381              JMP     INVALID
00002B80                          2382              
00002B80  5505                    2383  DOWN_ZERO   SUBI.B  #$2, D5 * D5 has $1000 (Starting)
00002B82  4EF9 00002B90           2384              JMP     BRA_BYTE2
00002B88                          2385              
00002B88  5305                    2386  DOWN_ONE    SUBI.B  #$1, D5 * D5 has $1001 (Starting + 1)
00002B8A  4EF9 00002B90           2387              JMP     BRA_BYTE2
00002B90                          2388              
00002B90  347C 2B9C               2389  BRA_BYTE2   MOVE.W  #BRA_BYTE3, A2
00002B94  3805                    2390              MOVE.W  D5, D4
00002B96  4EF9 00003260           2391              JMP     LOAD_ABS_SHORT
00002B9C  4EB9 000032B8           2392  BRA_BYTE3   JSR     LOAD_NEW_LINE
00002BA2  4E75                    2393              RTS
00002BA4                          2394  
00002BA4  381D                    2395  BRA_WORD    MOVE.W  (A5)+, D4 * D4 now has $000E
00002BA6                          2396  
00002BA6  0C84 00008000           2397              CMPI.L  #$8000, D4
00002BAC  6C00 001A               2398              BGE     NEG_WORD
00002BB0  6D00 0002               2399              BLT     POS_WORD
00002BB4                          2400              
00002BB4  347C 2BC0               2401  POS_WORD    MOVE.W  #BRA_WORD_BK, A2
00002BB8  D845                    2402              ADD.W   D5, D4 * D4 now has $100E
00002BBA  4EF9 00003260           2403              JMP     LOAD_ABS_SHORT
00002BC0  4EB9 000032B8           2404  BRA_WORD_BK JSR     LOAD_NEW_LINE
00002BC6  4E75                    2405              RTS
00002BC8                          2406  
00002BC8  347C 2BDE               2407  NEG_WORD    MOVE.W  #BRA_WRD_BK2, A2
00002BCC  4444                    2408              NEG     D4
00002BCE                          2409              
00002BCE  B885                    2410              CMP.L   D5, D4 * $4002 vs DISPLACEMENT
00002BD0  6E00 0798               2411              BGT     INVALID
00002BD4                          2412              
00002BD4  9A44                    2413              SUB.W   D4, D5 * D5 now has $1000 - 2cmp'ed $000E
00002BD6  3805                    2414              MOVE.W  D5, D4
00002BD8  4EF9 00003260           2415              JMP     LOAD_ABS_SHORT
00002BDE  4EB9 000032B8           2416  BRA_WRD_BK2 JSR     LOAD_NEW_LINE
00002BE4  4E75                    2417              RTS
00002BE6                          2418  
00002BE6                          2419  
00002BE6                          2420  
00002BE6                          2421  LOAD_1101:
00002BE6  0C38 0003 177B          2422              CMPI.B  #%011, SECOND_3
00002BEC  6700 0012               2423              BEQ     ADDA
00002BF0  0C38 0007 177B          2424              CMPI.B  #%111, SECOND_3
00002BF6  6700 0008               2425              BEQ     ADDA
00002BFA                          2426              
00002BFA  4EF9 00002C5A           2427              JMP     LOAD_1000
00002C00                          2428              
00002C00  367C 2C1E               2429  ADDA        MOVEA.W #ADDA_BACK, A3
00002C04  4281                    2430              CLR.L   D1
00002C06  1238 177B               2431              MOVE.B  SECOND_3, D1
00002C0A  0201 0004               2432              ANDI.B  #%100, D1
00002C0E                          2433              
00002C0E  0C01 0000               2434              CMPI.B  #%000, D1
00002C12  6700 05EE               2435              BEQ     SIZE_W
00002C16  0C01 0004               2436              CMPI.B  #%100, D1
00002C1A  6700 05EE               2437              BEQ     SIZE_L
00002C1E                          2438              
00002C1E  1638 177C               2439  ADDA_BACK   MOVE.B  THIRD_3, D3
00002C22  1438 177D               2440              MOVE.B  FOURTH_3, D2
00002C26                          2441  
00002C26  4EB9 00003156           2442              JSR     LOAD_EA
00002C2C  4EB9 000032BA           2443              JSR     LOAD_COMMA_SPACE
00002C32                          2444              
00002C32  163C 0001               2445              MOVE.B  #%001, D3
00002C36  1438 177A               2446              MOVE.B  FIRST_3, D2
00002C3A                          2447              
00002C3A  4EB9 00003156           2448              JSR     LOAD_EA
00002C40  4EB9 000032B8           2449              JSR     LOAD_NEW_LINE
00002C46  4E75                    2450              RTS
00002C48                          2451  
00002C48                          2452  LOAD_1100:
00002C48  4EF9 00002C5A           2453      JMP     LOAD_1000
00002C4E                          2454      
00002C4E                          2455  LOAD_1011:
00002C4E  4EF9 00002C5A           2456      JMP     LOAD_1000
00002C54                          2457  
00002C54                          2458  
00002C54                          2459  LOAD_1001:
00002C54  4EF9 00002C5A           2460      JMP     LOAD_1000
00002C5A                          2461  
00002C5A                          2462  
00002C5A                          2463  LOAD_1000:
00002C5A  4283                    2464              CLR.L   D3
00002C5C  4282                    2465              CLR.L   D2
00002C5E  267C 00000000           2466              MOVEA.L #0, A3
00002C64                          2467              
00002C64  0C38 0007 177B          2468              CMPI.B  #%111, SECOND_3
00002C6A  6700 00BA               2469              BEQ     DIVS
00002C6E                          2470              
00002C6E  0C38 0003 177B          2471              CMPI.B  #%011, SECOND_3
00002C74  6700 06F4               2472              BEQ     INVALID
00002C78                          2473              
00002C78  0C38 0004 177B          2474              CMPI.B  #%100, SECOND_3
00002C7E  6D00 0006               2475              BLT     DIR_0 * direction bit 0
00002C82  6C00 0052               2476              BGE     DIR_1 * direction bit 1
00002C86                          2477              
00002C86  4281                    2478  DIR_0       CLR.L   D1
00002C88  1238 177B               2479              MOVE.B  SECOND_3, D1
00002C8C  0201 0003               2480              ANDI.B  #%011, D1
00002C90                          2481      
00002C90  367C 2CAC               2482              MOVEA.W #OR_BACK, A3
00002C94  0C01 0000               2483              CMPI.B  #%00, D1
00002C98  6700 0560               2484              BEQ     SIZE_B
00002C9C  0C01 0001               2485              CMPI.B  #%01, D1
00002CA0  6700 0560               2486              BEQ     SIZE_W
00002CA4  0C01 0002               2487              CMPI.B  #%10, D1
00002CA8  6700 0560               2488              BEQ     SIZE_L
00002CAC                          2489              
00002CAC  1638 177C               2490  OR_BACK     MOVE.B  THIRD_3, D3
00002CB0  1438 177D               2491              MOVE.B  FOURTH_3, D2
00002CB4                          2492  
00002CB4  4EB9 00003156           2493              JSR     LOAD_EA
00002CBA  4EB9 000032BA           2494              JSR     LOAD_COMMA_SPACE
00002CC0                          2495              
00002CC0  163C 0000               2496              MOVE.B  #%000, D3
00002CC4  1438 177A               2497              MOVE.B  FIRST_3, D2
00002CC8                          2498              
00002CC8  4EB9 00003156           2499              JSR     LOAD_EA
00002CCE  4EB9 000032B8           2500              JSR     LOAD_NEW_LINE
00002CD4  4E75                    2501              RTS
00002CD6                          2502              
00002CD6  163C 0000               2503  DIR_1       MOVE.B  #%000, D3
00002CDA  1438 177A               2504              MOVE.B  FIRST_3, D2
00002CDE                          2505              
00002CDE  4EB9 00003156           2506              JSR     LOAD_EA
00002CE4  4EB9 000032BA           2507              JSR     LOAD_COMMA_SPACE
00002CEA                          2508              
00002CEA  4281                    2509              CLR.L   D1
00002CEC  1238 177B               2510              MOVE.B  SECOND_3, D1
00002CF0  0201 0003               2511              ANDI.B  #%011, D1
00002CF4                          2512      
00002CF4  367C 2D10               2513              MOVEA.W #OR_BACK2, A3
00002CF8  0C01 0000               2514              CMPI.B  #%00, D1
00002CFC  6700 04FC               2515              BEQ     SIZE_B
00002D00  0C01 0001               2516              CMPI.B  #%01, D1
00002D04  6700 04FC               2517              BEQ     SIZE_W
00002D08  0C01 0002               2518              CMPI.B  #%10, D1
00002D0C  6700 04FC               2519              BEQ     SIZE_L
00002D10                          2520              
00002D10  1638 177C               2521  OR_BACK2    MOVE.B  THIRD_3, D3
00002D14  1438 177D               2522              MOVE.B  FOURTH_3, D2
00002D18                          2523  
00002D18  4EB9 00003156           2524              JSR     LOAD_EA
00002D1E  4EB9 000032B8           2525              JSR     LOAD_NEW_LINE
00002D24  4E75                    2526              RTS    
00002D26                          2527              
00002D26  367C 2D48               2528  DIVS        MOVEA.W #DIVS_BACK, A3
00002D2A  0C38 0000 177D          2529              CMPI.B  #%000, FOURTH_3
00002D30  6700 04D0               2530              BEQ     SIZE_W
00002D34  0C38 0001 177D          2531              CMPI.B  #%001, FOURTH_3
00002D3A  6700 062E               2532              BEQ     INVALID
00002D3E  0C38 0004 177D          2533              CMPI.B  #%100, FOURTH_3
00002D44  6700 04BC               2534              BEQ     SIZE_W
00002D48                          2535              
00002D48  1638 177C               2536  DIVS_BACK   MOVE.B  THIRD_3, D3
00002D4C  1438 177D               2537              MOVE.B  FOURTH_3, D2
00002D50                          2538  
00002D50  4EB9 00003156           2539              JSR     LOAD_EA
00002D56  4EB9 000032BA           2540              JSR     LOAD_COMMA_SPACE
00002D5C                          2541  
00002D5C  163C 0000               2542              MOVE.B  #%000, D3
00002D60  1438 177A               2543              MOVE.B  FIRST_3, D2
00002D64                          2544  
00002D64  4EB9 00003156           2545              JSR     LOAD_EA
00002D6A  4EB9 000032B8           2546              JSR     LOAD_NEW_LINE
00002D70  4E75                    2547              RTS
00002D72                          2548  
00002D72                          2549  
00002D72                          2550  LOAD_0101:
00002D72  4283                    2551              CLR.L   D3
00002D74  4282                    2552              CLR.L   D2
00002D76  267C 00000000           2553              MOVEA.L #0, A3
00002D7C                          2554  
00002D7C  0C38 0007 177A          2555              CMPI.B  #%111, FIRST_3
00002D82  6F00 0008               2556              BLE     MYBE_SUBQ1
00002D86  4EF9 0000336A           2557              JMP     INVALID
00002D8C                          2558              
00002D8C  0C38 0003 177B          2559  MYBE_SUBQ1  CMPI.B  #%011, SECOND_3
00002D92  6E00 0008               2560              BGT     MYBE_SUBQ2
00002D96  4EF9 0000336A           2561              JMP     INVALID
00002D9C                          2562  
00002D9C  0C38 0007 177B          2563  MYBE_SUBQ2  CMPI.B  #%111, SECOND_3
00002DA2  6D00 0008               2564              BLT     SUBQ
00002DA6  4EF9 0000336A           2565              JMP     INVALID
00002DAC                          2566  
00002DAC  5238 177A               2567  SUBQ        ADDI.B  #%1, FIRST_3
00002DB0  1838 177A               2568              MOVE.B  FIRST_3, D4
00002DB4                          2569              
00002DB4  347C 2DBE               2570              MOVEA.W #SUBQ_SAVED, A2
00002DB8  4EF9 00003284           2571              JMP     LOAD_IMMDTE
00002DBE                          2572              
00002DBE  4EB9 000032BA           2573  SUBQ_SAVED  JSR     LOAD_COMMA_SPACE
00002DC4                          2574  
00002DC4  367C 2DE6               2575              MOVEA.W #SUBQ_BACK, A3
00002DC8  0C38 0004 177B          2576              CMPI.B  #%100, SECOND_3
00002DCE  6700 042A               2577              BEQ     SIZE_B
00002DD2  0C38 0005 177B          2578              CMPI.B  #%101, SECOND_3
00002DD8  6700 0428               2579              BEQ     SIZE_W
00002DDC  0C38 0006 177B          2580              CMPI.B  #%110, SECOND_3
00002DE2  6700 0426               2581              BEQ     SIZE_L
00002DE6                          2582              
00002DE6  1638 177C               2583  SUBQ_BACK   MOVE.B  THIRD_3, D3
00002DEA  1438 177D               2584              MOVE.B  FOURTH_3, D2
00002DEE                          2585  
00002DEE  4EB9 00003156           2586              JSR     LOAD_EA
00002DF4  4EB9 000032B8           2587              JSR     LOAD_NEW_LINE
00002DFA  4E75                    2588              RTS
00002DFC                          2589  
00002DFC                          2590  LOAD_0100:
00002DFC  4283                    2591              CLR.L   D3
00002DFE  4282                    2592              CLR.L   D2
00002E00  267C 00000000           2593              MOVEA.L #0, A3
00002E06                          2594  
00002E06  0C38 0002 177A          2595              CMPI.B  #%010, FIRST_3
00002E0C  6700 0006               2596              BEQ     MYBE_NEG
00002E10  6600 000C               2597              BNE     NOT_NEG
00002E14  0C38 0003 177B          2598  MYBE_NEG    CMPI.B  #%011, SECOND_3
00002E1A  6D00 008E               2599              BLT     NEG
00002E1E                          2600  
00002E1E  0C38 0007 177A          2601  NOT_NEG     CMPI.B  #%111, FIRST_3
00002E24  6700 0006               2602              BEQ     MYBE_RTS1
00002E28  6600 0032               2603              BNE     NOT_RTS
00002E2C  0C38 0001 177B          2604  MYBE_RTS1   CMPI.B  #%001, SECOND_3
00002E32  6700 0006               2605              BEQ     MYBE_RTS2
00002E36  6600 0024               2606              BNE     NOT_RTS
00002E3A  0C38 0006 177C          2607  MYBE_RTS2   CMPI.B  #%110, THIRD_3
00002E40  6700 0006               2608              BEQ     MYBE_RTS3
00002E44  6600 0016               2609              BNE     NOT_RTS
00002E48  0C38 0005 177D          2610  MYBE_RTS3   CMPI.B  #%101, FOURTH_3
00002E4E  6700 0092               2611              BEQ     RTS
00002E52  0C38 0001 177D          2612              CMPI.B  #%001, FOURTH_3 
00002E58  6700 0088               2613              BEQ     RTS * It's actually NOP but it's the same shit in EA perspective
00002E5C                          2614              
00002E5C  0C38 0007 177A          2615  NOT_RTS     CMPI.B  #%111, FIRST_3
00002E62  6700 0006               2616              BEQ     MYBE_JSR
00002E66  6600 000C               2617              BNE     NOT_JSR
00002E6A  0C38 0002 177B          2618  MYBE_JSR    CMPI.B  #%010, SECOND_3
00002E70  6700 0078               2619              BEQ     JSR
00002E74                          2620  
00002E74  4286                    2621  NOT_JSR     CLR.L   D6
00002E76  1C38 177A               2622              MOVE.B  FIRST_3, D6
00002E7A  0206 0005               2623              ANDI.B  #%101, D6 * Making %1X0 -> %100
00002E7E  0C06 0004               2624              CMPI.B  #%100, D6
00002E82  6700 0006               2625              BEQ     MYBE_MOVEM
00002E86  6600 0012               2626              BNE     NOT_MOVEM
00002E8A                          2627              
00002E8A  1C38 177B               2628  MYBE_MOVEM  MOVE.B  SECOND_3, D6
00002E8E  0206 0006               2629              ANDI.B  #%110, D6
00002E92  0C06 0002               2630              CMPI.B  #%010, D6
00002E96  6700 0080               2631              BEQ     MOVEM
00002E9A                          2632              
00002E9A  0C38 0007 177B          2633  NOT_MOVEM   CMPI.B  #%111, SECOND_3
00002EA0  6700 007E               2634              BEQ     LEA
00002EA4                          2635              
00002EA4  4EF9 0000336A           2636              JMP     INVALID
00002EAA                          2637  
00002EAA                          2638  NEG:
00002EAA  367C 2ECC               2639              MOVEA.W #NEG_BACK, A3
00002EAE  0C38 0000 177B          2640              CMPI.B  #%000, SECOND_3
00002EB4  6700 0344               2641              BEQ     SIZE_B
00002EB8  0C38 0001 177B          2642              CMPI.B  #%001, SECOND_3
00002EBE  6700 0342               2643              BEQ     SIZE_W
00002EC2  0C38 0002 177B          2644              CMPI.B  #%010, SECOND_3
00002EC8  6700 0340               2645              BEQ     SIZE_L
00002ECC                          2646              
00002ECC  1638 177C               2647  NEG_BACK    MOVE.B  THIRD_3, D3
00002ED0  1438 177D               2648              MOVE.B  FOURTH_3, D2
00002ED4                          2649  
00002ED4  4EB9 00003156           2650              JSR     LOAD_EA
00002EDA  4EB9 000032B8           2651              JSR     LOAD_NEW_LINE
00002EE0  4E75                    2652              RTS
00002EE2                          2653              
00002EE2                          2654  RTS:
00002EE2  4EB9 000032B8           2655              JSR     LOAD_NEW_LINE
00002EE8  4E75                    2656              RTS
00002EEA                          2657  
00002EEA                          2658  JSR:
00002EEA  367C 2F02               2659              MOVEA.W #JSR_BACK, A3
00002EEE  0C38 0000 177D          2660              CMPI.B  #%000, FOURTH_3
00002EF4  6700 030C               2661              BEQ     SIZE_W
00002EF8  0C38 0001 177D          2662              CMPI.B  #%001, FOURTH_3
00002EFE  6700 030A               2663              BEQ     SIZE_L
00002F02                          2664              
00002F02  1638 177C               2665  JSR_BACK    MOVE.B  THIRD_3, D3
00002F06  1438 177D               2666              MOVE.B  FOURTH_3, D2
00002F0A                          2667              
00002F0A  4EB9 00003156           2668              JSR     LOAD_EA
00002F10  4EB9 000032B8           2669              JSR     LOAD_NEW_LINE
00002F16  4E75                    2670              RTS
00002F18                          2671  
00002F18                          2672  MOVEM:
00002F18  4EB9 000032B8           2673              JSR     LOAD_NEW_LINE
00002F1E  4E75                    2674              RTS
00002F20                          2675      
00002F20                          2676  LEA:
00002F20  367C 2F42               2677              MOVEA.W #LEA_BACK, A3
00002F24  0C38 0000 177D          2678              CMPI.B  #%000, FOURTH_3
00002F2A  6700 02D6               2679              BEQ     SIZE_W
00002F2E  0C38 0001 177D          2680              CMPI.B  #%001, FOURTH_3
00002F34  6700 02D4               2681              BEQ     SIZE_L
00002F38  0C38 0004 177D          2682              CMPI.B  #%100, FOURTH_3
00002F3E  6700 042A               2683              BEQ     INVALID 
00002F42                          2684              
00002F42  1638 177C               2685  LEA_BACK    MOVE.B  THIRD_3, D3
00002F46  1438 177D               2686              MOVE.B  FOURTH_3, D2
00002F4A                          2687              
00002F4A  4EB9 00003156           2688              JSR     LOAD_EA
00002F50  4EB9 000032BA           2689              JSR     LOAD_COMMA_SPACE
00002F56                          2690              
00002F56  163C 0001               2691              MOVE.B  #%001, D3
00002F5A  1438 177A               2692              MOVE.B  FIRST_3, D2
00002F5E                          2693              
00002F5E  4EB9 00003156           2694              JSR     LOAD_EA
00002F64  4EB9 000032B8           2695              JSR     LOAD_NEW_LINE
00002F6A  4E75                    2696              RTS
00002F6C                          2697  
00002F6C                          2698  LOAD_0000:
00002F6C  4283                    2699              CLR.L   D3
00002F6E  4282                    2700              CLR.L   D2
00002F70  267C 00000000           2701              MOVEA.L #0, A3
00002F76                          2702  
00002F76  0C38 0000 177A          2703              CMPI.B  #%000, FIRST_3
00002F7C  6700 0006               2704              BEQ     MYBE_ORI
00002F80  6600 000C               2705              BNE     NOT_ORI
00002F84  0C38 0003 177B          2706  MYBE_ORI    CMPI.B  #%011, SECOND_3
00002F8A  6D00 0042               2707              BLT     ORI_CMPI            
00002F8E                          2708  
00002F8E  0C38 0006 177A          2709  NOT_ORI     CMPI.B  #%110, FIRST_3
00002F94  6700 0006               2710              BEQ     MYBE_CMPI
00002F98  6600 000C               2711              BNE     NOT_CMPI
00002F9C  0C38 0003 177B          2712  MYBE_CMPI   CMPI.B  #%011, SECOND_3
00002FA2  6D00 002A               2713              BLT     ORI_CMPI
00002FA6                          2714              
00002FA6  0C38 0004 177A          2715  NOT_CMPI    CMPI.B  #%100, FIRST_3
00002FAC  6700 0006               2716              BEQ     MYBE_BCLR
00002FB0  6600 000C               2717              BNE     NOT_BCLR
00002FB4  0C38 0002 177B          2718  MYBE_BCLR   CMPI.B  #%010, SECOND_3
00002FBA  6700 0080               2719              BEQ     BCLR
00002FBE                          2720  
00002FBE  0C38 0006 177B          2721  NOT_BCLR    CMPI.B  #%110, SECOND_3
00002FC4  6700 00E0               2722              BEQ     DYNMC_BCLR
00002FC8                          2723              
00002FC8  4EF9 0000336A           2724              JMP     INVALID
00002FCE                          2725              
00002FCE  367C 2FF0               2726  ORI_CMPI    MOVEA.W #BACK, A3
00002FD2  0C38 0000 177B          2727              CMPI.B  #%000, SECOND_3
00002FD8  6700 0220               2728              BEQ     SIZE_B
00002FDC  0C38 0001 177B          2729              CMPI.B  #%001, SECOND_3
00002FE2  6700 021E               2730              BEQ     SIZE_W
00002FE6  0C38 0002 177B          2731              CMPI.B  #%010, SECOND_3
00002FEC  6700 021C               2732              BEQ     SIZE_L
00002FF0                          2733  
00002FF0  163C 0007               2734  BACK        MOVE.B  #%111, D3
00002FF4  143C 0004               2735              MOVE.B  #%100, D2
00002FF8                          2736              
00002FF8  4EB9 00003156           2737              JSR     LOAD_EA
00002FFE  4EB9 000032BA           2738              JSR     LOAD_COMMA_SPACE
00003004                          2739              
00003004  367C 3026               2740              MOVEA.W #BACK2, A3   
00003008  0C38 0000 177D          2741              CMPI.B  #%000, FOURTH_3
0000300E  6700 01F2               2742              BEQ     SIZE_W
00003012  0C38 0001 177D          2743              CMPI.B  #%001, FOURTH_3
00003018  6700 01F0               2744              BEQ     SIZE_L
0000301C  0C38 0004 177D          2745              CMPI.B  #%100, FOURTH_3 
00003022  6700 0346               2746              BEQ     INVALID 
00003026                          2747  
00003026  1638 177C               2748  BACK2       MOVE.B  THIRD_3, D3
0000302A  1438 177D               2749              MOVE.B  FOURTH_3, D2
0000302E                          2750          
0000302E  4EB9 00003156           2751              JSR     LOAD_EA
00003034  4EB9 000032B8           2752              JSR     LOAD_NEW_LINE
0000303A  4E75                    2753              RTS
0000303C                          2754  
0000303C  4285                    2755  BCLR        CLR.L   D5
0000303E  4284                    2756              CLR.L   D4
00003040  247C 00000000           2757              MOVEA.L #0, A2
00003046                          2758  
00003046  3A0E                    2759              MOVE.W  A6, D5
00003048  9A4D                    2760              SUB.W   A5, D5
0000304A  0C45 0002               2761              CMPI.W  #$2, D5
0000304E  6D00 031A               2762              BLT     INVALID
00003052                          2763  
00003052  381D                    2764              MOVE.W  (A5)+, D4
00003054  4284                    2765              CLR.L   D4
00003056  381D                    2766              MOVE.W  (A5)+, D4
00003058  0244 00FF               2767              ANDI.W  #$00FF, D4
0000305C  247C 00003068           2768              MOVEA.L #BACK4, A2
00003062  4EF9 00003284           2769              JMP     LOAD_IMMDTE
00003068                          2770              
00003068  4EB9 000032BA           2771  BACK4       JSR     LOAD_COMMA_SPACE
0000306E                          2772              
0000306E  367C 3090               2773              MOVEA.W #BACK3, A3
00003072  0C38 0000 177D          2774              CMPI.B  #%000, FOURTH_3
00003078  6700 0188               2775              BEQ     SIZE_W
0000307C  0C38 0001 177D          2776              CMPI.B  #%001, FOURTH_3
00003082  6700 0186               2777              BEQ     SIZE_L
00003086  0C38 0004 177D          2778              CMPI.B  #%100, FOURTH_3 
0000308C  6700 02DC               2779              BEQ     INVALID 
00003090                          2780  
00003090  1638 177C               2781  BACK3       MOVE.B  THIRD_3, D3
00003094  1438 177D               2782              MOVE.B  FOURTH_3, D2
00003098                          2783  
00003098  4EB9 00003156           2784              JSR     LOAD_EA
0000309E  4EB9 000032B8           2785              JSR     LOAD_NEW_LINE
000030A4                          2786  
000030A4  4E75                    2787              RTS
000030A6                          2788  
000030A6  163C 0000               2789  DYNMC_BCLR  MOVE.B  #%000, D3
000030AA  1438 177A               2790              MOVE.B  FIRST_3, D2
000030AE                          2791              
000030AE  4EB9 00003156           2792              JSR     LOAD_EA
000030B4  4EB9 000032BA           2793              JSR     LOAD_COMMA_SPACE
000030BA                          2794  
000030BA  367C 30DC               2795              MOVEA.W #BACK5, A3
000030BE  0C38 0000 177D          2796              CMPI.B  #%000, FOURTH_3
000030C4  6700 013C               2797              BEQ     SIZE_W
000030C8  0C38 0001 177D          2798              CMPI.B  #%001, FOURTH_3
000030CE  6700 013A               2799              BEQ     SIZE_L
000030D2  0C38 0004 177D          2800              CMPI.B  #%100, FOURTH_3 
000030D8  6700 0290               2801              BEQ     INVALID 
000030DC                          2802              
000030DC  1638 177C               2803  BACK5       MOVE.B  THIRD_3, D3
000030E0  1438 177D               2804              MOVE.B  FOURTH_3, D2
000030E4                          2805              
000030E4  4EB9 00003156           2806              JSR     LOAD_EA
000030EA  4EB9 000032B8           2807              JSR     LOAD_NEW_LINE
000030F0                          2808              
000030F0  4E75                    2809              RTS
000030F2                          2810  
000030F2                          2811  LOAD_00XX:
000030F2  4283                    2812          CLR.L   D3
000030F4  4282                    2813          CLR.L   D2
000030F6  267C 00000000           2814          MOVEA.L #0, A3
000030FC                          2815          
000030FC  367C 3114               2816          MOVEA.W #GOO, A3
00003100  0C38 0003 1779          2817          CMPI.B  #%0011, MNEMONIC
00003106  6700 00FA               2818          BEQ     SIZE_W
0000310A  0C38 0002 1779          2819          CMPI.B  #%0010, MNEMONIC
00003110  6700 00F8               2820          BEQ     SIZE_L
00003114                          2821  
00003114  1638 177C               2822  GOO     MOVE.B  THIRD_3, D3
00003118  1438 177D               2823          MOVE.B  FOURTH_3, D2
0000311C                          2824      
0000311C  4EB9 00003156           2825          JSR     LOAD_EA
00003122  4EB9 000032BA           2826          JSR     LOAD_COMMA_SPACE
00003128                          2827      
00003128  367C 3140               2828          MOVEA.W #GOO2, A3
0000312C  0C38 0000 177A          2829          CMPI.B  #%000, FIRST_3
00003132  6700 00CE               2830          BEQ     SIZE_W
00003136  0C38 0001 177A          2831          CMPI.B  #%001, FIRST_3
0000313C  6700 00CC               2832          BEQ     SIZE_L
00003140                          2833      
00003140  1638 177B               2834  GOO2    MOVE.B  SECOND_3, D3
00003144  1438 177A               2835          MOVE.B  FIRST_3, D2
00003148                          2836              
00003148  4EB9 00003156           2837          JSR     LOAD_EA
0000314E  4EB9 000032B8           2838          JSR     LOAD_NEW_LINE
00003154                          2839      
00003154  4E75                    2840          RTS
00003156                          2841  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003156                          2842  
00003156                          2843  
00003156                          2844  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003156                          2845  
00003156                          2846  LOAD_EA:
00003156  347C 3166               2847          MOVEA.W #SAVED, A2 * remember to come back!
0000315A                          2848  
0000315A  0C43 0007               2849          CMPI    #%111, D3
0000315E  6D00 0008               2850          BLT     LOAD_LT_111
00003162  6C00 0032               2851          BGE     LOAD_GE_111
00003166                          2852      
00003166  4E75                    2853  SAVED   RTS
00003168                          2854  
00003168                          2855  LOAD_LT_111:
00003168  0C43 0000               2856      CMPI    #%000, D3 * e.g. D3
0000316C  6700 00A4               2857      BEQ     LOAD_DATA_REGISTER
00003170  0C43 0001               2858      CMPI    #%001, D3 * e.g. A3
00003174  6700 00AE               2859      BEQ     LOAD_ADDR_REGISTER
00003178  0C43 0002               2860      CMPI    #%010, D3 * e.g. (A3)
0000317C  6700 00B8               2861      BEQ     LOAD_ADDRESS
00003180  0C43 0003               2862      CMPI    #%011, D3 * e.g. (A3)+
00003184  6700 00C2               2863      BEQ     LOAD_ADDRESS_W_POST_INC
00003188  0C43 0004               2864      CMPI    #%100, D3 * e.g. -(A3)
0000318C  6700 00C6               2865      BEQ     LOAD_ADDRESS_W_PRE_DEC
00003190                          2866      
00003190  4EF9 0000336A           2867      JMP     INVALID
00003196                          2868      
00003196                          2869  LOAD_GE_111:
00003196  4285                    2870              CLR.L   D5
00003198  4284                    2871              CLR.L   D4
0000319A                          2872  
0000319A  3A0E                    2873              MOVE.W  A6, D5
0000319C  9A4D                    2874              SUB.W   A5, D5
0000319E  BA78 291A               2875              CMP.W   TRAILING_SIZE, D5
000031A2  6D00 01C6               2876              BLT     INVALID
000031A6                          2877  
000031A6  0C78 0001 291A          2878              CMPI.W  #$1, TRAILING_SIZE
000031AC  6700 0016               2879              BEQ     CHUMP_BYTE
000031B0  0C78 0002 291A          2880              CMPI.W  #$2, TRAILING_SIZE
000031B6  6700 0014               2881              BEQ     CHUMP_WORD
000031BA  0C78 0004 291A          2882              CMPI.W  #$4, TRAILING_SIZE
000031C0  6700 0012               2883              BEQ     CHUMP_LONG
000031C4                          2884  
000031C4  381D                    2885  CHUMP_BYTE  MOVE.W  (A5)+, D4 * Minimum 4 hex (e.g. MOVE.B #1, $2 = XXXX 0001 0002)
000031C6  4EF9 000031DC           2886              JMP     GO
000031CC                          2887  
000031CC  381D                    2888  CHUMP_WORD  MOVE.W  (A5)+, D4
000031CE  4EF9 000031DC           2889              JMP     GO
000031D4                          2890              
000031D4  281D                    2891  CHUMP_LONG  MOVE.L  (A5)+, D4
000031D6  4EF9 000031DC           2892              JMP     GO
000031DC                          2893  
000031DC  0C42 0000               2894  GO          CMPI    #%000, D2
000031E0  6700 007E               2895              BEQ     LOAD_ABS_SHORT
000031E4  0C42 0001               2896              CMPI    #%001, D2
000031E8  6700 0088               2897              BEQ     LOAD_ABS_LONG
000031EC  0C42 0004               2898              CMPI    #%100, D2
000031F0  6700 0092               2899              BEQ     LOAD_IMMDTE
000031F4                          2900      
000031F4  4EF9 0000336A           2901              JMP     INVALID
000031FA                          2902  TRAILING_HELPER:            
000031FA  31FC 0002 291A          2903  SIZE_B  MOVE.W  #$2, TRAILING_SIZE
00003200  4ED3                    2904          JMP     (A3)
00003202                          2905  
00003202  31FC 0002 291A          2906  SIZE_W  MOVE.W  #$2, TRAILING_SIZE
00003208  4ED3                    2907          JMP     (A3)
0000320A                          2908          
0000320A  31FC 0004 291A          2909  SIZE_L  MOVE.W  #$4, TRAILING_SIZE
00003210  4ED3                    2910          JMP     (A3)
00003212                          2911  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003212                          2912  
00003212                          2913  
00003212                          2914  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003212                          2915  
00003212                          2916  LOAD_DATA_REGISTER:
00003212  4280                    2917      CLR.L   D0
00003214                          2918      
00003214  4EB9 000032D2           2919      JSR     LOAD_D
0000321A  1002                    2920      MOVE.B  D2, D0
0000321C  4EB9 00003346           2921      JSR     LOAD_NUM
00003222  4ED2                    2922      JMP     (A2)
00003224                          2923  
00003224                          2924  LOAD_ADDR_REGISTER:
00003224  4280                    2925      CLR.L   D0
00003226                          2926  
00003226  4EB9 000032E0           2927      JSR     LOAD_A
0000322C  1002                    2928      MOVE.B  D2, D0
0000322E  4EB9 00003346           2929      JSR     LOAD_NUM
00003234  4ED2                    2930      JMP     (A2)
00003236                          2931  
00003236                          2932  LOAD_ADDRESS:
00003236  4EB9 000032EE           2933      JSR     LOAD_PTHSIS_OPEN
0000323C  4EB8 3224               2934      JSR     LOAD_ADDR_REGISTER
00003240  4EB9 000032FC           2935      JSR     LOAD_PTHSIS_CLSD
00003246  4ED2                    2936      JMP     (A2)
00003248                          2937  
00003248                          2938  LOAD_ADDRESS_W_POST_INC:
00003248  4EB8 3236               2939      JSR     LOAD_ADDRESS
0000324C  4EB9 00003326           2940      JSR     LOAD_PLUS_SIGN
00003252  4ED2                    2941      JMP     (A2)
00003254                          2942  
00003254                          2943  LOAD_ADDRESS_W_PRE_DEC:
00003254  4EB9 00003334           2944      JSR     LOAD_MINUS_SIGN
0000325A  4EB8 3236               2945      JSR     LOAD_ADDRESS
0000325E  4ED2                    2946      JMP     (A2)
00003260                          2947  
00003260                          2948  LOAD_ABS_SHORT:
00003260  4280                    2949      CLR.L   D0
00003262                          2950  
00003262  4EB9 0000330A           2951      JSR     LOAD_HEX_SIGN
00003268  3004                    2952      MOVE.W  D4, D0
0000326A  4EB9 0000328E           2953      JSR     LOAD_BYTES
00003270  4ED2                    2954      JMP     (A2)
00003272                          2955  
00003272                          2956  LOAD_ABS_LONG:
00003272  4280                    2957      CLR.L   D0
00003274                          2958  
00003274  4EB9 0000330A           2959      JSR     LOAD_HEX_SIGN
0000327A  2004                    2960      MOVE.L  D4, D0
0000327C  4EB9 0000328E           2961      JSR     LOAD_BYTES
00003282  4ED2                    2962      JMP     (A2)
00003284                          2963  
00003284                          2964  LOAD_IMMDTE:
00003284  4EB9 00003318           2965      JSR     LOAD_IMMDTE_VALU
0000328A  4EF8 3272               2966      JMP     LOAD_ABS_LONG
0000328E                          2967  
0000328E                          2968  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000328E                          2969  
0000328E                          2970  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000328E                          2971  
0000328E                          2972  LOAD_BYTES:
0000328E  4285                    2973          CLR.L   D5
00003290  4281                    2974          CLR.L   D1
00003292                          2975  
00003292  2200                    2976          MOVE.L  D0, D1
00003294  1A3C 0008               2977          MOVE.B  #8, D5
00003298  0C45 0000               2978  LOOP    CMPI    #0, D5
0000329C  6E00 0004               2979          BGT     ROTATE
000032A0  4E75                    2980          RTS
000032A2                          2981      
000032A2  E999                    2982  ROTATE  ROL.L   #$04, D1
000032A4  1001                    2983          MOVE.B  D1, D0
000032A6  0280 0000000F           2984          ANDI.L  #$0000000F, D0
000032AC  4EB9 00003346           2985          JSR     LOAD_NUM
000032B2  5345                    2986          SUBI    #1, D5
000032B4  4EF8 3298               2987          JMP     LOOP        
000032B8                          2988  
000032B8                          2989  LOAD_NEW_LINE:          ;Depreciated method due to IO
000032B8  4E75                    2990      RTS
000032BA                          2991  
000032BA                          2992  LOAD_COMMA_SPACE:
000032BA  4280                    2993      CLR.L   D0
000032BC                          2994  
000032BC  1038 2917               2995      MOVE.B  COMMA, D0
000032C0  4EB9 00003342           2996      JSR     LOAD_THIS_SHIT
000032C6  1038 2918               2997      MOVE.B  SPACE, D0
000032CA  4EB9 00003342           2998      JSR     LOAD_THIS_SHIT
000032D0                          2999      
000032D0  4E75                    3000      RTS
000032D2                          3001  
000032D2                          3002  LOAD_D:
000032D2  4280                    3003      CLR.L   D0
000032D4                          3004  
000032D4  1038 2910               3005      MOVE.B  DATA, D0
000032D8  4EB9 00003342           3006      JSR     LOAD_THIS_SHIT
000032DE  4E75                    3007      RTS
000032E0                          3008  
000032E0                          3009  LOAD_A:
000032E0  4280                    3010      CLR.L   D0
000032E2                          3011  
000032E2  1038 290F               3012      MOVE.B  ADDRESS, D0
000032E6  4EB9 00003342           3013      JSR     LOAD_THIS_SHIT
000032EC  4E75                    3014      RTS
000032EE                          3015  
000032EE                          3016  LOAD_PTHSIS_OPEN:
000032EE  4280                    3017      CLR.L   D0
000032F0                          3018  
000032F0  1038 2911               3019      MOVE.B  PTHSIS_OPEN, D0
000032F4  4EB9 00003342           3020      JSR     LOAD_THIS_SHIT
000032FA  4E75                    3021      RTS
000032FC                          3022  
000032FC                          3023  LOAD_PTHSIS_CLSD:
000032FC  4280                    3024      CLR.L   D0
000032FE                          3025  
000032FE  1038 2912               3026      MOVE.B  PTHSIS_CLSD, D0
00003302  4EB9 00003342           3027      JSR     LOAD_THIS_SHIT
00003308  4E75                    3028      RTS
0000330A                          3029  
0000330A                          3030  LOAD_HEX_SIGN:
0000330A  4280                    3031      CLR.L   D0
0000330C                          3032  
0000330C  1038 2913               3033      MOVE.B  HEX_SIGN, D0
00003310  4EB9 00003342           3034      JSR     LOAD_THIS_SHIT
00003316  4E75                    3035      RTS
00003318                          3036  
00003318                          3037  LOAD_IMMDTE_VALU:
00003318  4280                    3038      CLR.L   D0
0000331A                          3039  
0000331A  1038 2914               3040      MOVE.B  IMMDTE_VALU, D0
0000331E  4EB9 00003342           3041      JSR     LOAD_THIS_SHIT
00003324  4E75                    3042      RTS
00003326                          3043  
00003326                          3044  LOAD_PLUS_SIGN:
00003326  4280                    3045      CLR.L   D0
00003328                          3046  
00003328  1038 2915               3047      MOVE.B  PLUS_SIGN, D0
0000332C  4EB9 00003342           3048      JSR     LOAD_THIS_SHIT
00003332  4E75                    3049      RTS
00003334                          3050  
00003334                          3051  LOAD_MINUS_SIGN:
00003334  4280                    3052      CLR.L   D0
00003336                          3053  
00003336  1038 2916               3054      MOVE.B  MINUS_SIGN, D0
0000333A  4EB9 00003342           3055      JSR     LOAD_THIS_SHIT
00003340  4E75                    3056      RTS
00003342                          3057  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003342                          3058  
00003342                          3059  
00003342                          3060  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003342                          3061  LOAD_THIS_SHIT:
00003342  18C0                    3062      MOVE.B  D0, (A4)+
00003344  4E75                    3063      RTS
00003346                          3064  
00003346                          3065  LOAD_NUM:
00003346  0C00 0009               3066      CMPI.B  #$9, D0
0000334A  6E00 0006               3067      BGT     GT
0000334E  6F00 000C               3068      BLE     LE
00003352                          3069      
00003352  0600 0037               3070  GT  ADDI.B  #$37, D0 * A~F
00003356  4EF9 00003366           3071      JMP     END
0000335C  0600 0030               3072  LE  ADDI.B  #$30, D0 * 0~9
00003360  4EF9 00003366           3073      JMP     END
00003366                          3074  
00003366  18C0                    3075  END MOVE.B  D0, (A4)+
00003368  4E75                    3076      RTS
0000336A                          3077  
0000336A                          3078  INVALID:
0000336A  11FC 0000 10A2          3079              MOVE.B  #%0, IS_VALID
00003370  4EF8 2926               3080              JMP     EXT
00003374                          3081  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003374                          3082  
00003374                          3083  
00003374                          3084  
00003374                          3085  
00003374                          3086  
00003374                          3087  
00003374                          3088  
00003374                          3089  
00003374                          3090  
00003374                          3091  -------------------- end include --------------------
00003374                          3092      INCLUDE "Test.x68"
00003374                          3093  
00009000                          3094      ORG $9000
00009000  E3D9                    3095      LSL.W (A1)+         ; EA issue?
00009002  C3D0                    3096      MULS.W (A0),D1      ;finished testing
00009004  9399                    3097      SUB.L D1,(A1)+      ;finished testing
00009006  93C1                    3098      SUB.L D1,A1         ;finished testing
00009008  9391                    3099      SUB.L D1,(A1)       ;finished testing
0000900A  93A1                    3100      SUB.L D1,-(A1)      ;finished  testing
0000900C  92C1                    3101      SUB.W D1,A1         ;finished  testing
0000900E  D5C1                    3102      ADDA.L D1,A2        ;finishtes testing
00009010                          3103  
00009010  E289                    3104      LSR.L #$1,D1        ; CHECK THIS Prints #$1,A1 instead of #$,D1    
00009012                          3105          
00009012  5301                    3106      SUBQ.B #$1,D1       ; CHECK THIS Prints #$2,D1 instead of #$1,D1
00009014                          3107       
00009014  E709                    3108      LSL.B #3,D1         ; CHECK THIS Prints #3,A1 instead of #3,D1
00009016                          3109      
00009016  5301                    3110      SUBQ.B #$1,D1       ; CHECK THIS Prints #$2,D1 instead of #$1,D1
00009018                          3111  
00009018  0881 0003               3112      BCLR.L #$3,D1       ; CHECK THIS Prints #$57,D1 instead of #$3,D1
0000901C                          3113      
0000901C                          3114      ;LSR.W #$1,D1        ; This doesn't show up if it's placed right after BCLR    
0000901C                          3115      ;LSL.W #$1,D1        ; This doesn't show up if it's placed right after BCLR    
0000901C                          3116      
0000901C                          3117      ;ASL.B  D3,D5     
0000901C                          3118      ;ASR.W  D3,D5
0000901C  0041 2501               3119      ORI.W #$2501, D1
00009020                          3120       
00009020  E7BD                    3121      ROL.L  D3,D5     
00009022                          3122     
00009022  E6BD                    3123      ROR.L  D3,D5     
00009024  8497                    3124      OR.L (SP),D2
00009026                          3125      
00009026  8358                    3126      OR.W D1,(A0)+
00009028                          3127      
00009028  4E71                    3128      NOP
0000902A                          3129      
0000902A  4E75                    3130      RTS
0000902C                          3131      
0000902C  4E71                    3132      NOP
0000902E                          3133      
0000902E  4E75                    3134      RTS
00009030                          3135      
00009030  0041 2501               3136      ORI.W #$2501, D1
00009034                          3137      
00009034  5300                    3138      SUBQ.B  #1,D0
00009036                          3139      
00009036  5541                    3140      SUBQ.W  #$2, D1
00009038                          3141      
00009038  5982                    3142      SUBQ.L  #4,D2
0000903A                          3143      
0000903A  41D0                    3144      LEA     (A0),A0
0000903C                          3145      
0000903C  41D1                    3146      LEA     (A1),A0
0000903E                          3147      
0000903E  41F8 0100               3148      LEA     $0100,A0
00009042                          3149      
00009042  41F9 00009300           3150      LEA     $9300,A0
00009048                          3151      
00009048  41D5                    3152      LEA     (A5),A0
0000904A                          3153  
0000904A  41D7                    3154      LEA     (A7),A0
0000904C                          3155  
0000904C  4FD0                    3156      LEA     (A0),A7
0000904E                          3157  
0000904E  4FD5                    3158      LEA     (A5),A7
00009050                          3159  
00009050  4FD7                    3160      LEA     (A7),A7
00009052                          3161  
00009052  4200                    3162      CLR.B     D0
00009054                          3163  
00009054  4207                    3164      CLR.B     D7
00009056                          3165  
00009056  4240                    3166      CLR.W     D0
00009058                          3167  
00009058  4247                    3168      CLR.W     D7
0000905A                          3169  
0000905A  4280                    3170      CLR.L     D0
0000905C                          3171  
0000905C  4287                    3172      CLR.L     D7
0000905E                          3173  
0000905E  4210                    3174      CLR.B     (A0)
00009060                          3175  
00009060  4217                    3176      CLR.B     (A7)
00009062                          3177  
00009062  4250                    3178      CLR.W     (A0)
00009064                          3179  
00009064  4257                    3180      CLR.W     (A7)
00009066                          3181  
00009066  4290                    3182      CLR.L     (A0)
00009068                          3183  
00009068  4297                    3184      CLR.L     (A7)
0000906A                          3185  
0000906A  4218                    3186      CLR.B     (A0)+
0000906C                          3187  
0000906C  421F                    3188      CLR.B     (A7)+
0000906E                          3189  
0000906E  4258                    3190      CLR.W     (A0)+
00009070                          3191  
00009070  425F                    3192      CLR.W     (A7)+
00009072                          3193  
00009072  4298                    3194      CLR.L     (A0)+
00009074                          3195  
00009074  429F                    3196      CLR.L     (A7)+
00009076                          3197  
00009076  4220                    3198      CLR.B     -(A0)
00009078                          3199  
00009078  4227                    3200      CLR.B     -(A7)
0000907A                          3201  
0000907A  4260                    3202      CLR.W     -(A0)
0000907C                          3203  
0000907C  4267                    3204      CLR.W     -(A7)
0000907E                          3205  
0000907E  42A0                    3206      CLR.L     -(A0)
00009080                          3207  
00009080  42A7                    3208      CLR.L     -(A7)
00009082                          3209  
00009082  1200                    3210      MOVE.B    D0,D1
00009084                          3211  
00009084  1080                    3212      MOVE.B    D0,(A0)
00009086                          3213  
00009086  10C0                    3214      MOVE.B    D0,(A0)+
00009088                          3215  
00009088  1100                    3216      MOVE.B    D0,-(A0)
0000908A                          3217  
0000908A  1010                    3218      MOVE.B    (A0),D0
0000908C                          3219  
0000908C  1290                    3220      MOVE.B    (A0),(A1)
0000908E                          3221  
0000908E  12D0                    3222      MOVE.B    (A0),(A1)+
00009090                          3223  
00009090  1310                    3224      MOVE.B    (A0),-(A1)
00009092                          3225  
00009092  1018                    3226      MOVE.B    (A0)+,D0
00009094                          3227  
00009094  1298                    3228      MOVE.B    (A0)+,(A1)
00009096                          3229  
00009096  12D8                    3230      MOVE.B    (A0)+,(A1)+
00009098                          3231  
00009098  1318                    3232      MOVE.B    (A0)+,-(A1)
0000909A                          3233  
0000909A  1020                    3234      MOVE.B    -(A0),D0
0000909C                          3235  
0000909C  12A0                    3236      MOVE.B    -(A0),(A1)
0000909E                          3237  
0000909E  12E0                    3238      MOVE.B    -(A0),(A1)+
000090A0                          3239  
000090A0  1320                    3240      MOVE.B    -(A0),-(A1)
000090A2                          3241  
000090A2  3200                    3242      MOVE.W    D0,D1
000090A4                          3243  
000090A4  3080                    3244      MOVE.W    D0,(A0)
000090A6                          3245  
000090A6  30C0                    3246      MOVE.W    D0,(A0)+
000090A8                          3247  
000090A8  3100                    3248      MOVE.W    D0,-(A0)
000090AA                          3249  
000090AA  3008                    3250      MOVE.W    A0,D0
000090AC                          3251  
000090AC  3288                    3252      MOVE.W    A0,(A1)
000090AE                          3253  
000090AE  32C8                    3254      MOVE.W    A0,(A1)+
000090B0                          3255  
000090B0  3308                    3256      MOVE.W    A0,-(A1)
000090B2                          3257  
000090B2  3010                    3258      MOVE.W    (A0),D0
000090B4                          3259  
000090B4  3290                    3260      MOVE.W    (A0),(A1)
000090B6                          3261  
000090B6  32D0                    3262      MOVE.W    (A0),(A1)+
000090B8                          3263  
000090B8  3310                    3264      MOVE.W    (A0),-(A1)
000090BA                          3265  
000090BA  3018                    3266      MOVE.W    (A0)+,D0
000090BC                          3267  
000090BC  3298                    3268      MOVE.W    (A0)+,(A1)
000090BE                          3269  
000090BE  32D8                    3270      MOVE.W    (A0)+,(A1)+
000090C0                          3271  
000090C0  3318                    3272      MOVE.W    (A0)+,-(A1)
000090C2                          3273  
000090C2  3020                    3274      MOVE.W    -(A0),D0
000090C4                          3275  
000090C4  32A0                    3276      MOVE.W    -(A0),(A1)
000090C6                          3277  
000090C6  32E0                    3278      MOVE.W    -(A0),(A1)+
000090C8                          3279  
000090C8  3320                    3280      MOVE.W    -(A0),-(A1)
000090CA                          3281  
000090CA  2200                    3282      MOVE.L    D0,D1
000090CC                          3283  
000090CC  2080                    3284      MOVE.L    D0,(A0)
000090CE                          3285  
000090CE  20C0                    3286      MOVE.L    D0,(A0)+
000090D0                          3287  
000090D0  2100                    3288      MOVE.L    D0,-(A0)
000090D2                          3289  
000090D2  2008                    3290      MOVE.L    A0,D0
000090D4                          3291  
000090D4  2288                    3292      MOVE.L    A0,(A1)
000090D6                          3293  
000090D6  22C8                    3294      MOVE.L    A0,(A1)+
000090D8                          3295  
000090D8  2308                    3296      MOVE.L    A0,-(A1)
000090DA                          3297  
000090DA  2010                    3298      MOVE.L    (A0),D0
000090DC                          3299  
000090DC  2290                    3300      MOVE.L    (A0),(A1)
000090DE                          3301  
000090DE  22D0                    3302      MOVE.L    (A0),(A1)+
000090E0                          3303  
000090E0  2310                    3304      MOVE.L    (A0),-(A1)
000090E2                          3305  
000090E2  2018                    3306      MOVE.L    (A0)+,D0
000090E4                          3307  
000090E4  2298                    3308      MOVE.L    (A0)+,(A1)
000090E6                          3309  
000090E6  22D8                    3310      MOVE.L    (A0)+,(A1)+
000090E8                          3311  
000090E8  2318                    3312      MOVE.L    (A0)+,-(A1)
000090EA                          3313  
000090EA  2020                    3314      MOVE.L    -(A0),D0
000090EC                          3315  
000090EC  22A0                    3316      MOVE.L    -(A0),(A1)
000090EE                          3317  
000090EE  22E0                    3318      MOVE.L    -(A0),(A1)+
000090F0                          3319  
000090F0  2320                    3320      MOVE.L    -(A0),-(A1)
000090F2                          3321  
000090F2  3040                    3322      MOVEA.W    D0,A0
000090F4                          3323  
000090F4  3048                    3324      MOVEA.W    A0,A0
000090F6                          3325  
000090F6  3050                    3326      MOVEA.W    (A0),A0
000090F8                          3327  
000090F8  3058                    3328      MOVEA.W    (A0)+,A0
000090FA                          3329  
000090FA  3060                    3330      MOVEA.W    -(A0),A0
000090FC                          3331  
000090FC  2040                    3332      MOVEA.L    D0,A0
000090FE                          3333  
000090FE  2048                    3334      MOVEA.L    A0,A0
00009100                          3335  
00009100  2050                    3336      MOVEA.L    (A0),A0
00009102                          3337  
00009102  2058                    3338      MOVEA.L    (A0)+,A0
00009104                          3339  
00009104  2060                    3340      MOVEA.L    -(A0),A0  
00009106                          3341  
00009106  D401                    3342      ADD.B     D1,D2
00009108                          3343  
00009108  D311                    3344      ADD.B     D1,(A1)
0000910A                          3345  
0000910A  D319                    3346      ADD.B     D1,(A1)+
0000910C                          3347  
0000910C  D321                    3348      ADD.B     D1,-(A1)
0000910E                          3349  
0000910E  D211                    3350      ADD.B     (A1),D1
00009110                          3351  
00009110  D219                    3352      ADD.B     (A1)+,D1
00009112                          3353  
00009112  D221                    3354      ADD.B     -(A1),D1
00009114                          3355  
00009114  D441                    3356      ADD.W     D1,D2
00009116                          3357  
00009116  D351                    3358      ADD.W     D1,(A1)
00009118                          3359  
00009118  D359                    3360      ADD.W     D1,(A1)+
0000911A                          3361  
0000911A  D361                    3362      ADD.W     D1,-(A1)
0000911C                          3363  
0000911C  D251                    3364      ADD.W     (A1),D1
0000911E                          3365  
0000911E  D259                    3366      ADD.W     (A1)+,D1
00009120                          3367  
00009120  D261                    3368      ADD.W     -(A1),D1
00009122                          3369  
00009122  D481                    3370      ADD.L     D1,D2
00009124                          3371  
00009124  D391                    3372      ADD.L     D1,(A1)
00009126                          3373  
00009126  D399                    3374      ADD.L     D1,(A1)+
00009128                          3375  
00009128  D3A1                    3376      ADD.L     D1,-(A1)
0000912A                          3377  
0000912A  D291                    3378      ADD.L     (A1),D1
0000912C                          3379  
0000912C  D299                    3380      ADD.L     (A1)+,D1
0000912E                          3381  
0000912E  D2A1                    3382      ADD.L     -(A1),D1
00009130                          3383  
00009130  D4C1                    3384      ADDA.W        D1,A2
00009132                          3385  
00009132  D4D1                    3386      ADDA.W        (A1),A2
00009134                          3387  
00009134  D4D9                    3388      ADDA.W        (A1)+,A2
00009136                          3389  
00009136  D4E1                    3390      ADDA.W        -(A1),A2
00009138                          3391  
00009138  D5C1                    3392      ADDA.L        D1,A2
0000913A                          3393  
0000913A  D5D1                    3394      ADDA.L        (A1),A2
0000913C                          3395  
0000913C  D5D9                    3396      ADDA.L        (A1)+,A2
0000913E                          3397  
0000913E  D5E1                    3398      ADDA.L        -(A1),A2
00009140                          3399     
00009140  9401                    3400      SUB.B     D1,D2
00009142                          3401  
00009142  9311                    3402      SUB.B     D1,(A1)
00009144                          3403  
00009144  9319                    3404      SUB.B     D1,(A1)+
00009146                          3405  
00009146  9321                    3406      SUB.B     D1,-(A1)
00009148                          3407  
00009148  9211                    3408      SUB.B     (A1),D1
0000914A                          3409  
0000914A  9219                    3410      SUB.B     (A1)+,D1
0000914C                          3411  
0000914C  9221                    3412      SUB.B     -(A1),D1
0000914E                          3413  
0000914E  9441                    3414      SUB.W     D1,D2
00009150                          3415  
00009150  92C1                    3416      SUB.W     D1,A1
00009152                          3417  
00009152  9351                    3418      SUB.W     D1,(A1)
00009154                          3419  
00009154  9359                    3420      SUB.W     D1,(A1)+
00009156                          3421  
00009156  9361                    3422      SUB.W     D1,-(A1)
00009158                          3423  
00009158  9249                    3424      SUB.W     A1,D1
0000915A                          3425  
0000915A  9251                    3426      SUB.W     (A1),D1
0000915C                          3427  
0000915C  9259                    3428      SUB.W     (A1)+,D1
0000915E                          3429  
0000915E  9261                    3430      SUB.W     -(A1),D1
00009160                          3431  
00009160  9481                    3432      SUB.L     D1,D2
00009162                          3433  
00009162  93C1                    3434      SUB.L     D1,A1
00009164                          3435  
00009164  9391                    3436      SUB.L     D1,(A1)
00009166                          3437  
00009166  9399                    3438      SUB.L     D1,(A1)+
00009168                          3439  
00009168  93A1                    3440      SUB.L     D1,-(A1)
0000916A                          3441  
0000916A  9289                    3442      SUB.L     A1,D1
0000916C                          3443  
0000916C  9291                    3444      SUB.L     (A1),D1
0000916E                          3445  
0000916E  9299                    3446      SUB.L     (A1)+,D1
00009170                          3447  
00009170  92A1                    3448      SUB.L     -(A1),D1    
00009172                          3449  
00009172  C3C0                    3450      MULS.W    D0,D1
00009174                          3451  
00009174  C3D0                    3452      MULS.W    (A0),D1
00009176                          3453  
00009176  C3E0                    3454      MULS.W    -(A0),D1
00009178                          3455  
00009178  C3D8                    3456      MULS.W    (A0)+,D1
0000917A                          3457  
0000917A  83C0                    3458      DIVS.W    D0,D1
0000917C                          3459  
0000917C  83D0                    3460      DIVS.W    (A0),D1
0000917E                          3461  
0000917E  83E0                    3462      DIVS.W    -(A0),D1
00009180                          3463  
00009180  83D8                    3464      DIVS.W    (A0)+,D1
00009182                          3465  
00009182  C401                    3466      AND.B     D1,D2
00009184                          3467  
00009184  C311                    3468      AND.B     D1,(A1)
00009186                          3469  
00009186  C319                    3470      AND.B     D1,(A1)+
00009188                          3471  
00009188  C321                    3472      AND.B     D1,-(A1)
0000918A                          3473  
0000918A  C211                    3474      AND.B     (A1),D1
0000918C                          3475  
0000918C  C219                    3476      AND.B     (A1)+,D1
0000918E                          3477  
0000918E  C221                    3478      AND.B     -(A1),D1
00009190                          3479  
00009190  C441                    3480      AND.W     D1,D2
00009192                          3481  
00009192  C351                    3482      AND.W     D1,(A1)
00009194                          3483  
00009194  C359                    3484      AND.W     D1,(A1)+
00009196                          3485  
00009196  C361                    3486      AND.W     D1,-(A1)
00009198                          3487  
00009198  C251                    3488      AND.W     (A1),D1
0000919A                          3489  
0000919A  C259                    3490      AND.W     (A1)+,D1
0000919C                          3491  
0000919C  C261                    3492      AND.W     -(A1),D1
0000919E                          3493  
0000919E  C481                    3494      AND.L     D1,D2
000091A0                          3495  
000091A0  C391                    3496      AND.L     D1,(A1)
000091A2                          3497  
000091A2  C399                    3498      AND.L     D1,(A1)+
000091A4                          3499  
000091A4  C3A1                    3500      AND.L     D1,-(A1)
000091A6                          3501  
000091A6  C291                    3502      AND.L     (A1),D1
000091A8                          3503  
000091A8  C299                    3504      AND.L     (A1)+,D1
000091AA                          3505  
000091AA  C2A1                    3506      AND.L     -(A1),D1
000091AC                          3507      
000091AC  B302                    3508      EOR.B      D1,D2
000091AE                          3509      
000091AE  B511                    3510      EOR.B      D2,(A1)
000091B0                          3511  
000091B0  8401                    3512      OR.B     D1,D2
000091B2                          3513  
000091B2  8311                    3514      OR.B     D1,(A1)
000091B4                          3515  
000091B4  8319                    3516      OR.B     D1,(A1)+
000091B6                          3517  
000091B6  8321                    3518      OR.B     D1,-(A1)
000091B8                          3519  
000091B8  8211                    3520      OR.B     (A1),D1
000091BA                          3521  
000091BA  8219                    3522      OR.B     (A1)+,D1
000091BC                          3523  
000091BC  8221                    3524      OR.B     -(A1),D1
000091BE                          3525  
000091BE  8441                    3526      OR.W     D1,D2
000091C0                          3527  
000091C0  8351                    3528      OR.W     D1,(A1)
000091C2                          3529  
000091C2  8359                    3530      OR.W     D1,(A1)+
000091C4                          3531  
000091C4  8361                    3532      OR.W     D1,-(A1)
000091C6                          3533  
000091C6  8251                    3534      OR.W     (A1),D1
000091C8                          3535  
000091C8  8259                    3536      OR.W     (A1)+,D1
000091CA                          3537  
000091CA  8261                    3538      OR.W     -(A1),D1
000091CC                          3539  
000091CC  8481                    3540      OR.L     D1,D2
000091CE                          3541  
000091CE  8391                    3542      OR.L     D1,(A1)
000091D0                          3543  
000091D0  8399                    3544      OR.L     D1,(A1)+
000091D2                          3545  
000091D2  83A1                    3546      OR.L     D1,-(A1)
000091D4                          3547  
000091D4  8291                    3548      OR.L     (A1),D1
000091D6                          3549  
000091D6  8299                    3550      OR.L     (A1)+,D1
000091D8                          3551  
000091D8  82A1                    3552      OR.L     -(A1),D1
000091DA                          3553  
000091DA  E32A                    3554      LSL.B     D1,D2
000091DC                          3555  
000091DC  E36A                    3556      LSL.W     D1,D2
000091DE                          3557  
000091DE  E3D1                    3558      LSL.W     (A1)
000091E0                          3559  
000091E0  E3D9                    3560      LSL.W     (A1)+
000091E2                          3561  
000091E2  E3E1                    3562      LSL.W     -(A1)
000091E4                          3563  
000091E4  E3AA                    3564      LSL.L     D1,D2
000091E6                          3565  
000091E6  E22A                    3566      LSR.B     D1,D2
000091E8                          3567  
000091E8  E26A                    3568      LSR.W     D1,D2
000091EA                          3569  
000091EA  E2D1                    3570      LSR.W     (A1)
000091EC                          3571  
000091EC  E2D9                    3572      LSR.W     (A1)+
000091EE                          3573  
000091EE  E2E1                    3574      LSR.W     -(A1)
000091F0                          3575  
000091F0  E2AA                    3576      LSR.L     D1,D2    
000091F2                          3577  
000091F2  E222                    3578      ASR.B     D1,D2
000091F4                          3579  
000091F4  E262                    3580      ASR.W     D1,D2
000091F6                          3581  
000091F6  E0D1                    3582      ASR.W     (A1)
000091F8                          3583  
000091F8  E0D9                    3584      ASR.W     (A1)+
000091FA                          3585  
000091FA  E0E1                    3586      ASR.W     -(A1)
000091FC                          3587  
000091FC  E2A2                    3588      ASR.L     D1,D2
000091FE                          3589  
000091FE  E322                    3590      ASL.B     D1,D2
00009200                          3591  
00009200  E362                    3592      ASL.W     D1,D2
00009202                          3593  
00009202  E1D1                    3594      ASL.W     (A1)
00009204                          3595  
00009204  E1D9                    3596      ASL.W     (A1)+
00009206                          3597  
00009206  E1E1                    3598      ASL.W     -(A1)
00009208                          3599  
00009208  E3A2                    3600      ASL.L     D1,D2
0000920A                          3601  
0000920A  E33A                    3602      ROL.B     D1,D2
0000920C                          3603  
0000920C  E37A                    3604      ROL.W     D1,D2
0000920E                          3605  
0000920E  E7D1                    3606      ROL.W     (A1)
00009210                          3607  
00009210  E7D9                    3608      ROL.W     (A1)+
00009212                          3609  
00009212  E7E1                    3610      ROL.W     -(A1)
00009214                          3611  
00009214  E3BA                    3612      ROL.L     D1,D2
00009216                          3613  
00009216  E23A                    3614      ROR.B     D1,D2
00009218                          3615  
00009218  E27A                    3616      ROR.W     D1,D2
0000921A                          3617  
0000921A  E6D1                    3618      ROR.W     (A1)
0000921C                          3619  
0000921C  E6D9                    3620      ROR.W     (A1)+
0000921E                          3621  
0000921E  E6E1                    3622      ROR.W     -(A1)
00009220                          3623  
00009220  E2BA                    3624      ROR.L     D1,D2    
00009222                          3625  
00009222  B200                    3626      CMP.B    D0,D1
00009224                          3627  
00009224  B210                    3628      CMP.B    (A0),D1
00009226                          3629  
00009226  B220                    3630      CMP.B    -(A0),D1
00009228                          3631  
00009228  B218                    3632      CMP.B    (A0)+,D1
0000922A                          3633  
0000922A  B240                    3634      CMP.W    D0,D1
0000922C                          3635  
0000922C  B248                    3636      CMP.W    A0,D1
0000922E                          3637  
0000922E  B250                    3638      CMP.W    (A0),D1
00009230                          3639  
00009230  B260                    3640      CMP.W    -(A0),D1
00009232                          3641  
00009232  B258                    3642      CMP.W    (A0)+,D1
00009234                          3643  
00009234  B280                    3644      CMP.L    D0,D1
00009236                          3645  
00009236  B288                    3646      CMP.L    A0,D1
00009238                          3647  
00009238  B290                    3648      CMP.L    (A0),D1
0000923A                          3649  
0000923A  B2A0                    3650      CMP.L    -(A0),D1
0000923C                          3651  
0000923C  B298                    3652      CMP.L    (A0)+,D1
0000923E                          3653      
0000923E  6000 0002               3654      BRA       lss      
00009242                          3655  
00009242  644E                    3656  lss BCC.B     label1
00009244                          3657  
00009244  644C                    3658      BCC.B     label2
00009246                          3659  
00009246  6E4A                    3660      BGT.B     label1
00009248                          3661  
00009248  6E48                    3662      BGT.B     label2
0000924A                          3663  
0000924A  6F46                    3664      BLE.B     label1
0000924C                          3665  
0000924C  6F44                    3666      BLE.B     label2
0000924E                          3667  
0000924E  6400 0042               3668      BCC.W     label1
00009252                          3669  
00009252  6400 003E               3670      BCC.W     label2
00009256                          3671  
00009256  6400 003A               3672      BCC.W     label3
0000925A                          3673  
0000925A  6E00 0036               3674      BGT.W     label1
0000925E                          3675  
0000925E  6E00 0032               3676      BGT.W     label2
00009262                          3677  
00009262  6E00 002E               3678      BGT.W     label3
00009266                          3679  
00009266  6F00 002A               3680      BLE.W     label1
0000926A                          3681  
0000926A  6F00 0026               3682      BLE.W     label2
0000926E                          3683  
0000926E  6F00 0022               3684      BLE.W     label3
00009272                          3685  
00009272  4E90                    3686      JSR       (A0)
00009274                          3687  
00009274  4EB8 1234               3688      JSR       $1234
00009278                          3689  
00009278  4EB9 12345678           3690      JSR       $12345678
0000927E                          3691  
0000927E  4EB9 00009292           3692      JSR       label1
00009284                          3693  
00009284  4EB9 00009292           3694      JSR       label2
0000928A                          3695  
0000928A  4EB9 00009292           3696      JSR       label3
00009290                          3697  
00009290  4E71                    3698      NOP
00009292                          3699  
00009292                          3700  label1
00009292                          3701  label2
00009292                          3702  label3
00009292                          3703  
00009292  4E75                    3704      RTS
00009294                          3705      
00009294  48A1 007F               3706      MOVEM.W   A1-A7,-(A1)
00009298                          3707  
00009298  48E1 7F00               3708      MOVEM.L   D1-D7,-(A1)
0000929C                          3709  
0000929C  48A1 0140               3710      MOVEM.W   A1/D7,-(A1)
000092A0                          3711  
000092A0  48E1 0140               3712      MOVEM.L   A1/D7,-(A1)
000092A4                          3713  
000092A4  4891 FE00               3714      MOVEM.W   A1-A7,(A1)
000092A8                          3715  
000092A8  48D1 00FE               3716      MOVEM.L   D1-D7,(A1)
000092AC                          3717  
000092AC  4891 0280               3718      MOVEM.W   A1/D7,(A1)
000092B0                          3719  
000092B0  48D1 0280               3720      MOVEM.L   A1/D7,(A1)
000092B4                          3721  
000092B4  4C99 FE00               3722      MOVEM.W   (A1)+,A1-A7
000092B8                          3723  
000092B8  4CD9 00FE               3724      MOVEM.L   (A1)+,D1-D7
000092BC                          3725  
000092BC  4C99 0280               3726      MOVEM.W   (A1)+,A1/D7
000092C0                          3727  
000092C0  4CD9 0280               3728      MOVEM.L   (A1)+,A1/D7
000092C4                          3729  
000092C4  4C91 FE00               3730      MOVEM.W   (A1),A1-A7
000092C8                          3731  
000092C8  4CD1 00FE               3732      MOVEM.L   (A1),D1-D7
000092CC                          3733  
000092CC  4C91 0280               3734      MOVEM.W   (A1),A1/D7
000092D0                          3735  
000092D0  4CD1 0280               3736      MOVEM.L   (A1),A1/D7
000092D4                          3737      
000092D4                          3738      
000092D4                          3739  
000092D4                          3740      
000092D4                          3741   
000092D4                          3742  
000092D4                          3743  
000092D4                          3744  
000092D4                          3745  
000092D4                          3746  
000092D4                          3747  
000092D4                          3748  
000092D4                          3749  
000092D4                          3750  
000092D4                          3751  
000092D4                          3752  
000092D4                          3753  
000092D4                          3754  
000092D4                          3755  
000092D4                          3756  
000092D4                          3757  
000092D4                          3758  
000092D4                          3759  
000092D4                          3760  -------------------- end include --------------------
000092D4                          3761      
000092D4                          3762      
Line 3763 WARNING: Origin value is odd (Location counter set to next highest address)
000092D4                          3763     END    START        ; last line of source

No errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA                2C00
ADDA_BACK           2C1E
ADDRESS             290F
ADDSTRTOBUFFER      1264
ARG_ADDSTRTOBUFFER_BUFFER  125A
ARG_ADDSTRTOBUFFER_BUFFERLENGTH  125E
ARG_ADDSTRTOBUFFER_STRING  1256
ARG_CLEARBUFFER_BUFFER  12B8
ARG_CLEARBUFFER_LENGTH  12BC
ARG_NUMTOHEXSTR_LENGTH  13C6
ARG_NUMTOHEXSTR_NUM  13C2
ASCIITOHEX          137A
ASCIITOHEXREGLIST   1
ASCII_VAL           16FA
ASD_1               2A02
ASD_1_BACK          2A2E
ASD_2               2A5A
ASD_2_IMD           2A70
ASD_2_IMD_B         2A96
ASD_2_REG           2AB2
BACK                2FF0
BACK2               3026
BACK3               3090
BACK4               3068
BACK5               30DC
BCLR                303C
BIT_CHECK_EXG       2272
BIT_CHECK_EXT       1D80
BIT_CHECK_MOVEP     1AF2
BIT_CHECK_SUBX      218E
BIT_SIZE_CHECK      22CE
BRA                 2B3E
BRA_BYTE            2B6A
BRA_BYTE2           2B90
BRA_BYTE3           2B9C
BRA_WORD            2BA4
BRA_WORD_BK         2BC0
BRA_WRD_BK2         2BDE
BYTEREAD            16F9
B_BUFFER            1050
CHECK_00XX          298E
CHECK_01XX          299C
CHECK_0XXX          293A
CHECK_1XXX          294A
CHECK_NOP           18B6
CHECK_OP_ABCD       225A
CHECK_OP_ADD        22F8
CHECK_OP_ADDA       2302
CHECK_OP_ADDI       1A52
CHECK_OP_ADDQ       1F4C
CHECK_OP_ADDX       22E4
CHECK_OP_AND        22AA
CHECK_OP_ANDI       1A2A
CHECK_OP_ANDI_TO_CCR  19EA
CHECK_OP_ANDI_TO_SR  19FA
CHECK_OP_ASL        24B0
CHECK_OP_ASL_NO_ROT  23D8
CHECK_OP_ASR        2492
CHECK_OP_ASR_NO_ROT  23BE
CHECK_OP_BCC        1FB6
CHECK_OP_BCS        205C
CHECK_OP_BEQ        1FCA
CHECK_OP_BGE        2076
CHECK_OP_BGT        1FA2
CHECK_OP_BHI        1FDE
CHECK_OP_BLS        1FF2
CHECK_OP_BLT        2090
CHECK_OP_BMI        2006
CHECK_OP_BNE        201A
CHECK_OP_BPL        202E
CHECK_OP_BRA        2042
CHECK_OP_BSR        1F8E
CHECK_OP_BVC        20AA
CHECK_OP_CHK        1E62
CHECK_OP_CLR        1D44
CHECK_OP_CMP        2218
CHECK_OP_CMPA       21E6
CHECK_OP_CMPI       1B3E
CHECK_OP_CMPM       21D2
CHECK_OP_DBCC       1F24
CHECK_OP_DIVS       2120
CHECK_OP_DIVU       20F8
CHECK_OP_DYNAMIC_BCHG  1ACA
CHECK_OP_DYNAMIC_BCLR  1B7A
CHECK_OP_DYNAMIC_BSET  1ADE
CHECK_OP_DYNAMIC_BTST  1AB6
CHECK_OP_EOR        21FA
CHECK_OP_EORI       1A66
CHECK_OP_EORI_TO_CCR  1A0A
CHECK_OP_EORI_TO_SR  1A1A
CHECK_OP_EXG        226E
CHECK_OP_EXT        1D6C
CHECK_OP_ILLEGAL    1CB4
CHECK_OP_JMP        1E4E
CHECK_OP_JSR        1EBC
CHECK_OP_LEA        1EA2
CHECK_OP_LINK       1E12
CHECK_OP_LSL        2474
CHECK_OP_LSL_NO_ROT  23A4
CHECK_OP_LSR        2456
CHECK_OP_LSR_NO_ROT  238A
CHECK_OP_MOVEA_L    1BD2
CHECK_OP_MOVEA_W    1C34
CHECK_OP_MOVEM      1EF4
CHECK_OP_MOVEP      1B0C
CHECK_OP_MOVEQ      20D4
CHECK_OP_MOVE_B     1BA8
CHECK_OP_MOVE_FROM_SR  1CF4
CHECK_OP_MOVE_L     1C0A
CHECK_OP_MOVE_TO_CCR  1D08
CHECK_OP_MOVE_TO_SR  1D1C
CHECK_OP_MOVE_USP   1E3A
CHECK_OP_MOVE_W     1C6C
CHECK_OP_MULS       2290
CHECK_OP_MULU       2246
CHECK_OP_NBCD       1D9A
CHECK_OP_NEG        1ED6
CHECK_OP_NEGX       1D30
CHECK_OP_NOP        1E76
CHECK_OP_NOT        1D58
CHECK_OP_OR         213A
CHECK_OP_ORI        1B20
CHECK_OP_ORI_TO_CCR  19CA
CHECK_OP_ORI_TO_SR  19DA
CHECK_OP_PEA        1DC2
CHECK_OP_RESET      1CA4
CHECK_OP_ROL        2438
CHECK_OP_ROL_NO_ROT  2370
CHECK_OP_ROR        241A
CHECK_OP_ROR_NO_ROT  2356
CHECK_OP_ROXL       2406
CHECK_OP_ROXL_NO_ROT  2342
CHECK_OP_ROXR       23F2
CHECK_OP_ROXR_NO_ROT  232E
CHECK_OP_RTE        1CC4
CHECK_OP_RTR        1CE4
CHECK_OP_RTS        1E8C
CHECK_OP_SBCD       210C
CHECK_OP_SCC        1F38
CHECK_OP_STATIC_BCHG  1A8E
CHECK_OP_STATIC_BCLR  1B5C
CHECK_OP_STATIC_BSET  1AA2
CHECK_OP_STATIC_BTST  1A7A
CHECK_OP_STOP       1C94
CHECK_OP_SUB        21AC
CHECK_OP_SUBA       216A
CHECK_OP_SUBI       1A3E
CHECK_OP_SUBQ       1F60
CHECK_OP_SUBX       217E
CHECK_OP_SWAP       1DAE
CHECK_OP_TAS        1DD6
CHECK_OP_TRAP       1DFE
CHECK_OP_TRAPV      1CD4
CHECK_OP_TST        1DEA
CHECK_OP_UNLK       1E26
CHECK_PRINT         11C2
CHECK_SIZE_BIT_FOR_SUB  2158
CHECK_XXXX          292A
CHRDONE             1396
CHRLOOP             1382
CHUMP_BYTE          31C4
CHUMP_LONG          31D4
CHUMP_WORD          31CC
CLEARBUFFER         12C0
COMMA               2917
COUNTDONE           1336
COUNTLOOP           1324
CR                  D
CUR_OP_CODE         10A0
C_GROUP_0           19C6
C_GROUP_1           1BA4
C_GROUP_2           1BCE
C_GROUP_3           1C30
C_GROUP_4           1C92
C_GROUP_5           1F20
C_GROUP_6           1F8A
C_GROUP_7           20D0
C_GROUP_8           20F4
C_GROUP_9           2154
C_GROUP_A           21C6
C_GROUP_B           21CE
C_GROUP_C           2242
C_GROUP_D           22CA
C_GROUP_E           232A
C_GROUP_F           24DA
DATA                2910
DIR_0               2C86
DIR_1               2CD6
DIVS                2D26
DIVS_BACK           2D48
DONE                1252
DOWN_ONE            2B88
DOWN_ZERO           2B80
DYNMC_BCLR          30A6
END                 3366
ERRORFILE           170E
EXT                 2926
FILEID              175A
FILENAME            1702
FINDNULLLOOPDONE    1306
FIND_1_BIT_SIZE_6   18F2
FIND_1_BIT_SIZE_8   1912
FIND_2_BIT_SIZE_7_TO_6  18D2
FIND_MOVEA_L_DIFFERENCE  1BE4
FIND_MOVEA_W_DIFF   1C46
FIRST_3             177A
FOURTH_3            177D
GO                  31DC
GOO                 3114
GOO2                3140
GROUP0_INVALID      1B98
GROUP0_SUCCESS      1B9E
GROUP1_INVALID      1BC2
GROUP1_SUCCESS      1BC8
GROUP2_INVALID      1C24
GROUP2_SUCCESS      1C2A
GROUP3_INVALID      1C86
GROUP3_SUCCESS      1C8C
GROUP4_INVALID      1F0E
GROUP4_SUCCESS      1F1A
GROUP5_INVALID      1F7E
GROUP5_SUCCESS      1F84
GROUP6_INVALID      20C4
GROUP6_SUCCESS      20CA
GROUP7_INVALID      20E8
GROUP7_SUCCESS      20EE
GROUP8_INVALID      2148
GROUP8_SUCCESS      214E
GROUP9_INVALID      21BA
GROUP9_SUCCESS      21C0
GROUPB_INVALID      2236
GROUPB_SUCCESS      223C
GROUPC_INVALID      22BE
GROUPC_SUCCESS      22C4
GROUPD_INVALID      231E
GROUPD_SUCCESS      2324
GROUPE_INVALID      24CE
GROUPE_SUCCESS      24D4
GROUP_0             1790
GROUP_1             17A2
GROUP_2             17B4
GROUP_3             17C6
GROUP_4             17D8
GROUP_5             17EA
GROUP_6             17FC
GROUP_7             180E
GROUP_8             1820
GROUP_9             1832
GROUP_A             1844
GROUP_B             1856
GROUP_C             1868
GROUP_D             187A
GROUP_E             188C
GROUP_F             189E
GT                  3352
G_BUFFER            1000
HEX_SIGN            2913
IMMDTE_VALU         2914
INVALID             336A
INVALID_ADDRESS_MESSAGE  175E
INVALID_OP          24E2
IS_VALID            10A2
JSR                 2EEA
JSR_BACK            2F02
LABEL1              9292
LABEL2              9292
LABEL3              9292
LE                  335C
LEA                 2F20
LEA_BACK            2F42
LF                  A
LOAD_0000           2F6C
LOAD_00XX           30F2
LOAD_0100           2DFC
LOAD_0101           2D72
LOAD_0110           2ADC
LOAD_1000           2C5A
LOAD_1001           2C54
LOAD_1011           2C4E
LOAD_1100           2C48
LOAD_1101           2BE6
LOAD_1110           29BC
LOAD_8              2A82
LOAD_A              32E0
LOAD_ABS_LONG       3272
LOAD_ABS_SHORT      3260
LOAD_ADDRESS        3236
LOAD_ADDRESS_W_POST_INC  3248
LOAD_ADDRESS_W_PRE_DEC  3254
LOAD_ADDR_REGISTER  3224
LOAD_BYTES          328E
LOAD_COMMA_SPACE    32BA
LOAD_D              32D2
LOAD_DATA_REGISTER  3212
LOAD_EA             3156
LOAD_FIRST3         2A8C
LOAD_GE_111         3196
LOAD_HEX_SIGN       330A
LOAD_IMMDTE         3284
LOAD_IMMDTE_VALU    3318
LOAD_LT_111         3168
LOAD_MINUS_SIGN     3334
LOAD_NEW_LINE       32B8
LOAD_NUM            3346
LOAD_PLUS_SIGN      3326
LOAD_PTHSIS_CLSD    32FC
LOAD_PTHSIS_OPEN    32EE
LOAD_THIS_SHIT      3342
LOOP                3298
LSS                 9242
MAINLOOP            1160
MAIN_CONSOLE        1430
MAIN_EA             291C
MINUS_SIGN          2916
MNEMONIC            1779
MOVEM               2F18
MOVEON              2A16
MOVE_AND_MOVEA_PARSE_EA  1932
MYBE_ASD_1          29DE
MYBE_ASD_2          2A44
MYBE_BCLR           2FB4
MYBE_BRA            2AFC
MYBE_CMPI           2F9C
MYBE_JSR            2E6A
MYBE_MOVEM          2E8A
MYBE_NEG            2E14
MYBE_ORI            2F84
MYBE_RTS1           2E2C
MYBE_RTS2           2E3A
MYBE_RTS3           2E48
MYBE_SUBQ1          2D8C
MYBE_SUBQ2          2D9C
NEG                 2EAA
NEG_BACK            2ECC
NEG_WORD            2BC8
NEWLINE             16DC
NORMAL_CHECK        18C4
NOT_BCLR            2FBE
NOT_BRA             2B0A
NOT_CMPI            2FA6
NOT_JSR             2E74
NOT_MOVEM           2E9A
NOT_NEG             2E1E
NOT_ORI             2F8E
NOT_RTS             2E5C
NULLLOOP            12F8
NUMTOHEXSTR         13D0
OP_FOUND            27DA
OP_JSR_DONE         18AC
OP_JSR_ROUTINE      177E
OP_SIZE             1778
ORI_CMPI            2FCE
OR_BACK             2CAC
OR_BACK2            2D10
OUTFILENAME         16E2
PARSE_EA_CONSTANT_BITS  1978
PLUS_SIGN           2915
POS_WORD            2BB4
PRINT_DATA          11E0
PRINT_INSTRUCTION   11D0
PRINT_OP_ADD        26E0
PRINT_OP_ADDA       26F4
PRINT_OP_ASL        2744
PRINT_OP_ASR        2730
PRINT_OP_BCS        2610
PRINT_OP_BGE        2624
PRINT_OP_BLT        2638
PRINT_OP_BRA        2660
PRINT_OP_BVC        264C
PRINT_OP_CMP        26BE
PRINT_OP_CMPI       250C
PRINT_OP_DIVS       2674
PRINT_OP_DYNAMIC_BCLR  2534
PRINT_OP_EOR        26AA
PRINT_OP_JSR        258E
PRINT_OP_LEA        25B8
PRINT_OP_LSL        2708
PRINT_OP_LSR        271C
PRINT_OP_MOVEA_L    2556
PRINT_OP_MOVEA_W    2572
PRINT_OP_MOVEB      2548
PRINT_OP_MOVEM_L    25EE
PRINT_OP_MOVEM_W    25E0
PRINT_OP_MOVE_L     2564
PRINT_OP_MOVE_W     2580
PRINT_OP_MULS       26D2
PRINT_OP_NEG        25CC
PRINT_OP_NOP        25AA
PRINT_OP_OR         2682
PRINT_OP_ORI        24F8
PRINT_OP_ROL        2758
PRINT_OP_ROR        276C
PRINT_OP_RTS        259C
PRINT_OP_SIZE       27AA
PRINT_OP_SIZE_ADDA  27C4
PRINT_OP_STATIC_BCLR  2520
PRINT_OP_SUB        2696
PRINT_OP_SUBQ       25FC
PRINT_SIZE_BYTE     2780
PRINT_SIZE_LONG     279C
PRINT_SIZE_WORD     278E
PRINT_TO_BUFFER     24EA
PTHSIS_CLSD         2912
PTHSIS_OPEN         2911
P_INVALID_OP        27CE
P_OP_ADD            28DE
P_OP_ADDA           28D6
P_OP_ASL            28FA
P_OP_ASR            28F3
P_OP_BCLR           27FE
P_OP_BCS            2889
P_OP_BGE            2890
P_OP_BLT            2897
P_OP_BRA            2882
P_OP_BVC            289E
P_OP_CMP            28C4
P_OP_CMPI           27F6
P_OP_DIVS           28A5
P_OP_EOR            28BD
P_OP_JSR            285E
P_OP_LEA            2857
P_OP_LSL            28EC
P_OP_LSR            28E5
P_OP_MOVEA_L        2811
P_OP_MOVEA_W        2828
P_OP_MOVEB          2806
P_OP_MOVEM_L        284B
P_OP_MOVEM_W        283F
P_OP_MOVE_L         281D
P_OP_MOVE_W         2834
P_OP_MULS           28CB
P_OP_NEG            2873
P_OP_NOP            2865
P_OP_OR             28B0
P_OP_ORI            27EF
P_OP_ROL            2908
P_OP_ROR            2901
P_OP_RTS            286C
P_OP_SUB            28B6
P_OP_SUBQ           287A
P_SIZE_B            27E3
P_SIZE_L            27EB
P_SIZE_W            27E7
RET_ADDSTRTOBUFFER_SUCCESS  1262
RET_NUMTOHEXSTR_STR  13C7
RET_SA              13C0
ROTATE              32A2
RTS                 2EE2
SAVED               3166
SECOND_3            177B
SIZE                14
SIZE_B              31FA
SIZE_L              320A
SIZE_W              3202
SPACE               2918
START               10A3
STRING              1744
STRIP_ASCII         139C
STRSIZE             1758
SUB30               13BC
SUB37               13B4
SUBQ                2DAC
SUBQ_BACK           2DE6
SUBQ_SAVED          2DBE
SUCCESS             172A
THIRD_3             177C
TOSAVE              C3F
TRAILING_HELPER     31FA
TRAILING_SIZE       291A
TRAPTASK13          12E4
VALIDATEPOSITIVEADDRESS  10FA
VALIDATE_END_POS    111C
VALIDATE_EVEN       113E
VALIDATE_START_ADDRESS  10F8
_00000000           131A
_ADDSTRTOBUFFER_ADDLOOP  128E
_ADDSTRTOBUFFER_BUFFERLOOP  127A
_ADDSTRTOBUFFER_END  12B2
_ADDSTRTOBUFFER_LENGTHEXCEEDED  12AC
_ADDSTRTOBUFFER_SUCCESS  12A4
_CLEARBUFFER_END    12DA
_CLEARBUFFER_LOOP   12CE
_NUMTOHEXSTR_ADDCHAR  141E
_NUMTOHEXSTR_LETTER  1416
_NUMTOHEXSTR_LOOP   1402
_NUMTOHEXSTR_POSLENGTH  13F0
_NUMTOHEXSTR_VALIDLENGTH  13FA
