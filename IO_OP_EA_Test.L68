000010A4 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/17/2019 10:41:38 AM

00000000                             1  **--------------------------------------------------------------------------
00000000                             2  * Title      : Disassembler 
00000000                             3  * Written by : TEAM REEE Denny, Daniel, Fahad
00000000                             4  * Date       : 3/16/2019 
00000000                             5  * 
00000000                             6  * 
00000000                             7  * Description: This code contains a method for you to use
00000000                             8  * with your Disassembler project IO, and a short demo of 
00000000                             9  * how to call this method in the body of the "START" code.
00000000                            10  *---------------------------------------------------------------------------
00001000                            11      ORG    $1000    
00001000                            12  *---------------------------------------------------------------------------
00001000                            13  
00001000                            14  *declare the variable startaddr with size 1 long
00001000                            15  G_BUFFER        DS.B    80  ;Used to print out the needed letters to the buffer
00001050                            16  B_BUFFER        DS.B    80  ;Bad buffer used to load bad data
000010A0                            17  CUR_OP_CODE     DS.W    1   ;Used to determine the current 4 hex OP code
000010A2                            18  IS_VALID        DS.B    1   ;Validity bit to check if a code is valid or not
000010A3                            19                              ;1 = valid, 0 = invalid
000010A3                            20                              
000010A3                            21  START:
000010A3                            22  
000010A4  43F9 00001430             23      LEA MAIN_CONSOLE, A1
000010AA  4EB9 000012E4             24      JSR TrapTask13
000010B0                            25  
000010B0                            26      
000010B0                            27      
000010B0                            28      ******************************************
000010B0                            29      **
000010B0                            30      **     ___         ___        /  __  
000010B0                            31      **    |__  | |    |__     |  /  /  \  
000010B0                            32      **    |    | |___ |___    | /   \__/ 
000010B0                            33      **                           
000010B0                            34      **
000010B0                            35      ** This is the begninning of the code for reading from files
000010B0                            36      ******************************************
000010B0                            37  
000010B0                            38  
000010B0                            39      ;Open config.cfg (trap subtasks 50-59) (this is an IO responsibility if 3 team members)
000010B0                            40      
000010B0                            41  
000010B0                            42                   ; perform task
000010B0                            43  ; Attempt to open file for input
000010B0  43F9 000016F6             44          lea     fileName,A1             ; name of file to open
000010B6  103C 0033                 45          move.b  #51,D0                  ; trap task #51, open existing file
000010BA  4E4F                      46          trap    #15                     ; perform task
000010BC  23C1 0000174E             47          move.l  D1,fileID               ; save file ID
000010C2                            48  
000010C2                            49  ; Read string from file
000010C2  43F9 00001738             50          lea     string,A1               ; location of string buffer
000010C8  2239 0000174E             51          move.l  fileID,D1               ; file ID of file to read from
000010CE  4282                      52          clr.l   D2
000010D0  343C 0014                 53          move.w  #SIZE,D2                ; number of bytes to read
000010D4  103C 0035                 54          move.b  #53,D0                  ; trap task #53, read from file
000010D8  4E4F                      55          trap    #15                     ; perform task
000010DA                            56  ; Close file when finished
000010DA  103C 0038                 57          move.b  #56,D0                  ; trap task #56, close file, D1 contains fileID
000010DE  4E4F                      58          trap    #15                     ; perform task
000010E0                            59  
000010E0                            60          
000010E0                            61  
000010E0                            62      ;load start and end address as longs
000010E0                            63      ; Start Address is in A5     
000010E0  43F9 00001738             64      LEA string, A1
000010E6  4EB9 0000137A             65      JSR AsciiToHex     ;  example of how to convert ascii to hex
000010EC  2A47                      66      MOVE.L D7, A5
000010EE                            67      
000010EE                            68      ; End Address is in A6
000010EE  5489                      69      ADDA.L #2, A1
000010F0  4EB9 0000137A             70      JSR AsciiToHex
000010F6  2C47                      71      MOVE.L D7, A6
000010F8                            72      
000010F8                            73      
000010F8                            74      ;loop from start to end, printing out the instruction or DATA if not recognized 
000010F8                            75      ;   use my method below (printStringToFileAndConsole) to print out the individual instruction (or DATA)
000010F8                            76      
000010F8                            77      ;TODO : validate start and ending address 
000010F8                            78      
000010F8                            79  Validate_Start_Address
000010F8  200D                      80      MOVE.L A5, D0
000010FA                            81  *----------------------------------------------------------------------------------
000010FA                            82  * Method Name: ValidatePositiveAddress
000010FA                            83  * Description: Checks if the start address is positve it then branches
000010FA                            84  *              to validate if the address in the config.cfg file is even
000010FA                            85  *
000010FA                            86  *  Preconditions & Input of a start address that is even
000010FA                            87  *       A1 (input) points to a memory buffer holding 8 ascii chars (not null-terminated) 
000010FA                            88  *       This function calls another function (strip_ascii)
000010FA                            89  *
000010FA                            90  *  Postconditions & Output
000010FA                            91  *   
000010FA                            92  *----------------------------------------------------------------------------------
000010FA                            93  ValidatePositiveAddress
000010FA  200D                      94      MOVE.L A5, D0
000010FC  0280 80000000             95      ANDI.L #$80000000, D0 * checking if the start address address is postive
00001102  B0BC 00000000             96      CMP.L #0, D0
00001108  6700 0034                 97      BEQ validate_even
0000110C                            98      
0000110C  43F9 00001752             99      LEA invalid_address_message, A1
00001112  103C 000E                100      MOVE.B #14, D0    
00001116  4E4F                     101      TRAP #15        
00001118                           102      
00001118                           103      
00001118  6000 0138                104      BRA DONE
0000111C                           105  
0000111C                           106  validate_end_pos
0000111C  200E                     107      MOVE.L A6, D0
0000111E  0280 80000000            108      ANDI.L #$80000000, D0 * checking if the end address address is postive
00001124  B0BC 00000000            109      CMP.L #0, D0
0000112A  6700 0012                110      BEQ validate_even
0000112E                           111      
0000112E  43F9 00001752            112      LEA invalid_address_message, A1
00001134  103C 000E                113      MOVE.B #14, D0    
00001138  4E4F                     114      TRAP #15        
0000113A                           115      
0000113A                           116      
0000113A  6000 0116                117      BRA DONE
0000113E                           118      
0000113E                           119      
0000113E                           120  validate_even
0000113E  200D                     121      MOVE.L A5, D0     *MOVE STARTING ADDRESS TO D0
00001140  0280 00000001            122      ANDI.L #$00000001, D0            
00001146  B0BC 00000000            123      CMP.L #0, D0
0000114C  6700 0012                124      BEQ mainloop
00001150                           125      *handle odd addresses        
00001150                           126      
00001150  43F9 00001752            127      LEA invalid_address_message, A1
00001156  103C 000E                128      MOVE.B #14, D0    
0000115A  4E4F                     129      TRAP #15        
0000115C                           130              
0000115C  6000 00F4                131      BRA DONE 
00001160                           132              
00001160                           133  
00001160                           134  
00001160                           135              
00001160  49F8 1000                136  mainloop    LEA G_BUFFER,A4
00001164                           137      
00001164  BDCD                     138              CMPA.L A5, A6
00001166  6D00 00EA                139              BLT DONE
0000116A                           140              
0000116A                           141              *clear both buffers 
0000116A  23FC 00001000 000012B8   142              MOVE.L #G_BUFFER, Arg_ClearBuffer_Buffer  
00001174  4EB9 000012C0            143              JSR ClearBuffer
0000117A                           144              
0000117A  23FC 00001050 000012B8   145              MOVE.L #B_BUFFER, Arg_ClearBuffer_Buffer  
00001184  4EB9 000012C0            146              JSR ClearBuffer
0000118A                           147              
0000118A                           148              * Add address to both buffers
0000118A                           149              
0000118A  23CD 000013C2            150              MOVE.L A5, Arg_NumToHexStr_Num  * the current address is stored to A5, so we need to move to the arg of converting from NumToHex
00001190  13FC 0008 000013C6       151              MOVE.B #8, Arg_NumToHexStr_Length    *this specifies the number of characters that needs to be convorted.
00001198  4EB9 000013D0            152              JSR NumToHexStr 
0000119E                           153              
0000119E  23FC 000013C7 00001256   154              MOVE.L #Ret_NumToHexStr_Str, Arg_AddStrToBuffer_String
000011A8  23FC 00001000 0000125A   155              MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer  * printing the address to the good buffer
000011B2  4EB9 00001264            156              JSR AddStrToBuffer
000011B8                           157      
000011B8                           158             
000011B8                           159      
000011B8  31DD 10A0                160              MOVE.W (A5)+, CUR_OP_CODE * read the current opcode
000011BC                           161              
000011BC                           162              
000011BC                           163               
000011BC  4EF9 00001772            164              JMP OP_JSR_Routine
000011C2                           165  
000011C2                           166  *********************************
000011C2                           167  *Checks if its valid print or invalid
000011C2                           168  * @pre checks invalid
000011C2                           169  * @post Branches to the respective branch
000011C2                           170  ************************************
000011C2                           171  check_print
000011C2  0C38 0001 10A2           172              CMP.B #1,IS_VALID
000011C8  6700 0006                173              BEQ   print_instruction
000011CC  6600 0012                174              BNE   print_data
000011D0                           175              
000011D0                           176  print_instruction  
000011D0  6600 000E                177              BNE print_data
000011D4                           178              *print the opcode if valid
000011D4  43F8 1000                179              LEA G_BUFFER,A1
000011D8  4EB9 000012E4            180              JSR TrapTask13
000011DE  6080                     181              BRA mainloop
000011E0                           182   
000011E0                           183              *otherwise print data
000011E0                           184  print_data  
000011E0  23CD 000013C2            185              MOVE.L A5, Arg_NumToHexStr_Num  * the current address is stored to A5, so we need to move to the arg of converting from NumToHex
000011E6  13FC 0008 000013C6       186              MOVE.B #8, Arg_NumToHexStr_Length    *this specifies the number of characters that needs to be convorted.
000011EE  4EB9 000013D0            187              JSR NumToHexStr 
000011F4  23FC 000013C7 00001256   188              MOVE.L #Ret_NumToHexStr_Str, Arg_AddStrToBuffer_String 
000011FE                           189              
000011FE  23FC 00001050 0000125A   190              MOVE.L #B_BUFFER, Arg_AddStrToBuffer_Buffer
00001208  4EB9 00001264            191              JSR AddStrToBuffer
0000120E                           192              * Add bad data to bad buffer
0000120E  23FC 000027C2 00001256   193              MOVE.L #P_INVALID_OP, Arg_AddStrToBuffer_String *printing data to the bad buffer
00001218  4EB9 00001264            194              JSR AddStrToBuffer
0000121E                           195              
0000121E  33F8 10A0 000013C2       196              MOVE.W CUR_OP_CODE, Arg_NumToHexStr_Num  * the current address is stored to A5, so we need to move to the arg of converting from NumToHex
00001226  13FC 0008 000013C6       197              MOVE.B #8, Arg_NumToHexStr_Length    *this specifies the number of characters that needs to be convorted.
0000122E  4EB9 000013D0            198              JSR NumToHexStr 
00001234                           199              
00001234  23FC 000013C7 00001256   200              MOVE.L #Ret_NumToHexStr_Str, Arg_AddStrToBuffer_String
0000123E  4EB9 00001264            201              JSR AddStrToBuffer
00001244                           202              
00001244  43F8 1050                203              LEA B_BUFFER,A1
00001248  4EB9 000012E4            204              JSR TrapTask13          
0000124E  6000 FF10                205              BRA mainLoop
00001252                           206  
00001252                           207  
00001252                           208  DONE            
00001252  FFFF FFFF                209              SIMHALT 
00001256                           210              
00001256                           211   
00001256                           212  **
00001256                           213  * AddStrToBuffer
00001256                           214  **
00001256                           215  * Adds the given NULL-terminated string to the specified buffer.
00001256                           216  *
00001256                           217  * Default buffer length is 80 characters, but can be modified in the argument
00001256                           218  * variables.
00001256                           219  *
00001256                           220  * If the buffer length is exceeded, either due to lack of a NULL character or
00001256                           221  * an incorrectly specified length, 1 is returned. Otherwise, 0 is returned to
00001256                           222  * indicate success.
00001256                           223  *
00001256                           224  **
00001256                           225  * @param Arg_AddStrToBuffer_String              Pointer to string
00001256                           226  * @param Arg_AddStrToBuffer_Buffer              Pointer to buffer
00001256                           227  * @param Arg_AddStrToBuffer_BufferLength        Length of buffer (default 80 chars)
00001256                           228  * @return Ret_AddStrToBuffer_Success            0 if successful, 1 otherwise.
00001256                           229  * @branch _AddStrToBuffer_FindBufferNullLoop    Loop to find NULL in buffer
00001256                           230  * @branch _AddStrToBuffer_AddLoop               Loop to add string to buffer
00001256                           231  * @branch _AddStrToBuffer_Success               Branch when string successfully added
00001256                           232  * @branch _AddStrToBuffer_StringLengthExceeded  Branch when length exceeded (either string or buffer)
00001256                           233  * @branch _AddStrToBuffer_End                   End of subroutine
00001256                           234  **
00001256                           235  Arg_AddStrToBuffer_String           DS.L    1
0000125A                           236  Arg_AddStrToBuffer_Buffer           DS.L    1
0000125E= 00000050                 237  Arg_AddStrToBuffer_BufferLength     DC.L    80
00001262                           238  Ret_AddStrToBuffer_Success          DS.B    1
00001263                           239  
00001264                           240  AddStrToBuffer:                     DS.W    0
00001264  48E7 C0C0                241      MOVEM.L     D0-D1/A0-A1, -(SP)                  * Backup registers to stack
00001268                           242      
00001268  2078 1256                243      MOVE.L      Arg_AddStrToBuffer_String, A0       * Load string pointer
0000126C  2278 125A                244      MOVE.L      Arg_AddStrToBuffer_Buffer, A1       * Load buffer pointer
00001270  2038 125E                245      MOVE.L      Arg_AddStrToBuffer_BufferLength, D0 * Load buffer length
00001274  4278 1262                246      CLR.W       Ret_AddStrToBuffer_Success          * Clear success bit
00001278  4281                     247      CLR.L       D1                                  * Clear loop counter
0000127A                           248  
0000127A                           249  _AddStrToBuffer_BufferLoop
0000127A  0C11 0000                250      CMPI.B      #0, (A1)                            * If buffer char is NULL
0000127E  6700 000E                251      BEQ         _AddStrToBuffer_AddLoop             * Start adding string to bufer
00001282                           252      
00001282  B280                     253      CMP.L       D0, D1                              * If counter >= max length
00001284  6C00 0026                254      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
00001288                           255      
00001288  5289                     256      ADDQ.L      #1, A1                              * Go to next character
0000128A  5201                     257      ADDQ.B      #1, D1                              * Increment counter
0000128C  60EC                     258      BRA         _AddStrToBuffer_BufferLoop          * Loop back
0000128E                           259      
0000128E                           260  _AddStrToBuffer_AddLoop
0000128E  0C10 0000                261      CMPI.B      #0, (A0)                            * If string char is NULL
00001292  6700 0010                262      BEQ         _AddStrToBuffer_Success             * String successfully added
00001296                           263      
00001296  B200                     264      CMP.B       D0, D1                              * If counter >= max length
00001298  6C00 0012                265      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
0000129C                           266      
0000129C  12D8                     267      MOVE.B      (A0)+, (A1)+                        * Move string char to buffer char
0000129E  5201                     268      ADDQ.B      #1, D1                              * Increment counter
000012A0  524C                     269      ADDQ.W      #1, A4
000012A2  60EA                     270      BRA         _AddStrToBuffer_AddLoop             * Loop back
000012A4                           271  
000012A4                           272  _AddStrToBuffer_Success
000012A4  12BC 0000                273      MOVE.B      #0, (A1)                            * Add NULL to end of string
000012A8  6000 0008                274      BRA         _AddStrToBuffer_End                 * Finish subroutine
000012AC                           275  
000012AC                           276  _AddStrToBuffer_LengthExceeded
000012AC  31FC 0001 1262           277      MOVE.W      #1, Ret_AddStrToBuffer_Success      * Invalidate success bit
000012B2                           278  
000012B2                           279  _AddStrToBuffer_End
000012B2  4CDF 0303                280      MOVEM.L     (SP)+, D0-D1/A0-A1                  * Restore registers from stack
000012B6  4E75                     281      RTS                  
000012B8                           282   
000012B8                           283   
000012B8                           284   
000012B8                           285  **************************************************************************
000012B8                           286  * ClearBuffer
000012B8                           287  ***********************************************************************
000012B8                           288  * Clears the given buffer by filling it with NULL. By default it will fill 80
000012B8                           289  * bytes from the buffer pointer with NULL, so make sure the buffer reserves
000012B8                           290  * that many bytes. The default can be changed.
000012B8                           291  *
000012B8                           292  **
000012B8                           293  * @param Arg_ClearBuffer_Buffer     Pointer to buffer
000012B8                           294  * @param Arg_ClearBuffer_Length     Byte length of buffer, default 80
000012B8                           295  * @branch _ClearBuffer_Loop         Buffer loop
000012B8                           296  * @branch _ClearBuffer_End          Subroutine end
000012B8                           297  *****************************************************************************
000012B8                           298  Arg_ClearBuffer_Buffer  DS.L    1
000012BC= 00000050                 299  Arg_ClearBuffer_Length  DC.L    80
000012C0                           300  
000012C0                           301  ClearBuffer:            DS.W    0
000012C0  48E7 C080                302      MOVEM.L     D0-D1/A0, -(SP)             * Backup registers to stack
000012C4  2078 12B8                303      MOVEA.L     Arg_ClearBuffer_Buffer, A0  * Load buffer address
000012C8  2038 12BC                304      MOVE.L      Arg_ClearBuffer_Length, D0  * Load buffer length
000012CC  4281                     305      CLR.L       D1                          * Clear counter
000012CE                           306      
000012CE                           307  _ClearBuffer_Loop
000012CE  B280                     308      CMP.L       D0, D1                      * If counter >= length
000012D0  6C00 0008                309      BGE         _ClearBuffer_End            * Finish subroutine
000012D4                           310      
000012D4  4218                     311      CLR.B       (A0)+                       * Clear current character in buffer
000012D6  5241                     312      ADDQ        #1, D1                      * Increment counter
000012D8  60F4                     313      BRA         _ClearBuffer_Loop           * Loop back
000012DA                           314      
000012DA                           315  _ClearBuffer_End
000012DA  4CDF 0103                316      MOVEM.L     (SP)+, D0-D1/A0             * Restore registers from stack
000012DE  4E75                     317      RTS                                     * Exit subroutine
000012E0                           318  
000012E0                           319  
000012E0  FFFF FFFF                320      SIMHALT
000012E4                           321  
000012E4                           322  
000012E4                           323  
000012E4                           324  *********************************************************************************
000012E4                           325  * Method Name: TrapTask13
000012E4                           326  * Description: Creates a file if none exists, and appends bytes to that file
000012E4                           327  *   while also echoing the written bytes to the screen.  You shouldn't need to
000012E4                           328  *   change this code.
000012E4                           329  *
000012E4                           330  * Calling Convention: Callee-Saved 
000012E4                           331  *
000012E4                           332  * Preconditions & Method Input:
000012E4                           333  *   A1 points to the null-terminated buffer to write (newline will be added for you)
000012E4                           334  *
000012E4                           335  * Postconditions & Output:
000012E4                           336  *   ALL files that were previously open will be CLOSED (FileIDs will be invalid)
000012E4                           337  *   See 'Output.txt' in directory for the results, also piped to the console
000012E4                           338  *
000012E4                           339  *
000012E4                           340  *  A2 holds a pointer to null terminated string to write (input)
000012E4                           341  *  A3 points to the null-terminated file name
000012E4                           342  *  D3 holds the number of bytes already in the file to write
000012E4                           343  *
000012E4                           344  *  D5 holds number of bytes to write
000012E4                           345  ********************************************************************************
000012E4                           346  toSave REG D0-D5/A2-A3
000012E4                           347  TrapTask13:
000012E4                           348      *******************************************************************
000012E4                           349      * Method initialization, regsiter spilling, parameter saving, etc.
000012E4                           350      *******************************************************************
000012E4  48E7 FC30                351      MOVEM.L toSave, -(SP)   ;  Callee-Saved, so save and restore     
000012E8                           352        
000012E8  2449                     353      MOVEA.L A1, A2 ; save this buffer to write
000012EA  47F9 000016E2            354      LEA outFilename, A3  ; save this for later, too
000012F0                           355        
000012F0  303C 0032                356      move #50,d0   
000012F4  4E4F                     357      trap #15 ; close all files, suggested to begin any IO 
000012F6                           358      *******************************************************************
000012F6                           359      * End Method Init
000012F6                           360      *******************************************************************
000012F6                           361  
000012F6                           362      ******************************************************************************************
000012F6                           363      * Calculate the number of bytes to write by searching for the null in the target buffer A0
000012F6                           364      ******************************************************************************************
000012F6  4285                     365      CLR.L D5 *D5 is now the number of bytes to write
000012F8                           366  nullLoop:
000012F8  1019                     367      MOVE.B (A1)+, D0
000012FA  0C00 0000                368      CMPI.B #0,D0  * compare to null
000012FE  6700 0006                369      BEQ findNullLoopDone
00001302  5245                     370      ADDI.W #1, D5
00001304  60F2                     371      BRA nullLoop
00001306                           372      
00001306                           373  findNullLoopDone:
00001306  224B                     374      MOVEA.L A3, A1 * reset A1 so it points to the file to write to (to open, next)
00001308                           375      
00001308                           376      ;check if file exists, and open with task 51 if so, otherwise 52
00001308                           377      ;(precondition here is A1 points to the null-terminated filename )
00001308  103C 0033                378      MOVE.B #51, D0      ;open file (task 51 is existing, 52 is new)
0000130C  4E4F                     379      trap #15
0000130E                           380        
0000130E                           381      if.w D0 <NE> #0 then.s         ; if file error (404, not found)
00001314  103C 0034                382          MOVE.B #52, D0             ; open new file (52 is new)
00001318  4E4F                     383          trap #15
0000131A                           384      endi
0000131A                           385      
0000131A                           386      ********************************************************************************************************* 
0000131A                           387      * Seek to END of FILE by counting the number of bytes, closing, reopening, then seeking.
0000131A                           388      *    (first, count number of bytes already in the file to obtain seek position)
0000131A                           389      *********************************************************************************************************
0000131A  4283                     390      Clr.L D3   ;TODO: reg save, D3 is now our count of bytes read
0000131C  7401                     391      MOVE.L #1, D2 ; read one byte at a time
0000131E  43F9 000016ED            392      LEA byteRead, A1
00001324                           393      
00001324                           394  countLoop:
00001324  103C 0035                395      MOVE.B #53, D0 ; try to read one byte (TODO: move out of loop)
00001328  4E4F                     396      trap #15
0000132A                           397      
0000132A  0C40 0001                398      CMPI.W #1,D0  ;1 == EOF
0000132E  6700 0006                399      BEQ countDone
00001332  5243                     400      ADDI #1, D3
00001334  60EE                     401      BRA countLoop
00001336                           402      
00001336                           403  countDone:    
00001336                           404      * close this file
00001336  303C 0038                405       move #56,d0  
0000133A  4E4F                     406       trap #15 
0000133C                           407       
0000133C                           408       * reopen the target file
0000133C  224B                     409       MOVE.L A3,A1
0000133E  303C 0033                410       MOVE #51, D0
00001342  4E4F                     411       trap #15
00001344                           412       
00001344                           413      * seek to right position, then continue with writing
00001344  2403                     414      MOVE.L D3, D2 ; move the number of bytes found in the file to D2
00001346  303C 0037                415      MOVE #55, D0  ; position file task
0000134A  4E4F                     416      trap #15
0000134C                           417  
0000134C                           418      ******************************************************************************
0000134C                           419      * Actually write the buffer to the file, after caculating the number of bytes 
0000134C                           420      *  to write and after seeking to the right location in the file for append
0000134C                           421      ******************************************************************************
0000134C                           422  
0000134C  2405                     423      MOVE.L D5, D2 ; restore this for the actually writing the buffer 
0000134E                           424      ; assumes A0 hasnt changed since handed to this method      
0000134E  224A                     425      MOVEA.L A2, A1 ; load the address of the buffer we want to write to disk
00001350                           426      ; assumes file ID is still stored in D1.L  
00001350  103C 0036                427      MOVE.B #54, D0 ; subtask 54 is write to open file (append, or?), assumes D2 holds # of bytes
00001354  4E4F                     428      trap #15
00001356                           429  
00001356                           430      ; add a newline to the file output
00001356  43F9 000016DC            431      LEA NEWLINE, A1
0000135C  103C 0036                432      MOVE.B #54, D0 
00001360  143C 0002                433      MOVE.B #2,D2  ; kills # of bytes to write from input param
00001364  4E4F                     434      trap #15
00001366                           435      
00001366                           436      ; finally, close only this file
00001366  103C 0038                437      MOVE.B #56, D0 ; close file task
0000136A  4E4F                     438      trap #15
0000136C                           439    
0000136C                           440      ; report to screen
0000136C  224A                     441      MOVEA.L A2, A1 ; load the address of the buffer we want to write to disk & screen
0000136E  103C 000D                442      MOVE.B #13, D0
00001372  4E4F                     443      trap #15
00001374                           444        
00001374                           445      ; restore context
00001374  4CDF 0C3F                446      MOVEM.L (SP)+, toSave
00001378                           447      
00001378  4E75                     448      RTS
0000137A                           449      
0000137A                           450      
0000137A                           451  *----------------------------------------------------------------------------------
0000137A                           452  * Method Name: AsciiToHex
0000137A                           453  * Written by : Berger, Modified by Nash
0000137A                           454  * Date       : 3/1/2019
0000137A                           455  * Description: Converts chars '0'-'9' and 'a'-'f' to 0-9,a-F
0000137A                           456  *              Transforms/unpacks 8 chars (8b each) pointed to by A1 into 
0000137A                           457  *              its (4b each) equivalent hex value 
0000137A                           458  *  
0000137A                           459  *  Preconditions & Input
0000137A                           460  *       A1 (input) points to a memory buffer holding 8 ascii chars (not null-terminated) 
0000137A                           461  *       This function calls another function (strip_ascii)
0000137A                           462  *
0000137A                           463  *  Postconditions & Output
0000137A                           464  *       D7 (output) holds the converted value 
0000137A                           465  *       Caller-Saved : D0 is temp, D6 is a loop var
0000137A                           466  *----------------------------------------------------------------------------------
0000137A                           467  AsciiToHexRegList REG D0,D6
0000137A                           468  AsciiToHex     
0000137A  48E7 8000                469      MOVEM.L asciiToHexRegList, -(SP)  *save context
0000137E  4287                     470      CLR.L D7 * clear our return value
00001380  7C08                     471      MOVE.L #8, D6 ; and set up our loop counter
00001382                           472  
00001382                           473  chrLoop
00001382  1019                     474      MOVE.B (A1)+,D0 * Get the first byte
00001384  4EB9 0000139C            475      jsr strip_ascii * Get rid of the ascii code    
0000138A  8E40                     476      OR.W D0,D7 * Load the bits into D7
0000138C                           477      
0000138C  5306                     478      subI.B #1,D6  *decrement our loop variable
0000138E  6700 0006                479      BEQ chrDone   *skip shifting if we are done
00001392                           480      
00001392  E987                     481      ASL.L #4,D7 * shift left 4 bits to prepare for next byte
00001394  60EC                     482      BRA chrLoop
00001396                           483  
00001396                           484  chrDone
00001396  4CDF 0001                485      MOVEM.L (SP)+,asciiToHexRegList 
0000139A  4E75                     486      RTS
0000139C                           487  
0000139C                           488  
0000139C                           489  **********************************************************************
0000139C                           490  * SUBROUTINE: strip_ascii
0000139C                           491  * remove the ascii code from the digits 0-9,a-f, or A-F
0000139C                           492  * Input Parameters: <D0> = ascii code
0000139C                           493  *
0000139C                           494  * Return parameters: D0.B = number 0...F, returned as 00...0F
0000139C                           495  * Registers used internally: D0
0000139C                           496  * Assumptions: D0 contains $30-$39, $41-$46 or $61-66
0000139C                           497  *
0000139C                           498  ***********************************************************************
0000139C                           499  strip_ascii
0000139C  B03C 0039                500        CMP.B #$39,D0 * Is it in range of 0-9?
000013A0  6F00 001A                501        BLE sub30 * Its a number
000013A4  B03C 0046                502        CMP.B #$46,D0 * Is is A...F?
000013A8  6F00 000A                503        BLE sub37 * Its A...F
000013AC  0400 0057                504        SUB.B #$57,D0 * Its a...f
000013B0  6000 000E                505        BRA ret_sa * Go back
000013B4  0400 0037                506  sub37 SUB.B #$37,D0 * Strip 37
000013B8  6000 0006                507        BRA ret_sa * Go back
000013BC  0400 0030                508  sub30 SUB.B #$30,D0 * Strip 30
000013C0  4E75                     509  ret_sa RTS * Go back
000013C2                           510  
000013C2                           511  
000013C2                           512  **
000013C2                           513  * NumToHexStr
000013C2                           514  **
000013C2                           515  * Converts the given number to a NULL-terminated hexadecimal character string
000013C2                           516  * with the specified length.
000013C2                           517  *
000013C2                           518  * By default, the number is converted to an 8-character string, but this can be
000013C2                           519  * changed in the length argument, which can be between 1 and 8 characters
000013C2                           520  * inclusive.
000013C2                           521  *
000013C2                           522  * Additionally, the conversion starts from the rightmost bit of the number, so
000013C2                           523  * keep this in mind when converting numbers with lengths < 8. For example,
000013C2                           524  * converting the number 0x0642FFFF with length = 4 results in the string 'FFFF'.
000013C2                           525  *
000013C2                           526  * The converted string will remain until the subroutine is called again, so
000013C2                           527  * make sure to store it elsewhere before calling this again.
000013C2                           528  *
000013C2                           529  **
000013C2                           530  * @param Arg_NumToHexStr_Num        Number to convert
000013C2                           531  * @param Arg_NumToHexStr_Length     Number of characters to convert, between 0-8
000013C2                           532  * @return Ret_NumToHexStr_Str       Converted hexadecimal character string
000013C2                           533  * @branch _NumToHexStr_PosLength    Branch for checking positive length
000013C2                           534  * @branch _NumToHexStr_ValidLength  Branch for checking valid length
000013C2                           535  * @branch _NumToHexStr_Loop         Loop through each digit
000013C2                           536  * @branch _NumToHexStr_Letter       Branch for converting to hex letter
000013C2                           537  * @branch _NumToHexStr_AddChar      Add character to string
000013C2                           538  **
000013C2                           539  Arg_NumToHexStr_Num     DS.L    1
000013C6= 08                       540  Arg_NumToHexStr_Length  DC.B    8
000013C7                           541  Ret_NumToHexStr_Str     DS.B    9
000013D0                           542  
000013D0                           543  NumToHexStr:            DS.W    0
000013D0  48E7 F0C0                544      MOVEM.L     D0-D3/A0-A1, -(SP)          * Backup registers to stack
000013D4  4281                     545      CLR.L       D1
000013D6  4280                     546      CLR.L       D0
000013D8  2038 13C2                547      MOVE.L      Arg_NumToHexStr_Num, D0     * Load number
000013DC  1238 13C6                548      MOVE.B      Arg_NumToHexStr_Length, D1  * Load length
000013E0  207C 000013C7            549      MOVEA.L     #Ret_NumToHexStr_Str, A0    * Load string address
000013E6                           550      
000013E6  0C01 0001                551      CMPI.B      #1, D1
000013EA  6C00 0004                552      BGE         _NumToHexStr_PosLength
000013EE  7201                     553      MOVEQ       #1, D1
000013F0                           554      
000013F0                           555  _NumToHexStr_PosLength
000013F0  0C01 0008                556      CMPI.B      #8, D1
000013F4  6F00 0004                557      BLE         _NumToHexStr_ValidLength
000013F8  7208                     558      MOVEQ       #8, D1
000013FA                           559      
000013FA                           560  _NumToHexStr_ValidLength
000013FA  2248                     561      MOVEA.L     A0, A1                      * A0 contains start, A1 contains current
000013FC  D2C1                     562      ADDA.W      D1, A1                      * Move to last digit
000013FE  4211                     563      CLR.B       (A1)                        * NULL last digit
00001400  740F                     564      MOVEQ       #$0F, D2                    * Bitmask for rightmost nibble, which is last hex
00001402                           565      
00001402                           566  _NumToHexStr_Loop
00001402  1600                     567      MOVE.B      D0, D3                      * Get byte (2 hex chars) from number
00001404  C602                     568      AND.B       D2, D3                      * Mask to get last hex char
00001406                           569      
00001406  0C03 0009                570      CMPI.B      #9, D3                      * If the value > 9
0000140A  6E00 000A                571      BGT         _NumToHexStr_Letter         * It's a letter, so branch to letter
0000140E                           572      
0000140E  0603 0030                573      ADDI.B      #'0', D3                    * Get to ASCII value for 0-9
00001412  6000 000A                574      BRA         _NumToHexStr_AddChar        * Branch to add char to string
00001416                           575  
00001416                           576  _NumToHexStr_Letter
00001416  0403 000A                577      SUBI.B      #10, D3                     * Subtract 10 first to get correct ASCII
0000141A  0603 0041                578      ADDI.B      #'A', D3                    * Get to ASCII value for A-F
0000141E                           579  
0000141E                           580  _NumToHexStr_AddChar
0000141E  1303                     581      MOVE.B      D3, -(A1)                   * Add char to string and decrement pointer
00001420  E888                     582      LSR.L       #4, D0                      * Shift the number a nibble (hex char) to the right
00001422  B3C8                     583      CMPA.L      A0, A1                      * If current pointer is > string start address
00001424  6EDC                     584      BGT         _NumToHexStr_Loop           * Loop back
00001426                           585      
00001426  42B8 13C2                586      CLR.L  Arg_NumToHexStr_Num 
0000142A                           587      
0000142A  4CDF 030F                588      MOVEM.L     (SP)+, D0-D3/A0-A1          * Restore registers from stack
0000142E  4E75                     589      RTS                                     * Exit subroutine
00001430                           590  
00001430                           591  
00001430                           592  MAIN_CONSOLE
00001430                           593     
00001430= 3D 3D 3D 3D 3D 3D ...    594        DC.B '============================================================',CR,LF
0000146E= 7C 7C 20 20 20 20 ...    595        DC.B '||                                                        ||',CR,LF
000014AC= 7C 7C 20 20 20 23 ...    596        DC.B '||   #####      ###    ##   ##                            ||',CR,LF
000014EA= 7C 7C 20 20 23 23 ...    597        DC.B '||  ##        ##   ##  ## ##                              ||',CR,LF
00001528= 7C 7C 20 23 23 20 ...    598        DC.B '|| ## ####     #####   ####                               ||',CR,LF
00001566= 7C 7C 20 23 23 20 ...    599        DC.B '|| ##    ##  ##    ##  ####                               ||',CR,LF
000015A4= 7C 7C 20 23 23 20 ...    600        DC.B '|| ##    ##  ##    ##  ## ##                              ||',CR,LF
000015E2= 7C 7C 20 20 23 23 ...    601        DC.B '||  #####     ######   ##  ##                             ||',CR,LF
00001620= 7C 7C 20 20 20 20 ...    602        DC.B '||                                                        ||',CR,LF
0000165E= 7C 7C 20 20 20 44 ...    603        DC.B '||   Daniel Yan, Fahad Alshehri, Denny Park               ||',CR,LF
0000169C= 3D 3D 3D 3D 3D 3D ...    604        DC.B '============================================================',CR,LF,0
000016DB                           605      
000016DB                           606  * Required variables and constants go here for your Disassembler
000016DB  =0000000D                607  CR                  EQU $0D
000016DB  =0000000A                608  LF                  EQU $0A
000016DC= 000D 000A 0000           609  NEWLINE             DC.W CR,LF,0  
000016E2= 4F 75 74 70 75 74 ...    610  outFilename         DC.B 'Output.txt',0
000016ED                           611  byteRead            DS.B 1
000016EE= 31 41 30 30 31 41 ...    612  ascii_val           DC.B $31,$41,$30,$30,$31,$41,$30,$30 * Test value $1A001A00
000016F6                           613  
000016F6                           614  * Variables and constants
000016F6                           615  ;CR              EQU     $D              ; ASCII code for carriage return
000016F6                           616  ;LF              EQU     $A              ; ASCII code for line feed
000016F6  =00000014                617  SIZE            EQU     20             ; Max string size
000016F6= 43 6F 6E 66 69 67 ...    618  fileName        DC.B    'Config.cfg',0   ; name of text file
00001702= 4120 6669 6C65 2...      619  errorFile       DC.W    'A file error occurred.',CR,LF,0
0000171E= 4669 6C65 2072 6...      620  success         DC.W    'File read complete.',CR,LF,0
00001738                           621  string          DS.B    SIZE            ; I/O buffer
0000174C                           622  strSize         DS.W    1               ; Size if input string
0000174E                           623  fileID          DS.L    1               ; File ID
00001752= 496E 7661 6C69 6...      624  invalid_address_message DC.W 'Invalid Hex Address' ,CR,LF,0
0000176C                           625  
0000176C                           626  
0000176C                           627      INCLUDE "OP_Code_Routines.x68"
0000176C                           628  
0000176C                           629  OP_SIZE         DS.B    1   ;This constant refers to the size of the current OP code 
0000176D                           630  MNEMONIC        DS.B    1   ;Constant for EA, first 4 bits (15-12) of a 4 hex OP code
0000176E                           631  FIRST_3         DS.B    1   ;Constant for EA, 3 bits (11-9) of a 4 hex OP code
0000176F                           632  SECOND_3        DS.B    1   ;Constant for EA, 3 bits (8-6) of a 4 hex OP code
00001770                           633  THIRD_3         DS.B    1   ;Constant for EA, 3 bits (5-3) of a 4 hex OP code
00001771                           634  FOURTH_3        DS.B    1   ;Constant for EA, 3 bits (2-0) of a 4 hex OP code
00001772                           635  
00001772                           636  
00001772                           637  
00001772                           638  
00001772                           639  
00001772                           640  OP_JSR_Routine:
00001772  48E7 C000                641      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
00001776  3038 10A0                642      MOVE.W CUR_OP_CODE,D0
0000177A  11FC 0001 10A2           643      MOVE.B #1,IS_VALID
00001780  720C                     644      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
00001782  E2A8                     645      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
00001784                           646  
00001784                           647  GROUP_0:                ;$0| ORI, BCLR (static and dynamic), CMPI                  
00001784  B03C 0000                648      CMP.B   #$0,D0                 ;Compare first nibble
00001788  6600 000C                649      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
0000178C  4EB9 000019BA            650      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
00001792  6000 010C                651      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001796                           652      
00001796                           653  GROUP_1:                ;$1| MOVE.B
00001796  B03C 0001                654      CMP.B   #$1,D0                 ;Compare first nibble
0000179A  6600 000C                655      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
0000179E  4EB9 00001B98            656      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
000017A4  6000 00FA                657      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017A8                           658  
000017A8                           659  GROUP_2:                ;$2| MOVE.L, MOVEA.L
000017A8  B03C 0002                660      CMP.B   #$2,D0                 ;Compare first nibble
000017AC  6600 000C                661      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
000017B0  4EB9 00001BC2            662      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
000017B6  6000 00E8                663      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017BA                           664  
000017BA                           665  GROUP_3:                ;$3| MOVE.W, MOVEA.W
000017BA  B03C 0003                666      CMP.B   #$3,D0                 ;Compare first nibble
000017BE  6600 000C                667      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
000017C2  4EB9 00001C24            668      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
000017C8  6000 00D6                669      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017CC                           670  
000017CC                           671  GROUP_4:                ;$4| LEA, JSR, RTS, NEG, MOVEM
000017CC  B03C 0004                672      CMP.B   #$4,D0                 ;Compare first nibble
000017D0  6600 000C                673      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
000017D4  4EB9 00001C86            674      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
000017DA  6000 00C4                675      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017DE                           676  
000017DE                           677  
000017DE                           678  GROUP_5:                ;$5| SUBQ
000017DE  B03C 0005                679      CMP.B   #$5,D0                 ;Compare first nibble
000017E2  6600 000C                680      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
000017E6  4EB9 00001F14            681      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
000017EC  6000 00B2                682      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017F0                           683  
000017F0                           684  
000017F0                           685  GROUP_6:                ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
000017F0  B03C 0006                686      CMP.B   #$6,D0                 ;Compare first nibble
000017F4  6600 000C                687      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
000017F8  4EB9 00001F7E            688      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
000017FE  6000 00A0                689      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001802                           690  
00001802                           691  
00001802                           692  GROUP_7:                ;$7| Display: DATA, $WXYZ (Unsupported)
00001802  B03C 0007                693      CMP.B   #$7,D0                 ;Compare first nibble
00001806  6600 000C                694      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
0000180A  4EB9 000020C4            695      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
00001810  6000 008E                696      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001814                           697  
00001814                           698  
00001814                           699  GROUP_8:                ;$8| DIVS, OR
00001814  B03C 0008                700      CMP.B   #$8,D0                 ;Compare first nibble
00001818  6600 000C                701      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
0000181C  4EB9 000020E8            702      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
00001822  6000 007C                703      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001826                           704  
00001826                           705  
00001826                           706  GROUP_9:                ;$9| SUB
00001826  B03C 0009                707      CMP.B   #$9,D0                 ;Compare first nibble
0000182A  6600 000C                708      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
0000182E  4EB9 00002148            709      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
00001834  6000 006A                710      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001838                           711  
00001838                           712  
00001838                           713  GROUP_A:                ;$A| Display: DATA, $WXYZ (Unsupported)
00001838  B03C 000A                714      CMP.B   #$A,D0                 ;Compare first nibble
0000183C  6600 000C                715      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
00001840  4EB9 000021BA            716      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
00001846  6000 0058                717      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000184A                           718  
0000184A                           719  
0000184A                           720  GROUP_B:                ;$B| EOR, CMP
0000184A  B03C 000B                721      CMP.B   #$B,D0                 ;Compare first nibble
0000184E  6600 000C                722      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
00001852  4EB9 000021C2            723      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
00001858  6000 0046                724      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000185C                           725  
0000185C                           726  
0000185C                           727  GROUP_C:                ;$C| MULS
0000185C  B03C 000C                728      CMP.B   #$C,D0                 ;Compare first nibble
00001860  6600 000C                729      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
00001864  4EB9 00002236            730      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
0000186A  6000 0034                731      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000186E                           732  
0000186E                           733  
0000186E                           734  GROUP_D:                 ;$D| ADD, ADDA
0000186E  B03C 000D                735      CMP.B   #$D,D0                 ;Compare first nibble
00001872  6600 000C                736      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
00001876  4EB9 000022BE            737      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
0000187C  6000 0022                738      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001880                           739  
00001880                           740  
00001880                           741  GROUP_E:                ;$E| LSR, LSL, ASR, ASL, ROL, ROR
00001880  B03C 000E                742      CMP.B   #$E,D0                 ;Compare first nibble
00001884  6600 000C                743      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
00001888  4EB9 0000231E            744      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
0000188E  6000 0010                745      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001892                           746  
00001892                           747  
00001892                           748  GROUP_F:                ;$F| Display: DATA, $WXYZ (Unsupported)
00001892  B03C 000F                749      CMP.B   #$F,D0                 ;Compare first nibble
00001896  4EB9 000024CE            750      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
0000189C  6000 0002                751      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000018A0                           752  
000018A0                           753  
000018A0                           754  OP_JSR_DONE:
000018A0  4CDF 0003                755           MOVEM.L (SP)+,D0-D1       ;Recover register D0
000018A4  4EB9 000018AA            756           JSR    check_NOP
000018AA                           757  check_NOP                           ;THIS IS A TEMPORARY ROUTINE MADE FOR NOP until EA UPDATES NOP validity
000018AA  0C78 4E71 10A0           758           CMP.W #$4E71,CUR_OP_CODE
000018B0  6700 F910                759           BEQ    check_print
000018B4  6600 0002                760           BNE    normal_CHECK
000018B8                           761  normal_CHECK         
000018B8  0C38 0001 10A2           762           CMP.B #1,IS_VALID
000018BE  6700 104E                763           BEQ    main_EA             ;This runs EA's routines after OP code portion is finished
000018C2  6600 F8FE                764           BNE    check_print
000018C6                           765  FIND_2_BIT_SIZE_7_TO_6:         ;Move the 2 bit size field relevant register
000018C6  48E7 C000                766      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
000018CA  3038 10A0                767      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
000018CE  323C 0008                768      MOVE.W   #8,D1              ;Prepare 8 bit shift to D1
000018D2  E368                     769      LSL.W    D1,D0              ;Truncate to find the 2 size bits
000018D4  E268                     770      LSR.W    D1,D0              ;Reposition the bits
000018D6  323C 0006                771      MOVE.W   #6,D1              ;Prepare 6 bit shift to D1
000018DA  E268                     772      LSR.W    D1,D0              ;Truncate to shift 2 bits to a byte
000018DC  11C0 176C                773      MOVE.B   D0,OP_SIZE         ;Move 2 size bits into OP_SIZE
000018E0  4CDF 0003                774      MOVEM.L (SP)+,D0-D1         ;Restore registers
000018E4  4E75                     775      RTS                         ;Return to stack
000018E6                           776  
000018E6                           777  FIND_1_BIT_SIZE_6:              ;Move the 1 bit size field relevant register
000018E6  48E7 C000                778      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
000018EA  3038 10A0                779      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
000018EE  323C 0009                780      MOVE.W   #9,D1              ;Prepare 9 bit shift to D1
000018F2  E368                     781      LSL.W    D1,D0              ;Truncate to find the size bit
000018F4  E268                     782      LSR.W    D1,D0              ;Reposition the bits
000018F6  323C 0006                783      MOVE.W   #6,D1              ;Prepare 6 bit shift to D1
000018FA  E268                     784      LSR.W    D1,D0              ;Truncate to shift 1 bit to a byte
000018FC  11C0 176C                785      MOVE.B   D0,OP_SIZE         ;Move 1 size bit into OP_SIZE
00001900  4CDF 0003                786      MOVEM.L (SP)+,D0-D1         ;Restore registers
00001904  4E75                     787      RTS                         ;Return to stack
00001906                           788  
00001906                           789  FIND_1_BIT_SIZE_8:         ;Move the 1 bit size field relevant register
00001906  48E7 C000                790      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
0000190A  3038 10A0                791      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
0000190E  323C 0007                792      MOVE.W   #7,D1              ;Prepare 7 bit shift to D1
00001912  E368                     793      LSL.W    D1,D0              ;Truncate to find the 1 size bit
00001914  E268                     794      LSR.W    D1,D0              ;Reposition the bits
00001916  323C 0008                795      MOVE.W   #8,D1              ;Prepare 8 bit shift to D1
0000191A  E268                     796      LSR.W    D1,D0              ;Truncate to shift 1 bit to a byte
0000191C  11C0 176C                797      MOVE.B   D0,OP_SIZE         ;Move 1 size bit into OP_SIZE
00001920  4CDF 0003                798      MOVEM.L (SP)+,D0-D1         ;Restore registers
00001924  4E75                     799      RTS                         ;Return to stack
00001926                           800  
00001926                           801  MOVE_AND_MOVEA_PARSE_EA:       ;Move the 3 bit dynamic register bits to proper register
00001926                           802     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001926  3038 10A0                803      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
0000192A  323C 000A                804      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
0000192E  E368                     805      LSL.W   D1,D0            ;Truncate to find the last 6 bits
00001930  E268                     806      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
00001932  3E00                     807      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
00001934  323C 0003                808      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
00001938  E26F                     809      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
0000193A  3A07                     810      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
0000193C  323C 000D                811      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
00001940  E368                     812      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
00001942  E268                     813      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001944  3800                     814      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
00001946  3038 10A0                815      MOVE.W CUR_OP_CODE,D0     ;Move current OP code into D0     
0000194A  323C 0004                816      MOVE.W  #4,D1             ;Prepare 4 bit shift to D1
0000194E  E368                     817      LSL.W   D1,D0             ;Truncate to find bits 11-6
00001950  E268                     818      LSR.W   D1,D0             ;Reposition bits
00001952  323C 0006                819      MOVE.W  #6,D1             ;Prepare 6 bit shift to D1
00001956  E268                     820      LSR.W   D1,D0             ;Truncate the SRC Reg/Mode bits
00001958  323C 0003                821      MOVE.W  #3,D1             ;Prepare a 3 bit shift to D1 for DST Reg/Mode
0000195C  3C00                     822      MOVE.W  D0,D6             ;Copy over the current 6 bits to D6
0000195E  E268                     823      LSR.W   D1,D0             ;Truncate DST Mode  
00001960  3E00                     824      MOVE.W  D0,D7             ;Move DST Reg to D7
00001962  323C 000D                825      MOVE.W  #13,D1             
00001966  E36E                     826      LSL.W   D1,D6             ;Truncate 13 bits in D6
00001968  E26E                     827      LSR.W   D1,D6             ;Reposition D6
0000196A                           828                                ;D6 now contains the DST Reg
0000196A                           829     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
0000196A  4E75                     830      RTS                     ;Return to stack
0000196C                           831  PARSE_EA_CONSTANT_BITS:
0000196C                           832      *MNEMONIC SHIFT
0000196C  3038 10A0                833      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D0
00001970  323C 000C                834      MOVE.W #12,D1               ;Prepare a bit shift of 12 into D1
00001974  E268                     835      LSR.W D1,D0                 ;Shift 12 bits from D0 right
00001976  11C0 176D                836      MOVE.B D0,MNEMONIC          ;Set MNEMONIC to D0
0000197A                           837      *FIRST_3 SHIFT
0000197A  323C 0009                838      MOVE.W #9,D1                ;Prepare a bit shift of 9 into D1
0000197E  3038 10A0                839      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
00001982  E948                     840      LSL.W #4,D0                 ;Shift out bits 15-12 in D0
00001984  E848                     841      LSR.W #4,D0                 ;Reposition D0
00001986  E268                     842      LSR.W  D1,D0                ;Shift D0 9 bits right
00001988  11C0 176E                843      MOVE.B D0,FIRST_3           ;Set FIRST_3 to D0
0000198C                           844      *SECOND_3 SHIFT
0000198C  3038 10A0                845      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
00001990  EF48                     846      LSL.W #7,D0                 ;Shift out bits 15-9 in D0
00001992  EE48                     847      LSR.W #7,D0                 ;Reposition D0
00001994  EC48                     848      LSR.W #6,D0                 ;Shift D0 6 bits right
00001996  11C0 176F                849      MOVE.B D0,SECOND_3          ;Set SECOND_3 to D0
0000199A                           850      *THIRD_3 SHIFT
0000199A  3038 10A0                851      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
0000199E  E648                     852      LSR.W #3,D0                 ;Shift D0 3 bits right
000019A0  323C 000D                853      MOVE.W #13,D1               ;Prepare a 13 bit shift into D1
000019A4  E368                     854      LSL.W D1,D0                 ;Truncate first 13 bits of D0
000019A6  E268                     855      LSR.W D1,D0                 ;Reposition D0
000019A8  11C0 1770                856      MOVE.B D0,THIRD_3           ;Set THIRD_3 to D0
000019AC                           857      *FOURTH_3 SHIFT
000019AC  3038 10A0                858      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000019B0  E368                     859      LSL.W D1,D0                 ;Grab the fourth 3-bit group
000019B2  E268                     860      LSR.W D1,D0                 ;Shift D0 back into position
000019B4  11C0 1771                861      MOVE.B D0,FOURTH_3          ;Set FOURTH_3 to Do
000019B8  4E75                     862      RTS                         ;Return to stack
000019BA                           863  
000019BA                           864  
000019BA                           865  
000019BA                           866  
000019BA                           867  
000019BA                           868  C_GROUP_0:
000019BA  48E7 C000                869      MOVEM.L D0-D1, -(SP)            ;Backup registers
000019BE                           870      
000019BE                           871  CHECK_OP_ORI_TO_CCR:
000019BE  3038 10A0                872      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019C2  B07C 003C                873      CMP.W #$003C,D0                 ;Compare the direct full bits
000019C6  6700 01C4                874      BEQ GROUP0_INVALID              ;INVALID OP code found
000019CA  6600 0002                875      BNE CHECK_OP_ORI_TO_SR          ;Check next routine
000019CE                           876      
000019CE                           877  CHECK_OP_ORI_TO_SR:
000019CE  3038 10A0                878      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019D2  B07C 007C                879      CMP.W #$007C,D0                 ;Compare the direct full bits
000019D6  6700 01B4                880      BEQ GROUP0_INVALID              ;INVALID OP code found
000019DA  6600 0002                881      BNE CHECK_OP_ANDI_TO_CCR        ;Check next routine
000019DE                           882      
000019DE                           883  CHECK_OP_ANDI_TO_CCR:
000019DE  3038 10A0                884      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019E2  B07C 023C                885      CMP.W #$023C,D0                 ;Compare the direct full bits
000019E6  6700 01A4                886      BEQ GROUP0_INVALID              ;INVALID OP code found
000019EA  6600 0002                887      BNE CHECK_OP_ANDI_TO_SR         ;Check next routine
000019EE                           888      
000019EE                           889  CHECK_OP_ANDI_TO_SR:
000019EE  3038 10A0                890      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019F2  B07C 027C                891      CMP.W #$027C,D0                 ;Compare the direct full bits
000019F6  6700 0194                892      BEQ GROUP0_INVALID              ;INVALID OP code found
000019FA  6600 0002                893      BNE CHECK_OP_EORI_TO_CCR                ;Check next routine
000019FE                           894  
000019FE                           895  CHECK_OP_EORI_TO_CCR:
000019FE  3038 10A0                896      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A02  B07C 0A3C                897      CMP.W #$0A3C,D0                 ;Compare the direct full bits
00001A06  6700 0184                898      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A0A  6600 0002                899      BNE CHECK_OP_EORI_TO_SR         ;Check next routine
00001A0E                           900      
00001A0E                           901  CHECK_OP_EORI_TO_SR:
00001A0E  3038 10A0                902      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A12  B07C 0A7C                903      CMP.W #$0A7C,D0                 ;Compare the direct full bits
00001A16  6700 0174                904      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A1A  6600 0002                905      BNE CHECK_OP_ANDI               ;Check next routine
00001A1E                           906      
00001A1E                           907  CHECK_OP_ANDI:
00001A1E  3038 10A0                908      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A22  0240 FF00                909      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001A26  B07C 0200                910      CMP.W #$0200,D0                 ;Compare the appropriate masked bits
00001A2A  6700 0160                911      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A2E  6600 0002                912      BNE CHECK_OP_SUBI               Check next routine
00001A32                           913      
00001A32                           914  CHECK_OP_SUBI:
00001A32  3038 10A0                915      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A36  0240 FF00                916      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001A3A  B07C 0400                917      CMP.W #$0400,D0                 ;Compare the appropriate masked bits
00001A3E  6700 014C                918      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A42  6600 0002                919      BNE CHECK_OP_ADDI               ;Check next routine
00001A46                           920  
00001A46                           921  CHECK_OP_ADDI:
00001A46  3038 10A0                922      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A4A  0240 FF00                923      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001A4E  B07C 0600                924      CMP.W #$0600,D0                 ;Compare the appropriate masked bits
00001A52  6700 0138                925      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A56  6600 0002                926      BNE CHECK_OP_EORI               ;Check next routine 
00001A5A                           927  
00001A5A                           928  CHECK_OP_EORI:
00001A5A  3038 10A0                929      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A5E  0240 FF00                930      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001A62  B07C 0A00                931      CMP.W #$0A00,D0                 ;Compare the appropriate masked bits
00001A66  6700 0124                932      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A6A  6600 0002                933      BNE CHECK_OP_STATIC_BTST        ;Check next routine
00001A6E                           934      
00001A6E                           935  CHECK_OP_STATIC_BTST:
00001A6E  3038 10A0                936      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A72  0240 FFC0                937      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001A76  B07C 0800                938      CMP.W #$0800,D0                 ;Compare the appropriate masked bits
00001A7A  6700 0110                939      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A7E  6600 0002                940      BNE CHECK_OP_STATIC_BCHG        ;Check next routine
00001A82                           941      
00001A82                           942  CHECK_OP_STATIC_BCHG:
00001A82  3038 10A0                943      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A86  0240 FFC0                944      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001A8A  B07C 0840                945      CMP.W #$0840,D0                 ;Compare the appropriate masked bits
00001A8E  6700 00FC                946      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A92  6600 0002                947      BNE CHECK_OP_STATIC_BSET        ;Check next routine
00001A96                           948  
00001A96                           949  CHECK_OP_STATIC_BSET:
00001A96  3038 10A0                950      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A9A  0240 FFC0                951      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001A9E  B07C 08C0                952      CMP.W #$08C0,D0                 ;Compare the appropriate masked bits
00001AA2  6700 00E8                953      BEQ GROUP0_INVALID              ;INVALID OP code found   
00001AA6  6600 0002                954      BNE CHECK_OP_DYNAMIC_BTST       ;Check next routine
00001AAA                           955  
00001AAA                           956  CHECK_OP_DYNAMIC_BTST:
00001AAA  3038 10A0                957      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001AAE  0240 F1C0                958      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
00001AB2  B07C 0100                959      CMP.W #$0100,D0                 ;Compare the appropriate masked bits
00001AB6  6700 00D4                960      BEQ GROUP0_INVALID              ;INVALID OP code found
00001ABA  6600 0002                961      BNE CHECK_OP_DYNAMIC_BCHG       ;Check next routine
00001ABE                           962  
00001ABE                           963  CHECK_OP_DYNAMIC_BCHG:
00001ABE  3038 10A0                964      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001AC2  0240 F1C0                965      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
00001AC6  B07C 0140                966      CMP.W #$0140,D0                 ;Compare the appropriate masked bits 
00001ACA  6700 00C0                967      BEQ GROUP0_INVALID              ;INVALID OP code found
00001ACE  6600 0002                968      BNE CHECK_OP_DYNAMIC_BSET       ;Check next routine
00001AD2                           969      
00001AD2                           970  CHECK_OP_DYNAMIC_BSET:
00001AD2                           971  
00001AD2  3038 10A0                972      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001AD6  0240 F1C0                973      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
00001ADA  B07C 01C0                974      CMP.W   #$01C0,D0               ;Compare the appropriate masked bits 
00001ADE  6700 0006                975      BEQ     BIT_CHECK_MOVEP         ;Check special case for MOVEP
00001AE2  6600 001C                976      BNE     CHECK_OP_MOVEP          ;Check next routine
00001AE6                           977  
00001AE6                           978  BIT_CHECK_MOVEP:                                ;This is a special case check for MOVEP
00001AE6  3038 10A0                979      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001AEA  323C 000A                980      MOVE.W  #10,D1                  ;Prepare a 10-bit shift
00001AEE  E368                     981      LSL.W   D1,D0                   ;Shift out 10 bits left 
00001AF0  E268                     982      LSR.W   D1,D0                   ;Reposition D0 for last 6 bits
00001AF2  E648                     983      LSR.W   #3,D0                   ;Shift out 3 bits right, D0 contains bits 5-3
00001AF4  B07C 0001                984      CMP.W   #$1,D0                  ;Compare bits to D0
00001AF8  6700 0006                985      BEQ     CHECK_OP_MOVEP          ;If bits are $1 then it's addressing, goto MOVEP
00001AFC  6600 008E                986      BNE     GROUP0_INVALID          ;If not then it's DYNAMIC_BSET which is invalid
00001B00                           987      
00001B00                           988  CHECK_OP_MOVEP:
00001B00  3038 10A0                989      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001B04  0240 F138                990      ANDI.W #$F138,D0                ;Mask relevant bits to D0
00001B08  B07C 0108                991      CMP.W #$0108,D0                 ;Compare the appropriate masked bits
00001B0C  6700 09C8                992      BEQ INVALID_OP                  ;INVALID OP code found
00001B10  6600 0002                993      BNE CHECK_OP_ORI                ;Check next routine
00001B14                           994  
00001B14                           995  CHECK_OP_ORI:
00001B14  3038 10A0                996      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001B18  0240 FF00                997      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001B1C  B07C 0000                998      CMP.W   #$0000,D0               ;Compare the appropriate masked bits     
00001B20  6600 0010                999      BNE     CHECK_OP_CMPI           ;Branch to next comparison if not equal
00001B24  4EB8 18C6               1000      JSR     FIND_2_BIT_SIZE_7_TO_6
00001B28  4EB9 000024EC           1001      JSR     PRINT_OP_ORI            ;Print the OP code if equal    
00001B2E  6000 0062               1002      BRA     GROUP0_SUCCESS          ;Finish routine
00001B32                          1003      
00001B32                          1004  CHECK_OP_CMPI:
00001B32  3038 10A0               1005      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001B36  0240 FF00               1006      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001B3A  B07C 0C00               1007      CMP.W   #$0C00,D0               ;Compare the appropriate masked bits   
00001B3E  6600 0010               1008      BNE     CHECK_OP_STATIC_BCLR    ;Branch to next comparison if not equal       
00001B42  4EB8 18C6               1009      JSR     FIND_2_BIT_SIZE_7_TO_6
00001B46  4EB9 00002500           1010      JSR     PRINT_OP_CMPI           ;Print the OP code if equal
00001B4C  6000 0044               1011      BRA     GROUP0_SUCCESS          ;Finish routine
00001B50                          1012      
00001B50                          1013  CHECK_OP_STATIC_BCLR:
00001B50  3038 10A0               1014      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001B54  0240 FF00               1015      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001B58  B07C 0800               1016      CMP.W   #$0800,D0               ;Compare the appropriate masked bits
00001B5C  6600 0010               1017      BNE     CHECK_OP_DYNAMIC_BCLR   ;Branch to next comparison if not equal
00001B60  4EB8 18C6               1018      JSR     FIND_2_BIT_SIZE_7_TO_6
00001B64  4EB9 00002514           1019      JSR     PRINT_OP_STATIC_BCLR    ;Print the OP code if equal
00001B6A  6000 0026               1020      BRA     GROUP0_SUCCESS          ;Finish routine
00001B6E                          1021      
00001B6E                          1022  CHECK_OP_DYNAMIC_BCLR:
00001B6E  3038 10A0               1023      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001B72  0240 0180               1024      ANDI.W  #$0180,D0               ;Mask relevant bits to D0
00001B76  B07C 0180               1025      CMP.W   #$0180,D0               ;Compare the appropriate masked bits
00001B7A  6600 0010               1026      BNE     GROUP0_INVALID          ;If not equal this must be an invalid OP code
00001B7E  4EB8 18C6               1027      JSR     FIND_2_BIT_SIZE_7_TO_6
00001B82  4EB9 00002528           1028      JSR     PRINT_OP_DYNAMIC_BCLR   ;Print the OP code if equal
00001B88  6000 0008               1029      BRA     GROUP0_SUCCESS          ;Finish routine
00001B8C                          1030  
00001B8C                          1031  GROUP0_INVALID:                     ;Checks have been finished, invalid OP code has been found
00001B8C  4EB9 000024D6           1032      JSR INVALID_OP                  ;INVALID OP code found
00001B92                          1033  GROUP0_SUCCESS:                     ;Checks have been finished,a valid OP code has been found
00001B92  4CDF 0003               1034      MOVEM.L (SP)+,D0-D1             ;Restore registers
00001B96  4E75                    1035      RTS                             ;Return to stack
00001B98                          1036      
00001B98                          1037  C_GROUP_1:
00001B98  48E7 C000               1038      MOVEM.L D0-D1,-(SP)             ;Save registers to stack
00001B9C                          1039  
00001B9C                          1040  CHECK_OP_MOVE_B:
00001B9C  3038 10A0               1041      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0          
00001BA0  0240 F000               1042      ANDI.W  #$F000,D0               ;Mask relevant bits to D0
00001BA4  B07C 1000               1043      CMP.W   #$1000,D0               ;Compare the appropriate masked bits 
00001BA8  6600 000C               1044      BNE     GROUP1_INVALID          ;Invalid OP code has been found
00001BAC  4EB9 0000253C           1045      JSR     PRINT_OP_MOVEB          ;Print the OP code if equal
00001BB2  6000 0008               1046      BRA     GROUP1_SUCCESS          ;Finish routine
00001BB6                          1047      
00001BB6                          1048  GROUP1_INVALID:
00001BB6  4EB9 000024D6           1049      JSR INVALID_OP                  ;Invalid OP code found
00001BBC                          1050  GROUP1_SUCCESS:
00001BBC  4CDF 0003               1051      MOVEM.L (SP)+,D0-D1             ;Restore register
00001BC0  4E75                    1052      RTS                             ;Return to stack
00001BC2                          1053  C_GROUP_2:
00001BC2  48E7 E000               1054      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
00001BC6                          1055  
00001BC6                          1056  CHECK_OP_MOVEA_L:
00001BC6  3038 10A0               1057      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0  
00001BCA  0240 F000               1058      ANDI.W #$F000,D0                ;Mask relevant bits to D0
00001BCE  B07C 2000               1059      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
00001BD2  4EF9 00001BD8           1060      JMP FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
00001BD8                          1061      
00001BD8                          1062  FIND_MOVEA_L_DIFFERENCE:            ;Finds difference between MOVEA and MOVE
00001BD8  3038 10A0               1063      MOVE.W   CUR_OP_CODE,D0         ;Move current OP code into D0
00001BDC  323C 0007               1064      MOVE.W   #7,D1                  ;Prepare 7 bit shift to D1
00001BE0  E368                    1065      LSL.W    D1,D0                  ;Truncate to find the 3 address mode bits
00001BE2  E268                    1066      LSR.W    D1,D0                  ;Reposition the bits
00001BE4  323C 0006               1067      MOVE.W   #6,D1                  ;Prepare 6 bit shift to D1
00001BE8  E268                    1068      LSR.W    D1,D0                  ;Truncate to shift 3 bits to a register
00001BEA  3400                    1069      MOVE.W   D0,D2                  ;Move 3 address mode bits into D6
00001BEC  B47C 0001               1070      CMP.W   #$1,D2                  ;Check if the address mode value is MOVEA
00001BF0  6600 000C               1071      BNE     CHECK_OP_MOVE_L         ;Branch if not equal to check MOVE
00001BF4  4EB9 0000254A           1072      JSR     PRINT_OP_MOVEA_L        ;Print the OP code if it's a match
00001BFA  6000 0022               1073      BRA     GROUP2_SUCCESS          ;Finish routine
00001BFE                          1074      
00001BFE                          1075      
00001BFE                          1076  CHECK_OP_MOVE_L:
00001BFE  3038 10A0               1077      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001C02  0240 F000               1078      ANDI.W #$F000,D0                ;Mask relevant bits to D0
00001C06  B07C 2000               1079      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
00001C0A  6600 000C               1080      BNE GROUP2_INVALID              ;If not equal, OP code is invalid
00001C0E  4EB9 00002558           1081      JSR PRINT_OP_MOVE_L             ;Print out MOVE.L
00001C14  6000 0008               1082      BRA GROUP2_SUCCESS              ;Finish routine
00001C18                          1083      
00001C18                          1084  GROUP2_INVALID:    
00001C18  4EB9 000024D6           1085      JSR INVALID_OP                  ;Invalid OP code found
00001C1E                          1086  GROUP2_SUCCESS:
00001C1E  4CDF 0007               1087      MOVEM.L (SP)+,D0-D2             ;Restore register
00001C22  4E75                    1088      RTS                             ;Return to stack
00001C24                          1089  C_GROUP_3:
00001C24  48E7 E000               1090      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
00001C28                          1091      
00001C28                          1092  CHECK_OP_MOVEA_W:
00001C28  3038 10A0               1093      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001C2C  0240 F000               1094      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00001C30  B07C 3000               1095      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
00001C34  4EF9 00001C3A           1096      JMP      FIND_MOVEA_W_DIFF     ;Custom routine to differentiate MOVE and MOVEA
00001C3A                          1097  
00001C3A                          1098      
00001C3A                          1099  FIND_MOVEA_W_DIFF:                 ;Finds difference between MOVEA and MOVE
00001C3A  3038 10A0               1100      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001C3E  323C 0007               1101      MOVE.W   #7,D1                 ;Prepare 7 bit shift to D1
00001C42  E368                    1102      LSL.W    D1,D0                 ;Truncate to find the 3 address mode bits
00001C44  E268                    1103      LSR.W    D1,D0                 ;Reposition the bits
00001C46  323C 0006               1104      MOVE.W   #6,D1                 ;Prepare 6 bit shift to D1
00001C4A  E268                    1105      LSR.W    D1,D0                 ;Truncate to shift 3 bits to a register
00001C4C  3400                    1106      MOVE.W   D0,D2                 ;Move 3 address mode bits into D6
00001C4E  B47C 0001               1107      CMP.W    #$1,D2                ;Check if the address mode value is MOVEA
00001C52  6600 000C               1108      BNE      CHECK_OP_MOVE_W       ;If bits do not match, try MOVE 
00001C56  4EB9 00002566           1109      JSR      PRINT_OP_MOVEA_W      ;Print the OP code if it's a match
00001C5C  6000 0022               1110      BRA      GROUP3_SUCCESS        ;Finish routine
00001C60                          1111      
00001C60                          1112  CHECK_OP_MOVE_W:
00001C60  3038 10A0               1113      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001C64  0240 F000               1114      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00001C68  B07C 3000               1115      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
00001C6C  6600 000C               1116      BNE      GROUP3_INVALID        ;INVALID OP code found
00001C70  4EB9 00002574           1117      JSR      PRINT_OP_MOVE_W       ;Print the OP code if it's a match
00001C76  6000 0008               1118      BRA      GROUP3_SUCCESS        ;Finish routine
00001C7A                          1119      
00001C7A                          1120  GROUP3_INVALID:
00001C7A  4EB9 000024D6           1121      JSR INVALID_OP                 ;INVALID OP code found
00001C80                          1122  GROUP3_SUCCESS:
00001C80  4CDF 0007               1123      MOVEM.L (SP)+,D0-D2            ;Restore registers from stack
00001C84  4E75                    1124      RTS                            ;Return to stack
00001C86                          1125  
00001C86                          1126  C_GROUP_4:
00001C86  2F00                    1127      MOVE.L  D0,-(SP)            ;Save registers
00001C88                          1128      
00001C88                          1129  CHECK_OP_STOP:
00001C88  3038 10A0               1130      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001C8C  B07C 4E72               1131      CMP.W  #$4E72,D0                ;Compare the appropriate bits
00001C90  6700 0270               1132      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001C94  6600 0002               1133      BNE    CHECK_OP_RESET           ;Check next OP code
00001C98                          1134      
00001C98                          1135  CHECK_OP_RESET:
00001C98  3038 10A0               1136      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001C9C  B07C 4E70               1137      CMP.W  #$4E70,D0                ;Compare the appropriate bits
00001CA0  6700 0260               1138      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CA4  6600 0002               1139      BNE    CHECK_OP_ILLEGAL         ;Check next OP code
00001CA8                          1140          
00001CA8                          1141  CHECK_OP_ILLEGAL:
00001CA8  3038 10A0               1142      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CAC  B07C 4AFC               1143      CMP.W  #$4AFC,D0                ;Compare the appropriate bits
00001CB0  6700 0250               1144      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CB4  6600 0002               1145      BNE    CHECK_OP_RTE             ;Check next OP code
00001CB8                          1146      
00001CB8                          1147  CHECK_OP_RTE:    
00001CB8  3038 10A0               1148      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CBC  B07C 4E73               1149      CMP.W #$4E73,D0                 ;Compare the appropriate bits
00001CC0  6700 0240               1150      BEQ   GROUP4_INVALID            ;INVALID OP code found
00001CC4  6600 0002               1151      BNE   CHECK_OP_TRAPV            ;Check next OP code
00001CC8                          1152      
00001CC8                          1153  CHECK_OP_TRAPV:
00001CC8  3038 10A0               1154      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CCC  B07C 4E76               1155      CMP.W  #$4E76,D0                ;Compare the appropriate bits
00001CD0  6700 0230               1156      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CD4  6600 0002               1157      BNE    CHECK_OP_RTR             ;Check next OP code
00001CD8                          1158      
00001CD8                          1159  CHECK_OP_RTR:
00001CD8  3038 10A0               1160      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CDC  B07C 4E77               1161      CMP.W #$4E77,D0                 ;Compare the appropriate bits
00001CE0  6700 0220               1162      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CE4  6600 0002               1163      BNE    CHECK_OP_MOVE_FROM_SR    ;Check next OP code
00001CE8                          1164  
00001CE8                          1165  
00001CE8                          1166  CHECK_OP_MOVE_FROM_SR:
00001CE8  3038 10A0               1167      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CEC  0240 FFC0               1168      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001CF0  B07C 40C0               1169      CMP.W  #$40C0,D0                ;Compare the appropriate masked bits
00001CF4  6700 020C               1170      BEQ    GROUP4_INVALID           ;INVALID OP code found  
00001CF8  6600 0002               1171      BNE    CHECK_OP_MOVE_TO_CCR     ;Check next OP code
00001CFC                          1172      
00001CFC                          1173  CHECK_OP_MOVE_TO_CCR:
00001CFC  3038 10A0               1174      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D00  0240 FFC0               1175      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001D04  B07C 44C0               1176      CMP.W  #$44C0,D0                ;Compare the appropriate masked bits
00001D08  6700 01F8               1177      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D0C  6600 0002               1178      BNE    CHECK_OP_MOVE_TO_SR      ;Check next OP code
00001D10                          1179      
00001D10                          1180  CHECK_OP_MOVE_TO_SR:
00001D10  3038 10A0               1181      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D14  0240 FFC0               1182      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001D18  B07C 46C0               1183      CMP.W  #$46C0,D0                ;Compare the appropriate masked bits
00001D1C  6700 01E4               1184      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D20  6600 0002               1185      BNE    CHECK_OP_NEGX            ;Check next OP code
00001D24                          1186      
00001D24                          1187  CHECK_OP_NEGX:
00001D24  3038 10A0               1188      MOVE.W CUR_OP_CODE,D0            ;Move current instruction set into D0
00001D28  0240 FF00               1189      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001D2C  B07C 4000               1190      CMP.W  #$4000,D0                ;Compare the appropriate masked bits
00001D30  6700 01D0               1191      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D34  6600 0002               1192      BNE    CHECK_OP_CLR             ;Check next OP code
00001D38                          1193      
00001D38                          1194  CHECK_OP_CLR:
00001D38  3038 10A0               1195      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D3C  0240 FF00               1196      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001D40  B07C 4200               1197      CMP.W  #$4200,D0                ;Compare the appropriate masked bits
00001D44  6700 01BC               1198      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D48  6600 0002               1199      BNE    CHECK_OP_NOT             ;Check next OP code
00001D4C                          1200      
00001D4C                          1201  CHECK_OP_NOT:
00001D4C  3038 10A0               1202      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D50  0240 FF00               1203      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001D54  B07C 4600               1204      CMP.W  #$4600,D0                ;Compare the appropriate masked bits
00001D58  6700 01A8               1205      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D5C  6600 0002               1206      BNE    CHECK_OP_EXT             ;Check next OP code
00001D60                          1207      
00001D60                          1208  CHECK_OP_EXT:
00001D60  3038 10A0               1209      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D64  0240 FF88               1210      ANDI.W #$FF88,D0                ;Mask relevant bits to D0
00001D68  B07C 4880               1211      CMP.W  #$4880,D0                ;Compare the appropriate masked bits
00001D6C  6700 0194               1212      BEQ    GROUP4_INVALID           ;INVALID OP code BIT_CHECK_EXT
00001D70  6600 001C               1213      BNE    CHECK_OP_NBCD            ;Check next OP code
00001D74                          1214  
00001D74                          1215  BIT_CHECK_EXT:    
00001D74  3038 10A0               1216      MOVE.W CUR_OP_CODE,D0           ;This is a special case to check against MOVEM
00001D78  323C 000A               1217      MOVE.W #10,D1                   ;Prepare a 10 bit shift into D1
00001D7C  E368                    1218      LSL.W  D1,D0                    ;Shift D0 left 10 bits
00001D7E  E068                    1219      LSR.W  D0,D0                    ;Reposition D0
00001D80  E648                    1220      LSR.W  #3,D0                    ;Shift D0 3 bits
00001D82  B078 0000               1221      CMP.W  %000,D0                  ;Check the specific bits needed to differentiate EXT
00001D86  6700 017A               1222      BEQ    GROUP4_INVALID           ;This means that this OP code is EXT
00001D8A  6600 015C               1223      BNE    CHECK_OP_MOVEM           ;This is the only other possibility 
00001D8E                          1224      
00001D8E                          1225  CHECK_OP_NBCD:
00001D8E  3038 10A0               1226      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D92  0240 FFC0               1227      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0           
00001D96  B07C 4800               1228      CMP.W  #$4800,D0                ;Compare the appropriate masked bits
00001D9A  6700 0166               1229      BEQ    GROUP4_INVALID           ;INVALID OP code
00001D9E  6600 0002               1230      BNE    CHECK_OP_SWAP            ;Check next OP code
00001DA2                          1231      
00001DA2                          1232  CHECK_OP_SWAP:                      ; This must go before CHECK_OP PEA as first 3 nibbles can be equivalent
00001DA2  3038 10A0               1233      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DA6  0240 FF48               1234      ANDI.W #$FF48,D0                ;Mask relevant bits to D0
00001DAA  B07C 4840               1235      CMP.W  #$4840,D0                ;Compare the appropriate masked bits
00001DAE  6700 0152               1236      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DB2  6600 0002               1237      BNE    CHECK_OP_PEA             ;Check next OP code
00001DB6                          1238   
00001DB6                          1239  CHECK_OP_PEA:                       ;This must go after CHECK_OP_SWAP as first 3 nibbles can be equivalent
00001DB6  3038 10A0               1240      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DBA  0240 FF40               1241      ANDI.W #$FF40,D0                ;Mask relevant bits to D0
00001DBE  B07C 4840               1242      CMP.W  #$4840,D0                ;Compare the appropriate masked bits
00001DC2  6700 013E               1243      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DC6  6600 0002               1244      BNE    CHECK_OP_TAS             ;Check next OP code
00001DCA                          1245      
00001DCA                          1246  CHECK_OP_TAS:
00001DCA  3038 10A0               1247      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DCE  0240 FFC0               1248      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001DD2  B07C 4AC0               1249      CMP.W  #$4AC0,D0                ;Compare the appropriate masked bits
00001DD6  6700 012A               1250      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DDA  6600 0002               1251      BNE    CHECK_OP_TST             ;Check next OP code
00001DDE                          1252  
00001DDE                          1253  CHECK_OP_TST:                       ;This must go after CHECK_OP_TAS as first 2 nibbles are equivalent
00001DDE  3038 10A0               1254      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DE2  0240 FF00               1255      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001DE6  B07C 4A00               1256      CMP.W  #$4A00,D0                ;Compare the appropriate masked bits
00001DEA  6700 0116               1257      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DEE  6600 0002               1258      BNE    CHECK_OP_TRAP            ;Check next OP code
00001DF2                          1259      
00001DF2                          1260  CHECK_OP_TRAP:
00001DF2  3038 10A0               1261      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DF6  0240 FFF0               1262      ANDI.W #$FFF0,D0                ;Mask relevant bits to D0
00001DFA  B07C 4E40               1263      CMP.W  #$4E40,D0                ;Compare the appropriate masked bits
00001DFE  6700 0102               1264      BEQ    GROUP4_INVALID           ;INVALID OP code
00001E02  6600 0002               1265      BNE    CHECK_OP_LINK            ;Check next OP code
00001E06                          1266      
00001E06                          1267  CHECK_OP_LINK:
00001E06  3038 10A0               1268      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E0A  0240 FFF8               1269      ANDI.W #$FFF8,D0                ;Mask relevant bits to D0
00001E0E  B07C 4E50               1270      CMP.W  #$4E50,D0                ;Compare the appropriate masked bits
00001E12  6700 00EE               1271      BEQ    GROUP4_INVALID           ;INVALID OP code
00001E16  6600 0002               1272      BNE    CHECK_OP_UNLK            ;Check next OP code
00001E1A                          1273  
00001E1A                          1274  CHECK_OP_UNLK:
00001E1A  3038 10A0               1275      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E1E  0240 FFF8               1276      ANDI.W #$FFF8,D0                ;Mask relevant bits to D0
00001E22  B07C 4E58               1277      CMP.W  #$4E58,D0                ;Compare the appropriate masked bits
00001E26  6700 00DA               1278      BEQ    GROUP4_INVALID           ;INVALID OP code
00001E2A  6600 0002               1279      BNE    CHECK_OP_MOVE_USP        ;Check next OP
00001E2E                          1280      
00001E2E                          1281  CHECK_OP_MOVE_USP:
00001E2E  3038 10A0               1282      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E32  0240 FFF0               1283      ANDI.W #$FFF0,D0                ;Mask relevant bits to D0
00001E36  B07C 4E60               1284      CMP.W  #$4E60,D0                ;Compare the appropriate masked bits
00001E3A  6700 00C6               1285      BEQ    GROUP4_INVALID           ;INVALID OP code
00001E3E  6600 0002               1286      BNE    CHECK_OP_JMP             ;Check next OP
00001E42                          1287  
00001E42                          1288  CHECK_OP_JMP:
00001E42  3038 10A0               1289       MOVE.W CUR_OP_CODE,D0          ;Move current instruction set into D0
00001E46  0240 FFC0               1290       ANDI.W #$FFC0,D0               ;Mask relevant bits to D0
00001E4A  B07C 4EC0               1291       CMP.W  #$4EC0,D0               ;Compare the appropriate masked bits
00001E4E  6700 00B2               1292       BEQ    GROUP4_INVALID          ;INVALID OP code
00001E52  6600 0002               1293       BNE    CHECK_OP_CHK            ;Check next OP code
00001E56                          1294       
00001E56                          1295  CHECK_OP_CHK:
00001E56  3038 10A0               1296      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001E5A  0240 F1C0               1297      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
00001E5E  B07C 4180               1298      CMP.W   #$4180,D0               ;Compare the appropriate masked bits
00001E62  6700 0672               1299      BEQ     INVALID_OP              ;INVALID OP code
00001E66  6600 0002               1300      BNE     CHECK_OP_NOP            ;Check next OP code
00001E6A                          1301  
00001E6A                          1302  CHECK_OP_NOP:                       ;While this code is not in the supported docs, Nash covered it in class and expects it to be implemented
00001E6A  3038 10A0               1303      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E6E  B07C 4E71               1304      CMP.W  #$4E71,D0                ;Compare the appropriate bits
00001E72  6600 000C               1305      BNE    CHECK_OP_RTS             ;Check next OP code
00001E76  4EB9 0000259E           1306      JSR    PRINT_OP_NOP             ;Print out OP code
00001E7C  6000 0090               1307      BRA    GROUP4_SUCCESS           ;Finish routine
00001E80                          1308      
00001E80                          1309  CHECK_OP_RTS:
00001E80  3038 10A0               1310      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E84  B07C 4E75               1311      CMP.W  #$4E75,D0                ;Mask exact bits for RTS    
00001E88  6600 000C               1312      BNE    CHECK_OP_LEA             ;If it's equal check next code
00001E8C  4EB9 00002590           1313      JSR    PRINT_OP_RTS             ;Print out OP code
00001E92  6000 007A               1314      BRA    GROUP4_SUCCESS           ;Finish routine
00001E96                          1315   
00001E96                          1316  CHECK_OP_LEA:
00001E96  3038 10A0               1317      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E9A  0240 F1C0               1318      ANDI.W #$F1C0,D0                ;Mask appropriate bits
00001E9E  B07C 41C0               1319      CMP.W  #$41C0,D0                ;Compare masked bits
00001EA2  6600 000C               1320      BNE    CHECK_OP_JSR             ;Check next OP code
00001EA6  4EB9 000025AC           1321      JSR    PRINT_OP_LEA             ;Print out OP code
00001EAC  6000 0060               1322      BRA    GROUP4_SUCCESS           ;Finish routine
00001EB0                          1323   
00001EB0                          1324  CHECK_OP_JSR:
00001EB0  3038 10A0               1325      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001EB4  0240 FFC0               1326      ANDI.W #$FFC0,D0                ;Mask appropriate bits
00001EB8  B07C 4E80               1327      CMP.W  #$4E80,D0                ;Compare masked bits
00001EBC  6600 000C               1328      BNE    CHECK_OP_NEG             ;Check next OP code
00001EC0  4EB9 00002582           1329      JSR    PRINT_OP_JSR             ;Print out OP code
00001EC6  6000 0046               1330      BRA    GROUP4_SUCCESS           ;Finish routine
00001ECA                          1331      
00001ECA                          1332  CHECK_OP_NEG:
00001ECA  3038 10A0               1333      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001ECE  0240 FF00               1334      ANDI.W #$FF00,D0                ;Mask appropriate bits
00001ED2  B07C 4400               1335      CMP.W  #$4400,D0                ;Compare masked bits
00001ED6  6600 0010               1336      BNE    CHECK_OP_MOVEM           ;Check next OP code
00001EDA  4EB8 18C6               1337      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Find size field
00001EDE  4EB9 000025C0           1338      JSR    PRINT_OP_NEG             ;Print out OP code
00001EE4  6000 0028               1339      BRA    GROUP4_SUCCESS           ;Finish routine
00001EE8                          1340      
00001EE8                          1341  CHECK_OP_MOVEM:
00001EE8  3038 10A0               1342      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001EEC  0240 FB80               1343      ANDI.W #$FB80,D0                ;Mask appropriate bits
00001EF0  B07C 4880               1344      CMP.W  #$4880,D0                ;Compare masked bits
00001EF4  6600 05E0               1345      BNE    INVALID_OP               ;If no code is found, it is invalid
00001EF8  4EB9 000025D4           1346      JSR    PRINT_OP_MOVEM_W         ;Print out OP code
00001EFE  6000 000E               1347      BRA    GROUP4_SUCCESS           ;Finish routine
00001F02                          1348      
00001F02                          1349  GROUP4_INVALID:
00001F02  4EB9 000024D6           1350      JSR INVALID_OP                  ;INVALID op code has been found, set IS_VALID to 0
00001F08  4EF9 00001F0E           1351      JMP GROUP4_SUCCESS 
00001F0E                          1352  GROUP4_SUCCESS:
00001F0E  4CDF 0001               1353      MOVEM.L (SP)+,D0                ;Restore saved registers
00001F12  4E75                    1354      RTS                             ;Return to stack
00001F14                          1355  C_GROUP_5:
00001F14  48E7 8000               1356      MOVEM.L D0,-(SP)                ;Save registers to stack
00001F18                          1357  CHECK_OP_DBcc:                      ;These are ordered first due to checking bits 7-6
00001F18  3038 10A0               1358      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001F1C  0240 F0C8               1359      ANDI.W #$F0C8,D0                ;Mask appropriate bits
00001F20  B07C 50C8               1360      CMP.W  #$50C8,D0                ;Compare appropriate masked bits
00001F24  6700 004C               1361      BEQ    GROUP5_INVALID           ;INVALID op code found
00001F28  6600 0002               1362      BNE    CHECK_OP_Scc             ;Check next OP code
00001F2C                          1363  
00001F2C                          1364  CHECK_OP_Scc:
00001F2C  3038 10A0               1365      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001F30  0240 F0C0               1366      ANDI.W #$F0C0,D0                ;Mask appropriate bits
00001F34  B07C 50C0               1367      CMP.W  #$50C0,D0                ;Compare appropriate masked bits
00001F38  6700 0038               1368      BEQ     GROUP5_INVALID          ;INVALID OP code found
00001F3C  6600 0002               1369      BNE     CHECK_OP_ADDQ           ;Check next OP code
00001F40                          1370  
00001F40                          1371  CHECK_OP_ADDQ:
00001F40  3038 10A0               1372      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001F44  0240 F100               1373      ANDI.W #$F100,D0                ;Mask appropriate bits
00001F48  B07C 5000               1374      CMP.W  #$5000,D0                ;Compare appropriate masked bits
00001F4C  6700 0024               1375      BEQ    GROUP5_INVALID           ;INVALID OP code found
00001F50  6600 0002               1376      BNE    CHECK_OP_SUBQ            ;Check next OP code
00001F54                          1377  
00001F54                          1378  CHECK_OP_SUBQ     
00001F54  3038 10A0               1379      MOVE.W  CUR_OP_CODE,D0          ;Actual check for SUBQ
00001F58  0240 F100               1380      ANDI.W #$F100,D0                ;Bitmask check for SUBQ
00001F5C  B07C 5100               1381      CMP.W  #$5100,D0                ;Compare the proper value
00001F60  6600 0010               1382      BNE    GROUP5_INVALID           ;Else the operand is invalid
00001F64  4EB8 18C6               1383      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Find size bit to print
00001F68  4EB9 000025F0           1384      JSR    PRINT_OP_SUBQ            ;If equal print it out
00001F6E  6000 0008               1385      BRA    GROUP5_SUCCESS           ;Finish routine
00001F72                          1386      
00001F72                          1387  GROUP5_INVALID: 
00001F72  4EB9 000024D6           1388      JSR INVALID_OP                  ;INVALID OP has been found, set IS_VALID to 0
00001F78                          1389  GROUP5_SUCCESS:
00001F78  4CDF 0001               1390      MOVEM.L (SP)+,D0                ;Restore registers from stack
00001F7C  4E75                    1391      RTS                             ;Return to stack
00001F7E                          1392      
00001F7E                          1393  C_GROUP_6:
00001F7E  48E7 8000               1394      MOVEM.L D0,-(SP)            ;Save register to stack
00001F82                          1395  CHECK_OP_BSR:
00001F82  3038 10A0               1396      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set to D0
00001F86  0240 FF00               1397      ANDI.W  #$FF00,D0           ;Mask appropriate bits
00001F8A  B07C 6100               1398      CMP.W   #$6100,D0           ;Compare masked bits
00001F8E  6700 0128               1399      BEQ     GROUP6_INVALID      ;INVALID OP code found
00001F92  6600 0002               1400      BNE     CHECK_OP_BGT        ;Check next OP code
00001F96                          1401      
00001F96                          1402  CHECK_OP_BGT:
00001F96  3038 10A0               1403      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001F9A  0240 FF00               1404      ANDI.W #$FF00,D0            ;Mask appropriate bits
00001F9E  B07C 6E00               1405      CMP.W  #$6E00,D0            ;Compare masked bits
00001FA2  6700 0114               1406      BEQ    GROUP6_INVALID       ;INVALID OP code found
00001FA6  6600 0002               1407      BNE    CHECK_OP_BCC         ;Check next OP code
00001FAA                          1408  
00001FAA                          1409  CHECK_OP_BCC:
00001FAA  3038 10A0               1410      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001FAE  0240 FF00               1411      ANDI.W #$FF00,D0            ;Mask appropriate bits
00001FB2  B07C 6400               1412      CMP.W  #$6400,D0            ;Compare masked bits
00001FB6  6700 0100               1413      BEQ    GROUP6_INVALID       ;INVALID OP code found
00001FBA  6600 0002               1414      BNE    CHECK_OP_BEQ         ;Check next OP code 
00001FBE                          1415  
00001FBE                          1416  CHECK_OP_BEQ:
00001FBE  3038 10A0               1417      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001FC2  0240 FF00               1418      ANDI.W #$FF00,D0            ;Mask appropriate bits
00001FC6  B07C 6700               1419      CMP.W  #$6700,D0            ;Compare masked bits
00001FCA  6700 00EC               1420      BEQ    GROUP6_INVALID       ;INVALID OP code found
00001FCE  6600 0002               1421      BNE    CHECK_OP_BHI         ;Check next OP code
00001FD2                          1422  
00001FD2                          1423  CHECK_OP_BHI:
00001FD2  3038 10A0               1424      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001FD6  0240 FF00               1425      ANDI.W #$FF00,D0            ;Mask appropriate bits
00001FDA  B07C 6200               1426      CMP.W  #$6200,D0            ;Compare masked bits
00001FDE  6700 00D8               1427      BEQ    GROUP6_INVALID       ;INVALID OP code found
00001FE2  6600 0002               1428      BNE    CHECK_OP_BLS         ;Check next OP code
00001FE6                          1429  
00001FE6                          1430  CHECK_OP_BLS:
00001FE6  3038 10A0               1431      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001FEA  0240 FF00               1432      ANDI.W #$FF00,D0            ;Mask appropriate bits
00001FEE  B07C 6300               1433      CMP.W  #$6300,D0            ;Compare masked bits
00001FF2  6700 00C4               1434      BEQ    GROUP6_INVALID       ;INVALID OP code found
00001FF6  6600 0002               1435      BNE    CHECK_OP_BMI         ;Check next OP code
00001FFA                          1436  
00001FFA                          1437  CHECK_OP_BMI:
00001FFA  3038 10A0               1438      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001FFE  0240 FF00               1439      ANDI.W #$FF00,D0            ;Mask appropriate bits
00002002  B07C 6B00               1440      CMP.W  #$6B00,D0            ;Compare masked bits
00002006  6700 00B0               1441      BEQ    GROUP6_INVALID       ;INVALID OP code found
0000200A  6600 0002               1442      BNE    CHECK_OP_BNE         ;Check next OP code
0000200E                          1443  
0000200E                          1444  CHECK_OP_BNE:
0000200E  3038 10A0               1445      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00002012  0240 FF00               1446      ANDI.W #$FF00,D0            ;Mask appropriate bits
00002016  B07C 6600               1447      CMP.W  #$6600,D0            ;Compare masked bits
0000201A  6700 009C               1448      BEQ    GROUP6_INVALID       ;INVALID OP code found
0000201E  6600 0002               1449      BNE    CHECK_OP_BPL         ;Check next OP code    
00002022                          1450  
00002022                          1451  CHECK_OP_BPL:
00002022  3038 10A0               1452      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00002026  0240 FF00               1453      ANDI.W #$FF00,D0            ;Mask appropriate bits
0000202A  B07C 6A00               1454      CMP.W  #$6A00,D0            ;Compare masked bits
0000202E  6700 0088               1455      BEQ    GROUP6_INVALID       ;INVALID OP code found
00002032  6600 0002               1456      BNE    CHECK_OP_BRA         ;Check next OP code 
00002036                          1457  
00002036                          1458  
00002036                          1459  CHECK_OP_BRA:
00002036  3038 10A0               1460      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D0       
0000203A  0240 FF00               1461      ANDI.W  #$FF00,D0           ;Mask appropriate bits
0000203E  B07C 6000               1462      CMP.W   #$6000,D0           ;Compare masked bits
00002042  6600 000C               1463      BNE     CHECK_OP_BCS        ;Check next OP code
00002046  4EB9 00002654           1464      JSR     PRINT_OP_BRA        ;Print out OP code
0000204C  6000 0070               1465      BRA     GROUP6_SUCCESS      ;Finish routine
00002050                          1466      
00002050                          1467  CHECK_OP_BCS:
00002050  3038 10A0               1468      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00002054  0240 FF00               1469      ANDI.W #$FF00,D0            ;Mask appropriate bits
00002058  B07C 6500               1470      CMP.W  #$6500,D0            ;Compare masked bits
0000205C  6600 000C               1471      BNE    CHECK_OP_BGE         ;Check next OP code
00002060  4EB9 00002604           1472      JSR    PRINT_OP_BCS         ;Print out OP code
00002066  6000 0056               1473      BRA    GROUP6_SUCCESS       ;Finish routine
0000206A                          1474  
0000206A                          1475      
0000206A                          1476  CHECK_OP_BGE:
0000206A  3038 10A0               1477      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
0000206E  0240 FF00               1478      ANDI.W #$FF00,D0            ;Mask appropriate bits
00002072  B07C 6C00               1479      CMP.W  #$6C00,D0            ;Compare masked bits
00002076  6600 000C               1480      BNE    CHECK_OP_BLT         ;Check next OP code
0000207A  4EB9 00002618           1481      JSR    PRINT_OP_BGE         ;Print out OP code
00002080  6000 003C               1482      BRA    GROUP6_SUCCESS       ;Finish routine
00002084                          1483      
00002084                          1484      
00002084                          1485  CHECK_OP_BLT:
00002084  3038 10A0               1486      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00002088  0240 FF00               1487      ANDI.W #$FF00,D0            ;Mask appropriate bits
0000208C  B07C 6D00               1488      CMP.W  #$6D00,D0            ;Compare masked bits
00002090  6600 000C               1489      BNE    CHECK_OP_BVC         ;Check next OP code
00002094  4EB9 0000262C           1490      JSR    PRINT_OP_BLT         ;Print out OP code
0000209A  6000 0022               1491      BRA    GROUP6_SUCCESS       ;Finish routine
0000209E                          1492      
0000209E                          1493  CHECK_OP_BVC:
0000209E  3038 10A0               1494      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000020A2  0240 FF00               1495      ANDI.W #$FF00,D0            ;Mask appropriate bits
000020A6  B07C 6800               1496      CMP.W  #$6800,D0            ;Compare masked bits
000020AA  6600 000C               1497      BNE    GROUP6_INVALID       ;Check next OP code
000020AE  4EB9 00002640           1498      JSR    PRINT_OP_BVC         ;Print out OP code
000020B4  6000 0008               1499      BRA    GROUP6_SUCCESS       ;Finish routine
000020B8                          1500      
000020B8                          1501  GROUP6_INVALID:
000020B8  4EB9 000024D6           1502      JSR    INVALID_OP           ;INVALID OP code found, set IS_VALID to 0
000020BE                          1503  GROUP6_SUCCESS:
000020BE  4CDF 0001               1504      MOVEM.L (SP)+,D0            ;Restore registers from stack
000020C2  4E75                    1505      RTS                         ;Return from stack
000020C4                          1506      
000020C4                          1507  C_GROUP_7:
000020C4  48E7 8000               1508      MOVEM.L D0,-(SP)            ;Save register to stack
000020C8                          1509      
000020C8                          1510  CHECK_OP_MOVEQ
000020C8  3038 10A0               1511      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set to D0
000020CC  0240 F100               1512      ANDI.W #$F100,D0            ;Mask appropriate bits
000020D0  B07C 7000               1513      CMP.W  #$7000,D0            ;Compare masked bits
000020D4  6600 0006               1514      BNE    GROUP7_INVALID       ;INVALID OP code found
000020D8  6700 0008               1515      BEQ    GROUP7_SUCCESS       ;Finish routine
000020DC                          1516      
000020DC                          1517  GROUP7_INVALID:
000020DC  4EB9 000024D6           1518      JSR INVALID_OP              ;INVALID OP code found, set IS_VALID to 0
000020E2                          1519  GROUP7_SUCCESS:    
000020E2  4CDF 0001               1520      MOVEM.L (SP)+,D0            ;Restore registers from stack
000020E6  4E75                    1521      RTS                         ;Return from stack
000020E8                          1522  C_GROUP_8:
000020E8  48E7 8000               1523      MOVEM.L D0,-(SP)
000020EC                          1524  CHECK_OP_DIVU:
000020EC  3038 10A0               1525      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000020F0  0240 F1C0               1526      ANDI.W  #$F1C0,D0                   ;Mask appropriate bits
000020F4  B07C 80C0               1527      CMP.W   #$80C0,D0                   ;Compare masked bits
000020F8  6700 0042               1528      BEQ     GROUP8_INVALID              ;INVALID OP code found
000020FC  6600 0002               1529      BNE     CHECK_OP_SBCD               ;Check next OP code
00002100                          1530  
00002100                          1531  CHECK_OP_SBCD:
00002100  3038 10A0               1532      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00002104  0240 F1F0               1533      ANDI.W  #$F1F0,D0                   ;Mask appropriate bits
00002108  B07C 8100               1534      CMP.W   #$8100,D0                   ;Compare masked bits
0000210C  6700 002E               1535      BEQ     GROUP8_INVALID              ;INVALID OP code found
00002110  6600 0002               1536      BNE     CHECK_OP_DIVS               ;Check next OP code
00002114                          1537      
00002114                          1538  CHECK_OP_DIVS:
00002114  3038 10A0               1539      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00002118  0240 F1C0               1540      ANDI.W  #$F1C0,D0                   ;Mask appropriate bits
0000211C  B07C 81C0               1541      CMP.W   #$81C0,D0                   ;Compare masked bits
00002120  6600 000C               1542      BNE     CHECK_OP_OR                 ;Check next OP code
00002124  4EB9 00002668           1543      JSR     PRINT_OP_DIVS               ;OP Code found
0000212A  6000 0016               1544      BRA     GROUP8_SUCCESS
0000212E                          1545  CHECK_OP_OR:                            ;At this point only remaining $8 code is OR
0000212E  4EB8 18C6               1546      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Finding size bit to print out
00002132  4EB9 00002676           1547      JSR     PRINT_OP_OR                 ;Print out OR
00002138  6000 0008               1548      BRA     GROUP8_SUCCESS              ;Finish routine
0000213C                          1549  GROUP8_INVALID:
0000213C  4EB9 000024D6           1550       JSR     INVALID_OP                 ;INVALID OP code found, set IS_VALID to 0
00002142                          1551  GROUP8_SUCCESS:
00002142  4CDF 0001               1552       MOVEM.L (SP)+,D0                   ;Restore register from stack
00002146  4E75                    1553       RTS                                ;Return to stack
00002148                          1554       
00002148                          1555  C_GROUP_9:
00002148  48E7 C000               1556      MOVEM.L D0-D1,-(SP)                 ;Save the registers
0000214C                          1557  CHECK_SIZE_BIT_FOR_SUB:
0000214C  4EB8 18C6               1558      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find the size bits in 7-6
00002150  0C38 0003 176C          1559      CMP.B   #%11,OP_SIZE                ;If the bits are %11, it has to be SUBA
00002156  6700 0006               1560      BEQ     CHECK_OP_SUBA               ;If the bits equal it must be SUBA
0000215A  6600 0016               1561      BNE     CHECK_OP_SUBX               ;If the bits are not equal it could be SUBX
0000215E                          1562      
0000215E                          1563  CHECK_OP_SUBA:                          ;Check SUBA first as it has static bits
0000215E  3038 10A0               1564      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00002162  0240 F0C0               1565      ANDI.W  #$F0C0,D0                   ;Mask appropriate bits
00002166  B07C 90C0               1566      CMP.W   #$90C0,D0                   ;Compare masked bits
0000216A  6700 0042               1567      BEQ     GROUP9_INVALID              ;INVALID OP has been found
0000216E  6600 0002               1568      BNE     CHECK_OP_SUBX               ;Check next OP
00002172                          1569  
00002172                          1570  CHECK_OP_SUBX:
00002172  3038 10A0               1571      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00002176  0240 F130               1572      ANDI.W  #$F130,D0                   ;Mask appropriate bits
0000217A  B07C 9100               1573      CMP.W   #$9100,D0                   ;Compare masked bits
0000217E  6000 0002               1574      BRA     BIT_CHECK_SUBX              ;Checking if this code is SUBX through bit shifts
00002182                          1575      
00002182                          1576  BIT_CHECK_SUBX:    
00002182  3038 10A0               1577      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00002186  323C 0007               1578      MOVE.W  #7,D1                       ;Prepare a shift of 7 bits into D1
0000218A  E368                    1579      LSL.W   D1,D0                       ;Shift left 7 bits truncate 15-9 bits
0000218C  E268                    1580      LSR.W   D1,D0                       ;Reposition D0
0000218E  E848                    1581      LSR.W   #4,D0                       ;Truncate 4 right most bits to
00002190  0240 FF13               1582      ANDI.W  #$FF13,D0                   ;Compare remaining static bits
00002194  B07C 0010               1583      CMP.W   #$0010,D0                   ;If equal to this value it's SUBX
00002198  6700 0014               1584      BEQ     GROUP9_INVALID              ;INVALID OP code found
0000219C  6600 0002               1585      BNE     CHECK_OP_SUB                ;Not can only be SUB here
000021A0                          1586      
000021A0                          1587  CHECK_OP_SUB:                           ;At this point only remaining $9 is SUB
000021A0  4EB8 18C6               1588      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find the size bit to print out
000021A4  4EB9 0000268A           1589      JSR     PRINT_OP_SUB                ;Print out SUB
000021AA  6000 0008               1590      BRA     GROUP9_SUCCESS              ;Finish routine
000021AE                          1591      
000021AE                          1592  GROUP9_INVALID:
000021AE  4EB9 000024D6           1593       JSR     INVALID_OP                 ;INVALID OP code found, set IS_VALID to 0
000021B4                          1594  GROUP9_SUCCESS: 
000021B4  4CDF 0003               1595      MOVEM.L (SP)+,D0-D1                 ;Restore registers
000021B8  4E75                    1596      RTS                                 ;Return to stack
000021BA                          1597  
000021BA                          1598  C_GROUP_A:
000021BA  4EB9 000024D6           1599      JSR INVALID_OP                      ;INVALID OP code found, set IS_VALID to 0
000021C0  4E75                    1600      RTS                                 ;Return to stack
000021C2                          1601      
000021C2                          1602  C_GROUP_B:
000021C2  48E7 8000               1603      MOVEM.L D0,-(SP)                    ;Save current registers to stack
000021C6                          1604  CHECK_OP_CMPM
000021C6  3038 10A0               1605      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000021CA  0240 F138               1606      ANDI.W  #$F138,D0                   ;Mask appropriate bits
000021CE  B07C B108               1607      CMP.W   #$B108,D0                   ;Compare masked bits
000021D2  6700 0056               1608      BEQ     GROUPB_INVALID              ;INVALID OP found
000021D6  6600 0002               1609      BNE     CHECK_OP_CMPA               ;Check next OP
000021DA                          1610      
000021DA                          1611  CHECK_OP_CMPA:
000021DA  3038 10A0               1612      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000021DE  0240 F0C0               1613      ANDI.W  #$F0C0,D0                   ;Mask appropriate bits
000021E2  B07C B0C0               1614      CMP.W   #$B0C0,D0                   ;Compare masked bits
000021E6  6700 0042               1615      BEQ     GROUPB_INVALID              ;INVALID OP found
000021EA  6600 0002               1616      BNE     CHECK_OP_EOR                ;Check next OP
000021EE                          1617  
000021EE                          1618  CHECK_OP_EOR:
000021EE  3038 10A0               1619      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000021F2  0240 F100               1620      ANDI.W  #$F100,D0                   ;Mask appropriate bits
000021F6  B07C B100               1621      CMP.W   #$B100,D0                   ;Compare masked bits
000021FA  6600 0010               1622      BNE     CHECK_OP_CMP                ;Check next OP 
000021FE  4EB8 18C6               1623      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find size bit field to print out size
00002202  4EB9 0000269E           1624      JSR     PRINT_OP_EOR                ;Print out OP code
00002208  6000 0026               1625      BRA     GROUPB_SUCCESS              ;Finish routine
0000220C                          1626      
0000220C                          1627  CHECK_OP_CMP:
0000220C  3038 10A0               1628      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00002210  0240 F100               1629      ANDI.W  #$F100,D0                   ;Mask appropriate bits
00002214  B07C B000               1630      CMP.W   #$B000,D0                   ;Compare masked bits
00002218  6600 0010               1631      BNE     GROUPB_INVALID              ;INVALID OP code found
0000221C  4EB8 18C6               1632      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find size bit field to print out size
00002220  4EB9 000026B2           1633      JSR     PRINT_OP_CMP                ;Print out OP code
00002226  6000 0008               1634      BRA     GROUPB_SUCCESS              ;Finish routine
0000222A                          1635      
0000222A                          1636  GROUPB_INVALID:
0000222A  4EB9 000024D6           1637      JSR     INVALID_OP                  ;INVALID OP has been found, set IS_VALID to 0
00002230                          1638  GROUPB_SUCCESS:
00002230  4CDF 0001               1639      MOVEM.L (SP)+,D0                    ;Restore registers from stack
00002234  4E75                    1640      RTS                                 ;Return to stack
00002236                          1641  C_GROUP_C:
00002236  48E7 C000               1642      MOVEM.L D0-D1,-(SP)
0000223A                          1643      
0000223A                          1644  CHECK_OP_MULU:
0000223A  3038 10A0               1645      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
0000223E  0240 F1C0               1646      ANDI.W  #$F1C0,D0
00002242  B07C C0C0               1647      CMP.W   #$C0C0,D0
00002246  6700 006A               1648      BEQ     GROUPC_INVALID
0000224A  6600 0002               1649      BNE     CHECK_OP_ABCD
0000224E                          1650   
0000224E                          1651  CHECK_OP_ABCD:
0000224E  3038 10A0               1652      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00002252  0240 F1F0               1653      ANDI.W  #$F1F0,D0
00002256  B07C C100               1654      CMP.W   #$C100,D0
0000225A  6700 0056               1655      BEQ     GROUPC_INVALID
0000225E  6600 0002               1656      BNE     CHECK_OP_EXG
00002262                          1657   
00002262                          1658  CHECK_OP_EXG:
00002262  6000 0002               1659      BRA     BIT_CHECK_EXG       ;Always do bit check here
00002266                          1660                          
00002266                          1661  BIT_CHECK_EXG:                 ;Checks the OP mode bits 7-6 which cannot be 11 for EXG
00002266  3038 10A0               1662      MOVE.W  CUR_OP_CODE,D0
0000226A  323C 0007               1663      MOVE.W  #7,D1
0000226E  E368                    1664      LSL.W   D1,D0
00002270  E268                    1665      LSR.W   D1,D0
00002272  E848                    1666      LSR.W   #4,D0
00002274  0240 FF83               1667      ANDI.W  #$FF83,D0
00002278  B07C 0010               1668      CMP.W   #$0010,D0          ;Bit mask static EXG bits
0000227C  6700 0034               1669      BEQ     GROUPC_INVALID     ;If this equals, then OP must be EXG
00002280  6600 0002               1670      BNE     CHECK_OP_MULS      ;Otherwise it's MULS
00002284                          1671  CHECK_OP_MULS:
00002284  3038 10A0               1672      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00002288  0240 F1C0               1673      ANDI.W #$F1C0,D0
0000228C  B07C C1C0               1674      CMP.W  #$C1C0,D0
00002290  6600 000C               1675      BNE    CHECK_OP_AND          ; OP_AND is completely dynamic outside of first nibble
00002294  4EB9 000026C6           1676      JSR    PRINT_OP_MULS
0000229A  6000 001C               1677      BRA    GROUPC_SUCCESS
0000229E                          1678  CHECK_OP_AND:                 ;This would be the only possible OP code left after CHECK_OP_MULS
0000229E  3038 10A0               1679      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
000022A2  0240 F000               1680      ANDI.W  #$F000,D0
000022A6  B07C C000               1681      CMP.W   #$C000,D0
000022AA  6700 0006               1682      BEQ     GROUPC_INVALID
000022AE  6000 0002               1683      BRA    GROUPC_INVALID    
000022B2                          1684  GROUPC_INVALID:
000022B2  4EB9 000024D6           1685      JSR     INVALID_OP
000022B8                          1686  GROUPC_SUCCESS:
000022B8  4CDF 0003               1687      MOVEM.L (SP)+,D0-D1
000022BC  4E75                    1688      RTS
000022BE                          1689      
000022BE                          1690  C_GROUP_D:
000022BE  48E7 8000               1691      MOVEM.L D0,-(SP)                ;Save registers to stack
000022C2                          1692  BIT_SIZE_CHECK
000022C2  3038 10A0               1693      MOVE    CUR_OP_CODE,D0          ;Move current instruction set into D0
000022C6  4EB8 18C6               1694      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Specific size bit checking to see if it's 11
000022CA  0C38 0003 176C          1695      CMP.B   #%11,OP_SIZE            ;If it's %11 it cannot be ADDX and is either ADDA or ADD
000022D0  6700 0024               1696      BEQ     CHECK_OP_ADDA           ;If it's equal check ADDA
000022D4  6600 0002               1697      BNE     CHECK_OP_ADDX           ;If it's not equal check ADDX
000022D8                          1698      
000022D8                          1699  CHECK_OP_ADDX:
000022D8  3038 10A0               1700      MOVE    CUR_OP_CODE,D0
000022DC  0240 F130               1701      ANDI.W #$F130,D0                ;Mask appropriate bits
000022E0  B07C D100               1702      CMP.W  #$D100,D0                ;Compare masked bits
000022E4  6700 002C               1703      BEQ    GROUPD_INVALID           ;INVALID OP code found
000022E8  6600 0002               1704      BNE    CHECK_OP_ADD             ;Check next OP code
000022EC                          1705      
000022EC                          1706  CHECK_OP_ADD:
000022EC  4EB9 000026D4           1707      JSR PRINT_OP_ADD                ;Only remaining OP in $D is ADD at this point
000022F2  6000 0024               1708      BRA GROUPD_SUCCESS              ;Finish routine
000022F6                          1709  
000022F6                          1710  CHECK_OP_ADDA:
000022F6  3038 10A0               1711      MOVE    CUR_OP_CODE,D0          ;Move current instruction set into D0
000022FA  0240 F0C0               1712      ANDI.W #$F0C0,D0                ;Mask applicable bits
000022FE  B07C D0C0               1713      CMP.W  #$D0C0,D0                ;Compare masked bits
00002302  66E8                    1714      BNE    CHECK_OP_ADD             ;Check next OP code
00002304  4EB8 1906               1715      JSR    FIND_1_BIT_SIZE_8        ;Size bit to print
00002308  4EB9 000026E8           1716      JSR    PRINT_OP_ADDA            ;Print out OP code
0000230E  6000 0008               1717      BRA    GROUPD_SUCCESS           ;Finish routine
00002312                          1718      
00002312                          1719  GROUPD_INVALID:
00002312  4EB9 000024D6           1720      JSR INVALID_OP                  ;INVALID OP code found
00002318                          1721  GROUPD_SUCCESS:
00002318  4CDF 0001               1722      MOVEM.L (SP)+,D0                ;Restore registers from stack
0000231C  4E75                    1723      RTS                             ;Return to stack
0000231E                          1724      
0000231E                          1725  C_GROUP_E:
0000231E  48E7 8000               1726      MOVEM.L D0,-(SP)
00002322                          1727  CHECK_OP_ROXR_NO_ROT:
00002322  3038 10A0               1728      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002326  0240 FFC0               1729      ANDI.W #$FFC0,D0
0000232A  B07C E4C0               1730      CMP.W  #$E4C0,D0
0000232E  6700 0192               1731      BEQ    GROUPE_INVALID
00002332  6600 0002               1732      BNE    CHECK_OP_ROXL_NO_ROT
00002336                          1733  
00002336                          1734  CHECK_OP_ROXL_NO_ROT:
00002336  3038 10A0               1735      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000233A  0240 FFC0               1736      ANDI.W #$FFC0,D0
0000233E  B07C E5C0               1737      CMP.W  #$E5C0,D0
00002342  6700 017E               1738      BEQ    GROUPE_INVALID
00002346  6600 0002               1739      BNE    CHECK_OP_ROR_NO_ROT
0000234A                          1740  
0000234A                          1741  CHECK_OP_ROR_NO_ROT:
0000234A  3038 10A0               1742      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000234E  0240 FFC0               1743      ANDI.W #$FFC0,D0
00002352  B07C E6C0               1744      CMP.W  #$E6C0,D0
00002356  6600 000C               1745      BNE    CHECK_OP_ROL_NO_ROT
0000235A  4EB9 00002760           1746      JSR    PRINT_OP_ROR
00002360  6000 0166               1747      BRA    GROUPE_SUCCESS
00002364                          1748      
00002364                          1749  CHECK_OP_ROL_NO_ROT:
00002364  3038 10A0               1750      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002368  0240 FFC0               1751      ANDI.W #$FFC0,D0
0000236C  B07C E7C0               1752      CMP.W  #$E7C0,D0
00002370  6600 000C               1753      BNE    CHECK_OP_LSR_NO_ROT
00002374  4EB9 0000274C           1754      JSR    PRINT_OP_ROL
0000237A  6000 014C               1755      BRA    GROUPE_SUCCESS
0000237E                          1756   
0000237E                          1757  CHECK_OP_LSR_NO_ROT:
0000237E  3038 10A0               1758      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002382  0240 FFC0               1759      ANDI.W #$FFC0,D0
00002386  B07C E2C0               1760      CMP.W  #$E2C0,D0
0000238A  6600 000C               1761      BNE    CHECK_OP_LSL_NO_ROT
0000238E  4EB9 00002710           1762      JSR    PRINT_OP_LSR
00002394  6000 0132               1763      BRA    GROUPE_SUCCESS
00002398                          1764  
00002398                          1765  CHECK_OP_LSL_NO_ROT:
00002398  3038 10A0               1766      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000239C  0240 FFC0               1767      ANDI.W #$FFC0,D0
000023A0  B07C E3C0               1768      CMP.W  #$E3C0,D0
000023A4  6600 000C               1769      BNE    CHECK_OP_ASR_NO_ROT
000023A8  4EB9 000026FC           1770      JSR    PRINT_OP_LSL
000023AE  6000 0118               1771      BRA    GROUPE_SUCCESS
000023B2                          1772  
000023B2                          1773  CHECK_OP_ASR_NO_ROT:
000023B2  3038 10A0               1774      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000023B6  0240 FFC0               1775      ANDI.W #$FFC0,D0
000023BA  B07C E0C0               1776      CMP.W  #$E0C0,D0
000023BE  6600 000C               1777      BNE    CHECK_OP_ASL_NO_ROT
000023C2  4EB9 00002724           1778      JSR    PRINT_OP_ASR
000023C8  6000 00FE               1779      BRA    GROUPE_SUCCESS
000023CC                          1780              
000023CC                          1781  CHECK_OP_ASL_NO_ROT:
000023CC  3038 10A0               1782      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000023D0  0240 FFC0               1783      ANDI.W #$FFC0,D0
000023D4  B07C E1C0               1784      CMP.W  #$E1C0,D0
000023D8  6600 000C               1785      BNE    CHECK_OP_ROXR
000023DC  4EB9 00002738           1786      JSR    PRINT_OP_ASL
000023E2  6000 00E4               1787      BRA    GROUPE_SUCCESS
000023E6                          1788  
000023E6                          1789  CHECK_OP_ROXR:
000023E6  3038 10A0               1790      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000023EA  0240 F118               1791      ANDI.W #$F118,D0
000023EE  B07C E010               1792      CMP.W  #$E010,D0
000023F2  6700 00CE               1793      BEQ    GROUPE_INVALID
000023F6  6600 0002               1794      BNE    CHECK_OP_ROXL
000023FA                          1795      
000023FA                          1796  CHECK_OP_ROXL:
000023FA  3038 10A0               1797      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000023FE  0240 F118               1798      ANDI.W #$F118,D0
00002402  B07C E110               1799      CMP.W  #$E110,D0
00002406  6700 00BA               1800      BEQ    GROUPE_INVALID
0000240A  6600 0002               1801      BNE    CHECK_OP_ROR
0000240E                          1802      
0000240E                          1803  CHECK_OP_ROR:
0000240E  3038 10A0               1804      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002412  0240 F118               1805      ANDI.W #$F118,D0
00002416  B07C E018               1806      CMP.W  #$E018,D0
0000241A  6600 0010               1807      BNE    CHECK_OP_ROL
0000241E  4EB8 18C6               1808      JSR    FIND_2_BIT_SIZE_7_TO_6     
00002422  4EB9 00002760           1809      JSR    PRINT_OP_ROR
00002428  6000 009E               1810      BRA    GROUPE_SUCCESS
0000242C                          1811  
0000242C                          1812  CHECK_OP_ROL:
0000242C  3038 10A0               1813      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002430  0240 F118               1814      ANDI.W #$F118,D0
00002434  B07C E118               1815      CMP.W  #$E118,D0
00002438  6600 0010               1816      BNE    CHECK_OP_LSR
0000243C  4EB8 18C6               1817      JSR    FIND_2_BIT_SIZE_7_TO_6     
00002440  4EB9 0000274C           1818      JSR    PRINT_OP_ROL
00002446  6000 0080               1819      BRA    GROUPE_SUCCESS
0000244A                          1820      
0000244A                          1821  CHECK_OP_LSR:
0000244A  3038 10A0               1822      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000244E  0240 F118               1823      ANDI.W #$F118,D0
00002452  B07C E008               1824      CMP.W  #$E008,D0
00002456  6600 0010               1825      BNE    CHECK_OP_LSL
0000245A  4EB8 18C6               1826      JSR    FIND_2_BIT_SIZE_7_TO_6     
0000245E  4EB9 00002710           1827      JSR    PRINT_OP_LSR
00002464  6000 0062               1828      BRA    GROUPE_SUCCESS
00002468                          1829  
00002468                          1830  CHECK_OP_LSL:
00002468  3038 10A0               1831      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000246C  0240 F118               1832      ANDI.W #$F118,D0
00002470  B07C E108               1833      CMP.W  #$E108,D0
00002474  6600 0010               1834      BNE    CHECK_OP_ASR
00002478  4EB8 18C6               1835      JSR    FIND_2_BIT_SIZE_7_TO_6     
0000247C  4EB9 000026FC           1836      JSR    PRINT_OP_LSL
00002482  6000 0044               1837      BRA    GROUPE_SUCCESS
00002486                          1838  
00002486                          1839  CHECK_OP_ASR:
00002486  3038 10A0               1840      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000248A  0240 F118               1841      ANDI.W #$F118,D0
0000248E  B07C E000               1842      CMP.W  #$E000,D0
00002492  6600 0010               1843      BNE    CHECK_OP_ASL
00002496  4EB8 18C6               1844      JSR    FIND_2_BIT_SIZE_7_TO_6     
0000249A  4EB9 00002724           1845      JSR    PRINT_OP_ASR
000024A0  6000 0026               1846      BRA    GROUPE_SUCCESS
000024A4                          1847  
000024A4                          1848  CHECK_OP_ASL:
000024A4  3038 10A0               1849      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000024A8  0240 F118               1850      ANDI.W #$F118,D0
000024AC  B07C E100               1851      CMP.W  #$E100,D0
000024B0  6600 0010               1852      BNE    GROUPE_INVALID      ;Last possible OP code
000024B4  4EB8 18C6               1853      JSR    FIND_2_BIT_SIZE_7_TO_6     
000024B8  4EB9 00002738           1854      JSR    PRINT_OP_ASL
000024BE  6000 0008               1855      BRA    GROUPE_SUCCESS
000024C2                          1856  
000024C2                          1857  GROUPE_INVALID:
000024C2  4EB9 000024D6           1858      JSR     INVALID_OP
000024C8                          1859  GROUPE_SUCCESS:
000024C8  4CDF 0001               1860      MOVEM.L (SP)+,D0
000024CC  4E75                    1861      RTS
000024CE                          1862  C_GROUP_F:
000024CE  4EB9 000024D6           1863      JSR INVALID_OP
000024D4  4E75                    1864      RTS
000024D6                          1865      
000024D6                          1866  INVALID_OP:  ; ONLY SETS IS_VALID TO 0
000024D6  11FC 0000 10A2          1867      MOVE.B #0,IS_VALID
000024DC  4E75                    1868      RTS
000024DE                          1869  
000024DE                          1870  
000024DE                          1871  
000024DE                          1872  PRINT_TO_BUFFER:
000024DE  21FC 00001000 125A      1873      MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer
000024E6  4EB8 1264               1874      JSR AddStrToBuffer
000024EA  4E75                    1875      RTS
000024EC                          1876      
000024EC                          1877  PRINT_OP_ORI:
000024EC  21FC 000027E3 1256      1878      MOVE.L #P_OP_ORI, Arg_AddStrToBuffer_String
000024F4  4EB8 24DE               1879      JSR PRINT_TO_BUFFER
000024F8  4EB9 0000279E           1880      JSR PRINT_OP_SIZE
000024FE  4E75                    1881      RTS
00002500                          1882  PRINT_OP_CMPI:
00002500  21FC 000027EA 1256      1883      MOVE.L #P_OP_CMPI, Arg_AddStrToBuffer_String
00002508  4EB8 24DE               1884      JSR PRINT_TO_BUFFER
0000250C  4EB9 0000279E           1885      JSR PRINT_OP_SIZE
00002512  4E75                    1886      RTS
00002514                          1887  PRINT_OP_STATIC_BCLR:
00002514  21FC 000027F2 1256      1888      MOVE.L #P_OP_BCLR, Arg_AddStrToBuffer_String
0000251C  4EB8 24DE               1889      JSR PRINT_TO_BUFFER
00002520  4EB9 0000279E           1890      JSR PRINT_OP_SIZE
00002526  4E75                    1891      RTS
00002528                          1892      
00002528                          1893  PRINT_OP_DYNAMIC_BCLR:
00002528  21FC 000027F2 1256      1894      MOVE.L #P_OP_BCLR, Arg_AddStrToBuffer_String
00002530  4EB8 24DE               1895      JSR PRINT_TO_BUFFER
00002534  4EB9 0000279E           1896      JSR PRINT_OP_SIZE
0000253A  4E75                    1897      RTS
0000253C                          1898  
0000253C                          1899  PRINT_OP_MOVEB:
0000253C  21FC 000027FA 1256      1900      MOVE.L #P_OP_MOVEB, Arg_AddStrToBuffer_String
00002544  4EB8 24DE               1901      JSR PRINT_TO_BUFFER
00002548  4E75                    1902      RTS
0000254A                          1903      
0000254A                          1904  PRINT_OP_MOVEA_L:
0000254A  21FC 00002805 1256      1905      MOVE.L #P_OP_MOVEA_L, Arg_AddStrToBuffer_String
00002552  4EB8 24DE               1906      JSR PRINT_TO_BUFFER
00002556  4E75                    1907      RTS
00002558                          1908  PRINT_OP_MOVE_L:
00002558  21FC 00002811 1256      1909      MOVE.L #P_OP_MOVE_L, Arg_AddStrToBuffer_String
00002560  4EB8 24DE               1910      JSR PRINT_TO_BUFFER
00002564  4E75                    1911      RTS
00002566                          1912      
00002566                          1913  PRINT_OP_MOVEA_W:
00002566  21FC 0000281C 1256      1914      MOVE.L #P_OP_MOVEA_W, Arg_AddStrToBuffer_String
0000256E  4EB8 24DE               1915      JSR PRINT_TO_BUFFER
00002572  4E75                    1916      RTS
00002574                          1917  PRINT_OP_MOVE_W:
00002574  21FC 00002828 1256      1918      MOVE.L #P_OP_MOVE_W, Arg_AddStrToBuffer_String
0000257C  4EB8 24DE               1919      JSR PRINT_TO_BUFFER
00002580  4E75                    1920      RTS
00002582                          1921  
00002582                          1922  PRINT_OP_JSR:
00002582  21FC 00002852 1256      1923      MOVE.L #P_OP_JSR, Arg_AddStrToBuffer_String
0000258A  4EB8 24DE               1924      JSR PRINT_TO_BUFFER
0000258E  4E75                    1925      RTS
00002590                          1926  PRINT_OP_RTS:
00002590  21FC 00002860 1256      1927      MOVE.L #P_OP_RTS, Arg_AddStrToBuffer_String
00002598  4EB8 24DE               1928      JSR PRINT_TO_BUFFER
0000259C  4E75                    1929      RTS
0000259E                          1930  PRINT_OP_NOP:
0000259E  21FC 00002859 1256      1931      MOVE.L #P_OP_NOP, Arg_AddStrToBuffer_String
000025A6  4EB8 24DE               1932      JSR PRINT_TO_BUFFER
000025AA  4E75                    1933      RTS
000025AC                          1934  PRINT_OP_LEA:
000025AC  21FC 0000284B 1256      1935      MOVE.L #P_OP_LEA, Arg_AddStrToBuffer_String
000025B4  4EB8 24DE               1936      JSR PRINT_TO_BUFFER
000025B8  4EB9 0000279E           1937      JSR PRINT_OP_SIZE
000025BE  4E75                    1938      RTS
000025C0                          1939  PRINT_OP_NEG:
000025C0  21FC 00002867 1256      1940      MOVE.L #P_OP_NEG, Arg_AddStrToBuffer_String
000025C8  4EB8 24DE               1941      JSR PRINT_TO_BUFFER
000025CC  4EB9 0000279E           1942      JSR PRINT_OP_SIZE
000025D2  4E75                    1943      RTS
000025D4                          1944  PRINT_OP_MOVEM_W:
000025D4  21FC 00002833 1256      1945      MOVE.L #P_OP_MOVEM_W, Arg_AddStrToBuffer_String
000025DC  4EB8 24DE               1946      JSR PRINT_TO_BUFFER
000025E0  4E75                    1947      RTS
000025E2                          1948  PRINT_OP_MOVEM_L:
000025E2  21FC 0000283F 1256      1949      MOVE.L #P_OP_MOVEM_L, Arg_AddStrToBuffer_String
000025EA  4EB8 24DE               1950      JSR PRINT_TO_BUFFER
000025EE  4E75                    1951      RTS
000025F0                          1952      
000025F0                          1953  PRINT_OP_SUBQ:
000025F0  21FC 0000286E 1256      1954      MOVE.L #P_OP_SUBQ, Arg_AddStrToBuffer_String
000025F8  4EB8 24DE               1955      JSR PRINT_TO_BUFFER
000025FC  4EB9 0000279E           1956      JSR PRINT_OP_SIZE
00002602  4E75                    1957      RTS
00002604                          1958  
00002604                          1959  PRINT_OP_BCS:
00002604  21FC 0000287D 1256      1960      MOVE.L #P_OP_BCS, Arg_AddStrToBuffer_String
0000260C  4EB8 24DE               1961      JSR PRINT_TO_BUFFER
00002610  4EB9 0000279E           1962      JSR PRINT_OP_SIZE
00002616  4E75                    1963      RTS
00002618                          1964  PRINT_OP_BGE:
00002618  21FC 00002884 1256      1965      MOVE.L #P_OP_BGE, Arg_AddStrToBuffer_String
00002620  4EB8 24DE               1966      JSR PRINT_TO_BUFFER
00002624  4EB9 0000279E           1967      JSR PRINT_OP_SIZE
0000262A  4E75                    1968      RTS
0000262C                          1969  PRINT_OP_BLT:
0000262C  21FC 0000288B 1256      1970      MOVE.L #P_OP_BLT, Arg_AddStrToBuffer_String
00002634  4EB8 24DE               1971      JSR PRINT_TO_BUFFER
00002638  4EB9 0000279E           1972      JSR PRINT_OP_SIZE
0000263E  4E75                    1973      RTS
00002640                          1974  PRINT_OP_BVC:
00002640  21FC 00002892 1256      1975      MOVE.L #P_OP_BVC, Arg_AddStrToBuffer_String
00002648  4EB8 24DE               1976      JSR PRINT_TO_BUFFER
0000264C  4EB9 0000279E           1977      JSR PRINT_OP_SIZE
00002652  4E75                    1978      RTS
00002654                          1979  PRINT_OP_BRA:
00002654  21FC 00002876 1256      1980      MOVE.L #P_OP_BRA, Arg_AddStrToBuffer_String
0000265C  4EB8 24DE               1981      JSR PRINT_TO_BUFFER
00002660  4EB9 0000279E           1982      JSR PRINT_OP_SIZE
00002666  4E75                    1983      RTS
00002668                          1984  
00002668                          1985  
00002668                          1986  PRINT_OP_DIVS:
00002668  21FC 00002899 1256      1987      MOVE.L #P_OP_DIVS, Arg_AddStrToBuffer_String
00002670  4EB8 24DE               1988      JSR PRINT_TO_BUFFER
00002674  4E75                    1989      RTS
00002676                          1990  PRINT_OP_OR:
00002676  21FC 000028A4 1256      1991      MOVE.L #P_OP_OR, Arg_AddStrToBuffer_String
0000267E  4EB8 24DE               1992      JSR PRINT_TO_BUFFER
00002682  4EB9 0000279E           1993      JSR PRINT_OP_SIZE
00002688  4E75                    1994      RTS
0000268A                          1995  
0000268A                          1996  PRINT_OP_SUB:
0000268A  21FC 000028AA 1256      1997      MOVE.L #P_OP_SUB, Arg_AddStrToBuffer_String
00002692  4EB8 24DE               1998      JSR PRINT_TO_BUFFER
00002696  4EB9 0000279E           1999      JSR PRINT_OP_SIZE
0000269C  4E75                    2000      RTS
0000269E                          2001  
0000269E                          2002  
0000269E                          2003  PRINT_OP_EOR:
0000269E  21FC 000028B1 1256      2004      MOVE.L #P_OP_EOR, Arg_AddStrToBuffer_String
000026A6  4EB8 24DE               2005      JSR PRINT_TO_BUFFER
000026AA  4EB9 0000279E           2006      JSR PRINT_OP_SIZE
000026B0  4E75                    2007      RTS
000026B2                          2008  PRINT_OP_CMP:
000026B2  21FC 000028B8 1256      2009      MOVE.L #P_OP_CMP, Arg_AddStrToBuffer_String
000026BA  4EB8 24DE               2010      JSR PRINT_TO_BUFFER
000026BE  4EB9 0000279E           2011      JSR PRINT_OP_SIZE
000026C4  4E75                    2012      RTS
000026C6                          2013  
000026C6                          2014  PRINT_OP_MULS:
000026C6  21FC 000028BF 1256      2015      MOVE.L #P_OP_MULS, Arg_AddStrToBuffer_String
000026CE  4EB8 24DE               2016      JSR PRINT_TO_BUFFER
000026D2  4E75                    2017      RTS
000026D4                          2018  
000026D4                          2019  PRINT_OP_ADD:
000026D4  21FC 000028D1 1256      2020      MOVE.L #P_OP_ADD, Arg_AddStrToBuffer_String
000026DC  4EB8 24DE               2021      JSR PRINT_TO_BUFFER
000026E0  4EB9 0000279E           2022      JSR PRINT_OP_SIZE
000026E6  4E75                    2023      RTS
000026E8                          2024  PRINT_OP_ADDA:
000026E8  21FC 000028C9 1256      2025      MOVE.L #P_OP_ADDA, Arg_AddStrToBuffer_String
000026F0  4EB8 24DE               2026      JSR PRINT_TO_BUFFER
000026F4  4EB9 000027B8           2027      JSR PRINT_OP_SIZE_ADDA
000026FA  4E75                    2028      RTS
000026FC                          2029  
000026FC                          2030  
000026FC                          2031  PRINT_OP_LSL:
000026FC  21FC 000028DF 1256      2032      MOVE.L #P_OP_LSL, Arg_AddStrToBuffer_String
00002704  4EB8 24DE               2033      JSR PRINT_TO_BUFFER
00002708  4EB9 0000279E           2034      JSR PRINT_OP_SIZE
0000270E  4E75                    2035      RTS
00002710                          2036  PRINT_OP_LSR:
00002710  21FC 000028D8 1256      2037      MOVE.L #P_OP_LSR, Arg_AddStrToBuffer_String
00002718  4EB8 24DE               2038      JSR PRINT_TO_BUFFER
0000271C  4EB9 0000279E           2039      JSR PRINT_OP_SIZE
00002722  4E75                    2040      RTS
00002724                          2041  PRINT_OP_ASR:
00002724  21FC 000028E6 1256      2042      MOVE.L #P_OP_ASR, Arg_AddStrToBuffer_String
0000272C  4EB8 24DE               2043      JSR PRINT_TO_BUFFER
00002730  4EB9 0000279E           2044      JSR PRINT_OP_SIZE
00002736  4E75                    2045      RTS
00002738                          2046  PRINT_OP_ASL:
00002738  21FC 000028ED 1256      2047      MOVE.L #P_OP_ASL, Arg_AddStrToBuffer_String
00002740  4EB8 24DE               2048      JSR PRINT_TO_BUFFER
00002744  4EB9 0000279E           2049      JSR PRINT_OP_SIZE
0000274A  4E75                    2050      RTS
0000274C                          2051  PRINT_OP_ROL:
0000274C  21FC 000028FB 1256      2052      MOVE.L #P_OP_ROL, Arg_AddStrToBuffer_String
00002754  4EB8 24DE               2053      JSR PRINT_TO_BUFFER
00002758  4EB9 0000279E           2054      JSR PRINT_OP_SIZE
0000275E  4E75                    2055      RTS
00002760                          2056  PRINT_OP_ROR:
00002760  21FC 000028F4 1256      2057      MOVE.L #P_OP_ROR, Arg_AddStrToBuffer_String
00002768  4EB8 24DE               2058      JSR PRINT_TO_BUFFER
0000276C  4EB9 0000279E           2059      JSR PRINT_OP_SIZE
00002772  4E75                    2060      RTS
00002774                          2061  
00002774                          2062  
00002774                          2063  PRINT_SIZE_BYTE:
00002774  21FC 000027D7 1256      2064      MOVE.L #P_SIZE_B, Arg_AddStrToBuffer_String
0000277C  4EB8 24DE               2065      JSR PRINT_TO_BUFFER
00002780  4E75                    2066      RTS    
00002782                          2067  
00002782                          2068  PRINT_SIZE_WORD:
00002782  21FC 000027DB 1256      2069      MOVE.L #P_SIZE_W, Arg_AddStrToBuffer_String
0000278A  4EB8 24DE               2070      JSR PRINT_TO_BUFFER
0000278E  4E75                    2071      RTS
00002790                          2072      
00002790                          2073  PRINT_SIZE_LONG:
00002790  21FC 000027DF 1256      2074      MOVE.L #P_SIZE_L, Arg_AddStrToBuffer_String
00002798  4EB8 24DE               2075      JSR PRINT_TO_BUFFER
0000279C  4E75                    2076      RTS
0000279E                          2077  
0000279E                          2078  PRINT_OP_SIZE:                     ;Prints current OP code byte size if applicable
0000279E  0C38 0000 176C          2079      CMP.B  #%00,OP_SIZE         ;Checks for byte size
000027A4  67CE                    2080      BEQ    PRINT_SIZE_BYTE      ;Print .B to buffer
000027A6  0C38 0001 176C          2081      CMP.B  #%01,OP_SIZE         ;Check for word size
000027AC  67D4                    2082      BEQ    PRINT_SIZE_WORD      ;Print .W to buffer
000027AE  0C38 0002 176C          2083      CMP.B  #%10,OP_SIZE         ;Check for long size
000027B4  67DA                    2084      BEQ    PRINT_SIZE_LONG      ;Print .L to buffer
000027B6  4E75                    2085      RTS
000027B8                          2086      
000027B8                          2087  PRINT_OP_SIZE_ADDA:                  ;Special  print for ADDA
000027B8  0C38 0000 176C          2088      CMP.B #%0,OP_SIZE
000027BE  67C2                    2089      BEQ    PRINT_SIZE_WORD
000027C0  66CE                    2090      BNE    PRINT_SIZE_LONG
000027C2                          2091      
000027C2                          2092  
000027C2                          2093  
000027C2                          2094  
000027C2                          2095  
000027C2= 20 20 20 44 41 54 ...   2096  P_INVALID_OP    DC.B    '   DATA   $',0
000027CE= 46 6F 75 6E 64 20 ...   2097  OP_FOUND        DC.B    'Found OP',0 ; this should be taken out later
000027D7= 2E 42 20 00             2098  P_SIZE_B        DC.B    '.B ',0
000027DB= 2E 57 20 00             2099  P_SIZE_W        DC.B    '.W ',0
000027DF= 2E 4C 20 00             2100  P_SIZE_L        DC.B    '.L ',0
000027E3= 20 20 20 4F 52 49 00    2101  P_OP_ORI        DC.B    '   ORI',0
000027EA= 20 20 20 43 4D 50 ...   2102  P_OP_CMPI       DC.B    '   CMPI',0
000027F2= 20 20 20 42 43 4C ...   2103  P_OP_BCLR       DC.B    '   BCLR',0
000027FA= 20 20 20 4D 4F 56 ...   2104  P_OP_MOVEB      DC.B    '   MOVE.B ',0
00002805= 20 20 20 4D 4F 56 ...   2105  P_OP_MOVEA_L    DC.B    '   MOVEA.L ',0 
00002811= 20 20 20 4D 4F 56 ...   2106  P_OP_MOVE_L     DC.B    '   MOVE.L ',0
0000281C= 20 20 20 4D 4F 56 ...   2107  P_OP_MOVEA_W    DC.B    '   MOVEA.W ',0
00002828= 20 20 20 4D 4F 56 ...   2108  P_OP_MOVE_W     DC.B    '   MOVE.W ',0
00002833= 20 20 20 4D 4F 56 ...   2109  P_OP_MOVEM_W    DC.B    '   MOVEM.W ',0
0000283F= 20 20 20 4D 4F 56 ...   2110  P_OP_MOVEM_L    DC.B    '   MOVEM.L ',0
0000284B= 20 20 20 4C 45 41 00    2111  P_OP_LEA        DC.B    '   LEA',0
00002852= 20 20 20 4A 53 52 00    2112  P_OP_JSR        DC.B    '   JSR',0
00002859= 20 20 20 4E 4F 50 00    2113  P_OP_NOP        DC.B    '   NOP',0
00002860= 20 20 20 52 54 53 00    2114  P_OP_RTS        DC.B    '   RTS',0
00002867= 20 20 20 4E 45 47 00    2115  P_OP_NEG        DC.B    '   NEG',0
0000286E= 20 20 20 53 55 42 ...   2116  P_OP_SUBQ       DC.B    '   SUBQ',0
00002876= 20 20 20 42 52 41 00    2117  P_OP_BRA        DC.B    '   BRA',0
0000287D= 20 20 20 42 43 53 00    2118  P_OP_BCS        DC.B    '   BCS',0
00002884= 20 20 20 42 47 45 00    2119  P_OP_BGE        DC.B    '   BGE',0
0000288B= 20 20 20 42 4C 54 00    2120  P_OP_BLT        DC.B    '   BLT',0
00002892= 20 20 20 42 56 43 00    2121  P_OP_BVC        DC.B    '   BVC',0
00002899= 20 20 20 44 49 56 ...   2122  P_OP_DIVS       DC.B    '   DIVS.W ',0
000028A4= 20 20 20 4F 52 00       2123  P_OP_OR         DC.B    '   OR',0
000028AA= 20 20 20 53 55 42 00    2124  P_OP_SUB        DC.B    '   SUB',0
000028B1= 20 20 20 45 4F 52 00    2125  P_OP_EOR        DC.B    '   EOR',0
000028B8= 20 20 20 43 4D 50 00    2126  P_OP_CMP        DC.B    '   CMP',0
000028BF= 20 20 20 4D 55 4C ...   2127  P_OP_MULS       DC.B    '   MULS.W',0
000028C9= 20 20 20 41 44 44 ...   2128  P_OP_ADDA       DC.B    '   ADDA',0
000028D1= 20 20 20 41 44 44 00    2129  P_OP_ADD        DC.B    '   ADD',0
000028D8= 20 20 20 4C 53 52 00    2130  P_OP_LSR        DC.B    '   LSR',0
000028DF= 20 20 20 4C 53 4C 00    2131  P_OP_LSL        DC.B    '   LSL',0
000028E6= 20 20 20 41 53 52 00    2132  P_OP_ASR        DC.B    '   ASR',0
000028ED= 20 20 20 41 53 4C 00    2133  P_OP_ASL        DC.B    '   ASL',0
000028F4= 20 20 20 52 4F 52 00    2134  P_OP_ROR        DC.B    '   ROR',0
000028FB= 20 20 20 52 4F 4C 00    2135  P_OP_ROL        DC.B    '   ROL',0
00002902                          2136   
00002902                          2137  
00002902                          2138  
00002902                          2139  
00002902                          2140  
00002902                          2141  
00002902                          2142  
00002902                          2143  
00002902                          2144  
00002902                          2145  
00002902                          2146  
00002902                          2147  
00002902                          2148  -------------------- end include --------------------
00002902                          2149      INCLUDE "EA_ver2.x68"
00002902                          2150  
00002902                          2151  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00002902                          2152  
00002902                          2153  
00002902= 41                      2154  ADDRESS         DC.B    $41
00002903= 44                      2155  DATA            DC.B    $44
00002904                          2156  
00002904= 28                      2157  PTHSIS_OPEN     DC.B    $28
00002905= 29                      2158  PTHSIS_CLSD     DC.B    $29
00002906= 24                      2159  HEX_SIGN        DC.B    $24
00002907= 23                      2160  IMMDTE_VALU     DC.B    $23
00002908= 2B                      2161  PLUS_SIGN       DC.B    $2B
00002909= 2D                      2162  MINUS_SIGN      DC.B    $2D
0000290A                          2163  
0000290A= 2C                      2164  COMMA           DC.B    $2C
0000290B= 20                      2165  SPACE           DC.B    $20
0000290C                          2166  
0000290C  =0000000D               2167  CR              EQU     $0D              ; ASCII code for carriage return
0000290C  =0000000A               2168  LF              EQU     $0A              ; ASCII code for line feed
0000290C                          2169  
0000290C                          2170  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000290C                          2171  
0000290C                          2172  
0000290C                          2173  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000290C                          2174  TRAILING_SIZE   DS.W    1 * Size of any immediate or
0000290E                          2175                            * address values. Immediate or address
0000290E                          2176                            * value of a BYTE is still processed as
0000290E                          2177                            * WORD because the trailing bytes
0000290E                          2178                            * are represented as a word regardless.
0000290E                          2179                            * $1 = BYTE, $2 = WORD, $4 = LONG
0000290E                          2180  ;START_ADDRESS   EQU     $4000 * Used to parse through the entire instruction
0000290E                          2181  ;END_ADDRESS     EQU     $5000
0000290E                          2182  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000290E                          2183   
0000290E                          2184  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000290E                          2185  main_EA:
0000290E  4EB8 196C               2186      JSR PARSE_EA_CONSTANT_BITS    
00002912                          2187      ;MOVE.W  A5, D0
00002912                          2188      ;ADDI.B  #2, D0
00002912                          2189      ;MOVEA.L D0, A5
00002912                          2190      *MOVEA.L #START_ADDRESS, A5
00002912                          2191      
00002912                          2192  
00002912  4EB9 0000291C           2193      JSR     CHECK_XXXX
00002918                          2194  EXT 
00002918  4EF8 11C2               2195      JMP check_print * This EXT alias is critical for NOT loading error
0000291C                          2196  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000291C                          2197  
0000291C                          2198  
0000291C                          2199  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000291C                          2200  
0000291C                          2201  CHECK_XXXX:
0000291C  0C38 0008 176D          2202      CMPI.B  #$8, MNEMONIC
00002922  6D00 0008               2203      BLT     CHECK_0XXX
00002926  4EF9 0000293C           2204      JMP     CHECK_1XXX
0000292C                          2205  
0000292C                          2206  CHECK_0XXX:
0000292C  0C38 0004 176D          2207      CMPI.B  #$4, MNEMONIC
00002932  6D00 004C               2208      BLT     CHECK_00XX
00002936  4EF9 0000298E           2209      JMP     CHECK_01XX
0000293C                          2210  
0000293C                          2211  CHECK_1XXX:
0000293C  0C38 0008 176D          2212      CMPI.B  #$8, MNEMONIC
00002942  6700 0302               2213      BEQ     LOAD_1000
00002946  0C38 0009 176D          2214      CMPI.B  #$9, MNEMONIC
0000294C  6700 02F2               2215      BEQ     LOAD_1001
00002950  0C38 000B 176D          2216      CMPI.B  #$B, MNEMONIC
00002956  6700 02E2               2217      BEQ     LOAD_1011
0000295A  0C38 000C 176D          2218      CMPI.B  #$C, MNEMONIC
00002960  6700 02D2               2219      BEQ     LOAD_1100
00002964  0C38 000D 176D          2220      CMPI.B  #$D, MNEMONIC
0000296A  6700 026C               2221      BEQ     LOAD_1101
0000296E  0C38 000E 176D          2222      CMPI.B  #$E, MNEMONIC
00002974  6700 0038               2223      BEQ     LOAD_1110
00002978                          2224      
00002978  4EF9 000032FE           2225      JMP     INVALID
0000297E                          2226      
0000297E  4E75                    2227      RTS
00002980                          2228  
00002980                          2229  CHECK_00XX:
00002980  0C38 0001 176D          2230      CMPI.B  #$1, MNEMONIC
00002986  6D00 0596               2231      BLT     LOAD_0000
0000298A  6C00 06FA               2232      BGE     LOAD_00XX
0000298E                          2233  
0000298E                          2234  CHECK_01XX:
0000298E  0C38 0004 176D          2235      CMPI.B  #%0100, MNEMONIC
00002994  6700 042C               2236      BEQ     LOAD_0100
00002998  0C38 0005 176D          2237      CMPI.B  #%0101, MNEMONIC
0000299E  6700 0398               2238      BEQ     LOAD_0101
000029A2  0C38 0006 176D          2239      CMPI.B  #%0110, MNEMONIC
000029A8  6700 0124               2240      BEQ     LOAD_0110
000029AC  4E75                    2241      RTS
000029AE                          2242  
000029AE                          2243  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000029AE                          2244  
000029AE                          2245  
000029AE                          2246  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000029AE                          2247  
000029AE                          2248  LOAD_1110:
000029AE  247C 00000000           2249              MOVEA.L #0, A2
000029B4  267C 00000000           2250              MOVEA.L #0, A3
000029BA  4285                    2251              CLR.L   D5
000029BC                          2252      
000029BC  1A38 176F               2253              MOVE.B  SECOND_3, D5
000029C0  0205 0003               2254              ANDI.B  #%011, D5
000029C4                          2255      
000029C4  0C05 0003               2256              CMPI.B  #%11, D5
000029C8  6700 0006               2257              BEQ     MYBE_ASd_1
000029CC  6600 0068               2258              BNE     MYBE_ASd_2
000029D0                          2259  
000029D0  0C38 0000 176E          2260  MYBE_ASd_1  CMPI.B  #%000, FIRST_3
000029D6  6700 001C               2261              BEQ     ASd_1
000029DA  0C38 0001 176E          2262              CMPI.B  #%001, FIRST_3
000029E0  6700 0012               2263              BEQ     ASd_1 * LSd
000029E4  0C38 0003 176E          2264              CMPI.B  #%011, FIRST_3
000029EA  6700 0008               2265              BEQ     ASd_1 * ROd
000029EE  4EF9 000032FE           2266              JMP     INVALID
000029F4                          2267  
000029F4  0C38 0007 1770          2268  ASd_1       CMPI.B  #%111, THIRD_3
000029FA  6600 0902               2269              BNE     INVALID
000029FE                          2270              
000029FE  0C38 0004 1771          2271              CMPI.B  #%100, FOURTH_3
00002A04  6700 08F8               2272              BEQ     INVALID
00002A08                          2273              
00002A08  367C 2A20               2274              MOVEA.W #ASd_1_BACK, A3
00002A0C  0C38 0000 1771          2275              CMPI.B  #%000, FOURTH_3
00002A12  6700 0782               2276              BEQ     SIZE_W
00002A16  0C38 0001 1771          2277              CMPI.B  #%001, FOURTH_3
00002A1C  6700 0780               2278              BEQ     SIZE_L
00002A20                          2279  
00002A20  1638 1770               2280  ASd_1_BACK  MOVE.B  THIRD_3, D3
00002A24  1438 1771               2281              MOVE.B  FOURTH_3, D2
00002A28                          2282              
00002A28  4EB9 000030EA           2283              JSR     LOAD_EA
00002A2E  4EB9 0000324C           2284              JSR     LOAD_NEW_LINE
00002A34  4E75                    2285              RTS
00002A36                          2286  
00002A36  4285                    2287  MYBE_ASd_2  CLR.L   D5
00002A38                          2288  
00002A38  1A38 1770               2289              MOVE.B  THIRD_3, D5
00002A3C  0205 0003               2290              ANDI.B  #%011, D5
00002A40  0C05 0002               2291              CMPI.B  #%10, D5
00002A44  6600 0006               2292              BNE     ASd_2 * or LSd or ROd
00002A48  6700 08B4               2293              BEQ     INVALID
00002A4C                          2294              
00002A4C  4285                    2295  ASd_2       CLR.L   D5
00002A4E                          2296  
00002A4E  1A38 1770               2297              MOVE.B  THIRD_3, D5
00002A52  0205 0004               2298              ANDI.B  #%100, D5
00002A56  0C05 0004               2299              CMPI.B  #%100, D5
00002A5A  6700 0048               2300              BEQ     ASd_2_REG
00002A5E  6600 0002               2301              BNE     ASd_2_IMD
00002A62                          2302              
00002A62  347C 2A88               2303  ASd_2_IMD   MOVEA.W #ASd_2_IMD_B, A2
00002A66  0C38 0000 176E          2304              CMPI.B  #%000, FIRST_3
00002A6C  6700 0006               2305              BEQ     LOAD_8
00002A70  6600 000C               2306              BNE     LOAD_FIRST3
00002A74                          2307              
00002A74  183C 0008               2308  LOAD_8      MOVE.B  #8, D4
00002A78  4EF9 00003218           2309              JMP     LOAD_IMMDTE
00002A7E                          2310  
00002A7E  1838 176E               2311  LOAD_FIRST3 MOVE.B  FIRST_3, D4
00002A82  4EF9 00003218           2312              JMP     LOAD_IMMDTE
00002A88                          2313  
00002A88  4EB9 0000324E           2314  ASd_2_IMD_B JSR     LOAD_COMMA_SPACE
00002A8E                          2315  
00002A8E  1638 1770               2316              MOVE.B  THIRD_3, D3
00002A92  1438 1771               2317              MOVE.B  FOURTH_3, D2
00002A96                          2318              
00002A96  4EB9 000030EA           2319              JSR     LOAD_EA
00002A9C  4EB9 0000324C           2320              JSR     LOAD_NEW_LINE
00002AA2  4E75                    2321              RTS
00002AA4                          2322  
00002AA4  163C 0000               2323  ASd_2_REG   MOVE.B  #%000, D3
00002AA8  1438 176E               2324              MOVE.B  FIRST_3, D2
00002AAC                          2325              
00002AAC  4EB9 000030EA           2326              JSR     LOAD_EA
00002AB2  4EB9 0000324E           2327              JSR     LOAD_COMMA_SPACE
00002AB8                          2328              
00002AB8  163C 0000               2329              MOVE.B  #%000, D3
00002ABC  1438 1771               2330              MOVE.B  FOURTH_3, D2
00002AC0                          2331              
00002AC0  4EB9 000030EA           2332              JSR     LOAD_EA
00002AC6  4EB9 0000324C           2333              JSR     LOAD_NEW_LINE
00002ACC  4E75                    2334              RTS
00002ACE                          2335  
00002ACE                          2336  
00002ACE                          2337  
00002ACE                          2338  LOAD_0110:
00002ACE  247C 00000000           2339              MOVEA.L #0, A2
00002AD4  267C 00000000           2340              MOVEA.L #0, A3
00002ADA  4285                    2341              CLR.L   D5
00002ADC  4286                    2342              CLR.L   D6
00002ADE  4284                    2343              CLR.L   D4
00002AE0                          2344  
00002AE0  0C38 0000 176E          2345              CMPI.B  #%000, FIRST_3
00002AE6  6700 0006               2346              BEQ     MYBE_BRA
00002AEA  6600 0010               2347              BNE     NOT_BRA
00002AEE  0C38 0004 176F          2348  MYBE_BRA    CMPI.B  #%100, SECOND_3
00002AF4  6D00 003A               2349              BLT     BRA
00002AF8  6C00 0002               2350              BGE     NOT_BRA
00002AFC                          2351              
00002AFC  1A38 176E               2352  NOT_BRA     MOVE.B  FIRST_3, D5
00002B00  E305                    2353              ASL.B   #1, D5
00002B02  1C38 176F               2354              MOVE.B  SECOND_3, D6
00002B06  E406                    2355              ASR.B   #2, D6
00002B08  DA06                    2356              ADD.B   D6, D5
00002B0A                          2357              
00002B0A  0C05 0005               2358              CMPI.B  #%0101, D5
00002B0E  6700 0020               2359              BEQ     BRA * CS
00002B12  0C05 0008               2360              CMPI.B  #%1000, D5
00002B16  6700 0018               2361              BEQ     BRA * VC
00002B1A  0C05 000C               2362              CMPI.B  #%1100, D5
00002B1E  6700 0010               2363              BEQ     BRA * GE
00002B22  0C05 000D               2364              CMPI.B  #%1101, D5
00002B26  6700 0008               2365              BEQ     BRA * LT
00002B2A                          2366              
00002B2A  4EF9 000032FE           2367              JMP     INVALID
00002B30                          2368              
00002B30                          2369              
00002B30  4285                    2370  BRA         CLR.L   D5
00002B32  4286                    2371              CLR.L   D6
00002B34                          2372  
00002B34  3A0D                    2373              MOVE.W  A5, D5 * D5 has $1002 (Starting + MNEMONICS)
00002B36  3C38 10A0               2374              MOVE.W  CUR_OP_CODE, D6
00002B3A  0246 00FF               2375              ANDI.W  #$00FF, D6 * D6 now has $E
00002B3E  0C06 0000               2376              CMPI.B  #$00, D6
00002B42  6700 0052               2377              BEQ     BRA_WORD * word. there is 4 hex trailing bits (word)
00002B46                          2378  
00002B46  0C06 00FF               2379              CMPI.B  #$FF, D6
00002B4A  6700 0010               2380              BEQ     BRA_BYTE
00002B4E  0C06 00FE               2381              CMPI.B  #$FE, D6
00002B52  6700 0008               2382              BEQ     BRA_BYTE
00002B56                          2383  
00002B56  4EF9 000032FE           2384              JMP     INVALID
00002B5C                          2385              
00002B5C  0C06 00FE               2386  BRA_BYTE    CMPI.B  #$FE, D6
00002B60  6700 0010               2387              BEQ     DOWN_ZERO
00002B64  0C06 00FF               2388              CMPI.B  #$FF, D6
00002B68  6700 0010               2389              BEQ     DOWN_ONE
00002B6C                          2390              
00002B6C  4EF9 000032FE           2391              JMP     INVALID
00002B72                          2392              
00002B72  5505                    2393  DOWN_ZERO   SUBI.B  #$2, D5 * D5 has $1000 (Starting)
00002B74  4EF9 00002B82           2394              JMP     BRA_BYTE2
00002B7A                          2395              
00002B7A  5305                    2396  DOWN_ONE    SUBI.B  #$1, D5 * D5 has $1001 (Starting + 1)
00002B7C  4EF9 00002B82           2397              JMP     BRA_BYTE2
00002B82                          2398              
00002B82  347C 2B8E               2399  BRA_BYTE2   MOVE.W  #BRA_BYTE3, A2
00002B86  3805                    2400              MOVE.W  D5, D4
00002B88  4EF9 000031F4           2401              JMP     LOAD_ABS_SHORT
00002B8E  4EB9 0000324C           2402  BRA_BYTE3   JSR     LOAD_NEW_LINE
00002B94  4E75                    2403              RTS
00002B96                          2404  
00002B96  381D                    2405  BRA_WORD    MOVE.W  (A5)+, D4 * D4 now has $000E
00002B98                          2406  
00002B98  0C84 00008000           2407              CMPI.L  #$8000, D4
00002B9E  6C00 001A               2408              BGE     NEG_WORD
00002BA2  6D00 0002               2409              BLT     POS_WORD
00002BA6                          2410              
00002BA6  347C 2BB2               2411  POS_WORD    MOVE.W  #BRA_WORD_BK, A2
00002BAA  D845                    2412              ADD.W   D5, D4 * D4 now has $100E
00002BAC  4EF9 000031F4           2413              JMP     LOAD_ABS_SHORT
00002BB2  4EB9 0000324C           2414  BRA_WORD_BK JSR     LOAD_NEW_LINE
00002BB8  4E75                    2415              RTS
00002BBA                          2416  
00002BBA  347C 2BD0               2417  NEG_WORD    MOVE.W  #BRA_WRD_BK2, A2
00002BBE  4444                    2418              NEG     D4
00002BC0                          2419              
00002BC0  B885                    2420              CMP.L   D5, D4 * $4002 vs DISPLACEMENT
00002BC2  6E00 073A               2421              BGT     INVALID
00002BC6                          2422              
00002BC6  9A44                    2423              SUB.W   D4, D5 * D5 now has $1000 - 2cmp'ed $000E
00002BC8  3805                    2424              MOVE.W  D5, D4
00002BCA  4EF9 000031F4           2425              JMP     LOAD_ABS_SHORT
00002BD0  4EB9 0000324C           2426  BRA_WRD_BK2 JSR     LOAD_NEW_LINE
00002BD6  4E75                    2427              RTS
00002BD8                          2428  
00002BD8                          2429  
00002BD8                          2430  
00002BD8                          2431  LOAD_1101:
00002BD8  0C38 0003 176F          2432              CMPI.B  #%011, SECOND_3
00002BDE  6700 0012               2433              BEQ     ADDA
00002BE2  0C38 0007 176F          2434              CMPI.B  #%111, SECOND_3
00002BE8  6700 0008               2435              BEQ     ADDA
00002BEC                          2436              
00002BEC  4EF9 00002C46           2437              JMP     LOAD_1000
00002BF2                          2438              
00002BF2  367C 2C0A               2439  ADDA        MOVEA.W #ADDA_BACK, A3
00002BF6  0C38 0000 1771          2440              CMPI.B  #%000, FOURTH_3
00002BFC  6700 0598               2441              BEQ     SIZE_W
00002C00  0C38 0001 1771          2442              CMPI.B  #%001, FOURTH_3
00002C06  6700 0596               2443              BEQ     SIZE_L
00002C0A                          2444              
00002C0A  1638 1770               2445  ADDA_BACK   MOVE.B  THIRD_3, D3
00002C0E  1438 1771               2446              MOVE.B  FOURTH_3, D2
00002C12                          2447  
00002C12  4EB9 000030EA           2448              JSR     LOAD_EA
00002C18  4EB9 0000324E           2449              JSR     LOAD_COMMA_SPACE
00002C1E                          2450              
00002C1E  163C 0001               2451              MOVE.B  #%001, D3
00002C22  1438 176E               2452              MOVE.B  FIRST_3, D2
00002C26                          2453              
00002C26  4EB9 000030EA           2454              JSR     LOAD_EA
00002C2C  4EB9 0000324C           2455              JSR     LOAD_NEW_LINE
00002C32  4E75                    2456              RTS
00002C34                          2457  
00002C34                          2458  LOAD_1100:
00002C34  4EF9 00002C46           2459      JMP     LOAD_1000
00002C3A                          2460      
00002C3A                          2461  LOAD_1011:
00002C3A  4EF9 00002C46           2462      JMP     LOAD_1000
00002C40                          2463  
00002C40                          2464  
00002C40                          2465  LOAD_1001:
00002C40  4EF9 00002C46           2466      JMP     LOAD_1000
00002C46                          2467  
00002C46                          2468  
00002C46                          2469  LOAD_1000:
00002C46  4283                    2470              CLR.L   D3
00002C48  4282                    2471              CLR.L   D2
00002C4A  267C 00000000           2472              MOVEA.L #0, A3
00002C50                          2473              
00002C50  0C38 0007 176F          2474              CMPI.B  #%111, SECOND_3
00002C56  6700 009E               2475              BEQ     DIVS
00002C5A                          2476              
00002C5A  0C38 0003 176F          2477              CMPI.B  #%011, SECOND_3
00002C60  6700 069C               2478              BEQ     INVALID
00002C64                          2479              
00002C64  0C38 0004 176F          2480              CMPI.B  #%100, SECOND_3
00002C6A  6D00 0006               2481              BLT     DIR_0 * direction bit 0
00002C6E  6C00 0044               2482              BGE     DIR_1 * direction bit 1
00002C72                          2483              
00002C72  367C 2C8A               2484  DIR_0       MOVEA.W #OR_BACK, A3
00002C76  0C38 0000 1771          2485              CMPI.B  #%000, FOURTH_3
00002C7C  6700 0518               2486              BEQ     SIZE_W
00002C80  0C38 0001 1771          2487              CMPI.B  #%001, FOURTH_3
00002C86  6700 0516               2488              BEQ     SIZE_L
00002C8A                          2489              
00002C8A  1638 1770               2490  OR_BACK     MOVE.B  THIRD_3, D3
00002C8E  1438 1771               2491              MOVE.B  FOURTH_3, D2
00002C92                          2492  
00002C92  4EB9 000030EA           2493              JSR     LOAD_EA
00002C98  4EB9 0000324E           2494              JSR     LOAD_COMMA_SPACE
00002C9E                          2495              
00002C9E  163C 0000               2496              MOVE.B  #%000, D3
00002CA2  1438 176E               2497              MOVE.B  FIRST_3, D2
00002CA6                          2498              
00002CA6  4EB9 000030EA           2499              JSR     LOAD_EA
00002CAC  4EB9 0000324C           2500              JSR     LOAD_NEW_LINE
00002CB2  4E75                    2501              RTS
00002CB4                          2502              
00002CB4  163C 0000               2503  DIR_1       MOVE.B  #%000, D3
00002CB8  1438 176E               2504              MOVE.B  FIRST_3, D2
00002CBC                          2505              
00002CBC  4EB9 000030EA           2506              JSR     LOAD_EA
00002CC2  4EB9 0000324E           2507              JSR     LOAD_COMMA_SPACE
00002CC8                          2508              
00002CC8  367C 2CE0               2509              MOVEA.W #OR_BACK2, A3
00002CCC  0C38 0000 1771          2510              CMPI.B  #%000, FOURTH_3
00002CD2  6700 04C2               2511              BEQ     SIZE_W
00002CD6  0C38 0001 1771          2512              CMPI.B  #%001, FOURTH_3
00002CDC  6700 04C0               2513              BEQ     SIZE_L
00002CE0                          2514              
00002CE0  1638 1770               2515  OR_BACK2    MOVE.B  THIRD_3, D3
00002CE4  1438 1771               2516              MOVE.B  FOURTH_3, D2
00002CE8                          2517  
00002CE8  4EB9 000030EA           2518              JSR     LOAD_EA
00002CEE  4EB9 0000324C           2519              JSR     LOAD_NEW_LINE
00002CF4  4E75                    2520              RTS    
00002CF6                          2521              
00002CF6  163C 0000               2522  DIVS        MOVE.B  #%000, D3
00002CFA  1438 176E               2523              MOVE.B  FIRST_3, D2
00002CFE                          2524  
00002CFE  4EB9 000030EA           2525              JSR     LOAD_EA
00002D04  4EB9 0000324E           2526              JSR     LOAD_COMMA_SPACE
00002D0A                          2527              
00002D0A  367C 2D22               2528              MOVEA.W #DIVS_BACK, A3
00002D0E  0C38 0000 1771          2529              CMPI.B  #%000, FOURTH_3
00002D14  6700 0480               2530              BEQ     SIZE_W
00002D18  0C38 0001 1771          2531              CMPI.B  #%001, FOURTH_3
00002D1E  6700 047E               2532              BEQ     SIZE_L
00002D22                          2533              
00002D22  1638 1770               2534  DIVS_BACK   MOVE.B  THIRD_3, D3
00002D26  1438 1771               2535              MOVE.B  FOURTH_3, D2
00002D2A                          2536              
00002D2A  4EB9 000030EA           2537              JSR     LOAD_EA
00002D30  4EB9 0000324C           2538              JSR     LOAD_NEW_LINE
00002D36  4E75                    2539              RTS
00002D38                          2540  
00002D38                          2541  
00002D38                          2542  LOAD_0101:
00002D38  4283                    2543              CLR.L   D3
00002D3A  4282                    2544              CLR.L   D2
00002D3C  267C 00000000           2545              MOVEA.L #0, A3
00002D42                          2546  
00002D42  0C38 0007 176E          2547              CMPI.B  #%111, FIRST_3
00002D48  6F00 0008               2548              BLE     MYBE_SUBQ1
00002D4C  4EF9 000032FE           2549              JMP     INVALID
00002D52                          2550              
00002D52  0C38 0003 176F          2551  MYBE_SUBQ1  CMPI.B  #%011, SECOND_3
00002D58  6E00 0008               2552              BGT     MYBE_SUBQ2
00002D5C  4EF9 000032FE           2553              JMP     INVALID
00002D62                          2554  
00002D62  0C38 0007 176F          2555  MYBE_SUBQ2  CMPI.B  #%111, SECOND_3
00002D68  6D00 0008               2556              BLT     SUBQ
00002D6C  4EF9 000032FE           2557              JMP     INVALID
00002D72                          2558  
00002D72  5238 176E               2559  SUBQ        ADDI.B  #%1, FIRST_3
00002D76  1838 176E               2560              MOVE.B  FIRST_3, D4
00002D7A                          2561              
00002D7A  347C 2D84               2562              MOVEA.W #SUBQ_SAVED, A2
00002D7E  4EF9 00003218           2563              JMP     LOAD_IMMDTE
00002D84                          2564              
00002D84  4EB9 0000324E           2565  SUBQ_SAVED  JSR     LOAD_COMMA_SPACE
00002D8A                          2566  
00002D8A  367C 2DAC               2567              MOVEA.W #SUBQ_BACK, A3
00002D8E  0C38 0004 176F          2568              CMPI.B  #%100, SECOND_3
00002D94  6700 03F8               2569              BEQ     SIZE_B
00002D98  0C38 0005 176F          2570              CMPI.B  #%101, SECOND_3
00002D9E  6700 03F6               2571              BEQ     SIZE_W
00002DA2  0C38 0006 176F          2572              CMPI.B  #%110, SECOND_3
00002DA8  6700 03F4               2573              BEQ     SIZE_L
00002DAC                          2574              
00002DAC  1638 1770               2575  SUBQ_BACK   MOVE.B  THIRD_3, D3
00002DB0  1438 1771               2576              MOVE.B  FOURTH_3, D2
00002DB4                          2577  
00002DB4  4EB9 000030EA           2578              JSR     LOAD_EA
00002DBA  4EB9 0000324C           2579              JSR     LOAD_NEW_LINE
00002DC0  4E75                    2580              RTS
00002DC2                          2581  
00002DC2                          2582  LOAD_0100:
00002DC2  4283                    2583              CLR.L   D3
00002DC4  4282                    2584              CLR.L   D2
00002DC6  267C 00000000           2585              MOVEA.L #0, A3
00002DCC                          2586  
00002DCC  0C38 0002 176E          2587              CMPI.B  #%010, FIRST_3
00002DD2  6700 0006               2588              BEQ     MYBE_NEG
00002DD6  6600 000C               2589              BNE     NOT_NEG
00002DDA  0C38 0003 176F          2590  MYBE_NEG    CMPI.B  #%011, SECOND_3
00002DE0  6D00 0084               2591              BLT     NEG
00002DE4                          2592  
00002DE4  0C38 0007 176E          2593  NOT_NEG     CMPI.B  #%111, FIRST_3
00002DEA  6700 0006               2594              BEQ     MYBE_RTS1
00002DEE  6600 0028               2595              BNE     NOT_RTS
00002DF2  0C38 0001 176F          2596  MYBE_RTS1   CMPI.B  #%001, SECOND_3
00002DF8  6700 0006               2597              BEQ     MYBE_RTS2
00002DFC  6600 001A               2598              BNE     NOT_RTS
00002E00  0C38 0006 1770          2599  MYBE_RTS2   CMPI.B  #%110, THIRD_3
00002E06  6700 0006               2600              BEQ     MYBE_RTS3
00002E0A  6600 000C               2601              BNE     NOT_RTS
00002E0E  0C38 0005 1771          2602  MYBE_RTS3   CMPI.B  #%101, FOURTH_3
00002E14  6700 0088               2603              BEQ     RTS
00002E18                          2604              
00002E18  0C38 0007 176E          2605  NOT_RTS     CMPI.B  #%111, FIRST_3
00002E1E  6700 0006               2606              BEQ     MYBE_JSR
00002E22  6600 000C               2607              BNE     NOT_JSR
00002E26  0C38 0002 176F          2608  MYBE_JSR    CMPI.B  #%010, SECOND_3
00002E2C  6700 0078               2609              BEQ     JSR
00002E30                          2610  
00002E30  4286                    2611  NOT_JSR     CLR.L   D6
00002E32  1C38 176E               2612              MOVE.B  FIRST_3, D6
00002E36  0206 0005               2613              ANDI.B  #%101, D6 * Making %1X0 -> %100
00002E3A  0C06 0004               2614              CMPI.B  #%100, D6
00002E3E  6700 0006               2615              BEQ     MYBE_MOVEM
00002E42  6600 0012               2616              BNE     NOT_MOVEM
00002E46                          2617              
00002E46  1C38 176F               2618  MYBE_MOVEM  MOVE.B  SECOND_3, D6
00002E4A  0206 0006               2619              ANDI.B  #%110, D6
00002E4E  0C06 0002               2620              CMPI.B  #%010, D6
00002E52  6700 0080               2621              BEQ     MOVEM
00002E56                          2622              
00002E56  0C38 0007 176F          2623  NOT_MOVEM   CMPI.B  #%111, SECOND_3
00002E5C  6700 007E               2624              BEQ     LEA
00002E60                          2625              
00002E60  4EF9 000032FE           2626              JMP     INVALID
00002E66                          2627  
00002E66                          2628  NEG:
00002E66  367C 2E88               2629              MOVEA.W #NEG_BACK, A3
00002E6A  0C38 0000 176F          2630              CMPI.B  #%000, SECOND_3
00002E70  6700 031C               2631              BEQ     SIZE_B
00002E74  0C38 0001 176F          2632              CMPI.B  #%001, SECOND_3
00002E7A  6700 031A               2633              BEQ     SIZE_W
00002E7E  0C38 0002 176F          2634              CMPI.B  #%010, SECOND_3
00002E84  6700 0318               2635              BEQ     SIZE_L
00002E88                          2636              
00002E88  1638 1770               2637  NEG_BACK    MOVE.B  THIRD_3, D3
00002E8C  1438 1771               2638              MOVE.B  FOURTH_3, D2
00002E90                          2639  
00002E90  4EB9 000030EA           2640              JSR     LOAD_EA
00002E96  4EB9 0000324C           2641              JSR     LOAD_NEW_LINE
00002E9C  4E75                    2642              RTS
00002E9E                          2643              
00002E9E                          2644  RTS:
00002E9E  4EB9 0000324C           2645              JSR     LOAD_NEW_LINE
00002EA4  4E75                    2646              RTS
00002EA6                          2647  
00002EA6                          2648  JSR:
00002EA6  367C 2EBE               2649              MOVEA.W #JSR_BACK, A3
00002EAA  0C38 0000 1771          2650              CMPI.B  #%000, FOURTH_3
00002EB0  6700 02E4               2651              BEQ     SIZE_W
00002EB4  0C38 0001 1771          2652              CMPI.B  #%001, FOURTH_3
00002EBA  6700 02E2               2653              BEQ     SIZE_L
00002EBE                          2654              
00002EBE  1638 1770               2655  JSR_BACK    MOVE.B  THIRD_3, D3
00002EC2  1438 1771               2656              MOVE.B  FOURTH_3, D2
00002EC6                          2657              
00002EC6  4EB9 000030EA           2658              JSR     LOAD_EA
00002ECC  4EB9 0000324C           2659              JSR     LOAD_NEW_LINE
00002ED2  4E75                    2660              RTS
00002ED4                          2661  
00002ED4                          2662  MOVEM:
00002ED4  4EB9 0000324C           2663              JSR     LOAD_NEW_LINE
00002EDA  4E75                    2664              RTS
00002EDC                          2665      
00002EDC                          2666  LEA:
00002EDC  367C 2EF4               2667              MOVEA.W #LEA_BACK, A3
00002EE0  0C38 0000 1771          2668              CMPI.B  #%000, FOURTH_3
00002EE6  6700 02AE               2669              BEQ     SIZE_W
00002EEA  0C38 0001 1771          2670              CMPI.B  #%001, FOURTH_3
00002EF0  6700 02AC               2671              BEQ     SIZE_L
00002EF4                          2672              
00002EF4  1638 1770               2673  LEA_BACK    MOVE.B  THIRD_3, D3
00002EF8  1438 1771               2674              MOVE.B  FOURTH_3, D2
00002EFC                          2675              
00002EFC  4EB9 000030EA           2676              JSR     LOAD_EA
00002F02  4EB9 0000324E           2677              JSR     LOAD_COMMA_SPACE
00002F08                          2678              
00002F08  163C 0001               2679              MOVE.B  #%001, D3
00002F0C  1438 176E               2680              MOVE.B  FIRST_3, D2
00002F10                          2681              
00002F10  4EB9 000030EA           2682              JSR     LOAD_EA
00002F16  4EB9 0000324C           2683              JSR     LOAD_NEW_LINE
00002F1C  4E75                    2684              RTS
00002F1E                          2685  
00002F1E                          2686  LOAD_0000:
00002F1E  4283                    2687              CLR.L   D3
00002F20  4282                    2688              CLR.L   D2
00002F22  267C 00000000           2689              MOVEA.L #0, A3
00002F28                          2690  
00002F28  0C38 0000 176E          2691              CMPI.B  #%000, FIRST_3
00002F2E  6700 0006               2692              BEQ     MYBE_ORI
00002F32  6600 000C               2693              BNE     NOT_ORI
00002F36  0C38 0003 176F          2694  MYBE_ORI    CMPI.B  #%011, SECOND_3
00002F3C  6D00 0042               2695              BLT     ORI_CMPI            
00002F40                          2696  
00002F40  0C38 0006 176E          2697  NOT_ORI     CMPI.B  #%110, FIRST_3
00002F46  6700 0006               2698              BEQ     MYBE_CMPI
00002F4A  6600 000C               2699              BNE     NOT_CMPI
00002F4E  0C38 0003 176F          2700  MYBE_CMPI   CMPI.B  #%011, SECOND_3
00002F54  6D00 002A               2701              BLT     ORI_CMPI
00002F58                          2702              
00002F58  0C38 0004 176E          2703  NOT_CMPI    CMPI.B  #%100, FIRST_3
00002F5E  6700 0006               2704              BEQ     MYBE_BCLR
00002F62  6600 000C               2705              BNE     NOT_BCLR
00002F66  0C38 0002 176F          2706  MYBE_BCLR   CMPI.B  #%010, SECOND_3
00002F6C  6700 0076               2707              BEQ     BCLR
00002F70                          2708  
00002F70  0C38 0006 176F          2709  NOT_BCLR    CMPI.B  #%110, SECOND_3
00002F76  6700 00CC               2710              BEQ     DYNMC_BCLR
00002F7A                          2711              
00002F7A  4EF9 000032FE           2712              JMP     INVALID
00002F80                          2713              
00002F80  367C 2FA2               2714  ORI_CMPI    MOVEA.W #BACK, A3
00002F84  0C38 0000 176F          2715              CMPI.B  #%000, SECOND_3
00002F8A  6700 0202               2716              BEQ     SIZE_B
00002F8E  0C38 0001 176F          2717              CMPI.B  #%001, SECOND_3
00002F94  6700 0200               2718              BEQ     SIZE_W
00002F98  0C38 0002 176F          2719              CMPI.B  #%010, SECOND_3
00002F9E  6700 01FE               2720              BEQ     SIZE_L
00002FA2                          2721  
00002FA2  163C 0007               2722  BACK        MOVE.B  #%111, D3
00002FA6  143C 0004               2723              MOVE.B  #%100, D2
00002FAA                          2724              
00002FAA  4EB9 000030EA           2725              JSR     LOAD_EA
00002FB0  4EB9 0000324E           2726              JSR     LOAD_COMMA_SPACE
00002FB6                          2727              
00002FB6  367C 2FCE               2728              MOVEA.W #BACK2, A3   
00002FBA  0C38 0000 1771          2729              CMPI.B  #%000, FOURTH_3
00002FC0  6700 01D4               2730              BEQ     SIZE_W
00002FC4  0C38 0001 1771          2731              CMPI.B  #%001, FOURTH_3
00002FCA  6700 01D2               2732              BEQ     SIZE_L
00002FCE                          2733  
00002FCE  1638 1770               2734  BACK2       MOVE.B  THIRD_3, D3
00002FD2  1438 1771               2735              MOVE.B  FOURTH_3, D2
00002FD6                          2736          
00002FD6  4EB9 000030EA           2737              JSR     LOAD_EA
00002FDC  4EB9 0000324C           2738              JSR     LOAD_NEW_LINE
00002FE2  4E75                    2739              RTS
00002FE4                          2740  
00002FE4  4285                    2741  BCLR        CLR.L   D5
00002FE6  4284                    2742              CLR.L   D4
00002FE8  247C 00000000           2743              MOVEA.L #0, A2
00002FEE                          2744  
00002FEE  3A0E                    2745              MOVE.W  A6, D5
00002FF0  9A4D                    2746              SUB.W   A5, D5
00002FF2  0C45 0002               2747              CMPI.W  #$2, D5
00002FF6  6D00 0306               2748              BLT     INVALID
00002FFA                          2749  
00002FFA  381D                    2750              MOVE.W  (A5)+, D4
00002FFC  4284                    2751              CLR.L   D4
00002FFE  381D                    2752              MOVE.W  (A5)+, D4
00003000  0244 00FF               2753              ANDI.W  #$00FF, D4
00003004  247C 00003010           2754              MOVEA.L #BACK4, A2
0000300A  4EF9 00003218           2755              JMP     LOAD_IMMDTE
00003010                          2756              
00003010  4EB9 0000324E           2757  BACK4       JSR     LOAD_COMMA_SPACE
00003016                          2758              
00003016  367C 302E               2759              MOVEA.W #BACK3, A3
0000301A  0C38 0000 1771          2760              CMPI.B  #%000, FOURTH_3
00003020  6700 0174               2761              BEQ     SIZE_W
00003024  0C38 0001 1771          2762              CMPI.B  #%001, FOURTH_3
0000302A  6700 0172               2763              BEQ     SIZE_L
0000302E                          2764  
0000302E  1638 1770               2765  BACK3       MOVE.B  THIRD_3, D3
00003032  1438 1771               2766              MOVE.B  FOURTH_3, D2
00003036                          2767  
00003036  4EB9 000030EA           2768              JSR     LOAD_EA
0000303C  4EB9 0000324C           2769              JSR     LOAD_NEW_LINE
00003042                          2770  
00003042  4E75                    2771              RTS
00003044                          2772  
00003044  163C 0000               2773  DYNMC_BCLR  MOVE.B  #%000, D3
00003048  1438 176E               2774              MOVE.B  FIRST_3, D2
0000304C                          2775              
0000304C  4EB9 000030EA           2776              JSR     LOAD_EA
00003052  4EB9 0000324E           2777              JSR     LOAD_COMMA_SPACE
00003058                          2778  
00003058  367C 3070               2779              MOVEA.W #BACK5, A3
0000305C  0C38 0000 1771          2780              CMPI.B  #%000, FOURTH_3
00003062  6700 0132               2781              BEQ     SIZE_W
00003066  0C38 0001 1771          2782              CMPI.B  #%001, FOURTH_3
0000306C  6700 0130               2783              BEQ     SIZE_L
00003070                          2784              
00003070  1638 1770               2785  BACK5       MOVE.B  THIRD_3, D3
00003074  1438 1771               2786              MOVE.B  FOURTH_3, D2
00003078                          2787              
00003078  4EB9 000030EA           2788              JSR     LOAD_EA
0000307E  4EB9 0000324C           2789              JSR     LOAD_NEW_LINE
00003084                          2790              
00003084  4E75                    2791              RTS
00003086                          2792  
00003086                          2793  LOAD_00XX:
00003086  4283                    2794          CLR.L   D3
00003088  4282                    2795          CLR.L   D2
0000308A  267C 00000000           2796          MOVEA.L #0, A3
00003090                          2797          
00003090  367C 30A8               2798          MOVEA.W #GOO, A3
00003094  0C38 0003 176D          2799          CMPI.B  #%0011, MNEMONIC
0000309A  6700 00FA               2800          BEQ     SIZE_W
0000309E  0C38 0002 176D          2801          CMPI.B  #%0010, MNEMONIC
000030A4  6700 00F8               2802          BEQ     SIZE_L
000030A8                          2803  
000030A8  1638 1770               2804  GOO     MOVE.B  THIRD_3, D3
000030AC  1438 1771               2805          MOVE.B  FOURTH_3, D2
000030B0                          2806      
000030B0  4EB9 000030EA           2807          JSR     LOAD_EA
000030B6  4EB9 0000324E           2808          JSR     LOAD_COMMA_SPACE
000030BC                          2809      
000030BC  367C 30D4               2810          MOVEA.W #GOO2, A3
000030C0  0C38 0000 176E          2811          CMPI.B  #%000, FIRST_3
000030C6  6700 00CE               2812          BEQ     SIZE_W
000030CA  0C38 0001 176E          2813          CMPI.B  #%001, FIRST_3
000030D0  6700 00CC               2814          BEQ     SIZE_L
000030D4                          2815      
000030D4  1638 176F               2816  GOO2    MOVE.B  SECOND_3, D3
000030D8  1438 176E               2817          MOVE.B  FIRST_3, D2
000030DC                          2818              
000030DC  4EB9 000030EA           2819          JSR     LOAD_EA
000030E2  4EB9 0000324C           2820          JSR     LOAD_NEW_LINE
000030E8                          2821      
000030E8  4E75                    2822          RTS
000030EA                          2823  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000030EA                          2824  
000030EA                          2825  
000030EA                          2826  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000030EA                          2827  
000030EA                          2828  LOAD_EA:
000030EA  347C 30FA               2829          MOVEA.W #SAVED, A2 * remember to come back!
000030EE                          2830  
000030EE  0C43 0007               2831          CMPI    #%111, D3
000030F2  6D00 0008               2832          BLT     LOAD_LT_111
000030F6  6C00 0032               2833          BGE     LOAD_GE_111
000030FA                          2834      
000030FA  4E75                    2835  SAVED   RTS
000030FC                          2836  
000030FC                          2837  LOAD_LT_111:
000030FC  0C43 0000               2838      CMPI    #%000, D3 * e.g. D3
00003100  6700 00A4               2839      BEQ     LOAD_DATA_REGISTER
00003104  0C43 0001               2840      CMPI    #%001, D3 * e.g. A3
00003108  6700 00AE               2841      BEQ     LOAD_ADDR_REGISTER
0000310C  0C43 0002               2842      CMPI    #%010, D3 * e.g. (A3)
00003110  6700 00B8               2843      BEQ     LOAD_ADDRESS
00003114  0C43 0003               2844      CMPI    #%011, D3 * e.g. (A3)+
00003118  6700 00C2               2845      BEQ     LOAD_ADDRESS_W_POST_INC
0000311C  0C43 0004               2846      CMPI    #%100, D3 * e.g. -(A3)
00003120  6700 00C6               2847      BEQ     LOAD_ADDRESS_W_PRE_DEC
00003124                          2848      
00003124  4EF9 000032FE           2849      JMP     INVALID
0000312A                          2850      
0000312A                          2851  LOAD_GE_111:
0000312A  4285                    2852              CLR.L   D5
0000312C  4284                    2853              CLR.L   D4
0000312E                          2854  
0000312E  3A0E                    2855              MOVE.W  A6, D5
00003130  9A4D                    2856              SUB.W   A5, D5
00003132  BA78 290C               2857              CMP.W   TRAILING_SIZE, D5
00003136  6D00 01C6               2858              BLT     INVALID
0000313A                          2859  
0000313A  0C78 0001 290C          2860              CMPI.W  #$1, TRAILING_SIZE
00003140  6700 0016               2861              BEQ     CHUMP_BYTE
00003144  0C78 0002 290C          2862              CMPI.W  #$2, TRAILING_SIZE
0000314A  6700 0014               2863              BEQ     CHUMP_WORD
0000314E  0C78 0004 290C          2864              CMPI.W  #$4, TRAILING_SIZE
00003154  6700 0012               2865              BEQ     CHUMP_LONG
00003158                          2866  
00003158  381D                    2867  CHUMP_BYTE  MOVE.W  (A5)+, D4 * Minimum 4 hex (e.g. MOVE.B #1, $2 = XXXX 0001 0002)
0000315A  4EF9 00003170           2868              JMP     GO
00003160                          2869  
00003160  381D                    2870  CHUMP_WORD  MOVE.W  (A5)+, D4
00003162  4EF9 00003170           2871              JMP     GO
00003168                          2872              
00003168  281D                    2873  CHUMP_LONG  MOVE.L  (A5)+, D4
0000316A  4EF9 00003170           2874              JMP     GO
00003170                          2875  
00003170  0C42 0000               2876  GO          CMPI    #%000, D2
00003174  6700 007E               2877              BEQ     LOAD_ABS_SHORT
00003178  0C42 0001               2878              CMPI    #%001, D2
0000317C  6700 0088               2879              BEQ     LOAD_ABS_LONG
00003180  0C42 0004               2880              CMPI    #%100, D2
00003184  6700 0092               2881              BEQ     LOAD_IMMDTE
00003188                          2882      
00003188  4EF9 000032FE           2883              JMP     INVALID
0000318E                          2884  TRAILING_HELPER:            
0000318E  31FC 0002 290C          2885  SIZE_B  MOVE.W  #$2, TRAILING_SIZE
00003194  4ED3                    2886          JMP     (A3)
00003196                          2887  
00003196  31FC 0002 290C          2888  SIZE_W  MOVE.W  #$2, TRAILING_SIZE
0000319C  4ED3                    2889          JMP     (A3)
0000319E                          2890          
0000319E  31FC 0004 290C          2891  SIZE_L  MOVE.W  #$4, TRAILING_SIZE
000031A4  4ED3                    2892          JMP     (A3)
000031A6                          2893  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000031A6                          2894  
000031A6                          2895  
000031A6                          2896  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000031A6                          2897  
000031A6                          2898  LOAD_DATA_REGISTER:
000031A6  4280                    2899      CLR.L   D0
000031A8                          2900      
000031A8  4EB9 00003266           2901      JSR     LOAD_D
000031AE  1002                    2902      MOVE.B  D2, D0
000031B0  4EB9 000032DA           2903      JSR     LOAD_NUM
000031B6  4ED2                    2904      JMP     (A2)
000031B8                          2905  
000031B8                          2906  LOAD_ADDR_REGISTER:
000031B8  4280                    2907      CLR.L   D0
000031BA                          2908  
000031BA  4EB9 00003274           2909      JSR     LOAD_A
000031C0  1002                    2910      MOVE.B  D2, D0
000031C2  4EB9 000032DA           2911      JSR     LOAD_NUM
000031C8  4ED2                    2912      JMP     (A2)
000031CA                          2913  
000031CA                          2914  LOAD_ADDRESS:
000031CA  4EB9 00003282           2915      JSR     LOAD_PTHSIS_OPEN
000031D0  4EB8 31B8               2916      JSR     LOAD_ADDR_REGISTER
000031D4  4EB9 00003290           2917      JSR     LOAD_PTHSIS_CLSD
000031DA  4ED2                    2918      JMP     (A2)
000031DC                          2919  
000031DC                          2920  LOAD_ADDRESS_W_POST_INC:
000031DC  4EB8 31CA               2921      JSR     LOAD_ADDRESS
000031E0  4EB9 000032BA           2922      JSR     LOAD_PLUS_SIGN
000031E6  4ED2                    2923      JMP     (A2)
000031E8                          2924  
000031E8                          2925  LOAD_ADDRESS_W_PRE_DEC:
000031E8  4EB9 000032C8           2926      JSR     LOAD_MINUS_SIGN
000031EE  4EB8 31CA               2927      JSR     LOAD_ADDRESS
000031F2  4ED2                    2928      JMP     (A2)
000031F4                          2929  
000031F4                          2930  LOAD_ABS_SHORT:
000031F4  4280                    2931      CLR.L   D0
000031F6                          2932  
000031F6  4EB9 0000329E           2933      JSR     LOAD_HEX_SIGN
000031FC  3004                    2934      MOVE.W  D4, D0
000031FE  4EB9 00003222           2935      JSR     LOAD_BYTES
00003204  4ED2                    2936      JMP     (A2)
00003206                          2937  
00003206                          2938  LOAD_ABS_LONG:
00003206  4280                    2939      CLR.L   D0
00003208                          2940  
00003208  4EB9 0000329E           2941      JSR     LOAD_HEX_SIGN
0000320E  2004                    2942      MOVE.L  D4, D0
00003210  4EB9 00003222           2943      JSR     LOAD_BYTES
00003216  4ED2                    2944      JMP     (A2)
00003218                          2945  
00003218                          2946  LOAD_IMMDTE:
00003218  4EB9 000032AC           2947      JSR     LOAD_IMMDTE_VALU
0000321E  4EF8 3206               2948      JMP     LOAD_ABS_LONG
00003222                          2949  
00003222                          2950  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003222                          2951  
00003222                          2952  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003222                          2953  
00003222                          2954  LOAD_BYTES:
00003222  4285                    2955          CLR.L   D5
00003224  4281                    2956          CLR.L   D1
00003226                          2957  
00003226  2200                    2958          MOVE.L  D0, D1
00003228  1A3C 0008               2959          MOVE.B  #8, D5
0000322C  0C45 0000               2960  LOOP    CMPI    #0, D5
00003230  6E00 0004               2961          BGT     ROTATE
00003234  4E75                    2962          RTS
00003236                          2963      
00003236  E999                    2964  ROTATE  ROL.L   #$04, D1
00003238  1001                    2965          MOVE.B  D1, D0
0000323A  0280 0000000F           2966          ANDI.L  #$0000000F, D0
00003240  4EB9 000032DA           2967          JSR     LOAD_NUM
00003246  5345                    2968          SUBI    #1, D5
00003248  4EF8 322C               2969          JMP     LOOP        
0000324C                          2970  
0000324C                          2971  LOAD_NEW_LINE:
0000324C                          2972      ;CLR.L   D0
0000324C                          2973  
0000324C                          2974      ;MOVE.B  CR, D0
0000324C                          2975      ;JSR     LOAD_THIS_SHIT
0000324C                          2976      ;MOVE.B  LF, D0
0000324C                          2977      ;JSR     LOAD_THIS_SHIT
0000324C  4E75                    2978      RTS
0000324E                          2979  
0000324E                          2980  LOAD_COMMA_SPACE:
0000324E  4280                    2981      CLR.L   D0
00003250                          2982  
00003250  1038 290A               2983      MOVE.B  COMMA, D0
00003254  4EB9 000032D6           2984      JSR     LOAD_THIS_SHIT
0000325A  1038 290B               2985      MOVE.B  SPACE, D0
0000325E  4EB9 000032D6           2986      JSR     LOAD_THIS_SHIT
00003264                          2987      
00003264  4E75                    2988      RTS
00003266                          2989  
00003266                          2990  LOAD_D:
00003266  4280                    2991      CLR.L   D0
00003268                          2992  
00003268  1038 2903               2993      MOVE.B  DATA, D0
0000326C  4EB9 000032D6           2994      JSR     LOAD_THIS_SHIT
00003272  4E75                    2995      RTS
00003274                          2996  
00003274                          2997  LOAD_A:
00003274  4280                    2998      CLR.L   D0
00003276                          2999  
00003276  1038 2902               3000      MOVE.B  ADDRESS, D0
0000327A  4EB9 000032D6           3001      JSR     LOAD_THIS_SHIT
00003280  4E75                    3002      RTS
00003282                          3003  
00003282                          3004  LOAD_PTHSIS_OPEN:
00003282  4280                    3005      CLR.L   D0
00003284                          3006  
00003284  1038 2904               3007      MOVE.B  PTHSIS_OPEN, D0
00003288  4EB9 000032D6           3008      JSR     LOAD_THIS_SHIT
0000328E  4E75                    3009      RTS
00003290                          3010  
00003290                          3011  LOAD_PTHSIS_CLSD:
00003290  4280                    3012      CLR.L   D0
00003292                          3013  
00003292  1038 2905               3014      MOVE.B  PTHSIS_CLSD, D0
00003296  4EB9 000032D6           3015      JSR     LOAD_THIS_SHIT
0000329C  4E75                    3016      RTS
0000329E                          3017  
0000329E                          3018  LOAD_HEX_SIGN:
0000329E  4280                    3019      CLR.L   D0
000032A0                          3020  
000032A0  1038 2906               3021      MOVE.B  HEX_SIGN, D0
000032A4  4EB9 000032D6           3022      JSR     LOAD_THIS_SHIT
000032AA  4E75                    3023      RTS
000032AC                          3024  
000032AC                          3025  LOAD_IMMDTE_VALU:
000032AC  4280                    3026      CLR.L   D0
000032AE                          3027  
000032AE  1038 2907               3028      MOVE.B  IMMDTE_VALU, D0
000032B2  4EB9 000032D6           3029      JSR     LOAD_THIS_SHIT
000032B8  4E75                    3030      RTS
000032BA                          3031  
000032BA                          3032  LOAD_PLUS_SIGN:
000032BA  4280                    3033      CLR.L   D0
000032BC                          3034  
000032BC  1038 2908               3035      MOVE.B  PLUS_SIGN, D0
000032C0  4EB9 000032D6           3036      JSR     LOAD_THIS_SHIT
000032C6  4E75                    3037      RTS
000032C8                          3038  
000032C8                          3039  LOAD_MINUS_SIGN:
000032C8  4280                    3040      CLR.L   D0
000032CA                          3041  
000032CA  1038 2909               3042      MOVE.B  MINUS_SIGN, D0
000032CE  4EB9 000032D6           3043      JSR     LOAD_THIS_SHIT
000032D4  4E75                    3044      RTS
000032D6                          3045  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000032D6                          3046  
000032D6                          3047  
000032D6                          3048  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000032D6                          3049  LOAD_THIS_SHIT:
000032D6  18C0                    3050      MOVE.B  D0, (A4)+
000032D8  4E75                    3051      RTS
000032DA                          3052  
000032DA                          3053  LOAD_NUM:
000032DA  0C00 0009               3054      CMPI.B  #$9, D0
000032DE  6E00 0006               3055      BGT     GT
000032E2  6F00 000C               3056      BLE     LE
000032E6                          3057      
000032E6  0600 0037               3058  GT  ADDI.B  #$37, D0 * A~F
000032EA  4EF9 000032FA           3059      JMP     END
000032F0  0600 0030               3060  LE  ADDI.B  #$30, D0 * 0~9
000032F4  4EF9 000032FA           3061      JMP     END
000032FA                          3062  
000032FA  18C0                    3063  END MOVE.B  D0, (A4)+
000032FC  4E75                    3064      RTS
000032FE                          3065  
000032FE                          3066  INVALID:
000032FE  11FC 0000 10A2          3067              MOVE.B  #%0, IS_VALID
00003304  4EF8 11C2               3068              JMP     check_print
00003308                          3069  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003308                          3070  
00003308                          3071  
00003308                          3072  
00003308                          3073  
00003308                          3074  
00003308                          3075  
00003308                          3076  
00003308                          3077  
00003308                          3078  -------------------- end include --------------------
00003308                          3079      INCLUDE "Test.x68"
00003308                          3080  
00009000                          3081      ORG $9000
00009000  E3D9                    3082      LSL.W (A1)+         ; EA issue?
00009002  C3D0                    3083      MULS.W (A0),D1      ;finished testing
00009004  9399                    3084      SUB.L D1,(A1)+      ;finished testing
00009006  93C1                    3085      SUB.L D1,A1         ;finished testing
00009008  9391                    3086      SUB.L D1,(A1)       ;finished testing
0000900A  93A1                    3087      SUB.L D1,-(A1)      ;finished  testing
0000900C  92C1                    3088      SUB.W D1,A1         ;finished  testing
0000900E  D5C1                    3089      ADDA.L D1,A2        ;finishtes testing
00009010                          3090  
00009010  E289                    3091      LSR.L #$1,D1        ; CHECK THIS Prints #$1,A1 instead of #$,D1    
00009012                          3092          
00009012  5301                    3093      SUBQ.B #$1,D1       ; CHECK THIS Prints #$2,D1 instead of #$1,D1
00009014                          3094       
00009014  E709                    3095      LSL.B #3,D1         ; CHECK THIS Prints #3,A1 instead of #3,D1
00009016                          3096      
00009016  5301                    3097      SUBQ.B #$1,D1       ; CHECK THIS Prints #$2,D1 instead of #$1,D1
00009018                          3098  
00009018  0881 0003               3099      BCLR.L #$3,D1       ; CHECK THIS Prints #$57,D1 instead of #$3,D1
0000901C                          3100      
0000901C                          3101      ;LSR.W #$1,D1        ; This doesn't show up if it's placed right after BCLR    
0000901C                          3102      ;LSL.W #$1,D1        ; This doesn't show up if it's placed right after BCLR    
0000901C                          3103      
0000901C                          3104      ;ASL.B  D3,D5     
0000901C                          3105      ;ASR.W  D3,D5
0000901C  0041 2501               3106      ORI.W #$2501, D1
00009020                          3107       
00009020  E7BD                    3108      ROL.L  D3,D5     
00009022                          3109     
00009022  E6BD                    3110      ROR.L  D3,D5     
00009024  8497                    3111      OR.L (SP),D2
00009026                          3112      
00009026  8358                    3113      OR.W D1,(A0)+
00009028                          3114      
00009028  4E71                    3115      NOP
0000902A                          3116      
0000902A  4E75                    3117      RTS
0000902C                          3118      
0000902C  4E71                    3119      NOP
0000902E                          3120      
0000902E  4E75                    3121      RTS
00009030                          3122      
00009030  0041 2501               3123      ORI.W #$2501, D1
00009034                          3124      
00009034  5300                    3125      SUBQ.B  #1,D0
00009036                          3126      
00009036  5541                    3127      SUBQ.W  #$2, D1
00009038                          3128      
00009038  5982                    3129      SUBQ.L  #4,D2
0000903A                          3130      
0000903A  41D0                    3131      LEA     (A0),A0
0000903C                          3132      
0000903C  41D1                    3133      LEA     (A1),A0
0000903E                          3134      
0000903E  41F8 0100               3135      LEA     $0100,A0
00009042                          3136      
00009042  41F9 00009300           3137      LEA     $9300,A0
00009048                          3138      
00009048  41D5                    3139      LEA     (A5),A0
0000904A                          3140  
0000904A  41D7                    3141      LEA     (A7),A0
0000904C                          3142  
0000904C  4FD0                    3143      LEA     (A0),A7
0000904E                          3144  
0000904E  4FD5                    3145      LEA     (A5),A7
00009050                          3146  
00009050  4FD7                    3147      LEA     (A7),A7
00009052                          3148  
00009052  4200                    3149      CLR.B     D0
00009054                          3150  
00009054  4207                    3151      CLR.B     D7
00009056                          3152  
00009056  4240                    3153      CLR.W     D0
00009058                          3154  
00009058  4247                    3155      CLR.W     D7
0000905A                          3156  
0000905A  4280                    3157      CLR.L     D0
0000905C                          3158  
0000905C  4287                    3159      CLR.L     D7
0000905E                          3160  
0000905E  4210                    3161      CLR.B     (A0)
00009060                          3162  
00009060  4217                    3163      CLR.B     (A7)
00009062                          3164  
00009062  4250                    3165      CLR.W     (A0)
00009064                          3166  
00009064  4257                    3167      CLR.W     (A7)
00009066                          3168  
00009066  4290                    3169      CLR.L     (A0)
00009068                          3170  
00009068  4297                    3171      CLR.L     (A7)
0000906A                          3172  
0000906A  4218                    3173      CLR.B     (A0)+
0000906C                          3174  
0000906C  421F                    3175      CLR.B     (A7)+
0000906E                          3176  
0000906E  4258                    3177      CLR.W     (A0)+
00009070                          3178  
00009070  425F                    3179      CLR.W     (A7)+
00009072                          3180  
00009072  4298                    3181      CLR.L     (A0)+
00009074                          3182  
00009074  429F                    3183      CLR.L     (A7)+
00009076                          3184  
00009076  4220                    3185      CLR.B     -(A0)
00009078                          3186  
00009078  4227                    3187      CLR.B     -(A7)
0000907A                          3188  
0000907A  4260                    3189      CLR.W     -(A0)
0000907C                          3190  
0000907C  4267                    3191      CLR.W     -(A7)
0000907E                          3192  
0000907E  42A0                    3193      CLR.L     -(A0)
00009080                          3194  
00009080  42A7                    3195      CLR.L     -(A7)
00009082                          3196  
00009082  1200                    3197      MOVE.B    D0,D1
00009084                          3198  
00009084  1080                    3199      MOVE.B    D0,(A0)
00009086                          3200  
00009086  10C0                    3201      MOVE.B    D0,(A0)+
00009088                          3202  
00009088  1100                    3203      MOVE.B    D0,-(A0)
0000908A                          3204  
0000908A  1010                    3205      MOVE.B    (A0),D0
0000908C                          3206  
0000908C  1290                    3207      MOVE.B    (A0),(A1)
0000908E                          3208  
0000908E  12D0                    3209      MOVE.B    (A0),(A1)+
00009090                          3210  
00009090  1310                    3211      MOVE.B    (A0),-(A1)
00009092                          3212  
00009092  1018                    3213      MOVE.B    (A0)+,D0
00009094                          3214  
00009094  1298                    3215      MOVE.B    (A0)+,(A1)
00009096                          3216  
00009096  12D8                    3217      MOVE.B    (A0)+,(A1)+
00009098                          3218  
00009098  1318                    3219      MOVE.B    (A0)+,-(A1)
0000909A                          3220  
0000909A  1020                    3221      MOVE.B    -(A0),D0
0000909C                          3222  
0000909C  12A0                    3223      MOVE.B    -(A0),(A1)
0000909E                          3224  
0000909E  12E0                    3225      MOVE.B    -(A0),(A1)+
000090A0                          3226  
000090A0  1320                    3227      MOVE.B    -(A0),-(A1)
000090A2                          3228  
000090A2  3200                    3229      MOVE.W    D0,D1
000090A4                          3230  
000090A4  3080                    3231      MOVE.W    D0,(A0)
000090A6                          3232  
000090A6  30C0                    3233      MOVE.W    D0,(A0)+
000090A8                          3234  
000090A8  3100                    3235      MOVE.W    D0,-(A0)
000090AA                          3236  
000090AA  3008                    3237      MOVE.W    A0,D0
000090AC                          3238  
000090AC  3288                    3239      MOVE.W    A0,(A1)
000090AE                          3240  
000090AE  32C8                    3241      MOVE.W    A0,(A1)+
000090B0                          3242  
000090B0  3308                    3243      MOVE.W    A0,-(A1)
000090B2                          3244  
000090B2  3010                    3245      MOVE.W    (A0),D0
000090B4                          3246  
000090B4  3290                    3247      MOVE.W    (A0),(A1)
000090B6                          3248  
000090B6  32D0                    3249      MOVE.W    (A0),(A1)+
000090B8                          3250  
000090B8  3310                    3251      MOVE.W    (A0),-(A1)
000090BA                          3252  
000090BA  3018                    3253      MOVE.W    (A0)+,D0
000090BC                          3254  
000090BC  3298                    3255      MOVE.W    (A0)+,(A1)
000090BE                          3256  
000090BE  32D8                    3257      MOVE.W    (A0)+,(A1)+
000090C0                          3258  
000090C0  3318                    3259      MOVE.W    (A0)+,-(A1)
000090C2                          3260  
000090C2  3020                    3261      MOVE.W    -(A0),D0
000090C4                          3262  
000090C4  32A0                    3263      MOVE.W    -(A0),(A1)
000090C6                          3264  
000090C6  32E0                    3265      MOVE.W    -(A0),(A1)+
000090C8                          3266  
000090C8  3320                    3267      MOVE.W    -(A0),-(A1)
000090CA                          3268  
000090CA  2200                    3269      MOVE.L    D0,D1
000090CC                          3270  
000090CC  2080                    3271      MOVE.L    D0,(A0)
000090CE                          3272  
000090CE  20C0                    3273      MOVE.L    D0,(A0)+
000090D0                          3274  
000090D0  2100                    3275      MOVE.L    D0,-(A0)
000090D2                          3276  
000090D2  2008                    3277      MOVE.L    A0,D0
000090D4                          3278  
000090D4  2288                    3279      MOVE.L    A0,(A1)
000090D6                          3280  
000090D6  22C8                    3281      MOVE.L    A0,(A1)+
000090D8                          3282  
000090D8  2308                    3283      MOVE.L    A0,-(A1)
000090DA                          3284  
000090DA  2010                    3285      MOVE.L    (A0),D0
000090DC                          3286  
000090DC  2290                    3287      MOVE.L    (A0),(A1)
000090DE                          3288  
000090DE  22D0                    3289      MOVE.L    (A0),(A1)+
000090E0                          3290  
000090E0  2310                    3291      MOVE.L    (A0),-(A1)
000090E2                          3292  
000090E2  2018                    3293      MOVE.L    (A0)+,D0
000090E4                          3294  
000090E4  2298                    3295      MOVE.L    (A0)+,(A1)
000090E6                          3296  
000090E6  22D8                    3297      MOVE.L    (A0)+,(A1)+
000090E8                          3298  
000090E8  2318                    3299      MOVE.L    (A0)+,-(A1)
000090EA                          3300  
000090EA  2020                    3301      MOVE.L    -(A0),D0
000090EC                          3302  
000090EC  22A0                    3303      MOVE.L    -(A0),(A1)
000090EE                          3304  
000090EE  22E0                    3305      MOVE.L    -(A0),(A1)+
000090F0                          3306  
000090F0  2320                    3307      MOVE.L    -(A0),-(A1)
000090F2                          3308  
000090F2  3040                    3309      MOVEA.W    D0,A0
000090F4                          3310  
000090F4  3048                    3311      MOVEA.W    A0,A0
000090F6                          3312  
000090F6  3050                    3313      MOVEA.W    (A0),A0
000090F8                          3314  
000090F8  3058                    3315      MOVEA.W    (A0)+,A0
000090FA                          3316  
000090FA  3060                    3317      MOVEA.W    -(A0),A0
000090FC                          3318  
000090FC  2040                    3319      MOVEA.L    D0,A0
000090FE                          3320  
000090FE  2048                    3321      MOVEA.L    A0,A0
00009100                          3322  
00009100  2050                    3323      MOVEA.L    (A0),A0
00009102                          3324  
00009102  2058                    3325      MOVEA.L    (A0)+,A0
00009104                          3326  
00009104  2060                    3327      MOVEA.L    -(A0),A0  
00009106                          3328  
00009106  D401                    3329      ADD.B     D1,D2
00009108                          3330  
00009108  D311                    3331      ADD.B     D1,(A1)
0000910A                          3332  
0000910A  D319                    3333      ADD.B     D1,(A1)+
0000910C                          3334  
0000910C  D321                    3335      ADD.B     D1,-(A1)
0000910E                          3336  
0000910E  D211                    3337      ADD.B     (A1),D1
00009110                          3338  
00009110  D219                    3339      ADD.B     (A1)+,D1
00009112                          3340  
00009112  D221                    3341      ADD.B     -(A1),D1
00009114                          3342  
00009114  D441                    3343      ADD.W     D1,D2
00009116                          3344  
00009116  D351                    3345      ADD.W     D1,(A1)
00009118                          3346  
00009118  D359                    3347      ADD.W     D1,(A1)+
0000911A                          3348  
0000911A  D361                    3349      ADD.W     D1,-(A1)
0000911C                          3350  
0000911C  D251                    3351      ADD.W     (A1),D1
0000911E                          3352  
0000911E  D259                    3353      ADD.W     (A1)+,D1
00009120                          3354  
00009120  D261                    3355      ADD.W     -(A1),D1
00009122                          3356  
00009122  D481                    3357      ADD.L     D1,D2
00009124                          3358  
00009124  D391                    3359      ADD.L     D1,(A1)
00009126                          3360  
00009126  D399                    3361      ADD.L     D1,(A1)+
00009128                          3362  
00009128  D3A1                    3363      ADD.L     D1,-(A1)
0000912A                          3364  
0000912A  D291                    3365      ADD.L     (A1),D1
0000912C                          3366  
0000912C  D299                    3367      ADD.L     (A1)+,D1
0000912E                          3368  
0000912E  D2A1                    3369      ADD.L     -(A1),D1
00009130                          3370  
00009130  D4C1                    3371      ADDA.W        D1,A2
00009132                          3372  
00009132  D4D1                    3373      ADDA.W        (A1),A2
00009134                          3374  
00009134  D4D9                    3375      ADDA.W        (A1)+,A2
00009136                          3376  
00009136  D4E1                    3377      ADDA.W        -(A1),A2
00009138                          3378  
00009138  D5C1                    3379      ADDA.L        D1,A2
0000913A                          3380  
0000913A  D5D1                    3381      ADDA.L        (A1),A2
0000913C                          3382  
0000913C  D5D9                    3383      ADDA.L        (A1)+,A2
0000913E                          3384  
0000913E  D5E1                    3385      ADDA.L        -(A1),A2
00009140                          3386     
00009140  9401                    3387      SUB.B     D1,D2
00009142                          3388  
00009142  9311                    3389      SUB.B     D1,(A1)
00009144                          3390  
00009144  9319                    3391      SUB.B     D1,(A1)+
00009146                          3392  
00009146  9321                    3393      SUB.B     D1,-(A1)
00009148                          3394  
00009148  9211                    3395      SUB.B     (A1),D1
0000914A                          3396  
0000914A  9219                    3397      SUB.B     (A1)+,D1
0000914C                          3398  
0000914C  9221                    3399      SUB.B     -(A1),D1
0000914E                          3400  
0000914E  9441                    3401      SUB.W     D1,D2
00009150                          3402  
00009150  92C1                    3403      SUB.W     D1,A1
00009152                          3404  
00009152  9351                    3405      SUB.W     D1,(A1)
00009154                          3406  
00009154  9359                    3407      SUB.W     D1,(A1)+
00009156                          3408  
00009156  9361                    3409      SUB.W     D1,-(A1)
00009158                          3410  
00009158  9249                    3411      SUB.W     A1,D1
0000915A                          3412  
0000915A  9251                    3413      SUB.W     (A1),D1
0000915C                          3414  
0000915C  9259                    3415      SUB.W     (A1)+,D1
0000915E                          3416  
0000915E  9261                    3417      SUB.W     -(A1),D1
00009160                          3418  
00009160  9481                    3419      SUB.L     D1,D2
00009162                          3420  
00009162  93C1                    3421      SUB.L     D1,A1
00009164                          3422  
00009164  9391                    3423      SUB.L     D1,(A1)
00009166                          3424  
00009166  9399                    3425      SUB.L     D1,(A1)+
00009168                          3426  
00009168  93A1                    3427      SUB.L     D1,-(A1)
0000916A                          3428  
0000916A  9289                    3429      SUB.L     A1,D1
0000916C                          3430  
0000916C  9291                    3431      SUB.L     (A1),D1
0000916E                          3432  
0000916E  9299                    3433      SUB.L     (A1)+,D1
00009170                          3434  
00009170  92A1                    3435      SUB.L     -(A1),D1    
00009172                          3436  
00009172  C3C0                    3437      MULS.W    D0,D1
00009174                          3438  
00009174  C3D0                    3439      MULS.W    (A0),D1
00009176                          3440  
00009176  C3E0                    3441      MULS.W    -(A0),D1
00009178                          3442  
00009178  C3D8                    3443      MULS.W    (A0)+,D1
0000917A                          3444  
0000917A  83C0                    3445      DIVS.W    D0,D1
0000917C                          3446  
0000917C  83D0                    3447      DIVS.W    (A0),D1
0000917E                          3448  
0000917E  83E0                    3449      DIVS.W    -(A0),D1
00009180                          3450  
00009180  83D8                    3451      DIVS.W    (A0)+,D1
00009182                          3452  
00009182  C401                    3453      AND.B     D1,D2
00009184                          3454  
00009184  C311                    3455      AND.B     D1,(A1)
00009186                          3456  
00009186  C319                    3457      AND.B     D1,(A1)+
00009188                          3458  
00009188  C321                    3459      AND.B     D1,-(A1)
0000918A                          3460  
0000918A  C211                    3461      AND.B     (A1),D1
0000918C                          3462  
0000918C  C219                    3463      AND.B     (A1)+,D1
0000918E                          3464  
0000918E  C221                    3465      AND.B     -(A1),D1
00009190                          3466  
00009190  C441                    3467      AND.W     D1,D2
00009192                          3468  
00009192  C351                    3469      AND.W     D1,(A1)
00009194                          3470  
00009194  C359                    3471      AND.W     D1,(A1)+
00009196                          3472  
00009196  C361                    3473      AND.W     D1,-(A1)
00009198                          3474  
00009198  C251                    3475      AND.W     (A1),D1
0000919A                          3476  
0000919A  C259                    3477      AND.W     (A1)+,D1
0000919C                          3478  
0000919C  C261                    3479      AND.W     -(A1),D1
0000919E                          3480  
0000919E  C481                    3481      AND.L     D1,D2
000091A0                          3482  
000091A0  C391                    3483      AND.L     D1,(A1)
000091A2                          3484  
000091A2  C399                    3485      AND.L     D1,(A1)+
000091A4                          3486  
000091A4  C3A1                    3487      AND.L     D1,-(A1)
000091A6                          3488  
000091A6  C291                    3489      AND.L     (A1),D1
000091A8                          3490  
000091A8  C299                    3491      AND.L     (A1)+,D1
000091AA                          3492  
000091AA  C2A1                    3493      AND.L     -(A1),D1
000091AC                          3494      
000091AC  B302                    3495      EOR.B      D1,D2
000091AE                          3496      
000091AE  B511                    3497      EOR.B      D2,(A1)
000091B0                          3498  
000091B0  8401                    3499      OR.B     D1,D2
000091B2                          3500  
000091B2  8311                    3501      OR.B     D1,(A1)
000091B4                          3502  
000091B4  8319                    3503      OR.B     D1,(A1)+
000091B6                          3504  
000091B6  8321                    3505      OR.B     D1,-(A1)
000091B8                          3506  
000091B8  8211                    3507      OR.B     (A1),D1
000091BA                          3508  
000091BA  8219                    3509      OR.B     (A1)+,D1
000091BC                          3510  
000091BC  8221                    3511      OR.B     -(A1),D1
000091BE                          3512  
000091BE  8441                    3513      OR.W     D1,D2
000091C0                          3514  
000091C0  8351                    3515      OR.W     D1,(A1)
000091C2                          3516  
000091C2  8359                    3517      OR.W     D1,(A1)+
000091C4                          3518  
000091C4  8361                    3519      OR.W     D1,-(A1)
000091C6                          3520  
000091C6  8251                    3521      OR.W     (A1),D1
000091C8                          3522  
000091C8  8259                    3523      OR.W     (A1)+,D1
000091CA                          3524  
000091CA  8261                    3525      OR.W     -(A1),D1
000091CC                          3526  
000091CC  8481                    3527      OR.L     D1,D2
000091CE                          3528  
000091CE  8391                    3529      OR.L     D1,(A1)
000091D0                          3530  
000091D0  8399                    3531      OR.L     D1,(A1)+
000091D2                          3532  
000091D2  83A1                    3533      OR.L     D1,-(A1)
000091D4                          3534  
000091D4  8291                    3535      OR.L     (A1),D1
000091D6                          3536  
000091D6  8299                    3537      OR.L     (A1)+,D1
000091D8                          3538  
000091D8  82A1                    3539      OR.L     -(A1),D1
000091DA                          3540  
000091DA  E32A                    3541      LSL.B     D1,D2
000091DC                          3542  
000091DC  E36A                    3543      LSL.W     D1,D2
000091DE                          3544  
000091DE  E3D1                    3545      LSL.W     (A1)
000091E0                          3546  
000091E0  E3D9                    3547      LSL.W     (A1)+
000091E2                          3548  
000091E2  E3E1                    3549      LSL.W     -(A1)
000091E4                          3550  
000091E4  E3AA                    3551      LSL.L     D1,D2
000091E6                          3552  
000091E6  E22A                    3553      LSR.B     D1,D2
000091E8                          3554  
000091E8  E26A                    3555      LSR.W     D1,D2
000091EA                          3556  
000091EA  E2D1                    3557      LSR.W     (A1)
000091EC                          3558  
000091EC  E2D9                    3559      LSR.W     (A1)+
000091EE                          3560  
000091EE  E2E1                    3561      LSR.W     -(A1)
000091F0                          3562  
000091F0  E2AA                    3563      LSR.L     D1,D2    
000091F2                          3564  
000091F2  E222                    3565      ASR.B     D1,D2
000091F4                          3566  
000091F4  E262                    3567      ASR.W     D1,D2
000091F6                          3568  
000091F6  E0D1                    3569      ASR.W     (A1)
000091F8                          3570  
000091F8  E0D9                    3571      ASR.W     (A1)+
000091FA                          3572  
000091FA  E0E1                    3573      ASR.W     -(A1)
000091FC                          3574  
000091FC  E2A2                    3575      ASR.L     D1,D2
000091FE                          3576  
000091FE  E322                    3577      ASL.B     D1,D2
00009200                          3578  
00009200  E362                    3579      ASL.W     D1,D2
00009202                          3580  
00009202  E1D1                    3581      ASL.W     (A1)
00009204                          3582  
00009204  E1D9                    3583      ASL.W     (A1)+
00009206                          3584  
00009206  E1E1                    3585      ASL.W     -(A1)
00009208                          3586  
00009208  E3A2                    3587      ASL.L     D1,D2
0000920A                          3588  
0000920A  E33A                    3589      ROL.B     D1,D2
0000920C                          3590  
0000920C  E37A                    3591      ROL.W     D1,D2
0000920E                          3592  
0000920E  E7D1                    3593      ROL.W     (A1)
00009210                          3594  
00009210  E7D9                    3595      ROL.W     (A1)+
00009212                          3596  
00009212  E7E1                    3597      ROL.W     -(A1)
00009214                          3598  
00009214  E3BA                    3599      ROL.L     D1,D2
00009216                          3600  
00009216  E23A                    3601      ROR.B     D1,D2
00009218                          3602  
00009218  E27A                    3603      ROR.W     D1,D2
0000921A                          3604  
0000921A  E6D1                    3605      ROR.W     (A1)
0000921C                          3606  
0000921C  E6D9                    3607      ROR.W     (A1)+
0000921E                          3608  
0000921E  E6E1                    3609      ROR.W     -(A1)
00009220                          3610  
00009220  E2BA                    3611      ROR.L     D1,D2    
00009222                          3612  
00009222  B200                    3613      CMP.B    D0,D1
00009224                          3614  
00009224  B210                    3615      CMP.B    (A0),D1
00009226                          3616  
00009226  B220                    3617      CMP.B    -(A0),D1
00009228                          3618  
00009228  B218                    3619      CMP.B    (A0)+,D1
0000922A                          3620  
0000922A  B240                    3621      CMP.W    D0,D1
0000922C                          3622  
0000922C  B248                    3623      CMP.W    A0,D1
0000922E                          3624  
0000922E  B250                    3625      CMP.W    (A0),D1
00009230                          3626  
00009230  B260                    3627      CMP.W    -(A0),D1
00009232                          3628  
00009232  B258                    3629      CMP.W    (A0)+,D1
00009234                          3630  
00009234  B280                    3631      CMP.L    D0,D1
00009236                          3632  
00009236  B288                    3633      CMP.L    A0,D1
00009238                          3634  
00009238  B290                    3635      CMP.L    (A0),D1
0000923A                          3636  
0000923A  B2A0                    3637      CMP.L    -(A0),D1
0000923C                          3638  
0000923C  B298                    3639      CMP.L    (A0)+,D1
0000923E                          3640      
0000923E  6000 0002               3641      BRA       lss      
00009242                          3642  
00009242  644E                    3643  lss BCC.B     label1
00009244                          3644  
00009244  644C                    3645      BCC.B     label2
00009246                          3646  
00009246  6E4A                    3647      BGT.B     label1
00009248                          3648  
00009248  6E48                    3649      BGT.B     label2
0000924A                          3650  
0000924A  6F46                    3651      BLE.B     label1
0000924C                          3652  
0000924C  6F44                    3653      BLE.B     label2
0000924E                          3654  
0000924E  6400 0042               3655      BCC.W     label1
00009252                          3656  
00009252  6400 003E               3657      BCC.W     label2
00009256                          3658  
00009256  6400 003A               3659      BCC.W     label3
0000925A                          3660  
0000925A  6E00 0036               3661      BGT.W     label1
0000925E                          3662  
0000925E  6E00 0032               3663      BGT.W     label2
00009262                          3664  
00009262  6E00 002E               3665      BGT.W     label3
00009266                          3666  
00009266  6F00 002A               3667      BLE.W     label1
0000926A                          3668  
0000926A  6F00 0026               3669      BLE.W     label2
0000926E                          3670  
0000926E  6F00 0022               3671      BLE.W     label3
00009272                          3672  
00009272  4E90                    3673      JSR       (A0)
00009274                          3674  
00009274  4EB8 1234               3675      JSR       $1234
00009278                          3676  
00009278  4EB9 12345678           3677      JSR       $12345678
0000927E                          3678  
0000927E  4EB9 00009292           3679      JSR       label1
00009284                          3680  
00009284  4EB9 00009292           3681      JSR       label2
0000928A                          3682  
0000928A  4EB9 00009292           3683      JSR       label3
00009290                          3684  
00009290  4E71                    3685      NOP
00009292                          3686  
00009292                          3687  label1
00009292                          3688  label2
00009292                          3689  label3
00009292                          3690  
00009292  4E75                    3691      RTS
00009294                          3692      
00009294  48A1 007F               3693      MOVEM.W   A1-A7,-(A1)
00009298                          3694  
00009298  48E1 7F00               3695      MOVEM.L   D1-D7,-(A1)
0000929C                          3696  
0000929C  48A1 0140               3697      MOVEM.W   A1/D7,-(A1)
000092A0                          3698  
000092A0  48E1 0140               3699      MOVEM.L   A1/D7,-(A1)
000092A4                          3700  
000092A4  4891 FE00               3701      MOVEM.W   A1-A7,(A1)
000092A8                          3702  
000092A8  48D1 00FE               3703      MOVEM.L   D1-D7,(A1)
000092AC                          3704  
000092AC  4891 0280               3705      MOVEM.W   A1/D7,(A1)
000092B0                          3706  
000092B0  48D1 0280               3707      MOVEM.L   A1/D7,(A1)
000092B4                          3708  
000092B4  4C99 FE00               3709      MOVEM.W   (A1)+,A1-A7
000092B8                          3710  
000092B8  4CD9 00FE               3711      MOVEM.L   (A1)+,D1-D7
000092BC                          3712  
000092BC  4C99 0280               3713      MOVEM.W   (A1)+,A1/D7
000092C0                          3714  
000092C0  4CD9 0280               3715      MOVEM.L   (A1)+,A1/D7
000092C4                          3716  
000092C4  4C91 FE00               3717      MOVEM.W   (A1),A1-A7
000092C8                          3718  
000092C8  4CD1 00FE               3719      MOVEM.L   (A1),D1-D7
000092CC                          3720  
000092CC  4C91 0280               3721      MOVEM.W   (A1),A1/D7
000092D0                          3722  
000092D0  4CD1 0280               3723      MOVEM.L   (A1),A1/D7
000092D4                          3724      
000092D4                          3725      
000092D4                          3726  
000092D4                          3727      
000092D4                          3728   
000092D4                          3729  
000092D4                          3730  
000092D4                          3731  
000092D4                          3732  
000092D4                          3733  
000092D4                          3734  
000092D4                          3735  
000092D4                          3736  
000092D4                          3737  
000092D4                          3738  
000092D4                          3739  
000092D4                          3740  
000092D4                          3741  
000092D4                          3742  
000092D4                          3743  
000092D4                          3744  
000092D4                          3745  
000092D4                          3746  
000092D4                          3747  -------------------- end include --------------------
000092D4                          3748      
000092D4                          3749      
Line 3750 WARNING: Origin value is odd (Location counter set to next highest address)
000092D4                          3750     END    START        ; last line of source

No errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA                2BF2
ADDA_BACK           2C0A
ADDRESS             2902
ADDSTRTOBUFFER      1264
ARG_ADDSTRTOBUFFER_BUFFER  125A
ARG_ADDSTRTOBUFFER_BUFFERLENGTH  125E
ARG_ADDSTRTOBUFFER_STRING  1256
ARG_CLEARBUFFER_BUFFER  12B8
ARG_CLEARBUFFER_LENGTH  12BC
ARG_NUMTOHEXSTR_LENGTH  13C6
ARG_NUMTOHEXSTR_NUM  13C2
ASCIITOHEX          137A
ASCIITOHEXREGLIST   1
ASCII_VAL           16EE
ASD_1               29F4
ASD_1_BACK          2A20
ASD_2               2A4C
ASD_2_IMD           2A62
ASD_2_IMD_B         2A88
ASD_2_REG           2AA4
BACK                2FA2
BACK2               2FCE
BACK3               302E
BACK4               3010
BACK5               3070
BCLR                2FE4
BIT_CHECK_EXG       2266
BIT_CHECK_EXT       1D74
BIT_CHECK_MOVEP     1AE6
BIT_CHECK_SUBX      2182
BIT_SIZE_CHECK      22C2
BRA                 2B30
BRA_BYTE            2B5C
BRA_BYTE2           2B82
BRA_BYTE3           2B8E
BRA_WORD            2B96
BRA_WORD_BK         2BB2
BRA_WRD_BK2         2BD0
BYTEREAD            16ED
B_BUFFER            1050
CHECK_00XX          2980
CHECK_01XX          298E
CHECK_0XXX          292C
CHECK_1XXX          293C
CHECK_NOP           18AA
CHECK_OP_ABCD       224E
CHECK_OP_ADD        22EC
CHECK_OP_ADDA       22F6
CHECK_OP_ADDI       1A46
CHECK_OP_ADDQ       1F40
CHECK_OP_ADDX       22D8
CHECK_OP_AND        229E
CHECK_OP_ANDI       1A1E
CHECK_OP_ANDI_TO_CCR  19DE
CHECK_OP_ANDI_TO_SR  19EE
CHECK_OP_ASL        24A4
CHECK_OP_ASL_NO_ROT  23CC
CHECK_OP_ASR        2486
CHECK_OP_ASR_NO_ROT  23B2
CHECK_OP_BCC        1FAA
CHECK_OP_BCS        2050
CHECK_OP_BEQ        1FBE
CHECK_OP_BGE        206A
CHECK_OP_BGT        1F96
CHECK_OP_BHI        1FD2
CHECK_OP_BLS        1FE6
CHECK_OP_BLT        2084
CHECK_OP_BMI        1FFA
CHECK_OP_BNE        200E
CHECK_OP_BPL        2022
CHECK_OP_BRA        2036
CHECK_OP_BSR        1F82
CHECK_OP_BVC        209E
CHECK_OP_CHK        1E56
CHECK_OP_CLR        1D38
CHECK_OP_CMP        220C
CHECK_OP_CMPA       21DA
CHECK_OP_CMPI       1B32
CHECK_OP_CMPM       21C6
CHECK_OP_DBCC       1F18
CHECK_OP_DIVS       2114
CHECK_OP_DIVU       20EC
CHECK_OP_DYNAMIC_BCHG  1ABE
CHECK_OP_DYNAMIC_BCLR  1B6E
CHECK_OP_DYNAMIC_BSET  1AD2
CHECK_OP_DYNAMIC_BTST  1AAA
CHECK_OP_EOR        21EE
CHECK_OP_EORI       1A5A
CHECK_OP_EORI_TO_CCR  19FE
CHECK_OP_EORI_TO_SR  1A0E
CHECK_OP_EXG        2262
CHECK_OP_EXT        1D60
CHECK_OP_ILLEGAL    1CA8
CHECK_OP_JMP        1E42
CHECK_OP_JSR        1EB0
CHECK_OP_LEA        1E96
CHECK_OP_LINK       1E06
CHECK_OP_LSL        2468
CHECK_OP_LSL_NO_ROT  2398
CHECK_OP_LSR        244A
CHECK_OP_LSR_NO_ROT  237E
CHECK_OP_MOVEA_L    1BC6
CHECK_OP_MOVEA_W    1C28
CHECK_OP_MOVEM      1EE8
CHECK_OP_MOVEP      1B00
CHECK_OP_MOVEQ      20C8
CHECK_OP_MOVE_B     1B9C
CHECK_OP_MOVE_FROM_SR  1CE8
CHECK_OP_MOVE_L     1BFE
CHECK_OP_MOVE_TO_CCR  1CFC
CHECK_OP_MOVE_TO_SR  1D10
CHECK_OP_MOVE_USP   1E2E
CHECK_OP_MOVE_W     1C60
CHECK_OP_MULS       2284
CHECK_OP_MULU       223A
CHECK_OP_NBCD       1D8E
CHECK_OP_NEG        1ECA
CHECK_OP_NEGX       1D24
CHECK_OP_NOP        1E6A
CHECK_OP_NOT        1D4C
CHECK_OP_OR         212E
CHECK_OP_ORI        1B14
CHECK_OP_ORI_TO_CCR  19BE
CHECK_OP_ORI_TO_SR  19CE
CHECK_OP_PEA        1DB6
CHECK_OP_RESET      1C98
CHECK_OP_ROL        242C
CHECK_OP_ROL_NO_ROT  2364
CHECK_OP_ROR        240E
CHECK_OP_ROR_NO_ROT  234A
CHECK_OP_ROXL       23FA
CHECK_OP_ROXL_NO_ROT  2336
CHECK_OP_ROXR       23E6
CHECK_OP_ROXR_NO_ROT  2322
CHECK_OP_RTE        1CB8
CHECK_OP_RTR        1CD8
CHECK_OP_RTS        1E80
CHECK_OP_SBCD       2100
CHECK_OP_SCC        1F2C
CHECK_OP_STATIC_BCHG  1A82
CHECK_OP_STATIC_BCLR  1B50
CHECK_OP_STATIC_BSET  1A96
CHECK_OP_STATIC_BTST  1A6E
CHECK_OP_STOP       1C88
CHECK_OP_SUB        21A0
CHECK_OP_SUBA       215E
CHECK_OP_SUBI       1A32
CHECK_OP_SUBQ       1F54
CHECK_OP_SUBX       2172
CHECK_OP_SWAP       1DA2
CHECK_OP_TAS        1DCA
CHECK_OP_TRAP       1DF2
CHECK_OP_TRAPV      1CC8
CHECK_OP_TST        1DDE
CHECK_OP_UNLK       1E1A
CHECK_PRINT         11C2
CHECK_SIZE_BIT_FOR_SUB  214C
CHECK_XXXX          291C
CHRDONE             1396
CHRLOOP             1382
CHUMP_BYTE          3158
CHUMP_LONG          3168
CHUMP_WORD          3160
CLEARBUFFER         12C0
COMMA               290A
COUNTDONE           1336
COUNTLOOP           1324
CR                  D
CUR_OP_CODE         10A0
C_GROUP_0           19BA
C_GROUP_1           1B98
C_GROUP_2           1BC2
C_GROUP_3           1C24
C_GROUP_4           1C86
C_GROUP_5           1F14
C_GROUP_6           1F7E
C_GROUP_7           20C4
C_GROUP_8           20E8
C_GROUP_9           2148
C_GROUP_A           21BA
C_GROUP_B           21C2
C_GROUP_C           2236
C_GROUP_D           22BE
C_GROUP_E           231E
C_GROUP_F           24CE
DATA                2903
DIR_0               2C72
DIR_1               2CB4
DIVS                2CF6
DIVS_BACK           2D22
DONE                1252
DOWN_ONE            2B7A
DOWN_ZERO           2B72
DYNMC_BCLR          3044
END                 32FA
ERRORFILE           1702
EXT                 2918
FILEID              174E
FILENAME            16F6
FINDNULLLOOPDONE    1306
FIND_1_BIT_SIZE_6   18E6
FIND_1_BIT_SIZE_8   1906
FIND_2_BIT_SIZE_7_TO_6  18C6
FIND_MOVEA_L_DIFFERENCE  1BD8
FIND_MOVEA_W_DIFF   1C3A
FIRST_3             176E
FOURTH_3            1771
GO                  3170
GOO                 30A8
GOO2                30D4
GROUP0_INVALID      1B8C
GROUP0_SUCCESS      1B92
GROUP1_INVALID      1BB6
GROUP1_SUCCESS      1BBC
GROUP2_INVALID      1C18
GROUP2_SUCCESS      1C1E
GROUP3_INVALID      1C7A
GROUP3_SUCCESS      1C80
GROUP4_INVALID      1F02
GROUP4_SUCCESS      1F0E
GROUP5_INVALID      1F72
GROUP5_SUCCESS      1F78
GROUP6_INVALID      20B8
GROUP6_SUCCESS      20BE
GROUP7_INVALID      20DC
GROUP7_SUCCESS      20E2
GROUP8_INVALID      213C
GROUP8_SUCCESS      2142
GROUP9_INVALID      21AE
GROUP9_SUCCESS      21B4
GROUPB_INVALID      222A
GROUPB_SUCCESS      2230
GROUPC_INVALID      22B2
GROUPC_SUCCESS      22B8
GROUPD_INVALID      2312
GROUPD_SUCCESS      2318
GROUPE_INVALID      24C2
GROUPE_SUCCESS      24C8
GROUP_0             1784
GROUP_1             1796
GROUP_2             17A8
GROUP_3             17BA
GROUP_4             17CC
GROUP_5             17DE
GROUP_6             17F0
GROUP_7             1802
GROUP_8             1814
GROUP_9             1826
GROUP_A             1838
GROUP_B             184A
GROUP_C             185C
GROUP_D             186E
GROUP_E             1880
GROUP_F             1892
GT                  32E6
G_BUFFER            1000
HEX_SIGN            2906
IMMDTE_VALU         2907
INVALID             32FE
INVALID_ADDRESS_MESSAGE  1752
INVALID_OP          24D6
IS_VALID            10A2
JSR                 2EA6
JSR_BACK            2EBE
LABEL1              9292
LABEL2              9292
LABEL3              9292
LE                  32F0
LEA                 2EDC
LEA_BACK            2EF4
LF                  A
LOAD_0000           2F1E
LOAD_00XX           3086
LOAD_0100           2DC2
LOAD_0101           2D38
LOAD_0110           2ACE
LOAD_1000           2C46
LOAD_1001           2C40
LOAD_1011           2C3A
LOAD_1100           2C34
LOAD_1101           2BD8
LOAD_1110           29AE
LOAD_8              2A74
LOAD_A              3274
LOAD_ABS_LONG       3206
LOAD_ABS_SHORT      31F4
LOAD_ADDRESS        31CA
LOAD_ADDRESS_W_POST_INC  31DC
LOAD_ADDRESS_W_PRE_DEC  31E8
LOAD_ADDR_REGISTER  31B8
LOAD_BYTES          3222
LOAD_COMMA_SPACE    324E
LOAD_D              3266
LOAD_DATA_REGISTER  31A6
LOAD_EA             30EA
LOAD_FIRST3         2A7E
LOAD_GE_111         312A
LOAD_HEX_SIGN       329E
LOAD_IMMDTE         3218
LOAD_IMMDTE_VALU    32AC
LOAD_LT_111         30FC
LOAD_MINUS_SIGN     32C8
LOAD_NEW_LINE       324C
LOAD_NUM            32DA
LOAD_PLUS_SIGN      32BA
LOAD_PTHSIS_CLSD    3290
LOAD_PTHSIS_OPEN    3282
LOAD_THIS_SHIT      32D6
LOOP                322C
LSS                 9242
MAINLOOP            1160
MAIN_CONSOLE        1430
MAIN_EA             290E
MINUS_SIGN          2909
MNEMONIC            176D
MOVEM               2ED4
MOVE_AND_MOVEA_PARSE_EA  1926
MYBE_ASD_1          29D0
MYBE_ASD_2          2A36
MYBE_BCLR           2F66
MYBE_BRA            2AEE
MYBE_CMPI           2F4E
MYBE_JSR            2E26
MYBE_MOVEM          2E46
MYBE_NEG            2DDA
MYBE_ORI            2F36
MYBE_RTS1           2DF2
MYBE_RTS2           2E00
MYBE_RTS3           2E0E
MYBE_SUBQ1          2D52
MYBE_SUBQ2          2D62
NEG                 2E66
NEG_BACK            2E88
NEG_WORD            2BBA
NEWLINE             16DC
NORMAL_CHECK        18B8
NOT_BCLR            2F70
NOT_BRA             2AFC
NOT_CMPI            2F58
NOT_JSR             2E30
NOT_MOVEM           2E56
NOT_NEG             2DE4
NOT_ORI             2F40
NOT_RTS             2E18
NULLLOOP            12F8
NUMTOHEXSTR         13D0
OP_FOUND            27CE
OP_JSR_DONE         18A0
OP_JSR_ROUTINE      1772
OP_SIZE             176C
ORI_CMPI            2F80
OR_BACK             2C8A
OR_BACK2            2CE0
OUTFILENAME         16E2
PARSE_EA_CONSTANT_BITS  196C
PLUS_SIGN           2908
POS_WORD            2BA6
PRINT_DATA          11E0
PRINT_INSTRUCTION   11D0
PRINT_OP_ADD        26D4
PRINT_OP_ADDA       26E8
PRINT_OP_ASL        2738
PRINT_OP_ASR        2724
PRINT_OP_BCS        2604
PRINT_OP_BGE        2618
PRINT_OP_BLT        262C
PRINT_OP_BRA        2654
PRINT_OP_BVC        2640
PRINT_OP_CMP        26B2
PRINT_OP_CMPI       2500
PRINT_OP_DIVS       2668
PRINT_OP_DYNAMIC_BCLR  2528
PRINT_OP_EOR        269E
PRINT_OP_JSR        2582
PRINT_OP_LEA        25AC
PRINT_OP_LSL        26FC
PRINT_OP_LSR        2710
PRINT_OP_MOVEA_L    254A
PRINT_OP_MOVEA_W    2566
PRINT_OP_MOVEB      253C
PRINT_OP_MOVEM_L    25E2
PRINT_OP_MOVEM_W    25D4
PRINT_OP_MOVE_L     2558
PRINT_OP_MOVE_W     2574
PRINT_OP_MULS       26C6
PRINT_OP_NEG        25C0
PRINT_OP_NOP        259E
PRINT_OP_OR         2676
PRINT_OP_ORI        24EC
PRINT_OP_ROL        274C
PRINT_OP_ROR        2760
PRINT_OP_RTS        2590
PRINT_OP_SIZE       279E
PRINT_OP_SIZE_ADDA  27B8
PRINT_OP_STATIC_BCLR  2514
PRINT_OP_SUB        268A
PRINT_OP_SUBQ       25F0
PRINT_SIZE_BYTE     2774
PRINT_SIZE_LONG     2790
PRINT_SIZE_WORD     2782
PRINT_TO_BUFFER     24DE
PTHSIS_CLSD         2905
PTHSIS_OPEN         2904
P_INVALID_OP        27C2
P_OP_ADD            28D1
P_OP_ADDA           28C9
P_OP_ASL            28ED
P_OP_ASR            28E6
P_OP_BCLR           27F2
P_OP_BCS            287D
P_OP_BGE            2884
P_OP_BLT            288B
P_OP_BRA            2876
P_OP_BVC            2892
P_OP_CMP            28B8
P_OP_CMPI           27EA
P_OP_DIVS           2899
P_OP_EOR            28B1
P_OP_JSR            2852
P_OP_LEA            284B
P_OP_LSL            28DF
P_OP_LSR            28D8
P_OP_MOVEA_L        2805
P_OP_MOVEA_W        281C
P_OP_MOVEB          27FA
P_OP_MOVEM_L        283F
P_OP_MOVEM_W        2833
P_OP_MOVE_L         2811
P_OP_MOVE_W         2828
P_OP_MULS           28BF
P_OP_NEG            2867
P_OP_NOP            2859
P_OP_OR             28A4
P_OP_ORI            27E3
P_OP_ROL            28FB
P_OP_ROR            28F4
P_OP_RTS            2860
P_OP_SUB            28AA
P_OP_SUBQ           286E
P_SIZE_B            27D7
P_SIZE_L            27DF
P_SIZE_W            27DB
RET_ADDSTRTOBUFFER_SUCCESS  1262
RET_NUMTOHEXSTR_STR  13C7
RET_SA              13C0
ROTATE              3236
RTS                 2E9E
SAVED               30FA
SECOND_3            176F
SIZE                14
SIZE_B              318E
SIZE_L              319E
SIZE_W              3196
SPACE               290B
START               10A3
STRING              1738
STRIP_ASCII         139C
STRSIZE             174C
SUB30               13BC
SUB37               13B4
SUBQ                2D72
SUBQ_BACK           2DAC
SUBQ_SAVED          2D84
SUCCESS             171E
THIRD_3             1770
TOSAVE              C3F
TRAILING_HELPER     318E
TRAILING_SIZE       290C
TRAPTASK13          12E4
VALIDATEPOSITIVEADDRESS  10FA
VALIDATE_END_POS    111C
VALIDATE_EVEN       113E
VALIDATE_START_ADDRESS  10F8
_00000000           131A
_ADDSTRTOBUFFER_ADDLOOP  128E
_ADDSTRTOBUFFER_BUFFERLOOP  127A
_ADDSTRTOBUFFER_END  12B2
_ADDSTRTOBUFFER_LENGTHEXCEEDED  12AC
_ADDSTRTOBUFFER_SUCCESS  12A4
_CLEARBUFFER_END    12DA
_CLEARBUFFER_LOOP   12CE
_NUMTOHEXSTR_ADDCHAR  141E
_NUMTOHEXSTR_LETTER  1416
_NUMTOHEXSTR_LOOP   1402
_NUMTOHEXSTR_POSLENGTH  13F0
_NUMTOHEXSTR_VALIDLENGTH  13FA
