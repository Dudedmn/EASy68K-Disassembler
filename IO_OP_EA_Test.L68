000010A4 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/17/2019 5:24:08 PM

00000000                             1  **--------------------------------------------------------------------------
00000000                             2  * Title      : Disassembler 
00000000                             3  * Written by : TEAM REEE Denny, Daniel, Fahad
00000000                             4  * Date       : 3/16/2019 
00000000                             5  * 
00000000                             6  * 
00000000                             7  * Description: This code contains a method for you to use
00000000                             8  * with your Disassembler project IO, and a short demo of 
00000000                             9  * how to call this method in the body of the "START" code.
00000000                            10  *---------------------------------------------------------------------------
00001000                            11      ORG    $1000    
00001000                            12  *---------------------------------------------------------------------------
00001000                            13  G_BUFFER        DS.B    80          ;Used to print out the needed letters to the buffer
00001050                            14  B_BUFFER        DS.B    80          ;Bad buffer used to load bad data
000010A0                            15  CUR_OP_CODE     DS.W    1           ;Used to determine the current 4 hex OP code
000010A2                            16  IS_VALID        DS.B    1           ;Validity bit to check if a code is valid or not
000010A3                            17                          ;1 = valid, 0 = invalid
000010A3                            18  
000010A3                            19  START:                      ;Start of the program
000010A3                            20  
000010A4  43F9 00001428             21      LEA MAIN_CONSOLE, A1            ;Loads the main message into A1
000010AA  4EB9 0000134A             22      JSR TrapTask13                 ;Prints message out to console and log
000010B0                            23  
000010B0                            24      
000010B0                            25      
000010B0                            26      ******************************************
000010B0                            27      **
000010B0                            28      **     ___         ___        /  __  
000010B0                            29      **    |__  | |    |__     |  /  /  \  
000010B0                            30      **    |    | |___ |___    | /   \__/ 
000010B0                            31      **                           
000010B0                            32      **
000010B0                            33      ** This is the beginning of the code for reading from files
000010B0                            34      ******************************************
000010B0                            35  * Attempt to open file for input
000010B0  43F9 000016FA             36          LEA     fileName,A1                    ;Name of file to open
000010B6  103C 0033                 37          MOVE.B  #51,D0                         ;Trap task #51, open existing file
000010BA  4E4F                      38          TRAP    #15                            ;Perform task
000010BC  23C1 0000171A             39          MOVE.L  D1,fileID                      ;Save file ID
000010C2                            40  
000010C2                            41  * Read string from file
000010C2  43F9 00001705             42          LEA     IO_BUFFER,A1                   ;Location of string buffer
000010C8  2239 0000171A             43          MOVE.L  fileID,D1                      ;File ID of file to read from
000010CE  4282                      44          CLR.L   D2
000010D0  343C 0014                 45          MOVE.W  #SIZE,D2                       ;Number of bytes to read
000010D4  103C 0035                 46          MOVE.B  #53,D0                         ;Trap task #53, read from file
000010D8  4E4F                      47          TRAP    #15                            ;Perform task
000010DA                            48  * Close file when finished
000010DA  103C 0038                 49          MOVE.B  #56,D0                         ;Trap task #56, close file, D1 contains fileID
000010DE  4E4F                      50          TRAP    #15                            ;Perform task
000010E0                            51  
000010E0                            52  
000010E0                            53  *Load start and end address as longs
000010E0                            54  *Start Address is in A5     
000010E0  43F9 00001705             55      LEA IO_BUFFER, A1               ;Load string or IO buffer to A1
000010E6  4EB9 000013E0             56      JSR AsciiToHex                  ;Convert ASCII to Hex
000010EC  2A47                      57      MOVE.L D7, A5                   ;Loop counter prep
000010EE                            58      
000010EE                            59  *End Address is in A6
000010EE  5489                      60      ADDA.L #2, A1                   ;Add #2 to A1
000010F0  4EB9 000013E0             61      JSR AsciiToHex                  ;Convert ASCII to Hex
000010F6  2C47                      62      MOVE.L D7, A6                   ;Loop counter prep
000010F8                            63      
000010F8                            64  VALIDATE_START_ADDRESS              ;Validates starting address
000010F8  200D                      65      MOVE.L A5, D0                   ;Move stating address to D0
000010FA                            66  *----------------------------------------------------------------------------------
000010FA                            67  * Method Name: VALIDATE_POSITIVE_ADDRESS
000010FA                            68  * Description: Checks if the start address is positive it then branches
000010FA                            69  *              to validate if the address in the Config.cfg file is even
000010FA                            70  *
000010FA                            71  *  Preconditions & Input of a start address that is even
000010FA                            72  *       A1 (input) points to a memory buffer holding 8 ASCII chars (not null-terminated) 
000010FA                            73  *       This function calls another function (strip_ascii)
000010FA                            74  *
000010FA                            75  *  Postconditions & Output
000010FA                            76  *   
000010FA                            77  *----------------------------------------------------------------------------------
000010FA                            78  VALIDATE_POSITIVE_ADDRESS
000010FA  200D                      79      MOVE.L A5, D0                   ;Move starting address to D0
000010FC  0280 80000000             80      ANDI.L #$80000000, D0           ;Checking if the start address address is positive
00001102  B0BC 00000000             81      CMP.L #0, D0                    ;Compare 0 to D0
00001108  6700 0034                 82      BEQ VALIDATE_EVEN               ;Check if the address is even
0000110C                            83      
0000110C  43F9 0000171E             84      LEA INVALID_ADDRES_MESSAGE, A1         ;Load INVALID message to A1
00001112  4EB9 0000134A             85      JSR TrapTask13                             ;Use Nash's Console Output
00001118  6000 0134                 86      BRA DONE                        ;Finish routine
0000111C                            87  
0000111C                            88  VALIDATE_END_POS
0000111C  200E                      89      MOVE.L A6, D0                   ;Move ending address to D0
0000111E  0280 80000000             90      ANDI.L #$80000000, D0                  ;Checking if the end address address is positive
00001124  B0BC 00000000             91      CMP.L #0, D0                    ;Compare address to 0
0000112A  6700 0012                 92      BEQ VALIDATE_EVEN               ;Check if the end address is even
0000112E                            93      
0000112E  43F9 0000171E             94      LEA INVALID_ADDRES_MESSAGE, A1         ;Load INVALID message to A1
00001134  4EB9 0000134A             95      JSR TrapTask13                             ;Use Nash's Console Output      
0000113A  6000 0112                 96      BRA DONE                        ;Finish routine
0000113E                            97      
0000113E                            98  VALIDATE_EVEN
0000113E  200D                      99      MOVE.L A5, D0                   ;MOVE STARTING ADDRESS TO D0
00001140  0280 00000001            100      ANDI.L #$00000001,D0                   ;Bitmask 1 a single bit to D0
00001146  B0BC 00000000            101      CMP.L #0, D0                    ;Check if even
0000114C  6700 0012                102      BEQ MAIN_LOOP                   ;Go to the main loop if even
00001150                           103  *Handle odd addresses
00001150  43F9 0000171E            104      LEA INVALID_ADDRES_MESSAGE, A1         ;Load INVALID message to A1
00001156  4EB9 0000134A            105      JSR TrapTask13                             ;Use Nash's Console Output
0000115C  6000 00F0                106      BRA DONE                        ;Finish routine
00001160                           107              
00001160                           108  
00001160                           109  
00001160                           110  *Comments are shifted if variable names get too long
00001160                           111  MAIN_LOOP                                   ;Main loop to run each instruction
00001160  49F8 1000                112           LEA G_BUFFER,A4                            ;Point G_BUFFER to A4
00001164                           113      
00001164  BDCD                     114              CMPA.L A5, A6                           ;Compare Starting to ending address
00001166  6D00 00E6                115              BLT DONE                            ;If it's less then stop the loop
0000116A                           116              
0000116A                           117  *Clear both buffers 
0000116A  23FC 00001000 000012B4   118              MOVE.L #G_BUFFER, CLEAR_BUFFER_POINTER              ;Point the clear pointer to G_BUFFER
00001174  4EB9 000012BC            119              JSR CLEAR_BUFFER                        ;Clear the buffer
0000117A                           120              
0000117A  23FC 00001050 000012B4   121              MOVE.L #B_BUFFER, CLEAR_BUFFER_POINTER              ;Point the clear pointer to B_BUFFER
00001184  4EB9 000012BC            122              JSR CLEAR_BUFFER                        ;Clear the buffer
0000118A                           123              
0000118A                           124  *Add address to both buffers
0000118A                           125              
0000118A  23CD 000012DC            126              MOVE.L A5, NUMBER_TO_CONVERT                ;The current address is stored to A5, we need to convert it to load it in the buffers.
00001190  13FC 0008 000012E0       127              MOVE.B #8, CHARNUM_TO_CONVERT               ;This specifies the number of characters that needs to be converted.
00001198  4EB9 000012EA            128              JSR CONVERT_HEX_TO_STRING                   ;Convert hex to string
0000119E                           129              
0000119E  23FC 000012E1 00001252   130              MOVE.L #CONVERTED_HEX_STRING, STRING_BUFFER_POINTER ;Prepare the string buffer with the converted hex string
000011A8  23FC 00001000 00001256   131              MOVE.L #G_BUFFER, BUFFER_POINTER                   ;Point G_BUFFER to the print buffer
000011B2  4EB9 0000125F            132              JSR AddStrToBuffer                      ;Add the string to the print buffer
000011B8                           133      
000011B8  31DD 10A0                134              MOVE.W (A5)+, CUR_OP_CODE                   ;Read the current opcode
000011BC  4EF9 0000173E            135              JMP OP_JSR_Routine                      ;Run main OP code routine
000011C2                           136  
000011C2                           137  *********************************
000011C2                           138  *Checks if its valid print or invalid
000011C2                           139  * @pre checks invalid
000011C2                           140  * @post Branches to the respective branch
000011C2                           141  ************************************
000011C2                           142  check_print
000011C2  0C38 0001 10A2           143              CMP.B #1,IS_VALID                       ;Check if IS_VALID is set to 1
000011C8  6700 0006                144              BEQ   print_instruction                 ;If it's valid do print_instruction
000011CC  6600 000E                145              BNE   print_data                        ;If it's invalid do print_data
000011D0                           146              
000011D0                           147  print_instruction                               ;Prints the data in G_BUFFER
000011D0                           148  *Print the opcode if valid
000011D0  43F8 1000                149              LEA G_BUFFER,A1                     ;Points A1 to G_BUFFER
000011D4  4EB9 0000134A            150              JSR TrapTask13                          ;Use Nash's console output
000011DA  6084                     151              BRA MAIN_LOOP                           ;Go back to the main loop
000011DC                           152   
000011DC                           153  *Otherwise print data
000011DC                           154  print_data  
000011DC  23CD 000012DC            155              MOVE.L A5, NUMBER_TO_CONVERT                    ;The current address is stored to A5, we need to convert it to load it in the buffers.
000011E2  13FC 0008 000012E0       156              MOVE.B #8, CHARNUM_TO_CONVERT                   ;This specifies the number of characters that needs to be converted.
000011EA  4EB9 000012EA            157              JSR CONVERT_HEX_TO_STRING                       ;Convert the hex to string
000011F0  23FC 000012E1 00001252   158              MOVE.L #CONVERTED_HEX_STRING, STRING_BUFFER_POINTER     ;Point the string buffer to the converted hex
000011FA                           159              
000011FA  23FC 00001050 00001256   160              MOVE.L #B_BUFFER, BUFFER_POINTER                    ;Prepare the string buffer with the valid data
00001204  4EB9 0000125F            161              JSR AddStrToBuffer                          ;Add the string to the print buffer
0000120A                           162  *Add bad data to bad buffer
0000120A  23FC 0000277A 00001252   163              MOVE.L #P_INVALID_OP, STRING_BUFFER_POINTER         ;Prepare the string buffer with the invalid data
00001214  4EB9 0000125F            164              JSR AddStrToBuffer                          ;Add the string to the print buffer
0000121A                           165              
0000121A  33F8 10A0 000012DC       166              MOVE.W CUR_OP_CODE, NUMBER_TO_CONVERT               ;The current address is stored to A5, we need to convert it to load it in the buffers.
00001222  13FC 0008 000012E0       167              MOVE.B #8, CHARNUM_TO_CONVERT                   ;This specifies the number of characters that needs to be converted.
0000122A  4EB9 000012EA            168              JSR CONVERT_HEX_TO_STRING                       ;Convert the hex to string
00001230                           169              
00001230  23FC 000012E1 00001252   170              MOVE.L #CONVERTED_HEX_STRING, STRING_BUFFER_POINTER     ;Prepare the string buffer with the converted hex string
0000123A  4EB9 0000125F            171              JSR AddStrToBuffer                          ;Add the converted hex to buffer
00001240                           172              
00001240  43F8 1050                173              LEA B_BUFFER,A1                         ;Point A1 to the bad buffer
00001244  4EB9 0000134A            174              JSR TrapTask13                              ;Use Nash's console output
0000124A  6000 FF14                175              BRA MAIN_LOOP                               ;Go back to the main loop
0000124E                           176  
0000124E                           177  
0000124E                           178  DONE                                            ;We're finished at this point reading all the files
0000124E  FFFF FFFF                179              SIMHALT                                 ;Halt the simulation
00001252                           180              
00001252                           181  **
00001252                           182  * AddStrToBuffer
00001252                           183  *****************************************************************************
00001252                           184  * Description: Adds the a defined string constant into a buffer to print out
00001252                           185  * Places a NULL terminating string to start with a default buffer length of 80.
00001252                           186  *
00001252                           187  * If the buffer length is exceeded, where length was improperly specified or no
00001252                           188  * NULL terminating string was found, return 1, else return 0 for success.
00001252                           189  *
00001252                           190  * Additional Constants/Subroutines used:
00001252                           191  * STRING_BUFFER_POINTER                 ;String pointer
00001252                           192  * BUFFER_POINTER                        ;Buffer pointer
00001252                           193  * BUFFER_POINTER_LENGTH                 ;Buffer length, 80 chars by default
00001252                           194  * BUFFER_ADD_SUCCESS                    ;0 = success, 1 = failure
00001252                           195  * FIND_NULL_IN_BUFFER                   ;Find NULL in buffer with a loop
00001252                           196  * STRING_BUFFER_ADD_LOOP                    ;Add a string to the buffer with a loop
00001252                           197  * STRING_ADD_SUCCESS                       ;Routine to run when string is added successfully
00001252                           198  * BUFFER_LENGTH_FAIL                    ;Routine to run when buffer length is exceeded
00001252                           199  * BUFFER_STRING_END                     ;Subroutine is finished
00001252                           200  *****************************************************************************
00001252                           201  * Constant definitions:
00001252                           202  STRING_BUFFER_POINTER   DS.L    1
00001256                           203  BUFFER_POINTER      DS.L    1
0000125A= 00000050                 204  BUFFER_POINTER_LENGTH   DC.L    80
0000125E                           205  BUFFER_ADD_SUCCESS      DS.B    1
0000125F                           206  
0000125F                           207  AddStrToBuffer:         
00001260  48E7 C0C0                208      MOVEM.L     D0-D1/A0-A1, -(SP)              ;Save registers to stack
00001264                           209      
00001264  2078 1252                210      MOVE.L      STRING_BUFFER_POINTER,A0        ;Load string pointer to A0
00001268  2278 1256                211      MOVE.L      BUFFER_POINTER, A1          ;Load buffer pointer to A1
0000126C  2038 125A                212      MOVE.L      BUFFER_POINTER_LENGTH, D0       ;Load buffer length to D0
00001270  4278 125E                213      CLR.W       BUFFER_ADD_SUCCESS          ;Clear any prior success bit
00001274  4281                     214      CLR.L       D1                      ;Clear any prior loop counts
00001276                           215  
00001276                           216  STRING_BUFFER_LOOP
00001276  0C11 0000                217      CMPI.B      #0, (A1)                    ;Check if buffer char is NULL or not
0000127A  6700 000E                218      BEQ         STRING_BUFFER_ADD_LOOP          ;If a 0 is found, start adding string(s) to the buffer
0000127E                           219      
0000127E  B280                     220      CMP.L       D0, D1                  ;Check if the counter is more than the max length
00001280  6C00 0026                221      BGE         BUFFER_LENGTH_EXCEEDED          ;Exceeded the length
00001284                           222      
00001284  5289                     223      ADDQ.L      #1, A1                  ;Increment to the next character
00001286  5201                     224      ADDQ.B      #1, D1                  ;Increment loop counter
00001288  60EC                     225      BRA         STRING_BUFFER_LOOP          ;Loop back again
0000128A                           226      
0000128A                           227  STRING_BUFFER_ADD_LOOP
0000128A  0C10 0000                228      CMPI.B      #0, (A0)                       ;Check is the string char is NULL
0000128E  6700 0010                229      BEQ         STRING_ADD_SUCCESS          ;String has been added successfully
00001292                           230      
00001292  B200                     231      CMP.B       D0, D1                  ;Check if the counter is more than the max length
00001294  6C00 0012                232      BGE         BUFFER_LENGTH_EXCEEDED          ;Exceeded the length
00001298                           233      
00001298  12D8                     234      MOVE.B      (A0)+,(A1)+             ;Add string to the buffer
0000129A  5201                     235      ADDQ.B      #1, D1                  ;Increment loop counter
0000129C  524C                     236      ADDQ.W      #1, A4                  ;Increment G_BUFFER counter
0000129E  60EA                     237      BRA         STRING_BUFFER_ADD_LOOP          ;Loop back again
000012A0                           238  
000012A0                           239  STRING_ADD_SUCCESS
000012A0  12BC 0000                240      MOVE.B      #0,(A1)                 ;Place NULL terminating 0 at the end
000012A4  6000 0008                241      BRA         BUFFER_STRING_END               ;Finish subroutine
000012A8                           242  
000012A8                           243  BUFFER_LENGTH_EXCEEDED
000012A8  31FC 0001 125E           244      MOVE.W      #1, BUFFER_ADD_SUCCESS          ;BUFFER failed to add
000012AE                           245  
000012AE                           246  BUFFER_STRING_END
000012AE  4CDF 0303                247      MOVEM.L     (SP)+, D0-D1/A0-A1          ;Restore registers from stack
000012B2  4E75                     248      RTS                                     ;Return to stack
000012B4                           249  **************************************************************************
000012B4                           250  * CLEAR_BUFFER
000012B4                           251  *****************************************************************************
000012B4                           252  * Description: Clears the defined buffer area with NULL terminating 0s
000012B4                           253  * The default size is 80 bytes
000012B4                           254  *
000012B4                           255  * Additional Constants/Subroutines used:
000012B4                           256  * CLEAR_BUFFER_POINTER                  ;Buffer pointer
000012B4                           257  * CLEAR_BUFFER_LENGTH                   ;Length of buffer, default 80 bytes
000012B4                           258  * CLEAR_BUFFER_LOOP                     ;Buffer loop
000012B4                           259  * CLEAR_BUFFER_END                      ;Finish subroutine
000012B4                           260  *****************************************************************************
000012B4                           261  * Constant definitions:
000012B4                           262  CLEAR_BUFFER_POINTER    DS.L    1
000012B8= 00000050                 263  CLEAR_BUFFER_LENGTH     DC.L    80
000012BC                           264  
000012BC                           265  CLEAR_BUFFER:           DS.W    0
000012BC  48E7 C080                266      MOVEM.L     D0-D1/A0, -(SP)             ;Save registers to stack
000012C0  2078 12B4                267      MOVEA.L     CLEAR_BUFFER_POINTER, A0        ;Load buffer address to A0
000012C4  2038 12B8                268      MOVE.L      CLEAR_BUFFER_LENGTH, D0         ;Load buffer length to D0
000012C8  4281                     269      CLR.L       D1                      ;Clear any prior loop counter
000012CA                           270      
000012CA                           271  CLEAR_BUFFER_LOOP
000012CA  B280                     272      CMP.L       D0, D1                  ;Check if the counter is more than the max length
000012CC  6C00 0008                273      BGE         CLEAR_BUFFER_END                ;Finish subroutine
000012D0                           274      
000012D0  4218                     275      CLR.B       (A0)+                   ;Clear current character in clear buffer
000012D2  5241                     276      ADDQ        #1, D1                  ;Increment loop counter
000012D4  60F4                     277      BRA         CLEAR_BUFFER_LOOP               ;Loop back again
000012D6                           278      
000012D6                           279  CLEAR_BUFFER_END
000012D6  4CDF 0103                280      MOVEM.L     (SP)+, D0-D1/A0             ;Restore registers from stack
000012DA  4E75                     281      RTS                         ;Return to stack
000012DC                           282  
000012DC                           283  
000012DC                           284  **
000012DC                           285  * CONVERT_HEX_TO_STRING
000012DC                           286  *****************************************************************************
000012DC                           287  * Description: Converts a given number to a hexadecimal string by the specified 
000012DC                           288  * length. A null terminating string is added after (0). Conversion starts from the
000012DC                           289  * rightmost bit.
000012DC                           290  *
000012DC                           291  * Default length of conversion is 8, but can be changed.
000012DC                           292  
000012DC                           293  * Additional Constants/Subroutines used:
000012DC                           294  * NUMBER_TO_CONVERT                     ;Number to convert
000012DC                           295  * CHARNUM_TO_CONVERT                    ;Character numbers to convert, valid range is 0-8
000012DC                           296  * CONVERTED_HEX_STRING                  ;Converted hexadecimal character string
000012DC                           297  * CHECK_POSITIVE_LENGTH                 ;Routine to check for positive length
000012DC                           298  * CHECK_VALID_LENGTH                    ;Routine to check for valid length
000012DC                           299  * DIGIT_LOOP                            ;Looping through each digit
000012DC                           300  * CONVERT_TO_HEX_LETTER                 ;Routine to convert to hex letter
000012DC                           301  * ADD_CHAR_TO_STRING                    ;Adds a character to the string
000012DC                           302  *****************************************************************************
000012DC                           303  * Constant definitions:
000012DC                           304  NUMBER_TO_CONVERT       DS.L    1
000012E0= 08                       305  CHARNUM_TO_CONVERT      DC.B    8
000012E1                           306  CONVERTED_HEX_STRING    DS.B    9
000012EA                           307  
000012EA                           308  CONVERT_HEX_TO_STRING:  DS.W    0           
000012EA  48E7 F0C0                309      MOVEM.L     D0-D3/A0-A1, -(SP)          ;Save registers to stack
000012EE  4281                     310      CLR.L       D1                      ;Clear any prior number from D1
000012F0  4280                     311      CLR.L       D0                      ;Clear any prior number from D0
000012F2  2038 12DC                312      MOVE.L      NUMBER_TO_CONVERT, D0           ;Load number to D0
000012F6  1238 12E0                313      MOVE.B      CHARNUM_TO_CONVERT, D1          ;Load length to D1
000012FA  207C 000012E1            314      MOVEA.L     #CONVERTED_HEX_STRING, A0       ;Load string address to convert
00001300                           315      
00001300  0C01 0001                316      CMPI.B      #1, D1                  ;Check if D1 is one or not
00001304  6C00 0004                317      BGE         CHECK_POSITIVE_LENGTH           ;Check the length of the number
00001308  7201                     318      MOVEQ       #1, D1                  ;Move number 1 to D1 otherwise
0000130A                           319      
0000130A                           320  CHECK_POSITIVE_LENGTH                   ;Checks the positive length
0000130A  0C01 0008                321      CMPI.B      #8, D1                  ;Check if the length is 8 or not
0000130E  6F00 0004                322      BLE         CHECK_VALID_LENGTH          ;If it's less find and check the length
00001312  7208                     323      MOVEQ       #8, D1                  ;Move number 8 into the length
00001314                           324      
00001314                           325  CHECK_VALID_LENGTH                      ;Checks to see if the length is valid
00001314  2248                     326      MOVEA.L     A0, A1                  ;A0 contains start number, A1 contains current number
00001316  D2C1                     327      ADDA.W      D1, A1                  ;Go to the last digit
00001318  4211                     328      CLR.B       (A1)                    ;Make the last digit NULL or 0
0000131A  740F                     329      MOVEQ       #$0F,D2                 ;Bitmask last hex or nibble
0000131C                           330      
0000131C                           331  DIGIT_LOOP
0000131C  1600                     332      MOVE.B      D0, D3                  ;Get 2 hex chars from number
0000131E  C602                     333      AND.B       D2, D3                  ;Mask to get last hex char
00001320                           334      
00001320  0C03 0009                335      CMPI.B      #9, D3                  ;Check if the value is over 9
00001324  6E00 000A                336      BGT         CONVERT_TO_HEX_LETTER           ;If so, it must be a letter, convert the letter
00001328                           337      
00001328  0603 0030                338      ADDI.B      #'0', D3                       ;Get the ASCII value for 0-9
0000132C  6000 000A                339      BRA         ADD_CHAR_TO_STRING          ;Add char to the string
00001330                           340  
00001330                           341  CONVERT_TO_HEX_LETTER
00001330  0403 000A                342      SUBI.B      #10, D3                 ;Subtract 10 first to get correct ASCII
00001334  0603 0041                343      ADDI.B      #'A', D3                    ;Get the ASCII value for letters A-F
00001338                           344  
00001338                           345  ADD_CHAR_TO_STRING
00001338  1303                     346      MOVE.B      D3, -(A1)                   ;Add char to string and decrement pointer
0000133A  E888                     347      LSR.L       #4, D0                  ;Shift the 4 bits to the right
0000133C  B3C8                     348      CMPA.L      A0, A1                  ;Check if the current pointer is greater than starting string
0000133E  6EDC                     349      BGT         DIGIT_LOOP                     ;If so, loop back
00001340  42B8 12DC                350      CLR.L  NUMBER_TO_CONVERT                          ;Clear any prior number  
00001344                           351      
00001344  4CDF 030F                352      MOVEM.L     (SP)+, D0-D3/A0-A1             ;Restore registers from stack
00001348  4E75                     353      RTS                         ;Finish subroutine
0000134A                           354  
0000134A                           355  
0000134A                           356      
0000134A                           357  *********************************************************************************
0000134A                           358  * Method Name: TrapTask13
0000134A                           359  * Description: Creates a file if none exists, and appends bytes to that file
0000134A                           360  *   while also echoing the written bytes to the screen.  You shouldn't need to
0000134A                           361  *   change this code.
0000134A                           362  *
0000134A                           363  * Calling Convention: Callee-Saved 
0000134A                           364  *
0000134A                           365  * Preconditions & Method Input:
0000134A                           366  *   A1 points to the null-terminated buffer to write (newline will be added for you)
0000134A                           367  *
0000134A                           368  * Postconditions & Output:
0000134A                           369  *   ALL files that were previously open will be CLOSED (FileIDs will be invalid)
0000134A                           370  *   See 'Output.txt' in directory for the results, also piped to the console
0000134A                           371  *
0000134A                           372  *
0000134A                           373  *  A2 holds a pointer to null terminated string to write (input)
0000134A                           374  *  A3 points to the null-terminated file name
0000134A                           375  *  D3 holds the number of bytes already in the file to write
0000134A                           376  *
0000134A                           377  *  D5 holds number of bytes to write
0000134A                           378  ********************************************************************************
0000134A                           379  toSave REG D0-D5/A2-A3
0000134A                           380  TrapTask13:
0000134A                           381      *******************************************************************
0000134A                           382      * Method initialization, register spilling, parameter saving, etc.
0000134A                           383      *******************************************************************
0000134A  48E7 FC30                384      MOVEM.L toSave, -(SP)   ;  Callee-Saved, so save and restore     
0000134E                           385        
0000134E  2449                     386      MOVEA.L A1, A2 ; save this buffer to write
00001350  47F9 000016DA            387      LEA outFilename, A3  ; save this for later, too
00001356                           388        
00001356  303C 0032                389      move #50,d0   
0000135A  4E4F                     390      trap #15 ; close all files, suggested to begin any IO 
0000135C                           391      *******************************************************************
0000135C                           392      * End Method Init
0000135C                           393      *******************************************************************
0000135C                           394  
0000135C                           395      ******************************************************************************************
0000135C                           396      * Calculate the number of bytes to write by searching for the null in the target buffer A0
0000135C                           397      ******************************************************************************************
0000135C  4285                     398      CLR.L D5 *D5 is now the number of bytes to write
0000135E                           399  nullLoop:
0000135E  1019                     400      MOVE.B (A1)+, D0
00001360  0C00 0000                401      CMPI.B #0,D0  * compare to null
00001364  6700 0006                402      BEQ findNullLoopDone
00001368  5245                     403      ADDI.W #1, D5
0000136A  60F2                     404      BRA nullLoop
0000136C                           405      
0000136C                           406  findNullLoopDone:
0000136C  224B                     407      MOVEA.L A3, A1 * reset A1 so it points to the file to write to (to open, next)
0000136E                           408      
0000136E                           409      ;check if file exists, and open with task 51 if so, otherwise 52
0000136E                           410      ;(precondition here is A1 points to the null-terminated filename )
0000136E  103C 0033                411      MOVE.B #51, D0      ;open file (task 51 is existing, 52 is new)
00001372  4E4F                     412      trap #15
00001374                           413        
00001374                           414      if.w D0 <NE> #0 then.s         ; if file error (404, not found)
0000137A  103C 0034                415          MOVE.B #52, D0             ; open new file (52 is new)
0000137E  4E4F                     416          trap #15
00001380                           417      endi
00001380                           418      
00001380                           419      ********************************************************************************************************* 
00001380                           420      * Seek to END of FILE by counting the number of bytes, closing, reopening, then seeking.
00001380                           421      *    (first, count number of bytes already in the file to obtain seek position)
00001380                           422      *********************************************************************************************************
00001380  4283                     423      Clr.L D3   ;TODO: reg save, D3 is now our count of bytes read
00001382  7401                     424      MOVE.L #1, D2 ; read one byte at a time
00001384  43F9 000016F1            425      LEA byteRead, A1
0000138A                           426      
0000138A                           427  countLoop:
0000138A  103C 0035                428      MOVE.B #53, D0 ; try to read one byte (TODO: move out of loop)
0000138E  4E4F                     429      trap #15
00001390                           430      
00001390  0C40 0001                431      CMPI.W #1,D0  ;1 == EOF
00001394  6700 0006                432      BEQ countDone
00001398  5243                     433      ADDI #1, D3
0000139A  60EE                     434      BRA countLoop
0000139C                           435      
0000139C                           436  countDone:    
0000139C                           437      * close this file
0000139C  303C 0038                438       move #56,d0  
000013A0  4E4F                     439       trap #15 
000013A2                           440       
000013A2                           441       * reopen the target file
000013A2  224B                     442       MOVE.L A3,A1
000013A4  303C 0033                443       MOVE #51, D0
000013A8  4E4F                     444       trap #15
000013AA                           445       
000013AA                           446      * seek to right position, then continue with writing
000013AA  2403                     447      MOVE.L D3, D2 ; move the number of bytes found in the file to D2
000013AC  303C 0037                448      MOVE #55, D0  ; position file task
000013B0  4E4F                     449      trap #15
000013B2                           450  
000013B2                           451      ******************************************************************************
000013B2                           452      * Actually write the buffer to the file, after calculating the number of bytes 
000013B2                           453      *  to write and after seeking to the right location in the file for append
000013B2                           454      ******************************************************************************
000013B2                           455  
000013B2  2405                     456      MOVE.L D5, D2 ; restore this for the actually writing the buffer 
000013B4                           457      ; assumes A0 hasnt changed since handed to this method      
000013B4  224A                     458      MOVEA.L A2, A1 ; load the address of the buffer we want to write to disk
000013B6                           459      ; assumes file ID is still stored in D1.L  
000013B6  103C 0036                460      MOVE.B #54, D0 ; subtask 54 is write to open file (append, or?), assumes D2 holds # of bytes
000013BA  4E4F                     461      trap #15
000013BC                           462  
000013BC                           463      ; add a newline to the file output
000013BC  43F9 000016D4            464      LEA NEWLINE, A1
000013C2  103C 0036                465      MOVE.B #54, D0 
000013C6  143C 0002                466      MOVE.B #2,D2  ; kills # of bytes to write from input param
000013CA  4E4F                     467      trap #15
000013CC                           468      
000013CC                           469      ; finally, close only this file
000013CC  103C 0038                470      MOVE.B #56, D0 ; close file task
000013D0  4E4F                     471      trap #15
000013D2                           472    
000013D2                           473      ; report to screen
000013D2  224A                     474      MOVEA.L A2, A1 ; load the address of the buffer we want to write to disk & screen
000013D4  103C 000D                475      MOVE.B #13, D0
000013D8  4E4F                     476      trap #15
000013DA                           477        
000013DA                           478      ; restore context
000013DA  4CDF 0C3F                479      MOVEM.L (SP)+, toSave
000013DE                           480      
000013DE  4E75                     481      RTS
000013E0                           482      
000013E0                           483      
000013E0                           484  *----------------------------------------------------------------------------------
000013E0                           485  * Method Name: AsciiToHex
000013E0                           486  * Written by : Berger, Modified by Nash
000013E0                           487  * Date       : 3/1/2019
000013E0                           488  * Description: Converts chars '0'-'9' and 'a'-'f' to 0-9,a-F
000013E0                           489  *              Transforms/unpacks 8 chars (8b each) pointed to by A1 into 
000013E0                           490  *              its (4b each) equivalent hex value 
000013E0                           491  *  
000013E0                           492  *  Preconditions & Input
000013E0                           493  *       A1 (input) points to a memory buffer holding 8 ascii chars (not null-terminated) 
000013E0                           494  *       This function calls another function (strip_ascii)
000013E0                           495  *
000013E0                           496  *  Postconditions & Output
000013E0                           497  *       D7 (output) holds the converted value 
000013E0                           498  *       Caller-Saved : D0 is temp, D6 is a loop var
000013E0                           499  *----------------------------------------------------------------------------------
000013E0                           500  AsciiToHexRegList REG D0,D6
000013E0                           501  AsciiToHex     
000013E0  48E7 8000                502      MOVEM.L asciiToHexRegList, -(SP)  *save context
000013E4  4287                     503      CLR.L D7 * clear our return value
000013E6  7C08                     504      MOVE.L #8, D6 ; and set up our loop counter
000013E8                           505  
000013E8                           506  chrLoop
000013E8  1019                     507      MOVE.B (A1)+,D0 * Get the first byte
000013EA  4EB9 00001402            508      jsr strip_ascii * Get rid of the ascii code    
000013F0  8E40                     509      OR.W D0,D7 * Load the bits into D7
000013F2                           510      
000013F2  5306                     511      subI.B #1,D6  *decrement our loop variable
000013F4  6700 0006                512      BEQ chrDone   *skip shifting if we are done
000013F8                           513      
000013F8  E987                     514      ASL.L #4,D7 * shift left 4 bits to prepare for next byte
000013FA  60EC                     515      BRA chrLoop
000013FC                           516  
000013FC                           517  chrDone
000013FC  4CDF 0001                518      MOVEM.L (SP)+,asciiToHexRegList 
00001400  4E75                     519      RTS
00001402                           520  
00001402                           521  
00001402                           522  **********************************************************************
00001402                           523  * SUBROUTINE: strip_ascii
00001402                           524  * remove the ascii code from the digits 0-9,a-f, or A-F
00001402                           525  * Input Parameters: <D0> = ascii code
00001402                           526  *
00001402                           527  * Return parameters: D0.B = number 0...F, returned as 00...0F
00001402                           528  * Registers used internally: D0
00001402                           529  * Assumptions: D0 contains $30-$39, $41-$46 or $61-66
00001402                           530  *
00001402                           531  ***********************************************************************
00001402                           532  strip_ascii
00001402  B03C 0039                533        CMP.B #$39,D0 * Is it in range of 0-9?
00001406  6F00 001A                534        BLE sub30 * Its a number
0000140A  B03C 0046                535        CMP.B #$46,D0 * Is is A...F?
0000140E  6F00 000A                536        BLE sub37 * Its A...F
00001412  0400 0057                537        SUB.B #$57,D0 * Its a...f
00001416  6000 000E                538        BRA ret_sa * Go back
0000141A  0400 0037                539  sub37 SUB.B #$37,D0 * Strip 37
0000141E  6000 0006                540        BRA ret_sa * Go back
00001422  0400 0030                541  sub30 SUB.B #$30,D0 * Strip 30
00001426  4E75                     542  ret_sa RTS * Go back
00001428                           543  
00001428                           544  MAIN_CONSOLE
00001428                           545     
00001428= 3D 3D 3D 3D 3D 3D ...    546        DC.B '============================================================',CR,LF
00001466= 7C 7C 20 20 20 20 ...    547        DC.B '||                                                        ||',CR,LF
000014A4= 7C 7C 20 20 20 23 ...    548        DC.B '||   #####      ###    ##   ##                            ||',CR,LF
000014E2= 7C 7C 20 20 23 23 ...    549        DC.B '||  ##        ##   ##  ## ##                              ||',CR,LF
00001520= 7C 7C 20 23 23 20 ...    550        DC.B '|| ## ####     #####   ####                               ||',CR,LF
0000155E= 7C 7C 20 23 23 20 ...    551        DC.B '|| ##    ##  ##    ##  ####                               ||',CR,LF
0000159C= 7C 7C 20 23 23 20 ...    552        DC.B '|| ##    ##  ##    ##  ## ##                              ||',CR,LF
000015DA= 7C 7C 20 20 23 23 ...    553        DC.B '||  #####     ######   ##  ##                             ||',CR,LF
00001618= 7C 7C 20 20 20 20 ...    554        DC.B '||                                                        ||',CR,LF
00001656= 7C 7C 20 20 20 44 ...    555        DC.B '||   Daniel Yan, Fahad Alshehri, Denny Park               ||',CR,LF
00001694= 3D 3D 3D 3D 3D 3D ...    556        DC.B '============================================================',CR,LF,0
000016D3                           557      
000016D3                           558  * Required variables and constants go here for your Disassembler
000016D3  =0000000D                559  CR              EQU $0D                     ;Carriage return
000016D3  =0000000A                560  LF              EQU $0A                        ;Line feed
000016D4= 000D 000A 0000           561  NEWLINE         DC.W CR,LF,0                    ;Make a new line
000016DA= 44 69 73 61 73 73 ...    562  outFilename     DC.B 'DisassemblerOutput.txt',0             ;Output file
000016F1                           563  byteRead        DS.B 1                              ;Read a byte
000016F2= 31 41 30 30 31 41 ...    564  ascii_val       DC.B $31,$41,$30,$30,$31,$41,$30,$30            ;Test value $1A001A00
000016FA                           565  
000016FA                           566  * Variables and constants
000016FA  =00000014                567  SIZE            EQU     20                          ;Max string size
000016FA= 43 6F 6E 66 69 67 ...    568  fileName        DC.B    'Config.cfg',0                  ;Name of text file
00001705                           569  IO_BUFFER       DS.B    SIZE                                    ;Variable for IO buffer
0000171A                           570  fileID          DS.L    1                                   ;Variable for File ID
0000171E= 496E 7661 6C69 6...      571  INVALID_ADDRES_MESSAGE DC.W 'Invalid Hex Address' ,CR,LF,0          ;Invalid message print
00001738                           572  
00001738                           573      INCLUDE "OP_Code_Routines.x68"                      ;OP role code to include
00001738                           574  
00001738                           575  OP_SIZE         DS.B    1   ;This constant refers to the size of the current OP code 
00001739                           576  MNEMONIC        DS.B    1   ;Constant for EA, first 4 bits (15-12) of a 4 hex OP code
0000173A                           577  FIRST_3         DS.B    1   ;Constant for EA, 3 bits (11-9) of a 4 hex OP code
0000173B                           578  SECOND_3        DS.B    1   ;Constant for EA, 3 bits (8-6) of a 4 hex OP code
0000173C                           579  THIRD_3         DS.B    1   ;Constant for EA, 3 bits (5-3) of a 4 hex OP code
0000173D                           580  FOURTH_3        DS.B    1   ;Constant for EA, 3 bits (2-0) of a 4 hex OP code
0000173E                           581  
0000173E                           582  
0000173E                           583  
0000173E                           584  
0000173E                           585  OP_JSR_Routine:
0000173E  48E7 C000                586      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
00001742  3038 10A0                587      MOVE.W CUR_OP_CODE,D0          ;Move current instruction set to D0
00001746  11FC 0001 10A2           588      MOVE.B #1,IS_VALID             ;Set IS_VALID bit to 1 by default
0000174C  720C                     589      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
0000174E  E2A8                     590      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
00001750                           591  
00001750                           592  GROUP_0:                           ;$0| ORI, BCLR (static and dynamic), CMPI                  
00001750  B03C 0000                593      CMP.B   #$0,D0                 ;Compare first nibble
00001754  6600 000C                594      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
00001758  4EB9 0000197A            595      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
0000175E  6000 010C                596      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001762                           597      
00001762                           598  GROUP_1:                           ;$1| MOVE.B
00001762  B03C 0001                599      CMP.B   #$1,D0                 ;Compare first nibble
00001766  6600 000C                600      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
0000176A  4EB9 00001B58            601      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
00001770  6000 00FA                602      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001774                           603  
00001774                           604  GROUP_2:                           ;$2| MOVE.L, MOVEA.L
00001774  B03C 0002                605      CMP.B   #$2,D0                 ;Compare first nibble
00001778  6600 000C                606      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
0000177C  4EB9 00001B82            607      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
00001782  6000 00E8                608      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001786                           609  
00001786                           610  GROUP_3:                           ;$3| MOVE.W, MOVEA.W
00001786  B03C 0003                611      CMP.B   #$3,D0                 ;Compare first nibble
0000178A  6600 000C                612      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
0000178E  4EB9 00001BE4            613      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
00001794  6000 00D6                614      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001798                           615  
00001798                           616  GROUP_4:                           ;$4| LEA, JSR, RTS, NEG, MOVEM
00001798  B03C 0004                617      CMP.B   #$4,D0                 ;Compare first nibble
0000179C  6600 000C                618      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
000017A0  4EB9 00001C46            619      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
000017A6  6000 00C4                620      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017AA                           621  
000017AA                           622  
000017AA                           623  GROUP_5:                           ;$5| SUBQ
000017AA  B03C 0005                624      CMP.B   #$5,D0                 ;Compare first nibble
000017AE  6600 000C                625      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
000017B2  4EB9 00001ED4            626      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
000017B8  6000 00B2                627      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017BC                           628  
000017BC                           629  
000017BC                           630  GROUP_6:                           ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
000017BC  B03C 0006                631      CMP.B   #$6,D0                 ;Compare first nibble
000017C0  6600 000C                632      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
000017C4  4EB9 00001F3E            633      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
000017CA  6000 00A0                634      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017CE                           635  
000017CE                           636  
000017CE                           637  GROUP_7:                           ;$7| Display: DATA, $WXYZ (Unsupported)
000017CE  B03C 0007                638      CMP.B   #$7,D0                 ;Compare first nibble
000017D2  6600 000C                639      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
000017D6  4EB9 00002084            640      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
000017DC  6000 008E                641      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017E0                           642  
000017E0                           643  
000017E0                           644  GROUP_8:                           ;$8| DIVS, OR
000017E0  B03C 0008                645      CMP.B   #$8,D0                 ;Compare first nibble
000017E4  6600 000C                646      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
000017E8  4EB9 000020A4            647      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
000017EE  6000 007C                648      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017F2                           649  
000017F2                           650  
000017F2                           651  GROUP_9:                           ;$9| SUB
000017F2  B03C 0009                652      CMP.B   #$9,D0                 ;Compare first nibble
000017F6  6600 000C                653      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
000017FA  4EB9 00002104            654      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
00001800  6000 006A                655      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001804                           656  
00001804                           657  
00001804                           658  GROUP_A:                           ;$A| Display: DATA, $WXYZ (Unsupported)
00001804  B03C 000A                659      CMP.B   #$A,D0                 ;Compare first nibble
00001808  6600 000C                660      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
0000180C  4EB9 00002176            661      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
00001812  6000 0058                662      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001816                           663  
00001816                           664  
00001816                           665  GROUP_B:                           ;$B| EOR, CMP
00001816  B03C 000B                666      CMP.B   #$B,D0                 ;Compare first nibble
0000181A  6600 000C                667      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
0000181E  4EB9 0000217E            668      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
00001824  6000 0046                669      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001828                           670  
00001828                           671  
00001828                           672  GROUP_C:                           ;$C| MULS
00001828  B03C 000C                673      CMP.B   #$C,D0                 ;Compare first nibble
0000182C  6600 000C                674      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
00001830  4EB9 000021F2            675      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
00001836  6000 0034                676      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000183A                           677  
0000183A                           678  
0000183A                           679  GROUP_D:                           ;$D| ADD, ADDA
0000183A  B03C 000D                680      CMP.B   #$D,D0                 ;Compare first nibble
0000183E  6600 000C                681      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
00001842  4EB9 00002276            682      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
00001848  6000 0022                683      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000184C                           684  
0000184C                           685  
0000184C                           686  GROUP_E:                           ;$E| LSR, LSL, ASR, ASL, ROL, ROR
0000184C  B03C 000E                687      CMP.B   #$E,D0                 ;Compare first nibble
00001850  6600 000C                688      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
00001854  4EB9 000022D6            689      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
0000185A  6000 0010                690      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000185E                           691  
0000185E                           692  
0000185E                           693  GROUP_F:                           ;$F| Display: DATA, $WXYZ (Unsupported)
0000185E  B03C 000F                694      CMP.B   #$F,D0                 ;Compare first nibble
00001862  4EB9 00002486            695      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
00001868  6000 0002                696      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000186C                           697  
0000186C                           698  
0000186C                           699  OP_JSR_DONE:                       ;This subroutine is only called when identification has been finished
0000186C  4CDF 0003                700           MOVEM.L (SP)+,D0-D1       ;Recover register D0
00001870  0C38 0001 10A2           701           CMP.B #1,IS_VALID         ;Checks if the IS_VALID bit is valid or not
00001876  6700 1046                702           BEQ    main_EA            ;This runs EA's routines after OP code portion is finished
0000187A  6600 F946                703           BNE    check_print        ;If not valid, skip EA routine and call IO
0000187E                           704  FIND_2_BIT_SIZE_7_TO_6:         ;Move the 2 bit size field relevant register
0000187E  48E7 C000                705      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
00001882  3038 10A0                706      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
00001886  323C 0008                707      MOVE.W   #8,D1              ;Prepare 8 bit shift to D1
0000188A  E368                     708      LSL.W    D1,D0              ;Truncate to find the 2 size bits
0000188C  E268                     709      LSR.W    D1,D0              ;Reposition the bits
0000188E  323C 0006                710      MOVE.W   #6,D1              ;Prepare 6 bit shift to D1
00001892  E268                     711      LSR.W    D1,D0              ;Truncate to shift 2 bits to a byte
00001894  11C0 1738                712      MOVE.B   D0,OP_SIZE         ;Move 2 size bits into OP_SIZE
00001898  4CDF 0003                713      MOVEM.L (SP)+,D0-D1         ;Restore registers
0000189C  4E75                     714      RTS                         ;Return to stack
0000189E                           715  
0000189E                           716  FIND_1_BIT_SIZE_6:              ;Move the 1 bit size field relevant register
0000189E  48E7 C000                717      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
000018A2  3038 10A0                718      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
000018A6  323C 0009                719      MOVE.W   #9,D1              ;Prepare 9 bit shift to D1
000018AA  E368                     720      LSL.W    D1,D0              ;Truncate to find the size bit
000018AC  E268                     721      LSR.W    D1,D0              ;Reposition the bits
000018AE  323C 0006                722      MOVE.W   #6,D1              ;Prepare 6 bit shift to D1
000018B2  E268                     723      LSR.W    D1,D0              ;Truncate to shift 1 bit to a byte
000018B4  11C0 1738                724      MOVE.B   D0,OP_SIZE         ;Move 1 size bit into OP_SIZE
000018B8  4CDF 0003                725      MOVEM.L (SP)+,D0-D1         ;Restore registers
000018BC  4E75                     726      RTS                         ;Return to stack
000018BE                           727  
000018BE                           728  FIND_1_BIT_SIZE_8:         ;Move the 1 bit size field relevant register
000018BE  48E7 C000                729      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
000018C2  3038 10A0                730      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
000018C6  323C 0007                731      MOVE.W   #7,D1              ;Prepare 7 bit shift to D1
000018CA  E368                     732      LSL.W    D1,D0              ;Truncate to find the 1 size bit
000018CC  E268                     733      LSR.W    D1,D0              ;Reposition the bits
000018CE  323C 0008                734      MOVE.W   #8,D1              ;Prepare 8 bit shift to D1
000018D2  E268                     735      LSR.W    D1,D0              ;Truncate to shift 1 bit to a byte
000018D4  11C0 1738                736      MOVE.B   D0,OP_SIZE         ;Move 1 size bit into OP_SIZE
000018D8  4CDF 0003                737      MOVEM.L (SP)+,D0-D1         ;Restore registers
000018DC  4E75                     738      RTS                         ;Return to stack
000018DE                           739  
000018DE                           740  MOVE_AND_MOVEA_PARSE_EA:     ;Move the 3 bit dynamic register bits to proper register
000018DE  3038 10A0                741      MOVE.W CUR_OP_CODE,D0    ;Move current OP code into D0
000018E2  323C 000A                742      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
000018E6  E368                     743      LSL.W   D1,D0            ;Truncate to find the last 6 bits
000018E8  E268                     744      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
000018EA  3E00                     745      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
000018EC  323C 0003                746      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
000018F0  E26F                     747      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
000018F2  3A07                     748      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
000018F4  323C 000D                749      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
000018F8  E368                     750      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
000018FA  E268                     751      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
000018FC  3800                     752      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
000018FE                           753      
000018FE  3038 10A0                754      MOVE.W CUR_OP_CODE,D0    ;Move current OP code into D0     
00001902  323C 0004                755      MOVE.W  #4,D1            ;Prepare 4 bit shift to D1
00001906  E368                     756      LSL.W   D1,D0            ;Truncate to find bits 11-6
00001908  E268                     757      LSR.W   D1,D0            ;Reposition bits
0000190A  323C 0006                758      MOVE.W  #6,D1            ;Prepare 6 bit shift to D1
0000190E  E268                     759      LSR.W   D1,D0            ;Truncate the SRC Reg/Mode bits
00001910  323C 0003                760      MOVE.W  #3,D1            ;Prepare a 3 bit shift to D1 for DST Reg/Mode
00001914  3C00                     761      MOVE.W  D0,D6            ;Copy over the current 6 bits to D6
00001916  E268                     762      LSR.W   D1,D0            ;Truncate DST Mode  
00001918  3E00                     763      MOVE.W  D0,D7            ;Move DST Reg to D7
0000191A  323C 000D                764      MOVE.W  #13,D1             
0000191E  E36E                     765      LSL.W   D1,D6            ;Truncate 13 bits in D6
00001920  E26E                     766      LSR.W   D1,D6            ;Reposition D6
00001922                           767                               ;D6 now contains the DST Reg
00001922  4E75                     768      RTS                      ;Return to stack
00001924                           769  PARSE_EA_CONSTANT_BITS:
00001924  48E7 C000                770      MOVEM.L D0-D1,-(SP)         ;Save register to stack
00001928                           771      *MNEMONIC SHIFT
00001928  3038 10A0                772      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D0
0000192C  323C 000C                773      MOVE.W #12,D1               ;Prepare a bit shift of 12 into D1
00001930  E268                     774      LSR.W D1,D0                 ;Shift 12 bits from D0 right
00001932  11C0 1739                775      MOVE.B D0,MNEMONIC          ;Set MNEMONIC to D0
00001936                           776      *FIRST_3 SHIFT
00001936  323C 0009                777      MOVE.W #9,D1                ;Prepare a bit shift of 9 into D1
0000193A  3038 10A0                778      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
0000193E  E948                     779      LSL.W #4,D0                 ;Shift out bits 15-12 in D0
00001940  E848                     780      LSR.W #4,D0                 ;Reposition D0
00001942  E268                     781      LSR.W  D1,D0                ;Shift D0 9 bits right
00001944  11C0 173A                782      MOVE.B D0,FIRST_3           ;Set FIRST_3 to D0
00001948                           783      *SECOND_3 SHIFT
00001948  3038 10A0                784      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
0000194C  EF48                     785      LSL.W #7,D0                 ;Shift out bits 15-9 in D0
0000194E  EE48                     786      LSR.W #7,D0                 ;Reposition D0
00001950  EC48                     787      LSR.W #6,D0                 ;Shift D0 6 bits right
00001952  11C0 173B                788      MOVE.B D0,SECOND_3          ;Set SECOND_3 to D0
00001956                           789      *THIRD_3 SHIFT
00001956  3038 10A0                790      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
0000195A  E648                     791      LSR.W #3,D0                 ;Shift D0 3 bits right
0000195C  323C 000D                792      MOVE.W #13,D1               ;Prepare a 13 bit shift into D1
00001960  E368                     793      LSL.W D1,D0                 ;Truncate first 13 bits of D0
00001962  E268                     794      LSR.W D1,D0                 ;Reposition D0
00001964  11C0 173C                795      MOVE.B D0,THIRD_3           ;Set THIRD_3 to D0
00001968                           796      *FOURTH_3 SHIFT
00001968  3038 10A0                797      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
0000196C  E368                     798      LSL.W D1,D0                 ;Grab the fourth 3-bit group
0000196E  E268                     799      LSR.W D1,D0                 ;Shift D0 back into position
00001970  11C0 173D                800      MOVE.B D0,FOURTH_3          ;Set FOURTH_3 to Do
00001974  4CDF 0003                801      MOVEM.L (SP)+,D0-D1         ;Restore registers
00001978  4E75                     802      RTS                         ;Return to stack
0000197A                           803  
0000197A                           804  
0000197A                           805  
0000197A                           806  
0000197A                           807  
0000197A                           808  C_GROUP_0:
0000197A  48E7 C000                809      MOVEM.L D0-D1, -(SP)            ;Backup registers
0000197E                           810      
0000197E                           811  CHECK_OP_ORI_TO_CCR:
0000197E  3038 10A0                812      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001982  B07C 003C                813      CMP.W #$003C,D0                 ;Compare the direct full bits
00001986  6700 01C4                814      BEQ GROUP0_INVALID              ;INVALID OP code found
0000198A  6600 0002                815      BNE CHECK_OP_ORI_TO_SR          ;Check next routine
0000198E                           816      
0000198E                           817  CHECK_OP_ORI_TO_SR:
0000198E  3038 10A0                818      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001992  B07C 007C                819      CMP.W #$007C,D0                 ;Compare the direct full bits
00001996  6700 01B4                820      BEQ GROUP0_INVALID              ;INVALID OP code found
0000199A  6600 0002                821      BNE CHECK_OP_ANDI_TO_CCR        ;Check next routine
0000199E                           822      
0000199E                           823  CHECK_OP_ANDI_TO_CCR:
0000199E  3038 10A0                824      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019A2  B07C 023C                825      CMP.W #$023C,D0                 ;Compare the direct full bits
000019A6  6700 01A4                826      BEQ GROUP0_INVALID              ;INVALID OP code found
000019AA  6600 0002                827      BNE CHECK_OP_ANDI_TO_SR         ;Check next routine
000019AE                           828      
000019AE                           829  CHECK_OP_ANDI_TO_SR:
000019AE  3038 10A0                830      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019B2  B07C 027C                831      CMP.W #$027C,D0                 ;Compare the direct full bits
000019B6  6700 0194                832      BEQ GROUP0_INVALID              ;INVALID OP code found
000019BA  6600 0002                833      BNE CHECK_OP_EORI_TO_CCR                ;Check next routine
000019BE                           834  
000019BE                           835  CHECK_OP_EORI_TO_CCR:
000019BE  3038 10A0                836      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019C2  B07C 0A3C                837      CMP.W #$0A3C,D0                 ;Compare the direct full bits
000019C6  6700 0184                838      BEQ GROUP0_INVALID              ;INVALID OP code found
000019CA  6600 0002                839      BNE CHECK_OP_EORI_TO_SR         ;Check next routine
000019CE                           840      
000019CE                           841  CHECK_OP_EORI_TO_SR:
000019CE  3038 10A0                842      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019D2  B07C 0A7C                843      CMP.W #$0A7C,D0                 ;Compare the direct full bits
000019D6  6700 0174                844      BEQ GROUP0_INVALID              ;INVALID OP code found
000019DA  6600 0002                845      BNE CHECK_OP_ANDI               ;Check next routine
000019DE                           846      
000019DE                           847  CHECK_OP_ANDI:
000019DE  3038 10A0                848      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019E2  0240 FF00                849      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
000019E6  B07C 0200                850      CMP.W #$0200,D0                 ;Compare the appropriate masked bits
000019EA  6700 0160                851      BEQ GROUP0_INVALID              ;INVALID OP code found
000019EE  6600 0002                852      BNE CHECK_OP_SUBI               Check next routine
000019F2                           853      
000019F2                           854  CHECK_OP_SUBI:
000019F2  3038 10A0                855      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019F6  0240 FF00                856      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
000019FA  B07C 0400                857      CMP.W #$0400,D0                 ;Compare the appropriate masked bits
000019FE  6700 014C                858      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A02  6600 0002                859      BNE CHECK_OP_ADDI               ;Check next routine
00001A06                           860  
00001A06                           861  CHECK_OP_ADDI:
00001A06  3038 10A0                862      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A0A  0240 FF00                863      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001A0E  B07C 0600                864      CMP.W #$0600,D0                 ;Compare the appropriate masked bits
00001A12  6700 0138                865      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A16  6600 0002                866      BNE CHECK_OP_EORI               ;Check next routine 
00001A1A                           867  
00001A1A                           868  CHECK_OP_EORI:
00001A1A  3038 10A0                869      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A1E  0240 FF00                870      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001A22  B07C 0A00                871      CMP.W #$0A00,D0                 ;Compare the appropriate masked bits
00001A26  6700 0124                872      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A2A  6600 0002                873      BNE CHECK_OP_STATIC_BTST        ;Check next routine
00001A2E                           874      
00001A2E                           875  CHECK_OP_STATIC_BTST:
00001A2E  3038 10A0                876      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A32  0240 FFC0                877      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001A36  B07C 0800                878      CMP.W #$0800,D0                 ;Compare the appropriate masked bits
00001A3A  6700 0110                879      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A3E  6600 0002                880      BNE CHECK_OP_STATIC_BCHG        ;Check next routine
00001A42                           881      
00001A42                           882  CHECK_OP_STATIC_BCHG:
00001A42  3038 10A0                883      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A46  0240 FFC0                884      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001A4A  B07C 0840                885      CMP.W #$0840,D0                 ;Compare the appropriate masked bits
00001A4E  6700 00FC                886      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A52  6600 0002                887      BNE CHECK_OP_STATIC_BSET        ;Check next routine
00001A56                           888  
00001A56                           889  CHECK_OP_STATIC_BSET:
00001A56  3038 10A0                890      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A5A  0240 FFC0                891      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001A5E  B07C 08C0                892      CMP.W #$08C0,D0                 ;Compare the appropriate masked bits
00001A62  6700 00E8                893      BEQ GROUP0_INVALID              ;INVALID OP code found   
00001A66  6600 0002                894      BNE CHECK_OP_DYNAMIC_BTST       ;Check next routine
00001A6A                           895  
00001A6A                           896  CHECK_OP_DYNAMIC_BTST:
00001A6A  3038 10A0                897      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A6E  0240 F1C0                898      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
00001A72  B07C 0100                899      CMP.W #$0100,D0                 ;Compare the appropriate masked bits
00001A76  6700 00D4                900      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A7A  6600 0002                901      BNE CHECK_OP_DYNAMIC_BCHG       ;Check next routine
00001A7E                           902  
00001A7E                           903  CHECK_OP_DYNAMIC_BCHG:
00001A7E  3038 10A0                904      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A82  0240 F1C0                905      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
00001A86  B07C 0140                906      CMP.W #$0140,D0                 ;Compare the appropriate masked bits 
00001A8A  6700 00C0                907      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A8E  6600 0002                908      BNE CHECK_OP_DYNAMIC_BSET       ;Check next routine
00001A92                           909      
00001A92                           910  CHECK_OP_DYNAMIC_BSET:
00001A92                           911  
00001A92  3038 10A0                912      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001A96  0240 F1C0                913      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
00001A9A  B07C 01C0                914      CMP.W   #$01C0,D0               ;Compare the appropriate masked bits 
00001A9E  6700 0006                915      BEQ     BIT_CHECK_MOVEP         ;Check special case for MOVEP
00001AA2  6600 001C                916      BNE     CHECK_OP_MOVEP          ;Check next routine
00001AA6                           917  
00001AA6                           918  BIT_CHECK_MOVEP:                                ;This is a special case check for MOVEP
00001AA6  3038 10A0                919      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001AAA  323C 000A                920      MOVE.W  #10,D1                  ;Prepare a 10-bit shift
00001AAE  E368                     921      LSL.W   D1,D0                   ;Shift out 10 bits left 
00001AB0  E268                     922      LSR.W   D1,D0                   ;Reposition D0 for last 6 bits
00001AB2  E648                     923      LSR.W   #3,D0                   ;Shift out 3 bits right, D0 contains bits 5-3
00001AB4  B07C 0001                924      CMP.W   #$1,D0                  ;Compare bits to D0
00001AB8  6700 0006                925      BEQ     CHECK_OP_MOVEP          ;If bits are $1 then it's addressing, goto MOVEP
00001ABC  6600 008E                926      BNE     GROUP0_INVALID          ;If not then it's DYNAMIC_BSET which is invalid
00001AC0                           927      
00001AC0                           928  CHECK_OP_MOVEP:
00001AC0  3038 10A0                929      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001AC4  0240 F138                930      ANDI.W #$F138,D0                ;Mask relevant bits to D0
00001AC8  B07C 0108                931      CMP.W #$0108,D0                 ;Compare the appropriate masked bits
00001ACC  6700 09C0                932      BEQ INVALID_OP                  ;INVALID OP code found
00001AD0  6600 0002                933      BNE CHECK_OP_ORI                ;Check next routine
00001AD4                           934  
00001AD4                           935  CHECK_OP_ORI:
00001AD4  3038 10A0                936      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001AD8  0240 FF00                937      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001ADC  B07C 0000                938      CMP.W   #$0000,D0               ;Compare the appropriate masked bits     
00001AE0  6600 0010                939      BNE     CHECK_OP_CMPI           ;Branch to next comparison if not equal
00001AE4  4EB8 187E                940      JSR     FIND_2_BIT_SIZE_7_TO_6
00001AE8  4EB9 000024A4            941      JSR     PRINT_OP_ORI            ;Print the OP code if equal    
00001AEE  6000 0062                942      BRA     GROUP0_SUCCESS          ;Finish routine
00001AF2                           943      
00001AF2                           944  CHECK_OP_CMPI:
00001AF2  3038 10A0                945      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001AF6  0240 FF00                946      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001AFA  B07C 0C00                947      CMP.W   #$0C00,D0               ;Compare the appropriate masked bits   
00001AFE  6600 0010                948      BNE     CHECK_OP_STATIC_BCLR    ;Branch to next comparison if not equal       
00001B02  4EB8 187E                949      JSR     FIND_2_BIT_SIZE_7_TO_6
00001B06  4EB9 000024B8            950      JSR     PRINT_OP_CMPI           ;Print the OP code if equal
00001B0C  6000 0044                951      BRA     GROUP0_SUCCESS          ;Finish routine
00001B10                           952      
00001B10                           953  CHECK_OP_STATIC_BCLR:
00001B10  3038 10A0                954      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001B14  0240 FF00                955      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001B18  B07C 0800                956      CMP.W   #$0800,D0               ;Compare the appropriate masked bits
00001B1C  6600 0010                957      BNE     CHECK_OP_DYNAMIC_BCLR   ;Branch to next comparison if not equal
00001B20  4EB8 187E                958      JSR     FIND_2_BIT_SIZE_7_TO_6
00001B24  4EB9 000024CC            959      JSR     PRINT_OP_STATIC_BCLR    ;Print the OP code if equal
00001B2A  6000 0026                960      BRA     GROUP0_SUCCESS          ;Finish routine
00001B2E                           961      
00001B2E                           962  CHECK_OP_DYNAMIC_BCLR:
00001B2E  3038 10A0                963      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001B32  0240 0180                964      ANDI.W  #$0180,D0               ;Mask relevant bits to D0
00001B36  B07C 0180                965      CMP.W   #$0180,D0               ;Compare the appropriate masked bits
00001B3A  6600 0010                966      BNE     GROUP0_INVALID          ;If not equal this must be an invalid OP code
00001B3E  4EB8 187E                967      JSR     FIND_2_BIT_SIZE_7_TO_6
00001B42  4EB9 000024E0            968      JSR     PRINT_OP_DYNAMIC_BCLR   ;Print the OP code if equal
00001B48  6000 0008                969      BRA     GROUP0_SUCCESS          ;Finish routine
00001B4C                           970  
00001B4C                           971  GROUP0_INVALID:                     ;Checks have been finished, invalid OP code has been found
00001B4C  4EB9 0000248E            972      JSR INVALID_OP                  ;INVALID OP code found
00001B52                           973  GROUP0_SUCCESS:                     ;Checks have been finished,a valid OP code has been found
00001B52  4CDF 0003                974      MOVEM.L (SP)+,D0-D1             ;Restore registers
00001B56  4E75                     975      RTS                             ;Return to stack
00001B58                           976      
00001B58                           977  C_GROUP_1:
00001B58  48E7 C000                978      MOVEM.L D0-D1,-(SP)             ;Save registers to stack
00001B5C                           979  
00001B5C                           980  CHECK_OP_MOVE_B:
00001B5C  3038 10A0                981      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0          
00001B60  0240 F000                982      ANDI.W  #$F000,D0               ;Mask relevant bits to D0
00001B64  B07C 1000                983      CMP.W   #$1000,D0               ;Compare the appropriate masked bits 
00001B68  6600 000C                984      BNE     GROUP1_INVALID          ;Invalid OP code has been found
00001B6C  4EB9 000024F4            985      JSR     PRINT_OP_MOVEB          ;Print the OP code if equal
00001B72  6000 0008                986      BRA     GROUP1_SUCCESS          ;Finish routine
00001B76                           987      
00001B76                           988  GROUP1_INVALID:
00001B76  4EB9 0000248E            989      JSR INVALID_OP                  ;Invalid OP code found
00001B7C                           990  GROUP1_SUCCESS:
00001B7C  4CDF 0003                991      MOVEM.L (SP)+,D0-D1             ;Restore register
00001B80  4E75                     992      RTS                             ;Return to stack
00001B82                           993  C_GROUP_2:
00001B82  48E7 E000                994      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
00001B86                           995  
00001B86                           996  CHECK_OP_MOVEA_L:
00001B86  3038 10A0                997      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0  
00001B8A  0240 F000                998      ANDI.W #$F000,D0                ;Mask relevant bits to D0
00001B8E  B07C 2000                999      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
00001B92  4EF9 00001B98           1000      JMP FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
00001B98                          1001      
00001B98                          1002  FIND_MOVEA_L_DIFFERENCE:            ;Finds difference between MOVEA and MOVE
00001B98  3038 10A0               1003      MOVE.W   CUR_OP_CODE,D0         ;Move current OP code into D0
00001B9C  323C 0007               1004      MOVE.W   #7,D1                  ;Prepare 7 bit shift to D1
00001BA0  E368                    1005      LSL.W    D1,D0                  ;Truncate to find the 3 address mode bits
00001BA2  E268                    1006      LSR.W    D1,D0                  ;Reposition the bits
00001BA4  323C 0006               1007      MOVE.W   #6,D1                  ;Prepare 6 bit shift to D1
00001BA8  E268                    1008      LSR.W    D1,D0                  ;Truncate to shift 3 bits to a register
00001BAA  3400                    1009      MOVE.W   D0,D2                  ;Move 3 address mode bits into D6
00001BAC  B47C 0001               1010      CMP.W   #$1,D2                  ;Check if the address mode value is MOVEA
00001BB0  6600 000C               1011      BNE     CHECK_OP_MOVE_L         ;Branch if not equal to check MOVE
00001BB4  4EB9 00002502           1012      JSR     PRINT_OP_MOVEA_L        ;Print the OP code if it's a match
00001BBA  6000 0022               1013      BRA     GROUP2_SUCCESS          ;Finish routine
00001BBE                          1014      
00001BBE                          1015      
00001BBE                          1016  CHECK_OP_MOVE_L:
00001BBE  3038 10A0               1017      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001BC2  0240 F000               1018      ANDI.W #$F000,D0                ;Mask relevant bits to D0
00001BC6  B07C 2000               1019      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
00001BCA  6600 000C               1020      BNE GROUP2_INVALID              ;If not equal, OP code is invalid
00001BCE  4EB9 00002510           1021      JSR PRINT_OP_MOVE_L             ;Print out MOVE.L
00001BD4  6000 0008               1022      BRA GROUP2_SUCCESS              ;Finish routine
00001BD8                          1023      
00001BD8                          1024  GROUP2_INVALID:    
00001BD8  4EB9 0000248E           1025      JSR INVALID_OP                  ;Invalid OP code found
00001BDE                          1026  GROUP2_SUCCESS:
00001BDE  4CDF 0007               1027      MOVEM.L (SP)+,D0-D2             ;Restore register
00001BE2  4E75                    1028      RTS                             ;Return to stack
00001BE4                          1029  C_GROUP_3:
00001BE4  48E7 E000               1030      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
00001BE8                          1031      
00001BE8                          1032  CHECK_OP_MOVEA_W:
00001BE8  3038 10A0               1033      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001BEC  0240 F000               1034      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00001BF0  B07C 3000               1035      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
00001BF4  4EF9 00001BFA           1036      JMP      FIND_MOVEA_W_DIFF     ;Custom routine to differentiate MOVE and MOVEA
00001BFA                          1037  
00001BFA                          1038      
00001BFA                          1039  FIND_MOVEA_W_DIFF:                 ;Finds difference between MOVEA and MOVE
00001BFA  3038 10A0               1040      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001BFE  323C 0007               1041      MOVE.W   #7,D1                 ;Prepare 7 bit shift to D1
00001C02  E368                    1042      LSL.W    D1,D0                 ;Truncate to find the 3 address mode bits
00001C04  E268                    1043      LSR.W    D1,D0                 ;Reposition the bits
00001C06  323C 0006               1044      MOVE.W   #6,D1                 ;Prepare 6 bit shift to D1
00001C0A  E268                    1045      LSR.W    D1,D0                 ;Truncate to shift 3 bits to a register
00001C0C  3400                    1046      MOVE.W   D0,D2                 ;Move 3 address mode bits into D6
00001C0E  B47C 0001               1047      CMP.W    #$1,D2                ;Check if the address mode value is MOVEA
00001C12  6600 000C               1048      BNE      CHECK_OP_MOVE_W       ;If bits do not match, try MOVE 
00001C16  4EB9 0000251E           1049      JSR      PRINT_OP_MOVEA_W      ;Print the OP code if it's a match
00001C1C  6000 0022               1050      BRA      GROUP3_SUCCESS        ;Finish routine
00001C20                          1051      
00001C20                          1052  CHECK_OP_MOVE_W:
00001C20  3038 10A0               1053      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001C24  0240 F000               1054      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00001C28  B07C 3000               1055      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
00001C2C  6600 000C               1056      BNE      GROUP3_INVALID        ;INVALID OP code found
00001C30  4EB9 0000252C           1057      JSR      PRINT_OP_MOVE_W       ;Print the OP code if it's a match
00001C36  6000 0008               1058      BRA      GROUP3_SUCCESS        ;Finish routine
00001C3A                          1059      
00001C3A                          1060  GROUP3_INVALID:
00001C3A  4EB9 0000248E           1061      JSR INVALID_OP                 ;INVALID OP code found
00001C40                          1062  GROUP3_SUCCESS:
00001C40  4CDF 0007               1063      MOVEM.L (SP)+,D0-D2            ;Restore registers from stack
00001C44  4E75                    1064      RTS                            ;Return to stack
00001C46                          1065  
00001C46                          1066  C_GROUP_4:
00001C46  2F00                    1067      MOVE.L  D0,-(SP)            ;Save registers
00001C48                          1068      
00001C48                          1069  CHECK_OP_STOP:
00001C48  3038 10A0               1070      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001C4C  B07C 4E72               1071      CMP.W  #$4E72,D0                ;Compare the appropriate bits
00001C50  6700 0270               1072      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001C54  6600 0002               1073      BNE    CHECK_OP_RESET           ;Check next OP code
00001C58                          1074      
00001C58                          1075  CHECK_OP_RESET:
00001C58  3038 10A0               1076      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001C5C  B07C 4E70               1077      CMP.W  #$4E70,D0                ;Compare the appropriate bits
00001C60  6700 0260               1078      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001C64  6600 0002               1079      BNE    CHECK_OP_ILLEGAL         ;Check next OP code
00001C68                          1080          
00001C68                          1081  CHECK_OP_ILLEGAL:
00001C68  3038 10A0               1082      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001C6C  B07C 4AFC               1083      CMP.W  #$4AFC,D0                ;Compare the appropriate bits
00001C70  6700 0250               1084      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001C74  6600 0002               1085      BNE    CHECK_OP_RTE             ;Check next OP code
00001C78                          1086      
00001C78                          1087  CHECK_OP_RTE:    
00001C78  3038 10A0               1088      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001C7C  B07C 4E73               1089      CMP.W #$4E73,D0                 ;Compare the appropriate bits
00001C80  6700 0240               1090      BEQ   GROUP4_INVALID            ;INVALID OP code found
00001C84  6600 0002               1091      BNE   CHECK_OP_TRAPV            ;Check next OP code
00001C88                          1092      
00001C88                          1093  CHECK_OP_TRAPV:
00001C88  3038 10A0               1094      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001C8C  B07C 4E76               1095      CMP.W  #$4E76,D0                ;Compare the appropriate bits
00001C90  6700 0230               1096      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001C94  6600 0002               1097      BNE    CHECK_OP_RTR             ;Check next OP code
00001C98                          1098      
00001C98                          1099  CHECK_OP_RTR:
00001C98  3038 10A0               1100      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001C9C  B07C 4E77               1101      CMP.W #$4E77,D0                 ;Compare the appropriate bits
00001CA0  6700 0220               1102      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CA4  6600 0002               1103      BNE    CHECK_OP_MOVE_FROM_SR    ;Check next OP code
00001CA8                          1104  
00001CA8                          1105  
00001CA8                          1106  CHECK_OP_MOVE_FROM_SR:
00001CA8  3038 10A0               1107      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CAC  0240 FFC0               1108      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001CB0  B07C 40C0               1109      CMP.W  #$40C0,D0                ;Compare the appropriate masked bits
00001CB4  6700 020C               1110      BEQ    GROUP4_INVALID           ;INVALID OP code found  
00001CB8  6600 0002               1111      BNE    CHECK_OP_MOVE_TO_CCR     ;Check next OP code
00001CBC                          1112      
00001CBC                          1113  CHECK_OP_MOVE_TO_CCR:
00001CBC  3038 10A0               1114      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CC0  0240 FFC0               1115      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001CC4  B07C 44C0               1116      CMP.W  #$44C0,D0                ;Compare the appropriate masked bits
00001CC8  6700 01F8               1117      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CCC  6600 0002               1118      BNE    CHECK_OP_MOVE_TO_SR      ;Check next OP code
00001CD0                          1119      
00001CD0                          1120  CHECK_OP_MOVE_TO_SR:
00001CD0  3038 10A0               1121      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CD4  0240 FFC0               1122      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001CD8  B07C 46C0               1123      CMP.W  #$46C0,D0                ;Compare the appropriate masked bits
00001CDC  6700 01E4               1124      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CE0  6600 0002               1125      BNE    CHECK_OP_NEGX            ;Check next OP code
00001CE4                          1126      
00001CE4                          1127  CHECK_OP_NEGX:
00001CE4  3038 10A0               1128      MOVE.W CUR_OP_CODE,D0            ;Move current instruction set into D0
00001CE8  0240 FF00               1129      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001CEC  B07C 4000               1130      CMP.W  #$4000,D0                ;Compare the appropriate masked bits
00001CF0  6700 01D0               1131      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CF4  6600 0002               1132      BNE    CHECK_OP_CLR             ;Check next OP code
00001CF8                          1133      
00001CF8                          1134  CHECK_OP_CLR:
00001CF8  3038 10A0               1135      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CFC  0240 FF00               1136      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001D00  B07C 4200               1137      CMP.W  #$4200,D0                ;Compare the appropriate masked bits
00001D04  6700 01BC               1138      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D08  6600 0002               1139      BNE    CHECK_OP_NOT             ;Check next OP code
00001D0C                          1140      
00001D0C                          1141  CHECK_OP_NOT:
00001D0C  3038 10A0               1142      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D10  0240 FF00               1143      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001D14  B07C 4600               1144      CMP.W  #$4600,D0                ;Compare the appropriate masked bits
00001D18  6700 01A8               1145      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D1C  6600 0002               1146      BNE    CHECK_OP_EXT             ;Check next OP code
00001D20                          1147      
00001D20                          1148  CHECK_OP_EXT:
00001D20  3038 10A0               1149      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D24  0240 FF88               1150      ANDI.W #$FF88,D0                ;Mask relevant bits to D0
00001D28  B07C 4880               1151      CMP.W  #$4880,D0                ;Compare the appropriate masked bits
00001D2C  6700 0194               1152      BEQ    GROUP4_INVALID           ;INVALID OP code BIT_CHECK_EXT
00001D30  6600 001C               1153      BNE    CHECK_OP_NBCD            ;Check next OP code
00001D34                          1154  
00001D34                          1155  BIT_CHECK_EXT:    
00001D34  3038 10A0               1156      MOVE.W CUR_OP_CODE,D0           ;This is a special case to check against MOVEM
00001D38  323C 000A               1157      MOVE.W #10,D1                   ;Prepare a 10 bit shift into D1
00001D3C  E368                    1158      LSL.W  D1,D0                    ;Shift D0 left 10 bits
00001D3E  E068                    1159      LSR.W  D0,D0                    ;Reposition D0
00001D40  E648                    1160      LSR.W  #3,D0                    ;Shift D0 3 bits
00001D42  B078 0000               1161      CMP.W  %000,D0                  ;Check the specific bits needed to differentiate EXT
00001D46  6700 017A               1162      BEQ    GROUP4_INVALID           ;This means that this OP code is EXT
00001D4A  6600 015C               1163      BNE    CHECK_OP_MOVEM           ;This is the only other possibility 
00001D4E                          1164      
00001D4E                          1165  CHECK_OP_NBCD:
00001D4E  3038 10A0               1166      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D52  0240 FFC0               1167      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0           
00001D56  B07C 4800               1168      CMP.W  #$4800,D0                ;Compare the appropriate masked bits
00001D5A  6700 0166               1169      BEQ    GROUP4_INVALID           ;INVALID OP code
00001D5E  6600 0002               1170      BNE    CHECK_OP_SWAP            ;Check next OP code
00001D62                          1171      
00001D62                          1172  CHECK_OP_SWAP:                      ; This must go before CHECK_OP PEA as first 3 nibbles can be equivalent
00001D62  3038 10A0               1173      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D66  0240 FF48               1174      ANDI.W #$FF48,D0                ;Mask relevant bits to D0
00001D6A  B07C 4840               1175      CMP.W  #$4840,D0                ;Compare the appropriate masked bits
00001D6E  6700 0152               1176      BEQ    GROUP4_INVALID           ;INVALID OP code
00001D72  6600 0002               1177      BNE    CHECK_OP_PEA             ;Check next OP code
00001D76                          1178   
00001D76                          1179  CHECK_OP_PEA:                       ;This must go after CHECK_OP_SWAP as first 3 nibbles can be equivalent
00001D76  3038 10A0               1180      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D7A  0240 FF40               1181      ANDI.W #$FF40,D0                ;Mask relevant bits to D0
00001D7E  B07C 4840               1182      CMP.W  #$4840,D0                ;Compare the appropriate masked bits
00001D82  6700 013E               1183      BEQ    GROUP4_INVALID           ;INVALID OP code
00001D86  6600 0002               1184      BNE    CHECK_OP_TAS             ;Check next OP code
00001D8A                          1185      
00001D8A                          1186  CHECK_OP_TAS:
00001D8A  3038 10A0               1187      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D8E  0240 FFC0               1188      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001D92  B07C 4AC0               1189      CMP.W  #$4AC0,D0                ;Compare the appropriate masked bits
00001D96  6700 012A               1190      BEQ    GROUP4_INVALID           ;INVALID OP code
00001D9A  6600 0002               1191      BNE    CHECK_OP_TST             ;Check next OP code
00001D9E                          1192  
00001D9E                          1193  CHECK_OP_TST:                       ;This must go after CHECK_OP_TAS as first 2 nibbles are equivalent
00001D9E  3038 10A0               1194      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DA2  0240 FF00               1195      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001DA6  B07C 4A00               1196      CMP.W  #$4A00,D0                ;Compare the appropriate masked bits
00001DAA  6700 0116               1197      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DAE  6600 0002               1198      BNE    CHECK_OP_TRAP            ;Check next OP code
00001DB2                          1199      
00001DB2                          1200  CHECK_OP_TRAP:
00001DB2  3038 10A0               1201      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DB6  0240 FFF0               1202      ANDI.W #$FFF0,D0                ;Mask relevant bits to D0
00001DBA  B07C 4E40               1203      CMP.W  #$4E40,D0                ;Compare the appropriate masked bits
00001DBE  6700 0102               1204      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DC2  6600 0002               1205      BNE    CHECK_OP_LINK            ;Check next OP code
00001DC6                          1206      
00001DC6                          1207  CHECK_OP_LINK:
00001DC6  3038 10A0               1208      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DCA  0240 FFF8               1209      ANDI.W #$FFF8,D0                ;Mask relevant bits to D0
00001DCE  B07C 4E50               1210      CMP.W  #$4E50,D0                ;Compare the appropriate masked bits
00001DD2  6700 00EE               1211      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DD6  6600 0002               1212      BNE    CHECK_OP_UNLK            ;Check next OP code
00001DDA                          1213  
00001DDA                          1214  CHECK_OP_UNLK:
00001DDA  3038 10A0               1215      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DDE  0240 FFF8               1216      ANDI.W #$FFF8,D0                ;Mask relevant bits to D0
00001DE2  B07C 4E58               1217      CMP.W  #$4E58,D0                ;Compare the appropriate masked bits
00001DE6  6700 00DA               1218      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DEA  6600 0002               1219      BNE    CHECK_OP_MOVE_USP        ;Check next OP
00001DEE                          1220      
00001DEE                          1221  CHECK_OP_MOVE_USP:
00001DEE  3038 10A0               1222      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DF2  0240 FFF0               1223      ANDI.W #$FFF0,D0                ;Mask relevant bits to D0
00001DF6  B07C 4E60               1224      CMP.W  #$4E60,D0                ;Compare the appropriate masked bits
00001DFA  6700 00C6               1225      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DFE  6600 0002               1226      BNE    CHECK_OP_JMP             ;Check next OP
00001E02                          1227  
00001E02                          1228  CHECK_OP_JMP:
00001E02  3038 10A0               1229       MOVE.W CUR_OP_CODE,D0          ;Move current instruction set into D0
00001E06  0240 FFC0               1230       ANDI.W #$FFC0,D0               ;Mask relevant bits to D0
00001E0A  B07C 4EC0               1231       CMP.W  #$4EC0,D0               ;Compare the appropriate masked bits
00001E0E  6700 00B2               1232       BEQ    GROUP4_INVALID          ;INVALID OP code
00001E12  6600 0002               1233       BNE    CHECK_OP_CHK            ;Check next OP code
00001E16                          1234       
00001E16                          1235  CHECK_OP_CHK:
00001E16  3038 10A0               1236      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001E1A  0240 F1C0               1237      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
00001E1E  B07C 4180               1238      CMP.W   #$4180,D0               ;Compare the appropriate masked bits
00001E22  6700 066A               1239      BEQ     INVALID_OP              ;INVALID OP code
00001E26  6600 0002               1240      BNE     CHECK_OP_NOP            ;Check next OP code
00001E2A                          1241  
00001E2A                          1242  CHECK_OP_NOP:                       ;While this code is not in the supported docs, Nash covered it in class and expects it to be implemented
00001E2A  3038 10A0               1243      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E2E  B07C 4E71               1244      CMP.W  #$4E71,D0                ;Compare the appropriate bits
00001E32  6600 000C               1245      BNE    CHECK_OP_RTS             ;Check next OP code
00001E36  4EB9 00002556           1246      JSR    PRINT_OP_NOP             ;Print out OP code
00001E3C  6000 0090               1247      BRA    GROUP4_SUCCESS           ;Finish routine
00001E40                          1248      
00001E40                          1249  CHECK_OP_RTS:
00001E40  3038 10A0               1250      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E44  B07C 4E75               1251      CMP.W  #$4E75,D0                ;Mask exact bits for RTS    
00001E48  6600 000C               1252      BNE    CHECK_OP_LEA             ;If it's equal check next code
00001E4C  4EB9 00002548           1253      JSR    PRINT_OP_RTS             ;Print out OP code
00001E52  6000 007A               1254      BRA    GROUP4_SUCCESS           ;Finish routine
00001E56                          1255   
00001E56                          1256  CHECK_OP_LEA:
00001E56  3038 10A0               1257      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E5A  0240 F1C0               1258      ANDI.W #$F1C0,D0                ;Mask appropriate bits
00001E5E  B07C 41C0               1259      CMP.W  #$41C0,D0                ;Compare masked bits
00001E62  6600 000C               1260      BNE    CHECK_OP_JSR             ;Check next OP code
00001E66  4EB9 00002564           1261      JSR    PRINT_OP_LEA             ;Print out OP code
00001E6C  6000 0060               1262      BRA    GROUP4_SUCCESS           ;Finish routine
00001E70                          1263   
00001E70                          1264  CHECK_OP_JSR:
00001E70  3038 10A0               1265      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E74  0240 FFC0               1266      ANDI.W #$FFC0,D0                ;Mask appropriate bits
00001E78  B07C 4E80               1267      CMP.W  #$4E80,D0                ;Compare masked bits
00001E7C  6600 000C               1268      BNE    CHECK_OP_NEG             ;Check next OP code
00001E80  4EB9 0000253A           1269      JSR    PRINT_OP_JSR             ;Print out OP code
00001E86  6000 0046               1270      BRA    GROUP4_SUCCESS           ;Finish routine
00001E8A                          1271      
00001E8A                          1272  CHECK_OP_NEG:
00001E8A  3038 10A0               1273      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E8E  0240 FF00               1274      ANDI.W #$FF00,D0                ;Mask appropriate bits
00001E92  B07C 4400               1275      CMP.W  #$4400,D0                ;Compare masked bits
00001E96  6600 0010               1276      BNE    CHECK_OP_MOVEM           ;Check next OP code
00001E9A  4EB8 187E               1277      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Find size field
00001E9E  4EB9 00002578           1278      JSR    PRINT_OP_NEG             ;Print out OP code
00001EA4  6000 0028               1279      BRA    GROUP4_SUCCESS           ;Finish routine
00001EA8                          1280      
00001EA8                          1281  CHECK_OP_MOVEM:
00001EA8  3038 10A0               1282      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001EAC  0240 FB80               1283      ANDI.W #$FB80,D0                ;Mask appropriate bits
00001EB0  B07C 4880               1284      CMP.W  #$4880,D0                ;Compare masked bits
00001EB4  6600 05D8               1285      BNE    INVALID_OP               ;If no code is found, it is invalid
00001EB8  4EB9 0000258C           1286      JSR    PRINT_OP_MOVEM_W         ;Print out OP code
00001EBE  6000 000E               1287      BRA    GROUP4_SUCCESS           ;Finish routine
00001EC2                          1288      
00001EC2                          1289  GROUP4_INVALID:
00001EC2  4EB9 0000248E           1290      JSR INVALID_OP                  ;INVALID op code has been found, set IS_VALID to 0
00001EC8  4EF9 00001ECE           1291      JMP GROUP4_SUCCESS 
00001ECE                          1292  GROUP4_SUCCESS:
00001ECE  4CDF 0001               1293      MOVEM.L (SP)+,D0                ;Restore saved registers
00001ED2  4E75                    1294      RTS                             ;Return to stack
00001ED4                          1295  C_GROUP_5:
00001ED4  48E7 8000               1296      MOVEM.L D0,-(SP)                ;Save registers to stack
00001ED8                          1297  CHECK_OP_DBcc:                      ;These are ordered first due to checking bits 7-6
00001ED8  3038 10A0               1298      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001EDC  0240 F0C8               1299      ANDI.W #$F0C8,D0                ;Mask appropriate bits
00001EE0  B07C 50C8               1300      CMP.W  #$50C8,D0                ;Compare appropriate masked bits
00001EE4  6700 004C               1301      BEQ    GROUP5_INVALID           ;INVALID op code found
00001EE8  6600 0002               1302      BNE    CHECK_OP_Scc             ;Check next OP code
00001EEC                          1303  
00001EEC                          1304  CHECK_OP_Scc:
00001EEC  3038 10A0               1305      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001EF0  0240 F0C0               1306      ANDI.W #$F0C0,D0                ;Mask appropriate bits
00001EF4  B07C 50C0               1307      CMP.W  #$50C0,D0                ;Compare appropriate masked bits
00001EF8  6700 0038               1308      BEQ     GROUP5_INVALID          ;INVALID OP code found
00001EFC  6600 0002               1309      BNE     CHECK_OP_ADDQ           ;Check next OP code
00001F00                          1310  
00001F00                          1311  CHECK_OP_ADDQ:
00001F00  3038 10A0               1312      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001F04  0240 F100               1313      ANDI.W #$F100,D0                ;Mask appropriate bits
00001F08  B07C 5000               1314      CMP.W  #$5000,D0                ;Compare appropriate masked bits
00001F0C  6700 0024               1315      BEQ    GROUP5_INVALID           ;INVALID OP code found
00001F10  6600 0002               1316      BNE    CHECK_OP_SUBQ            ;Check next OP code
00001F14                          1317  
00001F14                          1318  CHECK_OP_SUBQ     
00001F14  3038 10A0               1319      MOVE.W  CUR_OP_CODE,D0          ;Actual check for SUBQ
00001F18  0240 F100               1320      ANDI.W #$F100,D0                ;Bitmask check for SUBQ
00001F1C  B07C 5100               1321      CMP.W  #$5100,D0                ;Compare the proper value
00001F20  6600 0010               1322      BNE    GROUP5_INVALID           ;Else the operand is invalid
00001F24  4EB8 187E               1323      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Find size bit to print
00001F28  4EB9 000025A8           1324      JSR    PRINT_OP_SUBQ            ;If equal print it out
00001F2E  6000 0008               1325      BRA    GROUP5_SUCCESS           ;Finish routine
00001F32                          1326      
00001F32                          1327  GROUP5_INVALID: 
00001F32  4EB9 0000248E           1328      JSR INVALID_OP                  ;INVALID OP has been found, set IS_VALID to 0
00001F38                          1329  GROUP5_SUCCESS:
00001F38  4CDF 0001               1330      MOVEM.L (SP)+,D0                ;Restore registers from stack
00001F3C  4E75                    1331      RTS                             ;Return to stack
00001F3E                          1332      
00001F3E                          1333  C_GROUP_6:
00001F3E  48E7 8000               1334      MOVEM.L D0,-(SP)            ;Save register to stack
00001F42                          1335  CHECK_OP_BSR:
00001F42  3038 10A0               1336      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set to D0
00001F46  0240 FF00               1337      ANDI.W  #$FF00,D0               ;Mask appropriate bits
00001F4A  B07C 6100               1338      CMP.W   #$6100,D0               ;Compare masked bits
00001F4E  6700 0128               1339      BEQ     GROUP6_INVALID          ;INVALID OP code found
00001F52  6600 0002               1340      BNE     CHECK_OP_BGT            ;Check next OP code
00001F56                          1341      
00001F56                          1342  CHECK_OP_BGT:
00001F56  3038 10A0               1343      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001F5A  0240 FF00               1344      ANDI.W #$FF00,D0                ;Mask appropriate bits
00001F5E  B07C 6E00               1345      CMP.W  #$6E00,D0                ;Compare masked bits
00001F62  6700 0114               1346      BEQ    GROUP6_INVALID           ;INVALID OP code found
00001F66  6600 0002               1347      BNE    CHECK_OP_BCC             ;Check next OP code
00001F6A                          1348  
00001F6A                          1349  CHECK_OP_BCC:
00001F6A  3038 10A0               1350      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001F6E  0240 FF00               1351      ANDI.W #$FF00,D0                ;Mask appropriate bits
00001F72  B07C 6400               1352      CMP.W  #$6400,D0                ;Compare masked bits
00001F76  6700 0100               1353      BEQ    GROUP6_INVALID           ;INVALID OP code found
00001F7A  6600 0002               1354      BNE    CHECK_OP_BEQ             ;Check next OP code 
00001F7E                          1355  
00001F7E                          1356  CHECK_OP_BEQ:
00001F7E  3038 10A0               1357      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001F82  0240 FF00               1358      ANDI.W #$FF00,D0                ;Mask appropriate bits
00001F86  B07C 6700               1359      CMP.W  #$6700,D0                ;Compare masked bits
00001F8A  6700 00EC               1360      BEQ    GROUP6_INVALID           ;INVALID OP code found
00001F8E  6600 0002               1361      BNE    CHECK_OP_BHI             ;Check next OP code
00001F92                          1362  
00001F92                          1363  CHECK_OP_BHI:
00001F92  3038 10A0               1364      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001F96  0240 FF00               1365      ANDI.W #$FF00,D0                ;Mask appropriate bits
00001F9A  B07C 6200               1366      CMP.W  #$6200,D0                ;Compare masked bits
00001F9E  6700 00D8               1367      BEQ    GROUP6_INVALID           ;INVALID OP code found
00001FA2  6600 0002               1368      BNE    CHECK_OP_BLS             ;Check next OP code
00001FA6                          1369  
00001FA6                          1370  CHECK_OP_BLS:
00001FA6  3038 10A0               1371      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001FAA  0240 FF00               1372      ANDI.W #$FF00,D0                ;Mask appropriate bits
00001FAE  B07C 6300               1373      CMP.W  #$6300,D0                ;Compare masked bits
00001FB2  6700 00C4               1374      BEQ    GROUP6_INVALID           ;INVALID OP code found
00001FB6  6600 0002               1375      BNE    CHECK_OP_BMI             ;Check next OP code
00001FBA                          1376  
00001FBA                          1377  CHECK_OP_BMI:
00001FBA  3038 10A0               1378      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001FBE  0240 FF00               1379      ANDI.W #$FF00,D0                ;Mask appropriate bits
00001FC2  B07C 6B00               1380      CMP.W  #$6B00,D0                ;Compare masked bits
00001FC6  6700 00B0               1381      BEQ    GROUP6_INVALID           ;INVALID OP code found
00001FCA  6600 0002               1382      BNE    CHECK_OP_BNE             ;Check next OP code
00001FCE                          1383  
00001FCE                          1384  CHECK_OP_BNE:
00001FCE  3038 10A0               1385      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001FD2  0240 FF00               1386      ANDI.W #$FF00,D0                ;Mask appropriate bits
00001FD6  B07C 6600               1387      CMP.W  #$6600,D0                ;Compare masked bits
00001FDA  6700 009C               1388      BEQ    GROUP6_INVALID           ;INVALID OP code found
00001FDE  6600 0002               1389      BNE    CHECK_OP_BPL             ;Check next OP code    
00001FE2                          1390  
00001FE2                          1391  CHECK_OP_BPL:
00001FE2  3038 10A0               1392      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001FE6  0240 FF00               1393      ANDI.W #$FF00,D0                ;Mask appropriate bits
00001FEA  B07C 6A00               1394      CMP.W  #$6A00,D0                ;Compare masked bits
00001FEE  6700 0088               1395      BEQ    GROUP6_INVALID           ;INVALID OP code found
00001FF2  6600 0002               1396      BNE    CHECK_OP_BRA             ;Check next OP code 
00001FF6                          1397  
00001FF6                          1398  
00001FF6                          1399  CHECK_OP_BRA:
00001FF6  3038 10A0               1400      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0       
00001FFA  0240 FF00               1401      ANDI.W  #$FF00,D0               ;Mask appropriate bits
00001FFE  B07C 6000               1402      CMP.W   #$6000,D0               ;Compare masked bits
00002002  6600 000C               1403      BNE     CHECK_OP_BCS            ;Check next OP code
00002006  4EB9 0000260C           1404      JSR     PRINT_OP_BRA            ;Print out OP code
0000200C  6000 0070               1405      BRA     GROUP6_SUCCESS          ;Finish routine
00002010                          1406      
00002010                          1407  CHECK_OP_BCS:
00002010  3038 10A0               1408      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00002014  0240 FF00               1409      ANDI.W #$FF00,D0                ;Mask appropriate bits
00002018  B07C 6500               1410      CMP.W  #$6500,D0                ;Compare masked bits
0000201C  6600 000C               1411      BNE    CHECK_OP_BGE             ;Check next OP code
00002020  4EB9 000025BC           1412      JSR    PRINT_OP_BCS             ;Print out OP code
00002026  6000 0056               1413      BRA    GROUP6_SUCCESS           ;Finish routine
0000202A                          1414  
0000202A                          1415      
0000202A                          1416  CHECK_OP_BGE:
0000202A  3038 10A0               1417      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000202E  0240 FF00               1418      ANDI.W #$FF00,D0                ;Mask appropriate bits
00002032  B07C 6C00               1419      CMP.W  #$6C00,D0                ;Compare masked bits
00002036  6600 000C               1420      BNE    CHECK_OP_BLT             ;Check next OP code
0000203A  4EB9 000025D0           1421      JSR    PRINT_OP_BGE             ;Print out OP code
00002040  6000 003C               1422      BRA    GROUP6_SUCCESS           ;Finish routine
00002044                          1423      
00002044                          1424      
00002044                          1425  CHECK_OP_BLT:
00002044  3038 10A0               1426      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00002048  0240 FF00               1427      ANDI.W #$FF00,D0                ;Mask appropriate bits
0000204C  B07C 6D00               1428      CMP.W  #$6D00,D0                ;Compare masked bits
00002050  6600 000C               1429      BNE    CHECK_OP_BVC             ;Check next OP code
00002054  4EB9 000025E4           1430      JSR    PRINT_OP_BLT             ;Print out OP code
0000205A  6000 0022               1431      BRA    GROUP6_SUCCESS           ;Finish routine
0000205E                          1432      
0000205E                          1433  CHECK_OP_BVC:
0000205E  3038 10A0               1434      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00002062  0240 FF00               1435      ANDI.W #$FF00,D0                ;Mask appropriate bits
00002066  B07C 6800               1436      CMP.W  #$6800,D0                ;Compare masked bits
0000206A  6600 000C               1437      BNE    GROUP6_INVALID           ;Check next OP code
0000206E  4EB9 000025F8           1438      JSR    PRINT_OP_BVC             ;Print out OP code
00002074  6000 0008               1439      BRA    GROUP6_SUCCESS           ;Finish routine
00002078                          1440      
00002078                          1441  GROUP6_INVALID:
00002078  4EB9 0000248E           1442      JSR    INVALID_OP               ;INVALID OP code found, set IS_VALID to 0
0000207E                          1443  GROUP6_SUCCESS:
0000207E  4CDF 0001               1444      MOVEM.L (SP)+,D0                ;Restore registers from stack
00002082  4E75                    1445      RTS                             ;Return from stack
00002084                          1446      
00002084                          1447  C_GROUP_7:
00002084  48E7 8000               1448      MOVEM.L D0,-(SP)                ;Save register to stack
00002088                          1449  CHECK_OP_MOVEQ
00002088  3038 10A0               1450      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set to D0
0000208C  0240 F100               1451      ANDI.W  #$F100,D0               ;Mask appropriate bits
00002090  B07C 7000               1452      CMP.W   #$7000,D0               ;Compare masked bits
00002094  6000 0002               1453      BRA     GROUP7_INVALID          ;INVALID OP code found
00002098                          1454  
00002098                          1455  GROUP7_INVALID:
00002098  4EB9 0000248E           1456      JSR     INVALID_OP              ;INVALID OP code found, set IS_VALID to 0
0000209E                          1457  GROUP7_SUCCESS:    
0000209E  4CDF 0001               1458      MOVEM.L (SP)+,D0                ;Restore registers from stack
000020A2  4E75                    1459      RTS                             ;Return from stack
000020A4                          1460  C_GROUP_8:
000020A4  48E7 8000               1461      MOVEM.L D0,-(SP)
000020A8                          1462  CHECK_OP_DIVU:
000020A8  3038 10A0               1463      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000020AC  0240 F1C0               1464      ANDI.W  #$F1C0,D0               ;Mask appropriate bits
000020B0  B07C 80C0               1465      CMP.W   #$80C0,D0               ;Compare masked bits
000020B4  6700 0042               1466      BEQ     GROUP8_INVALID          ;INVALID OP code found
000020B8  6600 0002               1467      BNE     CHECK_OP_SBCD           ;Check next OP code
000020BC                          1468  
000020BC                          1469  CHECK_OP_SBCD:
000020BC  3038 10A0               1470      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000020C0  0240 F1F0               1471      ANDI.W  #$F1F0,D0               ;Mask appropriate bits
000020C4  B07C 8100               1472      CMP.W   #$8100,D0               ;Compare masked bits
000020C8  6700 002E               1473      BEQ     GROUP8_INVALID          ;INVALID OP code found
000020CC  6600 0002               1474      BNE     CHECK_OP_DIVS           ;Check next OP code
000020D0                          1475      
000020D0                          1476  CHECK_OP_DIVS:
000020D0  3038 10A0               1477      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000020D4  0240 F1C0               1478      ANDI.W  #$F1C0,D0               ;Mask appropriate bits
000020D8  B07C 81C0               1479      CMP.W   #$81C0,D0               ;Compare masked bits
000020DC  6600 000C               1480      BNE     CHECK_OP_OR             ;Check next OP code
000020E0  4EB9 00002620           1481      JSR     PRINT_OP_DIVS           ;OP Code found
000020E6  6000 0016               1482      BRA     GROUP8_SUCCESS          ;Finish routine
000020EA                          1483      
000020EA                          1484  CHECK_OP_OR:                        ;At this point only remaining $8 code is OR
000020EA  4EB8 187E               1485      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Finding size bit to print out
000020EE  4EB9 0000262E           1486      JSR     PRINT_OP_OR             ;Print out OR
000020F4  6000 0008               1487      BRA     GROUP8_SUCCESS          ;Finish routine
000020F8                          1488  GROUP8_INVALID:
000020F8  4EB9 0000248E           1489       JSR     INVALID_OP             ;INVALID OP code found, set IS_VALID to 0
000020FE                          1490  GROUP8_SUCCESS:
000020FE  4CDF 0001               1491       MOVEM.L (SP)+,D0               ;Restore register from stack
00002102  4E75                    1492       RTS                            ;Return to stack
00002104                          1493       
00002104                          1494  C_GROUP_9:
00002104  48E7 C000               1495      MOVEM.L D0-D1,-(SP)             ;Save the registers
00002108                          1496  CHECK_SIZE_BIT_FOR_SUB:
00002108  4EB8 187E               1497      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Find the size bits in 7-6
0000210C  0C38 0003 1738          1498      CMP.B   #%11,OP_SIZE            ;If the bits are %11, it has to be SUBA
00002112  6700 0006               1499      BEQ     CHECK_OP_SUBA           ;If the bits equal it must be SUBA
00002116  6600 0016               1500      BNE     CHECK_OP_SUBX           ;If the bits are not equal it could be SUBX
0000211A                          1501      
0000211A                          1502  CHECK_OP_SUBA:                      ;Check SUBA first as it has static bits
0000211A  3038 10A0               1503      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000211E  0240 F0C0               1504      ANDI.W  #$F0C0,D0               ;Mask appropriate bits
00002122  B07C 90C0               1505      CMP.W   #$90C0,D0               ;Compare masked bits
00002126  6700 0042               1506      BEQ     GROUP9_INVALID          ;INVALID OP has been found
0000212A  6600 0002               1507      BNE     CHECK_OP_SUBX           ;Check next OP
0000212E                          1508  
0000212E                          1509  CHECK_OP_SUBX:
0000212E  3038 10A0               1510      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00002132  0240 F130               1511      ANDI.W  #$F130,D0               ;Mask appropriate bits
00002136  B07C 9100               1512      CMP.W   #$9100,D0               ;Compare masked bits
0000213A  6000 0002               1513      BRA     BIT_CHECK_SUBX          ;Checking if this code is SUBX through bit shifts
0000213E                          1514      
0000213E                          1515  BIT_CHECK_SUBX:    
0000213E  3038 10A0               1516      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00002142  323C 0007               1517      MOVE.W  #7,D1                   ;Prepare a shift of 7 bits into D1
00002146  E368                    1518      LSL.W   D1,D0                   ;Shift left 7 bits truncate 15-9 bits
00002148  E268                    1519      LSR.W   D1,D0                   ;Reposition D0
0000214A  E848                    1520      LSR.W   #4,D0                   ;Truncate 4 right most bits to
0000214C  0240 FF13               1521      ANDI.W  #$FF13,D0               ;Compare remaining static bits
00002150  B07C 0010               1522      CMP.W   #$0010,D0               ;If equal to this value it's SUBX
00002154  6700 0014               1523      BEQ     GROUP9_INVALID          ;INVALID OP code found
00002158  6600 0002               1524      BNE     CHECK_OP_SUB            ;Not can only be SUB here
0000215C                          1525      
0000215C                          1526  CHECK_OP_SUB:                       ;At this point only remaining $9 is SUB
0000215C  4EB8 187E               1527      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Find the size bit to print out
00002160  4EB9 00002642           1528      JSR     PRINT_OP_SUB            ;Print out SUB
00002166  6000 0008               1529      BRA     GROUP9_SUCCESS          ;Finish routine
0000216A                          1530      
0000216A                          1531  GROUP9_INVALID:
0000216A  4EB9 0000248E           1532       JSR     INVALID_OP             ;INVALID OP code found, set IS_VALID to 0
00002170                          1533  GROUP9_SUCCESS: 
00002170  4CDF 0003               1534      MOVEM.L (SP)+,D0-D1             ;Restore registers
00002174  4E75                    1535      RTS                             ;Return to stack
00002176                          1536  
00002176                          1537  C_GROUP_A:
00002176  4EB9 0000248E           1538      JSR INVALID_OP                  ;INVALID OP code found, set IS_VALID to 0
0000217C  4E75                    1539      RTS                             ;Return to stack
0000217E                          1540      
0000217E                          1541  C_GROUP_B:
0000217E  48E7 8000               1542      MOVEM.L D0,-(SP)                ;Save current registers to stack
00002182                          1543  CHECK_OP_CMPM
00002182  3038 10A0               1544      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00002186  0240 F138               1545      ANDI.W  #$F138,D0               ;Mask appropriate bits
0000218A  B07C B108               1546      CMP.W   #$B108,D0               ;Compare masked bits
0000218E  6700 0056               1547      BEQ     GROUPB_INVALID          ;INVALID OP found
00002192  6600 0002               1548      BNE     CHECK_OP_CMPA           ;Check next OP
00002196                          1549      
00002196                          1550  CHECK_OP_CMPA:
00002196  3038 10A0               1551      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000219A  0240 F0C0               1552      ANDI.W  #$F0C0,D0               ;Mask appropriate bits
0000219E  B07C B0C0               1553      CMP.W   #$B0C0,D0               ;Compare masked bits
000021A2  6700 0042               1554      BEQ     GROUPB_INVALID          ;INVALID OP found
000021A6  6600 0002               1555      BNE     CHECK_OP_EOR            ;Check next OP
000021AA                          1556  
000021AA                          1557  CHECK_OP_EOR:
000021AA  3038 10A0               1558      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000021AE  0240 F100               1559      ANDI.W  #$F100,D0               ;Mask appropriate bits
000021B2  B07C B100               1560      CMP.W   #$B100,D0               ;Compare masked bits
000021B6  6600 0010               1561      BNE     CHECK_OP_CMP            ;Check next OP 
000021BA  4EB8 187E               1562      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Find size bit field to print out size
000021BE  4EB9 00002656           1563      JSR     PRINT_OP_EOR            ;Print out OP code
000021C4  6000 0026               1564      BRA     GROUPB_SUCCESS          ;Finish routine
000021C8                          1565      
000021C8                          1566  CHECK_OP_CMP:
000021C8  3038 10A0               1567      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000021CC  0240 F100               1568      ANDI.W  #$F100,D0               ;Mask appropriate bits
000021D0  B07C B000               1569      CMP.W   #$B000,D0               ;Compare masked bits
000021D4  6600 0010               1570      BNE     GROUPB_INVALID          ;INVALID OP code found
000021D8  4EB8 187E               1571      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Find size bit field to print out size
000021DC  4EB9 0000266A           1572      JSR     PRINT_OP_CMP            ;Print out OP code
000021E2  6000 0008               1573      BRA     GROUPB_SUCCESS          ;Finish routine
000021E6                          1574      
000021E6                          1575  GROUPB_INVALID:
000021E6  4EB9 0000248E           1576      JSR     INVALID_OP              ;INVALID OP has been found, set IS_VALID to 0
000021EC                          1577  GROUPB_SUCCESS:
000021EC  4CDF 0001               1578      MOVEM.L (SP)+,D0                ;Restore registers from stack
000021F0  4E75                    1579      RTS                             ;Return to stack
000021F2                          1580  C_GROUP_C:
000021F2  48E7 C000               1581      MOVEM.L D0-D1,-(SP)
000021F6                          1582      
000021F6                          1583  CHECK_OP_MULU:
000021F6  3038 10A0               1584      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000021FA  0240 F1C0               1585      ANDI.W  #$F1C0,D0               ;Mask appropriate bits
000021FE  B07C C0C0               1586      CMP.W   #$C0C0,D0               ;Compare masked bits
00002202  6700 0066               1587      BEQ     GROUPC_INVALID          ;INVALID OP code found
00002206  6600 0002               1588      BNE     CHECK_OP_ABCD           ;Check next OP code
0000220A                          1589   
0000220A                          1590  CHECK_OP_ABCD:
0000220A  3038 10A0               1591      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000220E  0240 F1F0               1592      ANDI.W  #$F1F0,D0               ;Mask appropriate bits
00002212  B07C C100               1593      CMP.W   #$C100,D0               ;Compare masked bits
00002216  6700 0052               1594      BEQ     GROUPC_INVALID          ;INVALID OP code found
0000221A  6600 0002               1595      BNE     CHECK_OP_EXG            ;Check next OP code
0000221E                          1596   
0000221E                          1597  CHECK_OP_EXG:
0000221E  6000 0002               1598      BRA     BIT_CHECK_EXG           ;Always do bit check here
00002222                          1599                          
00002222                          1600  BIT_CHECK_EXG:                      ;Checks the OP mode bits 7-6 which cannot be 11 for EXG
00002222  3038 10A0               1601      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00002226  323C 0007               1602      MOVE.W  #7,D1                   ;Prepare a bit shift of 7 into D1
0000222A  E368                    1603      LSL.W   D1,D0                   ;Shift D0 to 7 bits
0000222C  E268                    1604      LSR.W   D1,D0                   ;Reposition D0
0000222E  E848                    1605      LSR.W   #4,D0                   ;Shift D0 4 bits right
00002230  0240 FF83               1606      ANDI.W  #$FF83,D0               ;Mask appropriate bits
00002234  B07C 0010               1607      CMP.W   #$0010,D0               ;Bit mask static EXG bits
00002238  6700 0030               1608      BEQ     GROUPC_INVALID          ;If this equals, then OP must be EXG
0000223C  6600 0002               1609      BNE     CHECK_OP_MULS           ;Otherwise it's MULS
00002240                          1610  CHECK_OP_MULS:
00002240  3038 10A0               1611      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00002244  0240 F1C0               1612      ANDI.W #$F1C0,D0                ;Mask appropriate bits
00002248  B07C C1C0               1613      CMP.W  #$C1C0,D0                ;Compare masked bits
0000224C  6600 000C               1614      BNE    CHECK_OP_AND             ;OP_AND is completely dynamic outside of first nibble
00002250  4EB9 0000267E           1615      JSR    PRINT_OP_MULS            ;Print OP code
00002256  6000 0018               1616      BRA    GROUPC_SUCCESS           ;Finish routine
0000225A                          1617      
0000225A                          1618  CHECK_OP_AND:                       ;This would be the only possible OP code left after CHECK_OP_MULS
0000225A  3038 10A0               1619      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000225E  0240 F000               1620      ANDI.W  #$F000,D0               ;Mask appropriate bits
00002262  B07C C000               1621      CMP.W   #$C000,D0               ;Compare masked bits
00002266  6000 0002               1622      BRA    GROUPC_INVALID           ;INVALID OP code found
0000226A                          1623      
0000226A                          1624  GROUPC_INVALID:
0000226A  4EB9 0000248E           1625      JSR     INVALID_OP              ;Set IS_VALID to 0
00002270                          1626      
00002270                          1627  GROUPC_SUCCESS:
00002270  4CDF 0003               1628      MOVEM.L (SP)+,D0-D1             ;Restore registers from stack
00002274  4E75                    1629      RTS                             ;Return to stack
00002276                          1630      
00002276                          1631  C_GROUP_D:
00002276  48E7 8000               1632      MOVEM.L D0,-(SP)                ;Save registers to stack
0000227A                          1633  BIT_SIZE_CHECK
0000227A  3038 10A0               1634      MOVE    CUR_OP_CODE,D0          ;Move current instruction set into D0
0000227E  4EB8 187E               1635      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Specific size bit checking to see if it's 11
00002282  0C38 0003 1738          1636      CMP.B   #%11,OP_SIZE            ;If it's %11 it cannot be ADDX and is either ADDA or ADD
00002288  6700 0024               1637      BEQ     CHECK_OP_ADDA           ;If it's equal check ADDA
0000228C  6600 0002               1638      BNE     CHECK_OP_ADDX           ;If it's not equal check ADDX
00002290                          1639      
00002290                          1640  CHECK_OP_ADDX:
00002290  3038 10A0               1641      MOVE    CUR_OP_CODE,D0
00002294  0240 F130               1642      ANDI.W #$F130,D0                ;Mask appropriate bits
00002298  B07C D100               1643      CMP.W  #$D100,D0                ;Compare masked bits
0000229C  6700 002C               1644      BEQ    GROUPD_INVALID           ;INVALID OP code found
000022A0  6600 0002               1645      BNE    CHECK_OP_ADD             ;Check next OP code
000022A4                          1646      
000022A4                          1647  CHECK_OP_ADD:
000022A4  4EB9 0000268C           1648      JSR PRINT_OP_ADD                ;Only remaining OP in $D is ADD at this point
000022AA  6000 0024               1649      BRA GROUPD_SUCCESS              ;Finish routine
000022AE                          1650  
000022AE                          1651  CHECK_OP_ADDA:
000022AE  3038 10A0               1652      MOVE    CUR_OP_CODE,D0          ;Move current instruction set into D0
000022B2  0240 F0C0               1653      ANDI.W #$F0C0,D0                ;Mask applicable bits
000022B6  B07C D0C0               1654      CMP.W  #$D0C0,D0                ;Compare masked bits
000022BA  66E8                    1655      BNE    CHECK_OP_ADD             ;Check next OP code
000022BC  4EB8 18BE               1656      JSR    FIND_1_BIT_SIZE_8        ;Size bit to print
000022C0  4EB9 000026A0           1657      JSR    PRINT_OP_ADDA            ;Print out OP code
000022C6  6000 0008               1658      BRA    GROUPD_SUCCESS           ;Finish routine
000022CA                          1659      
000022CA                          1660  GROUPD_INVALID:
000022CA  4EB9 0000248E           1661      JSR INVALID_OP                  ;INVALID OP code found
000022D0                          1662  GROUPD_SUCCESS:
000022D0  4CDF 0001               1663      MOVEM.L (SP)+,D0                ;Restore registers from stack
000022D4  4E75                    1664      RTS                             ;Return to stack
000022D6                          1665      
000022D6                          1666  C_GROUP_E:
000022D6  48E7 8000               1667      MOVEM.L D0,-(SP)
000022DA                          1668  CHECK_OP_ROXR_NO_ROT:
000022DA  3038 10A0               1669      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
000022DE  0240 FFC0               1670      ANDI.W #$FFC0,D0                ;Mask appropriate bits
000022E2  B07C E4C0               1671      CMP.W  #$E4C0,D0                ;Compare masked bits
000022E6  6700 0192               1672      BEQ    GROUPE_INVALID           ;INVALID OP code
000022EA  6600 0002               1673      BNE    CHECK_OP_ROXL_NO_ROT     ;Check next OP code
000022EE                          1674  
000022EE                          1675  CHECK_OP_ROXL_NO_ROT:
000022EE  3038 10A0               1676      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
000022F2  0240 FFC0               1677      ANDI.W #$FFC0,D0                ;Mask appropriate bits
000022F6  B07C E5C0               1678      CMP.W  #$E5C0,D0                ;Compare masked bits
000022FA  6700 017E               1679      BEQ    GROUPE_INVALID           ;INVALID OP code
000022FE  6600 0002               1680      BNE    CHECK_OP_ROR_NO_ROT      ;Check next OP code
00002302                          1681  
00002302                          1682  CHECK_OP_ROR_NO_ROT:
00002302  3038 10A0               1683      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00002306  0240 FFC0               1684      ANDI.W #$FFC0,D0                ;Mask appropriate bits
0000230A  B07C E6C0               1685      CMP.W  #$E6C0,D0                ;Compare masked bits
0000230E  6600 000C               1686      BNE    CHECK_OP_ROL_NO_ROT      ;Check next OP code
00002312  4EB9 00002718           1687      JSR    PRINT_OP_ROR             ;Print out OP code
00002318  6000 0166               1688      BRA    GROUPE_SUCCESS           ;Finish routine
0000231C                          1689      
0000231C                          1690  CHECK_OP_ROL_NO_ROT:
0000231C  3038 10A0               1691      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00002320  0240 FFC0               1692      ANDI.W #$FFC0,D0                ;Mask appropriate bits
00002324  B07C E7C0               1693      CMP.W  #$E7C0,D0                ;Compare masked bits
00002328  6600 000C               1694      BNE    CHECK_OP_LSR_NO_ROT      ;Check next OP code
0000232C  4EB9 00002704           1695      JSR    PRINT_OP_ROL             ;Print out OP code
00002332  6000 014C               1696      BRA    GROUPE_SUCCESS           ;Finish routine
00002336                          1697   
00002336                          1698  CHECK_OP_LSR_NO_ROT:
00002336  3038 10A0               1699      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
0000233A  0240 FFC0               1700      ANDI.W #$FFC0,D0                ;Mask appropriate bits
0000233E  B07C E2C0               1701      CMP.W  #$E2C0,D0                ;Compare masked bits
00002342  6600 000C               1702      BNE    CHECK_OP_LSL_NO_ROT      ;Check next OP code
00002346  4EB9 000026C8           1703      JSR    PRINT_OP_LSR             ;Print out OP code
0000234C  6000 0132               1704      BRA    GROUPE_SUCCESS           ;Finish routine
00002350                          1705  
00002350                          1706  CHECK_OP_LSL_NO_ROT:
00002350  3038 10A0               1707      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00002354  0240 FFC0               1708      ANDI.W #$FFC0,D0                ;Mask appropriate bits
00002358  B07C E3C0               1709      CMP.W  #$E3C0,D0                ;Compare masked bits
0000235C  6600 000C               1710      BNE    CHECK_OP_ASR_NO_ROT      ;Check next OP code
00002360  4EB9 000026B4           1711      JSR    PRINT_OP_LSL             ;Print out OP code
00002366  6000 0118               1712      BRA    GROUPE_SUCCESS           ;Finish routine
0000236A                          1713  
0000236A                          1714  CHECK_OP_ASR_NO_ROT:
0000236A  3038 10A0               1715      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
0000236E  0240 FFC0               1716      ANDI.W #$FFC0,D0                ;Mask appropriate bits
00002372  B07C E0C0               1717      CMP.W  #$E0C0,D0                ;Compare masked bits
00002376  6600 000C               1718      BNE    CHECK_OP_ASL_NO_ROT      ;Check next OP code
0000237A  4EB9 000026DC           1719      JSR    PRINT_OP_ASR             ;Print out OP code
00002380  6000 00FE               1720      BRA    GROUPE_SUCCESS           ;Finish routine
00002384                          1721              
00002384                          1722  CHECK_OP_ASL_NO_ROT:
00002384  3038 10A0               1723      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00002388  0240 FFC0               1724      ANDI.W #$FFC0,D0                ;Mask appropriate bits
0000238C  B07C E1C0               1725      CMP.W  #$E1C0,D0                ;Compare masked bits
00002390  6600 000C               1726      BNE    CHECK_OP_ROXR            ;Check next OP code
00002394  4EB9 000026F0           1727      JSR    PRINT_OP_ASL             Print out OP code
0000239A  6000 00E4               1728      BRA    GROUPE_SUCCESS           ;Finish routine
0000239E                          1729  
0000239E                          1730  CHECK_OP_ROXR:
0000239E  3038 10A0               1731      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
000023A2  0240 F118               1732      ANDI.W #$F118,D0                ;Mask appropriate bits
000023A6  B07C E010               1733      CMP.W  #$E010,D0                ;Compare masked bits
000023AA  6700 00CE               1734      BEQ    GROUPE_INVALID           ;INVALID OP code found
000023AE  6600 0002               1735      BNE    CHECK_OP_ROXL            ;Check next OP code
000023B2                          1736      
000023B2                          1737  CHECK_OP_ROXL:
000023B2  3038 10A0               1738      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
000023B6  0240 F118               1739      ANDI.W #$F118,D0                ;Mask appropriate bits
000023BA  B07C E110               1740      CMP.W  #$E110,D0                ;Compare masked bits
000023BE  6700 00BA               1741      BEQ    GROUPE_INVALID           ;INVALID OP code found
000023C2  6600 0002               1742      BNE    CHECK_OP_ROR             ;Check next OP code
000023C6                          1743      
000023C6                          1744  CHECK_OP_ROR:
000023C6  3038 10A0               1745      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
000023CA  0240 F118               1746      ANDI.W #$F118,D0                ;Mask appropriate bits
000023CE  B07C E018               1747      CMP.W  #$E018,D0                ;Compare masked bits
000023D2  6600 0010               1748      BNE    CHECK_OP_ROL             ;Check next OP code
000023D6  4EB8 187E               1749      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Parse size bits
000023DA  4EB9 00002718           1750      JSR    PRINT_OP_ROR             ;Print out OP code
000023E0  6000 009E               1751      BRA    GROUPE_SUCCESS           ;Finish routine
000023E4                          1752  
000023E4                          1753  CHECK_OP_ROL:
000023E4  3038 10A0               1754      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
000023E8  0240 F118               1755      ANDI.W #$F118,D0                ;Mask appropriate bits
000023EC  B07C E118               1756      CMP.W  #$E118,D0                ;Compare masked bits
000023F0  6600 0010               1757      BNE    CHECK_OP_LSR             ;Check next OP code
000023F4  4EB8 187E               1758      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Parse size field
000023F8  4EB9 00002704           1759      JSR    PRINT_OP_ROL             ;Print out OP code
000023FE  6000 0080               1760      BRA    GROUPE_SUCCESS           ;Finish routine
00002402                          1761      
00002402                          1762  CHECK_OP_LSR:
00002402  3038 10A0               1763      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00002406  0240 F118               1764      ANDI.W #$F118,D0                ;Mask appropriate bits
0000240A  B07C E008               1765      CMP.W  #$E008,D0                ;Compare masked bits
0000240E  6600 0010               1766      BNE    CHECK_OP_LSL             ;Check next OP code
00002412  4EB8 187E               1767      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Parse size field
00002416  4EB9 000026C8           1768      JSR    PRINT_OP_LSR             ;Print out OP code
0000241C  6000 0062               1769      BRA    GROUPE_SUCCESS           ;Finish routine
00002420                          1770  
00002420                          1771  CHECK_OP_LSL:
00002420  3038 10A0               1772      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00002424  0240 F118               1773      ANDI.W #$F118,D0                ;Mask appropriate bits
00002428  B07C E108               1774      CMP.W  #$E108,D0                ;Compare masked bits
0000242C  6600 0010               1775      BNE    CHECK_OP_ASR             ;Check next OP code
00002430  4EB8 187E               1776      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Parse size field
00002434  4EB9 000026B4           1777      JSR    PRINT_OP_LSL             ;Print out OP code
0000243A  6000 0044               1778      BRA    GROUPE_SUCCESS           ;Finish routine
0000243E                          1779  
0000243E                          1780  CHECK_OP_ASR:
0000243E  3038 10A0               1781      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00002442  0240 F118               1782      ANDI.W #$F118,D0                ;Mask appropriate bits
00002446  B07C E000               1783      CMP.W  #$E000,D0                ;Compare masked bits
0000244A  6600 0010               1784      BNE    CHECK_OP_ASL             ;Check next OP code
0000244E  4EB8 187E               1785      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Parse size field
00002452  4EB9 000026DC           1786      JSR    PRINT_OP_ASR             ;Print out OP code
00002458  6000 0026               1787      BRA    GROUPE_SUCCESS           ;Finish routine
0000245C                          1788  
0000245C                          1789  CHECK_OP_ASL:
0000245C  3038 10A0               1790      MOVE CUR_OP_CODE,D0             ;Move current instruction set into D0
00002460  0240 F118               1791      ANDI.W #$F118,D0                ;Mask appropriate bits
00002464  B07C E100               1792      CMP.W  #$E100,D0                ;Compare masked bits
00002468  6600 0010               1793      BNE    GROUPE_INVALID           ;Last possible OP code
0000246C  4EB8 187E               1794      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Parse size field
00002470  4EB9 000026F0           1795      JSR    PRINT_OP_ASL             ;Print out OP code
00002476  6000 0008               1796      BRA    GROUPE_SUCCESS           ;Finish routine
0000247A                          1797  
0000247A                          1798  GROUPE_INVALID:
0000247A  4EB9 0000248E           1799      JSR     INVALID_OP              ;Set IS_VALID to 0
00002480                          1800  GROUPE_SUCCESS:
00002480  4CDF 0001               1801      MOVEM.L (SP)+,D0                ;Restore registers from stack
00002484  4E75                    1802      RTS                             ;Return to stack
00002486                          1803  C_GROUP_F:
00002486  4EB9 0000248E           1804      JSR     INVALID_OP              ;Set IS_VALID to 0
0000248C  4E75                    1805      RTS                             ;Return to stack
0000248E                          1806      
0000248E                          1807  INVALID_OP:                         ; ONLY SETS IS_VALID TO 0
0000248E  11FC 0000 10A2          1808      MOVE.B #0,IS_VALID              ;Sets IS_VALID to 0
00002494  4E75                    1809      RTS                             ;Return to stack
00002496                          1810  
00002496                          1811  
00002496                          1812  PRINT_TO_BUFFER:
00002496  21FC 00001000 1256      1813      MOVE.L #G_BUFFER, BUFFER_POINTER
0000249E  4EB8 125F               1814      JSR AddStrToBuffer
000024A2  4E75                    1815      RTS
000024A4                          1816      
000024A4                          1817  PRINT_OP_ORI:
000024A4  21FC 00002792 1252      1818      MOVE.L #P_OP_ORI, STRING_BUFFER_POINTER
000024AC  4EB8 2496               1819      JSR PRINT_TO_BUFFER
000024B0  4EB9 00002756           1820      JSR PRINT_OP_SIZE
000024B6  4E75                    1821      RTS
000024B8                          1822  PRINT_OP_CMPI:
000024B8  21FC 00002799 1252      1823      MOVE.L #P_OP_CMPI, STRING_BUFFER_POINTER
000024C0  4EB8 2496               1824      JSR PRINT_TO_BUFFER
000024C4  4EB9 00002756           1825      JSR PRINT_OP_SIZE
000024CA  4E75                    1826      RTS
000024CC                          1827  PRINT_OP_STATIC_BCLR:
000024CC  21FC 000027A1 1252      1828      MOVE.L #P_OP_BCLR, STRING_BUFFER_POINTER
000024D4  4EB8 2496               1829      JSR PRINT_TO_BUFFER
000024D8  4EB9 00002756           1830      JSR PRINT_OP_SIZE
000024DE  4E75                    1831      RTS
000024E0                          1832      
000024E0                          1833  PRINT_OP_DYNAMIC_BCLR:
000024E0  21FC 000027A1 1252      1834      MOVE.L #P_OP_BCLR, STRING_BUFFER_POINTER
000024E8  4EB8 2496               1835      JSR PRINT_TO_BUFFER
000024EC  4EB9 00002756           1836      JSR PRINT_OP_SIZE
000024F2  4E75                    1837      RTS
000024F4                          1838  
000024F4                          1839  PRINT_OP_MOVEB:
000024F4  21FC 000027A9 1252      1840      MOVE.L #P_OP_MOVEB, STRING_BUFFER_POINTER
000024FC  4EB8 2496               1841      JSR PRINT_TO_BUFFER
00002500  4E75                    1842      RTS
00002502                          1843      
00002502                          1844  PRINT_OP_MOVEA_L:
00002502  21FC 000027B4 1252      1845      MOVE.L #P_OP_MOVEA_L, STRING_BUFFER_POINTER
0000250A  4EB8 2496               1846      JSR PRINT_TO_BUFFER
0000250E  4E75                    1847      RTS
00002510                          1848  PRINT_OP_MOVE_L:
00002510  21FC 000027C0 1252      1849      MOVE.L #P_OP_MOVE_L, STRING_BUFFER_POINTER
00002518  4EB8 2496               1850      JSR PRINT_TO_BUFFER
0000251C  4E75                    1851      RTS
0000251E                          1852      
0000251E                          1853  PRINT_OP_MOVEA_W:
0000251E  21FC 000027CB 1252      1854      MOVE.L #P_OP_MOVEA_W, STRING_BUFFER_POINTER
00002526  4EB8 2496               1855      JSR PRINT_TO_BUFFER
0000252A  4E75                    1856      RTS
0000252C                          1857  PRINT_OP_MOVE_W:
0000252C  21FC 000027D7 1252      1858      MOVE.L #P_OP_MOVE_W, STRING_BUFFER_POINTER
00002534  4EB8 2496               1859      JSR PRINT_TO_BUFFER
00002538  4E75                    1860      RTS
0000253A                          1861  
0000253A                          1862  PRINT_OP_JSR:
0000253A  21FC 00002801 1252      1863      MOVE.L #P_OP_JSR, STRING_BUFFER_POINTER
00002542  4EB8 2496               1864      JSR PRINT_TO_BUFFER
00002546  4E75                    1865      RTS
00002548                          1866  PRINT_OP_RTS:
00002548  21FC 0000280F 1252      1867      MOVE.L #P_OP_RTS, STRING_BUFFER_POINTER
00002550  4EB8 2496               1868      JSR PRINT_TO_BUFFER
00002554  4E75                    1869      RTS
00002556                          1870  PRINT_OP_NOP:
00002556  21FC 00002808 1252      1871      MOVE.L #P_OP_NOP, STRING_BUFFER_POINTER
0000255E  4EB8 2496               1872      JSR PRINT_TO_BUFFER
00002562  4E75                    1873      RTS
00002564                          1874  PRINT_OP_LEA:
00002564  21FC 000027FA 1252      1875      MOVE.L #P_OP_LEA, STRING_BUFFER_POINTER
0000256C  4EB8 2496               1876      JSR PRINT_TO_BUFFER
00002570  4EB9 00002756           1877      JSR PRINT_OP_SIZE
00002576  4E75                    1878      RTS
00002578                          1879  PRINT_OP_NEG:
00002578  21FC 00002816 1252      1880      MOVE.L #P_OP_NEG, STRING_BUFFER_POINTER
00002580  4EB8 2496               1881      JSR PRINT_TO_BUFFER
00002584  4EB9 00002756           1882      JSR PRINT_OP_SIZE
0000258A  4E75                    1883      RTS
0000258C                          1884  PRINT_OP_MOVEM_W:
0000258C  21FC 000027E2 1252      1885      MOVE.L #P_OP_MOVEM_W, STRING_BUFFER_POINTER
00002594  4EB8 2496               1886      JSR PRINT_TO_BUFFER
00002598  4E75                    1887      RTS
0000259A                          1888  PRINT_OP_MOVEM_L:
0000259A  21FC 000027EE 1252      1889      MOVE.L #P_OP_MOVEM_L, STRING_BUFFER_POINTER
000025A2  4EB8 2496               1890      JSR PRINT_TO_BUFFER
000025A6  4E75                    1891      RTS
000025A8                          1892      
000025A8                          1893  PRINT_OP_SUBQ:
000025A8  21FC 0000281D 1252      1894      MOVE.L #P_OP_SUBQ, STRING_BUFFER_POINTER
000025B0  4EB8 2496               1895      JSR PRINT_TO_BUFFER
000025B4  4EB9 00002756           1896      JSR PRINT_OP_SIZE
000025BA  4E75                    1897      RTS
000025BC                          1898  
000025BC                          1899  PRINT_OP_BCS:
000025BC  21FC 0000282C 1252      1900      MOVE.L #P_OP_BCS, STRING_BUFFER_POINTER
000025C4  4EB8 2496               1901      JSR PRINT_TO_BUFFER
000025C8  4EB9 00002756           1902      JSR PRINT_OP_SIZE
000025CE  4E75                    1903      RTS
000025D0                          1904  PRINT_OP_BGE:
000025D0  21FC 00002833 1252      1905      MOVE.L #P_OP_BGE, STRING_BUFFER_POINTER
000025D8  4EB8 2496               1906      JSR PRINT_TO_BUFFER
000025DC  4EB9 00002756           1907      JSR PRINT_OP_SIZE
000025E2  4E75                    1908      RTS
000025E4                          1909  PRINT_OP_BLT:
000025E4  21FC 0000283A 1252      1910      MOVE.L #P_OP_BLT, STRING_BUFFER_POINTER
000025EC  4EB8 2496               1911      JSR PRINT_TO_BUFFER
000025F0  4EB9 00002756           1912      JSR PRINT_OP_SIZE
000025F6  4E75                    1913      RTS
000025F8                          1914  PRINT_OP_BVC:
000025F8  21FC 00002841 1252      1915      MOVE.L #P_OP_BVC, STRING_BUFFER_POINTER
00002600  4EB8 2496               1916      JSR PRINT_TO_BUFFER
00002604  4EB9 00002756           1917      JSR PRINT_OP_SIZE
0000260A  4E75                    1918      RTS
0000260C                          1919  PRINT_OP_BRA:
0000260C  21FC 00002825 1252      1920      MOVE.L #P_OP_BRA, STRING_BUFFER_POINTER
00002614  4EB8 2496               1921      JSR PRINT_TO_BUFFER
00002618  4EB9 00002756           1922      JSR PRINT_OP_SIZE
0000261E  4E75                    1923      RTS
00002620                          1924  
00002620                          1925  
00002620                          1926  PRINT_OP_DIVS:
00002620  21FC 00002848 1252      1927      MOVE.L #P_OP_DIVS, STRING_BUFFER_POINTER
00002628  4EB8 2496               1928      JSR PRINT_TO_BUFFER
0000262C  4E75                    1929      RTS
0000262E                          1930  PRINT_OP_OR:
0000262E  21FC 00002853 1252      1931      MOVE.L #P_OP_OR, STRING_BUFFER_POINTER
00002636  4EB8 2496               1932      JSR PRINT_TO_BUFFER
0000263A  4EB9 00002756           1933      JSR PRINT_OP_SIZE
00002640  4E75                    1934      RTS
00002642                          1935  
00002642                          1936  PRINT_OP_SUB:
00002642  21FC 00002859 1252      1937      MOVE.L #P_OP_SUB, STRING_BUFFER_POINTER
0000264A  4EB8 2496               1938      JSR PRINT_TO_BUFFER
0000264E  4EB9 00002756           1939      JSR PRINT_OP_SIZE
00002654  4E75                    1940      RTS
00002656                          1941  
00002656                          1942  
00002656                          1943  PRINT_OP_EOR:
00002656  21FC 00002860 1252      1944      MOVE.L #P_OP_EOR, STRING_BUFFER_POINTER
0000265E  4EB8 2496               1945      JSR PRINT_TO_BUFFER
00002662  4EB9 00002756           1946      JSR PRINT_OP_SIZE
00002668  4E75                    1947      RTS
0000266A                          1948  PRINT_OP_CMP:
0000266A  21FC 00002867 1252      1949      MOVE.L #P_OP_CMP, STRING_BUFFER_POINTER
00002672  4EB8 2496               1950      JSR PRINT_TO_BUFFER
00002676  4EB9 00002756           1951      JSR PRINT_OP_SIZE
0000267C  4E75                    1952      RTS
0000267E                          1953  
0000267E                          1954  PRINT_OP_MULS:
0000267E  21FC 0000286E 1252      1955      MOVE.L #P_OP_MULS, STRING_BUFFER_POINTER
00002686  4EB8 2496               1956      JSR PRINT_TO_BUFFER
0000268A  4E75                    1957      RTS
0000268C                          1958  
0000268C                          1959  PRINT_OP_ADD:
0000268C  21FC 00002881 1252      1960      MOVE.L #P_OP_ADD, STRING_BUFFER_POINTER
00002694  4EB8 2496               1961      JSR PRINT_TO_BUFFER
00002698  4EB9 00002756           1962      JSR PRINT_OP_SIZE
0000269E  4E75                    1963      RTS
000026A0                          1964  PRINT_OP_ADDA:
000026A0  21FC 00002879 1252      1965      MOVE.L #P_OP_ADDA, STRING_BUFFER_POINTER
000026A8  4EB8 2496               1966      JSR PRINT_TO_BUFFER
000026AC  4EB9 00002770           1967      JSR PRINT_OP_SIZE_ADDA
000026B2  4E75                    1968      RTS
000026B4                          1969  
000026B4                          1970  
000026B4                          1971  PRINT_OP_LSL:
000026B4  21FC 0000288F 1252      1972      MOVE.L #P_OP_LSL, STRING_BUFFER_POINTER
000026BC  4EB8 2496               1973      JSR PRINT_TO_BUFFER
000026C0  4EB9 00002756           1974      JSR PRINT_OP_SIZE
000026C6  4E75                    1975      RTS
000026C8                          1976  PRINT_OP_LSR:
000026C8  21FC 00002888 1252      1977      MOVE.L #P_OP_LSR, STRING_BUFFER_POINTER
000026D0  4EB8 2496               1978      JSR PRINT_TO_BUFFER
000026D4  4EB9 00002756           1979      JSR PRINT_OP_SIZE
000026DA  4E75                    1980      RTS
000026DC                          1981  PRINT_OP_ASR:
000026DC  21FC 00002896 1252      1982      MOVE.L #P_OP_ASR, STRING_BUFFER_POINTER
000026E4  4EB8 2496               1983      JSR PRINT_TO_BUFFER
000026E8  4EB9 00002756           1984      JSR PRINT_OP_SIZE
000026EE  4E75                    1985      RTS
000026F0                          1986  PRINT_OP_ASL:
000026F0  21FC 0000289D 1252      1987      MOVE.L #P_OP_ASL, STRING_BUFFER_POINTER
000026F8  4EB8 2496               1988      JSR PRINT_TO_BUFFER
000026FC  4EB9 00002756           1989      JSR PRINT_OP_SIZE
00002702  4E75                    1990      RTS
00002704                          1991  PRINT_OP_ROL:
00002704  21FC 000028AB 1252      1992      MOVE.L #P_OP_ROL, STRING_BUFFER_POINTER
0000270C  4EB8 2496               1993      JSR PRINT_TO_BUFFER
00002710  4EB9 00002756           1994      JSR PRINT_OP_SIZE
00002716  4E75                    1995      RTS
00002718                          1996  PRINT_OP_ROR:
00002718  21FC 000028A4 1252      1997      MOVE.L #P_OP_ROR, STRING_BUFFER_POINTER
00002720  4EB8 2496               1998      JSR PRINT_TO_BUFFER
00002724  4EB9 00002756           1999      JSR PRINT_OP_SIZE
0000272A  4E75                    2000      RTS
0000272C                          2001  
0000272C                          2002  
0000272C                          2003  PRINT_SIZE_BYTE:
0000272C  21FC 00002786 1252      2004      MOVE.L #P_SIZE_B, STRING_BUFFER_POINTER
00002734  4EB8 2496               2005      JSR PRINT_TO_BUFFER
00002738  4E75                    2006      RTS    
0000273A                          2007  
0000273A                          2008  PRINT_SIZE_WORD:
0000273A  21FC 0000278A 1252      2009      MOVE.L #P_SIZE_W, STRING_BUFFER_POINTER
00002742  4EB8 2496               2010      JSR PRINT_TO_BUFFER
00002746  4E75                    2011      RTS
00002748                          2012      
00002748                          2013  PRINT_SIZE_LONG:
00002748  21FC 0000278E 1252      2014      MOVE.L #P_SIZE_L, STRING_BUFFER_POINTER
00002750  4EB8 2496               2015      JSR PRINT_TO_BUFFER
00002754  4E75                    2016      RTS
00002756                          2017  
00002756                          2018  PRINT_OP_SIZE:                      ;Prints current OP code byte size if applicable
00002756  0C38 0000 1738          2019      CMP.B  #%00,OP_SIZE             ;Checks for byte size
0000275C  67CE                    2020      BEQ    PRINT_SIZE_BYTE          ;Print .B to buffer
0000275E  0C38 0001 1738          2021      CMP.B  #%01,OP_SIZE             ;Check for word size
00002764  67D4                    2022      BEQ    PRINT_SIZE_WORD          ;Print .W to buffer
00002766  0C38 0002 1738          2023      CMP.B  #%10,OP_SIZE             ;Check for long size
0000276C  67DA                    2024      BEQ    PRINT_SIZE_LONG          ;Print .L to buffer
0000276E  4E75                    2025      RTS
00002770                          2026      
00002770                          2027  PRINT_OP_SIZE_ADDA:                 ;Special  print for ADDA
00002770  0C38 0000 1738          2028      CMP.B #%0,OP_SIZE               ;Checks if the OP_SIZE is 0
00002776  67C2                    2029      BEQ    PRINT_SIZE_WORD          ;If it is the size is word
00002778  66CE                    2030      BNE    PRINT_SIZE_LONG          ;If it's not the size is long
0000277A                          2031      
0000277A                          2032  
0000277A                          2033  
0000277A                          2034  
0000277A                          2035  
0000277A= 20 20 20 44 41 54 ...   2036  P_INVALID_OP    DC.B    '   DATA   $',0
00002786= 2E 42 20 00             2037  P_SIZE_B        DC.B    '.B ',0
0000278A= 2E 57 20 00             2038  P_SIZE_W        DC.B    '.W ',0
0000278E= 2E 4C 20 00             2039  P_SIZE_L        DC.B    '.L ',0
00002792= 20 20 20 4F 52 49 00    2040  P_OP_ORI        DC.B    '   ORI',0
00002799= 20 20 20 43 4D 50 ...   2041  P_OP_CMPI       DC.B    '   CMPI',0
000027A1= 20 20 20 42 43 4C ...   2042  P_OP_BCLR       DC.B    '   BCLR',0
000027A9= 20 20 20 4D 4F 56 ...   2043  P_OP_MOVEB      DC.B    '   MOVE.B ',0
000027B4= 20 20 20 4D 4F 56 ...   2044  P_OP_MOVEA_L    DC.B    '   MOVEA.L ',0 
000027C0= 20 20 20 4D 4F 56 ...   2045  P_OP_MOVE_L     DC.B    '   MOVE.L ',0
000027CB= 20 20 20 4D 4F 56 ...   2046  P_OP_MOVEA_W    DC.B    '   MOVEA.W ',0
000027D7= 20 20 20 4D 4F 56 ...   2047  P_OP_MOVE_W     DC.B    '   MOVE.W ',0
000027E2= 20 20 20 4D 4F 56 ...   2048  P_OP_MOVEM_W    DC.B    '   MOVEM.W ',0
000027EE= 20 20 20 4D 4F 56 ...   2049  P_OP_MOVEM_L    DC.B    '   MOVEM.L ',0
000027FA= 20 20 20 4C 45 41 00    2050  P_OP_LEA        DC.B    '   LEA',0
00002801= 20 20 20 4A 53 52 00    2051  P_OP_JSR        DC.B    '   JSR',0
00002808= 20 20 20 4E 4F 50 00    2052  P_OP_NOP        DC.B    '   NOP',0
0000280F= 20 20 20 52 54 53 00    2053  P_OP_RTS        DC.B    '   RTS',0
00002816= 20 20 20 4E 45 47 00    2054  P_OP_NEG        DC.B    '   NEG',0
0000281D= 20 20 20 53 55 42 ...   2055  P_OP_SUBQ       DC.B    '   SUBQ',0
00002825= 20 20 20 42 52 41 00    2056  P_OP_BRA        DC.B    '   BRA',0
0000282C= 20 20 20 42 43 53 00    2057  P_OP_BCS        DC.B    '   BCS',0
00002833= 20 20 20 42 47 45 00    2058  P_OP_BGE        DC.B    '   BGE',0
0000283A= 20 20 20 42 4C 54 00    2059  P_OP_BLT        DC.B    '   BLT',0
00002841= 20 20 20 42 56 43 00    2060  P_OP_BVC        DC.B    '   BVC',0
00002848= 20 20 20 44 49 56 ...   2061  P_OP_DIVS       DC.B    '   DIVS.W ',0
00002853= 20 20 20 4F 52 00       2062  P_OP_OR         DC.B    '   OR',0
00002859= 20 20 20 53 55 42 00    2063  P_OP_SUB        DC.B    '   SUB',0
00002860= 20 20 20 45 4F 52 00    2064  P_OP_EOR        DC.B    '   EOR',0
00002867= 20 20 20 43 4D 50 00    2065  P_OP_CMP        DC.B    '   CMP',0
0000286E= 20 20 20 4D 55 4C ...   2066  P_OP_MULS       DC.B    '   MULS.W ',0
00002879= 20 20 20 41 44 44 ...   2067  P_OP_ADDA       DC.B    '   ADDA',0
00002881= 20 20 20 41 44 44 00    2068  P_OP_ADD        DC.B    '   ADD',0
00002888= 20 20 20 4C 53 52 00    2069  P_OP_LSR        DC.B    '   LSR',0
0000288F= 20 20 20 4C 53 4C 00    2070  P_OP_LSL        DC.B    '   LSL',0
00002896= 20 20 20 41 53 52 00    2071  P_OP_ASR        DC.B    '   ASR',0
0000289D= 20 20 20 41 53 4C 00    2072  P_OP_ASL        DC.B    '   ASL',0
000028A4= 20 20 20 52 4F 52 00    2073  P_OP_ROR        DC.B    '   ROR',0
000028AB= 20 20 20 52 4F 4C 00    2074  P_OP_ROL        DC.B    '   ROL',0
000028B2                          2075  
000028B2                          2076  -------------------- end include --------------------
000028B2                          2077      INCLUDE "EA_Integrated.x68"                         ;EA role code to include
000028B2                          2078  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000028B2                          2079  
000028B2                          2080  
000028B2= 41                      2081  ADDRESS         DC.B    $41
000028B3= 44                      2082  DATA            DC.B    $44
000028B4                          2083  
000028B4= 28                      2084  PTHSIS_OPEN     DC.B    $28
000028B5= 29                      2085  PTHSIS_CLSD     DC.B    $29
000028B6= 24                      2086  HEX_SIGN        DC.B    $24
000028B7= 23                      2087  IMMDTE_VALU     DC.B    $23
000028B8= 2B                      2088  PLUS_SIGN       DC.B    $2B
000028B9= 2D                      2089  MINUS_SIGN      DC.B    $2D
000028BA                          2090  
000028BA= 2C                      2091  COMMA           DC.B    $2C
000028BB= 20                      2092  SPACE           DC.B    $20
000028BC                          2093  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000028BC                          2094  
000028BC                          2095  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
000028BC                          2096  TRAILING_SIZE   DS.W    1 * Size of any immediate or
000028BE                          2097                            * address values. Immediate or address
000028BE                          2098                            * value of a BYTE is still processed as
000028BE                          2099                            * WORD because the trailing bytes
000028BE                          2100                            * are represented as a word regardless.
000028BE                          2101                            * $1 = BYTE, $2 = WORD, $4 = LONG
000028BE                          2102  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000028BE                          2103   
000028BE                          2104  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
000028BE                          2105  
000028BE                          2106  main_EA:
000028BE  4EB8 1924               2107      JSR PARSE_EA_CONSTANT_BITS    
000028C2                          2108  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000028C2                          2109  
000028C2                          2110  
000028C2                          2111  
000028C2                          2112  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      
000028C2                          2113  
000028C2  4EB9 000028CC           2114      JSR     CHECK_XXXX
000028C8                          2115  EXT                        * Main EXT alias to finish routine
000028C8  4EF8 11C2               2116      JMP check_print 
000028CC                          2117  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000028CC                          2118  
000028CC                          2119  CHECK_XXXX:
000028CC  0C38 0008 1739          2120      CMPI.B  #$8, MNEMONIC
000028D2  6D00 0008               2121      BLT     CHECK_0XXX
000028D6  4EF9 000028EC           2122      JMP     CHECK_1XXX
000028DC                          2123  
000028DC                          2124  CHECK_0XXX:
000028DC  0C38 0004 1739          2125      CMPI.B  #$4, MNEMONIC
000028E2  6D00 004C               2126      BLT     CHECK_00XX
000028E6  4EF9 0000293E           2127      JMP     CHECK_01XX
000028EC                          2128  
000028EC                          2129  CHECK_1XXX:
000028EC  0C38 0008 1739          2130      CMPI.B  #$8, MNEMONIC
000028F2  6700 0308               2131      BEQ     LOAD_1000
000028F6  0C38 0009 1739          2132      CMPI.B  #$9, MNEMONIC
000028FC  6700 02F8               2133      BEQ     LOAD_1001
00002900  0C38 000B 1739          2134      CMPI.B  #$B, MNEMONIC
00002906  6700 02E8               2135      BEQ     LOAD_1011
0000290A  0C38 000C 1739          2136      CMPI.B  #$C, MNEMONIC
00002910  6700 02D8               2137      BEQ     LOAD_1100
00002914  0C38 000D 1739          2138      CMPI.B  #$D, MNEMONIC
0000291A  6700 026C               2139      BEQ     LOAD_1101
0000291E  0C38 000E 1739          2140      CMPI.B  #$E, MNEMONIC
00002924  6700 0038               2141      BEQ     LOAD_1110
00002928                          2142      
00002928  4EF9 0000330C           2143      JMP     INVALID
0000292E                          2144      
0000292E  4E75                    2145      RTS
00002930                          2146  
00002930                          2147  CHECK_00XX:
00002930  0C38 0001 1739          2148      CMPI.B  #$1, MNEMONIC
00002936  6D00 05D6               2149      BLT     LOAD_0000
0000293A  6C00 0758               2150      BGE     LOAD_00XX
0000293E                          2151  
0000293E                          2152  CHECK_01XX:
0000293E  0C38 0004 1739          2153      CMPI.B  #%0100, MNEMONIC
00002944  6700 0458               2154      BEQ     LOAD_0100
00002948  0C38 0005 1739          2155      CMPI.B  #%0101, MNEMONIC
0000294E  6700 03C4               2156      BEQ     LOAD_0101
00002952  0C38 0006 1739          2157      CMPI.B  #%0110, MNEMONIC
00002958  6700 0124               2158      BEQ     LOAD_0110
0000295C  4E75                    2159      RTS
0000295E                          2160  
0000295E                          2161  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000295E                          2162  
0000295E                          2163  
0000295E                          2164  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000295E                          2165  
0000295E                          2166  LOAD_1110:
0000295E  247C 00000000           2167              MOVEA.L #0, A2
00002964  267C 00000000           2168              MOVEA.L #0, A3
0000296A  4285                    2169              CLR.L   D5
0000296C                          2170      
0000296C  1A38 173B               2171              MOVE.B  SECOND_3, D5
00002970  0205 0003               2172              ANDI.B  #%011, D5
00002974                          2173      
00002974  0C05 0003               2174              CMPI.B  #%11, D5
00002978  6700 0006               2175              BEQ     MYBE_ASd_1
0000297C  6600 0068               2176              BNE     MYBE_ASd_2
00002980                          2177  
00002980  0C38 0000 173A          2178  MYBE_ASd_1  CMPI.B  #%000, FIRST_3
00002986  6700 001C               2179              BEQ     ASd_1
0000298A  0C38 0001 173A          2180              CMPI.B  #%001, FIRST_3
00002990  6700 0012               2181              BEQ     ASd_1 * LSd
00002994  0C38 0003 173A          2182              CMPI.B  #%011, FIRST_3
0000299A  6700 0008               2183              BEQ     ASd_1 * ROd
0000299E  4EF9 0000330C           2184              JMP     INVALID
000029A4                          2185  
000029A4  0C38 0007 173C          2186  ASd_1       CMPI.B  #%111, THIRD_3
000029AA  6600 000C               2187              BNE     MOVEON  
000029AE  0C38 0004 173D          2188              CMPI.B  #%100, FOURTH_3
000029B4  6700 0956               2189              BEQ     INVALID
000029B8                          2190  
000029B8  367C 29D0               2191  MOVEON      MOVEA.W #ASd_1_BACK, A3           
000029BC  0C38 0000 173D          2192              CMPI.B  #%000, FOURTH_3
000029C2  6700 07E0               2193              BEQ     SIZE_W
000029C6  0C38 0001 173D          2194              CMPI.B  #%001, FOURTH_3
000029CC  6700 07DE               2195              BEQ     SIZE_L
000029D0                          2196  
000029D0  1638 173C               2197  ASd_1_BACK  MOVE.B  THIRD_3, D3
000029D4  1438 173D               2198              MOVE.B  FOURTH_3, D2
000029D8                          2199              
000029D8  4EB9 000030F8           2200              JSR     LOAD_EA
000029DE  4EB9 0000325A           2201              JSR     LOAD_NEW_LINE
000029E4  4E75                    2202              RTS
000029E6                          2203  
000029E6  4285                    2204  MYBE_ASd_2  CLR.L   D5
000029E8                          2205  
000029E8  1A38 173C               2206              MOVE.B  THIRD_3, D5
000029EC  0205 0003               2207              ANDI.B  #%011, D5
000029F0  0C05 0002               2208              CMPI.B  #%10, D5
000029F4  6600 0006               2209              BNE     ASd_2 * or LSd or ROd
000029F8  6700 0912               2210              BEQ     INVALID
000029FC                          2211              
000029FC  4285                    2212  ASd_2       CLR.L   D5
000029FE                          2213  
000029FE  1A38 173C               2214              MOVE.B  THIRD_3, D5
00002A02  0205 0004               2215              ANDI.B  #%100, D5
00002A06  0C05 0004               2216              CMPI.B  #%100, D5
00002A0A  6700 0048               2217              BEQ     ASd_2_REG
00002A0E  6600 0002               2218              BNE     ASd_2_IMD
00002A12                          2219              
00002A12  347C 2A38               2220  ASd_2_IMD   MOVEA.W #ASd_2_IMD_B, A2
00002A16  0C38 0000 173A          2221              CMPI.B  #%000, FIRST_3
00002A1C  6700 0006               2222              BEQ     LOAD_8
00002A20  6600 000C               2223              BNE     LOAD_FIRST3
00002A24                          2224              
00002A24  183C 0008               2225  LOAD_8      MOVE.B  #8, D4
00002A28  4EF9 00003226           2226              JMP     LOAD_IMMDTE
00002A2E                          2227  
00002A2E  1838 173A               2228  LOAD_FIRST3 MOVE.B  FIRST_3, D4
00002A32  4EF9 00003226           2229              JMP     LOAD_IMMDTE
00002A38                          2230  
00002A38  4EB9 0000325C           2231  ASd_2_IMD_B JSR     LOAD_COMMA_SPACE
00002A3E                          2232  
00002A3E  163C 0000               2233              MOVE.B  #%000, D3
00002A42  1438 173D               2234              MOVE.B  FOURTH_3, D2
00002A46                          2235              
00002A46  4EB9 000030F8           2236              JSR     LOAD_EA
00002A4C  4EB9 0000325A           2237              JSR     LOAD_NEW_LINE
00002A52  4E75                    2238              RTS
00002A54                          2239  
00002A54  163C 0000               2240  ASd_2_REG   MOVE.B  #%000, D3
00002A58  1438 173A               2241              MOVE.B  FIRST_3, D2
00002A5C                          2242              
00002A5C  4EB9 000030F8           2243              JSR     LOAD_EA
00002A62  4EB9 0000325C           2244              JSR     LOAD_COMMA_SPACE
00002A68                          2245              
00002A68  163C 0000               2246              MOVE.B  #%000, D3
00002A6C  1438 173D               2247              MOVE.B  FOURTH_3, D2
00002A70                          2248              
00002A70  4EB9 000030F8           2249              JSR     LOAD_EA
00002A76  4EB9 0000325A           2250              JSR     LOAD_NEW_LINE
00002A7C  4E75                    2251              RTS
00002A7E                          2252  
00002A7E                          2253  
00002A7E                          2254  
00002A7E                          2255  LOAD_0110:
00002A7E  247C 00000000           2256              MOVEA.L #0, A2
00002A84  267C 00000000           2257              MOVEA.L #0, A3
00002A8A  4285                    2258              CLR.L   D5
00002A8C  4286                    2259              CLR.L   D6
00002A8E  4284                    2260              CLR.L   D4
00002A90                          2261  
00002A90  0C38 0000 173A          2262              CMPI.B  #%000, FIRST_3
00002A96  6700 0006               2263              BEQ     MYBE_BRA
00002A9A  6600 0010               2264              BNE     NOT_BRA
00002A9E  0C38 0004 173B          2265  MYBE_BRA    CMPI.B  #%100, SECOND_3
00002AA4  6D00 003A               2266              BLT     BRA
00002AA8  6C00 0002               2267              BGE     NOT_BRA
00002AAC                          2268              
00002AAC  1A38 173A               2269  NOT_BRA     MOVE.B  FIRST_3, D5
00002AB0  E305                    2270              ASL.B   #1, D5
00002AB2  1C38 173B               2271              MOVE.B  SECOND_3, D6
00002AB6  E406                    2272              ASR.B   #2, D6
00002AB8  DA06                    2273              ADD.B   D6, D5
00002ABA                          2274              
00002ABA  0C05 0005               2275              CMPI.B  #%0101, D5
00002ABE  6700 0020               2276              BEQ     BRA * CS
00002AC2  0C05 0008               2277              CMPI.B  #%1000, D5
00002AC6  6700 0018               2278              BEQ     BRA * VC
00002ACA  0C05 000C               2279              CMPI.B  #%1100, D5
00002ACE  6700 0010               2280              BEQ     BRA * GE
00002AD2  0C05 000D               2281              CMPI.B  #%1101, D5
00002AD6  6700 0008               2282              BEQ     BRA * LT
00002ADA                          2283              
00002ADA  4EF9 0000330C           2284              JMP     INVALID
00002AE0                          2285              
00002AE0                          2286              
00002AE0  4285                    2287  BRA         CLR.L   D5
00002AE2  4286                    2288              CLR.L   D6
00002AE4                          2289  
00002AE4  3A0D                    2290              MOVE.W  A5, D5 * D5 has $1002 (Starting + MNEMONICS)
00002AE6  3C38 10A0               2291              MOVE.W  CUR_OP_CODE, D6
00002AEA  0246 00FF               2292              ANDI.W  #$00FF, D6 * D6 now has $E
00002AEE  0C06 0000               2293              CMPI.B  #$00, D6
00002AF2  6700 0052               2294              BEQ     BRA_WORD * word. there is 4 hex trailing bits (word)
00002AF6                          2295  
00002AF6  0C06 00FF               2296              CMPI.B  #$FF, D6
00002AFA  6700 0010               2297              BEQ     BRA_BYTE
00002AFE  0C06 00FE               2298              CMPI.B  #$FE, D6
00002B02  6700 0008               2299              BEQ     BRA_BYTE
00002B06                          2300  
00002B06  4EF9 0000330C           2301              JMP     INVALID
00002B0C                          2302              
00002B0C  0C06 00FE               2303  BRA_BYTE    CMPI.B  #$FE, D6
00002B10  6700 0010               2304              BEQ     DOWN_ZERO
00002B14  0C06 00FF               2305              CMPI.B  #$FF, D6
00002B18  6700 0010               2306              BEQ     DOWN_ONE
00002B1C                          2307              
00002B1C  4EF9 0000330C           2308              JMP     INVALID
00002B22                          2309              
00002B22  5505                    2310  DOWN_ZERO   SUBI.B  #$2, D5 * D5 has $1000 (Starting)
00002B24  4EF9 00002B32           2311              JMP     BRA_BYTE2
00002B2A                          2312              
00002B2A  5305                    2313  DOWN_ONE    SUBI.B  #$1, D5 * D5 has $1001 (Starting + 1)
00002B2C  4EF9 00002B32           2314              JMP     BRA_BYTE2
00002B32                          2315              
00002B32  347C 2B3E               2316  BRA_BYTE2   MOVE.W  #BRA_BYTE3, A2
00002B36  3805                    2317              MOVE.W  D5, D4
00002B38  4EF9 00003202           2318              JMP     LOAD_ABS_SHORT
00002B3E  4EB9 0000325A           2319  BRA_BYTE3   JSR     LOAD_NEW_LINE
00002B44  4E75                    2320              RTS
00002B46                          2321  
00002B46  381D                    2322  BRA_WORD    MOVE.W  (A5)+, D4 * D4 now has $000E
00002B48                          2323  
00002B48  0C84 00008000           2324              CMPI.L  #$8000, D4
00002B4E  6C00 001A               2325              BGE     NEG_WORD
00002B52  6D00 0002               2326              BLT     POS_WORD
00002B56                          2327              
00002B56  347C 2B62               2328  POS_WORD    MOVE.W  #BRA_WORD_BK, A2
00002B5A  D845                    2329              ADD.W   D5, D4 * D4 now has $100E
00002B5C  4EF9 00003202           2330              JMP     LOAD_ABS_SHORT
00002B62  4EB9 0000325A           2331  BRA_WORD_BK JSR     LOAD_NEW_LINE
00002B68  4E75                    2332              RTS
00002B6A                          2333  
00002B6A  347C 2B80               2334  NEG_WORD    MOVE.W  #BRA_WRD_BK2, A2
00002B6E  4444                    2335              NEG     D4
00002B70                          2336              
00002B70  B885                    2337              CMP.L   D5, D4 * $4002 vs DISPLACEMENT
00002B72  6E00 0798               2338              BGT     INVALID
00002B76                          2339              
00002B76  9A44                    2340              SUB.W   D4, D5 * D5 now has $1000 - 2cmp'ed $000E
00002B78  3805                    2341              MOVE.W  D5, D4
00002B7A  4EF9 00003202           2342              JMP     LOAD_ABS_SHORT
00002B80  4EB9 0000325A           2343  BRA_WRD_BK2 JSR     LOAD_NEW_LINE
00002B86  4E75                    2344              RTS
00002B88                          2345  
00002B88                          2346  
00002B88                          2347  
00002B88                          2348  LOAD_1101:
00002B88  0C38 0003 173B          2349              CMPI.B  #%011, SECOND_3
00002B8E  6700 0012               2350              BEQ     ADDA
00002B92  0C38 0007 173B          2351              CMPI.B  #%111, SECOND_3
00002B98  6700 0008               2352              BEQ     ADDA
00002B9C                          2353              
00002B9C  4EF9 00002BFC           2354              JMP     LOAD_1000
00002BA2                          2355              
00002BA2  367C 2BC0               2356  ADDA        MOVEA.W #ADDA_BACK, A3
00002BA6  4281                    2357              CLR.L   D1
00002BA8  1238 173B               2358              MOVE.B  SECOND_3, D1
00002BAC  0201 0004               2359              ANDI.B  #%100, D1
00002BB0                          2360              
00002BB0  0C01 0000               2361              CMPI.B  #%000, D1
00002BB4  6700 05EE               2362              BEQ     SIZE_W
00002BB8  0C01 0004               2363              CMPI.B  #%100, D1
00002BBC  6700 05EE               2364              BEQ     SIZE_L
00002BC0                          2365              
00002BC0  1638 173C               2366  ADDA_BACK   MOVE.B  THIRD_3, D3
00002BC4  1438 173D               2367              MOVE.B  FOURTH_3, D2
00002BC8                          2368  
00002BC8  4EB9 000030F8           2369              JSR     LOAD_EA
00002BCE  4EB9 0000325C           2370              JSR     LOAD_COMMA_SPACE
00002BD4                          2371              
00002BD4  163C 0001               2372              MOVE.B  #%001, D3
00002BD8  1438 173A               2373              MOVE.B  FIRST_3, D2
00002BDC                          2374              
00002BDC  4EB9 000030F8           2375              JSR     LOAD_EA
00002BE2  4EB9 0000325A           2376              JSR     LOAD_NEW_LINE
00002BE8  4E75                    2377              RTS
00002BEA                          2378  
00002BEA                          2379  LOAD_1100:
00002BEA  4EF9 00002BFC           2380      JMP     LOAD_1000
00002BF0                          2381      
00002BF0                          2382  LOAD_1011:
00002BF0  4EF9 00002BFC           2383      JMP     LOAD_1000
00002BF6                          2384  
00002BF6                          2385  
00002BF6                          2386  LOAD_1001:
00002BF6  4EF9 00002BFC           2387      JMP     LOAD_1000
00002BFC                          2388  
00002BFC                          2389  
00002BFC                          2390  LOAD_1000:
00002BFC  4283                    2391              CLR.L   D3
00002BFE  4282                    2392              CLR.L   D2
00002C00  267C 00000000           2393              MOVEA.L #0, A3
00002C06                          2394              
00002C06  0C38 0007 173B          2395              CMPI.B  #%111, SECOND_3
00002C0C  6700 00BA               2396              BEQ     DIVS
00002C10                          2397              
00002C10  0C38 0003 173B          2398              CMPI.B  #%011, SECOND_3
00002C16  6700 06F4               2399              BEQ     INVALID
00002C1A                          2400              
00002C1A  0C38 0004 173B          2401              CMPI.B  #%100, SECOND_3
00002C20  6D00 0006               2402              BLT     DIR_0 * direction bit 0
00002C24  6C00 0052               2403              BGE     DIR_1 * direction bit 1
00002C28                          2404              
00002C28  4281                    2405  DIR_0       CLR.L   D1
00002C2A  1238 173B               2406              MOVE.B  SECOND_3, D1
00002C2E  0201 0003               2407              ANDI.B  #%011, D1
00002C32                          2408      
00002C32  367C 2C4E               2409              MOVEA.W #OR_BACK, A3
00002C36  0C01 0000               2410              CMPI.B  #%00, D1
00002C3A  6700 0560               2411              BEQ     SIZE_B
00002C3E  0C01 0001               2412              CMPI.B  #%01, D1
00002C42  6700 0560               2413              BEQ     SIZE_W
00002C46  0C01 0002               2414              CMPI.B  #%10, D1
00002C4A  6700 0560               2415              BEQ     SIZE_L
00002C4E                          2416              
00002C4E  1638 173C               2417  OR_BACK     MOVE.B  THIRD_3, D3
00002C52  1438 173D               2418              MOVE.B  FOURTH_3, D2
00002C56                          2419  
00002C56  4EB9 000030F8           2420              JSR     LOAD_EA
00002C5C  4EB9 0000325C           2421              JSR     LOAD_COMMA_SPACE
00002C62                          2422              
00002C62  163C 0000               2423              MOVE.B  #%000, D3
00002C66  1438 173A               2424              MOVE.B  FIRST_3, D2
00002C6A                          2425              
00002C6A  4EB9 000030F8           2426              JSR     LOAD_EA
00002C70  4EB9 0000325A           2427              JSR     LOAD_NEW_LINE
00002C76  4E75                    2428              RTS
00002C78                          2429              
00002C78  163C 0000               2430  DIR_1       MOVE.B  #%000, D3
00002C7C  1438 173A               2431              MOVE.B  FIRST_3, D2
00002C80                          2432              
00002C80  4EB9 000030F8           2433              JSR     LOAD_EA
00002C86  4EB9 0000325C           2434              JSR     LOAD_COMMA_SPACE
00002C8C                          2435              
00002C8C  4281                    2436              CLR.L   D1
00002C8E  1238 173B               2437              MOVE.B  SECOND_3, D1
00002C92  0201 0003               2438              ANDI.B  #%011, D1
00002C96                          2439      
00002C96  367C 2CB2               2440              MOVEA.W #OR_BACK2, A3
00002C9A  0C01 0000               2441              CMPI.B  #%00, D1
00002C9E  6700 04FC               2442              BEQ     SIZE_B
00002CA2  0C01 0001               2443              CMPI.B  #%01, D1
00002CA6  6700 04FC               2444              BEQ     SIZE_W
00002CAA  0C01 0002               2445              CMPI.B  #%10, D1
00002CAE  6700 04FC               2446              BEQ     SIZE_L
00002CB2                          2447              
00002CB2  1638 173C               2448  OR_BACK2    MOVE.B  THIRD_3, D3
00002CB6  1438 173D               2449              MOVE.B  FOURTH_3, D2
00002CBA                          2450  
00002CBA  4EB9 000030F8           2451              JSR     LOAD_EA
00002CC0  4EB9 0000325A           2452              JSR     LOAD_NEW_LINE
00002CC6  4E75                    2453              RTS    
00002CC8                          2454              
00002CC8  367C 2CEA               2455  DIVS        MOVEA.W #DIVS_BACK, A3
00002CCC  0C38 0000 173D          2456              CMPI.B  #%000, FOURTH_3
00002CD2  6700 04D0               2457              BEQ     SIZE_W
00002CD6  0C38 0001 173D          2458              CMPI.B  #%001, FOURTH_3
00002CDC  6700 062E               2459              BEQ     INVALID
00002CE0  0C38 0004 173D          2460              CMPI.B  #%100, FOURTH_3
00002CE6  6700 04BC               2461              BEQ     SIZE_W
00002CEA                          2462              
00002CEA  1638 173C               2463  DIVS_BACK   MOVE.B  THIRD_3, D3
00002CEE  1438 173D               2464              MOVE.B  FOURTH_3, D2
00002CF2                          2465  
00002CF2  4EB9 000030F8           2466              JSR     LOAD_EA
00002CF8  4EB9 0000325C           2467              JSR     LOAD_COMMA_SPACE
00002CFE                          2468  
00002CFE  163C 0000               2469              MOVE.B  #%000, D3
00002D02  1438 173A               2470              MOVE.B  FIRST_3, D2
00002D06                          2471  
00002D06  4EB9 000030F8           2472              JSR     LOAD_EA
00002D0C  4EB9 0000325A           2473              JSR     LOAD_NEW_LINE
00002D12  4E75                    2474              RTS
00002D14                          2475  
00002D14                          2476  
00002D14                          2477  LOAD_0101:
00002D14  4283                    2478              CLR.L   D3
00002D16  4282                    2479              CLR.L   D2
00002D18  267C 00000000           2480              MOVEA.L #0, A3
00002D1E                          2481  
00002D1E  0C38 0007 173A          2482              CMPI.B  #%111, FIRST_3
00002D24  6F00 0008               2483              BLE     MYBE_SUBQ1
00002D28  4EF9 0000330C           2484              JMP     INVALID
00002D2E                          2485              
00002D2E  0C38 0003 173B          2486  MYBE_SUBQ1  CMPI.B  #%011, SECOND_3
00002D34  6E00 0008               2487              BGT     MYBE_SUBQ2
00002D38  4EF9 0000330C           2488              JMP     INVALID
00002D3E                          2489  
00002D3E  0C38 0007 173B          2490  MYBE_SUBQ2  CMPI.B  #%111, SECOND_3
00002D44  6D00 0008               2491              BLT     SUBQ
00002D48  4EF9 0000330C           2492              JMP     INVALID
00002D4E                          2493  
00002D4E  5238 173A               2494  SUBQ        ADDI.B  #%1, FIRST_3
00002D52  1838 173A               2495              MOVE.B  FIRST_3, D4
00002D56                          2496              
00002D56  347C 2D60               2497              MOVEA.W #SUBQ_SAVED, A2
00002D5A  4EF9 00003226           2498              JMP     LOAD_IMMDTE
00002D60                          2499              
00002D60  4EB9 0000325C           2500  SUBQ_SAVED  JSR     LOAD_COMMA_SPACE
00002D66                          2501  
00002D66  367C 2D88               2502              MOVEA.W #SUBQ_BACK, A3
00002D6A  0C38 0004 173B          2503              CMPI.B  #%100, SECOND_3
00002D70  6700 042A               2504              BEQ     SIZE_B
00002D74  0C38 0005 173B          2505              CMPI.B  #%101, SECOND_3
00002D7A  6700 0428               2506              BEQ     SIZE_W
00002D7E  0C38 0006 173B          2507              CMPI.B  #%110, SECOND_3
00002D84  6700 0426               2508              BEQ     SIZE_L
00002D88                          2509              
00002D88  1638 173C               2510  SUBQ_BACK   MOVE.B  THIRD_3, D3
00002D8C  1438 173D               2511              MOVE.B  FOURTH_3, D2
00002D90                          2512  
00002D90  4EB9 000030F8           2513              JSR     LOAD_EA
00002D96  4EB9 0000325A           2514              JSR     LOAD_NEW_LINE
00002D9C  4E75                    2515              RTS
00002D9E                          2516  
00002D9E                          2517  LOAD_0100:
00002D9E  4283                    2518              CLR.L   D3
00002DA0  4282                    2519              CLR.L   D2
00002DA2  267C 00000000           2520              MOVEA.L #0, A3
00002DA8                          2521  
00002DA8  0C38 0002 173A          2522              CMPI.B  #%010, FIRST_3
00002DAE  6700 0006               2523              BEQ     MYBE_NEG
00002DB2  6600 000C               2524              BNE     NOT_NEG
00002DB6  0C38 0003 173B          2525  MYBE_NEG    CMPI.B  #%011, SECOND_3
00002DBC  6D00 008E               2526              BLT     NEG
00002DC0                          2527  
00002DC0  0C38 0007 173A          2528  NOT_NEG     CMPI.B  #%111, FIRST_3
00002DC6  6700 0006               2529              BEQ     MYBE_RTS1
00002DCA  6600 0032               2530              BNE     NOT_RTS
00002DCE  0C38 0001 173B          2531  MYBE_RTS1   CMPI.B  #%001, SECOND_3
00002DD4  6700 0006               2532              BEQ     MYBE_RTS2
00002DD8  6600 0024               2533              BNE     NOT_RTS
00002DDC  0C38 0006 173C          2534  MYBE_RTS2   CMPI.B  #%110, THIRD_3
00002DE2  6700 0006               2535              BEQ     MYBE_RTS3
00002DE6  6600 0016               2536              BNE     NOT_RTS
00002DEA  0C38 0005 173D          2537  MYBE_RTS3   CMPI.B  #%101, FOURTH_3
00002DF0  6700 0092               2538              BEQ     RTS
00002DF4  0C38 0001 173D          2539              CMPI.B  #%001, FOURTH_3 
00002DFA  6700 0088               2540              BEQ     RTS * It's actually NOP but it's the same shit in EA perspective
00002DFE                          2541              
00002DFE  0C38 0007 173A          2542  NOT_RTS     CMPI.B  #%111, FIRST_3
00002E04  6700 0006               2543              BEQ     MYBE_JSR
00002E08  6600 000C               2544              BNE     NOT_JSR
00002E0C  0C38 0002 173B          2545  MYBE_JSR    CMPI.B  #%010, SECOND_3
00002E12  6700 0078               2546              BEQ     JSR
00002E16                          2547  
00002E16  4286                    2548  NOT_JSR     CLR.L   D6
00002E18  1C38 173A               2549              MOVE.B  FIRST_3, D6
00002E1C  0206 0005               2550              ANDI.B  #%101, D6 * Making %1X0 -> %100
00002E20  0C06 0004               2551              CMPI.B  #%100, D6
00002E24  6700 0006               2552              BEQ     MYBE_MOVEM
00002E28  6600 0012               2553              BNE     NOT_MOVEM
00002E2C                          2554              
00002E2C  1C38 173B               2555  MYBE_MOVEM  MOVE.B  SECOND_3, D6
00002E30  0206 0006               2556              ANDI.B  #%110, D6
00002E34  0C06 0002               2557              CMPI.B  #%010, D6
00002E38  6700 0080               2558              BEQ     MOVEM
00002E3C                          2559              
00002E3C  0C38 0007 173B          2560  NOT_MOVEM   CMPI.B  #%111, SECOND_3
00002E42  6700 007E               2561              BEQ     LEA
00002E46                          2562              
00002E46  4EF9 0000330C           2563              JMP     INVALID
00002E4C                          2564  
00002E4C                          2565  NEG:
00002E4C  367C 2E6E               2566              MOVEA.W #NEG_BACK, A3
00002E50  0C38 0000 173B          2567              CMPI.B  #%000, SECOND_3
00002E56  6700 0344               2568              BEQ     SIZE_B
00002E5A  0C38 0001 173B          2569              CMPI.B  #%001, SECOND_3
00002E60  6700 0342               2570              BEQ     SIZE_W
00002E64  0C38 0002 173B          2571              CMPI.B  #%010, SECOND_3
00002E6A  6700 0340               2572              BEQ     SIZE_L
00002E6E                          2573              
00002E6E  1638 173C               2574  NEG_BACK    MOVE.B  THIRD_3, D3
00002E72  1438 173D               2575              MOVE.B  FOURTH_3, D2
00002E76                          2576  
00002E76  4EB9 000030F8           2577              JSR     LOAD_EA
00002E7C  4EB9 0000325A           2578              JSR     LOAD_NEW_LINE
00002E82  4E75                    2579              RTS
00002E84                          2580              
00002E84                          2581  RTS:
00002E84  4EB9 0000325A           2582              JSR     LOAD_NEW_LINE
00002E8A  4E75                    2583              RTS
00002E8C                          2584  
00002E8C                          2585  JSR:
00002E8C  367C 2EA4               2586              MOVEA.W #JSR_BACK, A3
00002E90  0C38 0000 173D          2587              CMPI.B  #%000, FOURTH_3
00002E96  6700 030C               2588              BEQ     SIZE_W
00002E9A  0C38 0001 173D          2589              CMPI.B  #%001, FOURTH_3
00002EA0  6700 030A               2590              BEQ     SIZE_L
00002EA4                          2591              
00002EA4  1638 173C               2592  JSR_BACK    MOVE.B  THIRD_3, D3
00002EA8  1438 173D               2593              MOVE.B  FOURTH_3, D2
00002EAC                          2594              
00002EAC  4EB9 000030F8           2595              JSR     LOAD_EA
00002EB2  4EB9 0000325A           2596              JSR     LOAD_NEW_LINE
00002EB8  4E75                    2597              RTS
00002EBA                          2598  
00002EBA                          2599  MOVEM:
00002EBA  4EB9 0000325A           2600              JSR     LOAD_NEW_LINE
00002EC0  4E75                    2601              RTS
00002EC2                          2602      
00002EC2                          2603  LEA:
00002EC2  367C 2EE4               2604              MOVEA.W #LEA_BACK, A3
00002EC6  0C38 0000 173D          2605              CMPI.B  #%000, FOURTH_3
00002ECC  6700 02D6               2606              BEQ     SIZE_W
00002ED0  0C38 0001 173D          2607              CMPI.B  #%001, FOURTH_3
00002ED6  6700 02D4               2608              BEQ     SIZE_L
00002EDA  0C38 0004 173D          2609              CMPI.B  #%100, FOURTH_3
00002EE0  6700 042A               2610              BEQ     INVALID 
00002EE4                          2611              
00002EE4  1638 173C               2612  LEA_BACK    MOVE.B  THIRD_3, D3
00002EE8  1438 173D               2613              MOVE.B  FOURTH_3, D2
00002EEC                          2614              
00002EEC  4EB9 000030F8           2615              JSR     LOAD_EA
00002EF2  4EB9 0000325C           2616              JSR     LOAD_COMMA_SPACE
00002EF8                          2617              
00002EF8  163C 0001               2618              MOVE.B  #%001, D3
00002EFC  1438 173A               2619              MOVE.B  FIRST_3, D2
00002F00                          2620              
00002F00  4EB9 000030F8           2621              JSR     LOAD_EA
00002F06  4EB9 0000325A           2622              JSR     LOAD_NEW_LINE
00002F0C  4E75                    2623              RTS
00002F0E                          2624  
00002F0E                          2625  LOAD_0000:
00002F0E  4283                    2626              CLR.L   D3
00002F10  4282                    2627              CLR.L   D2
00002F12  267C 00000000           2628              MOVEA.L #0, A3
00002F18                          2629  
00002F18  0C38 0000 173A          2630              CMPI.B  #%000, FIRST_3
00002F1E  6700 0006               2631              BEQ     MYBE_ORI
00002F22  6600 000C               2632              BNE     NOT_ORI
00002F26  0C38 0003 173B          2633  MYBE_ORI    CMPI.B  #%011, SECOND_3
00002F2C  6D00 0042               2634              BLT     ORI_CMPI            
00002F30                          2635  
00002F30  0C38 0006 173A          2636  NOT_ORI     CMPI.B  #%110, FIRST_3
00002F36  6700 0006               2637              BEQ     MYBE_CMPI
00002F3A  6600 000C               2638              BNE     NOT_CMPI
00002F3E  0C38 0003 173B          2639  MYBE_CMPI   CMPI.B  #%011, SECOND_3
00002F44  6D00 002A               2640              BLT     ORI_CMPI
00002F48                          2641              
00002F48  0C38 0004 173A          2642  NOT_CMPI    CMPI.B  #%100, FIRST_3
00002F4E  6700 0006               2643              BEQ     MYBE_BCLR
00002F52  6600 000C               2644              BNE     NOT_BCLR
00002F56  0C38 0002 173B          2645  MYBE_BCLR   CMPI.B  #%010, SECOND_3
00002F5C  6700 0080               2646              BEQ     BCLR
00002F60                          2647  
00002F60  0C38 0006 173B          2648  NOT_BCLR    CMPI.B  #%110, SECOND_3
00002F66  6700 00E0               2649              BEQ     DYNMC_BCLR
00002F6A                          2650              
00002F6A  4EF9 0000330C           2651              JMP     INVALID
00002F70                          2652              
00002F70  367C 2F92               2653  ORI_CMPI    MOVEA.W #BACK, A3
00002F74  0C38 0000 173B          2654              CMPI.B  #%000, SECOND_3
00002F7A  6700 0220               2655              BEQ     SIZE_B
00002F7E  0C38 0001 173B          2656              CMPI.B  #%001, SECOND_3
00002F84  6700 021E               2657              BEQ     SIZE_W
00002F88  0C38 0002 173B          2658              CMPI.B  #%010, SECOND_3
00002F8E  6700 021C               2659              BEQ     SIZE_L
00002F92                          2660  
00002F92  163C 0007               2661  BACK        MOVE.B  #%111, D3
00002F96  143C 0004               2662              MOVE.B  #%100, D2
00002F9A                          2663              
00002F9A  4EB9 000030F8           2664              JSR     LOAD_EA
00002FA0  4EB9 0000325C           2665              JSR     LOAD_COMMA_SPACE
00002FA6                          2666              
00002FA6  367C 2FC8               2667              MOVEA.W #BACK2, A3   
00002FAA  0C38 0000 173D          2668              CMPI.B  #%000, FOURTH_3
00002FB0  6700 01F2               2669              BEQ     SIZE_W
00002FB4  0C38 0001 173D          2670              CMPI.B  #%001, FOURTH_3
00002FBA  6700 01F0               2671              BEQ     SIZE_L
00002FBE  0C38 0004 173D          2672              CMPI.B  #%100, FOURTH_3 
00002FC4  6700 0346               2673              BEQ     INVALID 
00002FC8                          2674  
00002FC8  1638 173C               2675  BACK2       MOVE.B  THIRD_3, D3
00002FCC  1438 173D               2676              MOVE.B  FOURTH_3, D2
00002FD0                          2677          
00002FD0  4EB9 000030F8           2678              JSR     LOAD_EA
00002FD6  4EB9 0000325A           2679              JSR     LOAD_NEW_LINE
00002FDC  4E75                    2680              RTS
00002FDE                          2681  
00002FDE  4285                    2682  BCLR        CLR.L   D5
00002FE0  4284                    2683              CLR.L   D4
00002FE2  247C 00000000           2684              MOVEA.L #0, A2
00002FE8                          2685  
00002FE8  3A0E                    2686              MOVE.W  A6, D5
00002FEA  9A4D                    2687              SUB.W   A5, D5
00002FEC  0C45 0002               2688              CMPI.W  #$2, D5
00002FF0  6D00 031A               2689              BLT     INVALID
00002FF4                          2690  
00002FF4  381D                    2691              MOVE.W  (A5)+, D4
00002FF6  4284                    2692              CLR.L   D4
00002FF8  381D                    2693              MOVE.W  (A5)+, D4
00002FFA  0244 00FF               2694              ANDI.W  #$00FF, D4
00002FFE  247C 0000300A           2695              MOVEA.L #BACK4, A2
00003004  4EF9 00003226           2696              JMP     LOAD_IMMDTE
0000300A                          2697              
0000300A  4EB9 0000325C           2698  BACK4       JSR     LOAD_COMMA_SPACE
00003010                          2699              
00003010  367C 3032               2700              MOVEA.W #BACK3, A3
00003014  0C38 0000 173D          2701              CMPI.B  #%000, FOURTH_3
0000301A  6700 0188               2702              BEQ     SIZE_W
0000301E  0C38 0001 173D          2703              CMPI.B  #%001, FOURTH_3
00003024  6700 0186               2704              BEQ     SIZE_L
00003028  0C38 0004 173D          2705              CMPI.B  #%100, FOURTH_3 
0000302E  6700 02DC               2706              BEQ     INVALID 
00003032                          2707  
00003032  1638 173C               2708  BACK3       MOVE.B  THIRD_3, D3
00003036  1438 173D               2709              MOVE.B  FOURTH_3, D2
0000303A                          2710  
0000303A  4EB9 000030F8           2711              JSR     LOAD_EA
00003040  4EB9 0000325A           2712              JSR     LOAD_NEW_LINE
00003046                          2713  
00003046  4E75                    2714              RTS
00003048                          2715  
00003048  163C 0000               2716  DYNMC_BCLR  MOVE.B  #%000, D3
0000304C  1438 173A               2717              MOVE.B  FIRST_3, D2
00003050                          2718              
00003050  4EB9 000030F8           2719              JSR     LOAD_EA
00003056  4EB9 0000325C           2720              JSR     LOAD_COMMA_SPACE
0000305C                          2721  
0000305C  367C 307E               2722              MOVEA.W #BACK5, A3
00003060  0C38 0000 173D          2723              CMPI.B  #%000, FOURTH_3
00003066  6700 013C               2724              BEQ     SIZE_W
0000306A  0C38 0001 173D          2725              CMPI.B  #%001, FOURTH_3
00003070  6700 013A               2726              BEQ     SIZE_L
00003074  0C38 0004 173D          2727              CMPI.B  #%100, FOURTH_3 
0000307A  6700 0290               2728              BEQ     INVALID 
0000307E                          2729              
0000307E  1638 173C               2730  BACK5       MOVE.B  THIRD_3, D3
00003082  1438 173D               2731              MOVE.B  FOURTH_3, D2
00003086                          2732              
00003086  4EB9 000030F8           2733              JSR     LOAD_EA
0000308C  4EB9 0000325A           2734              JSR     LOAD_NEW_LINE
00003092                          2735              
00003092  4E75                    2736              RTS
00003094                          2737  
00003094                          2738  LOAD_00XX:
00003094  4283                    2739          CLR.L   D3
00003096  4282                    2740          CLR.L   D2
00003098  267C 00000000           2741          MOVEA.L #0, A3
0000309E                          2742          
0000309E  367C 30B6               2743          MOVEA.W #GOO, A3
000030A2  0C38 0003 1739          2744          CMPI.B  #%0011, MNEMONIC
000030A8  6700 00FA               2745          BEQ     SIZE_W
000030AC  0C38 0002 1739          2746          CMPI.B  #%0010, MNEMONIC
000030B2  6700 00F8               2747          BEQ     SIZE_L
000030B6                          2748  
000030B6  1638 173C               2749  GOO     MOVE.B  THIRD_3, D3
000030BA  1438 173D               2750          MOVE.B  FOURTH_3, D2
000030BE                          2751      
000030BE  4EB9 000030F8           2752          JSR     LOAD_EA
000030C4  4EB9 0000325C           2753          JSR     LOAD_COMMA_SPACE
000030CA                          2754      
000030CA  367C 30E2               2755          MOVEA.W #GOO2, A3
000030CE  0C38 0000 173A          2756          CMPI.B  #%000, FIRST_3
000030D4  6700 00CE               2757          BEQ     SIZE_W
000030D8  0C38 0001 173A          2758          CMPI.B  #%001, FIRST_3
000030DE  6700 00CC               2759          BEQ     SIZE_L
000030E2                          2760      
000030E2  1638 173B               2761  GOO2    MOVE.B  SECOND_3, D3
000030E6  1438 173A               2762          MOVE.B  FIRST_3, D2
000030EA                          2763              
000030EA  4EB9 000030F8           2764          JSR     LOAD_EA
000030F0  4EB9 0000325A           2765          JSR     LOAD_NEW_LINE
000030F6                          2766      
000030F6  4E75                    2767          RTS
000030F8                          2768  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000030F8                          2769  
000030F8                          2770  
000030F8                          2771  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000030F8                          2772  
000030F8                          2773  LOAD_EA:
000030F8  347C 3108               2774          MOVEA.W #SAVED, A2 * remember to come back!
000030FC                          2775  
000030FC  0C43 0007               2776          CMPI    #%111, D3
00003100  6D00 0008               2777          BLT     LOAD_LT_111
00003104  6C00 0032               2778          BGE     LOAD_GE_111
00003108                          2779      
00003108  4E75                    2780  SAVED   RTS
0000310A                          2781  
0000310A                          2782  LOAD_LT_111:
0000310A  0C43 0000               2783      CMPI    #%000, D3 * e.g. D3
0000310E  6700 00A4               2784      BEQ     LOAD_DATA_REGISTER
00003112  0C43 0001               2785      CMPI    #%001, D3 * e.g. A3
00003116  6700 00AE               2786      BEQ     LOAD_ADDR_REGISTER
0000311A  0C43 0002               2787      CMPI    #%010, D3 * e.g. (A3)
0000311E  6700 00B8               2788      BEQ     LOAD_ADDRESS
00003122  0C43 0003               2789      CMPI    #%011, D3 * e.g. (A3)+
00003126  6700 00C2               2790      BEQ     LOAD_ADDRESS_W_POST_INC
0000312A  0C43 0004               2791      CMPI    #%100, D3 * e.g. -(A3)
0000312E  6700 00C6               2792      BEQ     LOAD_ADDRESS_W_PRE_DEC
00003132                          2793      
00003132  4EF9 0000330C           2794      JMP     INVALID
00003138                          2795      
00003138                          2796  LOAD_GE_111:
00003138  4285                    2797              CLR.L   D5
0000313A  4284                    2798              CLR.L   D4
0000313C                          2799  
0000313C  3A0E                    2800              MOVE.W  A6, D5
0000313E  9A4D                    2801              SUB.W   A5, D5
00003140  BA78 28BC               2802              CMP.W   TRAILING_SIZE, D5
00003144  6D00 01C6               2803              BLT     INVALID
00003148                          2804  
00003148  0C78 0001 28BC          2805              CMPI.W  #$1, TRAILING_SIZE
0000314E  6700 0016               2806              BEQ     CHUMP_BYTE
00003152  0C78 0002 28BC          2807              CMPI.W  #$2, TRAILING_SIZE
00003158  6700 0014               2808              BEQ     CHUMP_WORD
0000315C  0C78 0004 28BC          2809              CMPI.W  #$4, TRAILING_SIZE
00003162  6700 0012               2810              BEQ     CHUMP_LONG
00003166                          2811  
00003166  381D                    2812  CHUMP_BYTE  MOVE.W  (A5)+, D4 * Minimum 4 hex (e.g. MOVE.B #1, $2 = XXXX 0001 0002)
00003168  4EF9 0000317E           2813              JMP     GO
0000316E                          2814  
0000316E  381D                    2815  CHUMP_WORD  MOVE.W  (A5)+, D4
00003170  4EF9 0000317E           2816              JMP     GO
00003176                          2817              
00003176  281D                    2818  CHUMP_LONG  MOVE.L  (A5)+, D4
00003178  4EF9 0000317E           2819              JMP     GO
0000317E                          2820  
0000317E  0C42 0000               2821  GO          CMPI    #%000, D2
00003182  6700 007E               2822              BEQ     LOAD_ABS_SHORT
00003186  0C42 0001               2823              CMPI    #%001, D2
0000318A  6700 0088               2824              BEQ     LOAD_ABS_LONG
0000318E  0C42 0004               2825              CMPI    #%100, D2
00003192  6700 0092               2826              BEQ     LOAD_IMMDTE
00003196                          2827      
00003196  4EF9 0000330C           2828              JMP     INVALID
0000319C                          2829  TRAILING_HELPER:            
0000319C  31FC 0002 28BC          2830  SIZE_B  MOVE.W  #$2, TRAILING_SIZE
000031A2  4ED3                    2831          JMP     (A3)
000031A4                          2832  
000031A4  31FC 0002 28BC          2833  SIZE_W  MOVE.W  #$2, TRAILING_SIZE
000031AA  4ED3                    2834          JMP     (A3)
000031AC                          2835          
000031AC  31FC 0004 28BC          2836  SIZE_L  MOVE.W  #$4, TRAILING_SIZE
000031B2  4ED3                    2837          JMP     (A3)
000031B4                          2838  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000031B4                          2839  
000031B4                          2840  
000031B4                          2841  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000031B4                          2842  
000031B4                          2843  LOAD_DATA_REGISTER:
000031B4  4280                    2844      CLR.L   D0
000031B6                          2845      
000031B6  4EB9 00003274           2846      JSR     LOAD_D
000031BC  1002                    2847      MOVE.B  D2, D0
000031BE  4EB9 000032E8           2848      JSR     LOAD_NUM
000031C4  4ED2                    2849      JMP     (A2)
000031C6                          2850  
000031C6                          2851  LOAD_ADDR_REGISTER:
000031C6  4280                    2852      CLR.L   D0
000031C8                          2853  
000031C8  4EB9 00003282           2854      JSR     LOAD_A
000031CE  1002                    2855      MOVE.B  D2, D0
000031D0  4EB9 000032E8           2856      JSR     LOAD_NUM
000031D6  4ED2                    2857      JMP     (A2)
000031D8                          2858  
000031D8                          2859  LOAD_ADDRESS:
000031D8  4EB9 00003290           2860      JSR     LOAD_PTHSIS_OPEN
000031DE  4EB8 31C6               2861      JSR     LOAD_ADDR_REGISTER
000031E2  4EB9 0000329E           2862      JSR     LOAD_PTHSIS_CLSD
000031E8  4ED2                    2863      JMP     (A2)
000031EA                          2864  
000031EA                          2865  LOAD_ADDRESS_W_POST_INC:
000031EA  4EB8 31D8               2866      JSR     LOAD_ADDRESS
000031EE  4EB9 000032C8           2867      JSR     LOAD_PLUS_SIGN
000031F4  4ED2                    2868      JMP     (A2)
000031F6                          2869  
000031F6                          2870  LOAD_ADDRESS_W_PRE_DEC:
000031F6  4EB9 000032D6           2871      JSR     LOAD_MINUS_SIGN
000031FC  4EB8 31D8               2872      JSR     LOAD_ADDRESS
00003200  4ED2                    2873      JMP     (A2)
00003202                          2874  
00003202                          2875  LOAD_ABS_SHORT:
00003202  4280                    2876      CLR.L   D0
00003204                          2877  
00003204  4EB9 000032AC           2878      JSR     LOAD_HEX_SIGN
0000320A  3004                    2879      MOVE.W  D4, D0
0000320C  4EB9 00003230           2880      JSR     LOAD_BYTES
00003212  4ED2                    2881      JMP     (A2)
00003214                          2882  
00003214                          2883  LOAD_ABS_LONG:
00003214  4280                    2884      CLR.L   D0
00003216                          2885  
00003216  4EB9 000032AC           2886      JSR     LOAD_HEX_SIGN
0000321C  2004                    2887      MOVE.L  D4, D0
0000321E  4EB9 00003230           2888      JSR     LOAD_BYTES
00003224  4ED2                    2889      JMP     (A2)
00003226                          2890  
00003226                          2891  LOAD_IMMDTE:
00003226  4EB9 000032BA           2892      JSR     LOAD_IMMDTE_VALU
0000322C  4EF8 3214               2893      JMP     LOAD_ABS_LONG
00003230                          2894  
00003230                          2895  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003230                          2896  
00003230                          2897  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003230                          2898  
00003230                          2899  LOAD_BYTES:
00003230  4285                    2900          CLR.L   D5
00003232  4281                    2901          CLR.L   D1
00003234                          2902  
00003234  2200                    2903          MOVE.L  D0, D1
00003236  1A3C 0008               2904          MOVE.B  #8, D5
0000323A  0C45 0000               2905  LOOP    CMPI    #0, D5
0000323E  6E00 0004               2906          BGT     ROTATE
00003242  4E75                    2907          RTS
00003244                          2908      
00003244  E999                    2909  ROTATE  ROL.L   #$04, D1
00003246  1001                    2910          MOVE.B  D1, D0
00003248  0280 0000000F           2911          ANDI.L  #$0000000F, D0
0000324E  4EB9 000032E8           2912          JSR     LOAD_NUM
00003254  5345                    2913          SUBI    #1, D5
00003256  4EF8 323A               2914          JMP     LOOP        
0000325A                          2915  
0000325A                          2916  LOAD_NEW_LINE:          ;Depreciated method due to IO
0000325A  4E75                    2917      RTS
0000325C                          2918  
0000325C                          2919  LOAD_COMMA_SPACE:
0000325C  4280                    2920      CLR.L   D0
0000325E                          2921  
0000325E  1038 28BA               2922      MOVE.B  COMMA, D0
00003262  4EB9 000032E4           2923      JSR     LOAD_THIS_SHIT
00003268  1038 28BB               2924      MOVE.B  SPACE, D0
0000326C  4EB9 000032E4           2925      JSR     LOAD_THIS_SHIT
00003272                          2926      
00003272  4E75                    2927      RTS
00003274                          2928  
00003274                          2929  LOAD_D:
00003274  4280                    2930      CLR.L   D0
00003276                          2931  
00003276  1038 28B3               2932      MOVE.B  DATA, D0
0000327A  4EB9 000032E4           2933      JSR     LOAD_THIS_SHIT
00003280  4E75                    2934      RTS
00003282                          2935  
00003282                          2936  LOAD_A:
00003282  4280                    2937      CLR.L   D0
00003284                          2938  
00003284  1038 28B2               2939      MOVE.B  ADDRESS, D0
00003288  4EB9 000032E4           2940      JSR     LOAD_THIS_SHIT
0000328E  4E75                    2941      RTS
00003290                          2942  
00003290                          2943  LOAD_PTHSIS_OPEN:
00003290  4280                    2944      CLR.L   D0
00003292                          2945  
00003292  1038 28B4               2946      MOVE.B  PTHSIS_OPEN, D0
00003296  4EB9 000032E4           2947      JSR     LOAD_THIS_SHIT
0000329C  4E75                    2948      RTS
0000329E                          2949  
0000329E                          2950  LOAD_PTHSIS_CLSD:
0000329E  4280                    2951      CLR.L   D0
000032A0                          2952  
000032A0  1038 28B5               2953      MOVE.B  PTHSIS_CLSD, D0
000032A4  4EB9 000032E4           2954      JSR     LOAD_THIS_SHIT
000032AA  4E75                    2955      RTS
000032AC                          2956  
000032AC                          2957  LOAD_HEX_SIGN:
000032AC  4280                    2958      CLR.L   D0
000032AE                          2959  
000032AE  1038 28B6               2960      MOVE.B  HEX_SIGN, D0
000032B2  4EB9 000032E4           2961      JSR     LOAD_THIS_SHIT
000032B8  4E75                    2962      RTS
000032BA                          2963  
000032BA                          2964  LOAD_IMMDTE_VALU:
000032BA  4280                    2965      CLR.L   D0
000032BC                          2966  
000032BC  1038 28B7               2967      MOVE.B  IMMDTE_VALU, D0
000032C0  4EB9 000032E4           2968      JSR     LOAD_THIS_SHIT
000032C6  4E75                    2969      RTS
000032C8                          2970  
000032C8                          2971  LOAD_PLUS_SIGN:
000032C8  4280                    2972      CLR.L   D0
000032CA                          2973  
000032CA  1038 28B8               2974      MOVE.B  PLUS_SIGN, D0
000032CE  4EB9 000032E4           2975      JSR     LOAD_THIS_SHIT
000032D4  4E75                    2976      RTS
000032D6                          2977  
000032D6                          2978  LOAD_MINUS_SIGN:
000032D6  4280                    2979      CLR.L   D0
000032D8                          2980  
000032D8  1038 28B9               2981      MOVE.B  MINUS_SIGN, D0
000032DC  4EB9 000032E4           2982      JSR     LOAD_THIS_SHIT
000032E2  4E75                    2983      RTS
000032E4                          2984  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000032E4                          2985  
000032E4                          2986  
000032E4                          2987  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000032E4                          2988  LOAD_THIS_SHIT:
000032E4  18C0                    2989      MOVE.B  D0, (A4)+
000032E6  4E75                    2990      RTS
000032E8                          2991  
000032E8                          2992  LOAD_NUM:
000032E8  0C00 0009               2993      CMPI.B  #$9, D0
000032EC  6E00 0006               2994      BGT     GT
000032F0  6F00 000C               2995      BLE     LE
000032F4                          2996      
000032F4  0600 0037               2997  GT  ADDI.B  #$37, D0 * A~F
000032F8  4EF9 00003308           2998      JMP     END
000032FE  0600 0030               2999  LE  ADDI.B  #$30, D0 * 0~9
00003302  4EF9 00003308           3000      JMP     END
00003308                          3001  
00003308  18C0                    3002  END MOVE.B  D0, (A4)+
0000330A  4E75                    3003      RTS
0000330C                          3004  
0000330C                          3005  INVALID:
0000330C  11FC 0000 10A2          3006              MOVE.B  #%0, IS_VALID
00003312  4EF8 28C8               3007              JMP     EXT
00003316                          3008  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003316                          3009  
00003316                          3010  
00003316                          3011  
00003316                          3012  
00003316                          3013  
00003316                          3014  
00003316                          3015  
00003316                          3016  
00003316                          3017  
00003316                          3018  -------------------- end include --------------------
00003316                          3019      INCLUDE "Test.x68"                              ;Test program to include
00003316                          3020  
00009000                          3021      ORG $9000
00009000                          3022      ;ADDQ.B      #8,$8000
00009000                          3023      ;AND.W       $00004900,D6   ;investigate
00009000                          3024      
00009000  727A                    3025      MOVEQ.L     #122,D1    
00009002                          3026  
00009002  D282                    3027      ADD.L   D2,D1
00009004                          3028      
00009004  D379 00008000           3029      ADD.W   D1,$8000
0000900A                          3030      
0000900A  D212                    3031      ADD.B   (A2),D1
0000900C                          3032      
0000900C  D757                    3033      ADD.W   D3,(A7)
0000900E                          3034  
0000900E  DE1D                    3035      ADD.B   (A5)+,D7
00009010                          3036  
00009010  D99B                    3037      ADD.L   D4,(A3)+
00009012                          3038  
00009012  D661                    3039      ADD.W   -(A1),D3  
00009014                          3040      
00009014  D325                    3041      ADD.B   D1,-(A5)
00009016                          3042     
00009016  DFFC 00000012           3043      ADDA.L      #18,A7
0000901C                          3044  
0000901C  DAFC 00C7               3045      ADDA.W      #199,A5
00009020                          3046  
00009020  D5C1                    3047      ADDA.L      D1,A2
00009022                          3048  
00009022  D2C2                    3049      ADDA.W      D2,A1
00009024                          3050  
00009024  D4C9                    3051      ADDA.W      A1,A2
00009026                          3052  
00009026  DDC9                    3053      ADDA.L      A1,A6
00009028                          3054  
00009028  D4D1                    3055      ADDA.W      (A1),A2
0000902A                          3056  
0000902A  DDE1                    3057      ADDA.L      -(A1),A6
0000902C                          3058  
0000902C  D4D9                    3059      ADDA.W      (A1)+,A2
0000902E                          3060  
0000902E  D8FC 8000               3061      ADDA.W      #$8000,A4
00009032                          3062  
00009032  D9FC 00008000           3063      ADDA.L      #$8000,A4
00009038                          3064  
00009038  D4C9                    3065      ADDA.W      A1,A2
0000903A                          3066  
0000903A  DDC9                    3067      ADDA.L      A1,A6       
0000903C                          3068  
0000903C  5206                    3069      ADDQ.B      #1,D6
0000903E                          3070  
0000903E  5446                    3071      ADDQ.W      #2,D6
00009040                          3072  
00009040  5886                    3073      ADDQ.L      #4,D6    
00009042                          3074  
00009042  544A                    3075      ADDQ.W      #2,A2
00009044                          3076  
00009044  588D                    3077      ADDQ.L      #4,A5    
00009046                          3078  
00009046  5213                    3079      ADDQ.B      #1,(A3)
00009048                          3080  
00009048  545B                    3081      ADDQ.W      #2,(A3)+
0000904A                          3082  
0000904A  58A3                    3083      ADDQ.L      #4,-(A3)
0000904C                          3084  
0000904C  5678 4000               3085      ADDQ.W      #3,$4000
00009050                          3086  
00009050  C240                    3087      AND.W       D0,D1
00009052                          3088  
00009052  C200                    3089      AND.B       D0,D1
00009054                          3090  
00009054  C287                    3091      AND.L       D7,D1
00009056                          3092  
00009056  C5B8 4000               3093      AND.L       D2,$00004000
0000905A                          3094  
0000905A  C779 00014000           3095      AND.W       D3,$00014000
00009060                          3096  
00009060  C339 00011000           3097      AND.B       D1,$00011000
00009066                          3098  
00009066  C4B8 4000               3099      AND.L       $00004000,D2
0000906A                          3100  
0000906A  C238 4A00               3101      AND.B       $00004A00,D1 
0000906E                          3102  
0000906E  C353                    3103      AND.W       D1,(A3)
00009070                          3104  
00009070  CE17                    3105      AND.B      (A7),D7
00009072                          3106  
00009072  C363                    3107      AND.W       D1,-(A3)
00009074                          3108  
00009074  CEA7                    3109      AND.L      -(A7),D7
00009076                          3110  
00009076  C39B                    3111      AND.L      D1,(A3)+
00009078                          3112  
00009078  CE5F                    3113      AND.W       (A7)+,D7
0000907A                          3114  
0000907A  84C1                    3115      DIVU         D1,D2
0000907C                          3116  
0000907C  8CF8 0011               3117      DIVU         $00000011,D6
00009080                          3118  
00009080  80D0                    3119      DIVU         (A0),D0
00009082                          3120  
00009082  80E0                    3121      DIVU         -(A0),D0   
00009084                          3122  
00009084  80D8                    3123      DIVU         (A0)+,D0
00009086                          3124  
00009086  82F8 1000               3125      DIVU         $0001000,D1
0000908A                          3126  
0000908A  82F9 00008000           3127      DIVU         $8000,D1
00009090                          3128  
00009090  6000 106E               3129      BRA     $A100
00009094                          3130  
00009094  6000 0F93               3131      BRA     $A029
00009098                          3132  
00009098                          3133      *Negative 8 bit displacement
00009098  6000 0EEC               3134      BRA     $9F86
0000909C                          3135  
0000909C  6000 0F56               3136      BRA     $9FF4
000090A0                          3137  
000090A0  6000 0F62               3138      BRA     $A004
000090A4                          3139  
000090A4                          3140      
000090A4                          3141      *Positive 8 bit displacement
000090A4  6000 0F83               3142      BRA     $A029
000090A8                          3143  
000090A8  6000 0FDB               3144      BRA     $A085
000090AC                          3145  
000090AC  6000 0F62               3146      BRA     $A010
000090B0                          3147  
000090B0  6000 0FDD               3148      BRA     $A08F
000090B4                          3149     
000090B4  E3F9 00FF0000           3150      LSL.W     $00FF0000
000090BA                          3151  
000090BA  E3E8 0020               3152      LSL.W     $20(a0)
000090BE                          3153  
000090BE  E3D8                    3154      LSL.W    (a0)+
000090C0                          3155  
000090C0  E3E0                    3156      LSL.W     -(a0)
000090C2                          3157  
000090C2                          3158      
000090C2  E2F9 00080000           3159      LSR.W     $00080000
000090C8                          3160  
000090C8  E2E8 0020               3161      LSR.W     $20(a0)
000090CC                          3162  
000090CC  E2D8                    3163      LSR.W    (a0)+
000090CE                          3164  
000090CE  E2E0                    3165      LSR.W     -(a0)
000090D0                          3166  
000090D0  E1F9 00230000           3167      ASL.W     $230000
000090D6                          3168  
000090D6  E1E8 0020               3169      ASL.W     $20(a0)
000090DA                          3170  
000090DA  E1D8                    3171      ASL.W    (a0)+
000090DC                          3172  
000090DC  E1E0                    3173      ASL.W     -(a0)
000090DE                          3174      
000090DE  E0F9 00AA0000           3175      ASR.W     $AA0000
000090E4                          3176  
000090E4  E0E8 0020               3177      ASR.W     $20(a0)
000090E8                          3178  
000090E8  E0D8                    3179      ASR.W    (a0)+
000090EA                          3180  
000090EA  E0E0                    3181      ASR.W     -(a0)
000090EC                          3182      
000090EC  E3F8 4000               3183      LSL.W     $4000
000090F0                          3184   
000090F0  12BC 0013               3185      MOVE.B      #19,(A1)
000090F4                          3186  
000090F4  233C 0000000C           3187      MOVE.L      #12,-(A1)
000090FA                          3188  
000090FA  32FC 07BE               3189      MOVE.W      #1982,(A1)+
000090FE                          3190  
000090FE  163C 0013               3191      MOVE.B      #19,D3
00009102                          3192  
00009102  740C                    3193      MOVE.L      #12,D2
00009104                          3194  
00009104  323C 07BE               3195      MOVE.W      #1982,D1
00009108                          3196  
00009108  323C 19AA               3197      MOVE.W      #$19AA,D1 
0000910C                          3198          
0000910C  2E7C 00000012           3199      MOVEA.L      #18,A7
00009112                          3200  
00009112  3A7C 00C7               3201      MOVEA.W      #199,A5
00009116                          3202  
00009116  2441                    3203      MOVEA.L      D1,A2
00009118                          3204  
00009118  3242                    3205      MOVEA.W      D2,A1
0000911A                          3206  
0000911A  3449                    3207      MOVEA.W      A1,A2
0000911C                          3208  
0000911C  2C49                    3209      MOVEA.L      A1,A6
0000911E                          3210  
0000911E  3451                    3211      MOVEA.W      (A1),A2
00009120                          3212  
00009120  2C61                    3213      MOVEA.L      -(A1),A6
00009122                          3214  
00009122  3459                    3215      MOVEA.W      (A1)+,A2
00009124                          3216  
00009124  367C 0013               3217      MOVEA.W     #19,A3
00009128                          3218  
00009128  2A7C 00000798           3219      MOVEA.L     #1944,A5
0000912E                          3220  
0000912E  3449                    3221      MOVEA.W      A1,A2
00009130                          3222  
00009130  2C49                    3223      MOVEA.L      A1,A6
00009132                          3224  
00009132  48A1 007F               3225      MOVEM.W   A1-A7,-(A1)
00009136                          3226  
00009136  48E1 7F00               3227      MOVEM.L   D1-D7,-(A1)
0000913A                          3228  
0000913A  48A1 0140               3229      MOVEM.W   A1/D7,-(A1)
0000913E                          3230  
0000913E  48E1 0140               3231      MOVEM.L   A1/D7,-(A1)
00009142                          3232  
00009142  4891 FE00               3233      MOVEM.W   A1-A7,(A1)
00009146                          3234   
00009146  727A                    3235      MOVEQ.L     #122,D1
00009148                          3236  
00009148  740B                    3237      MOVEQ.L     #11,D2
0000914A                          3238  
0000914A  766F                    3239      MOVEQ.L     #111,D3
0000914C                          3240  
0000914C  7E65                    3241      MOVEQ.L     #101,D7
0000914E                          3242  
0000914E  740C                    3243      MOVEQ.L     #12,D2
00009150                          3244  
00009150  C5C1                    3245      MULS         D1,D2
00009152                          3246  
00009152  CDF8 0011               3247      MULS         $00000011,D6
00009156                          3248  
00009156  C1D1                    3249      MULS         (A1),D0
00009158                          3250  
00009158  C5E5                    3251      MULS         -(A5),D2   
0000915A                          3252  
0000915A  C3D8                    3253      MULS         (A0)+,D1
0000915C                          3254  
0000915C  C9F8 1000               3255      MULS         $0001000,D4
00009160                          3256  
00009160  C7F9 00008000           3257      MULS         $8000,D3 
00009166                          3258  
00009166  4600                    3259      NOT.B   D0
00009168                          3260  
00009168  4641                    3261      NOT.W   D1
0000916A                          3262  
0000916A  4682                    3263      NOT.L   D2
0000916C                          3264  
0000916C  4610                    3265      NOT.B   (A0)
0000916E                          3266  
0000916E  4660                    3267      NOT.W   -(A0)
00009170                          3268  
00009170  4698                    3269      NOT.L   (A0)+ 
00009172                          3270  
00009172  4679 00008000           3271      NOT     $8000
00009178                          3272  
00009178  4678 4000               3273      NOT.W   $4000
0000917C                          3274       
0000917C  8240                    3275      OR.W       D0,D1
0000917E                          3276  
0000917E  8200                    3277      OR.B       D0,D1
00009180                          3278  
00009180  8287                    3279      OR.L       D7,D1
00009182                          3280  
00009182  85B8 4000               3281      OR.L       D2,$4000
00009186                          3282  
00009186  8779 00014000           3283      OR.W       D3,$00014000
0000918C                          3284  
0000918C  8339 00011000           3285      OR.B       D1,$00011000
00009192                          3286  
00009192  84B8 5000               3287      OR.L       $5000,D2
00009196                          3288  
00009196  8C78 6900               3289      OR.W       $6900,D6
0000919A                          3290  
0000919A  8238 4A00               3291      OR.B       $4A00,D1 
0000919E                          3292  
0000919E  8353                    3293      OR.W       D1,(A3)
000091A0                          3294  
000091A0  8E17                    3295      OR.B      (A7),D7
000091A2                          3296  
000091A2  8363                    3297      OR.W       D1,-(A3)
000091A4                          3298  
000091A4  8EA7                    3299      OR.L      -(A7),D7
000091A6                          3300  
000091A6  835B                    3301      OR.W       D1,(A3)+
000091A8                          3302  
000091A8  8E9F                    3303      OR.L      (A7)+,D7 
000091AA                          3304          
000091AA  E50B                    3305      LSL.B   #2,D3
000091AC                          3306  
000091AC  E14A                    3307      LSL.W   #8,D2
000091AE                          3308  
000091AE  EF89                    3309      LSL.L   #7,D1
000091B0                          3310  
000091B0  E42B                    3311      LSR.B   D2,D3
000091B2                          3312  
000091B2  E26A                    3313      LSR.W   D1,D2
000091B4                          3314  
000091B4  EEA9                    3315      LSR.L   D7,D1
000091B6                          3316  
000091B6  E503                    3317      ASL.B   #2,D3
000091B8                          3318  
000091B8  E142                    3319      ASL.W   #8,D2
000091BA                          3320  
000091BA  EF81                    3321      ASL.L   #7,D1
000091BC                          3322  
000091BC  E423                    3323      ASR.B   D2,D3
000091BE                          3324  
000091BE  E262                    3325      ASR.W   D1,D2
000091C0                          3326  
000091C0  EFA1                    3327      ASL.L   D7,D1
000091C2                          3328  
000091C2  9282                    3329      SUB.L   D2,D1
000091C4                          3330  
000091C4  9379 00008000           3331      SUB.W   D1,$8000
000091CA                          3332  
000091CA  9212                    3333      SUB.B   (A2),D1
000091CC                          3334  
000091CC  9757                    3335      SUB.W   D3,(A7)
000091CE                          3336  
000091CE  9E1D                    3337      SUB.B   (A5)+,D7
000091D0                          3338  
000091D0  999B                    3339      SUB.L   D4,(A3)+
000091D2                          3340  
000091D2  9661                    3341      SUB.W   -(A1),D3
000091D4                          3342  
000091D4  9325                    3343      SUB.B   D1,-(A5)
000091D6                          3344   
000091D6  E3D9                    3345      LSL.W (A1)+         ;finished testing
000091D8                          3346      
000091D8  C3D0                    3347      MULS.W (A0),D1      ;finished testing
000091DA                          3348      
000091DA  9399                    3349      SUB.L D1,(A1)+      ;finished testing
000091DC                          3350      
000091DC  93C1                    3351      SUB.L D1,A1         ;finished testing
000091DE                          3352      
000091DE  9391                    3353      SUB.L D1,(A1)       ;finished testing
000091E0                          3354      
000091E0  93A1                    3355      SUB.L D1,-(A1)      ;finished  testing
000091E2                          3356      
000091E2  92C1                    3357      SUB.W D1,A1         ;finished  testing
000091E4                          3358      
000091E4  D5C1                    3359      ADDA.L D1,A2        ;finishtes testing
000091E6                          3360  
000091E6  E289                    3361      LSR.L #$1,D1        ; CHECK THIS Prints #$1,A1 instead of #$,D1    
000091E8                          3362          
000091E8  5301                    3363      SUBQ.B #$1,D1       ; CHECK THIS Prints #$2,D1 instead of #$1,D1
000091EA                          3364       
000091EA  E709                    3365      LSL.B #3,D1         ; CHECK THIS Prints #3,A1 instead of #3,D1
000091EC                          3366      
000091EC  5301                    3367      SUBQ.B #$1,D1       ; CHECK THIS Prints #$2,D1 instead of #$1,D1
000091EE                          3368  
000091EE  0881 0003               3369      BCLR.L #$3,D1       ; CHECK THIS Prints #$57,D1 instead of #$3,D1
000091F2                          3370      
000091F2                          3371      ;LSR.W #$1,D1        ; This doesn't show up if it's placed right after BCLR    
000091F2                          3372      ;LSL.W #$1,D1        ; This doesn't show up if it's placed right after BCLR    
000091F2                          3373      
000091F2                          3374      ;ASL.B  D3,D5     
000091F2                          3375      ;ASR.W  D3,D5
000091F2  0041 2501               3376      ORI.W #$2501, D1
000091F6                          3377       
000091F6  E7BD                    3378      ROL.L  D3,D5     
000091F8                          3379     
000091F8  E6BD                    3380      ROR.L  D3,D5     
000091FA  8497                    3381      OR.L (SP),D2
000091FC                          3382      
000091FC  8358                    3383      OR.W D1,(A0)+
000091FE                          3384      
000091FE  4E71                    3385      NOP
00009200                          3386      
00009200  4E75                    3387      RTS
00009202                          3388      
00009202  4E71                    3389      NOP
00009204                          3390      
00009204  4E75                    3391      RTS
00009206                          3392      
00009206  0041 2501               3393      ORI.W #$2501, D1
0000920A                          3394      
0000920A  5300                    3395      SUBQ.B  #1,D0
0000920C                          3396      
0000920C  5541                    3397      SUBQ.W  #$2, D1
0000920E                          3398      
0000920E  5982                    3399      SUBQ.L  #4,D2
00009210                          3400      
00009210  41D0                    3401      LEA     (A0),A0
00009212                          3402      
00009212  41D1                    3403      LEA     (A1),A0
00009214                          3404      
00009214  41F8 0100               3405      LEA     $0100,A0
00009218                          3406      
00009218  41F9 00009300           3407      LEA     $9300,A0
0000921E                          3408      
0000921E  41D5                    3409      LEA     (A5),A0
00009220                          3410  
00009220  41D7                    3411      LEA     (A7),A0
00009222                          3412  
00009222  4FD0                    3413      LEA     (A0),A7
00009224                          3414  
00009224  4FD5                    3415      LEA     (A5),A7
00009226                          3416  
00009226  4FD7                    3417      LEA     (A7),A7
00009228                          3418  
00009228  4200                    3419      CLR.B     D0
0000922A                          3420  
0000922A  4207                    3421      CLR.B     D7
0000922C                          3422  
0000922C  4240                    3423      CLR.W     D0
0000922E                          3424  
0000922E  4247                    3425      CLR.W     D7
00009230                          3426  
00009230  4280                    3427      CLR.L     D0
00009232                          3428  
00009232  4287                    3429      CLR.L     D7
00009234                          3430  
00009234  4210                    3431      CLR.B     (A0)
00009236                          3432  
00009236  4217                    3433      CLR.B     (A7)
00009238                          3434  
00009238  4250                    3435      CLR.W     (A0)
0000923A                          3436  
0000923A  4257                    3437      CLR.W     (A7)
0000923C                          3438  
0000923C  4290                    3439      CLR.L     (A0)
0000923E                          3440  
0000923E  4297                    3441      CLR.L     (A7)
00009240                          3442  
00009240  4218                    3443      CLR.B     (A0)+
00009242                          3444  
00009242  421F                    3445      CLR.B     (A7)+
00009244                          3446  
00009244  4258                    3447      CLR.W     (A0)+
00009246                          3448  
00009246  425F                    3449      CLR.W     (A7)+
00009248                          3450  
00009248  4298                    3451      CLR.L     (A0)+
0000924A                          3452  
0000924A  429F                    3453      CLR.L     (A7)+
0000924C                          3454  
0000924C  4220                    3455      CLR.B     -(A0)
0000924E                          3456  
0000924E  4227                    3457      CLR.B     -(A7)
00009250                          3458  
00009250  4260                    3459      CLR.W     -(A0)
00009252                          3460  
00009252  4267                    3461      CLR.W     -(A7)
00009254                          3462  
00009254  42A0                    3463      CLR.L     -(A0)
00009256                          3464  
00009256  42A7                    3465      CLR.L     -(A7)
00009258                          3466  
00009258  1200                    3467      MOVE.B    D0,D1
0000925A                          3468  
0000925A  1080                    3469      MOVE.B    D0,(A0)
0000925C                          3470  
0000925C  10C0                    3471      MOVE.B    D0,(A0)+
0000925E                          3472  
0000925E  1100                    3473      MOVE.B    D0,-(A0)
00009260                          3474  
00009260  1010                    3475      MOVE.B    (A0),D0
00009262                          3476  
00009262  1290                    3477      MOVE.B    (A0),(A1)
00009264                          3478  
00009264  12D0                    3479      MOVE.B    (A0),(A1)+
00009266                          3480  
00009266  1310                    3481      MOVE.B    (A0),-(A1)
00009268                          3482  
00009268  1018                    3483      MOVE.B    (A0)+,D0
0000926A                          3484  
0000926A  1298                    3485      MOVE.B    (A0)+,(A1)
0000926C                          3486  
0000926C  12D8                    3487      MOVE.B    (A0)+,(A1)+
0000926E                          3488  
0000926E  1318                    3489      MOVE.B    (A0)+,-(A1)
00009270                          3490  
00009270  1020                    3491      MOVE.B    -(A0),D0
00009272                          3492  
00009272  12A0                    3493      MOVE.B    -(A0),(A1)
00009274                          3494  
00009274  12E0                    3495      MOVE.B    -(A0),(A1)+
00009276                          3496  
00009276  1320                    3497      MOVE.B    -(A0),-(A1)
00009278                          3498  
00009278  3200                    3499      MOVE.W    D0,D1
0000927A                          3500  
0000927A  3080                    3501      MOVE.W    D0,(A0)
0000927C                          3502  
0000927C  30C0                    3503      MOVE.W    D0,(A0)+
0000927E                          3504  
0000927E  3100                    3505      MOVE.W    D0,-(A0)
00009280                          3506  
00009280  3008                    3507      MOVE.W    A0,D0
00009282                          3508  
00009282  3288                    3509      MOVE.W    A0,(A1)
00009284                          3510  
00009284  32C8                    3511      MOVE.W    A0,(A1)+
00009286                          3512  
00009286  3308                    3513      MOVE.W    A0,-(A1)
00009288                          3514  
00009288  3010                    3515      MOVE.W    (A0),D0
0000928A                          3516  
0000928A  3290                    3517      MOVE.W    (A0),(A1)
0000928C                          3518  
0000928C  32D0                    3519      MOVE.W    (A0),(A1)+
0000928E                          3520  
0000928E  3310                    3521      MOVE.W    (A0),-(A1)
00009290                          3522  
00009290  3018                    3523      MOVE.W    (A0)+,D0
00009292                          3524  
00009292  3298                    3525      MOVE.W    (A0)+,(A1)
00009294                          3526  
00009294  32D8                    3527      MOVE.W    (A0)+,(A1)+
00009296                          3528  
00009296  3318                    3529      MOVE.W    (A0)+,-(A1)
00009298                          3530  
00009298  3020                    3531      MOVE.W    -(A0),D0
0000929A                          3532  
0000929A  32A0                    3533      MOVE.W    -(A0),(A1)
0000929C                          3534  
0000929C  32E0                    3535      MOVE.W    -(A0),(A1)+
0000929E                          3536  
0000929E  3320                    3537      MOVE.W    -(A0),-(A1)
000092A0                          3538  
000092A0  2200                    3539      MOVE.L    D0,D1
000092A2                          3540  
000092A2  2080                    3541      MOVE.L    D0,(A0)
000092A4                          3542  
000092A4  20C0                    3543      MOVE.L    D0,(A0)+
000092A6                          3544  
000092A6  2100                    3545      MOVE.L    D0,-(A0)
000092A8                          3546  
000092A8  2008                    3547      MOVE.L    A0,D0
000092AA                          3548  
000092AA  2288                    3549      MOVE.L    A0,(A1)
000092AC                          3550  
000092AC  22C8                    3551      MOVE.L    A0,(A1)+
000092AE                          3552  
000092AE  2308                    3553      MOVE.L    A0,-(A1)
000092B0                          3554  
000092B0  2010                    3555      MOVE.L    (A0),D0
000092B2                          3556  
000092B2  2290                    3557      MOVE.L    (A0),(A1)
000092B4                          3558  
000092B4  22D0                    3559      MOVE.L    (A0),(A1)+
000092B6                          3560  
000092B6  2310                    3561      MOVE.L    (A0),-(A1)
000092B8                          3562  
000092B8  2018                    3563      MOVE.L    (A0)+,D0
000092BA                          3564  
000092BA  2298                    3565      MOVE.L    (A0)+,(A1)
000092BC                          3566  
000092BC  22D8                    3567      MOVE.L    (A0)+,(A1)+
000092BE                          3568  
000092BE  2318                    3569      MOVE.L    (A0)+,-(A1)
000092C0                          3570  
000092C0  2020                    3571      MOVE.L    -(A0),D0
000092C2                          3572  
000092C2  22A0                    3573      MOVE.L    -(A0),(A1)
000092C4                          3574  
000092C4  22E0                    3575      MOVE.L    -(A0),(A1)+
000092C6                          3576  
000092C6  2320                    3577      MOVE.L    -(A0),-(A1)
000092C8                          3578  
000092C8  3040                    3579      MOVEA.W    D0,A0
000092CA                          3580  
000092CA  3048                    3581      MOVEA.W    A0,A0
000092CC                          3582  
000092CC  3050                    3583      MOVEA.W    (A0),A0
000092CE                          3584  
000092CE  3058                    3585      MOVEA.W    (A0)+,A0
000092D0                          3586  
000092D0  3060                    3587      MOVEA.W    -(A0),A0
000092D2                          3588  
000092D2  2040                    3589      MOVEA.L    D0,A0
000092D4                          3590  
000092D4  2048                    3591      MOVEA.L    A0,A0
000092D6                          3592  
000092D6  2050                    3593      MOVEA.L    (A0),A0
000092D8                          3594  
000092D8  2058                    3595      MOVEA.L    (A0)+,A0
000092DA                          3596  
000092DA  2060                    3597      MOVEA.L    -(A0),A0  
000092DC                          3598  
000092DC  D401                    3599      ADD.B     D1,D2
000092DE                          3600  
000092DE  D311                    3601      ADD.B     D1,(A1)
000092E0                          3602  
000092E0  D319                    3603      ADD.B     D1,(A1)+
000092E2                          3604  
000092E2  D321                    3605      ADD.B     D1,-(A1)
000092E4                          3606  
000092E4  D211                    3607      ADD.B     (A1),D1
000092E6                          3608  
000092E6  D219                    3609      ADD.B     (A1)+,D1
000092E8                          3610  
000092E8  D221                    3611      ADD.B     -(A1),D1
000092EA                          3612  
000092EA  D441                    3613      ADD.W     D1,D2
000092EC                          3614  
000092EC  D351                    3615      ADD.W     D1,(A1)
000092EE                          3616  
000092EE  D359                    3617      ADD.W     D1,(A1)+
000092F0                          3618  
000092F0  D361                    3619      ADD.W     D1,-(A1)
000092F2                          3620  
000092F2  D251                    3621      ADD.W     (A1),D1
000092F4                          3622  
000092F4  D259                    3623      ADD.W     (A1)+,D1
000092F6                          3624  
000092F6  D261                    3625      ADD.W     -(A1),D1
000092F8                          3626  
000092F8  D481                    3627      ADD.L     D1,D2
000092FA                          3628  
000092FA  D391                    3629      ADD.L     D1,(A1)
000092FC                          3630  
000092FC  D399                    3631      ADD.L     D1,(A1)+
000092FE                          3632  
000092FE  D3A1                    3633      ADD.L     D1,-(A1)
00009300                          3634  
00009300  D291                    3635      ADD.L     (A1),D1
00009302                          3636  
00009302  D299                    3637      ADD.L     (A1)+,D1
00009304                          3638  
00009304  D2A1                    3639      ADD.L     -(A1),D1
00009306                          3640  
00009306  D4C1                    3641      ADDA.W        D1,A2
00009308                          3642  
00009308  D4D1                    3643      ADDA.W        (A1),A2
0000930A                          3644  
0000930A  D4D9                    3645      ADDA.W        (A1)+,A2
0000930C                          3646  
0000930C  D4E1                    3647      ADDA.W        -(A1),A2
0000930E                          3648  
0000930E  D5C1                    3649      ADDA.L        D1,A2
00009310                          3650  
00009310  D5D1                    3651      ADDA.L        (A1),A2
00009312                          3652  
00009312  D5D9                    3653      ADDA.L        (A1)+,A2
00009314                          3654  
00009314  D5E1                    3655      ADDA.L        -(A1),A2
00009316                          3656     
00009316  9401                    3657      SUB.B     D1,D2
00009318                          3658  
00009318  9311                    3659      SUB.B     D1,(A1)
0000931A                          3660  
0000931A  9319                    3661      SUB.B     D1,(A1)+
0000931C                          3662  
0000931C  9321                    3663      SUB.B     D1,-(A1)
0000931E                          3664  
0000931E  9211                    3665      SUB.B     (A1),D1
00009320                          3666  
00009320  9219                    3667      SUB.B     (A1)+,D1
00009322                          3668  
00009322  9221                    3669      SUB.B     -(A1),D1
00009324                          3670  
00009324  9441                    3671      SUB.W     D1,D2
00009326                          3672  
00009326  92C1                    3673      SUB.W     D1,A1
00009328                          3674  
00009328  9351                    3675      SUB.W     D1,(A1)
0000932A                          3676  
0000932A  9359                    3677      SUB.W     D1,(A1)+
0000932C                          3678  
0000932C  9361                    3679      SUB.W     D1,-(A1)
0000932E                          3680  
0000932E  9249                    3681      SUB.W     A1,D1
00009330                          3682  
00009330  9251                    3683      SUB.W     (A1),D1
00009332                          3684  
00009332  9259                    3685      SUB.W     (A1)+,D1
00009334                          3686  
00009334  9261                    3687      SUB.W     -(A1),D1
00009336                          3688  
00009336  9481                    3689      SUB.L     D1,D2
00009338                          3690  
00009338  93C1                    3691      SUB.L     D1,A1
0000933A                          3692  
0000933A  9391                    3693      SUB.L     D1,(A1)
0000933C                          3694  
0000933C  9399                    3695      SUB.L     D1,(A1)+
0000933E                          3696  
0000933E  93A1                    3697      SUB.L     D1,-(A1)
00009340                          3698  
00009340  9289                    3699      SUB.L     A1,D1
00009342                          3700  
00009342  9291                    3701      SUB.L     (A1),D1
00009344                          3702  
00009344  9299                    3703      SUB.L     (A1)+,D1
00009346                          3704  
00009346  92A1                    3705      SUB.L     -(A1),D1    
00009348                          3706  
00009348  C3C0                    3707      MULS.W    D0,D1
0000934A                          3708  
0000934A  C3D0                    3709      MULS.W    (A0),D1
0000934C                          3710  
0000934C  C3E0                    3711      MULS.W    -(A0),D1
0000934E                          3712  
0000934E  C3D8                    3713      MULS.W    (A0)+,D1
00009350                          3714  
00009350  83C0                    3715      DIVS.W    D0,D1
00009352                          3716  
00009352  83D0                    3717      DIVS.W    (A0),D1
00009354                          3718  
00009354  83E0                    3719      DIVS.W    -(A0),D1
00009356                          3720  
00009356  83D8                    3721      DIVS.W    (A0)+,D1
00009358                          3722  
00009358  C401                    3723      AND.B     D1,D2
0000935A                          3724  
0000935A  C311                    3725      AND.B     D1,(A1)
0000935C                          3726  
0000935C  C319                    3727      AND.B     D1,(A1)+
0000935E                          3728  
0000935E  C321                    3729      AND.B     D1,-(A1)
00009360                          3730  
00009360  C211                    3731      AND.B     (A1),D1
00009362                          3732  
00009362  C219                    3733      AND.B     (A1)+,D1
00009364                          3734  
00009364  C221                    3735      AND.B     -(A1),D1
00009366                          3736  
00009366  C441                    3737      AND.W     D1,D2
00009368                          3738  
00009368  C351                    3739      AND.W     D1,(A1)
0000936A                          3740  
0000936A  C359                    3741      AND.W     D1,(A1)+
0000936C                          3742  
0000936C  C361                    3743      AND.W     D1,-(A1)
0000936E                          3744  
0000936E  C251                    3745      AND.W     (A1),D1
00009370                          3746  
00009370  C259                    3747      AND.W     (A1)+,D1
00009372                          3748  
00009372  C261                    3749      AND.W     -(A1),D1
00009374                          3750  
00009374  C481                    3751      AND.L     D1,D2
00009376                          3752  
00009376  C391                    3753      AND.L     D1,(A1)
00009378                          3754  
00009378  C399                    3755      AND.L     D1,(A1)+
0000937A                          3756  
0000937A  C3A1                    3757      AND.L     D1,-(A1)
0000937C                          3758  
0000937C  C291                    3759      AND.L     (A1),D1
0000937E                          3760  
0000937E  C299                    3761      AND.L     (A1)+,D1
00009380                          3762  
00009380  C2A1                    3763      AND.L     -(A1),D1
00009382                          3764      
00009382  B302                    3765      EOR.B      D1,D2
00009384                          3766      
00009384  B511                    3767      EOR.B      D2,(A1)
00009386                          3768  
00009386  8401                    3769      OR.B     D1,D2
00009388                          3770  
00009388  8311                    3771      OR.B     D1,(A1)
0000938A                          3772  
0000938A  8319                    3773      OR.B     D1,(A1)+
0000938C                          3774  
0000938C  8321                    3775      OR.B     D1,-(A1)
0000938E                          3776  
0000938E  8211                    3777      OR.B     (A1),D1
00009390                          3778  
00009390  8219                    3779      OR.B     (A1)+,D1
00009392                          3780  
00009392  8221                    3781      OR.B     -(A1),D1
00009394                          3782  
00009394  8441                    3783      OR.W     D1,D2
00009396                          3784  
00009396  8351                    3785      OR.W     D1,(A1)
00009398                          3786  
00009398  8359                    3787      OR.W     D1,(A1)+
0000939A                          3788  
0000939A  8361                    3789      OR.W     D1,-(A1)
0000939C                          3790  
0000939C  8251                    3791      OR.W     (A1),D1
0000939E                          3792  
0000939E  8259                    3793      OR.W     (A1)+,D1
000093A0                          3794  
000093A0  8261                    3795      OR.W     -(A1),D1
000093A2                          3796  
000093A2  8481                    3797      OR.L     D1,D2
000093A4                          3798  
000093A4  8391                    3799      OR.L     D1,(A1)
000093A6                          3800  
000093A6  8399                    3801      OR.L     D1,(A1)+
000093A8                          3802  
000093A8  83A1                    3803      OR.L     D1,-(A1)
000093AA                          3804  
000093AA  8291                    3805      OR.L     (A1),D1
000093AC                          3806  
000093AC  8299                    3807      OR.L     (A1)+,D1
000093AE                          3808  
000093AE  82A1                    3809      OR.L     -(A1),D1
000093B0                          3810  
000093B0  E32A                    3811      LSL.B     D1,D2
000093B2                          3812  
000093B2  E36A                    3813      LSL.W     D1,D2
000093B4                          3814  
000093B4  E3D1                    3815      LSL.W     (A1)
000093B6                          3816  
000093B6  E3D9                    3817      LSL.W     (A1)+
000093B8                          3818  
000093B8  E3E1                    3819      LSL.W     -(A1)
000093BA                          3820  
000093BA  E3AA                    3821      LSL.L     D1,D2
000093BC                          3822  
000093BC  E22A                    3823      LSR.B     D1,D2
000093BE                          3824  
000093BE  E26A                    3825      LSR.W     D1,D2
000093C0                          3826  
000093C0  E2D1                    3827      LSR.W     (A1)
000093C2                          3828  
000093C2  E2D9                    3829      LSR.W     (A1)+
000093C4                          3830  
000093C4  E2E1                    3831      LSR.W     -(A1)
000093C6                          3832  
000093C6  E2AA                    3833      LSR.L     D1,D2    
000093C8                          3834  
000093C8  E222                    3835      ASR.B     D1,D2
000093CA                          3836  
000093CA  E262                    3837      ASR.W     D1,D2
000093CC                          3838  
000093CC  E0D1                    3839      ASR.W     (A1)
000093CE                          3840  
000093CE  E0D9                    3841      ASR.W     (A1)+
000093D0                          3842  
000093D0  E0E1                    3843      ASR.W     -(A1)
000093D2                          3844  
000093D2  E2A2                    3845      ASR.L     D1,D2
000093D4                          3846  
000093D4  E322                    3847      ASL.B     D1,D2
000093D6                          3848  
000093D6  E362                    3849      ASL.W     D1,D2
000093D8                          3850  
000093D8  E1D1                    3851      ASL.W     (A1)
000093DA                          3852  
000093DA  E1D9                    3853      ASL.W     (A1)+
000093DC                          3854  
000093DC  E1E1                    3855      ASL.W     -(A1)
000093DE                          3856  
000093DE  E3A2                    3857      ASL.L     D1,D2
000093E0                          3858  
000093E0  E33A                    3859      ROL.B     D1,D2
000093E2                          3860  
000093E2  E37A                    3861      ROL.W     D1,D2
000093E4                          3862  
000093E4  E7D1                    3863      ROL.W     (A1)
000093E6                          3864  
000093E6  E7D9                    3865      ROL.W     (A1)+
000093E8                          3866  
000093E8  E7E1                    3867      ROL.W     -(A1)
000093EA                          3868  
000093EA  E3BA                    3869      ROL.L     D1,D2
000093EC                          3870  
000093EC  E23A                    3871      ROR.B     D1,D2
000093EE                          3872  
000093EE  E27A                    3873      ROR.W     D1,D2
000093F0                          3874  
000093F0  E6D1                    3875      ROR.W     (A1)
000093F2                          3876  
000093F2  E6D9                    3877      ROR.W     (A1)+
000093F4                          3878  
000093F4  E6E1                    3879      ROR.W     -(A1)
000093F6                          3880  
000093F6  E2BA                    3881      ROR.L     D1,D2    
000093F8                          3882  
000093F8  B200                    3883      CMP.B    D0,D1
000093FA                          3884  
000093FA  B210                    3885      CMP.B    (A0),D1
000093FC                          3886  
000093FC  B220                    3887      CMP.B    -(A0),D1
000093FE                          3888  
000093FE  B218                    3889      CMP.B    (A0)+,D1
00009400                          3890  
00009400  B240                    3891      CMP.W    D0,D1
00009402                          3892  
00009402  B248                    3893      CMP.W    A0,D1
00009404                          3894  
00009404  B250                    3895      CMP.W    (A0),D1
00009406                          3896  
00009406  B260                    3897      CMP.W    -(A0),D1
00009408                          3898  
00009408  B258                    3899      CMP.W    (A0)+,D1
0000940A                          3900  
0000940A  B280                    3901      CMP.L    D0,D1
0000940C                          3902  
0000940C  B288                    3903      CMP.L    A0,D1
0000940E                          3904  
0000940E  B290                    3905      CMP.L    (A0),D1
00009410                          3906  
00009410  B2A0                    3907      CMP.L    -(A0),D1
00009412                          3908  
00009412  B298                    3909      CMP.L    (A0)+,D1
00009414                          3910      
00009414  6000 0002               3911      BRA       lss      
00009418                          3912  
00009418  644E                    3913  lss BCC.B     label1
0000941A                          3914  
0000941A  644C                    3915      BCC.B     label2
0000941C                          3916  
0000941C  6E4A                    3917      BGT.B     label1
0000941E                          3918  
0000941E  6E48                    3919      BGT.B     label2
00009420                          3920  
00009420  6F46                    3921      BLE.B     label1
00009422                          3922  
00009422  6F44                    3923      BLE.B     label2
00009424                          3924  
00009424  6400 0042               3925      BCC.W     label1
00009428                          3926  
00009428  6400 003E               3927      BCC.W     label2
0000942C                          3928  
0000942C  6400 003A               3929      BCC.W     label3
00009430                          3930  
00009430  6E00 0036               3931      BGT.W     label1
00009434                          3932  
00009434  6E00 0032               3933      BGT.W     label2
00009438                          3934  
00009438  6E00 002E               3935      BGT.W     label3
0000943C                          3936  
0000943C  6F00 002A               3937      BLE.W     label1
00009440                          3938  
00009440  6F00 0026               3939      BLE.W     label2
00009444                          3940  
00009444  6F00 0022               3941      BLE.W     label3
00009448                          3942  
00009448  4E90                    3943      JSR       (A0)
0000944A                          3944  
0000944A  4EB8 1234               3945      JSR       $1234
0000944E                          3946  
0000944E  4EB9 12345678           3947      JSR       $12345678
00009454                          3948  
00009454  4EB9 00009468           3949      JSR       label1
0000945A                          3950  
0000945A  4EB9 00009468           3951      JSR       label2
00009460                          3952  
00009460  4EB9 00009468           3953      JSR       label3
00009466                          3954  
00009466  4E71                    3955      NOP
00009468                          3956  
00009468                          3957  label1
00009468                          3958  label2
00009468                          3959  label3
00009468                          3960  
00009468  4E75                    3961      RTS
0000946A                          3962      
0000946A  48A1 007F               3963      MOVEM.W   A1-A7,-(A1)
0000946E                          3964  
0000946E  48E1 7F00               3965      MOVEM.L   D1-D7,-(A1)
00009472                          3966  
00009472  48A1 0140               3967      MOVEM.W   A1/D7,-(A1)
00009476                          3968  
00009476  48E1 0140               3969      MOVEM.L   A1/D7,-(A1)
0000947A                          3970  
0000947A  4891 FE00               3971      MOVEM.W   A1-A7,(A1)
0000947E                          3972  
0000947E  48D1 00FE               3973      MOVEM.L   D1-D7,(A1)
00009482                          3974  
00009482  4891 0280               3975      MOVEM.W   A1/D7,(A1)
00009486                          3976  
00009486  48D1 0280               3977      MOVEM.L   A1/D7,(A1)
0000948A                          3978  
0000948A  4C99 FE00               3979      MOVEM.W   (A1)+,A1-A7
0000948E                          3980  
0000948E  4CD9 00FE               3981      MOVEM.L   (A1)+,D1-D7
00009492                          3982  
00009492  4C99 0280               3983      MOVEM.W   (A1)+,A1/D7
00009496                          3984  
00009496  4CD9 0280               3985      MOVEM.L   (A1)+,A1/D7
0000949A                          3986  
0000949A  4C91 FE00               3987      MOVEM.W   (A1),A1-A7
0000949E                          3988  
0000949E  4CD1 00FE               3989      MOVEM.L   (A1),D1-D7
000094A2                          3990  
000094A2  4C91 0280               3991      MOVEM.W   (A1),A1/D7
000094A6                          3992  
000094A6  4CD1 0280               3993      MOVEM.L   (A1),A1/D7
000094AA                          3994      
000094AA                          3995      
000094AA                          3996  
000094AA                          3997      
000094AA                          3998   
000094AA                          3999  
000094AA                          4000  
000094AA                          4001  
000094AA                          4002  
000094AA                          4003  
000094AA                          4004  
000094AA                          4005  
000094AA                          4006  
000094AA                          4007  
000094AA                          4008  
000094AA                          4009  
000094AA                          4010  
000094AA                          4011  
000094AA                          4012  
000094AA                          4013  
000094AA                          4014  
000094AA                          4015  
000094AA                          4016  
000094AA                          4017  
000094AA                          4018  -------------------- end include --------------------
000094AA                          4019      
000094AA                          4020      
Line 4021 WARNING: Origin value is odd (Location counter set to next highest address)
000094AA                          4021     END    START                                 ;Last line of program

No errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA                2BA2
ADDA_BACK           2BC0
ADDRESS             28B2
ADDSTRTOBUFFER      125F
ADD_CHAR_TO_STRING  1338
ASCIITOHEX          13E0
ASCIITOHEXREGLIST   1
ASCII_VAL           16F2
ASD_1               29A4
ASD_1_BACK          29D0
ASD_2               29FC
ASD_2_IMD           2A12
ASD_2_IMD_B         2A38
ASD_2_REG           2A54
BACK                2F92
BACK2               2FC8
BACK3               3032
BACK4               300A
BACK5               307E
BCLR                2FDE
BIT_CHECK_EXG       2222
BIT_CHECK_EXT       1D34
BIT_CHECK_MOVEP     1AA6
BIT_CHECK_SUBX      213E
BIT_SIZE_CHECK      227A
BRA                 2AE0
BRA_BYTE            2B0C
BRA_BYTE2           2B32
BRA_BYTE3           2B3E
BRA_WORD            2B46
BRA_WORD_BK         2B62
BRA_WRD_BK2         2B80
BUFFER_ADD_SUCCESS  125E
BUFFER_LENGTH_EXCEEDED  12A8
BUFFER_POINTER      1256
BUFFER_POINTER_LENGTH  125A
BUFFER_STRING_END   12AE
BYTEREAD            16F1
B_BUFFER            1050
CHARNUM_TO_CONVERT  12E0
CHECK_00XX          2930
CHECK_01XX          293E
CHECK_0XXX          28DC
CHECK_1XXX          28EC
CHECK_OP_ABCD       220A
CHECK_OP_ADD        22A4
CHECK_OP_ADDA       22AE
CHECK_OP_ADDI       1A06
CHECK_OP_ADDQ       1F00
CHECK_OP_ADDX       2290
CHECK_OP_AND        225A
CHECK_OP_ANDI       19DE
CHECK_OP_ANDI_TO_CCR  199E
CHECK_OP_ANDI_TO_SR  19AE
CHECK_OP_ASL        245C
CHECK_OP_ASL_NO_ROT  2384
CHECK_OP_ASR        243E
CHECK_OP_ASR_NO_ROT  236A
CHECK_OP_BCC        1F6A
CHECK_OP_BCS        2010
CHECK_OP_BEQ        1F7E
CHECK_OP_BGE        202A
CHECK_OP_BGT        1F56
CHECK_OP_BHI        1F92
CHECK_OP_BLS        1FA6
CHECK_OP_BLT        2044
CHECK_OP_BMI        1FBA
CHECK_OP_BNE        1FCE
CHECK_OP_BPL        1FE2
CHECK_OP_BRA        1FF6
CHECK_OP_BSR        1F42
CHECK_OP_BVC        205E
CHECK_OP_CHK        1E16
CHECK_OP_CLR        1CF8
CHECK_OP_CMP        21C8
CHECK_OP_CMPA       2196
CHECK_OP_CMPI       1AF2
CHECK_OP_CMPM       2182
CHECK_OP_DBCC       1ED8
CHECK_OP_DIVS       20D0
CHECK_OP_DIVU       20A8
CHECK_OP_DYNAMIC_BCHG  1A7E
CHECK_OP_DYNAMIC_BCLR  1B2E
CHECK_OP_DYNAMIC_BSET  1A92
CHECK_OP_DYNAMIC_BTST  1A6A
CHECK_OP_EOR        21AA
CHECK_OP_EORI       1A1A
CHECK_OP_EORI_TO_CCR  19BE
CHECK_OP_EORI_TO_SR  19CE
CHECK_OP_EXG        221E
CHECK_OP_EXT        1D20
CHECK_OP_ILLEGAL    1C68
CHECK_OP_JMP        1E02
CHECK_OP_JSR        1E70
CHECK_OP_LEA        1E56
CHECK_OP_LINK       1DC6
CHECK_OP_LSL        2420
CHECK_OP_LSL_NO_ROT  2350
CHECK_OP_LSR        2402
CHECK_OP_LSR_NO_ROT  2336
CHECK_OP_MOVEA_L    1B86
CHECK_OP_MOVEA_W    1BE8
CHECK_OP_MOVEM      1EA8
CHECK_OP_MOVEP      1AC0
CHECK_OP_MOVEQ      2088
CHECK_OP_MOVE_B     1B5C
CHECK_OP_MOVE_FROM_SR  1CA8
CHECK_OP_MOVE_L     1BBE
CHECK_OP_MOVE_TO_CCR  1CBC
CHECK_OP_MOVE_TO_SR  1CD0
CHECK_OP_MOVE_USP   1DEE
CHECK_OP_MOVE_W     1C20
CHECK_OP_MULS       2240
CHECK_OP_MULU       21F6
CHECK_OP_NBCD       1D4E
CHECK_OP_NEG        1E8A
CHECK_OP_NEGX       1CE4
CHECK_OP_NOP        1E2A
CHECK_OP_NOT        1D0C
CHECK_OP_OR         20EA
CHECK_OP_ORI        1AD4
CHECK_OP_ORI_TO_CCR  197E
CHECK_OP_ORI_TO_SR  198E
CHECK_OP_PEA        1D76
CHECK_OP_RESET      1C58
CHECK_OP_ROL        23E4
CHECK_OP_ROL_NO_ROT  231C
CHECK_OP_ROR        23C6
CHECK_OP_ROR_NO_ROT  2302
CHECK_OP_ROXL       23B2
CHECK_OP_ROXL_NO_ROT  22EE
CHECK_OP_ROXR       239E
CHECK_OP_ROXR_NO_ROT  22DA
CHECK_OP_RTE        1C78
CHECK_OP_RTR        1C98
CHECK_OP_RTS        1E40
CHECK_OP_SBCD       20BC
CHECK_OP_SCC        1EEC
CHECK_OP_STATIC_BCHG  1A42
CHECK_OP_STATIC_BCLR  1B10
CHECK_OP_STATIC_BSET  1A56
CHECK_OP_STATIC_BTST  1A2E
CHECK_OP_STOP       1C48
CHECK_OP_SUB        215C
CHECK_OP_SUBA       211A
CHECK_OP_SUBI       19F2
CHECK_OP_SUBQ       1F14
CHECK_OP_SUBX       212E
CHECK_OP_SWAP       1D62
CHECK_OP_TAS        1D8A
CHECK_OP_TRAP       1DB2
CHECK_OP_TRAPV      1C88
CHECK_OP_TST        1D9E
CHECK_OP_UNLK       1DDA
CHECK_POSITIVE_LENGTH  130A
CHECK_PRINT         11C2
CHECK_SIZE_BIT_FOR_SUB  2108
CHECK_VALID_LENGTH  1314
CHECK_XXXX          28CC
CHRDONE             13FC
CHRLOOP             13E8
CHUMP_BYTE          3166
CHUMP_LONG          3176
CHUMP_WORD          316E
CLEAR_BUFFER        12BC
CLEAR_BUFFER_END    12D6
CLEAR_BUFFER_LENGTH  12B8
CLEAR_BUFFER_LOOP   12CA
CLEAR_BUFFER_POINTER  12B4
COMMA               28BA
CONVERTED_HEX_STRING  12E1
CONVERT_HEX_TO_STRING  12EA
CONVERT_TO_HEX_LETTER  1330
COUNTDONE           139C
COUNTLOOP           138A
CR                  D
CUR_OP_CODE         10A0
C_GROUP_0           197A
C_GROUP_1           1B58
C_GROUP_2           1B82
C_GROUP_3           1BE4
C_GROUP_4           1C46
C_GROUP_5           1ED4
C_GROUP_6           1F3E
C_GROUP_7           2084
C_GROUP_8           20A4
C_GROUP_9           2104
C_GROUP_A           2176
C_GROUP_B           217E
C_GROUP_C           21F2
C_GROUP_D           2276
C_GROUP_E           22D6
C_GROUP_F           2486
DATA                28B3
DIGIT_LOOP          131C
DIR_0               2C28
DIR_1               2C78
DIVS                2CC8
DIVS_BACK           2CEA
DONE                124E
DOWN_ONE            2B2A
DOWN_ZERO           2B22
DYNMC_BCLR          3048
END                 3308
EXT                 28C8
FILEID              171A
FILENAME            16FA
FINDNULLLOOPDONE    136C
FIND_1_BIT_SIZE_6   189E
FIND_1_BIT_SIZE_8   18BE
FIND_2_BIT_SIZE_7_TO_6  187E
FIND_MOVEA_L_DIFFERENCE  1B98
FIND_MOVEA_W_DIFF   1BFA
FIRST_3             173A
FOURTH_3            173D
GO                  317E
GOO                 30B6
GOO2                30E2
GROUP0_INVALID      1B4C
GROUP0_SUCCESS      1B52
GROUP1_INVALID      1B76
GROUP1_SUCCESS      1B7C
GROUP2_INVALID      1BD8
GROUP2_SUCCESS      1BDE
GROUP3_INVALID      1C3A
GROUP3_SUCCESS      1C40
GROUP4_INVALID      1EC2
GROUP4_SUCCESS      1ECE
GROUP5_INVALID      1F32
GROUP5_SUCCESS      1F38
GROUP6_INVALID      2078
GROUP6_SUCCESS      207E
GROUP7_INVALID      2098
GROUP7_SUCCESS      209E
GROUP8_INVALID      20F8
GROUP8_SUCCESS      20FE
GROUP9_INVALID      216A
GROUP9_SUCCESS      2170
GROUPB_INVALID      21E6
GROUPB_SUCCESS      21EC
GROUPC_INVALID      226A
GROUPC_SUCCESS      2270
GROUPD_INVALID      22CA
GROUPD_SUCCESS      22D0
GROUPE_INVALID      247A
GROUPE_SUCCESS      2480
GROUP_0             1750
GROUP_1             1762
GROUP_2             1774
GROUP_3             1786
GROUP_4             1798
GROUP_5             17AA
GROUP_6             17BC
GROUP_7             17CE
GROUP_8             17E0
GROUP_9             17F2
GROUP_A             1804
GROUP_B             1816
GROUP_C             1828
GROUP_D             183A
GROUP_E             184C
GROUP_F             185E
GT                  32F4
G_BUFFER            1000
HEX_SIGN            28B6
IMMDTE_VALU         28B7
INVALID             330C
INVALID_ADDRES_MESSAGE  171E
INVALID_OP          248E
IO_BUFFER           1705
IS_VALID            10A2
JSR                 2E8C
JSR_BACK            2EA4
LABEL1              9468
LABEL2              9468
LABEL3              9468
LE                  32FE
LEA                 2EC2
LEA_BACK            2EE4
LF                  A
LOAD_0000           2F0E
LOAD_00XX           3094
LOAD_0100           2D9E
LOAD_0101           2D14
LOAD_0110           2A7E
LOAD_1000           2BFC
LOAD_1001           2BF6
LOAD_1011           2BF0
LOAD_1100           2BEA
LOAD_1101           2B88
LOAD_1110           295E
LOAD_8              2A24
LOAD_A              3282
LOAD_ABS_LONG       3214
LOAD_ABS_SHORT      3202
LOAD_ADDRESS        31D8
LOAD_ADDRESS_W_POST_INC  31EA
LOAD_ADDRESS_W_PRE_DEC  31F6
LOAD_ADDR_REGISTER  31C6
LOAD_BYTES          3230
LOAD_COMMA_SPACE    325C
LOAD_D              3274
LOAD_DATA_REGISTER  31B4
LOAD_EA             30F8
LOAD_FIRST3         2A2E
LOAD_GE_111         3138
LOAD_HEX_SIGN       32AC
LOAD_IMMDTE         3226
LOAD_IMMDTE_VALU    32BA
LOAD_LT_111         310A
LOAD_MINUS_SIGN     32D6
LOAD_NEW_LINE       325A
LOAD_NUM            32E8
LOAD_PLUS_SIGN      32C8
LOAD_PTHSIS_CLSD    329E
LOAD_PTHSIS_OPEN    3290
LOAD_THIS_SHIT      32E4
LOOP                323A
LSS                 9418
MAIN_CONSOLE        1428
MAIN_EA             28BE
MAIN_LOOP           1160
MINUS_SIGN          28B9
MNEMONIC            1739
MOVEM               2EBA
MOVEON              29B8
MOVE_AND_MOVEA_PARSE_EA  18DE
MYBE_ASD_1          2980
MYBE_ASD_2          29E6
MYBE_BCLR           2F56
MYBE_BRA            2A9E
MYBE_CMPI           2F3E
MYBE_JSR            2E0C
MYBE_MOVEM          2E2C
MYBE_NEG            2DB6
MYBE_ORI            2F26
MYBE_RTS1           2DCE
MYBE_RTS2           2DDC
MYBE_RTS3           2DEA
MYBE_SUBQ1          2D2E
MYBE_SUBQ2          2D3E
NEG                 2E4C
NEG_BACK            2E6E
NEG_WORD            2B6A
NEWLINE             16D4
NOT_BCLR            2F60
NOT_BRA             2AAC
NOT_CMPI            2F48
NOT_JSR             2E16
NOT_MOVEM           2E3C
NOT_NEG             2DC0
NOT_ORI             2F30
NOT_RTS             2DFE
NULLLOOP            135E
NUMBER_TO_CONVERT   12DC
OP_JSR_DONE         186C
OP_JSR_ROUTINE      173E
OP_SIZE             1738
ORI_CMPI            2F70
OR_BACK             2C4E
OR_BACK2            2CB2
OUTFILENAME         16DA
PARSE_EA_CONSTANT_BITS  1924
PLUS_SIGN           28B8
POS_WORD            2B56
PRINT_DATA          11DC
PRINT_INSTRUCTION   11D0
PRINT_OP_ADD        268C
PRINT_OP_ADDA       26A0
PRINT_OP_ASL        26F0
PRINT_OP_ASR        26DC
PRINT_OP_BCS        25BC
PRINT_OP_BGE        25D0
PRINT_OP_BLT        25E4
PRINT_OP_BRA        260C
PRINT_OP_BVC        25F8
PRINT_OP_CMP        266A
PRINT_OP_CMPI       24B8
PRINT_OP_DIVS       2620
PRINT_OP_DYNAMIC_BCLR  24E0
PRINT_OP_EOR        2656
PRINT_OP_JSR        253A
PRINT_OP_LEA        2564
PRINT_OP_LSL        26B4
PRINT_OP_LSR        26C8
PRINT_OP_MOVEA_L    2502
PRINT_OP_MOVEA_W    251E
PRINT_OP_MOVEB      24F4
PRINT_OP_MOVEM_L    259A
PRINT_OP_MOVEM_W    258C
PRINT_OP_MOVE_L     2510
PRINT_OP_MOVE_W     252C
PRINT_OP_MULS       267E
PRINT_OP_NEG        2578
PRINT_OP_NOP        2556
PRINT_OP_OR         262E
PRINT_OP_ORI        24A4
PRINT_OP_ROL        2704
PRINT_OP_ROR        2718
PRINT_OP_RTS        2548
PRINT_OP_SIZE       2756
PRINT_OP_SIZE_ADDA  2770
PRINT_OP_STATIC_BCLR  24CC
PRINT_OP_SUB        2642
PRINT_OP_SUBQ       25A8
PRINT_SIZE_BYTE     272C
PRINT_SIZE_LONG     2748
PRINT_SIZE_WORD     273A
PRINT_TO_BUFFER     2496
PTHSIS_CLSD         28B5
PTHSIS_OPEN         28B4
P_INVALID_OP        277A
P_OP_ADD            2881
P_OP_ADDA           2879
P_OP_ASL            289D
P_OP_ASR            2896
P_OP_BCLR           27A1
P_OP_BCS            282C
P_OP_BGE            2833
P_OP_BLT            283A
P_OP_BRA            2825
P_OP_BVC            2841
P_OP_CMP            2867
P_OP_CMPI           2799
P_OP_DIVS           2848
P_OP_EOR            2860
P_OP_JSR            2801
P_OP_LEA            27FA
P_OP_LSL            288F
P_OP_LSR            2888
P_OP_MOVEA_L        27B4
P_OP_MOVEA_W        27CB
P_OP_MOVEB          27A9
P_OP_MOVEM_L        27EE
P_OP_MOVEM_W        27E2
P_OP_MOVE_L         27C0
P_OP_MOVE_W         27D7
P_OP_MULS           286E
P_OP_NEG            2816
P_OP_NOP            2808
P_OP_OR             2853
P_OP_ORI            2792
P_OP_ROL            28AB
P_OP_ROR            28A4
P_OP_RTS            280F
P_OP_SUB            2859
P_OP_SUBQ           281D
P_SIZE_B            2786
P_SIZE_L            278E
P_SIZE_W            278A
RET_SA              1426
ROTATE              3244
RTS                 2E84
SAVED               3108
SECOND_3            173B
SIZE                14
SIZE_B              319C
SIZE_L              31AC
SIZE_W              31A4
SPACE               28BB
START               10A3
STRING_ADD_SUCCESS  12A0
STRING_BUFFER_ADD_LOOP  128A
STRING_BUFFER_LOOP  1276
STRING_BUFFER_POINTER  1252
STRIP_ASCII         1402
SUB30               1422
SUB37               141A
SUBQ                2D4E
SUBQ_BACK           2D88
SUBQ_SAVED          2D60
THIRD_3             173C
TOSAVE              C3F
TRAILING_HELPER     319C
TRAILING_SIZE       28BC
TRAPTASK13          134A
VALIDATE_END_POS    111C
VALIDATE_EVEN       113E
VALIDATE_POSITIVE_ADDRESS  10FA
VALIDATE_START_ADDRESS  10F8
_00000000           1380
