000010A4 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/17/2019 12:35:33 PM

00000000                             1  **--------------------------------------------------------------------------
00000000                             2  * Title      : Disassembler 
00000000                             3  * Written by : TEAM REEE Denny, Daniel, Fahad
00000000                             4  * Date       : 3/16/2019 
00000000                             5  * 
00000000                             6  * 
00000000                             7  * Description: This code contains a method for you to use
00000000                             8  * with your Disassembler project IO, and a short demo of 
00000000                             9  * how to call this method in the body of the "START" code.
00000000                            10  *---------------------------------------------------------------------------
00001000                            11      ORG    $1000    
00001000                            12  *---------------------------------------------------------------------------
00001000                            13  
00001000                            14  *declare the variable startaddr with size 1 long
00001000                            15  G_BUFFER        DS.B    80  ;Used to print out the needed letters to the buffer
00001050                            16  B_BUFFER        DS.B    80  ;Bad buffer used to load bad data
000010A0                            17  CUR_OP_CODE     DS.W    1   ;Used to determine the current 4 hex OP code
000010A2                            18  IS_VALID        DS.B    1   ;Validity bit to check if a code is valid or not
000010A3                            19                              ;1 = valid, 0 = invalid
000010A3                            20                              
000010A3                            21  START:
000010A3                            22  
000010A4  43F9 00001430             23      LEA MAIN_CONSOLE, A1
000010AA  4EB9 000012E4             24      JSR TrapTask13
000010B0                            25  
000010B0                            26      
000010B0                            27      
000010B0                            28      ******************************************
000010B0                            29      **
000010B0                            30      **     ___         ___        /  __  
000010B0                            31      **    |__  | |    |__     |  /  /  \  
000010B0                            32      **    |    | |___ |___    | /   \__/ 
000010B0                            33      **                           
000010B0                            34      **
000010B0                            35      ** This is the begninning of the code for reading from files
000010B0                            36      ******************************************
000010B0                            37  
000010B0                            38  
000010B0                            39      ;Open config.cfg (trap subtasks 50-59) (this is an IO responsibility if 3 team members)
000010B0                            40      
000010B0                            41  
000010B0                            42                   ; perform task
000010B0                            43  ; Attempt to open file for input
000010B0  43F9 00001702             44          lea     fileName,A1             ; name of file to open
000010B6  103C 0033                 45          move.b  #51,D0                  ; trap task #51, open existing file
000010BA  4E4F                      46          trap    #15                     ; perform task
000010BC  23C1 0000175A             47          move.l  D1,fileID               ; save file ID
000010C2                            48  
000010C2                            49  ; Read string from file
000010C2  43F9 00001744             50          lea     string,A1               ; location of string buffer
000010C8  2239 0000175A             51          move.l  fileID,D1               ; file ID of file to read from
000010CE  4282                      52          clr.l   D2
000010D0  343C 0014                 53          move.w  #SIZE,D2                ; number of bytes to read
000010D4  103C 0035                 54          move.b  #53,D0                  ; trap task #53, read from file
000010D8  4E4F                      55          trap    #15                     ; perform task
000010DA                            56  ; Close file when finished
000010DA  103C 0038                 57          move.b  #56,D0                  ; trap task #56, close file, D1 contains fileID
000010DE  4E4F                      58          trap    #15                     ; perform task
000010E0                            59  
000010E0                            60          
000010E0                            61  
000010E0                            62      ;load start and end address as longs
000010E0                            63      ; Start Address is in A5     
000010E0  43F9 00001744             64      LEA string, A1
000010E6  4EB9 0000137A             65      JSR AsciiToHex     ;  example of how to convert ascii to hex
000010EC  2A47                      66      MOVE.L D7, A5
000010EE                            67      
000010EE                            68      ; End Address is in A6
000010EE  5489                      69      ADDA.L #2, A1
000010F0  4EB9 0000137A             70      JSR AsciiToHex
000010F6  2C47                      71      MOVE.L D7, A6
000010F8                            72      
000010F8                            73      
000010F8                            74      ;loop from start to end, printing out the instruction or DATA if not recognized 
000010F8                            75      ;   use my method below (printStringToFileAndConsole) to print out the individual instruction (or DATA)
000010F8                            76      
000010F8                            77      ;TODO : validate start and ending address 
000010F8                            78      
000010F8                            79  Validate_Start_Address
000010F8  200D                      80      MOVE.L A5, D0
000010FA                            81  *----------------------------------------------------------------------------------
000010FA                            82  * Method Name: ValidatePositiveAddress
000010FA                            83  * Description: Checks if the start address is positve it then branches
000010FA                            84  *              to validate if the address in the config.cfg file is even
000010FA                            85  *
000010FA                            86  *  Preconditions & Input of a start address that is even
000010FA                            87  *       A1 (input) points to a memory buffer holding 8 ascii chars (not null-terminated) 
000010FA                            88  *       This function calls another function (strip_ascii)
000010FA                            89  *
000010FA                            90  *  Postconditions & Output
000010FA                            91  *   
000010FA                            92  *----------------------------------------------------------------------------------
000010FA                            93  ValidatePositiveAddress
000010FA  200D                      94      MOVE.L A5, D0
000010FC  0280 80000000             95      ANDI.L #$80000000, D0 * checking if the start address address is postive
00001102  B0BC 00000000             96      CMP.L #0, D0
00001108  6700 0034                 97      BEQ validate_even
0000110C                            98      
0000110C  43F9 0000175E             99      LEA invalid_address_message, A1
00001112  103C 000E                100      MOVE.B #14, D0    
00001116  4E4F                     101      TRAP #15        
00001118                           102      
00001118                           103      
00001118  6000 0138                104      BRA DONE
0000111C                           105  
0000111C                           106  validate_end_pos
0000111C  200E                     107      MOVE.L A6, D0
0000111E  0280 80000000            108      ANDI.L #$80000000, D0 * checking if the end address address is postive
00001124  B0BC 00000000            109      CMP.L #0, D0
0000112A  6700 0012                110      BEQ validate_even
0000112E                           111      
0000112E  43F9 0000175E            112      LEA invalid_address_message, A1
00001134  103C 000E                113      MOVE.B #14, D0    
00001138  4E4F                     114      TRAP #15        
0000113A                           115      
0000113A                           116      
0000113A  6000 0116                117      BRA DONE
0000113E                           118      
0000113E                           119      
0000113E                           120  validate_even
0000113E  200D                     121      MOVE.L A5, D0     *MOVE STARTING ADDRESS TO D0
00001140  0280 00000001            122      ANDI.L #$00000001, D0            
00001146  B0BC 00000000            123      CMP.L #0, D0
0000114C  6700 0012                124      BEQ mainloop
00001150                           125      *handle odd addresses        
00001150                           126      
00001150  43F9 0000175E            127      LEA invalid_address_message, A1
00001156  103C 000E                128      MOVE.B #14, D0    
0000115A  4E4F                     129      TRAP #15        
0000115C                           130              
0000115C  6000 00F4                131      BRA DONE 
00001160                           132              
00001160                           133  
00001160                           134  
00001160                           135              
00001160  49F8 1000                136  mainloop    LEA G_BUFFER,A4
00001164                           137      
00001164  BDCD                     138              CMPA.L A5, A6
00001166  6D00 00EA                139              BLT DONE
0000116A                           140              
0000116A                           141              *clear both buffers 
0000116A  23FC 00001000 000012B8   142              MOVE.L #G_BUFFER, Arg_ClearBuffer_Buffer  
00001174  4EB9 000012C0            143              JSR ClearBuffer
0000117A                           144              
0000117A  23FC 00001050 000012B8   145              MOVE.L #B_BUFFER, Arg_ClearBuffer_Buffer  
00001184  4EB9 000012C0            146              JSR ClearBuffer
0000118A                           147              
0000118A                           148              * Add address to both buffers
0000118A                           149              
0000118A  23CD 000013C2            150              MOVE.L A5, Arg_NumToHexStr_Num  * the current address is stored to A5, so we need to move to the arg of converting from NumToHex
00001190  13FC 0008 000013C6       151              MOVE.B #8, Arg_NumToHexStr_Length    *this specifies the number of characters that needs to be convorted.
00001198  4EB9 000013D0            152              JSR NumToHexStr 
0000119E                           153              
0000119E  23FC 000013C7 00001256   154              MOVE.L #Ret_NumToHexStr_Str, Arg_AddStrToBuffer_String
000011A8  23FC 00001000 0000125A   155              MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer  * printing the address to the good buffer
000011B2  4EB9 00001264            156              JSR AddStrToBuffer
000011B8                           157      
000011B8                           158             
000011B8                           159      
000011B8  31DD 10A0                160              MOVE.W (A5)+, CUR_OP_CODE * read the current opcode
000011BC                           161              
000011BC                           162              
000011BC                           163               
000011BC  4EF9 0000177E            164              JMP OP_JSR_Routine
000011C2                           165  
000011C2                           166  *********************************
000011C2                           167  *Checks if its valid print or invalid
000011C2                           168  * @pre checks invalid
000011C2                           169  * @post Branches to the respective branch
000011C2                           170  ************************************
000011C2                           171  check_print
000011C2  0C38 0001 10A2           172              CMP.B #1,IS_VALID
000011C8  6700 0006                173              BEQ   print_instruction
000011CC  6600 0012                174              BNE   print_data
000011D0                           175              
000011D0                           176  print_instruction  
000011D0  6600 000E                177              BNE print_data
000011D4                           178              *print the opcode if valid
000011D4  43F8 1000                179              LEA G_BUFFER,A1
000011D8  4EB9 000012E4            180              JSR TrapTask13
000011DE  6080                     181              BRA mainloop
000011E0                           182   
000011E0                           183              *otherwise print data
000011E0                           184  print_data  
000011E0  23CD 000013C2            185              MOVE.L A5, Arg_NumToHexStr_Num  * the current address is stored to A5, so we need to move to the arg of converting from NumToHex
000011E6  13FC 0008 000013C6       186              MOVE.B #8, Arg_NumToHexStr_Length    *this specifies the number of characters that needs to be convorted.
000011EE  4EB9 000013D0            187              JSR NumToHexStr 
000011F4  23FC 000013C7 00001256   188              MOVE.L #Ret_NumToHexStr_Str, Arg_AddStrToBuffer_String 
000011FE                           189              
000011FE  23FC 00001050 0000125A   190              MOVE.L #B_BUFFER, Arg_AddStrToBuffer_Buffer
00001208  4EB9 00001264            191              JSR AddStrToBuffer
0000120E                           192              * Add bad data to bad buffer
0000120E  23FC 000027B2 00001256   193              MOVE.L #P_INVALID_OP, Arg_AddStrToBuffer_String *printing data to the bad buffer
00001218  4EB9 00001264            194              JSR AddStrToBuffer
0000121E                           195              
0000121E  33F8 10A0 000013C2       196              MOVE.W CUR_OP_CODE, Arg_NumToHexStr_Num  * the current address is stored to A5, so we need to move to the arg of converting from NumToHex
00001226  13FC 0008 000013C6       197              MOVE.B #8, Arg_NumToHexStr_Length    *this specifies the number of characters that needs to be convorted.
0000122E  4EB9 000013D0            198              JSR NumToHexStr 
00001234                           199              
00001234  23FC 000013C7 00001256   200              MOVE.L #Ret_NumToHexStr_Str, Arg_AddStrToBuffer_String
0000123E  4EB9 00001264            201              JSR AddStrToBuffer
00001244                           202              
00001244  43F8 1050                203              LEA B_BUFFER,A1
00001248  4EB9 000012E4            204              JSR TrapTask13          
0000124E  6000 FF10                205              BRA mainLoop
00001252                           206  
00001252                           207  
00001252                           208  DONE            
00001252  FFFF FFFF                209              SIMHALT 
00001256                           210              
00001256                           211   
00001256                           212  **
00001256                           213  * AddStrToBuffer
00001256                           214  **
00001256                           215  * Adds the given NULL-terminated string to the specified buffer.
00001256                           216  *
00001256                           217  * Default buffer length is 80 characters, but can be modified in the argument
00001256                           218  * variables.
00001256                           219  *
00001256                           220  * If the buffer length is exceeded, either due to lack of a NULL character or
00001256                           221  * an incorrectly specified length, 1 is returned. Otherwise, 0 is returned to
00001256                           222  * indicate success.
00001256                           223  *
00001256                           224  **
00001256                           225  * @param Arg_AddStrToBuffer_String              Pointer to string
00001256                           226  * @param Arg_AddStrToBuffer_Buffer              Pointer to buffer
00001256                           227  * @param Arg_AddStrToBuffer_BufferLength        Length of buffer (default 80 chars)
00001256                           228  * @return Ret_AddStrToBuffer_Success            0 if successful, 1 otherwise.
00001256                           229  * @branch _AddStrToBuffer_FindBufferNullLoop    Loop to find NULL in buffer
00001256                           230  * @branch _AddStrToBuffer_AddLoop               Loop to add string to buffer
00001256                           231  * @branch _AddStrToBuffer_Success               Branch when string successfully added
00001256                           232  * @branch _AddStrToBuffer_StringLengthExceeded  Branch when length exceeded (either string or buffer)
00001256                           233  * @branch _AddStrToBuffer_End                   End of subroutine
00001256                           234  **
00001256                           235  Arg_AddStrToBuffer_String           DS.L    1
0000125A                           236  Arg_AddStrToBuffer_Buffer           DS.L    1
0000125E= 00000050                 237  Arg_AddStrToBuffer_BufferLength     DC.L    80
00001262                           238  Ret_AddStrToBuffer_Success          DS.B    1
00001263                           239  
00001264                           240  AddStrToBuffer:                     DS.W    0
00001264  48E7 C0C0                241      MOVEM.L     D0-D1/A0-A1, -(SP)                  * Backup registers to stack
00001268                           242      
00001268  2078 1256                243      MOVE.L      Arg_AddStrToBuffer_String, A0       * Load string pointer
0000126C  2278 125A                244      MOVE.L      Arg_AddStrToBuffer_Buffer, A1       * Load buffer pointer
00001270  2038 125E                245      MOVE.L      Arg_AddStrToBuffer_BufferLength, D0 * Load buffer length
00001274  4278 1262                246      CLR.W       Ret_AddStrToBuffer_Success          * Clear success bit
00001278  4281                     247      CLR.L       D1                                  * Clear loop counter
0000127A                           248  
0000127A                           249  _AddStrToBuffer_BufferLoop
0000127A  0C11 0000                250      CMPI.B      #0, (A1)                            * If buffer char is NULL
0000127E  6700 000E                251      BEQ         _AddStrToBuffer_AddLoop             * Start adding string to bufer
00001282                           252      
00001282  B280                     253      CMP.L       D0, D1                              * If counter >= max length
00001284  6C00 0026                254      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
00001288                           255      
00001288  5289                     256      ADDQ.L      #1, A1                              * Go to next character
0000128A  5201                     257      ADDQ.B      #1, D1                              * Increment counter
0000128C  60EC                     258      BRA         _AddStrToBuffer_BufferLoop          * Loop back
0000128E                           259      
0000128E                           260  _AddStrToBuffer_AddLoop
0000128E  0C10 0000                261      CMPI.B      #0, (A0)                            * If string char is NULL
00001292  6700 0010                262      BEQ         _AddStrToBuffer_Success             * String successfully added
00001296                           263      
00001296  B200                     264      CMP.B       D0, D1                              * If counter >= max length
00001298  6C00 0012                265      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
0000129C                           266      
0000129C  12D8                     267      MOVE.B      (A0)+, (A1)+                        * Move string char to buffer char
0000129E  5201                     268      ADDQ.B      #1, D1                              * Increment counter
000012A0  524C                     269      ADDQ.W      #1, A4
000012A2  60EA                     270      BRA         _AddStrToBuffer_AddLoop             * Loop back
000012A4                           271  
000012A4                           272  _AddStrToBuffer_Success
000012A4  12BC 0000                273      MOVE.B      #0, (A1)                            * Add NULL to end of string
000012A8  6000 0008                274      BRA         _AddStrToBuffer_End                 * Finish subroutine
000012AC                           275  
000012AC                           276  _AddStrToBuffer_LengthExceeded
000012AC  31FC 0001 1262           277      MOVE.W      #1, Ret_AddStrToBuffer_Success      * Invalidate success bit
000012B2                           278  
000012B2                           279  _AddStrToBuffer_End
000012B2  4CDF 0303                280      MOVEM.L     (SP)+, D0-D1/A0-A1                  * Restore registers from stack
000012B6  4E75                     281      RTS                  
000012B8                           282   
000012B8                           283   
000012B8                           284   
000012B8                           285  **************************************************************************
000012B8                           286  * ClearBuffer
000012B8                           287  ***********************************************************************
000012B8                           288  * Clears the given buffer by filling it with NULL. By default it will fill 80
000012B8                           289  * bytes from the buffer pointer with NULL, so make sure the buffer reserves
000012B8                           290  * that many bytes. The default can be changed.
000012B8                           291  *
000012B8                           292  **
000012B8                           293  * @param Arg_ClearBuffer_Buffer     Pointer to buffer
000012B8                           294  * @param Arg_ClearBuffer_Length     Byte length of buffer, default 80
000012B8                           295  * @branch _ClearBuffer_Loop         Buffer loop
000012B8                           296  * @branch _ClearBuffer_End          Subroutine end
000012B8                           297  *****************************************************************************
000012B8                           298  Arg_ClearBuffer_Buffer  DS.L    1
000012BC= 00000050                 299  Arg_ClearBuffer_Length  DC.L    80
000012C0                           300  
000012C0                           301  ClearBuffer:            DS.W    0
000012C0  48E7 C080                302      MOVEM.L     D0-D1/A0, -(SP)             * Backup registers to stack
000012C4  2078 12B8                303      MOVEA.L     Arg_ClearBuffer_Buffer, A0  * Load buffer address
000012C8  2038 12BC                304      MOVE.L      Arg_ClearBuffer_Length, D0  * Load buffer length
000012CC  4281                     305      CLR.L       D1                          * Clear counter
000012CE                           306      
000012CE                           307  _ClearBuffer_Loop
000012CE  B280                     308      CMP.L       D0, D1                      * If counter >= length
000012D0  6C00 0008                309      BGE         _ClearBuffer_End            * Finish subroutine
000012D4                           310      
000012D4  4218                     311      CLR.B       (A0)+                       * Clear current character in buffer
000012D6  5241                     312      ADDQ        #1, D1                      * Increment counter
000012D8  60F4                     313      BRA         _ClearBuffer_Loop           * Loop back
000012DA                           314      
000012DA                           315  _ClearBuffer_End
000012DA  4CDF 0103                316      MOVEM.L     (SP)+, D0-D1/A0             * Restore registers from stack
000012DE  4E75                     317      RTS                                     * Exit subroutine
000012E0                           318  
000012E0                           319  
000012E0  FFFF FFFF                320      SIMHALT
000012E4                           321  
000012E4                           322  
000012E4                           323  
000012E4                           324  *********************************************************************************
000012E4                           325  * Method Name: TrapTask13
000012E4                           326  * Description: Creates a file if none exists, and appends bytes to that file
000012E4                           327  *   while also echoing the written bytes to the screen.  You shouldn't need to
000012E4                           328  *   change this code.
000012E4                           329  *
000012E4                           330  * Calling Convention: Callee-Saved 
000012E4                           331  *
000012E4                           332  * Preconditions & Method Input:
000012E4                           333  *   A1 points to the null-terminated buffer to write (newline will be added for you)
000012E4                           334  *
000012E4                           335  * Postconditions & Output:
000012E4                           336  *   ALL files that were previously open will be CLOSED (FileIDs will be invalid)
000012E4                           337  *   See 'Output.txt' in directory for the results, also piped to the console
000012E4                           338  *
000012E4                           339  *
000012E4                           340  *  A2 holds a pointer to null terminated string to write (input)
000012E4                           341  *  A3 points to the null-terminated file name
000012E4                           342  *  D3 holds the number of bytes already in the file to write
000012E4                           343  *
000012E4                           344  *  D5 holds number of bytes to write
000012E4                           345  ********************************************************************************
000012E4                           346  toSave REG D0-D5/A2-A3
000012E4                           347  TrapTask13:
000012E4                           348      *******************************************************************
000012E4                           349      * Method initialization, regsiter spilling, parameter saving, etc.
000012E4                           350      *******************************************************************
000012E4  48E7 FC30                351      MOVEM.L toSave, -(SP)   ;  Callee-Saved, so save and restore     
000012E8                           352        
000012E8  2449                     353      MOVEA.L A1, A2 ; save this buffer to write
000012EA  47F9 000016E2            354      LEA outFilename, A3  ; save this for later, too
000012F0                           355        
000012F0  303C 0032                356      move #50,d0   
000012F4  4E4F                     357      trap #15 ; close all files, suggested to begin any IO 
000012F6                           358      *******************************************************************
000012F6                           359      * End Method Init
000012F6                           360      *******************************************************************
000012F6                           361  
000012F6                           362      ******************************************************************************************
000012F6                           363      * Calculate the number of bytes to write by searching for the null in the target buffer A0
000012F6                           364      ******************************************************************************************
000012F6  4285                     365      CLR.L D5 *D5 is now the number of bytes to write
000012F8                           366  nullLoop:
000012F8  1019                     367      MOVE.B (A1)+, D0
000012FA  0C00 0000                368      CMPI.B #0,D0  * compare to null
000012FE  6700 0006                369      BEQ findNullLoopDone
00001302  5245                     370      ADDI.W #1, D5
00001304  60F2                     371      BRA nullLoop
00001306                           372      
00001306                           373  findNullLoopDone:
00001306  224B                     374      MOVEA.L A3, A1 * reset A1 so it points to the file to write to (to open, next)
00001308                           375      
00001308                           376      ;check if file exists, and open with task 51 if so, otherwise 52
00001308                           377      ;(precondition here is A1 points to the null-terminated filename )
00001308  103C 0033                378      MOVE.B #51, D0      ;open file (task 51 is existing, 52 is new)
0000130C  4E4F                     379      trap #15
0000130E                           380        
0000130E                           381      if.w D0 <NE> #0 then.s         ; if file error (404, not found)
00001314  103C 0034                382          MOVE.B #52, D0             ; open new file (52 is new)
00001318  4E4F                     383          trap #15
0000131A                           384      endi
0000131A                           385      
0000131A                           386      ********************************************************************************************************* 
0000131A                           387      * Seek to END of FILE by counting the number of bytes, closing, reopening, then seeking.
0000131A                           388      *    (first, count number of bytes already in the file to obtain seek position)
0000131A                           389      *********************************************************************************************************
0000131A  4283                     390      Clr.L D3   ;TODO: reg save, D3 is now our count of bytes read
0000131C  7401                     391      MOVE.L #1, D2 ; read one byte at a time
0000131E  43F9 000016F9            392      LEA byteRead, A1
00001324                           393      
00001324                           394  countLoop:
00001324  103C 0035                395      MOVE.B #53, D0 ; try to read one byte (TODO: move out of loop)
00001328  4E4F                     396      trap #15
0000132A                           397      
0000132A  0C40 0001                398      CMPI.W #1,D0  ;1 == EOF
0000132E  6700 0006                399      BEQ countDone
00001332  5243                     400      ADDI #1, D3
00001334  60EE                     401      BRA countLoop
00001336                           402      
00001336                           403  countDone:    
00001336                           404      * close this file
00001336  303C 0038                405       move #56,d0  
0000133A  4E4F                     406       trap #15 
0000133C                           407       
0000133C                           408       * reopen the target file
0000133C  224B                     409       MOVE.L A3,A1
0000133E  303C 0033                410       MOVE #51, D0
00001342  4E4F                     411       trap #15
00001344                           412       
00001344                           413      * seek to right position, then continue with writing
00001344  2403                     414      MOVE.L D3, D2 ; move the number of bytes found in the file to D2
00001346  303C 0037                415      MOVE #55, D0  ; position file task
0000134A  4E4F                     416      trap #15
0000134C                           417  
0000134C                           418      ******************************************************************************
0000134C                           419      * Actually write the buffer to the file, after caculating the number of bytes 
0000134C                           420      *  to write and after seeking to the right location in the file for append
0000134C                           421      ******************************************************************************
0000134C                           422  
0000134C  2405                     423      MOVE.L D5, D2 ; restore this for the actually writing the buffer 
0000134E                           424      ; assumes A0 hasnt changed since handed to this method      
0000134E  224A                     425      MOVEA.L A2, A1 ; load the address of the buffer we want to write to disk
00001350                           426      ; assumes file ID is still stored in D1.L  
00001350  103C 0036                427      MOVE.B #54, D0 ; subtask 54 is write to open file (append, or?), assumes D2 holds # of bytes
00001354  4E4F                     428      trap #15
00001356                           429  
00001356                           430      ; add a newline to the file output
00001356  43F9 000016DC            431      LEA NEWLINE, A1
0000135C  103C 0036                432      MOVE.B #54, D0 
00001360  143C 0002                433      MOVE.B #2,D2  ; kills # of bytes to write from input param
00001364  4E4F                     434      trap #15
00001366                           435      
00001366                           436      ; finally, close only this file
00001366  103C 0038                437      MOVE.B #56, D0 ; close file task
0000136A  4E4F                     438      trap #15
0000136C                           439    
0000136C                           440      ; report to screen
0000136C  224A                     441      MOVEA.L A2, A1 ; load the address of the buffer we want to write to disk & screen
0000136E  103C 000D                442      MOVE.B #13, D0
00001372  4E4F                     443      trap #15
00001374                           444        
00001374                           445      ; restore context
00001374  4CDF 0C3F                446      MOVEM.L (SP)+, toSave
00001378                           447      
00001378  4E75                     448      RTS
0000137A                           449      
0000137A                           450      
0000137A                           451  *----------------------------------------------------------------------------------
0000137A                           452  * Method Name: AsciiToHex
0000137A                           453  * Written by : Berger, Modified by Nash
0000137A                           454  * Date       : 3/1/2019
0000137A                           455  * Description: Converts chars '0'-'9' and 'a'-'f' to 0-9,a-F
0000137A                           456  *              Transforms/unpacks 8 chars (8b each) pointed to by A1 into 
0000137A                           457  *              its (4b each) equivalent hex value 
0000137A                           458  *  
0000137A                           459  *  Preconditions & Input
0000137A                           460  *       A1 (input) points to a memory buffer holding 8 ascii chars (not null-terminated) 
0000137A                           461  *       This function calls another function (strip_ascii)
0000137A                           462  *
0000137A                           463  *  Postconditions & Output
0000137A                           464  *       D7 (output) holds the converted value 
0000137A                           465  *       Caller-Saved : D0 is temp, D6 is a loop var
0000137A                           466  *----------------------------------------------------------------------------------
0000137A                           467  AsciiToHexRegList REG D0,D6
0000137A                           468  AsciiToHex     
0000137A  48E7 8000                469      MOVEM.L asciiToHexRegList, -(SP)  *save context
0000137E  4287                     470      CLR.L D7 * clear our return value
00001380  7C08                     471      MOVE.L #8, D6 ; and set up our loop counter
00001382                           472  
00001382                           473  chrLoop
00001382  1019                     474      MOVE.B (A1)+,D0 * Get the first byte
00001384  4EB9 0000139C            475      jsr strip_ascii * Get rid of the ascii code    
0000138A  8E40                     476      OR.W D0,D7 * Load the bits into D7
0000138C                           477      
0000138C  5306                     478      subI.B #1,D6  *decrement our loop variable
0000138E  6700 0006                479      BEQ chrDone   *skip shifting if we are done
00001392                           480      
00001392  E987                     481      ASL.L #4,D7 * shift left 4 bits to prepare for next byte
00001394  60EC                     482      BRA chrLoop
00001396                           483  
00001396                           484  chrDone
00001396  4CDF 0001                485      MOVEM.L (SP)+,asciiToHexRegList 
0000139A  4E75                     486      RTS
0000139C                           487  
0000139C                           488  
0000139C                           489  **********************************************************************
0000139C                           490  * SUBROUTINE: strip_ascii
0000139C                           491  * remove the ascii code from the digits 0-9,a-f, or A-F
0000139C                           492  * Input Parameters: <D0> = ascii code
0000139C                           493  *
0000139C                           494  * Return parameters: D0.B = number 0...F, returned as 00...0F
0000139C                           495  * Registers used internally: D0
0000139C                           496  * Assumptions: D0 contains $30-$39, $41-$46 or $61-66
0000139C                           497  *
0000139C                           498  ***********************************************************************
0000139C                           499  strip_ascii
0000139C  B03C 0039                500        CMP.B #$39,D0 * Is it in range of 0-9?
000013A0  6F00 001A                501        BLE sub30 * Its a number
000013A4  B03C 0046                502        CMP.B #$46,D0 * Is is A...F?
000013A8  6F00 000A                503        BLE sub37 * Its A...F
000013AC  0400 0057                504        SUB.B #$57,D0 * Its a...f
000013B0  6000 000E                505        BRA ret_sa * Go back
000013B4  0400 0037                506  sub37 SUB.B #$37,D0 * Strip 37
000013B8  6000 0006                507        BRA ret_sa * Go back
000013BC  0400 0030                508  sub30 SUB.B #$30,D0 * Strip 30
000013C0  4E75                     509  ret_sa RTS * Go back
000013C2                           510  
000013C2                           511  
000013C2                           512  **
000013C2                           513  * NumToHexStr
000013C2                           514  **
000013C2                           515  * Converts the given number to a NULL-terminated hexadecimal character string
000013C2                           516  * with the specified length.
000013C2                           517  *
000013C2                           518  * By default, the number is converted to an 8-character string, but this can be
000013C2                           519  * changed in the length argument, which can be between 1 and 8 characters
000013C2                           520  * inclusive.
000013C2                           521  *
000013C2                           522  * Additionally, the conversion starts from the rightmost bit of the number, so
000013C2                           523  * keep this in mind when converting numbers with lengths < 8. For example,
000013C2                           524  * converting the number 0x0642FFFF with length = 4 results in the string 'FFFF'.
000013C2                           525  *
000013C2                           526  * The converted string will remain until the subroutine is called again, so
000013C2                           527  * make sure to store it elsewhere before calling this again.
000013C2                           528  *
000013C2                           529  **
000013C2                           530  * @param Arg_NumToHexStr_Num        Number to convert
000013C2                           531  * @param Arg_NumToHexStr_Length     Number of characters to convert, between 0-8
000013C2                           532  * @return Ret_NumToHexStr_Str       Converted hexadecimal character string
000013C2                           533  * @branch _NumToHexStr_PosLength    Branch for checking positive length
000013C2                           534  * @branch _NumToHexStr_ValidLength  Branch for checking valid length
000013C2                           535  * @branch _NumToHexStr_Loop         Loop through each digit
000013C2                           536  * @branch _NumToHexStr_Letter       Branch for converting to hex letter
000013C2                           537  * @branch _NumToHexStr_AddChar      Add character to string
000013C2                           538  **
000013C2                           539  Arg_NumToHexStr_Num     DS.L    1
000013C6= 08                       540  Arg_NumToHexStr_Length  DC.B    8
000013C7                           541  Ret_NumToHexStr_Str     DS.B    9
000013D0                           542  
000013D0                           543  NumToHexStr:            DS.W    0
000013D0  48E7 F0C0                544      MOVEM.L     D0-D3/A0-A1, -(SP)          * Backup registers to stack
000013D4  4281                     545      CLR.L       D1
000013D6  4280                     546      CLR.L       D0
000013D8  2038 13C2                547      MOVE.L      Arg_NumToHexStr_Num, D0     * Load number
000013DC  1238 13C6                548      MOVE.B      Arg_NumToHexStr_Length, D1  * Load length
000013E0  207C 000013C7            549      MOVEA.L     #Ret_NumToHexStr_Str, A0    * Load string address
000013E6                           550      
000013E6  0C01 0001                551      CMPI.B      #1, D1
000013EA  6C00 0004                552      BGE         _NumToHexStr_PosLength
000013EE  7201                     553      MOVEQ       #1, D1
000013F0                           554      
000013F0                           555  _NumToHexStr_PosLength
000013F0  0C01 0008                556      CMPI.B      #8, D1
000013F4  6F00 0004                557      BLE         _NumToHexStr_ValidLength
000013F8  7208                     558      MOVEQ       #8, D1
000013FA                           559      
000013FA                           560  _NumToHexStr_ValidLength
000013FA  2248                     561      MOVEA.L     A0, A1                      * A0 contains start, A1 contains current
000013FC  D2C1                     562      ADDA.W      D1, A1                      * Move to last digit
000013FE  4211                     563      CLR.B       (A1)                        * NULL last digit
00001400  740F                     564      MOVEQ       #$0F, D2                    * Bitmask for rightmost nibble, which is last hex
00001402                           565      
00001402                           566  _NumToHexStr_Loop
00001402  1600                     567      MOVE.B      D0, D3                      * Get byte (2 hex chars) from number
00001404  C602                     568      AND.B       D2, D3                      * Mask to get last hex char
00001406                           569      
00001406  0C03 0009                570      CMPI.B      #9, D3                      * If the value > 9
0000140A  6E00 000A                571      BGT         _NumToHexStr_Letter         * It's a letter, so branch to letter
0000140E                           572      
0000140E  0603 0030                573      ADDI.B      #'0', D3                    * Get to ASCII value for 0-9
00001412  6000 000A                574      BRA         _NumToHexStr_AddChar        * Branch to add char to string
00001416                           575  
00001416                           576  _NumToHexStr_Letter
00001416  0403 000A                577      SUBI.B      #10, D3                     * Subtract 10 first to get correct ASCII
0000141A  0603 0041                578      ADDI.B      #'A', D3                    * Get to ASCII value for A-F
0000141E                           579  
0000141E                           580  _NumToHexStr_AddChar
0000141E  1303                     581      MOVE.B      D3, -(A1)                   * Add char to string and decrement pointer
00001420  E888                     582      LSR.L       #4, D0                      * Shift the number a nibble (hex char) to the right
00001422  B3C8                     583      CMPA.L      A0, A1                      * If current pointer is > string start address
00001424  6EDC                     584      BGT         _NumToHexStr_Loop           * Loop back
00001426                           585      
00001426  42B8 13C2                586      CLR.L  Arg_NumToHexStr_Num 
0000142A                           587      
0000142A  4CDF 030F                588      MOVEM.L     (SP)+, D0-D3/A0-A1          * Restore registers from stack
0000142E  4E75                     589      RTS                                     * Exit subroutine
00001430                           590  
00001430                           591  
00001430                           592  MAIN_CONSOLE
00001430                           593     
00001430= 3D 3D 3D 3D 3D 3D ...    594        DC.B '============================================================',CR,LF
0000146E= 7C 7C 20 20 20 20 ...    595        DC.B '||                                                        ||',CR,LF
000014AC= 7C 7C 20 20 20 23 ...    596        DC.B '||   #####      ###    ##   ##                            ||',CR,LF
000014EA= 7C 7C 20 20 23 23 ...    597        DC.B '||  ##        ##   ##  ## ##                              ||',CR,LF
00001528= 7C 7C 20 23 23 20 ...    598        DC.B '|| ## ####     #####   ####                               ||',CR,LF
00001566= 7C 7C 20 23 23 20 ...    599        DC.B '|| ##    ##  ##    ##  ####                               ||',CR,LF
000015A4= 7C 7C 20 23 23 20 ...    600        DC.B '|| ##    ##  ##    ##  ## ##                              ||',CR,LF
000015E2= 7C 7C 20 20 23 23 ...    601        DC.B '||  #####     ######   ##  ##                             ||',CR,LF
00001620= 7C 7C 20 20 20 20 ...    602        DC.B '||                                                        ||',CR,LF
0000165E= 7C 7C 20 20 20 44 ...    603        DC.B '||   Daniel Yan, Fahad Alshehri, Denny Park               ||',CR,LF
0000169C= 3D 3D 3D 3D 3D 3D ...    604        DC.B '============================================================',CR,LF,0
000016DB                           605      
000016DB                           606  * Required variables and constants go here for your Disassembler
000016DB  =0000000D                607  CR                  EQU $0D
000016DB  =0000000A                608  LF                  EQU $0A
000016DC= 000D 000A 0000           609  NEWLINE             DC.W CR,LF,0  
000016E2= 44 69 73 61 73 73 ...    610  outFilename         DC.B 'DisassemblerOutput.txt',0
000016F9                           611  byteRead            DS.B 1
000016FA= 31 41 30 30 31 41 ...    612  ascii_val           DC.B $31,$41,$30,$30,$31,$41,$30,$30 * Test value $1A001A00
00001702                           613  
00001702                           614  * Variables and constants
00001702                           615  ;CR              EQU     $D              ; ASCII code for carriage return
00001702                           616  ;LF              EQU     $A              ; ASCII code for line feed
00001702  =00000014                617  SIZE            EQU     20             ; Max string size
00001702= 43 6F 6E 66 69 67 ...    618  fileName        DC.B    'Config.cfg',0   ; name of text file
0000170E= 4120 6669 6C65 2...      619  errorFile       DC.W    'A file error occurred.',CR,LF,0
0000172A= 4669 6C65 2072 6...      620  success         DC.W    'File read complete.',CR,LF,0
00001744                           621  string          DS.B    SIZE            ; I/O buffer
00001758                           622  strSize         DS.W    1               ; Size if input string
0000175A                           623  fileID          DS.L    1               ; File ID
0000175E= 496E 7661 6C69 6...      624  invalid_address_message DC.W 'Invalid Hex Address' ,CR,LF,0
00001778                           625  
00001778                           626  
00001778                           627      INCLUDE "OP_Code_Routines.x68"
00001778                           628  
00001778                           629  OP_SIZE         DS.B    1   ;This constant refers to the size of the current OP code 
00001779                           630  MNEMONIC        DS.B    1   ;Constant for EA, first 4 bits (15-12) of a 4 hex OP code
0000177A                           631  FIRST_3         DS.B    1   ;Constant for EA, 3 bits (11-9) of a 4 hex OP code
0000177B                           632  SECOND_3        DS.B    1   ;Constant for EA, 3 bits (8-6) of a 4 hex OP code
0000177C                           633  THIRD_3         DS.B    1   ;Constant for EA, 3 bits (5-3) of a 4 hex OP code
0000177D                           634  FOURTH_3        DS.B    1   ;Constant for EA, 3 bits (2-0) of a 4 hex OP code
0000177E                           635  
0000177E                           636  
0000177E                           637  
0000177E                           638  
0000177E                           639  
0000177E                           640  OP_JSR_Routine:
0000177E  48E7 C000                641      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
00001782  3038 10A0                642      MOVE.W CUR_OP_CODE,D0
00001786  11FC 0001 10A2           643      MOVE.B #1,IS_VALID
0000178C  720C                     644      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
0000178E  E2A8                     645      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
00001790                           646  
00001790                           647  GROUP_0:                ;$0| ORI, BCLR (static and dynamic), CMPI                  
00001790  B03C 0000                648      CMP.B   #$0,D0                 ;Compare first nibble
00001794  6600 000C                649      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
00001798  4EB9 000019B2            650      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
0000179E  6000 010C                651      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017A2                           652      
000017A2                           653  GROUP_1:                ;$1| MOVE.B
000017A2  B03C 0001                654      CMP.B   #$1,D0                 ;Compare first nibble
000017A6  6600 000C                655      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
000017AA  4EB9 00001B90            656      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
000017B0  6000 00FA                657      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017B4                           658  
000017B4                           659  GROUP_2:                ;$2| MOVE.L, MOVEA.L
000017B4  B03C 0002                660      CMP.B   #$2,D0                 ;Compare first nibble
000017B8  6600 000C                661      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
000017BC  4EB9 00001BBA            662      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
000017C2  6000 00E8                663      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017C6                           664  
000017C6                           665  GROUP_3:                ;$3| MOVE.W, MOVEA.W
000017C6  B03C 0003                666      CMP.B   #$3,D0                 ;Compare first nibble
000017CA  6600 000C                667      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
000017CE  4EB9 00001C1C            668      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
000017D4  6000 00D6                669      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017D8                           670  
000017D8                           671  GROUP_4:                ;$4| LEA, JSR, RTS, NEG, MOVEM
000017D8  B03C 0004                672      CMP.B   #$4,D0                 ;Compare first nibble
000017DC  6600 000C                673      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
000017E0  4EB9 00001C7E            674      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
000017E6  6000 00C4                675      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017EA                           676  
000017EA                           677  
000017EA                           678  GROUP_5:                ;$5| SUBQ
000017EA  B03C 0005                679      CMP.B   #$5,D0                 ;Compare first nibble
000017EE  6600 000C                680      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
000017F2  4EB9 00001F0C            681      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
000017F8  6000 00B2                682      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000017FC                           683  
000017FC                           684  
000017FC                           685  GROUP_6:                ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
000017FC  B03C 0006                686      CMP.B   #$6,D0                 ;Compare first nibble
00001800  6600 000C                687      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
00001804  4EB9 00001F76            688      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
0000180A  6000 00A0                689      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000180E                           690  
0000180E                           691  
0000180E                           692  GROUP_7:                ;$7| Display: DATA, $WXYZ (Unsupported)
0000180E  B03C 0007                693      CMP.B   #$7,D0                 ;Compare first nibble
00001812  6600 000C                694      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
00001816  4EB9 000020BC            695      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
0000181C  6000 008E                696      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001820                           697  
00001820                           698  
00001820                           699  GROUP_8:                ;$8| DIVS, OR
00001820  B03C 0008                700      CMP.B   #$8,D0                 ;Compare first nibble
00001824  6600 000C                701      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
00001828  4EB9 000020DC            702      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
0000182E  6000 007C                703      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001832                           704  
00001832                           705  
00001832                           706  GROUP_9:                ;$9| SUB
00001832  B03C 0009                707      CMP.B   #$9,D0                 ;Compare first nibble
00001836  6600 000C                708      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
0000183A  4EB9 0000213C            709      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
00001840  6000 006A                710      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001844                           711  
00001844                           712  
00001844                           713  GROUP_A:                ;$A| Display: DATA, $WXYZ (Unsupported)
00001844  B03C 000A                714      CMP.B   #$A,D0                 ;Compare first nibble
00001848  6600 000C                715      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
0000184C  4EB9 000021AE            716      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
00001852  6000 0058                717      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001856                           718  
00001856                           719  
00001856                           720  GROUP_B:                ;$B| EOR, CMP
00001856  B03C 000B                721      CMP.B   #$B,D0                 ;Compare first nibble
0000185A  6600 000C                722      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
0000185E  4EB9 000021B6            723      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
00001864  6000 0046                724      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001868                           725  
00001868                           726  
00001868                           727  GROUP_C:                ;$C| MULS
00001868  B03C 000C                728      CMP.B   #$C,D0                 ;Compare first nibble
0000186C  6600 000C                729      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
00001870  4EB9 0000222A            730      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
00001876  6000 0034                731      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000187A                           732  
0000187A                           733  
0000187A                           734  GROUP_D:                 ;$D| ADD, ADDA
0000187A  B03C 000D                735      CMP.B   #$D,D0                 ;Compare first nibble
0000187E  6600 000C                736      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
00001882  4EB9 000022AE            737      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
00001888  6000 0022                738      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000188C                           739  
0000188C                           740  
0000188C                           741  GROUP_E:                ;$E| LSR, LSL, ASR, ASL, ROL, ROR
0000188C  B03C 000E                742      CMP.B   #$E,D0                 ;Compare first nibble
00001890  6600 000C                743      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
00001894  4EB9 0000230E            744      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
0000189A  6000 0010                745      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000189E                           746  
0000189E                           747  
0000189E                           748  GROUP_F:                ;$F| Display: DATA, $WXYZ (Unsupported)
0000189E  B03C 000F                749      CMP.B   #$F,D0                 ;Compare first nibble
000018A2  4EB9 000024BE            750      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
000018A8  6000 0002                751      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000018AC                           752  
000018AC                           753  
000018AC                           754  OP_JSR_DONE:
000018AC  4CDF 0003                755           MOVEM.L (SP)+,D0-D1       ;Recover register D0
000018B0  0C38 0001 10A2           756           CMP.B #1,IS_VALID
000018B6  6700 1048                757           BEQ    main_EA             ;This runs EA's routines after OP code portion is finished
000018BA  6600 F906                758           BNE    check_print
000018BE                           759  FIND_2_BIT_SIZE_7_TO_6:         ;Move the 2 bit size field relevant register
000018BE  48E7 C000                760      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
000018C2  3038 10A0                761      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
000018C6  323C 0008                762      MOVE.W   #8,D1              ;Prepare 8 bit shift to D1
000018CA  E368                     763      LSL.W    D1,D0              ;Truncate to find the 2 size bits
000018CC  E268                     764      LSR.W    D1,D0              ;Reposition the bits
000018CE  323C 0006                765      MOVE.W   #6,D1              ;Prepare 6 bit shift to D1
000018D2  E268                     766      LSR.W    D1,D0              ;Truncate to shift 2 bits to a byte
000018D4  11C0 1778                767      MOVE.B   D0,OP_SIZE         ;Move 2 size bits into OP_SIZE
000018D8  4CDF 0003                768      MOVEM.L (SP)+,D0-D1         ;Restore registers
000018DC  4E75                     769      RTS                         ;Return to stack
000018DE                           770  
000018DE                           771  FIND_1_BIT_SIZE_6:              ;Move the 1 bit size field relevant register
000018DE  48E7 C000                772      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
000018E2  3038 10A0                773      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
000018E6  323C 0009                774      MOVE.W   #9,D1              ;Prepare 9 bit shift to D1
000018EA  E368                     775      LSL.W    D1,D0              ;Truncate to find the size bit
000018EC  E268                     776      LSR.W    D1,D0              ;Reposition the bits
000018EE  323C 0006                777      MOVE.W   #6,D1              ;Prepare 6 bit shift to D1
000018F2  E268                     778      LSR.W    D1,D0              ;Truncate to shift 1 bit to a byte
000018F4  11C0 1778                779      MOVE.B   D0,OP_SIZE         ;Move 1 size bit into OP_SIZE
000018F8  4CDF 0003                780      MOVEM.L (SP)+,D0-D1         ;Restore registers
000018FC  4E75                     781      RTS                         ;Return to stack
000018FE                           782  
000018FE                           783  FIND_1_BIT_SIZE_8:         ;Move the 1 bit size field relevant register
000018FE  48E7 C000                784      MOVEM.L  D0-D1,-(SP)        ;Save all changed registers
00001902  3038 10A0                785      MOVE.W   CUR_OP_CODE,D0     ;Move current OP code into D0
00001906  323C 0007                786      MOVE.W   #7,D1              ;Prepare 7 bit shift to D1
0000190A  E368                     787      LSL.W    D1,D0              ;Truncate to find the 1 size bit
0000190C  E268                     788      LSR.W    D1,D0              ;Reposition the bits
0000190E  323C 0008                789      MOVE.W   #8,D1              ;Prepare 8 bit shift to D1
00001912  E268                     790      LSR.W    D1,D0              ;Truncate to shift 1 bit to a byte
00001914  11C0 1778                791      MOVE.B   D0,OP_SIZE         ;Move 1 size bit into OP_SIZE
00001918  4CDF 0003                792      MOVEM.L (SP)+,D0-D1         ;Restore registers
0000191C  4E75                     793      RTS                         ;Return to stack
0000191E                           794  
0000191E                           795  MOVE_AND_MOVEA_PARSE_EA:       ;Move the 3 bit dynamic register bits to proper register
0000191E                           796     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
0000191E  3038 10A0                797      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
00001922  323C 000A                798      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
00001926  E368                     799      LSL.W   D1,D0            ;Truncate to find the last 6 bits
00001928  E268                     800      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
0000192A  3E00                     801      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
0000192C  323C 0003                802      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
00001930  E26F                     803      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
00001932  3A07                     804      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
00001934  323C 000D                805      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
00001938  E368                     806      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
0000193A  E268                     807      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
0000193C  3800                     808      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
0000193E  3038 10A0                809      MOVE.W CUR_OP_CODE,D0     ;Move current OP code into D0     
00001942  323C 0004                810      MOVE.W  #4,D1             ;Prepare 4 bit shift to D1
00001946  E368                     811      LSL.W   D1,D0             ;Truncate to find bits 11-6
00001948  E268                     812      LSR.W   D1,D0             ;Reposition bits
0000194A  323C 0006                813      MOVE.W  #6,D1             ;Prepare 6 bit shift to D1
0000194E  E268                     814      LSR.W   D1,D0             ;Truncate the SRC Reg/Mode bits
00001950  323C 0003                815      MOVE.W  #3,D1             ;Prepare a 3 bit shift to D1 for DST Reg/Mode
00001954  3C00                     816      MOVE.W  D0,D6             ;Copy over the current 6 bits to D6
00001956  E268                     817      LSR.W   D1,D0             ;Truncate DST Mode  
00001958  3E00                     818      MOVE.W  D0,D7             ;Move DST Reg to D7
0000195A  323C 000D                819      MOVE.W  #13,D1             
0000195E  E36E                     820      LSL.W   D1,D6             ;Truncate 13 bits in D6
00001960  E26E                     821      LSR.W   D1,D6             ;Reposition D6
00001962                           822                                ;D6 now contains the DST Reg
00001962                           823     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
00001962  4E75                     824      RTS                     ;Return to stack
00001964                           825  PARSE_EA_CONSTANT_BITS:
00001964                           826      *MNEMONIC SHIFT
00001964  3038 10A0                827      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D0
00001968  323C 000C                828      MOVE.W #12,D1               ;Prepare a bit shift of 12 into D1
0000196C  E268                     829      LSR.W D1,D0                 ;Shift 12 bits from D0 right
0000196E  11C0 1779                830      MOVE.B D0,MNEMONIC          ;Set MNEMONIC to D0
00001972                           831      *FIRST_3 SHIFT
00001972  323C 0009                832      MOVE.W #9,D1                ;Prepare a bit shift of 9 into D1
00001976  3038 10A0                833      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
0000197A  E948                     834      LSL.W #4,D0                 ;Shift out bits 15-12 in D0
0000197C  E848                     835      LSR.W #4,D0                 ;Reposition D0
0000197E  E268                     836      LSR.W  D1,D0                ;Shift D0 9 bits right
00001980  11C0 177A                837      MOVE.B D0,FIRST_3           ;Set FIRST_3 to D0
00001984                           838      *SECOND_3 SHIFT
00001984  3038 10A0                839      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
00001988  EF48                     840      LSL.W #7,D0                 ;Shift out bits 15-9 in D0
0000198A  EE48                     841      LSR.W #7,D0                 ;Reposition D0
0000198C  EC48                     842      LSR.W #6,D0                 ;Shift D0 6 bits right
0000198E  11C0 177B                843      MOVE.B D0,SECOND_3          ;Set SECOND_3 to D0
00001992                           844      *THIRD_3 SHIFT
00001992  3038 10A0                845      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
00001996  E648                     846      LSR.W #3,D0                 ;Shift D0 3 bits right
00001998  323C 000D                847      MOVE.W #13,D1               ;Prepare a 13 bit shift into D1
0000199C  E368                     848      LSL.W D1,D0                 ;Truncate first 13 bits of D0
0000199E  E268                     849      LSR.W D1,D0                 ;Reposition D0
000019A0  11C0 177C                850      MOVE.B D0,THIRD_3           ;Set THIRD_3 to D0
000019A4                           851      *FOURTH_3 SHIFT
000019A4  3038 10A0                852      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000019A8  E368                     853      LSL.W D1,D0                 ;Grab the fourth 3-bit group
000019AA  E268                     854      LSR.W D1,D0                 ;Shift D0 back into position
000019AC  11C0 177D                855      MOVE.B D0,FOURTH_3          ;Set FOURTH_3 to Do
000019B0  4E75                     856      RTS                         ;Return to stack
000019B2                           857  
000019B2                           858  
000019B2                           859  
000019B2                           860  
000019B2                           861  
000019B2                           862  C_GROUP_0:
000019B2  48E7 C000                863      MOVEM.L D0-D1, -(SP)            ;Backup registers
000019B6                           864      
000019B6                           865  CHECK_OP_ORI_TO_CCR:
000019B6  3038 10A0                866      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019BA  B07C 003C                867      CMP.W #$003C,D0                 ;Compare the direct full bits
000019BE  6700 01C4                868      BEQ GROUP0_INVALID              ;INVALID OP code found
000019C2  6600 0002                869      BNE CHECK_OP_ORI_TO_SR          ;Check next routine
000019C6                           870      
000019C6                           871  CHECK_OP_ORI_TO_SR:
000019C6  3038 10A0                872      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019CA  B07C 007C                873      CMP.W #$007C,D0                 ;Compare the direct full bits
000019CE  6700 01B4                874      BEQ GROUP0_INVALID              ;INVALID OP code found
000019D2  6600 0002                875      BNE CHECK_OP_ANDI_TO_CCR        ;Check next routine
000019D6                           876      
000019D6                           877  CHECK_OP_ANDI_TO_CCR:
000019D6  3038 10A0                878      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019DA  B07C 023C                879      CMP.W #$023C,D0                 ;Compare the direct full bits
000019DE  6700 01A4                880      BEQ GROUP0_INVALID              ;INVALID OP code found
000019E2  6600 0002                881      BNE CHECK_OP_ANDI_TO_SR         ;Check next routine
000019E6                           882      
000019E6                           883  CHECK_OP_ANDI_TO_SR:
000019E6  3038 10A0                884      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019EA  B07C 027C                885      CMP.W #$027C,D0                 ;Compare the direct full bits
000019EE  6700 0194                886      BEQ GROUP0_INVALID              ;INVALID OP code found
000019F2  6600 0002                887      BNE CHECK_OP_EORI_TO_CCR                ;Check next routine
000019F6                           888  
000019F6                           889  CHECK_OP_EORI_TO_CCR:
000019F6  3038 10A0                890      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000019FA  B07C 0A3C                891      CMP.W #$0A3C,D0                 ;Compare the direct full bits
000019FE  6700 0184                892      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A02  6600 0002                893      BNE CHECK_OP_EORI_TO_SR         ;Check next routine
00001A06                           894      
00001A06                           895  CHECK_OP_EORI_TO_SR:
00001A06  3038 10A0                896      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A0A  B07C 0A7C                897      CMP.W #$0A7C,D0                 ;Compare the direct full bits
00001A0E  6700 0174                898      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A12  6600 0002                899      BNE CHECK_OP_ANDI               ;Check next routine
00001A16                           900      
00001A16                           901  CHECK_OP_ANDI:
00001A16  3038 10A0                902      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A1A  0240 FF00                903      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001A1E  B07C 0200                904      CMP.W #$0200,D0                 ;Compare the appropriate masked bits
00001A22  6700 0160                905      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A26  6600 0002                906      BNE CHECK_OP_SUBI               Check next routine
00001A2A                           907      
00001A2A                           908  CHECK_OP_SUBI:
00001A2A  3038 10A0                909      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A2E  0240 FF00                910      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001A32  B07C 0400                911      CMP.W #$0400,D0                 ;Compare the appropriate masked bits
00001A36  6700 014C                912      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A3A  6600 0002                913      BNE CHECK_OP_ADDI               ;Check next routine
00001A3E                           914  
00001A3E                           915  CHECK_OP_ADDI:
00001A3E  3038 10A0                916      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A42  0240 FF00                917      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001A46  B07C 0600                918      CMP.W #$0600,D0                 ;Compare the appropriate masked bits
00001A4A  6700 0138                919      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A4E  6600 0002                920      BNE CHECK_OP_EORI               ;Check next routine 
00001A52                           921  
00001A52                           922  CHECK_OP_EORI:
00001A52  3038 10A0                923      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A56  0240 FF00                924      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001A5A  B07C 0A00                925      CMP.W #$0A00,D0                 ;Compare the appropriate masked bits
00001A5E  6700 0124                926      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A62  6600 0002                927      BNE CHECK_OP_STATIC_BTST        ;Check next routine
00001A66                           928      
00001A66                           929  CHECK_OP_STATIC_BTST:
00001A66  3038 10A0                930      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A6A  0240 FFC0                931      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001A6E  B07C 0800                932      CMP.W #$0800,D0                 ;Compare the appropriate masked bits
00001A72  6700 0110                933      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A76  6600 0002                934      BNE CHECK_OP_STATIC_BCHG        ;Check next routine
00001A7A                           935      
00001A7A                           936  CHECK_OP_STATIC_BCHG:
00001A7A  3038 10A0                937      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A7E  0240 FFC0                938      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001A82  B07C 0840                939      CMP.W #$0840,D0                 ;Compare the appropriate masked bits
00001A86  6700 00FC                940      BEQ GROUP0_INVALID              ;INVALID OP code found
00001A8A  6600 0002                941      BNE CHECK_OP_STATIC_BSET        ;Check next routine
00001A8E                           942  
00001A8E                           943  CHECK_OP_STATIC_BSET:
00001A8E  3038 10A0                944      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001A92  0240 FFC0                945      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001A96  B07C 08C0                946      CMP.W #$08C0,D0                 ;Compare the appropriate masked bits
00001A9A  6700 00E8                947      BEQ GROUP0_INVALID              ;INVALID OP code found   
00001A9E  6600 0002                948      BNE CHECK_OP_DYNAMIC_BTST       ;Check next routine
00001AA2                           949  
00001AA2                           950  CHECK_OP_DYNAMIC_BTST:
00001AA2  3038 10A0                951      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001AA6  0240 F1C0                952      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
00001AAA  B07C 0100                953      CMP.W #$0100,D0                 ;Compare the appropriate masked bits
00001AAE  6700 00D4                954      BEQ GROUP0_INVALID              ;INVALID OP code found
00001AB2  6600 0002                955      BNE CHECK_OP_DYNAMIC_BCHG       ;Check next routine
00001AB6                           956  
00001AB6                           957  CHECK_OP_DYNAMIC_BCHG:
00001AB6  3038 10A0                958      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001ABA  0240 F1C0                959      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
00001ABE  B07C 0140                960      CMP.W #$0140,D0                 ;Compare the appropriate masked bits 
00001AC2  6700 00C0                961      BEQ GROUP0_INVALID              ;INVALID OP code found
00001AC6  6600 0002                962      BNE CHECK_OP_DYNAMIC_BSET       ;Check next routine
00001ACA                           963      
00001ACA                           964  CHECK_OP_DYNAMIC_BSET:
00001ACA                           965  
00001ACA  3038 10A0                966      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001ACE  0240 F1C0                967      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
00001AD2  B07C 01C0                968      CMP.W   #$01C0,D0               ;Compare the appropriate masked bits 
00001AD6  6700 0006                969      BEQ     BIT_CHECK_MOVEP         ;Check special case for MOVEP
00001ADA  6600 001C                970      BNE     CHECK_OP_MOVEP          ;Check next routine
00001ADE                           971  
00001ADE                           972  BIT_CHECK_MOVEP:                                ;This is a special case check for MOVEP
00001ADE  3038 10A0                973      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001AE2  323C 000A                974      MOVE.W  #10,D1                  ;Prepare a 10-bit shift
00001AE6  E368                     975      LSL.W   D1,D0                   ;Shift out 10 bits left 
00001AE8  E268                     976      LSR.W   D1,D0                   ;Reposition D0 for last 6 bits
00001AEA  E648                     977      LSR.W   #3,D0                   ;Shift out 3 bits right, D0 contains bits 5-3
00001AEC  B07C 0001                978      CMP.W   #$1,D0                  ;Compare bits to D0
00001AF0  6700 0006                979      BEQ     CHECK_OP_MOVEP          ;If bits are $1 then it's addressing, goto MOVEP
00001AF4  6600 008E                980      BNE     GROUP0_INVALID          ;If not then it's DYNAMIC_BSET which is invalid
00001AF8                           981      
00001AF8                           982  CHECK_OP_MOVEP:
00001AF8  3038 10A0                983      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001AFC  0240 F138                984      ANDI.W #$F138,D0                ;Mask relevant bits to D0
00001B00  B07C 0108                985      CMP.W #$0108,D0                 ;Compare the appropriate masked bits
00001B04  6700 09C0                986      BEQ INVALID_OP                  ;INVALID OP code found
00001B08  6600 0002                987      BNE CHECK_OP_ORI                ;Check next routine
00001B0C                           988  
00001B0C                           989  CHECK_OP_ORI:
00001B0C  3038 10A0                990      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001B10  0240 FF00                991      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001B14  B07C 0000                992      CMP.W   #$0000,D0               ;Compare the appropriate masked bits     
00001B18  6600 0010                993      BNE     CHECK_OP_CMPI           ;Branch to next comparison if not equal
00001B1C  4EB8 18BE                994      JSR     FIND_2_BIT_SIZE_7_TO_6
00001B20  4EB9 000024DC            995      JSR     PRINT_OP_ORI            ;Print the OP code if equal    
00001B26  6000 0062                996      BRA     GROUP0_SUCCESS          ;Finish routine
00001B2A                           997      
00001B2A                           998  CHECK_OP_CMPI:
00001B2A  3038 10A0                999      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001B2E  0240 FF00               1000      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001B32  B07C 0C00               1001      CMP.W   #$0C00,D0               ;Compare the appropriate masked bits   
00001B36  6600 0010               1002      BNE     CHECK_OP_STATIC_BCLR    ;Branch to next comparison if not equal       
00001B3A  4EB8 18BE               1003      JSR     FIND_2_BIT_SIZE_7_TO_6
00001B3E  4EB9 000024F0           1004      JSR     PRINT_OP_CMPI           ;Print the OP code if equal
00001B44  6000 0044               1005      BRA     GROUP0_SUCCESS          ;Finish routine
00001B48                          1006      
00001B48                          1007  CHECK_OP_STATIC_BCLR:
00001B48  3038 10A0               1008      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001B4C  0240 FF00               1009      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001B50  B07C 0800               1010      CMP.W   #$0800,D0               ;Compare the appropriate masked bits
00001B54  6600 0010               1011      BNE     CHECK_OP_DYNAMIC_BCLR   ;Branch to next comparison if not equal
00001B58  4EB8 18BE               1012      JSR     FIND_2_BIT_SIZE_7_TO_6
00001B5C  4EB9 00002504           1013      JSR     PRINT_OP_STATIC_BCLR    ;Print the OP code if equal
00001B62  6000 0026               1014      BRA     GROUP0_SUCCESS          ;Finish routine
00001B66                          1015      
00001B66                          1016  CHECK_OP_DYNAMIC_BCLR:
00001B66  3038 10A0               1017      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001B6A  0240 0180               1018      ANDI.W  #$0180,D0               ;Mask relevant bits to D0
00001B6E  B07C 0180               1019      CMP.W   #$0180,D0               ;Compare the appropriate masked bits
00001B72  6600 0010               1020      BNE     GROUP0_INVALID          ;If not equal this must be an invalid OP code
00001B76  4EB8 18BE               1021      JSR     FIND_2_BIT_SIZE_7_TO_6
00001B7A  4EB9 00002518           1022      JSR     PRINT_OP_DYNAMIC_BCLR   ;Print the OP code if equal
00001B80  6000 0008               1023      BRA     GROUP0_SUCCESS          ;Finish routine
00001B84                          1024  
00001B84                          1025  GROUP0_INVALID:                     ;Checks have been finished, invalid OP code has been found
00001B84  4EB9 000024C6           1026      JSR INVALID_OP                  ;INVALID OP code found
00001B8A                          1027  GROUP0_SUCCESS:                     ;Checks have been finished,a valid OP code has been found
00001B8A  4CDF 0003               1028      MOVEM.L (SP)+,D0-D1             ;Restore registers
00001B8E  4E75                    1029      RTS                             ;Return to stack
00001B90                          1030      
00001B90                          1031  C_GROUP_1:
00001B90  48E7 C000               1032      MOVEM.L D0-D1,-(SP)             ;Save registers to stack
00001B94                          1033  
00001B94                          1034  CHECK_OP_MOVE_B:
00001B94  3038 10A0               1035      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0          
00001B98  0240 F000               1036      ANDI.W  #$F000,D0               ;Mask relevant bits to D0
00001B9C  B07C 1000               1037      CMP.W   #$1000,D0               ;Compare the appropriate masked bits 
00001BA0  6600 000C               1038      BNE     GROUP1_INVALID          ;Invalid OP code has been found
00001BA4  4EB9 0000252C           1039      JSR     PRINT_OP_MOVEB          ;Print the OP code if equal
00001BAA  6000 0008               1040      BRA     GROUP1_SUCCESS          ;Finish routine
00001BAE                          1041      
00001BAE                          1042  GROUP1_INVALID:
00001BAE  4EB9 000024C6           1043      JSR INVALID_OP                  ;Invalid OP code found
00001BB4                          1044  GROUP1_SUCCESS:
00001BB4  4CDF 0003               1045      MOVEM.L (SP)+,D0-D1             ;Restore register
00001BB8  4E75                    1046      RTS                             ;Return to stack
00001BBA                          1047  C_GROUP_2:
00001BBA  48E7 E000               1048      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
00001BBE                          1049  
00001BBE                          1050  CHECK_OP_MOVEA_L:
00001BBE  3038 10A0               1051      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0  
00001BC2  0240 F000               1052      ANDI.W #$F000,D0                ;Mask relevant bits to D0
00001BC6  B07C 2000               1053      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
00001BCA  4EF9 00001BD0           1054      JMP FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
00001BD0                          1055      
00001BD0                          1056  FIND_MOVEA_L_DIFFERENCE:            ;Finds difference between MOVEA and MOVE
00001BD0  3038 10A0               1057      MOVE.W   CUR_OP_CODE,D0         ;Move current OP code into D0
00001BD4  323C 0007               1058      MOVE.W   #7,D1                  ;Prepare 7 bit shift to D1
00001BD8  E368                    1059      LSL.W    D1,D0                  ;Truncate to find the 3 address mode bits
00001BDA  E268                    1060      LSR.W    D1,D0                  ;Reposition the bits
00001BDC  323C 0006               1061      MOVE.W   #6,D1                  ;Prepare 6 bit shift to D1
00001BE0  E268                    1062      LSR.W    D1,D0                  ;Truncate to shift 3 bits to a register
00001BE2  3400                    1063      MOVE.W   D0,D2                  ;Move 3 address mode bits into D6
00001BE4  B47C 0001               1064      CMP.W   #$1,D2                  ;Check if the address mode value is MOVEA
00001BE8  6600 000C               1065      BNE     CHECK_OP_MOVE_L         ;Branch if not equal to check MOVE
00001BEC  4EB9 0000253A           1066      JSR     PRINT_OP_MOVEA_L        ;Print the OP code if it's a match
00001BF2  6000 0022               1067      BRA     GROUP2_SUCCESS          ;Finish routine
00001BF6                          1068      
00001BF6                          1069      
00001BF6                          1070  CHECK_OP_MOVE_L:
00001BF6  3038 10A0               1071      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001BFA  0240 F000               1072      ANDI.W #$F000,D0                ;Mask relevant bits to D0
00001BFE  B07C 2000               1073      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
00001C02  6600 000C               1074      BNE GROUP2_INVALID              ;If not equal, OP code is invalid
00001C06  4EB9 00002548           1075      JSR PRINT_OP_MOVE_L             ;Print out MOVE.L
00001C0C  6000 0008               1076      BRA GROUP2_SUCCESS              ;Finish routine
00001C10                          1077      
00001C10                          1078  GROUP2_INVALID:    
00001C10  4EB9 000024C6           1079      JSR INVALID_OP                  ;Invalid OP code found
00001C16                          1080  GROUP2_SUCCESS:
00001C16  4CDF 0007               1081      MOVEM.L (SP)+,D0-D2             ;Restore register
00001C1A  4E75                    1082      RTS                             ;Return to stack
00001C1C                          1083  C_GROUP_3:
00001C1C  48E7 E000               1084      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
00001C20                          1085      
00001C20                          1086  CHECK_OP_MOVEA_W:
00001C20  3038 10A0               1087      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001C24  0240 F000               1088      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00001C28  B07C 3000               1089      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
00001C2C  4EF9 00001C32           1090      JMP      FIND_MOVEA_W_DIFF     ;Custom routine to differentiate MOVE and MOVEA
00001C32                          1091  
00001C32                          1092      
00001C32                          1093  FIND_MOVEA_W_DIFF:                 ;Finds difference between MOVEA and MOVE
00001C32  3038 10A0               1094      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001C36  323C 0007               1095      MOVE.W   #7,D1                 ;Prepare 7 bit shift to D1
00001C3A  E368                    1096      LSL.W    D1,D0                 ;Truncate to find the 3 address mode bits
00001C3C  E268                    1097      LSR.W    D1,D0                 ;Reposition the bits
00001C3E  323C 0006               1098      MOVE.W   #6,D1                 ;Prepare 6 bit shift to D1
00001C42  E268                    1099      LSR.W    D1,D0                 ;Truncate to shift 3 bits to a register
00001C44  3400                    1100      MOVE.W   D0,D2                 ;Move 3 address mode bits into D6
00001C46  B47C 0001               1101      CMP.W    #$1,D2                ;Check if the address mode value is MOVEA
00001C4A  6600 000C               1102      BNE      CHECK_OP_MOVE_W       ;If bits do not match, try MOVE 
00001C4E  4EB9 00002556           1103      JSR      PRINT_OP_MOVEA_W      ;Print the OP code if it's a match
00001C54  6000 0022               1104      BRA      GROUP3_SUCCESS        ;Finish routine
00001C58                          1105      
00001C58                          1106  CHECK_OP_MOVE_W:
00001C58  3038 10A0               1107      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001C5C  0240 F000               1108      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00001C60  B07C 3000               1109      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
00001C64  6600 000C               1110      BNE      GROUP3_INVALID        ;INVALID OP code found
00001C68  4EB9 00002564           1111      JSR      PRINT_OP_MOVE_W       ;Print the OP code if it's a match
00001C6E  6000 0008               1112      BRA      GROUP3_SUCCESS        ;Finish routine
00001C72                          1113      
00001C72                          1114  GROUP3_INVALID:
00001C72  4EB9 000024C6           1115      JSR INVALID_OP                 ;INVALID OP code found
00001C78                          1116  GROUP3_SUCCESS:
00001C78  4CDF 0007               1117      MOVEM.L (SP)+,D0-D2            ;Restore registers from stack
00001C7C  4E75                    1118      RTS                            ;Return to stack
00001C7E                          1119  
00001C7E                          1120  C_GROUP_4:
00001C7E  2F00                    1121      MOVE.L  D0,-(SP)            ;Save registers
00001C80                          1122      
00001C80                          1123  CHECK_OP_STOP:
00001C80  3038 10A0               1124      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001C84  B07C 4E72               1125      CMP.W  #$4E72,D0                ;Compare the appropriate bits
00001C88  6700 0270               1126      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001C8C  6600 0002               1127      BNE    CHECK_OP_RESET           ;Check next OP code
00001C90                          1128      
00001C90                          1129  CHECK_OP_RESET:
00001C90  3038 10A0               1130      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001C94  B07C 4E70               1131      CMP.W  #$4E70,D0                ;Compare the appropriate bits
00001C98  6700 0260               1132      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001C9C  6600 0002               1133      BNE    CHECK_OP_ILLEGAL         ;Check next OP code
00001CA0                          1134          
00001CA0                          1135  CHECK_OP_ILLEGAL:
00001CA0  3038 10A0               1136      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CA4  B07C 4AFC               1137      CMP.W  #$4AFC,D0                ;Compare the appropriate bits
00001CA8  6700 0250               1138      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CAC  6600 0002               1139      BNE    CHECK_OP_RTE             ;Check next OP code
00001CB0                          1140      
00001CB0                          1141  CHECK_OP_RTE:    
00001CB0  3038 10A0               1142      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CB4  B07C 4E73               1143      CMP.W #$4E73,D0                 ;Compare the appropriate bits
00001CB8  6700 0240               1144      BEQ   GROUP4_INVALID            ;INVALID OP code found
00001CBC  6600 0002               1145      BNE   CHECK_OP_TRAPV            ;Check next OP code
00001CC0                          1146      
00001CC0                          1147  CHECK_OP_TRAPV:
00001CC0  3038 10A0               1148      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CC4  B07C 4E76               1149      CMP.W  #$4E76,D0                ;Compare the appropriate bits
00001CC8  6700 0230               1150      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CCC  6600 0002               1151      BNE    CHECK_OP_RTR             ;Check next OP code
00001CD0                          1152      
00001CD0                          1153  CHECK_OP_RTR:
00001CD0  3038 10A0               1154      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CD4  B07C 4E77               1155      CMP.W #$4E77,D0                 ;Compare the appropriate bits
00001CD8  6700 0220               1156      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001CDC  6600 0002               1157      BNE    CHECK_OP_MOVE_FROM_SR    ;Check next OP code
00001CE0                          1158  
00001CE0                          1159  
00001CE0                          1160  CHECK_OP_MOVE_FROM_SR:
00001CE0  3038 10A0               1161      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CE4  0240 FFC0               1162      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001CE8  B07C 40C0               1163      CMP.W  #$40C0,D0                ;Compare the appropriate masked bits
00001CEC  6700 020C               1164      BEQ    GROUP4_INVALID           ;INVALID OP code found  
00001CF0  6600 0002               1165      BNE    CHECK_OP_MOVE_TO_CCR     ;Check next OP code
00001CF4                          1166      
00001CF4                          1167  CHECK_OP_MOVE_TO_CCR:
00001CF4  3038 10A0               1168      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001CF8  0240 FFC0               1169      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001CFC  B07C 44C0               1170      CMP.W  #$44C0,D0                ;Compare the appropriate masked bits
00001D00  6700 01F8               1171      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D04  6600 0002               1172      BNE    CHECK_OP_MOVE_TO_SR      ;Check next OP code
00001D08                          1173      
00001D08                          1174  CHECK_OP_MOVE_TO_SR:
00001D08  3038 10A0               1175      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D0C  0240 FFC0               1176      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001D10  B07C 46C0               1177      CMP.W  #$46C0,D0                ;Compare the appropriate masked bits
00001D14  6700 01E4               1178      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D18  6600 0002               1179      BNE    CHECK_OP_NEGX            ;Check next OP code
00001D1C                          1180      
00001D1C                          1181  CHECK_OP_NEGX:
00001D1C  3038 10A0               1182      MOVE.W CUR_OP_CODE,D0            ;Move current instruction set into D0
00001D20  0240 FF00               1183      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001D24  B07C 4000               1184      CMP.W  #$4000,D0                ;Compare the appropriate masked bits
00001D28  6700 01D0               1185      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D2C  6600 0002               1186      BNE    CHECK_OP_CLR             ;Check next OP code
00001D30                          1187      
00001D30                          1188  CHECK_OP_CLR:
00001D30  3038 10A0               1189      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D34  0240 FF00               1190      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001D38  B07C 4200               1191      CMP.W  #$4200,D0                ;Compare the appropriate masked bits
00001D3C  6700 01BC               1192      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D40  6600 0002               1193      BNE    CHECK_OP_NOT             ;Check next OP code
00001D44                          1194      
00001D44                          1195  CHECK_OP_NOT:
00001D44  3038 10A0               1196      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D48  0240 FF00               1197      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001D4C  B07C 4600               1198      CMP.W  #$4600,D0                ;Compare the appropriate masked bits
00001D50  6700 01A8               1199      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001D54  6600 0002               1200      BNE    CHECK_OP_EXT             ;Check next OP code
00001D58                          1201      
00001D58                          1202  CHECK_OP_EXT:
00001D58  3038 10A0               1203      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D5C  0240 FF88               1204      ANDI.W #$FF88,D0                ;Mask relevant bits to D0
00001D60  B07C 4880               1205      CMP.W  #$4880,D0                ;Compare the appropriate masked bits
00001D64  6700 0194               1206      BEQ    GROUP4_INVALID           ;INVALID OP code BIT_CHECK_EXT
00001D68  6600 001C               1207      BNE    CHECK_OP_NBCD            ;Check next OP code
00001D6C                          1208  
00001D6C                          1209  BIT_CHECK_EXT:    
00001D6C  3038 10A0               1210      MOVE.W CUR_OP_CODE,D0           ;This is a special case to check against MOVEM
00001D70  323C 000A               1211      MOVE.W #10,D1                   ;Prepare a 10 bit shift into D1
00001D74  E368                    1212      LSL.W  D1,D0                    ;Shift D0 left 10 bits
00001D76  E068                    1213      LSR.W  D0,D0                    ;Reposition D0
00001D78  E648                    1214      LSR.W  #3,D0                    ;Shift D0 3 bits
00001D7A  B078 0000               1215      CMP.W  %000,D0                  ;Check the specific bits needed to differentiate EXT
00001D7E  6700 017A               1216      BEQ    GROUP4_INVALID           ;This means that this OP code is EXT
00001D82  6600 015C               1217      BNE    CHECK_OP_MOVEM           ;This is the only other possibility 
00001D86                          1218      
00001D86                          1219  CHECK_OP_NBCD:
00001D86  3038 10A0               1220      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D8A  0240 FFC0               1221      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0           
00001D8E  B07C 4800               1222      CMP.W  #$4800,D0                ;Compare the appropriate masked bits
00001D92  6700 0166               1223      BEQ    GROUP4_INVALID           ;INVALID OP code
00001D96  6600 0002               1224      BNE    CHECK_OP_SWAP            ;Check next OP code
00001D9A                          1225      
00001D9A                          1226  CHECK_OP_SWAP:                      ; This must go before CHECK_OP PEA as first 3 nibbles can be equivalent
00001D9A  3038 10A0               1227      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001D9E  0240 FF48               1228      ANDI.W #$FF48,D0                ;Mask relevant bits to D0
00001DA2  B07C 4840               1229      CMP.W  #$4840,D0                ;Compare the appropriate masked bits
00001DA6  6700 0152               1230      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DAA  6600 0002               1231      BNE    CHECK_OP_PEA             ;Check next OP code
00001DAE                          1232   
00001DAE                          1233  CHECK_OP_PEA:                       ;This must go after CHECK_OP_SWAP as first 3 nibbles can be equivalent
00001DAE  3038 10A0               1234      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DB2  0240 FF40               1235      ANDI.W #$FF40,D0                ;Mask relevant bits to D0
00001DB6  B07C 4840               1236      CMP.W  #$4840,D0                ;Compare the appropriate masked bits
00001DBA  6700 013E               1237      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DBE  6600 0002               1238      BNE    CHECK_OP_TAS             ;Check next OP code
00001DC2                          1239      
00001DC2                          1240  CHECK_OP_TAS:
00001DC2  3038 10A0               1241      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DC6  0240 FFC0               1242      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001DCA  B07C 4AC0               1243      CMP.W  #$4AC0,D0                ;Compare the appropriate masked bits
00001DCE  6700 012A               1244      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DD2  6600 0002               1245      BNE    CHECK_OP_TST             ;Check next OP code
00001DD6                          1246  
00001DD6                          1247  CHECK_OP_TST:                       ;This must go after CHECK_OP_TAS as first 2 nibbles are equivalent
00001DD6  3038 10A0               1248      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DDA  0240 FF00               1249      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001DDE  B07C 4A00               1250      CMP.W  #$4A00,D0                ;Compare the appropriate masked bits
00001DE2  6700 0116               1251      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DE6  6600 0002               1252      BNE    CHECK_OP_TRAP            ;Check next OP code
00001DEA                          1253      
00001DEA                          1254  CHECK_OP_TRAP:
00001DEA  3038 10A0               1255      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001DEE  0240 FFF0               1256      ANDI.W #$FFF0,D0                ;Mask relevant bits to D0
00001DF2  B07C 4E40               1257      CMP.W  #$4E40,D0                ;Compare the appropriate masked bits
00001DF6  6700 0102               1258      BEQ    GROUP4_INVALID           ;INVALID OP code
00001DFA  6600 0002               1259      BNE    CHECK_OP_LINK            ;Check next OP code
00001DFE                          1260      
00001DFE                          1261  CHECK_OP_LINK:
00001DFE  3038 10A0               1262      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E02  0240 FFF8               1263      ANDI.W #$FFF8,D0                ;Mask relevant bits to D0
00001E06  B07C 4E50               1264      CMP.W  #$4E50,D0                ;Compare the appropriate masked bits
00001E0A  6700 00EE               1265      BEQ    GROUP4_INVALID           ;INVALID OP code
00001E0E  6600 0002               1266      BNE    CHECK_OP_UNLK            ;Check next OP code
00001E12                          1267  
00001E12                          1268  CHECK_OP_UNLK:
00001E12  3038 10A0               1269      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E16  0240 FFF8               1270      ANDI.W #$FFF8,D0                ;Mask relevant bits to D0
00001E1A  B07C 4E58               1271      CMP.W  #$4E58,D0                ;Compare the appropriate masked bits
00001E1E  6700 00DA               1272      BEQ    GROUP4_INVALID           ;INVALID OP code
00001E22  6600 0002               1273      BNE    CHECK_OP_MOVE_USP        ;Check next OP
00001E26                          1274      
00001E26                          1275  CHECK_OP_MOVE_USP:
00001E26  3038 10A0               1276      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E2A  0240 FFF0               1277      ANDI.W #$FFF0,D0                ;Mask relevant bits to D0
00001E2E  B07C 4E60               1278      CMP.W  #$4E60,D0                ;Compare the appropriate masked bits
00001E32  6700 00C6               1279      BEQ    GROUP4_INVALID           ;INVALID OP code
00001E36  6600 0002               1280      BNE    CHECK_OP_JMP             ;Check next OP
00001E3A                          1281  
00001E3A                          1282  CHECK_OP_JMP:
00001E3A  3038 10A0               1283       MOVE.W CUR_OP_CODE,D0          ;Move current instruction set into D0
00001E3E  0240 FFC0               1284       ANDI.W #$FFC0,D0               ;Mask relevant bits to D0
00001E42  B07C 4EC0               1285       CMP.W  #$4EC0,D0               ;Compare the appropriate masked bits
00001E46  6700 00B2               1286       BEQ    GROUP4_INVALID          ;INVALID OP code
00001E4A  6600 0002               1287       BNE    CHECK_OP_CHK            ;Check next OP code
00001E4E                          1288       
00001E4E                          1289  CHECK_OP_CHK:
00001E4E  3038 10A0               1290      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001E52  0240 F1C0               1291      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
00001E56  B07C 4180               1292      CMP.W   #$4180,D0               ;Compare the appropriate masked bits
00001E5A  6700 066A               1293      BEQ     INVALID_OP              ;INVALID OP code
00001E5E  6600 0002               1294      BNE     CHECK_OP_NOP            ;Check next OP code
00001E62                          1295  
00001E62                          1296  CHECK_OP_NOP:                       ;While this code is not in the supported docs, Nash covered it in class and expects it to be implemented
00001E62  3038 10A0               1297      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E66  B07C 4E71               1298      CMP.W  #$4E71,D0                ;Compare the appropriate bits
00001E6A  6600 000C               1299      BNE    CHECK_OP_RTS             ;Check next OP code
00001E6E  4EB9 0000258E           1300      JSR    PRINT_OP_NOP             ;Print out OP code
00001E74  6000 0090               1301      BRA    GROUP4_SUCCESS           ;Finish routine
00001E78                          1302      
00001E78                          1303  CHECK_OP_RTS:
00001E78  3038 10A0               1304      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E7C  B07C 4E75               1305      CMP.W  #$4E75,D0                ;Mask exact bits for RTS    
00001E80  6600 000C               1306      BNE    CHECK_OP_LEA             ;If it's equal check next code
00001E84  4EB9 00002580           1307      JSR    PRINT_OP_RTS             ;Print out OP code
00001E8A  6000 007A               1308      BRA    GROUP4_SUCCESS           ;Finish routine
00001E8E                          1309   
00001E8E                          1310  CHECK_OP_LEA:
00001E8E  3038 10A0               1311      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001E92  0240 F1C0               1312      ANDI.W #$F1C0,D0                ;Mask appropriate bits
00001E96  B07C 41C0               1313      CMP.W  #$41C0,D0                ;Compare masked bits
00001E9A  6600 000C               1314      BNE    CHECK_OP_JSR             ;Check next OP code
00001E9E  4EB9 0000259C           1315      JSR    PRINT_OP_LEA             ;Print out OP code
00001EA4  6000 0060               1316      BRA    GROUP4_SUCCESS           ;Finish routine
00001EA8                          1317   
00001EA8                          1318  CHECK_OP_JSR:
00001EA8  3038 10A0               1319      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001EAC  0240 FFC0               1320      ANDI.W #$FFC0,D0                ;Mask appropriate bits
00001EB0  B07C 4E80               1321      CMP.W  #$4E80,D0                ;Compare masked bits
00001EB4  6600 000C               1322      BNE    CHECK_OP_NEG             ;Check next OP code
00001EB8  4EB9 00002572           1323      JSR    PRINT_OP_JSR             ;Print out OP code
00001EBE  6000 0046               1324      BRA    GROUP4_SUCCESS           ;Finish routine
00001EC2                          1325      
00001EC2                          1326  CHECK_OP_NEG:
00001EC2  3038 10A0               1327      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001EC6  0240 FF00               1328      ANDI.W #$FF00,D0                ;Mask appropriate bits
00001ECA  B07C 4400               1329      CMP.W  #$4400,D0                ;Compare masked bits
00001ECE  6600 0010               1330      BNE    CHECK_OP_MOVEM           ;Check next OP code
00001ED2  4EB8 18BE               1331      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Find size field
00001ED6  4EB9 000025B0           1332      JSR    PRINT_OP_NEG             ;Print out OP code
00001EDC  6000 0028               1333      BRA    GROUP4_SUCCESS           ;Finish routine
00001EE0                          1334      
00001EE0                          1335  CHECK_OP_MOVEM:
00001EE0  3038 10A0               1336      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001EE4  0240 FB80               1337      ANDI.W #$FB80,D0                ;Mask appropriate bits
00001EE8  B07C 4880               1338      CMP.W  #$4880,D0                ;Compare masked bits
00001EEC  6600 05D8               1339      BNE    INVALID_OP               ;If no code is found, it is invalid
00001EF0  4EB9 000025C4           1340      JSR    PRINT_OP_MOVEM_W         ;Print out OP code
00001EF6  6000 000E               1341      BRA    GROUP4_SUCCESS           ;Finish routine
00001EFA                          1342      
00001EFA                          1343  GROUP4_INVALID:
00001EFA  4EB9 000024C6           1344      JSR INVALID_OP                  ;INVALID op code has been found, set IS_VALID to 0
00001F00  4EF9 00001F06           1345      JMP GROUP4_SUCCESS 
00001F06                          1346  GROUP4_SUCCESS:
00001F06  4CDF 0001               1347      MOVEM.L (SP)+,D0                ;Restore saved registers
00001F0A  4E75                    1348      RTS                             ;Return to stack
00001F0C                          1349  C_GROUP_5:
00001F0C  48E7 8000               1350      MOVEM.L D0,-(SP)                ;Save registers to stack
00001F10                          1351  CHECK_OP_DBcc:                      ;These are ordered first due to checking bits 7-6
00001F10  3038 10A0               1352      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001F14  0240 F0C8               1353      ANDI.W #$F0C8,D0                ;Mask appropriate bits
00001F18  B07C 50C8               1354      CMP.W  #$50C8,D0                ;Compare appropriate masked bits
00001F1C  6700 004C               1355      BEQ    GROUP5_INVALID           ;INVALID op code found
00001F20  6600 0002               1356      BNE    CHECK_OP_Scc             ;Check next OP code
00001F24                          1357  
00001F24                          1358  CHECK_OP_Scc:
00001F24  3038 10A0               1359      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001F28  0240 F0C0               1360      ANDI.W #$F0C0,D0                ;Mask appropriate bits
00001F2C  B07C 50C0               1361      CMP.W  #$50C0,D0                ;Compare appropriate masked bits
00001F30  6700 0038               1362      BEQ     GROUP5_INVALID          ;INVALID OP code found
00001F34  6600 0002               1363      BNE     CHECK_OP_ADDQ           ;Check next OP code
00001F38                          1364  
00001F38                          1365  CHECK_OP_ADDQ:
00001F38  3038 10A0               1366      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001F3C  0240 F100               1367      ANDI.W #$F100,D0                ;Mask appropriate bits
00001F40  B07C 5000               1368      CMP.W  #$5000,D0                ;Compare appropriate masked bits
00001F44  6700 0024               1369      BEQ    GROUP5_INVALID           ;INVALID OP code found
00001F48  6600 0002               1370      BNE    CHECK_OP_SUBQ            ;Check next OP code
00001F4C                          1371  
00001F4C                          1372  CHECK_OP_SUBQ     
00001F4C  3038 10A0               1373      MOVE.W  CUR_OP_CODE,D0          ;Actual check for SUBQ
00001F50  0240 F100               1374      ANDI.W #$F100,D0                ;Bitmask check for SUBQ
00001F54  B07C 5100               1375      CMP.W  #$5100,D0                ;Compare the proper value
00001F58  6600 0010               1376      BNE    GROUP5_INVALID           ;Else the operand is invalid
00001F5C  4EB8 18BE               1377      JSR    FIND_2_BIT_SIZE_7_TO_6   ;Find size bit to print
00001F60  4EB9 000025E0           1378      JSR    PRINT_OP_SUBQ            ;If equal print it out
00001F66  6000 0008               1379      BRA    GROUP5_SUCCESS           ;Finish routine
00001F6A                          1380      
00001F6A                          1381  GROUP5_INVALID: 
00001F6A  4EB9 000024C6           1382      JSR INVALID_OP                  ;INVALID OP has been found, set IS_VALID to 0
00001F70                          1383  GROUP5_SUCCESS:
00001F70  4CDF 0001               1384      MOVEM.L (SP)+,D0                ;Restore registers from stack
00001F74  4E75                    1385      RTS                             ;Return to stack
00001F76                          1386      
00001F76                          1387  C_GROUP_6:
00001F76  48E7 8000               1388      MOVEM.L D0,-(SP)            ;Save register to stack
00001F7A                          1389  CHECK_OP_BSR:
00001F7A  3038 10A0               1390      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set to D0
00001F7E  0240 FF00               1391      ANDI.W  #$FF00,D0           ;Mask appropriate bits
00001F82  B07C 6100               1392      CMP.W   #$6100,D0           ;Compare masked bits
00001F86  6700 0128               1393      BEQ     GROUP6_INVALID      ;INVALID OP code found
00001F8A  6600 0002               1394      BNE     CHECK_OP_BGT        ;Check next OP code
00001F8E                          1395      
00001F8E                          1396  CHECK_OP_BGT:
00001F8E  3038 10A0               1397      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001F92  0240 FF00               1398      ANDI.W #$FF00,D0            ;Mask appropriate bits
00001F96  B07C 6E00               1399      CMP.W  #$6E00,D0            ;Compare masked bits
00001F9A  6700 0114               1400      BEQ    GROUP6_INVALID       ;INVALID OP code found
00001F9E  6600 0002               1401      BNE    CHECK_OP_BCC         ;Check next OP code
00001FA2                          1402  
00001FA2                          1403  CHECK_OP_BCC:
00001FA2  3038 10A0               1404      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001FA6  0240 FF00               1405      ANDI.W #$FF00,D0            ;Mask appropriate bits
00001FAA  B07C 6400               1406      CMP.W  #$6400,D0            ;Compare masked bits
00001FAE  6700 0100               1407      BEQ    GROUP6_INVALID       ;INVALID OP code found
00001FB2  6600 0002               1408      BNE    CHECK_OP_BEQ         ;Check next OP code 
00001FB6                          1409  
00001FB6                          1410  CHECK_OP_BEQ:
00001FB6  3038 10A0               1411      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001FBA  0240 FF00               1412      ANDI.W #$FF00,D0            ;Mask appropriate bits
00001FBE  B07C 6700               1413      CMP.W  #$6700,D0            ;Compare masked bits
00001FC2  6700 00EC               1414      BEQ    GROUP6_INVALID       ;INVALID OP code found
00001FC6  6600 0002               1415      BNE    CHECK_OP_BHI         ;Check next OP code
00001FCA                          1416  
00001FCA                          1417  CHECK_OP_BHI:
00001FCA  3038 10A0               1418      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001FCE  0240 FF00               1419      ANDI.W #$FF00,D0            ;Mask appropriate bits
00001FD2  B07C 6200               1420      CMP.W  #$6200,D0            ;Compare masked bits
00001FD6  6700 00D8               1421      BEQ    GROUP6_INVALID       ;INVALID OP code found
00001FDA  6600 0002               1422      BNE    CHECK_OP_BLS         ;Check next OP code
00001FDE                          1423  
00001FDE                          1424  CHECK_OP_BLS:
00001FDE  3038 10A0               1425      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001FE2  0240 FF00               1426      ANDI.W #$FF00,D0            ;Mask appropriate bits
00001FE6  B07C 6300               1427      CMP.W  #$6300,D0            ;Compare masked bits
00001FEA  6700 00C4               1428      BEQ    GROUP6_INVALID       ;INVALID OP code found
00001FEE  6600 0002               1429      BNE    CHECK_OP_BMI         ;Check next OP code
00001FF2                          1430  
00001FF2                          1431  CHECK_OP_BMI:
00001FF2  3038 10A0               1432      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00001FF6  0240 FF00               1433      ANDI.W #$FF00,D0            ;Mask appropriate bits
00001FFA  B07C 6B00               1434      CMP.W  #$6B00,D0            ;Compare masked bits
00001FFE  6700 00B0               1435      BEQ    GROUP6_INVALID       ;INVALID OP code found
00002002  6600 0002               1436      BNE    CHECK_OP_BNE         ;Check next OP code
00002006                          1437  
00002006                          1438  CHECK_OP_BNE:
00002006  3038 10A0               1439      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
0000200A  0240 FF00               1440      ANDI.W #$FF00,D0            ;Mask appropriate bits
0000200E  B07C 6600               1441      CMP.W  #$6600,D0            ;Compare masked bits
00002012  6700 009C               1442      BEQ    GROUP6_INVALID       ;INVALID OP code found
00002016  6600 0002               1443      BNE    CHECK_OP_BPL         ;Check next OP code    
0000201A                          1444  
0000201A                          1445  CHECK_OP_BPL:
0000201A  3038 10A0               1446      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
0000201E  0240 FF00               1447      ANDI.W #$FF00,D0            ;Mask appropriate bits
00002022  B07C 6A00               1448      CMP.W  #$6A00,D0            ;Compare masked bits
00002026  6700 0088               1449      BEQ    GROUP6_INVALID       ;INVALID OP code found
0000202A  6600 0002               1450      BNE    CHECK_OP_BRA         ;Check next OP code 
0000202E                          1451  
0000202E                          1452  
0000202E                          1453  CHECK_OP_BRA:
0000202E  3038 10A0               1454      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D0       
00002032  0240 FF00               1455      ANDI.W  #$FF00,D0           ;Mask appropriate bits
00002036  B07C 6000               1456      CMP.W   #$6000,D0           ;Compare masked bits
0000203A  6600 000C               1457      BNE     CHECK_OP_BCS        ;Check next OP code
0000203E  4EB9 00002644           1458      JSR     PRINT_OP_BRA        ;Print out OP code
00002044  6000 0070               1459      BRA     GROUP6_SUCCESS      ;Finish routine
00002048                          1460      
00002048                          1461  CHECK_OP_BCS:
00002048  3038 10A0               1462      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
0000204C  0240 FF00               1463      ANDI.W #$FF00,D0            ;Mask appropriate bits
00002050  B07C 6500               1464      CMP.W  #$6500,D0            ;Compare masked bits
00002054  6600 000C               1465      BNE    CHECK_OP_BGE         ;Check next OP code
00002058  4EB9 000025F4           1466      JSR    PRINT_OP_BCS         ;Print out OP code
0000205E  6000 0056               1467      BRA    GROUP6_SUCCESS       ;Finish routine
00002062                          1468  
00002062                          1469      
00002062                          1470  CHECK_OP_BGE:
00002062  3038 10A0               1471      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00002066  0240 FF00               1472      ANDI.W #$FF00,D0            ;Mask appropriate bits
0000206A  B07C 6C00               1473      CMP.W  #$6C00,D0            ;Compare masked bits
0000206E  6600 000C               1474      BNE    CHECK_OP_BLT         ;Check next OP code
00002072  4EB9 00002608           1475      JSR    PRINT_OP_BGE         ;Print out OP code
00002078  6000 003C               1476      BRA    GROUP6_SUCCESS       ;Finish routine
0000207C                          1477      
0000207C                          1478      
0000207C                          1479  CHECK_OP_BLT:
0000207C  3038 10A0               1480      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
00002080  0240 FF00               1481      ANDI.W #$FF00,D0            ;Mask appropriate bits
00002084  B07C 6D00               1482      CMP.W  #$6D00,D0            ;Compare masked bits
00002088  6600 000C               1483      BNE    CHECK_OP_BVC         ;Check next OP code
0000208C  4EB9 0000261C           1484      JSR    PRINT_OP_BLT         ;Print out OP code
00002092  6000 0022               1485      BRA    GROUP6_SUCCESS       ;Finish routine
00002096                          1486      
00002096                          1487  CHECK_OP_BVC:
00002096  3038 10A0               1488      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
0000209A  0240 FF00               1489      ANDI.W #$FF00,D0            ;Mask appropriate bits
0000209E  B07C 6800               1490      CMP.W  #$6800,D0            ;Compare masked bits
000020A2  6600 000C               1491      BNE    GROUP6_INVALID       ;Check next OP code
000020A6  4EB9 00002630           1492      JSR    PRINT_OP_BVC         ;Print out OP code
000020AC  6000 0008               1493      BRA    GROUP6_SUCCESS       ;Finish routine
000020B0                          1494      
000020B0                          1495  GROUP6_INVALID:
000020B0  4EB9 000024C6           1496      JSR    INVALID_OP           ;INVALID OP code found, set IS_VALID to 0
000020B6                          1497  GROUP6_SUCCESS:
000020B6  4CDF 0001               1498      MOVEM.L (SP)+,D0            ;Restore registers from stack
000020BA  4E75                    1499      RTS                         ;Return from stack
000020BC                          1500      
000020BC                          1501  C_GROUP_7:
000020BC  48E7 8000               1502      MOVEM.L D0,-(SP)            ;Save register to stack
000020C0                          1503  CHECK_OP_MOVEQ
000020C0  3038 10A0               1504      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set to D0
000020C4  0240 F100               1505      ANDI.W #$F100,D0            ;Mask appropriate bits
000020C8  B07C 7000               1506      CMP.W  #$7000,D0            ;Compare masked bits
000020CC  6000 0002               1507      BRA    GROUP7_INVALID       ;INVALID OP code found
000020D0                          1508  
000020D0                          1509  GROUP7_INVALID:
000020D0  4EB9 000024C6           1510      JSR INVALID_OP              ;INVALID OP code found, set IS_VALID to 0
000020D6                          1511  GROUP7_SUCCESS:    
000020D6  4CDF 0001               1512      MOVEM.L (SP)+,D0            ;Restore registers from stack
000020DA  4E75                    1513      RTS                         ;Return from stack
000020DC                          1514  C_GROUP_8:
000020DC  48E7 8000               1515      MOVEM.L D0,-(SP)
000020E0                          1516  CHECK_OP_DIVU:
000020E0  3038 10A0               1517      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000020E4  0240 F1C0               1518      ANDI.W  #$F1C0,D0                   ;Mask appropriate bits
000020E8  B07C 80C0               1519      CMP.W   #$80C0,D0                   ;Compare masked bits
000020EC  6700 0042               1520      BEQ     GROUP8_INVALID              ;INVALID OP code found
000020F0  6600 0002               1521      BNE     CHECK_OP_SBCD               ;Check next OP code
000020F4                          1522  
000020F4                          1523  CHECK_OP_SBCD:
000020F4  3038 10A0               1524      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000020F8  0240 F1F0               1525      ANDI.W  #$F1F0,D0                   ;Mask appropriate bits
000020FC  B07C 8100               1526      CMP.W   #$8100,D0                   ;Compare masked bits
00002100  6700 002E               1527      BEQ     GROUP8_INVALID              ;INVALID OP code found
00002104  6600 0002               1528      BNE     CHECK_OP_DIVS               ;Check next OP code
00002108                          1529      
00002108                          1530  CHECK_OP_DIVS:
00002108  3038 10A0               1531      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
0000210C  0240 F1C0               1532      ANDI.W  #$F1C0,D0                   ;Mask appropriate bits
00002110  B07C 81C0               1533      CMP.W   #$81C0,D0                   ;Compare masked bits
00002114  6600 000C               1534      BNE     CHECK_OP_OR                 ;Check next OP code
00002118  4EB9 00002658           1535      JSR     PRINT_OP_DIVS               ;OP Code found
0000211E  6000 0016               1536      BRA     GROUP8_SUCCESS
00002122                          1537  CHECK_OP_OR:                            ;At this point only remaining $8 code is OR
00002122  4EB8 18BE               1538      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Finding size bit to print out
00002126  4EB9 00002666           1539      JSR     PRINT_OP_OR                 ;Print out OR
0000212C  6000 0008               1540      BRA     GROUP8_SUCCESS              ;Finish routine
00002130                          1541  GROUP8_INVALID:
00002130  4EB9 000024C6           1542       JSR     INVALID_OP                 ;INVALID OP code found, set IS_VALID to 0
00002136                          1543  GROUP8_SUCCESS:
00002136  4CDF 0001               1544       MOVEM.L (SP)+,D0                   ;Restore register from stack
0000213A  4E75                    1545       RTS                                ;Return to stack
0000213C                          1546       
0000213C                          1547  C_GROUP_9:
0000213C  48E7 C000               1548      MOVEM.L D0-D1,-(SP)                 ;Save the registers
00002140                          1549  CHECK_SIZE_BIT_FOR_SUB:
00002140  4EB8 18BE               1550      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find the size bits in 7-6
00002144  0C38 0003 1778          1551      CMP.B   #%11,OP_SIZE                ;If the bits are %11, it has to be SUBA
0000214A  6700 0006               1552      BEQ     CHECK_OP_SUBA               ;If the bits equal it must be SUBA
0000214E  6600 0016               1553      BNE     CHECK_OP_SUBX               ;If the bits are not equal it could be SUBX
00002152                          1554      
00002152                          1555  CHECK_OP_SUBA:                          ;Check SUBA first as it has static bits
00002152  3038 10A0               1556      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00002156  0240 F0C0               1557      ANDI.W  #$F0C0,D0                   ;Mask appropriate bits
0000215A  B07C 90C0               1558      CMP.W   #$90C0,D0                   ;Compare masked bits
0000215E  6700 0042               1559      BEQ     GROUP9_INVALID              ;INVALID OP has been found
00002162  6600 0002               1560      BNE     CHECK_OP_SUBX               ;Check next OP
00002166                          1561  
00002166                          1562  CHECK_OP_SUBX:
00002166  3038 10A0               1563      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
0000216A  0240 F130               1564      ANDI.W  #$F130,D0                   ;Mask appropriate bits
0000216E  B07C 9100               1565      CMP.W   #$9100,D0                   ;Compare masked bits
00002172  6000 0002               1566      BRA     BIT_CHECK_SUBX              ;Checking if this code is SUBX through bit shifts
00002176                          1567      
00002176                          1568  BIT_CHECK_SUBX:    
00002176  3038 10A0               1569      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
0000217A  323C 0007               1570      MOVE.W  #7,D1                       ;Prepare a shift of 7 bits into D1
0000217E  E368                    1571      LSL.W   D1,D0                       ;Shift left 7 bits truncate 15-9 bits
00002180  E268                    1572      LSR.W   D1,D0                       ;Reposition D0
00002182  E848                    1573      LSR.W   #4,D0                       ;Truncate 4 right most bits to
00002184  0240 FF13               1574      ANDI.W  #$FF13,D0                   ;Compare remaining static bits
00002188  B07C 0010               1575      CMP.W   #$0010,D0                   ;If equal to this value it's SUBX
0000218C  6700 0014               1576      BEQ     GROUP9_INVALID              ;INVALID OP code found
00002190  6600 0002               1577      BNE     CHECK_OP_SUB                ;Not can only be SUB here
00002194                          1578      
00002194                          1579  CHECK_OP_SUB:                           ;At this point only remaining $9 is SUB
00002194  4EB8 18BE               1580      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find the size bit to print out
00002198  4EB9 0000267A           1581      JSR     PRINT_OP_SUB                ;Print out SUB
0000219E  6000 0008               1582      BRA     GROUP9_SUCCESS              ;Finish routine
000021A2                          1583      
000021A2                          1584  GROUP9_INVALID:
000021A2  4EB9 000024C6           1585       JSR     INVALID_OP                 ;INVALID OP code found, set IS_VALID to 0
000021A8                          1586  GROUP9_SUCCESS: 
000021A8  4CDF 0003               1587      MOVEM.L (SP)+,D0-D1                 ;Restore registers
000021AC  4E75                    1588      RTS                                 ;Return to stack
000021AE                          1589  
000021AE                          1590  C_GROUP_A:
000021AE  4EB9 000024C6           1591      JSR INVALID_OP                      ;INVALID OP code found, set IS_VALID to 0
000021B4  4E75                    1592      RTS                                 ;Return to stack
000021B6                          1593      
000021B6                          1594  C_GROUP_B:
000021B6  48E7 8000               1595      MOVEM.L D0,-(SP)                    ;Save current registers to stack
000021BA                          1596  CHECK_OP_CMPM
000021BA  3038 10A0               1597      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000021BE  0240 F138               1598      ANDI.W  #$F138,D0                   ;Mask appropriate bits
000021C2  B07C B108               1599      CMP.W   #$B108,D0                   ;Compare masked bits
000021C6  6700 0056               1600      BEQ     GROUPB_INVALID              ;INVALID OP found
000021CA  6600 0002               1601      BNE     CHECK_OP_CMPA               ;Check next OP
000021CE                          1602      
000021CE                          1603  CHECK_OP_CMPA:
000021CE  3038 10A0               1604      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000021D2  0240 F0C0               1605      ANDI.W  #$F0C0,D0                   ;Mask appropriate bits
000021D6  B07C B0C0               1606      CMP.W   #$B0C0,D0                   ;Compare masked bits
000021DA  6700 0042               1607      BEQ     GROUPB_INVALID              ;INVALID OP found
000021DE  6600 0002               1608      BNE     CHECK_OP_EOR                ;Check next OP
000021E2                          1609  
000021E2                          1610  CHECK_OP_EOR:
000021E2  3038 10A0               1611      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
000021E6  0240 F100               1612      ANDI.W  #$F100,D0                   ;Mask appropriate bits
000021EA  B07C B100               1613      CMP.W   #$B100,D0                   ;Compare masked bits
000021EE  6600 0010               1614      BNE     CHECK_OP_CMP                ;Check next OP 
000021F2  4EB8 18BE               1615      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find size bit field to print out size
000021F6  4EB9 0000268E           1616      JSR     PRINT_OP_EOR                ;Print out OP code
000021FC  6000 0026               1617      BRA     GROUPB_SUCCESS              ;Finish routine
00002200                          1618      
00002200                          1619  CHECK_OP_CMP:
00002200  3038 10A0               1620      MOVE.W  CUR_OP_CODE,D0              ;Move current instruction set into D0
00002204  0240 F100               1621      ANDI.W  #$F100,D0                   ;Mask appropriate bits
00002208  B07C B000               1622      CMP.W   #$B000,D0                   ;Compare masked bits
0000220C  6600 0010               1623      BNE     GROUPB_INVALID              ;INVALID OP code found
00002210  4EB8 18BE               1624      JSR     FIND_2_BIT_SIZE_7_TO_6      ;Find size bit field to print out size
00002214  4EB9 000026A2           1625      JSR     PRINT_OP_CMP                ;Print out OP code
0000221A  6000 0008               1626      BRA     GROUPB_SUCCESS              ;Finish routine
0000221E                          1627      
0000221E                          1628  GROUPB_INVALID:
0000221E  4EB9 000024C6           1629      JSR     INVALID_OP                  ;INVALID OP has been found, set IS_VALID to 0
00002224                          1630  GROUPB_SUCCESS:
00002224  4CDF 0001               1631      MOVEM.L (SP)+,D0                    ;Restore registers from stack
00002228  4E75                    1632      RTS                                 ;Return to stack
0000222A                          1633  C_GROUP_C:
0000222A  48E7 C000               1634      MOVEM.L D0-D1,-(SP)
0000222E                          1635      
0000222E                          1636  CHECK_OP_MULU:
0000222E  3038 10A0               1637      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00002232  0240 F1C0               1638      ANDI.W  #$F1C0,D0
00002236  B07C C0C0               1639      CMP.W   #$C0C0,D0
0000223A  6700 0066               1640      BEQ     GROUPC_INVALID
0000223E  6600 0002               1641      BNE     CHECK_OP_ABCD
00002242                          1642   
00002242                          1643  CHECK_OP_ABCD:
00002242  3038 10A0               1644      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00002246  0240 F1F0               1645      ANDI.W  #$F1F0,D0
0000224A  B07C C100               1646      CMP.W   #$C100,D0
0000224E  6700 0052               1647      BEQ     GROUPC_INVALID
00002252  6600 0002               1648      BNE     CHECK_OP_EXG
00002256                          1649   
00002256                          1650  CHECK_OP_EXG:
00002256  6000 0002               1651      BRA     BIT_CHECK_EXG       ;Always do bit check here
0000225A                          1652                          
0000225A                          1653  BIT_CHECK_EXG:                 ;Checks the OP mode bits 7-6 which cannot be 11 for EXG
0000225A  3038 10A0               1654      MOVE.W  CUR_OP_CODE,D0
0000225E  323C 0007               1655      MOVE.W  #7,D1
00002262  E368                    1656      LSL.W   D1,D0
00002264  E268                    1657      LSR.W   D1,D0
00002266  E848                    1658      LSR.W   #4,D0
00002268  0240 FF83               1659      ANDI.W  #$FF83,D0
0000226C  B07C 0010               1660      CMP.W   #$0010,D0          ;Bit mask static EXG bits
00002270  6700 0030               1661      BEQ     GROUPC_INVALID     ;If this equals, then OP must be EXG
00002274  6600 0002               1662      BNE     CHECK_OP_MULS      ;Otherwise it's MULS
00002278                          1663  CHECK_OP_MULS:
00002278  3038 10A0               1664      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000227C  0240 F1C0               1665      ANDI.W #$F1C0,D0
00002280  B07C C1C0               1666      CMP.W  #$C1C0,D0
00002284  6600 000C               1667      BNE    CHECK_OP_AND          ; OP_AND is completely dynamic outside of first nibble
00002288  4EB9 000026B6           1668      JSR    PRINT_OP_MULS
0000228E  6000 0018               1669      BRA    GROUPC_SUCCESS
00002292                          1670  CHECK_OP_AND:                 ;This would be the only possible OP code left after CHECK_OP_MULS
00002292  3038 10A0               1671      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00002296  0240 F000               1672      ANDI.W  #$F000,D0
0000229A  B07C C000               1673      CMP.W   #$C000,D0
0000229E  6000 0002               1674      BRA    GROUPC_INVALID    
000022A2                          1675      
000022A2                          1676  GROUPC_INVALID:
000022A2  4EB9 000024C6           1677      JSR     INVALID_OP
000022A8                          1678      
000022A8                          1679  GROUPC_SUCCESS:
000022A8  4CDF 0003               1680      MOVEM.L (SP)+,D0-D1
000022AC  4E75                    1681      RTS
000022AE                          1682      
000022AE                          1683  C_GROUP_D:
000022AE  48E7 8000               1684      MOVEM.L D0,-(SP)                ;Save registers to stack
000022B2                          1685  BIT_SIZE_CHECK
000022B2  3038 10A0               1686      MOVE    CUR_OP_CODE,D0          ;Move current instruction set into D0
000022B6  4EB8 18BE               1687      JSR     FIND_2_BIT_SIZE_7_TO_6  ;Specific size bit checking to see if it's 11
000022BA  0C38 0003 1778          1688      CMP.B   #%11,OP_SIZE            ;If it's %11 it cannot be ADDX and is either ADDA or ADD
000022C0  6700 0024               1689      BEQ     CHECK_OP_ADDA           ;If it's equal check ADDA
000022C4  6600 0002               1690      BNE     CHECK_OP_ADDX           ;If it's not equal check ADDX
000022C8                          1691      
000022C8                          1692  CHECK_OP_ADDX:
000022C8  3038 10A0               1693      MOVE    CUR_OP_CODE,D0
000022CC  0240 F130               1694      ANDI.W #$F130,D0                ;Mask appropriate bits
000022D0  B07C D100               1695      CMP.W  #$D100,D0                ;Compare masked bits
000022D4  6700 002C               1696      BEQ    GROUPD_INVALID           ;INVALID OP code found
000022D8  6600 0002               1697      BNE    CHECK_OP_ADD             ;Check next OP code
000022DC                          1698      
000022DC                          1699  CHECK_OP_ADD:
000022DC  4EB9 000026C4           1700      JSR PRINT_OP_ADD                ;Only remaining OP in $D is ADD at this point
000022E2  6000 0024               1701      BRA GROUPD_SUCCESS              ;Finish routine
000022E6                          1702  
000022E6                          1703  CHECK_OP_ADDA:
000022E6  3038 10A0               1704      MOVE    CUR_OP_CODE,D0          ;Move current instruction set into D0
000022EA  0240 F0C0               1705      ANDI.W #$F0C0,D0                ;Mask applicable bits
000022EE  B07C D0C0               1706      CMP.W  #$D0C0,D0                ;Compare masked bits
000022F2  66E8                    1707      BNE    CHECK_OP_ADD             ;Check next OP code
000022F4  4EB8 18FE               1708      JSR    FIND_1_BIT_SIZE_8        ;Size bit to print
000022F8  4EB9 000026D8           1709      JSR    PRINT_OP_ADDA            ;Print out OP code
000022FE  6000 0008               1710      BRA    GROUPD_SUCCESS           ;Finish routine
00002302                          1711      
00002302                          1712  GROUPD_INVALID:
00002302  4EB9 000024C6           1713      JSR INVALID_OP                  ;INVALID OP code found
00002308                          1714  GROUPD_SUCCESS:
00002308  4CDF 0001               1715      MOVEM.L (SP)+,D0                ;Restore registers from stack
0000230C  4E75                    1716      RTS                             ;Return to stack
0000230E                          1717      
0000230E                          1718  C_GROUP_E:
0000230E  48E7 8000               1719      MOVEM.L D0,-(SP)
00002312                          1720  CHECK_OP_ROXR_NO_ROT:
00002312  3038 10A0               1721      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002316  0240 FFC0               1722      ANDI.W #$FFC0,D0
0000231A  B07C E4C0               1723      CMP.W  #$E4C0,D0
0000231E  6700 0192               1724      BEQ    GROUPE_INVALID
00002322  6600 0002               1725      BNE    CHECK_OP_ROXL_NO_ROT
00002326                          1726  
00002326                          1727  CHECK_OP_ROXL_NO_ROT:
00002326  3038 10A0               1728      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000232A  0240 FFC0               1729      ANDI.W #$FFC0,D0
0000232E  B07C E5C0               1730      CMP.W  #$E5C0,D0
00002332  6700 017E               1731      BEQ    GROUPE_INVALID
00002336  6600 0002               1732      BNE    CHECK_OP_ROR_NO_ROT
0000233A                          1733  
0000233A                          1734  CHECK_OP_ROR_NO_ROT:
0000233A  3038 10A0               1735      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000233E  0240 FFC0               1736      ANDI.W #$FFC0,D0
00002342  B07C E6C0               1737      CMP.W  #$E6C0,D0
00002346  6600 000C               1738      BNE    CHECK_OP_ROL_NO_ROT
0000234A  4EB9 00002750           1739      JSR    PRINT_OP_ROR
00002350  6000 0166               1740      BRA    GROUPE_SUCCESS
00002354                          1741      
00002354                          1742  CHECK_OP_ROL_NO_ROT:
00002354  3038 10A0               1743      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002358  0240 FFC0               1744      ANDI.W #$FFC0,D0
0000235C  B07C E7C0               1745      CMP.W  #$E7C0,D0
00002360  6600 000C               1746      BNE    CHECK_OP_LSR_NO_ROT
00002364  4EB9 0000273C           1747      JSR    PRINT_OP_ROL
0000236A  6000 014C               1748      BRA    GROUPE_SUCCESS
0000236E                          1749   
0000236E                          1750  CHECK_OP_LSR_NO_ROT:
0000236E  3038 10A0               1751      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002372  0240 FFC0               1752      ANDI.W #$FFC0,D0
00002376  B07C E2C0               1753      CMP.W  #$E2C0,D0
0000237A  6600 000C               1754      BNE    CHECK_OP_LSL_NO_ROT
0000237E  4EB9 00002700           1755      JSR    PRINT_OP_LSR
00002384  6000 0132               1756      BRA    GROUPE_SUCCESS
00002388                          1757  
00002388                          1758  CHECK_OP_LSL_NO_ROT:
00002388  3038 10A0               1759      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000238C  0240 FFC0               1760      ANDI.W #$FFC0,D0
00002390  B07C E3C0               1761      CMP.W  #$E3C0,D0
00002394  6600 000C               1762      BNE    CHECK_OP_ASR_NO_ROT
00002398  4EB9 000026EC           1763      JSR    PRINT_OP_LSL
0000239E  6000 0118               1764      BRA    GROUPE_SUCCESS
000023A2                          1765  
000023A2                          1766  CHECK_OP_ASR_NO_ROT:
000023A2  3038 10A0               1767      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000023A6  0240 FFC0               1768      ANDI.W #$FFC0,D0
000023AA  B07C E0C0               1769      CMP.W  #$E0C0,D0
000023AE  6600 000C               1770      BNE    CHECK_OP_ASL_NO_ROT
000023B2  4EB9 00002714           1771      JSR    PRINT_OP_ASR
000023B8  6000 00FE               1772      BRA    GROUPE_SUCCESS
000023BC                          1773              
000023BC                          1774  CHECK_OP_ASL_NO_ROT:
000023BC  3038 10A0               1775      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000023C0  0240 FFC0               1776      ANDI.W #$FFC0,D0
000023C4  B07C E1C0               1777      CMP.W  #$E1C0,D0
000023C8  6600 000C               1778      BNE    CHECK_OP_ROXR
000023CC  4EB9 00002728           1779      JSR    PRINT_OP_ASL
000023D2  6000 00E4               1780      BRA    GROUPE_SUCCESS
000023D6                          1781  
000023D6                          1782  CHECK_OP_ROXR:
000023D6  3038 10A0               1783      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000023DA  0240 F118               1784      ANDI.W #$F118,D0
000023DE  B07C E010               1785      CMP.W  #$E010,D0
000023E2  6700 00CE               1786      BEQ    GROUPE_INVALID
000023E6  6600 0002               1787      BNE    CHECK_OP_ROXL
000023EA                          1788      
000023EA                          1789  CHECK_OP_ROXL:
000023EA  3038 10A0               1790      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
000023EE  0240 F118               1791      ANDI.W #$F118,D0
000023F2  B07C E110               1792      CMP.W  #$E110,D0
000023F6  6700 00BA               1793      BEQ    GROUPE_INVALID
000023FA  6600 0002               1794      BNE    CHECK_OP_ROR
000023FE                          1795      
000023FE                          1796  CHECK_OP_ROR:
000023FE  3038 10A0               1797      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002402  0240 F118               1798      ANDI.W #$F118,D0
00002406  B07C E018               1799      CMP.W  #$E018,D0
0000240A  6600 0010               1800      BNE    CHECK_OP_ROL
0000240E  4EB8 18BE               1801      JSR    FIND_2_BIT_SIZE_7_TO_6     
00002412  4EB9 00002750           1802      JSR    PRINT_OP_ROR
00002418  6000 009E               1803      BRA    GROUPE_SUCCESS
0000241C                          1804  
0000241C                          1805  CHECK_OP_ROL:
0000241C  3038 10A0               1806      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002420  0240 F118               1807      ANDI.W #$F118,D0
00002424  B07C E118               1808      CMP.W  #$E118,D0
00002428  6600 0010               1809      BNE    CHECK_OP_LSR
0000242C  4EB8 18BE               1810      JSR    FIND_2_BIT_SIZE_7_TO_6     
00002430  4EB9 0000273C           1811      JSR    PRINT_OP_ROL
00002436  6000 0080               1812      BRA    GROUPE_SUCCESS
0000243A                          1813      
0000243A                          1814  CHECK_OP_LSR:
0000243A  3038 10A0               1815      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000243E  0240 F118               1816      ANDI.W #$F118,D0
00002442  B07C E008               1817      CMP.W  #$E008,D0
00002446  6600 0010               1818      BNE    CHECK_OP_LSL
0000244A  4EB8 18BE               1819      JSR    FIND_2_BIT_SIZE_7_TO_6     
0000244E  4EB9 00002700           1820      JSR    PRINT_OP_LSR
00002454  6000 0062               1821      BRA    GROUPE_SUCCESS
00002458                          1822  
00002458                          1823  CHECK_OP_LSL:
00002458  3038 10A0               1824      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000245C  0240 F118               1825      ANDI.W #$F118,D0
00002460  B07C E108               1826      CMP.W  #$E108,D0
00002464  6600 0010               1827      BNE    CHECK_OP_ASR
00002468  4EB8 18BE               1828      JSR    FIND_2_BIT_SIZE_7_TO_6     
0000246C  4EB9 000026EC           1829      JSR    PRINT_OP_LSL
00002472  6000 0044               1830      BRA    GROUPE_SUCCESS
00002476                          1831  
00002476                          1832  CHECK_OP_ASR:
00002476  3038 10A0               1833      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
0000247A  0240 F118               1834      ANDI.W #$F118,D0
0000247E  B07C E000               1835      CMP.W  #$E000,D0
00002482  6600 0010               1836      BNE    CHECK_OP_ASL
00002486  4EB8 18BE               1837      JSR    FIND_2_BIT_SIZE_7_TO_6     
0000248A  4EB9 00002714           1838      JSR    PRINT_OP_ASR
00002490  6000 0026               1839      BRA    GROUPE_SUCCESS
00002494                          1840  
00002494                          1841  CHECK_OP_ASL:
00002494  3038 10A0               1842      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00002498  0240 F118               1843      ANDI.W #$F118,D0
0000249C  B07C E100               1844      CMP.W  #$E100,D0
000024A0  6600 0010               1845      BNE    GROUPE_INVALID      ;Last possible OP code
000024A4  4EB8 18BE               1846      JSR    FIND_2_BIT_SIZE_7_TO_6     
000024A8  4EB9 00002728           1847      JSR    PRINT_OP_ASL
000024AE  6000 0008               1848      BRA    GROUPE_SUCCESS
000024B2                          1849  
000024B2                          1850  GROUPE_INVALID:
000024B2  4EB9 000024C6           1851      JSR     INVALID_OP
000024B8                          1852  GROUPE_SUCCESS:
000024B8  4CDF 0001               1853      MOVEM.L (SP)+,D0
000024BC  4E75                    1854      RTS
000024BE                          1855  C_GROUP_F:
000024BE  4EB9 000024C6           1856      JSR INVALID_OP
000024C4  4E75                    1857      RTS
000024C6                          1858      
000024C6                          1859  INVALID_OP:  ; ONLY SETS IS_VALID TO 0
000024C6  11FC 0000 10A2          1860      MOVE.B #0,IS_VALID
000024CC  4E75                    1861      RTS
000024CE                          1862  
000024CE                          1863  
000024CE                          1864  
000024CE                          1865  PRINT_TO_BUFFER:
000024CE  21FC 00001000 125A      1866      MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer
000024D6  4EB8 1264               1867      JSR AddStrToBuffer
000024DA  4E75                    1868      RTS
000024DC                          1869      
000024DC                          1870  PRINT_OP_ORI:
000024DC  21FC 000027D3 1256      1871      MOVE.L #P_OP_ORI, Arg_AddStrToBuffer_String
000024E4  4EB8 24CE               1872      JSR PRINT_TO_BUFFER
000024E8  4EB9 0000278E           1873      JSR PRINT_OP_SIZE
000024EE  4E75                    1874      RTS
000024F0                          1875  PRINT_OP_CMPI:
000024F0  21FC 000027DA 1256      1876      MOVE.L #P_OP_CMPI, Arg_AddStrToBuffer_String
000024F8  4EB8 24CE               1877      JSR PRINT_TO_BUFFER
000024FC  4EB9 0000278E           1878      JSR PRINT_OP_SIZE
00002502  4E75                    1879      RTS
00002504                          1880  PRINT_OP_STATIC_BCLR:
00002504  21FC 000027E2 1256      1881      MOVE.L #P_OP_BCLR, Arg_AddStrToBuffer_String
0000250C  4EB8 24CE               1882      JSR PRINT_TO_BUFFER
00002510  4EB9 0000278E           1883      JSR PRINT_OP_SIZE
00002516  4E75                    1884      RTS
00002518                          1885      
00002518                          1886  PRINT_OP_DYNAMIC_BCLR:
00002518  21FC 000027E2 1256      1887      MOVE.L #P_OP_BCLR, Arg_AddStrToBuffer_String
00002520  4EB8 24CE               1888      JSR PRINT_TO_BUFFER
00002524  4EB9 0000278E           1889      JSR PRINT_OP_SIZE
0000252A  4E75                    1890      RTS
0000252C                          1891  
0000252C                          1892  PRINT_OP_MOVEB:
0000252C  21FC 000027EA 1256      1893      MOVE.L #P_OP_MOVEB, Arg_AddStrToBuffer_String
00002534  4EB8 24CE               1894      JSR PRINT_TO_BUFFER
00002538  4E75                    1895      RTS
0000253A                          1896      
0000253A                          1897  PRINT_OP_MOVEA_L:
0000253A  21FC 000027F5 1256      1898      MOVE.L #P_OP_MOVEA_L, Arg_AddStrToBuffer_String
00002542  4EB8 24CE               1899      JSR PRINT_TO_BUFFER
00002546  4E75                    1900      RTS
00002548                          1901  PRINT_OP_MOVE_L:
00002548  21FC 00002801 1256      1902      MOVE.L #P_OP_MOVE_L, Arg_AddStrToBuffer_String
00002550  4EB8 24CE               1903      JSR PRINT_TO_BUFFER
00002554  4E75                    1904      RTS
00002556                          1905      
00002556                          1906  PRINT_OP_MOVEA_W:
00002556  21FC 0000280C 1256      1907      MOVE.L #P_OP_MOVEA_W, Arg_AddStrToBuffer_String
0000255E  4EB8 24CE               1908      JSR PRINT_TO_BUFFER
00002562  4E75                    1909      RTS
00002564                          1910  PRINT_OP_MOVE_W:
00002564  21FC 00002818 1256      1911      MOVE.L #P_OP_MOVE_W, Arg_AddStrToBuffer_String
0000256C  4EB8 24CE               1912      JSR PRINT_TO_BUFFER
00002570  4E75                    1913      RTS
00002572                          1914  
00002572                          1915  PRINT_OP_JSR:
00002572  21FC 00002842 1256      1916      MOVE.L #P_OP_JSR, Arg_AddStrToBuffer_String
0000257A  4EB8 24CE               1917      JSR PRINT_TO_BUFFER
0000257E  4E75                    1918      RTS
00002580                          1919  PRINT_OP_RTS:
00002580  21FC 00002850 1256      1920      MOVE.L #P_OP_RTS, Arg_AddStrToBuffer_String
00002588  4EB8 24CE               1921      JSR PRINT_TO_BUFFER
0000258C  4E75                    1922      RTS
0000258E                          1923  PRINT_OP_NOP:
0000258E  21FC 00002849 1256      1924      MOVE.L #P_OP_NOP, Arg_AddStrToBuffer_String
00002596  4EB8 24CE               1925      JSR PRINT_TO_BUFFER
0000259A  4E75                    1926      RTS
0000259C                          1927  PRINT_OP_LEA:
0000259C  21FC 0000283B 1256      1928      MOVE.L #P_OP_LEA, Arg_AddStrToBuffer_String
000025A4  4EB8 24CE               1929      JSR PRINT_TO_BUFFER
000025A8  4EB9 0000278E           1930      JSR PRINT_OP_SIZE
000025AE  4E75                    1931      RTS
000025B0                          1932  PRINT_OP_NEG:
000025B0  21FC 00002857 1256      1933      MOVE.L #P_OP_NEG, Arg_AddStrToBuffer_String
000025B8  4EB8 24CE               1934      JSR PRINT_TO_BUFFER
000025BC  4EB9 0000278E           1935      JSR PRINT_OP_SIZE
000025C2  4E75                    1936      RTS
000025C4                          1937  PRINT_OP_MOVEM_W:
000025C4  21FC 00002823 1256      1938      MOVE.L #P_OP_MOVEM_W, Arg_AddStrToBuffer_String
000025CC  4EB8 24CE               1939      JSR PRINT_TO_BUFFER
000025D0  4E75                    1940      RTS
000025D2                          1941  PRINT_OP_MOVEM_L:
000025D2  21FC 0000282F 1256      1942      MOVE.L #P_OP_MOVEM_L, Arg_AddStrToBuffer_String
000025DA  4EB8 24CE               1943      JSR PRINT_TO_BUFFER
000025DE  4E75                    1944      RTS
000025E0                          1945      
000025E0                          1946  PRINT_OP_SUBQ:
000025E0  21FC 0000285E 1256      1947      MOVE.L #P_OP_SUBQ, Arg_AddStrToBuffer_String
000025E8  4EB8 24CE               1948      JSR PRINT_TO_BUFFER
000025EC  4EB9 0000278E           1949      JSR PRINT_OP_SIZE
000025F2  4E75                    1950      RTS
000025F4                          1951  
000025F4                          1952  PRINT_OP_BCS:
000025F4  21FC 0000286D 1256      1953      MOVE.L #P_OP_BCS, Arg_AddStrToBuffer_String
000025FC  4EB8 24CE               1954      JSR PRINT_TO_BUFFER
00002600  4EB9 0000278E           1955      JSR PRINT_OP_SIZE
00002606  4E75                    1956      RTS
00002608                          1957  PRINT_OP_BGE:
00002608  21FC 00002874 1256      1958      MOVE.L #P_OP_BGE, Arg_AddStrToBuffer_String
00002610  4EB8 24CE               1959      JSR PRINT_TO_BUFFER
00002614  4EB9 0000278E           1960      JSR PRINT_OP_SIZE
0000261A  4E75                    1961      RTS
0000261C                          1962  PRINT_OP_BLT:
0000261C  21FC 0000287B 1256      1963      MOVE.L #P_OP_BLT, Arg_AddStrToBuffer_String
00002624  4EB8 24CE               1964      JSR PRINT_TO_BUFFER
00002628  4EB9 0000278E           1965      JSR PRINT_OP_SIZE
0000262E  4E75                    1966      RTS
00002630                          1967  PRINT_OP_BVC:
00002630  21FC 00002882 1256      1968      MOVE.L #P_OP_BVC, Arg_AddStrToBuffer_String
00002638  4EB8 24CE               1969      JSR PRINT_TO_BUFFER
0000263C  4EB9 0000278E           1970      JSR PRINT_OP_SIZE
00002642  4E75                    1971      RTS
00002644                          1972  PRINT_OP_BRA:
00002644  21FC 00002866 1256      1973      MOVE.L #P_OP_BRA, Arg_AddStrToBuffer_String
0000264C  4EB8 24CE               1974      JSR PRINT_TO_BUFFER
00002650  4EB9 0000278E           1975      JSR PRINT_OP_SIZE
00002656  4E75                    1976      RTS
00002658                          1977  
00002658                          1978  
00002658                          1979  PRINT_OP_DIVS:
00002658  21FC 00002889 1256      1980      MOVE.L #P_OP_DIVS, Arg_AddStrToBuffer_String
00002660  4EB8 24CE               1981      JSR PRINT_TO_BUFFER
00002664  4E75                    1982      RTS
00002666                          1983  PRINT_OP_OR:
00002666  21FC 00002894 1256      1984      MOVE.L #P_OP_OR, Arg_AddStrToBuffer_String
0000266E  4EB8 24CE               1985      JSR PRINT_TO_BUFFER
00002672  4EB9 0000278E           1986      JSR PRINT_OP_SIZE
00002678  4E75                    1987      RTS
0000267A                          1988  
0000267A                          1989  PRINT_OP_SUB:
0000267A  21FC 0000289A 1256      1990      MOVE.L #P_OP_SUB, Arg_AddStrToBuffer_String
00002682  4EB8 24CE               1991      JSR PRINT_TO_BUFFER
00002686  4EB9 0000278E           1992      JSR PRINT_OP_SIZE
0000268C  4E75                    1993      RTS
0000268E                          1994  
0000268E                          1995  
0000268E                          1996  PRINT_OP_EOR:
0000268E  21FC 000028A1 1256      1997      MOVE.L #P_OP_EOR, Arg_AddStrToBuffer_String
00002696  4EB8 24CE               1998      JSR PRINT_TO_BUFFER
0000269A  4EB9 0000278E           1999      JSR PRINT_OP_SIZE
000026A0  4E75                    2000      RTS
000026A2                          2001  PRINT_OP_CMP:
000026A2  21FC 000028A8 1256      2002      MOVE.L #P_OP_CMP, Arg_AddStrToBuffer_String
000026AA  4EB8 24CE               2003      JSR PRINT_TO_BUFFER
000026AE  4EB9 0000278E           2004      JSR PRINT_OP_SIZE
000026B4  4E75                    2005      RTS
000026B6                          2006  
000026B6                          2007  PRINT_OP_MULS:
000026B6  21FC 000028AF 1256      2008      MOVE.L #P_OP_MULS, Arg_AddStrToBuffer_String
000026BE  4EB8 24CE               2009      JSR PRINT_TO_BUFFER
000026C2  4E75                    2010      RTS
000026C4                          2011  
000026C4                          2012  PRINT_OP_ADD:
000026C4  21FC 000028C2 1256      2013      MOVE.L #P_OP_ADD, Arg_AddStrToBuffer_String
000026CC  4EB8 24CE               2014      JSR PRINT_TO_BUFFER
000026D0  4EB9 0000278E           2015      JSR PRINT_OP_SIZE
000026D6  4E75                    2016      RTS
000026D8                          2017  PRINT_OP_ADDA:
000026D8  21FC 000028BA 1256      2018      MOVE.L #P_OP_ADDA, Arg_AddStrToBuffer_String
000026E0  4EB8 24CE               2019      JSR PRINT_TO_BUFFER
000026E4  4EB9 000027A8           2020      JSR PRINT_OP_SIZE_ADDA
000026EA  4E75                    2021      RTS
000026EC                          2022  
000026EC                          2023  
000026EC                          2024  PRINT_OP_LSL:
000026EC  21FC 000028D0 1256      2025      MOVE.L #P_OP_LSL, Arg_AddStrToBuffer_String
000026F4  4EB8 24CE               2026      JSR PRINT_TO_BUFFER
000026F8  4EB9 0000278E           2027      JSR PRINT_OP_SIZE
000026FE  4E75                    2028      RTS
00002700                          2029  PRINT_OP_LSR:
00002700  21FC 000028C9 1256      2030      MOVE.L #P_OP_LSR, Arg_AddStrToBuffer_String
00002708  4EB8 24CE               2031      JSR PRINT_TO_BUFFER
0000270C  4EB9 0000278E           2032      JSR PRINT_OP_SIZE
00002712  4E75                    2033      RTS
00002714                          2034  PRINT_OP_ASR:
00002714  21FC 000028D7 1256      2035      MOVE.L #P_OP_ASR, Arg_AddStrToBuffer_String
0000271C  4EB8 24CE               2036      JSR PRINT_TO_BUFFER
00002720  4EB9 0000278E           2037      JSR PRINT_OP_SIZE
00002726  4E75                    2038      RTS
00002728                          2039  PRINT_OP_ASL:
00002728  21FC 000028DE 1256      2040      MOVE.L #P_OP_ASL, Arg_AddStrToBuffer_String
00002730  4EB8 24CE               2041      JSR PRINT_TO_BUFFER
00002734  4EB9 0000278E           2042      JSR PRINT_OP_SIZE
0000273A  4E75                    2043      RTS
0000273C                          2044  PRINT_OP_ROL:
0000273C  21FC 000028EC 1256      2045      MOVE.L #P_OP_ROL, Arg_AddStrToBuffer_String
00002744  4EB8 24CE               2046      JSR PRINT_TO_BUFFER
00002748  4EB9 0000278E           2047      JSR PRINT_OP_SIZE
0000274E  4E75                    2048      RTS
00002750                          2049  PRINT_OP_ROR:
00002750  21FC 000028E5 1256      2050      MOVE.L #P_OP_ROR, Arg_AddStrToBuffer_String
00002758  4EB8 24CE               2051      JSR PRINT_TO_BUFFER
0000275C  4EB9 0000278E           2052      JSR PRINT_OP_SIZE
00002762  4E75                    2053      RTS
00002764                          2054  
00002764                          2055  
00002764                          2056  PRINT_SIZE_BYTE:
00002764  21FC 000027C7 1256      2057      MOVE.L #P_SIZE_B, Arg_AddStrToBuffer_String
0000276C  4EB8 24CE               2058      JSR PRINT_TO_BUFFER
00002770  4E75                    2059      RTS    
00002772                          2060  
00002772                          2061  PRINT_SIZE_WORD:
00002772  21FC 000027CB 1256      2062      MOVE.L #P_SIZE_W, Arg_AddStrToBuffer_String
0000277A  4EB8 24CE               2063      JSR PRINT_TO_BUFFER
0000277E  4E75                    2064      RTS
00002780                          2065      
00002780                          2066  PRINT_SIZE_LONG:
00002780  21FC 000027CF 1256      2067      MOVE.L #P_SIZE_L, Arg_AddStrToBuffer_String
00002788  4EB8 24CE               2068      JSR PRINT_TO_BUFFER
0000278C  4E75                    2069      RTS
0000278E                          2070  
0000278E                          2071  PRINT_OP_SIZE:                     ;Prints current OP code byte size if applicable
0000278E  0C38 0000 1778          2072      CMP.B  #%00,OP_SIZE         ;Checks for byte size
00002794  67CE                    2073      BEQ    PRINT_SIZE_BYTE      ;Print .B to buffer
00002796  0C38 0001 1778          2074      CMP.B  #%01,OP_SIZE         ;Check for word size
0000279C  67D4                    2075      BEQ    PRINT_SIZE_WORD      ;Print .W to buffer
0000279E  0C38 0002 1778          2076      CMP.B  #%10,OP_SIZE         ;Check for long size
000027A4  67DA                    2077      BEQ    PRINT_SIZE_LONG      ;Print .L to buffer
000027A6  4E75                    2078      RTS
000027A8                          2079      
000027A8                          2080  PRINT_OP_SIZE_ADDA:                  ;Special  print for ADDA
000027A8  0C38 0000 1778          2081      CMP.B #%0,OP_SIZE
000027AE  67C2                    2082      BEQ    PRINT_SIZE_WORD
000027B0  66CE                    2083      BNE    PRINT_SIZE_LONG
000027B2                          2084      
000027B2                          2085  
000027B2                          2086  
000027B2                          2087  
000027B2                          2088  
000027B2= 20 20 20 44 41 54 ...   2089  P_INVALID_OP    DC.B    '   DATA   $',0
000027BE= 46 6F 75 6E 64 20 ...   2090  OP_FOUND        DC.B    'Found OP',0 ; this should be taken out later
000027C7= 2E 42 20 00             2091  P_SIZE_B        DC.B    '.B ',0
000027CB= 2E 57 20 00             2092  P_SIZE_W        DC.B    '.W ',0
000027CF= 2E 4C 20 00             2093  P_SIZE_L        DC.B    '.L ',0
000027D3= 20 20 20 4F 52 49 00    2094  P_OP_ORI        DC.B    '   ORI',0
000027DA= 20 20 20 43 4D 50 ...   2095  P_OP_CMPI       DC.B    '   CMPI',0
000027E2= 20 20 20 42 43 4C ...   2096  P_OP_BCLR       DC.B    '   BCLR',0
000027EA= 20 20 20 4D 4F 56 ...   2097  P_OP_MOVEB      DC.B    '   MOVE.B ',0
000027F5= 20 20 20 4D 4F 56 ...   2098  P_OP_MOVEA_L    DC.B    '   MOVEA.L ',0 
00002801= 20 20 20 4D 4F 56 ...   2099  P_OP_MOVE_L     DC.B    '   MOVE.L ',0
0000280C= 20 20 20 4D 4F 56 ...   2100  P_OP_MOVEA_W    DC.B    '   MOVEA.W ',0
00002818= 20 20 20 4D 4F 56 ...   2101  P_OP_MOVE_W     DC.B    '   MOVE.W ',0
00002823= 20 20 20 4D 4F 56 ...   2102  P_OP_MOVEM_W    DC.B    '   MOVEM.W ',0
0000282F= 20 20 20 4D 4F 56 ...   2103  P_OP_MOVEM_L    DC.B    '   MOVEM.L ',0
0000283B= 20 20 20 4C 45 41 00    2104  P_OP_LEA        DC.B    '   LEA',0
00002842= 20 20 20 4A 53 52 00    2105  P_OP_JSR        DC.B    '   JSR',0
00002849= 20 20 20 4E 4F 50 00    2106  P_OP_NOP        DC.B    '   NOP',0
00002850= 20 20 20 52 54 53 00    2107  P_OP_RTS        DC.B    '   RTS',0
00002857= 20 20 20 4E 45 47 00    2108  P_OP_NEG        DC.B    '   NEG',0
0000285E= 20 20 20 53 55 42 ...   2109  P_OP_SUBQ       DC.B    '   SUBQ',0
00002866= 20 20 20 42 52 41 00    2110  P_OP_BRA        DC.B    '   BRA',0
0000286D= 20 20 20 42 43 53 00    2111  P_OP_BCS        DC.B    '   BCS',0
00002874= 20 20 20 42 47 45 00    2112  P_OP_BGE        DC.B    '   BGE',0
0000287B= 20 20 20 42 4C 54 00    2113  P_OP_BLT        DC.B    '   BLT',0
00002882= 20 20 20 42 56 43 00    2114  P_OP_BVC        DC.B    '   BVC',0
00002889= 20 20 20 44 49 56 ...   2115  P_OP_DIVS       DC.B    '   DIVS.W ',0
00002894= 20 20 20 4F 52 00       2116  P_OP_OR         DC.B    '   OR',0
0000289A= 20 20 20 53 55 42 00    2117  P_OP_SUB        DC.B    '   SUB',0
000028A1= 20 20 20 45 4F 52 00    2118  P_OP_EOR        DC.B    '   EOR',0
000028A8= 20 20 20 43 4D 50 00    2119  P_OP_CMP        DC.B    '   CMP',0
000028AF= 20 20 20 4D 55 4C ...   2120  P_OP_MULS       DC.B    '   MULS.W ',0
000028BA= 20 20 20 41 44 44 ...   2121  P_OP_ADDA       DC.B    '   ADDA',0
000028C2= 20 20 20 41 44 44 00    2122  P_OP_ADD        DC.B    '   ADD',0
000028C9= 20 20 20 4C 53 52 00    2123  P_OP_LSR        DC.B    '   LSR',0
000028D0= 20 20 20 4C 53 4C 00    2124  P_OP_LSL        DC.B    '   LSL',0
000028D7= 20 20 20 41 53 52 00    2125  P_OP_ASR        DC.B    '   ASR',0
000028DE= 20 20 20 41 53 4C 00    2126  P_OP_ASL        DC.B    '   ASL',0
000028E5= 20 20 20 52 4F 52 00    2127  P_OP_ROR        DC.B    '   ROR',0
000028EC= 20 20 20 52 4F 4C 00    2128  P_OP_ROL        DC.B    '   ROL',0
000028F3                          2129   
000028F3                          2130  
000028F3                          2131  
000028F3                          2132  
000028F3                          2133  
000028F3                          2134  
000028F3                          2135  
000028F3                          2136  
000028F3                          2137  
000028F3                          2138  
000028F3                          2139  
000028F3                          2140  
000028F3                          2141  
000028F3                          2142  
000028F3                          2143  -------------------- end include --------------------
000028F3                          2144      INCLUDE "EA_Integrated.x68"
000028F3                          2145  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000028F3                          2146  
000028F3                          2147  
000028F3= 41                      2148  ADDRESS         DC.B    $41
000028F4= 44                      2149  DATA            DC.B    $44
000028F5                          2150  
000028F5= 28                      2151  PTHSIS_OPEN     DC.B    $28
000028F6= 29                      2152  PTHSIS_CLSD     DC.B    $29
000028F7= 24                      2153  HEX_SIGN        DC.B    $24
000028F8= 23                      2154  IMMDTE_VALU     DC.B    $23
000028F9= 2B                      2155  PLUS_SIGN       DC.B    $2B
000028FA= 2D                      2156  MINUS_SIGN      DC.B    $2D
000028FB                          2157  
000028FB= 2C                      2158  COMMA           DC.B    $2C
000028FC= 20                      2159  SPACE           DC.B    $20
000028FD                          2160  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000028FD                          2161  
000028FD                          2162  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
000028FE                          2163  TRAILING_SIZE   DS.W    1 * Size of any immediate or
00002900                          2164                            * address values. Immediate or address
00002900                          2165                            * value of a BYTE is still processed as
00002900                          2166                            * WORD because the trailing bytes
00002900                          2167                            * are represented as a word regardless.
00002900                          2168                            * $1 = BYTE, $2 = WORD, $4 = LONG
00002900                          2169  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00002900                          2170   
00002900                          2171  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
00002900                          2172  
00002900                          2173  main_EA:
00002900  4EB8 1964               2174      JSR PARSE_EA_CONSTANT_BITS    
00002904                          2175  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00002904                          2176  
00002904                          2177  
00002904                          2178  
00002904                          2179  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      
00002904                          2180  
00002904  4EB9 0000290E           2181      JSR     CHECK_XXXX
0000290A                          2182  EXT                        * Main EXT alias to finish routine
0000290A  4EF8 11C2               2183      JMP check_print 
0000290E                          2184  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000290E                          2185  
0000290E                          2186  CHECK_XXXX:
0000290E  0C38 0008 1779          2187      CMPI.B  #$8, MNEMONIC
00002914  6D00 0008               2188      BLT     CHECK_0XXX
00002918  4EF9 0000292E           2189      JMP     CHECK_1XXX
0000291E                          2190  
0000291E                          2191  CHECK_0XXX:
0000291E  0C38 0004 1779          2192      CMPI.B  #$4, MNEMONIC
00002924  6D00 004C               2193      BLT     CHECK_00XX
00002928  4EF9 00002980           2194      JMP     CHECK_01XX
0000292E                          2195  
0000292E                          2196  CHECK_1XXX:
0000292E  0C38 0008 1779          2197      CMPI.B  #$8, MNEMONIC
00002934  6700 0308               2198      BEQ     LOAD_1000
00002938  0C38 0009 1779          2199      CMPI.B  #$9, MNEMONIC
0000293E  6700 02F8               2200      BEQ     LOAD_1001
00002942  0C38 000B 1779          2201      CMPI.B  #$B, MNEMONIC
00002948  6700 02E8               2202      BEQ     LOAD_1011
0000294C  0C38 000C 1779          2203      CMPI.B  #$C, MNEMONIC
00002952  6700 02D8               2204      BEQ     LOAD_1100
00002956  0C38 000D 1779          2205      CMPI.B  #$D, MNEMONIC
0000295C  6700 026C               2206      BEQ     LOAD_1101
00002960  0C38 000E 1779          2207      CMPI.B  #$E, MNEMONIC
00002966  6700 0038               2208      BEQ     LOAD_1110
0000296A                          2209      
0000296A  4EF9 0000334E           2210      JMP     INVALID
00002970                          2211      
00002970  4E75                    2212      RTS
00002972                          2213  
00002972                          2214  CHECK_00XX:
00002972  0C38 0001 1779          2215      CMPI.B  #$1, MNEMONIC
00002978  6D00 05D6               2216      BLT     LOAD_0000
0000297C  6C00 0758               2217      BGE     LOAD_00XX
00002980                          2218  
00002980                          2219  CHECK_01XX:
00002980  0C38 0004 1779          2220      CMPI.B  #%0100, MNEMONIC
00002986  6700 0458               2221      BEQ     LOAD_0100
0000298A  0C38 0005 1779          2222      CMPI.B  #%0101, MNEMONIC
00002990  6700 03C4               2223      BEQ     LOAD_0101
00002994  0C38 0006 1779          2224      CMPI.B  #%0110, MNEMONIC
0000299A  6700 0124               2225      BEQ     LOAD_0110
0000299E  4E75                    2226      RTS
000029A0                          2227  
000029A0                          2228  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000029A0                          2229  
000029A0                          2230  
000029A0                          2231  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000029A0                          2232  
000029A0                          2233  LOAD_1110:
000029A0  247C 00000000           2234              MOVEA.L #0, A2
000029A6  267C 00000000           2235              MOVEA.L #0, A3
000029AC  4285                    2236              CLR.L   D5
000029AE                          2237      
000029AE  1A38 177B               2238              MOVE.B  SECOND_3, D5
000029B2  0205 0003               2239              ANDI.B  #%011, D5
000029B6                          2240      
000029B6  0C05 0003               2241              CMPI.B  #%11, D5
000029BA  6700 0006               2242              BEQ     MYBE_ASd_1
000029BE  6600 0068               2243              BNE     MYBE_ASd_2
000029C2                          2244  
000029C2  0C38 0000 177A          2245  MYBE_ASd_1  CMPI.B  #%000, FIRST_3
000029C8  6700 001C               2246              BEQ     ASd_1
000029CC  0C38 0001 177A          2247              CMPI.B  #%001, FIRST_3
000029D2  6700 0012               2248              BEQ     ASd_1 * LSd
000029D6  0C38 0003 177A          2249              CMPI.B  #%011, FIRST_3
000029DC  6700 0008               2250              BEQ     ASd_1 * ROd
000029E0  4EF9 0000334E           2251              JMP     INVALID
000029E6                          2252  
000029E6  0C38 0007 177C          2253  ASd_1       CMPI.B  #%111, THIRD_3
000029EC  6600 000C               2254              BNE     MOVEON  
000029F0  0C38 0004 177D          2255              CMPI.B  #%100, FOURTH_3
000029F6  6700 0956               2256              BEQ     INVALID
000029FA                          2257  
000029FA  367C 2A12               2258  MOVEON      MOVEA.W #ASd_1_BACK, A3           
000029FE  0C38 0000 177D          2259              CMPI.B  #%000, FOURTH_3
00002A04  6700 07E0               2260              BEQ     SIZE_W
00002A08  0C38 0001 177D          2261              CMPI.B  #%001, FOURTH_3
00002A0E  6700 07DE               2262              BEQ     SIZE_L
00002A12                          2263  
00002A12  1638 177C               2264  ASd_1_BACK  MOVE.B  THIRD_3, D3
00002A16  1438 177D               2265              MOVE.B  FOURTH_3, D2
00002A1A                          2266              
00002A1A  4EB9 0000313A           2267              JSR     LOAD_EA
00002A20  4EB9 0000329C           2268              JSR     LOAD_NEW_LINE
00002A26  4E75                    2269              RTS
00002A28                          2270  
00002A28  4285                    2271  MYBE_ASd_2  CLR.L   D5
00002A2A                          2272  
00002A2A  1A38 177C               2273              MOVE.B  THIRD_3, D5
00002A2E  0205 0003               2274              ANDI.B  #%011, D5
00002A32  0C05 0002               2275              CMPI.B  #%10, D5
00002A36  6600 0006               2276              BNE     ASd_2 * or LSd or ROd
00002A3A  6700 0912               2277              BEQ     INVALID
00002A3E                          2278              
00002A3E  4285                    2279  ASd_2       CLR.L   D5
00002A40                          2280  
00002A40  1A38 177C               2281              MOVE.B  THIRD_3, D5
00002A44  0205 0004               2282              ANDI.B  #%100, D5
00002A48  0C05 0004               2283              CMPI.B  #%100, D5
00002A4C  6700 0048               2284              BEQ     ASd_2_REG
00002A50  6600 0002               2285              BNE     ASd_2_IMD
00002A54                          2286              
00002A54  347C 2A7A               2287  ASd_2_IMD   MOVEA.W #ASd_2_IMD_B, A2
00002A58  0C38 0000 177A          2288              CMPI.B  #%000, FIRST_3
00002A5E  6700 0006               2289              BEQ     LOAD_8
00002A62  6600 000C               2290              BNE     LOAD_FIRST3
00002A66                          2291              
00002A66  183C 0008               2292  LOAD_8      MOVE.B  #8, D4
00002A6A  4EF9 00003268           2293              JMP     LOAD_IMMDTE
00002A70                          2294  
00002A70  1838 177A               2295  LOAD_FIRST3 MOVE.B  FIRST_3, D4
00002A74  4EF9 00003268           2296              JMP     LOAD_IMMDTE
00002A7A                          2297  
00002A7A  4EB9 0000329E           2298  ASd_2_IMD_B JSR     LOAD_COMMA_SPACE
00002A80                          2299  
00002A80  163C 0000               2300              MOVE.B  #%000, D3
00002A84  1438 177D               2301              MOVE.B  FOURTH_3, D2
00002A88                          2302              
00002A88  4EB9 0000313A           2303              JSR     LOAD_EA
00002A8E  4EB9 0000329C           2304              JSR     LOAD_NEW_LINE
00002A94  4E75                    2305              RTS
00002A96                          2306  
00002A96  163C 0000               2307  ASd_2_REG   MOVE.B  #%000, D3
00002A9A  1438 177A               2308              MOVE.B  FIRST_3, D2
00002A9E                          2309              
00002A9E  4EB9 0000313A           2310              JSR     LOAD_EA
00002AA4  4EB9 0000329E           2311              JSR     LOAD_COMMA_SPACE
00002AAA                          2312              
00002AAA  163C 0000               2313              MOVE.B  #%000, D3
00002AAE  1438 177D               2314              MOVE.B  FOURTH_3, D2
00002AB2                          2315              
00002AB2  4EB9 0000313A           2316              JSR     LOAD_EA
00002AB8  4EB9 0000329C           2317              JSR     LOAD_NEW_LINE
00002ABE  4E75                    2318              RTS
00002AC0                          2319  
00002AC0                          2320  
00002AC0                          2321  
00002AC0                          2322  LOAD_0110:
00002AC0  247C 00000000           2323              MOVEA.L #0, A2
00002AC6  267C 00000000           2324              MOVEA.L #0, A3
00002ACC  4285                    2325              CLR.L   D5
00002ACE  4286                    2326              CLR.L   D6
00002AD0  4284                    2327              CLR.L   D4
00002AD2                          2328  
00002AD2  0C38 0000 177A          2329              CMPI.B  #%000, FIRST_3
00002AD8  6700 0006               2330              BEQ     MYBE_BRA
00002ADC  6600 0010               2331              BNE     NOT_BRA
00002AE0  0C38 0004 177B          2332  MYBE_BRA    CMPI.B  #%100, SECOND_3
00002AE6  6D00 003A               2333              BLT     BRA
00002AEA  6C00 0002               2334              BGE     NOT_BRA
00002AEE                          2335              
00002AEE  1A38 177A               2336  NOT_BRA     MOVE.B  FIRST_3, D5
00002AF2  E305                    2337              ASL.B   #1, D5
00002AF4  1C38 177B               2338              MOVE.B  SECOND_3, D6
00002AF8  E406                    2339              ASR.B   #2, D6
00002AFA  DA06                    2340              ADD.B   D6, D5
00002AFC                          2341              
00002AFC  0C05 0005               2342              CMPI.B  #%0101, D5
00002B00  6700 0020               2343              BEQ     BRA * CS
00002B04  0C05 0008               2344              CMPI.B  #%1000, D5
00002B08  6700 0018               2345              BEQ     BRA * VC
00002B0C  0C05 000C               2346              CMPI.B  #%1100, D5
00002B10  6700 0010               2347              BEQ     BRA * GE
00002B14  0C05 000D               2348              CMPI.B  #%1101, D5
00002B18  6700 0008               2349              BEQ     BRA * LT
00002B1C                          2350              
00002B1C  4EF9 0000334E           2351              JMP     INVALID
00002B22                          2352              
00002B22                          2353              
00002B22  4285                    2354  BRA         CLR.L   D5
00002B24  4286                    2355              CLR.L   D6
00002B26                          2356  
00002B26  3A0D                    2357              MOVE.W  A5, D5 * D5 has $1002 (Starting + MNEMONICS)
00002B28  3C38 10A0               2358              MOVE.W  CUR_OP_CODE, D6
00002B2C  0246 00FF               2359              ANDI.W  #$00FF, D6 * D6 now has $E
00002B30  0C06 0000               2360              CMPI.B  #$00, D6
00002B34  6700 0052               2361              BEQ     BRA_WORD * word. there is 4 hex trailing bits (word)
00002B38                          2362  
00002B38  0C06 00FF               2363              CMPI.B  #$FF, D6
00002B3C  6700 0010               2364              BEQ     BRA_BYTE
00002B40  0C06 00FE               2365              CMPI.B  #$FE, D6
00002B44  6700 0008               2366              BEQ     BRA_BYTE
00002B48                          2367  
00002B48  4EF9 0000334E           2368              JMP     INVALID
00002B4E                          2369              
00002B4E  0C06 00FE               2370  BRA_BYTE    CMPI.B  #$FE, D6
00002B52  6700 0010               2371              BEQ     DOWN_ZERO
00002B56  0C06 00FF               2372              CMPI.B  #$FF, D6
00002B5A  6700 0010               2373              BEQ     DOWN_ONE
00002B5E                          2374              
00002B5E  4EF9 0000334E           2375              JMP     INVALID
00002B64                          2376              
00002B64  5505                    2377  DOWN_ZERO   SUBI.B  #$2, D5 * D5 has $1000 (Starting)
00002B66  4EF9 00002B74           2378              JMP     BRA_BYTE2
00002B6C                          2379              
00002B6C  5305                    2380  DOWN_ONE    SUBI.B  #$1, D5 * D5 has $1001 (Starting + 1)
00002B6E  4EF9 00002B74           2381              JMP     BRA_BYTE2
00002B74                          2382              
00002B74  347C 2B80               2383  BRA_BYTE2   MOVE.W  #BRA_BYTE3, A2
00002B78  3805                    2384              MOVE.W  D5, D4
00002B7A  4EF9 00003244           2385              JMP     LOAD_ABS_SHORT
00002B80  4EB9 0000329C           2386  BRA_BYTE3   JSR     LOAD_NEW_LINE
00002B86  4E75                    2387              RTS
00002B88                          2388  
00002B88  381D                    2389  BRA_WORD    MOVE.W  (A5)+, D4 * D4 now has $000E
00002B8A                          2390  
00002B8A  0C84 00008000           2391              CMPI.L  #$8000, D4
00002B90  6C00 001A               2392              BGE     NEG_WORD
00002B94  6D00 0002               2393              BLT     POS_WORD
00002B98                          2394              
00002B98  347C 2BA4               2395  POS_WORD    MOVE.W  #BRA_WORD_BK, A2
00002B9C  D845                    2396              ADD.W   D5, D4 * D4 now has $100E
00002B9E  4EF9 00003244           2397              JMP     LOAD_ABS_SHORT
00002BA4  4EB9 0000329C           2398  BRA_WORD_BK JSR     LOAD_NEW_LINE
00002BAA  4E75                    2399              RTS
00002BAC                          2400  
00002BAC  347C 2BC2               2401  NEG_WORD    MOVE.W  #BRA_WRD_BK2, A2
00002BB0  4444                    2402              NEG     D4
00002BB2                          2403              
00002BB2  B885                    2404              CMP.L   D5, D4 * $4002 vs DISPLACEMENT
00002BB4  6E00 0798               2405              BGT     INVALID
00002BB8                          2406              
00002BB8  9A44                    2407              SUB.W   D4, D5 * D5 now has $1000 - 2cmp'ed $000E
00002BBA  3805                    2408              MOVE.W  D5, D4
00002BBC  4EF9 00003244           2409              JMP     LOAD_ABS_SHORT
00002BC2  4EB9 0000329C           2410  BRA_WRD_BK2 JSR     LOAD_NEW_LINE
00002BC8  4E75                    2411              RTS
00002BCA                          2412  
00002BCA                          2413  
00002BCA                          2414  
00002BCA                          2415  LOAD_1101:
00002BCA  0C38 0003 177B          2416              CMPI.B  #%011, SECOND_3
00002BD0  6700 0012               2417              BEQ     ADDA
00002BD4  0C38 0007 177B          2418              CMPI.B  #%111, SECOND_3
00002BDA  6700 0008               2419              BEQ     ADDA
00002BDE                          2420              
00002BDE  4EF9 00002C3E           2421              JMP     LOAD_1000
00002BE4                          2422              
00002BE4  367C 2C02               2423  ADDA        MOVEA.W #ADDA_BACK, A3
00002BE8  4281                    2424              CLR.L   D1
00002BEA  1238 177B               2425              MOVE.B  SECOND_3, D1
00002BEE  0201 0004               2426              ANDI.B  #%100, D1
00002BF2                          2427              
00002BF2  0C01 0000               2428              CMPI.B  #%000, D1
00002BF6  6700 05EE               2429              BEQ     SIZE_W
00002BFA  0C01 0004               2430              CMPI.B  #%100, D1
00002BFE  6700 05EE               2431              BEQ     SIZE_L
00002C02                          2432              
00002C02  1638 177C               2433  ADDA_BACK   MOVE.B  THIRD_3, D3
00002C06  1438 177D               2434              MOVE.B  FOURTH_3, D2
00002C0A                          2435  
00002C0A  4EB9 0000313A           2436              JSR     LOAD_EA
00002C10  4EB9 0000329E           2437              JSR     LOAD_COMMA_SPACE
00002C16                          2438              
00002C16  163C 0001               2439              MOVE.B  #%001, D3
00002C1A  1438 177A               2440              MOVE.B  FIRST_3, D2
00002C1E                          2441              
00002C1E  4EB9 0000313A           2442              JSR     LOAD_EA
00002C24  4EB9 0000329C           2443              JSR     LOAD_NEW_LINE
00002C2A  4E75                    2444              RTS
00002C2C                          2445  
00002C2C                          2446  LOAD_1100:
00002C2C  4EF9 00002C3E           2447      JMP     LOAD_1000
00002C32                          2448      
00002C32                          2449  LOAD_1011:
00002C32  4EF9 00002C3E           2450      JMP     LOAD_1000
00002C38                          2451  
00002C38                          2452  
00002C38                          2453  LOAD_1001:
00002C38  4EF9 00002C3E           2454      JMP     LOAD_1000
00002C3E                          2455  
00002C3E                          2456  
00002C3E                          2457  LOAD_1000:
00002C3E  4283                    2458              CLR.L   D3
00002C40  4282                    2459              CLR.L   D2
00002C42  267C 00000000           2460              MOVEA.L #0, A3
00002C48                          2461              
00002C48  0C38 0007 177B          2462              CMPI.B  #%111, SECOND_3
00002C4E  6700 00BA               2463              BEQ     DIVS
00002C52                          2464              
00002C52  0C38 0003 177B          2465              CMPI.B  #%011, SECOND_3
00002C58  6700 06F4               2466              BEQ     INVALID
00002C5C                          2467              
00002C5C  0C38 0004 177B          2468              CMPI.B  #%100, SECOND_3
00002C62  6D00 0006               2469              BLT     DIR_0 * direction bit 0
00002C66  6C00 0052               2470              BGE     DIR_1 * direction bit 1
00002C6A                          2471              
00002C6A  4281                    2472  DIR_0       CLR.L   D1
00002C6C  1238 177B               2473              MOVE.B  SECOND_3, D1
00002C70  0201 0003               2474              ANDI.B  #%011, D1
00002C74                          2475      
00002C74  367C 2C90               2476              MOVEA.W #OR_BACK, A3
00002C78  0C01 0000               2477              CMPI.B  #%00, D1
00002C7C  6700 0560               2478              BEQ     SIZE_B
00002C80  0C01 0001               2479              CMPI.B  #%01, D1
00002C84  6700 0560               2480              BEQ     SIZE_W
00002C88  0C01 0002               2481              CMPI.B  #%10, D1
00002C8C  6700 0560               2482              BEQ     SIZE_L
00002C90                          2483              
00002C90  1638 177C               2484  OR_BACK     MOVE.B  THIRD_3, D3
00002C94  1438 177D               2485              MOVE.B  FOURTH_3, D2
00002C98                          2486  
00002C98  4EB9 0000313A           2487              JSR     LOAD_EA
00002C9E  4EB9 0000329E           2488              JSR     LOAD_COMMA_SPACE
00002CA4                          2489              
00002CA4  163C 0000               2490              MOVE.B  #%000, D3
00002CA8  1438 177A               2491              MOVE.B  FIRST_3, D2
00002CAC                          2492              
00002CAC  4EB9 0000313A           2493              JSR     LOAD_EA
00002CB2  4EB9 0000329C           2494              JSR     LOAD_NEW_LINE
00002CB8  4E75                    2495              RTS
00002CBA                          2496              
00002CBA  163C 0000               2497  DIR_1       MOVE.B  #%000, D3
00002CBE  1438 177A               2498              MOVE.B  FIRST_3, D2
00002CC2                          2499              
00002CC2  4EB9 0000313A           2500              JSR     LOAD_EA
00002CC8  4EB9 0000329E           2501              JSR     LOAD_COMMA_SPACE
00002CCE                          2502              
00002CCE  4281                    2503              CLR.L   D1
00002CD0  1238 177B               2504              MOVE.B  SECOND_3, D1
00002CD4  0201 0003               2505              ANDI.B  #%011, D1
00002CD8                          2506      
00002CD8  367C 2CF4               2507              MOVEA.W #OR_BACK2, A3
00002CDC  0C01 0000               2508              CMPI.B  #%00, D1
00002CE0  6700 04FC               2509              BEQ     SIZE_B
00002CE4  0C01 0001               2510              CMPI.B  #%01, D1
00002CE8  6700 04FC               2511              BEQ     SIZE_W
00002CEC  0C01 0002               2512              CMPI.B  #%10, D1
00002CF0  6700 04FC               2513              BEQ     SIZE_L
00002CF4                          2514              
00002CF4  1638 177C               2515  OR_BACK2    MOVE.B  THIRD_3, D3
00002CF8  1438 177D               2516              MOVE.B  FOURTH_3, D2
00002CFC                          2517  
00002CFC  4EB9 0000313A           2518              JSR     LOAD_EA
00002D02  4EB9 0000329C           2519              JSR     LOAD_NEW_LINE
00002D08  4E75                    2520              RTS    
00002D0A                          2521              
00002D0A  367C 2D2C               2522  DIVS        MOVEA.W #DIVS_BACK, A3
00002D0E  0C38 0000 177D          2523              CMPI.B  #%000, FOURTH_3
00002D14  6700 04D0               2524              BEQ     SIZE_W
00002D18  0C38 0001 177D          2525              CMPI.B  #%001, FOURTH_3
00002D1E  6700 062E               2526              BEQ     INVALID
00002D22  0C38 0004 177D          2527              CMPI.B  #%100, FOURTH_3
00002D28  6700 04BC               2528              BEQ     SIZE_W
00002D2C                          2529              
00002D2C  1638 177C               2530  DIVS_BACK   MOVE.B  THIRD_3, D3
00002D30  1438 177D               2531              MOVE.B  FOURTH_3, D2
00002D34                          2532  
00002D34  4EB9 0000313A           2533              JSR     LOAD_EA
00002D3A  4EB9 0000329E           2534              JSR     LOAD_COMMA_SPACE
00002D40                          2535  
00002D40  163C 0000               2536              MOVE.B  #%000, D3
00002D44  1438 177A               2537              MOVE.B  FIRST_3, D2
00002D48                          2538  
00002D48  4EB9 0000313A           2539              JSR     LOAD_EA
00002D4E  4EB9 0000329C           2540              JSR     LOAD_NEW_LINE
00002D54  4E75                    2541              RTS
00002D56                          2542  
00002D56                          2543  
00002D56                          2544  LOAD_0101:
00002D56  4283                    2545              CLR.L   D3
00002D58  4282                    2546              CLR.L   D2
00002D5A  267C 00000000           2547              MOVEA.L #0, A3
00002D60                          2548  
00002D60  0C38 0007 177A          2549              CMPI.B  #%111, FIRST_3
00002D66  6F00 0008               2550              BLE     MYBE_SUBQ1
00002D6A  4EF9 0000334E           2551              JMP     INVALID
00002D70                          2552              
00002D70  0C38 0003 177B          2553  MYBE_SUBQ1  CMPI.B  #%011, SECOND_3
00002D76  6E00 0008               2554              BGT     MYBE_SUBQ2
00002D7A  4EF9 0000334E           2555              JMP     INVALID
00002D80                          2556  
00002D80  0C38 0007 177B          2557  MYBE_SUBQ2  CMPI.B  #%111, SECOND_3
00002D86  6D00 0008               2558              BLT     SUBQ
00002D8A  4EF9 0000334E           2559              JMP     INVALID
00002D90                          2560  
00002D90  5238 177A               2561  SUBQ        ADDI.B  #%1, FIRST_3
00002D94  1838 177A               2562              MOVE.B  FIRST_3, D4
00002D98                          2563              
00002D98  347C 2DA2               2564              MOVEA.W #SUBQ_SAVED, A2
00002D9C  4EF9 00003268           2565              JMP     LOAD_IMMDTE
00002DA2                          2566              
00002DA2  4EB9 0000329E           2567  SUBQ_SAVED  JSR     LOAD_COMMA_SPACE
00002DA8                          2568  
00002DA8  367C 2DCA               2569              MOVEA.W #SUBQ_BACK, A3
00002DAC  0C38 0004 177B          2570              CMPI.B  #%100, SECOND_3
00002DB2  6700 042A               2571              BEQ     SIZE_B
00002DB6  0C38 0005 177B          2572              CMPI.B  #%101, SECOND_3
00002DBC  6700 0428               2573              BEQ     SIZE_W
00002DC0  0C38 0006 177B          2574              CMPI.B  #%110, SECOND_3
00002DC6  6700 0426               2575              BEQ     SIZE_L
00002DCA                          2576              
00002DCA  1638 177C               2577  SUBQ_BACK   MOVE.B  THIRD_3, D3
00002DCE  1438 177D               2578              MOVE.B  FOURTH_3, D2
00002DD2                          2579  
00002DD2  4EB9 0000313A           2580              JSR     LOAD_EA
00002DD8  4EB9 0000329C           2581              JSR     LOAD_NEW_LINE
00002DDE  4E75                    2582              RTS
00002DE0                          2583  
00002DE0                          2584  LOAD_0100:
00002DE0  4283                    2585              CLR.L   D3
00002DE2  4282                    2586              CLR.L   D2
00002DE4  267C 00000000           2587              MOVEA.L #0, A3
00002DEA                          2588  
00002DEA  0C38 0002 177A          2589              CMPI.B  #%010, FIRST_3
00002DF0  6700 0006               2590              BEQ     MYBE_NEG
00002DF4  6600 000C               2591              BNE     NOT_NEG
00002DF8  0C38 0003 177B          2592  MYBE_NEG    CMPI.B  #%011, SECOND_3
00002DFE  6D00 008E               2593              BLT     NEG
00002E02                          2594  
00002E02  0C38 0007 177A          2595  NOT_NEG     CMPI.B  #%111, FIRST_3
00002E08  6700 0006               2596              BEQ     MYBE_RTS1
00002E0C  6600 0032               2597              BNE     NOT_RTS
00002E10  0C38 0001 177B          2598  MYBE_RTS1   CMPI.B  #%001, SECOND_3
00002E16  6700 0006               2599              BEQ     MYBE_RTS2
00002E1A  6600 0024               2600              BNE     NOT_RTS
00002E1E  0C38 0006 177C          2601  MYBE_RTS2   CMPI.B  #%110, THIRD_3
00002E24  6700 0006               2602              BEQ     MYBE_RTS3
00002E28  6600 0016               2603              BNE     NOT_RTS
00002E2C  0C38 0005 177D          2604  MYBE_RTS3   CMPI.B  #%101, FOURTH_3
00002E32  6700 0092               2605              BEQ     RTS
00002E36  0C38 0001 177D          2606              CMPI.B  #%001, FOURTH_3 
00002E3C  6700 0088               2607              BEQ     RTS * It's actually NOP but it's the same shit in EA perspective
00002E40                          2608              
00002E40  0C38 0007 177A          2609  NOT_RTS     CMPI.B  #%111, FIRST_3
00002E46  6700 0006               2610              BEQ     MYBE_JSR
00002E4A  6600 000C               2611              BNE     NOT_JSR
00002E4E  0C38 0002 177B          2612  MYBE_JSR    CMPI.B  #%010, SECOND_3
00002E54  6700 0078               2613              BEQ     JSR
00002E58                          2614  
00002E58  4286                    2615  NOT_JSR     CLR.L   D6
00002E5A  1C38 177A               2616              MOVE.B  FIRST_3, D6
00002E5E  0206 0005               2617              ANDI.B  #%101, D6 * Making %1X0 -> %100
00002E62  0C06 0004               2618              CMPI.B  #%100, D6
00002E66  6700 0006               2619              BEQ     MYBE_MOVEM
00002E6A  6600 0012               2620              BNE     NOT_MOVEM
00002E6E                          2621              
00002E6E  1C38 177B               2622  MYBE_MOVEM  MOVE.B  SECOND_3, D6
00002E72  0206 0006               2623              ANDI.B  #%110, D6
00002E76  0C06 0002               2624              CMPI.B  #%010, D6
00002E7A  6700 0080               2625              BEQ     MOVEM
00002E7E                          2626              
00002E7E  0C38 0007 177B          2627  NOT_MOVEM   CMPI.B  #%111, SECOND_3
00002E84  6700 007E               2628              BEQ     LEA
00002E88                          2629              
00002E88  4EF9 0000334E           2630              JMP     INVALID
00002E8E                          2631  
00002E8E                          2632  NEG:
00002E8E  367C 2EB0               2633              MOVEA.W #NEG_BACK, A3
00002E92  0C38 0000 177B          2634              CMPI.B  #%000, SECOND_3
00002E98  6700 0344               2635              BEQ     SIZE_B
00002E9C  0C38 0001 177B          2636              CMPI.B  #%001, SECOND_3
00002EA2  6700 0342               2637              BEQ     SIZE_W
00002EA6  0C38 0002 177B          2638              CMPI.B  #%010, SECOND_3
00002EAC  6700 0340               2639              BEQ     SIZE_L
00002EB0                          2640              
00002EB0  1638 177C               2641  NEG_BACK    MOVE.B  THIRD_3, D3
00002EB4  1438 177D               2642              MOVE.B  FOURTH_3, D2
00002EB8                          2643  
00002EB8  4EB9 0000313A           2644              JSR     LOAD_EA
00002EBE  4EB9 0000329C           2645              JSR     LOAD_NEW_LINE
00002EC4  4E75                    2646              RTS
00002EC6                          2647              
00002EC6                          2648  RTS:
00002EC6  4EB9 0000329C           2649              JSR     LOAD_NEW_LINE
00002ECC  4E75                    2650              RTS
00002ECE                          2651  
00002ECE                          2652  JSR:
00002ECE  367C 2EE6               2653              MOVEA.W #JSR_BACK, A3
00002ED2  0C38 0000 177D          2654              CMPI.B  #%000, FOURTH_3
00002ED8  6700 030C               2655              BEQ     SIZE_W
00002EDC  0C38 0001 177D          2656              CMPI.B  #%001, FOURTH_3
00002EE2  6700 030A               2657              BEQ     SIZE_L
00002EE6                          2658              
00002EE6  1638 177C               2659  JSR_BACK    MOVE.B  THIRD_3, D3
00002EEA  1438 177D               2660              MOVE.B  FOURTH_3, D2
00002EEE                          2661              
00002EEE  4EB9 0000313A           2662              JSR     LOAD_EA
00002EF4  4EB9 0000329C           2663              JSR     LOAD_NEW_LINE
00002EFA  4E75                    2664              RTS
00002EFC                          2665  
00002EFC                          2666  MOVEM:
00002EFC  4EB9 0000329C           2667              JSR     LOAD_NEW_LINE
00002F02  4E75                    2668              RTS
00002F04                          2669      
00002F04                          2670  LEA:
00002F04  367C 2F26               2671              MOVEA.W #LEA_BACK, A3
00002F08  0C38 0000 177D          2672              CMPI.B  #%000, FOURTH_3
00002F0E  6700 02D6               2673              BEQ     SIZE_W
00002F12  0C38 0001 177D          2674              CMPI.B  #%001, FOURTH_3
00002F18  6700 02D4               2675              BEQ     SIZE_L
00002F1C  0C38 0004 177D          2676              CMPI.B  #%100, FOURTH_3
00002F22  6700 042A               2677              BEQ     INVALID 
00002F26                          2678              
00002F26  1638 177C               2679  LEA_BACK    MOVE.B  THIRD_3, D3
00002F2A  1438 177D               2680              MOVE.B  FOURTH_3, D2
00002F2E                          2681              
00002F2E  4EB9 0000313A           2682              JSR     LOAD_EA
00002F34  4EB9 0000329E           2683              JSR     LOAD_COMMA_SPACE
00002F3A                          2684              
00002F3A  163C 0001               2685              MOVE.B  #%001, D3
00002F3E  1438 177A               2686              MOVE.B  FIRST_3, D2
00002F42                          2687              
00002F42  4EB9 0000313A           2688              JSR     LOAD_EA
00002F48  4EB9 0000329C           2689              JSR     LOAD_NEW_LINE
00002F4E  4E75                    2690              RTS
00002F50                          2691  
00002F50                          2692  LOAD_0000:
00002F50  4283                    2693              CLR.L   D3
00002F52  4282                    2694              CLR.L   D2
00002F54  267C 00000000           2695              MOVEA.L #0, A3
00002F5A                          2696  
00002F5A  0C38 0000 177A          2697              CMPI.B  #%000, FIRST_3
00002F60  6700 0006               2698              BEQ     MYBE_ORI
00002F64  6600 000C               2699              BNE     NOT_ORI
00002F68  0C38 0003 177B          2700  MYBE_ORI    CMPI.B  #%011, SECOND_3
00002F6E  6D00 0042               2701              BLT     ORI_CMPI            
00002F72                          2702  
00002F72  0C38 0006 177A          2703  NOT_ORI     CMPI.B  #%110, FIRST_3
00002F78  6700 0006               2704              BEQ     MYBE_CMPI
00002F7C  6600 000C               2705              BNE     NOT_CMPI
00002F80  0C38 0003 177B          2706  MYBE_CMPI   CMPI.B  #%011, SECOND_3
00002F86  6D00 002A               2707              BLT     ORI_CMPI
00002F8A                          2708              
00002F8A  0C38 0004 177A          2709  NOT_CMPI    CMPI.B  #%100, FIRST_3
00002F90  6700 0006               2710              BEQ     MYBE_BCLR
00002F94  6600 000C               2711              BNE     NOT_BCLR
00002F98  0C38 0002 177B          2712  MYBE_BCLR   CMPI.B  #%010, SECOND_3
00002F9E  6700 0080               2713              BEQ     BCLR
00002FA2                          2714  
00002FA2  0C38 0006 177B          2715  NOT_BCLR    CMPI.B  #%110, SECOND_3
00002FA8  6700 00E0               2716              BEQ     DYNMC_BCLR
00002FAC                          2717              
00002FAC  4EF9 0000334E           2718              JMP     INVALID
00002FB2                          2719              
00002FB2  367C 2FD4               2720  ORI_CMPI    MOVEA.W #BACK, A3
00002FB6  0C38 0000 177B          2721              CMPI.B  #%000, SECOND_3
00002FBC  6700 0220               2722              BEQ     SIZE_B
00002FC0  0C38 0001 177B          2723              CMPI.B  #%001, SECOND_3
00002FC6  6700 021E               2724              BEQ     SIZE_W
00002FCA  0C38 0002 177B          2725              CMPI.B  #%010, SECOND_3
00002FD0  6700 021C               2726              BEQ     SIZE_L
00002FD4                          2727  
00002FD4  163C 0007               2728  BACK        MOVE.B  #%111, D3
00002FD8  143C 0004               2729              MOVE.B  #%100, D2
00002FDC                          2730              
00002FDC  4EB9 0000313A           2731              JSR     LOAD_EA
00002FE2  4EB9 0000329E           2732              JSR     LOAD_COMMA_SPACE
00002FE8                          2733              
00002FE8  367C 300A               2734              MOVEA.W #BACK2, A3   
00002FEC  0C38 0000 177D          2735              CMPI.B  #%000, FOURTH_3
00002FF2  6700 01F2               2736              BEQ     SIZE_W
00002FF6  0C38 0001 177D          2737              CMPI.B  #%001, FOURTH_3
00002FFC  6700 01F0               2738              BEQ     SIZE_L
00003000  0C38 0004 177D          2739              CMPI.B  #%100, FOURTH_3 
00003006  6700 0346               2740              BEQ     INVALID 
0000300A                          2741  
0000300A  1638 177C               2742  BACK2       MOVE.B  THIRD_3, D3
0000300E  1438 177D               2743              MOVE.B  FOURTH_3, D2
00003012                          2744          
00003012  4EB9 0000313A           2745              JSR     LOAD_EA
00003018  4EB9 0000329C           2746              JSR     LOAD_NEW_LINE
0000301E  4E75                    2747              RTS
00003020                          2748  
00003020  4285                    2749  BCLR        CLR.L   D5
00003022  4284                    2750              CLR.L   D4
00003024  247C 00000000           2751              MOVEA.L #0, A2
0000302A                          2752  
0000302A  3A0E                    2753              MOVE.W  A6, D5
0000302C  9A4D                    2754              SUB.W   A5, D5
0000302E  0C45 0002               2755              CMPI.W  #$2, D5
00003032  6D00 031A               2756              BLT     INVALID
00003036                          2757  
00003036  381D                    2758              MOVE.W  (A5)+, D4
00003038  4284                    2759              CLR.L   D4
0000303A  381D                    2760              MOVE.W  (A5)+, D4
0000303C  0244 00FF               2761              ANDI.W  #$00FF, D4
00003040  247C 0000304C           2762              MOVEA.L #BACK4, A2
00003046  4EF9 00003268           2763              JMP     LOAD_IMMDTE
0000304C                          2764              
0000304C  4EB9 0000329E           2765  BACK4       JSR     LOAD_COMMA_SPACE
00003052                          2766              
00003052  367C 3074               2767              MOVEA.W #BACK3, A3
00003056  0C38 0000 177D          2768              CMPI.B  #%000, FOURTH_3
0000305C  6700 0188               2769              BEQ     SIZE_W
00003060  0C38 0001 177D          2770              CMPI.B  #%001, FOURTH_3
00003066  6700 0186               2771              BEQ     SIZE_L
0000306A  0C38 0004 177D          2772              CMPI.B  #%100, FOURTH_3 
00003070  6700 02DC               2773              BEQ     INVALID 
00003074                          2774  
00003074  1638 177C               2775  BACK3       MOVE.B  THIRD_3, D3
00003078  1438 177D               2776              MOVE.B  FOURTH_3, D2
0000307C                          2777  
0000307C  4EB9 0000313A           2778              JSR     LOAD_EA
00003082  4EB9 0000329C           2779              JSR     LOAD_NEW_LINE
00003088                          2780  
00003088  4E75                    2781              RTS
0000308A                          2782  
0000308A  163C 0000               2783  DYNMC_BCLR  MOVE.B  #%000, D3
0000308E  1438 177A               2784              MOVE.B  FIRST_3, D2
00003092                          2785              
00003092  4EB9 0000313A           2786              JSR     LOAD_EA
00003098  4EB9 0000329E           2787              JSR     LOAD_COMMA_SPACE
0000309E                          2788  
0000309E  367C 30C0               2789              MOVEA.W #BACK5, A3
000030A2  0C38 0000 177D          2790              CMPI.B  #%000, FOURTH_3
000030A8  6700 013C               2791              BEQ     SIZE_W
000030AC  0C38 0001 177D          2792              CMPI.B  #%001, FOURTH_3
000030B2  6700 013A               2793              BEQ     SIZE_L
000030B6  0C38 0004 177D          2794              CMPI.B  #%100, FOURTH_3 
000030BC  6700 0290               2795              BEQ     INVALID 
000030C0                          2796              
000030C0  1638 177C               2797  BACK5       MOVE.B  THIRD_3, D3
000030C4  1438 177D               2798              MOVE.B  FOURTH_3, D2
000030C8                          2799              
000030C8  4EB9 0000313A           2800              JSR     LOAD_EA
000030CE  4EB9 0000329C           2801              JSR     LOAD_NEW_LINE
000030D4                          2802              
000030D4  4E75                    2803              RTS
000030D6                          2804  
000030D6                          2805  LOAD_00XX:
000030D6  4283                    2806          CLR.L   D3
000030D8  4282                    2807          CLR.L   D2
000030DA  267C 00000000           2808          MOVEA.L #0, A3
000030E0                          2809          
000030E0  367C 30F8               2810          MOVEA.W #GOO, A3
000030E4  0C38 0003 1779          2811          CMPI.B  #%0011, MNEMONIC
000030EA  6700 00FA               2812          BEQ     SIZE_W
000030EE  0C38 0002 1779          2813          CMPI.B  #%0010, MNEMONIC
000030F4  6700 00F8               2814          BEQ     SIZE_L
000030F8                          2815  
000030F8  1638 177C               2816  GOO     MOVE.B  THIRD_3, D3
000030FC  1438 177D               2817          MOVE.B  FOURTH_3, D2
00003100                          2818      
00003100  4EB9 0000313A           2819          JSR     LOAD_EA
00003106  4EB9 0000329E           2820          JSR     LOAD_COMMA_SPACE
0000310C                          2821      
0000310C  367C 3124               2822          MOVEA.W #GOO2, A3
00003110  0C38 0000 177A          2823          CMPI.B  #%000, FIRST_3
00003116  6700 00CE               2824          BEQ     SIZE_W
0000311A  0C38 0001 177A          2825          CMPI.B  #%001, FIRST_3
00003120  6700 00CC               2826          BEQ     SIZE_L
00003124                          2827      
00003124  1638 177B               2828  GOO2    MOVE.B  SECOND_3, D3
00003128  1438 177A               2829          MOVE.B  FIRST_3, D2
0000312C                          2830              
0000312C  4EB9 0000313A           2831          JSR     LOAD_EA
00003132  4EB9 0000329C           2832          JSR     LOAD_NEW_LINE
00003138                          2833      
00003138  4E75                    2834          RTS
0000313A                          2835  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000313A                          2836  
0000313A                          2837  
0000313A                          2838  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000313A                          2839  
0000313A                          2840  LOAD_EA:
0000313A  347C 314A               2841          MOVEA.W #SAVED, A2 * remember to come back!
0000313E                          2842  
0000313E  0C43 0007               2843          CMPI    #%111, D3
00003142  6D00 0008               2844          BLT     LOAD_LT_111
00003146  6C00 0032               2845          BGE     LOAD_GE_111
0000314A                          2846      
0000314A  4E75                    2847  SAVED   RTS
0000314C                          2848  
0000314C                          2849  LOAD_LT_111:
0000314C  0C43 0000               2850      CMPI    #%000, D3 * e.g. D3
00003150  6700 00A4               2851      BEQ     LOAD_DATA_REGISTER
00003154  0C43 0001               2852      CMPI    #%001, D3 * e.g. A3
00003158  6700 00AE               2853      BEQ     LOAD_ADDR_REGISTER
0000315C  0C43 0002               2854      CMPI    #%010, D3 * e.g. (A3)
00003160  6700 00B8               2855      BEQ     LOAD_ADDRESS
00003164  0C43 0003               2856      CMPI    #%011, D3 * e.g. (A3)+
00003168  6700 00C2               2857      BEQ     LOAD_ADDRESS_W_POST_INC
0000316C  0C43 0004               2858      CMPI    #%100, D3 * e.g. -(A3)
00003170  6700 00C6               2859      BEQ     LOAD_ADDRESS_W_PRE_DEC
00003174                          2860      
00003174  4EF9 0000334E           2861      JMP     INVALID
0000317A                          2862      
0000317A                          2863  LOAD_GE_111:
0000317A  4285                    2864              CLR.L   D5
0000317C  4284                    2865              CLR.L   D4
0000317E                          2866  
0000317E  3A0E                    2867              MOVE.W  A6, D5
00003180  9A4D                    2868              SUB.W   A5, D5
00003182  BA78 28FE               2869              CMP.W   TRAILING_SIZE, D5
00003186  6D00 01C6               2870              BLT     INVALID
0000318A                          2871  
0000318A  0C78 0001 28FE          2872              CMPI.W  #$1, TRAILING_SIZE
00003190  6700 0016               2873              BEQ     CHUMP_BYTE
00003194  0C78 0002 28FE          2874              CMPI.W  #$2, TRAILING_SIZE
0000319A  6700 0014               2875              BEQ     CHUMP_WORD
0000319E  0C78 0004 28FE          2876              CMPI.W  #$4, TRAILING_SIZE
000031A4  6700 0012               2877              BEQ     CHUMP_LONG
000031A8                          2878  
000031A8  381D                    2879  CHUMP_BYTE  MOVE.W  (A5)+, D4 * Minimum 4 hex (e.g. MOVE.B #1, $2 = XXXX 0001 0002)
000031AA  4EF9 000031C0           2880              JMP     GO
000031B0                          2881  
000031B0  381D                    2882  CHUMP_WORD  MOVE.W  (A5)+, D4
000031B2  4EF9 000031C0           2883              JMP     GO
000031B8                          2884              
000031B8  281D                    2885  CHUMP_LONG  MOVE.L  (A5)+, D4
000031BA  4EF9 000031C0           2886              JMP     GO
000031C0                          2887  
000031C0  0C42 0000               2888  GO          CMPI    #%000, D2
000031C4  6700 007E               2889              BEQ     LOAD_ABS_SHORT
000031C8  0C42 0001               2890              CMPI    #%001, D2
000031CC  6700 0088               2891              BEQ     LOAD_ABS_LONG
000031D0  0C42 0004               2892              CMPI    #%100, D2
000031D4  6700 0092               2893              BEQ     LOAD_IMMDTE
000031D8                          2894      
000031D8  4EF9 0000334E           2895              JMP     INVALID
000031DE                          2896  TRAILING_HELPER:            
000031DE  31FC 0002 28FE          2897  SIZE_B  MOVE.W  #$2, TRAILING_SIZE
000031E4  4ED3                    2898          JMP     (A3)
000031E6                          2899  
000031E6  31FC 0002 28FE          2900  SIZE_W  MOVE.W  #$2, TRAILING_SIZE
000031EC  4ED3                    2901          JMP     (A3)
000031EE                          2902          
000031EE  31FC 0004 28FE          2903  SIZE_L  MOVE.W  #$4, TRAILING_SIZE
000031F4  4ED3                    2904          JMP     (A3)
000031F6                          2905  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000031F6                          2906  
000031F6                          2907  
000031F6                          2908  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000031F6                          2909  
000031F6                          2910  LOAD_DATA_REGISTER:
000031F6  4280                    2911      CLR.L   D0
000031F8                          2912      
000031F8  4EB9 000032B6           2913      JSR     LOAD_D
000031FE  1002                    2914      MOVE.B  D2, D0
00003200  4EB9 0000332A           2915      JSR     LOAD_NUM
00003206  4ED2                    2916      JMP     (A2)
00003208                          2917  
00003208                          2918  LOAD_ADDR_REGISTER:
00003208  4280                    2919      CLR.L   D0
0000320A                          2920  
0000320A  4EB9 000032C4           2921      JSR     LOAD_A
00003210  1002                    2922      MOVE.B  D2, D0
00003212  4EB9 0000332A           2923      JSR     LOAD_NUM
00003218  4ED2                    2924      JMP     (A2)
0000321A                          2925  
0000321A                          2926  LOAD_ADDRESS:
0000321A  4EB9 000032D2           2927      JSR     LOAD_PTHSIS_OPEN
00003220  4EB8 3208               2928      JSR     LOAD_ADDR_REGISTER
00003224  4EB9 000032E0           2929      JSR     LOAD_PTHSIS_CLSD
0000322A  4ED2                    2930      JMP     (A2)
0000322C                          2931  
0000322C                          2932  LOAD_ADDRESS_W_POST_INC:
0000322C  4EB8 321A               2933      JSR     LOAD_ADDRESS
00003230  4EB9 0000330A           2934      JSR     LOAD_PLUS_SIGN
00003236  4ED2                    2935      JMP     (A2)
00003238                          2936  
00003238                          2937  LOAD_ADDRESS_W_PRE_DEC:
00003238  4EB9 00003318           2938      JSR     LOAD_MINUS_SIGN
0000323E  4EB8 321A               2939      JSR     LOAD_ADDRESS
00003242  4ED2                    2940      JMP     (A2)
00003244                          2941  
00003244                          2942  LOAD_ABS_SHORT:
00003244  4280                    2943      CLR.L   D0
00003246                          2944  
00003246  4EB9 000032EE           2945      JSR     LOAD_HEX_SIGN
0000324C  3004                    2946      MOVE.W  D4, D0
0000324E  4EB9 00003272           2947      JSR     LOAD_BYTES
00003254  4ED2                    2948      JMP     (A2)
00003256                          2949  
00003256                          2950  LOAD_ABS_LONG:
00003256  4280                    2951      CLR.L   D0
00003258                          2952  
00003258  4EB9 000032EE           2953      JSR     LOAD_HEX_SIGN
0000325E  2004                    2954      MOVE.L  D4, D0
00003260  4EB9 00003272           2955      JSR     LOAD_BYTES
00003266  4ED2                    2956      JMP     (A2)
00003268                          2957  
00003268                          2958  LOAD_IMMDTE:
00003268  4EB9 000032FC           2959      JSR     LOAD_IMMDTE_VALU
0000326E  4EF8 3256               2960      JMP     LOAD_ABS_LONG
00003272                          2961  
00003272                          2962  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003272                          2963  
00003272                          2964  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003272                          2965  
00003272                          2966  LOAD_BYTES:
00003272  4285                    2967          CLR.L   D5
00003274  4281                    2968          CLR.L   D1
00003276                          2969  
00003276  2200                    2970          MOVE.L  D0, D1
00003278  1A3C 0008               2971          MOVE.B  #8, D5
0000327C  0C45 0000               2972  LOOP    CMPI    #0, D5
00003280  6E00 0004               2973          BGT     ROTATE
00003284  4E75                    2974          RTS
00003286                          2975      
00003286  E999                    2976  ROTATE  ROL.L   #$04, D1
00003288  1001                    2977          MOVE.B  D1, D0
0000328A  0280 0000000F           2978          ANDI.L  #$0000000F, D0
00003290  4EB9 0000332A           2979          JSR     LOAD_NUM
00003296  5345                    2980          SUBI    #1, D5
00003298  4EF8 327C               2981          JMP     LOOP        
0000329C                          2982  
0000329C                          2983  LOAD_NEW_LINE:          ;Depreciated method due to IO
0000329C  4E75                    2984      RTS
0000329E                          2985  
0000329E                          2986  LOAD_COMMA_SPACE:
0000329E  4280                    2987      CLR.L   D0
000032A0                          2988  
000032A0  1038 28FB               2989      MOVE.B  COMMA, D0
000032A4  4EB9 00003326           2990      JSR     LOAD_THIS_SHIT
000032AA  1038 28FC               2991      MOVE.B  SPACE, D0
000032AE  4EB9 00003326           2992      JSR     LOAD_THIS_SHIT
000032B4                          2993      
000032B4  4E75                    2994      RTS
000032B6                          2995  
000032B6                          2996  LOAD_D:
000032B6  4280                    2997      CLR.L   D0
000032B8                          2998  
000032B8  1038 28F4               2999      MOVE.B  DATA, D0
000032BC  4EB9 00003326           3000      JSR     LOAD_THIS_SHIT
000032C2  4E75                    3001      RTS
000032C4                          3002  
000032C4                          3003  LOAD_A:
000032C4  4280                    3004      CLR.L   D0
000032C6                          3005  
000032C6  1038 28F3               3006      MOVE.B  ADDRESS, D0
000032CA  4EB9 00003326           3007      JSR     LOAD_THIS_SHIT
000032D0  4E75                    3008      RTS
000032D2                          3009  
000032D2                          3010  LOAD_PTHSIS_OPEN:
000032D2  4280                    3011      CLR.L   D0
000032D4                          3012  
000032D4  1038 28F5               3013      MOVE.B  PTHSIS_OPEN, D0
000032D8  4EB9 00003326           3014      JSR     LOAD_THIS_SHIT
000032DE  4E75                    3015      RTS
000032E0                          3016  
000032E0                          3017  LOAD_PTHSIS_CLSD:
000032E0  4280                    3018      CLR.L   D0
000032E2                          3019  
000032E2  1038 28F6               3020      MOVE.B  PTHSIS_CLSD, D0
000032E6  4EB9 00003326           3021      JSR     LOAD_THIS_SHIT
000032EC  4E75                    3022      RTS
000032EE                          3023  
000032EE                          3024  LOAD_HEX_SIGN:
000032EE  4280                    3025      CLR.L   D0
000032F0                          3026  
000032F0  1038 28F7               3027      MOVE.B  HEX_SIGN, D0
000032F4  4EB9 00003326           3028      JSR     LOAD_THIS_SHIT
000032FA  4E75                    3029      RTS
000032FC                          3030  
000032FC                          3031  LOAD_IMMDTE_VALU:
000032FC  4280                    3032      CLR.L   D0
000032FE                          3033  
000032FE  1038 28F8               3034      MOVE.B  IMMDTE_VALU, D0
00003302  4EB9 00003326           3035      JSR     LOAD_THIS_SHIT
00003308  4E75                    3036      RTS
0000330A                          3037  
0000330A                          3038  LOAD_PLUS_SIGN:
0000330A  4280                    3039      CLR.L   D0
0000330C                          3040  
0000330C  1038 28F9               3041      MOVE.B  PLUS_SIGN, D0
00003310  4EB9 00003326           3042      JSR     LOAD_THIS_SHIT
00003316  4E75                    3043      RTS
00003318                          3044  
00003318                          3045  LOAD_MINUS_SIGN:
00003318  4280                    3046      CLR.L   D0
0000331A                          3047  
0000331A  1038 28FA               3048      MOVE.B  MINUS_SIGN, D0
0000331E  4EB9 00003326           3049      JSR     LOAD_THIS_SHIT
00003324  4E75                    3050      RTS
00003326                          3051  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003326                          3052  
00003326                          3053  
00003326                          3054  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003326                          3055  LOAD_THIS_SHIT:
00003326  18C0                    3056      MOVE.B  D0, (A4)+
00003328  4E75                    3057      RTS
0000332A                          3058  
0000332A                          3059  LOAD_NUM:
0000332A  0C00 0009               3060      CMPI.B  #$9, D0
0000332E  6E00 0006               3061      BGT     GT
00003332  6F00 000C               3062      BLE     LE
00003336                          3063      
00003336  0600 0037               3064  GT  ADDI.B  #$37, D0 * A~F
0000333A  4EF9 0000334A           3065      JMP     END
00003340  0600 0030               3066  LE  ADDI.B  #$30, D0 * 0~9
00003344  4EF9 0000334A           3067      JMP     END
0000334A                          3068  
0000334A  18C0                    3069  END MOVE.B  D0, (A4)+
0000334C  4E75                    3070      RTS
0000334E                          3071  
0000334E                          3072  INVALID:
0000334E  11FC 0000 10A2          3073              MOVE.B  #%0, IS_VALID
00003354  4EF8 290A               3074              JMP     EXT
00003358                          3075  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003358                          3076  
00003358                          3077  
00003358                          3078  
00003358                          3079  
00003358                          3080  
00003358                          3081  
00003358                          3082  
00003358                          3083  
00003358                          3084  
00003358                          3085  -------------------- end include --------------------
00003358                          3086      INCLUDE "Test.x68"
00003358                          3087  
00009000                          3088      ORG $9000
00009000                          3089      ;ADDQ.B      #8,$8000
00009000                          3090      ;AND.W       $00004900,D6   ;investigate
00009000                          3091      
00009000  727A                    3092      MOVEQ.L     #122,D1    
00009002                          3093  
00009002  D282                    3094      ADD.L   D2,D1
00009004                          3095      
00009004  D379 00008000           3096      ADD.W   D1,$8000
0000900A                          3097      
0000900A  D212                    3098      ADD.B   (A2),D1
0000900C                          3099      
0000900C  D757                    3100      ADD.W   D3,(A7)
0000900E                          3101  
0000900E  DE1D                    3102      ADD.B   (A5)+,D7
00009010                          3103  
00009010  D99B                    3104      ADD.L   D4,(A3)+
00009012                          3105  
00009012  D661                    3106      ADD.W   -(A1),D3  
00009014                          3107      
00009014  D325                    3108      ADD.B   D1,-(A5)
00009016                          3109     
00009016  DFFC 00000012           3110      ADDA.L      #18,A7
0000901C                          3111  
0000901C  DAFC 00C7               3112      ADDA.W      #199,A5
00009020                          3113  
00009020  D5C1                    3114      ADDA.L      D1,A2
00009022                          3115  
00009022  D2C2                    3116      ADDA.W      D2,A1
00009024                          3117  
00009024  D4C9                    3118      ADDA.W      A1,A2
00009026                          3119  
00009026  DDC9                    3120      ADDA.L      A1,A6
00009028                          3121  
00009028  D4D1                    3122      ADDA.W      (A1),A2
0000902A                          3123  
0000902A  DDE1                    3124      ADDA.L      -(A1),A6
0000902C                          3125  
0000902C  D4D9                    3126      ADDA.W      (A1)+,A2
0000902E                          3127  
0000902E  D8FC 8000               3128      ADDA.W      #$8000,A4
00009032                          3129  
00009032  D9FC 00008000           3130      ADDA.L      #$8000,A4
00009038                          3131  
00009038  D4C9                    3132      ADDA.W      A1,A2
0000903A                          3133  
0000903A  DDC9                    3134      ADDA.L      A1,A6       
0000903C                          3135  
0000903C  5206                    3136      ADDQ.B      #1,D6
0000903E                          3137  
0000903E  5446                    3138      ADDQ.W      #2,D6
00009040                          3139  
00009040  5886                    3140      ADDQ.L      #4,D6    
00009042                          3141  
00009042  544A                    3142      ADDQ.W      #2,A2
00009044                          3143  
00009044  588D                    3144      ADDQ.L      #4,A5    
00009046                          3145  
00009046  5213                    3146      ADDQ.B      #1,(A3)
00009048                          3147  
00009048  545B                    3148      ADDQ.W      #2,(A3)+
0000904A                          3149  
0000904A  58A3                    3150      ADDQ.L      #4,-(A3)
0000904C                          3151  
0000904C  5678 4000               3152      ADDQ.W      #3,$4000
00009050                          3153  
00009050  C240                    3154      AND.W       D0,D1
00009052                          3155  
00009052  C200                    3156      AND.B       D0,D1
00009054                          3157  
00009054  C287                    3158      AND.L       D7,D1
00009056                          3159  
00009056  C5B8 4000               3160      AND.L       D2,$00004000
0000905A                          3161  
0000905A  C779 00014000           3162      AND.W       D3,$00014000
00009060                          3163  
00009060  C339 00011000           3164      AND.B       D1,$00011000
00009066                          3165  
00009066  C4B8 4000               3166      AND.L       $00004000,D2
0000906A                          3167  
0000906A  C238 4A00               3168      AND.B       $00004A00,D1 
0000906E                          3169  
0000906E  C353                    3170      AND.W       D1,(A3)
00009070                          3171  
00009070  CE17                    3172      AND.B      (A7),D7
00009072                          3173  
00009072  C363                    3174      AND.W       D1,-(A3)
00009074                          3175  
00009074  CEA7                    3176      AND.L      -(A7),D7
00009076                          3177  
00009076  C39B                    3178      AND.L      D1,(A3)+
00009078                          3179  
00009078  CE5F                    3180      AND.W       (A7)+,D7
0000907A                          3181  
0000907A  84C1                    3182      DIVU         D1,D2
0000907C                          3183  
0000907C  8CF8 0011               3184      DIVU         $00000011,D6
00009080                          3185  
00009080  80D0                    3186      DIVU         (A0),D0
00009082                          3187  
00009082  80E0                    3188      DIVU         -(A0),D0   
00009084                          3189  
00009084  80D8                    3190      DIVU         (A0)+,D0
00009086                          3191  
00009086  82F8 1000               3192      DIVU         $0001000,D1
0000908A                          3193  
0000908A  82F9 00008000           3194      DIVU         $8000,D1
00009090                          3195  
00009090  6000 106E               3196      BRA     $A100
00009094                          3197  
00009094  6000 0F93               3198      BRA     $A029
00009098                          3199  
00009098                          3200      *Negative 8 bit displacement
00009098  6000 0EEC               3201      BRA     $9F86
0000909C                          3202  
0000909C  6000 0F56               3203      BRA     $9FF4
000090A0                          3204  
000090A0  6000 0F62               3205      BRA     $A004
000090A4                          3206  
000090A4                          3207      
000090A4                          3208      *Positive 8 bit displacement
000090A4  6000 0F83               3209      BRA     $A029
000090A8                          3210  
000090A8  6000 0FDB               3211      BRA     $A085
000090AC                          3212  
000090AC  6000 0F62               3213      BRA     $A010
000090B0                          3214  
000090B0  6000 0FDD               3215      BRA     $A08F
000090B4                          3216     
000090B4  E3F9 00FF0000           3217      LSL.W     $00FF0000
000090BA                          3218  
000090BA  E3E8 0020               3219      LSL.W     $20(a0)
000090BE                          3220  
000090BE  E3D8                    3221      LSL.W    (a0)+
000090C0                          3222  
000090C0  E3E0                    3223      LSL.W     -(a0)
000090C2                          3224  
000090C2                          3225      
000090C2  E2F9 00080000           3226      LSR.W     $00080000
000090C8                          3227  
000090C8  E2E8 0020               3228      LSR.W     $20(a0)
000090CC                          3229  
000090CC  E2D8                    3230      LSR.W    (a0)+
000090CE                          3231  
000090CE  E2E0                    3232      LSR.W     -(a0)
000090D0                          3233  
000090D0  E1F9 00230000           3234      ASL.W     $230000
000090D6                          3235  
000090D6  E1E8 0020               3236      ASL.W     $20(a0)
000090DA                          3237  
000090DA  E1D8                    3238      ASL.W    (a0)+
000090DC                          3239  
000090DC  E1E0                    3240      ASL.W     -(a0)
000090DE                          3241      
000090DE  E0F9 00AA0000           3242      ASR.W     $AA0000
000090E4                          3243  
000090E4  E0E8 0020               3244      ASR.W     $20(a0)
000090E8                          3245  
000090E8  E0D8                    3246      ASR.W    (a0)+
000090EA                          3247  
000090EA  E0E0                    3248      ASR.W     -(a0)
000090EC                          3249      
000090EC  E3F8 4000               3250      LSL.W     $4000
000090F0                          3251   
000090F0  12BC 0013               3252      MOVE.B      #19,(A1)
000090F4                          3253  
000090F4  233C 0000000C           3254      MOVE.L      #12,-(A1)
000090FA                          3255  
000090FA  32FC 07BE               3256      MOVE.W      #1982,(A1)+
000090FE                          3257  
000090FE  163C 0013               3258      MOVE.B      #19,D3
00009102                          3259  
00009102  740C                    3260      MOVE.L      #12,D2
00009104                          3261  
00009104  323C 07BE               3262      MOVE.W      #1982,D1
00009108                          3263  
00009108  323C 19AA               3264      MOVE.W      #$19AA,D1 
0000910C                          3265          
0000910C  2E7C 00000012           3266      MOVEA.L      #18,A7
00009112                          3267  
00009112  3A7C 00C7               3268      MOVEA.W      #199,A5
00009116                          3269  
00009116  2441                    3270      MOVEA.L      D1,A2
00009118                          3271  
00009118  3242                    3272      MOVEA.W      D2,A1
0000911A                          3273  
0000911A  3449                    3274      MOVEA.W      A1,A2
0000911C                          3275  
0000911C  2C49                    3276      MOVEA.L      A1,A6
0000911E                          3277  
0000911E  3451                    3278      MOVEA.W      (A1),A2
00009120                          3279  
00009120  2C61                    3280      MOVEA.L      -(A1),A6
00009122                          3281  
00009122  3459                    3282      MOVEA.W      (A1)+,A2
00009124                          3283  
00009124  367C 0013               3284      MOVEA.W     #19,A3
00009128                          3285  
00009128  2A7C 00000798           3286      MOVEA.L     #1944,A5
0000912E                          3287  
0000912E  3449                    3288      MOVEA.W      A1,A2
00009130                          3289  
00009130  2C49                    3290      MOVEA.L      A1,A6
00009132                          3291  
00009132  48A1 007F               3292      MOVEM.W   A1-A7,-(A1)
00009136                          3293  
00009136  48E1 7F00               3294      MOVEM.L   D1-D7,-(A1)
0000913A                          3295  
0000913A  48A1 0140               3296      MOVEM.W   A1/D7,-(A1)
0000913E                          3297  
0000913E  48E1 0140               3298      MOVEM.L   A1/D7,-(A1)
00009142                          3299  
00009142  4891 FE00               3300      MOVEM.W   A1-A7,(A1)
00009146                          3301   
00009146  727A                    3302      MOVEQ.L     #122,D1
00009148                          3303  
00009148  740B                    3304      MOVEQ.L     #11,D2
0000914A                          3305  
0000914A  766F                    3306      MOVEQ.L     #111,D3
0000914C                          3307  
0000914C  7E65                    3308      MOVEQ.L     #101,D7
0000914E                          3309  
0000914E  740C                    3310      MOVEQ.L     #12,D2
00009150                          3311  
00009150  C5C1                    3312      MULS         D1,D2
00009152                          3313  
00009152  CDF8 0011               3314      MULS         $00000011,D6
00009156                          3315  
00009156  C1D1                    3316      MULS         (A1),D0
00009158                          3317  
00009158  C5E5                    3318      MULS         -(A5),D2   
0000915A                          3319  
0000915A  C3D8                    3320      MULS         (A0)+,D1
0000915C                          3321  
0000915C  C9F8 1000               3322      MULS         $0001000,D4
00009160                          3323  
00009160  C7F9 00008000           3324      MULS         $8000,D3 
00009166                          3325  
00009166  4600                    3326      NOT.B   D0
00009168                          3327  
00009168  4641                    3328      NOT.W   D1
0000916A                          3329  
0000916A  4682                    3330      NOT.L   D2
0000916C                          3331  
0000916C  4610                    3332      NOT.B   (A0)
0000916E                          3333  
0000916E  4660                    3334      NOT.W   -(A0)
00009170                          3335  
00009170  4698                    3336      NOT.L   (A0)+ 
00009172                          3337  
00009172  4679 00008000           3338      NOT     $8000
00009178                          3339  
00009178  4678 4000               3340      NOT.W   $4000
0000917C                          3341       
0000917C  8240                    3342      OR.W       D0,D1
0000917E                          3343  
0000917E  8200                    3344      OR.B       D0,D1
00009180                          3345  
00009180  8287                    3346      OR.L       D7,D1
00009182                          3347  
00009182  85B8 4000               3348      OR.L       D2,$4000
00009186                          3349  
00009186  8779 00014000           3350      OR.W       D3,$00014000
0000918C                          3351  
0000918C  8339 00011000           3352      OR.B       D1,$00011000
00009192                          3353  
00009192  84B8 5000               3354      OR.L       $5000,D2
00009196                          3355  
00009196  8C78 6900               3356      OR.W       $6900,D6
0000919A                          3357  
0000919A  8238 4A00               3358      OR.B       $4A00,D1 
0000919E                          3359  
0000919E  8353                    3360      OR.W       D1,(A3)
000091A0                          3361  
000091A0  8E17                    3362      OR.B      (A7),D7
000091A2                          3363  
000091A2  8363                    3364      OR.W       D1,-(A3)
000091A4                          3365  
000091A4  8EA7                    3366      OR.L      -(A7),D7
000091A6                          3367  
000091A6  835B                    3368      OR.W       D1,(A3)+
000091A8                          3369  
000091A8  8E9F                    3370      OR.L      (A7)+,D7 
000091AA                          3371          
000091AA  E50B                    3372      LSL.B   #2,D3
000091AC                          3373  
000091AC  E14A                    3374      LSL.W   #8,D2
000091AE                          3375  
000091AE  EF89                    3376      LSL.L   #7,D1
000091B0                          3377  
000091B0  E42B                    3378      LSR.B   D2,D3
000091B2                          3379  
000091B2  E26A                    3380      LSR.W   D1,D2
000091B4                          3381  
000091B4  EEA9                    3382      LSR.L   D7,D1
000091B6                          3383  
000091B6  E503                    3384      ASL.B   #2,D3
000091B8                          3385  
000091B8  E142                    3386      ASL.W   #8,D2
000091BA                          3387  
000091BA  EF81                    3388      ASL.L   #7,D1
000091BC                          3389  
000091BC  E423                    3390      ASR.B   D2,D3
000091BE                          3391  
000091BE  E262                    3392      ASR.W   D1,D2
000091C0                          3393  
000091C0  EFA1                    3394      ASL.L   D7,D1
000091C2                          3395  
000091C2  9282                    3396      SUB.L   D2,D1
000091C4                          3397  
000091C4  9379 00008000           3398      SUB.W   D1,$8000
000091CA                          3399  
000091CA  9212                    3400      SUB.B   (A2),D1
000091CC                          3401  
000091CC  9757                    3402      SUB.W   D3,(A7)
000091CE                          3403  
000091CE  9E1D                    3404      SUB.B   (A5)+,D7
000091D0                          3405  
000091D0  999B                    3406      SUB.L   D4,(A3)+
000091D2                          3407  
000091D2  9661                    3408      SUB.W   -(A1),D3
000091D4                          3409  
000091D4  9325                    3410      SUB.B   D1,-(A5)
000091D6                          3411   
000091D6  E3D9                    3412      LSL.W (A1)+         ;finished testing
000091D8                          3413      
000091D8  C3D0                    3414      MULS.W (A0),D1      ;finished testing
000091DA                          3415      
000091DA  9399                    3416      SUB.L D1,(A1)+      ;finished testing
000091DC                          3417      
000091DC  93C1                    3418      SUB.L D1,A1         ;finished testing
000091DE                          3419      
000091DE  9391                    3420      SUB.L D1,(A1)       ;finished testing
000091E0                          3421      
000091E0  93A1                    3422      SUB.L D1,-(A1)      ;finished  testing
000091E2                          3423      
000091E2  92C1                    3424      SUB.W D1,A1         ;finished  testing
000091E4                          3425      
000091E4  D5C1                    3426      ADDA.L D1,A2        ;finishtes testing
000091E6                          3427  
000091E6  E289                    3428      LSR.L #$1,D1        ; CHECK THIS Prints #$1,A1 instead of #$,D1    
000091E8                          3429          
000091E8  5301                    3430      SUBQ.B #$1,D1       ; CHECK THIS Prints #$2,D1 instead of #$1,D1
000091EA                          3431       
000091EA  E709                    3432      LSL.B #3,D1         ; CHECK THIS Prints #3,A1 instead of #3,D1
000091EC                          3433      
000091EC  5301                    3434      SUBQ.B #$1,D1       ; CHECK THIS Prints #$2,D1 instead of #$1,D1
000091EE                          3435  
000091EE  0881 0003               3436      BCLR.L #$3,D1       ; CHECK THIS Prints #$57,D1 instead of #$3,D1
000091F2                          3437      
000091F2                          3438      ;LSR.W #$1,D1        ; This doesn't show up if it's placed right after BCLR    
000091F2                          3439      ;LSL.W #$1,D1        ; This doesn't show up if it's placed right after BCLR    
000091F2                          3440      
000091F2                          3441      ;ASL.B  D3,D5     
000091F2                          3442      ;ASR.W  D3,D5
000091F2  0041 2501               3443      ORI.W #$2501, D1
000091F6                          3444       
000091F6  E7BD                    3445      ROL.L  D3,D5     
000091F8                          3446     
000091F8  E6BD                    3447      ROR.L  D3,D5     
000091FA  8497                    3448      OR.L (SP),D2
000091FC                          3449      
000091FC  8358                    3450      OR.W D1,(A0)+
000091FE                          3451      
000091FE  4E71                    3452      NOP
00009200                          3453      
00009200  4E75                    3454      RTS
00009202                          3455      
00009202  4E71                    3456      NOP
00009204                          3457      
00009204  4E75                    3458      RTS
00009206                          3459      
00009206  0041 2501               3460      ORI.W #$2501, D1
0000920A                          3461      
0000920A  5300                    3462      SUBQ.B  #1,D0
0000920C                          3463      
0000920C  5541                    3464      SUBQ.W  #$2, D1
0000920E                          3465      
0000920E  5982                    3466      SUBQ.L  #4,D2
00009210                          3467      
00009210  41D0                    3468      LEA     (A0),A0
00009212                          3469      
00009212  41D1                    3470      LEA     (A1),A0
00009214                          3471      
00009214  41F8 0100               3472      LEA     $0100,A0
00009218                          3473      
00009218  41F9 00009300           3474      LEA     $9300,A0
0000921E                          3475      
0000921E  41D5                    3476      LEA     (A5),A0
00009220                          3477  
00009220  41D7                    3478      LEA     (A7),A0
00009222                          3479  
00009222  4FD0                    3480      LEA     (A0),A7
00009224                          3481  
00009224  4FD5                    3482      LEA     (A5),A7
00009226                          3483  
00009226  4FD7                    3484      LEA     (A7),A7
00009228                          3485  
00009228  4200                    3486      CLR.B     D0
0000922A                          3487  
0000922A  4207                    3488      CLR.B     D7
0000922C                          3489  
0000922C  4240                    3490      CLR.W     D0
0000922E                          3491  
0000922E  4247                    3492      CLR.W     D7
00009230                          3493  
00009230  4280                    3494      CLR.L     D0
00009232                          3495  
00009232  4287                    3496      CLR.L     D7
00009234                          3497  
00009234  4210                    3498      CLR.B     (A0)
00009236                          3499  
00009236  4217                    3500      CLR.B     (A7)
00009238                          3501  
00009238  4250                    3502      CLR.W     (A0)
0000923A                          3503  
0000923A  4257                    3504      CLR.W     (A7)
0000923C                          3505  
0000923C  4290                    3506      CLR.L     (A0)
0000923E                          3507  
0000923E  4297                    3508      CLR.L     (A7)
00009240                          3509  
00009240  4218                    3510      CLR.B     (A0)+
00009242                          3511  
00009242  421F                    3512      CLR.B     (A7)+
00009244                          3513  
00009244  4258                    3514      CLR.W     (A0)+
00009246                          3515  
00009246  425F                    3516      CLR.W     (A7)+
00009248                          3517  
00009248  4298                    3518      CLR.L     (A0)+
0000924A                          3519  
0000924A  429F                    3520      CLR.L     (A7)+
0000924C                          3521  
0000924C  4220                    3522      CLR.B     -(A0)
0000924E                          3523  
0000924E  4227                    3524      CLR.B     -(A7)
00009250                          3525  
00009250  4260                    3526      CLR.W     -(A0)
00009252                          3527  
00009252  4267                    3528      CLR.W     -(A7)
00009254                          3529  
00009254  42A0                    3530      CLR.L     -(A0)
00009256                          3531  
00009256  42A7                    3532      CLR.L     -(A7)
00009258                          3533  
00009258  1200                    3534      MOVE.B    D0,D1
0000925A                          3535  
0000925A  1080                    3536      MOVE.B    D0,(A0)
0000925C                          3537  
0000925C  10C0                    3538      MOVE.B    D0,(A0)+
0000925E                          3539  
0000925E  1100                    3540      MOVE.B    D0,-(A0)
00009260                          3541  
00009260  1010                    3542      MOVE.B    (A0),D0
00009262                          3543  
00009262  1290                    3544      MOVE.B    (A0),(A1)
00009264                          3545  
00009264  12D0                    3546      MOVE.B    (A0),(A1)+
00009266                          3547  
00009266  1310                    3548      MOVE.B    (A0),-(A1)
00009268                          3549  
00009268  1018                    3550      MOVE.B    (A0)+,D0
0000926A                          3551  
0000926A  1298                    3552      MOVE.B    (A0)+,(A1)
0000926C                          3553  
0000926C  12D8                    3554      MOVE.B    (A0)+,(A1)+
0000926E                          3555  
0000926E  1318                    3556      MOVE.B    (A0)+,-(A1)
00009270                          3557  
00009270  1020                    3558      MOVE.B    -(A0),D0
00009272                          3559  
00009272  12A0                    3560      MOVE.B    -(A0),(A1)
00009274                          3561  
00009274  12E0                    3562      MOVE.B    -(A0),(A1)+
00009276                          3563  
00009276  1320                    3564      MOVE.B    -(A0),-(A1)
00009278                          3565  
00009278  3200                    3566      MOVE.W    D0,D1
0000927A                          3567  
0000927A  3080                    3568      MOVE.W    D0,(A0)
0000927C                          3569  
0000927C  30C0                    3570      MOVE.W    D0,(A0)+
0000927E                          3571  
0000927E  3100                    3572      MOVE.W    D0,-(A0)
00009280                          3573  
00009280  3008                    3574      MOVE.W    A0,D0
00009282                          3575  
00009282  3288                    3576      MOVE.W    A0,(A1)
00009284                          3577  
00009284  32C8                    3578      MOVE.W    A0,(A1)+
00009286                          3579  
00009286  3308                    3580      MOVE.W    A0,-(A1)
00009288                          3581  
00009288  3010                    3582      MOVE.W    (A0),D0
0000928A                          3583  
0000928A  3290                    3584      MOVE.W    (A0),(A1)
0000928C                          3585  
0000928C  32D0                    3586      MOVE.W    (A0),(A1)+
0000928E                          3587  
0000928E  3310                    3588      MOVE.W    (A0),-(A1)
00009290                          3589  
00009290  3018                    3590      MOVE.W    (A0)+,D0
00009292                          3591  
00009292  3298                    3592      MOVE.W    (A0)+,(A1)
00009294                          3593  
00009294  32D8                    3594      MOVE.W    (A0)+,(A1)+
00009296                          3595  
00009296  3318                    3596      MOVE.W    (A0)+,-(A1)
00009298                          3597  
00009298  3020                    3598      MOVE.W    -(A0),D0
0000929A                          3599  
0000929A  32A0                    3600      MOVE.W    -(A0),(A1)
0000929C                          3601  
0000929C  32E0                    3602      MOVE.W    -(A0),(A1)+
0000929E                          3603  
0000929E  3320                    3604      MOVE.W    -(A0),-(A1)
000092A0                          3605  
000092A0  2200                    3606      MOVE.L    D0,D1
000092A2                          3607  
000092A2  2080                    3608      MOVE.L    D0,(A0)
000092A4                          3609  
000092A4  20C0                    3610      MOVE.L    D0,(A0)+
000092A6                          3611  
000092A6  2100                    3612      MOVE.L    D0,-(A0)
000092A8                          3613  
000092A8  2008                    3614      MOVE.L    A0,D0
000092AA                          3615  
000092AA  2288                    3616      MOVE.L    A0,(A1)
000092AC                          3617  
000092AC  22C8                    3618      MOVE.L    A0,(A1)+
000092AE                          3619  
000092AE  2308                    3620      MOVE.L    A0,-(A1)
000092B0                          3621  
000092B0  2010                    3622      MOVE.L    (A0),D0
000092B2                          3623  
000092B2  2290                    3624      MOVE.L    (A0),(A1)
000092B4                          3625  
000092B4  22D0                    3626      MOVE.L    (A0),(A1)+
000092B6                          3627  
000092B6  2310                    3628      MOVE.L    (A0),-(A1)
000092B8                          3629  
000092B8  2018                    3630      MOVE.L    (A0)+,D0
000092BA                          3631  
000092BA  2298                    3632      MOVE.L    (A0)+,(A1)
000092BC                          3633  
000092BC  22D8                    3634      MOVE.L    (A0)+,(A1)+
000092BE                          3635  
000092BE  2318                    3636      MOVE.L    (A0)+,-(A1)
000092C0                          3637  
000092C0  2020                    3638      MOVE.L    -(A0),D0
000092C2                          3639  
000092C2  22A0                    3640      MOVE.L    -(A0),(A1)
000092C4                          3641  
000092C4  22E0                    3642      MOVE.L    -(A0),(A1)+
000092C6                          3643  
000092C6  2320                    3644      MOVE.L    -(A0),-(A1)
000092C8                          3645  
000092C8  3040                    3646      MOVEA.W    D0,A0
000092CA                          3647  
000092CA  3048                    3648      MOVEA.W    A0,A0
000092CC                          3649  
000092CC  3050                    3650      MOVEA.W    (A0),A0
000092CE                          3651  
000092CE  3058                    3652      MOVEA.W    (A0)+,A0
000092D0                          3653  
000092D0  3060                    3654      MOVEA.W    -(A0),A0
000092D2                          3655  
000092D2  2040                    3656      MOVEA.L    D0,A0
000092D4                          3657  
000092D4  2048                    3658      MOVEA.L    A0,A0
000092D6                          3659  
000092D6  2050                    3660      MOVEA.L    (A0),A0
000092D8                          3661  
000092D8  2058                    3662      MOVEA.L    (A0)+,A0
000092DA                          3663  
000092DA  2060                    3664      MOVEA.L    -(A0),A0  
000092DC                          3665  
000092DC  D401                    3666      ADD.B     D1,D2
000092DE                          3667  
000092DE  D311                    3668      ADD.B     D1,(A1)
000092E0                          3669  
000092E0  D319                    3670      ADD.B     D1,(A1)+
000092E2                          3671  
000092E2  D321                    3672      ADD.B     D1,-(A1)
000092E4                          3673  
000092E4  D211                    3674      ADD.B     (A1),D1
000092E6                          3675  
000092E6  D219                    3676      ADD.B     (A1)+,D1
000092E8                          3677  
000092E8  D221                    3678      ADD.B     -(A1),D1
000092EA                          3679  
000092EA  D441                    3680      ADD.W     D1,D2
000092EC                          3681  
000092EC  D351                    3682      ADD.W     D1,(A1)
000092EE                          3683  
000092EE  D359                    3684      ADD.W     D1,(A1)+
000092F0                          3685  
000092F0  D361                    3686      ADD.W     D1,-(A1)
000092F2                          3687  
000092F2  D251                    3688      ADD.W     (A1),D1
000092F4                          3689  
000092F4  D259                    3690      ADD.W     (A1)+,D1
000092F6                          3691  
000092F6  D261                    3692      ADD.W     -(A1),D1
000092F8                          3693  
000092F8  D481                    3694      ADD.L     D1,D2
000092FA                          3695  
000092FA  D391                    3696      ADD.L     D1,(A1)
000092FC                          3697  
000092FC  D399                    3698      ADD.L     D1,(A1)+
000092FE                          3699  
000092FE  D3A1                    3700      ADD.L     D1,-(A1)
00009300                          3701  
00009300  D291                    3702      ADD.L     (A1),D1
00009302                          3703  
00009302  D299                    3704      ADD.L     (A1)+,D1
00009304                          3705  
00009304  D2A1                    3706      ADD.L     -(A1),D1
00009306                          3707  
00009306  D4C1                    3708      ADDA.W        D1,A2
00009308                          3709  
00009308  D4D1                    3710      ADDA.W        (A1),A2
0000930A                          3711  
0000930A  D4D9                    3712      ADDA.W        (A1)+,A2
0000930C                          3713  
0000930C  D4E1                    3714      ADDA.W        -(A1),A2
0000930E                          3715  
0000930E  D5C1                    3716      ADDA.L        D1,A2
00009310                          3717  
00009310  D5D1                    3718      ADDA.L        (A1),A2
00009312                          3719  
00009312  D5D9                    3720      ADDA.L        (A1)+,A2
00009314                          3721  
00009314  D5E1                    3722      ADDA.L        -(A1),A2
00009316                          3723     
00009316  9401                    3724      SUB.B     D1,D2
00009318                          3725  
00009318  9311                    3726      SUB.B     D1,(A1)
0000931A                          3727  
0000931A  9319                    3728      SUB.B     D1,(A1)+
0000931C                          3729  
0000931C  9321                    3730      SUB.B     D1,-(A1)
0000931E                          3731  
0000931E  9211                    3732      SUB.B     (A1),D1
00009320                          3733  
00009320  9219                    3734      SUB.B     (A1)+,D1
00009322                          3735  
00009322  9221                    3736      SUB.B     -(A1),D1
00009324                          3737  
00009324  9441                    3738      SUB.W     D1,D2
00009326                          3739  
00009326  92C1                    3740      SUB.W     D1,A1
00009328                          3741  
00009328  9351                    3742      SUB.W     D1,(A1)
0000932A                          3743  
0000932A  9359                    3744      SUB.W     D1,(A1)+
0000932C                          3745  
0000932C  9361                    3746      SUB.W     D1,-(A1)
0000932E                          3747  
0000932E  9249                    3748      SUB.W     A1,D1
00009330                          3749  
00009330  9251                    3750      SUB.W     (A1),D1
00009332                          3751  
00009332  9259                    3752      SUB.W     (A1)+,D1
00009334                          3753  
00009334  9261                    3754      SUB.W     -(A1),D1
00009336                          3755  
00009336  9481                    3756      SUB.L     D1,D2
00009338                          3757  
00009338  93C1                    3758      SUB.L     D1,A1
0000933A                          3759  
0000933A  9391                    3760      SUB.L     D1,(A1)
0000933C                          3761  
0000933C  9399                    3762      SUB.L     D1,(A1)+
0000933E                          3763  
0000933E  93A1                    3764      SUB.L     D1,-(A1)
00009340                          3765  
00009340  9289                    3766      SUB.L     A1,D1
00009342                          3767  
00009342  9291                    3768      SUB.L     (A1),D1
00009344                          3769  
00009344  9299                    3770      SUB.L     (A1)+,D1
00009346                          3771  
00009346  92A1                    3772      SUB.L     -(A1),D1    
00009348                          3773  
00009348  C3C0                    3774      MULS.W    D0,D1
0000934A                          3775  
0000934A  C3D0                    3776      MULS.W    (A0),D1
0000934C                          3777  
0000934C  C3E0                    3778      MULS.W    -(A0),D1
0000934E                          3779  
0000934E  C3D8                    3780      MULS.W    (A0)+,D1
00009350                          3781  
00009350  83C0                    3782      DIVS.W    D0,D1
00009352                          3783  
00009352  83D0                    3784      DIVS.W    (A0),D1
00009354                          3785  
00009354  83E0                    3786      DIVS.W    -(A0),D1
00009356                          3787  
00009356  83D8                    3788      DIVS.W    (A0)+,D1
00009358                          3789  
00009358  C401                    3790      AND.B     D1,D2
0000935A                          3791  
0000935A  C311                    3792      AND.B     D1,(A1)
0000935C                          3793  
0000935C  C319                    3794      AND.B     D1,(A1)+
0000935E                          3795  
0000935E  C321                    3796      AND.B     D1,-(A1)
00009360                          3797  
00009360  C211                    3798      AND.B     (A1),D1
00009362                          3799  
00009362  C219                    3800      AND.B     (A1)+,D1
00009364                          3801  
00009364  C221                    3802      AND.B     -(A1),D1
00009366                          3803  
00009366  C441                    3804      AND.W     D1,D2
00009368                          3805  
00009368  C351                    3806      AND.W     D1,(A1)
0000936A                          3807  
0000936A  C359                    3808      AND.W     D1,(A1)+
0000936C                          3809  
0000936C  C361                    3810      AND.W     D1,-(A1)
0000936E                          3811  
0000936E  C251                    3812      AND.W     (A1),D1
00009370                          3813  
00009370  C259                    3814      AND.W     (A1)+,D1
00009372                          3815  
00009372  C261                    3816      AND.W     -(A1),D1
00009374                          3817  
00009374  C481                    3818      AND.L     D1,D2
00009376                          3819  
00009376  C391                    3820      AND.L     D1,(A1)
00009378                          3821  
00009378  C399                    3822      AND.L     D1,(A1)+
0000937A                          3823  
0000937A  C3A1                    3824      AND.L     D1,-(A1)
0000937C                          3825  
0000937C  C291                    3826      AND.L     (A1),D1
0000937E                          3827  
0000937E  C299                    3828      AND.L     (A1)+,D1
00009380                          3829  
00009380  C2A1                    3830      AND.L     -(A1),D1
00009382                          3831      
00009382  B302                    3832      EOR.B      D1,D2
00009384                          3833      
00009384  B511                    3834      EOR.B      D2,(A1)
00009386                          3835  
00009386  8401                    3836      OR.B     D1,D2
00009388                          3837  
00009388  8311                    3838      OR.B     D1,(A1)
0000938A                          3839  
0000938A  8319                    3840      OR.B     D1,(A1)+
0000938C                          3841  
0000938C  8321                    3842      OR.B     D1,-(A1)
0000938E                          3843  
0000938E  8211                    3844      OR.B     (A1),D1
00009390                          3845  
00009390  8219                    3846      OR.B     (A1)+,D1
00009392                          3847  
00009392  8221                    3848      OR.B     -(A1),D1
00009394                          3849  
00009394  8441                    3850      OR.W     D1,D2
00009396                          3851  
00009396  8351                    3852      OR.W     D1,(A1)
00009398                          3853  
00009398  8359                    3854      OR.W     D1,(A1)+
0000939A                          3855  
0000939A  8361                    3856      OR.W     D1,-(A1)
0000939C                          3857  
0000939C  8251                    3858      OR.W     (A1),D1
0000939E                          3859  
0000939E  8259                    3860      OR.W     (A1)+,D1
000093A0                          3861  
000093A0  8261                    3862      OR.W     -(A1),D1
000093A2                          3863  
000093A2  8481                    3864      OR.L     D1,D2
000093A4                          3865  
000093A4  8391                    3866      OR.L     D1,(A1)
000093A6                          3867  
000093A6  8399                    3868      OR.L     D1,(A1)+
000093A8                          3869  
000093A8  83A1                    3870      OR.L     D1,-(A1)
000093AA                          3871  
000093AA  8291                    3872      OR.L     (A1),D1
000093AC                          3873  
000093AC  8299                    3874      OR.L     (A1)+,D1
000093AE                          3875  
000093AE  82A1                    3876      OR.L     -(A1),D1
000093B0                          3877  
000093B0  E32A                    3878      LSL.B     D1,D2
000093B2                          3879  
000093B2  E36A                    3880      LSL.W     D1,D2
000093B4                          3881  
000093B4  E3D1                    3882      LSL.W     (A1)
000093B6                          3883  
000093B6  E3D9                    3884      LSL.W     (A1)+
000093B8                          3885  
000093B8  E3E1                    3886      LSL.W     -(A1)
000093BA                          3887  
000093BA  E3AA                    3888      LSL.L     D1,D2
000093BC                          3889  
000093BC  E22A                    3890      LSR.B     D1,D2
000093BE                          3891  
000093BE  E26A                    3892      LSR.W     D1,D2
000093C0                          3893  
000093C0  E2D1                    3894      LSR.W     (A1)
000093C2                          3895  
000093C2  E2D9                    3896      LSR.W     (A1)+
000093C4                          3897  
000093C4  E2E1                    3898      LSR.W     -(A1)
000093C6                          3899  
000093C6  E2AA                    3900      LSR.L     D1,D2    
000093C8                          3901  
000093C8  E222                    3902      ASR.B     D1,D2
000093CA                          3903  
000093CA  E262                    3904      ASR.W     D1,D2
000093CC                          3905  
000093CC  E0D1                    3906      ASR.W     (A1)
000093CE                          3907  
000093CE  E0D9                    3908      ASR.W     (A1)+
000093D0                          3909  
000093D0  E0E1                    3910      ASR.W     -(A1)
000093D2                          3911  
000093D2  E2A2                    3912      ASR.L     D1,D2
000093D4                          3913  
000093D4  E322                    3914      ASL.B     D1,D2
000093D6                          3915  
000093D6  E362                    3916      ASL.W     D1,D2
000093D8                          3917  
000093D8  E1D1                    3918      ASL.W     (A1)
000093DA                          3919  
000093DA  E1D9                    3920      ASL.W     (A1)+
000093DC                          3921  
000093DC  E1E1                    3922      ASL.W     -(A1)
000093DE                          3923  
000093DE  E3A2                    3924      ASL.L     D1,D2
000093E0                          3925  
000093E0  E33A                    3926      ROL.B     D1,D2
000093E2                          3927  
000093E2  E37A                    3928      ROL.W     D1,D2
000093E4                          3929  
000093E4  E7D1                    3930      ROL.W     (A1)
000093E6                          3931  
000093E6  E7D9                    3932      ROL.W     (A1)+
000093E8                          3933  
000093E8  E7E1                    3934      ROL.W     -(A1)
000093EA                          3935  
000093EA  E3BA                    3936      ROL.L     D1,D2
000093EC                          3937  
000093EC  E23A                    3938      ROR.B     D1,D2
000093EE                          3939  
000093EE  E27A                    3940      ROR.W     D1,D2
000093F0                          3941  
000093F0  E6D1                    3942      ROR.W     (A1)
000093F2                          3943  
000093F2  E6D9                    3944      ROR.W     (A1)+
000093F4                          3945  
000093F4  E6E1                    3946      ROR.W     -(A1)
000093F6                          3947  
000093F6  E2BA                    3948      ROR.L     D1,D2    
000093F8                          3949  
000093F8  B200                    3950      CMP.B    D0,D1
000093FA                          3951  
000093FA  B210                    3952      CMP.B    (A0),D1
000093FC                          3953  
000093FC  B220                    3954      CMP.B    -(A0),D1
000093FE                          3955  
000093FE  B218                    3956      CMP.B    (A0)+,D1
00009400                          3957  
00009400  B240                    3958      CMP.W    D0,D1
00009402                          3959  
00009402  B248                    3960      CMP.W    A0,D1
00009404                          3961  
00009404  B250                    3962      CMP.W    (A0),D1
00009406                          3963  
00009406  B260                    3964      CMP.W    -(A0),D1
00009408                          3965  
00009408  B258                    3966      CMP.W    (A0)+,D1
0000940A                          3967  
0000940A  B280                    3968      CMP.L    D0,D1
0000940C                          3969  
0000940C  B288                    3970      CMP.L    A0,D1
0000940E                          3971  
0000940E  B290                    3972      CMP.L    (A0),D1
00009410                          3973  
00009410  B2A0                    3974      CMP.L    -(A0),D1
00009412                          3975  
00009412  B298                    3976      CMP.L    (A0)+,D1
00009414                          3977      
00009414  6000 0002               3978      BRA       lss      
00009418                          3979  
00009418  644E                    3980  lss BCC.B     label1
0000941A                          3981  
0000941A  644C                    3982      BCC.B     label2
0000941C                          3983  
0000941C  6E4A                    3984      BGT.B     label1
0000941E                          3985  
0000941E  6E48                    3986      BGT.B     label2
00009420                          3987  
00009420  6F46                    3988      BLE.B     label1
00009422                          3989  
00009422  6F44                    3990      BLE.B     label2
00009424                          3991  
00009424  6400 0042               3992      BCC.W     label1
00009428                          3993  
00009428  6400 003E               3994      BCC.W     label2
0000942C                          3995  
0000942C  6400 003A               3996      BCC.W     label3
00009430                          3997  
00009430  6E00 0036               3998      BGT.W     label1
00009434                          3999  
00009434  6E00 0032               4000      BGT.W     label2
00009438                          4001  
00009438  6E00 002E               4002      BGT.W     label3
0000943C                          4003  
0000943C  6F00 002A               4004      BLE.W     label1
00009440                          4005  
00009440  6F00 0026               4006      BLE.W     label2
00009444                          4007  
00009444  6F00 0022               4008      BLE.W     label3
00009448                          4009  
00009448  4E90                    4010      JSR       (A0)
0000944A                          4011  
0000944A  4EB8 1234               4012      JSR       $1234
0000944E                          4013  
0000944E  4EB9 12345678           4014      JSR       $12345678
00009454                          4015  
00009454  4EB9 00009468           4016      JSR       label1
0000945A                          4017  
0000945A  4EB9 00009468           4018      JSR       label2
00009460                          4019  
00009460  4EB9 00009468           4020      JSR       label3
00009466                          4021  
00009466  4E71                    4022      NOP
00009468                          4023  
00009468                          4024  label1
00009468                          4025  label2
00009468                          4026  label3
00009468                          4027  
00009468  4E75                    4028      RTS
0000946A                          4029      
0000946A  48A1 007F               4030      MOVEM.W   A1-A7,-(A1)
0000946E                          4031  
0000946E  48E1 7F00               4032      MOVEM.L   D1-D7,-(A1)
00009472                          4033  
00009472  48A1 0140               4034      MOVEM.W   A1/D7,-(A1)
00009476                          4035  
00009476  48E1 0140               4036      MOVEM.L   A1/D7,-(A1)
0000947A                          4037  
0000947A  4891 FE00               4038      MOVEM.W   A1-A7,(A1)
0000947E                          4039  
0000947E  48D1 00FE               4040      MOVEM.L   D1-D7,(A1)
00009482                          4041  
00009482  4891 0280               4042      MOVEM.W   A1/D7,(A1)
00009486                          4043  
00009486  48D1 0280               4044      MOVEM.L   A1/D7,(A1)
0000948A                          4045  
0000948A  4C99 FE00               4046      MOVEM.W   (A1)+,A1-A7
0000948E                          4047  
0000948E  4CD9 00FE               4048      MOVEM.L   (A1)+,D1-D7
00009492                          4049  
00009492  4C99 0280               4050      MOVEM.W   (A1)+,A1/D7
00009496                          4051  
00009496  4CD9 0280               4052      MOVEM.L   (A1)+,A1/D7
0000949A                          4053  
0000949A  4C91 FE00               4054      MOVEM.W   (A1),A1-A7
0000949E                          4055  
0000949E  4CD1 00FE               4056      MOVEM.L   (A1),D1-D7
000094A2                          4057  
000094A2  4C91 0280               4058      MOVEM.W   (A1),A1/D7
000094A6                          4059  
000094A6  4CD1 0280               4060      MOVEM.L   (A1),A1/D7
000094AA                          4061      
000094AA                          4062      
000094AA                          4063  
000094AA                          4064      
000094AA                          4065   
000094AA                          4066  
000094AA                          4067  
000094AA                          4068  
000094AA                          4069  
000094AA                          4070  
000094AA                          4071  
000094AA                          4072  
000094AA                          4073  
000094AA                          4074  
000094AA                          4075  
000094AA                          4076  
000094AA                          4077  
000094AA                          4078  
000094AA                          4079  
000094AA                          4080  
000094AA                          4081  
000094AA                          4082  
000094AA                          4083  
000094AA                          4084  
000094AA                          4085  -------------------- end include --------------------
000094AA                          4086      
000094AA                          4087      
Line 4088 WARNING: Origin value is odd (Location counter set to next highest address)
000094AA                          4088     END    START        ; last line of source

No errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA                2BE4
ADDA_BACK           2C02
ADDRESS             28F3
ADDSTRTOBUFFER      1264
ARG_ADDSTRTOBUFFER_BUFFER  125A
ARG_ADDSTRTOBUFFER_BUFFERLENGTH  125E
ARG_ADDSTRTOBUFFER_STRING  1256
ARG_CLEARBUFFER_BUFFER  12B8
ARG_CLEARBUFFER_LENGTH  12BC
ARG_NUMTOHEXSTR_LENGTH  13C6
ARG_NUMTOHEXSTR_NUM  13C2
ASCIITOHEX          137A
ASCIITOHEXREGLIST   1
ASCII_VAL           16FA
ASD_1               29E6
ASD_1_BACK          2A12
ASD_2               2A3E
ASD_2_IMD           2A54
ASD_2_IMD_B         2A7A
ASD_2_REG           2A96
BACK                2FD4
BACK2               300A
BACK3               3074
BACK4               304C
BACK5               30C0
BCLR                3020
BIT_CHECK_EXG       225A
BIT_CHECK_EXT       1D6C
BIT_CHECK_MOVEP     1ADE
BIT_CHECK_SUBX      2176
BIT_SIZE_CHECK      22B2
BRA                 2B22
BRA_BYTE            2B4E
BRA_BYTE2           2B74
BRA_BYTE3           2B80
BRA_WORD            2B88
BRA_WORD_BK         2BA4
BRA_WRD_BK2         2BC2
BYTEREAD            16F9
B_BUFFER            1050
CHECK_00XX          2972
CHECK_01XX          2980
CHECK_0XXX          291E
CHECK_1XXX          292E
CHECK_OP_ABCD       2242
CHECK_OP_ADD        22DC
CHECK_OP_ADDA       22E6
CHECK_OP_ADDI       1A3E
CHECK_OP_ADDQ       1F38
CHECK_OP_ADDX       22C8
CHECK_OP_AND        2292
CHECK_OP_ANDI       1A16
CHECK_OP_ANDI_TO_CCR  19D6
CHECK_OP_ANDI_TO_SR  19E6
CHECK_OP_ASL        2494
CHECK_OP_ASL_NO_ROT  23BC
CHECK_OP_ASR        2476
CHECK_OP_ASR_NO_ROT  23A2
CHECK_OP_BCC        1FA2
CHECK_OP_BCS        2048
CHECK_OP_BEQ        1FB6
CHECK_OP_BGE        2062
CHECK_OP_BGT        1F8E
CHECK_OP_BHI        1FCA
CHECK_OP_BLS        1FDE
CHECK_OP_BLT        207C
CHECK_OP_BMI        1FF2
CHECK_OP_BNE        2006
CHECK_OP_BPL        201A
CHECK_OP_BRA        202E
CHECK_OP_BSR        1F7A
CHECK_OP_BVC        2096
CHECK_OP_CHK        1E4E
CHECK_OP_CLR        1D30
CHECK_OP_CMP        2200
CHECK_OP_CMPA       21CE
CHECK_OP_CMPI       1B2A
CHECK_OP_CMPM       21BA
CHECK_OP_DBCC       1F10
CHECK_OP_DIVS       2108
CHECK_OP_DIVU       20E0
CHECK_OP_DYNAMIC_BCHG  1AB6
CHECK_OP_DYNAMIC_BCLR  1B66
CHECK_OP_DYNAMIC_BSET  1ACA
CHECK_OP_DYNAMIC_BTST  1AA2
CHECK_OP_EOR        21E2
CHECK_OP_EORI       1A52
CHECK_OP_EORI_TO_CCR  19F6
CHECK_OP_EORI_TO_SR  1A06
CHECK_OP_EXG        2256
CHECK_OP_EXT        1D58
CHECK_OP_ILLEGAL    1CA0
CHECK_OP_JMP        1E3A
CHECK_OP_JSR        1EA8
CHECK_OP_LEA        1E8E
CHECK_OP_LINK       1DFE
CHECK_OP_LSL        2458
CHECK_OP_LSL_NO_ROT  2388
CHECK_OP_LSR        243A
CHECK_OP_LSR_NO_ROT  236E
CHECK_OP_MOVEA_L    1BBE
CHECK_OP_MOVEA_W    1C20
CHECK_OP_MOVEM      1EE0
CHECK_OP_MOVEP      1AF8
CHECK_OP_MOVEQ      20C0
CHECK_OP_MOVE_B     1B94
CHECK_OP_MOVE_FROM_SR  1CE0
CHECK_OP_MOVE_L     1BF6
CHECK_OP_MOVE_TO_CCR  1CF4
CHECK_OP_MOVE_TO_SR  1D08
CHECK_OP_MOVE_USP   1E26
CHECK_OP_MOVE_W     1C58
CHECK_OP_MULS       2278
CHECK_OP_MULU       222E
CHECK_OP_NBCD       1D86
CHECK_OP_NEG        1EC2
CHECK_OP_NEGX       1D1C
CHECK_OP_NOP        1E62
CHECK_OP_NOT        1D44
CHECK_OP_OR         2122
CHECK_OP_ORI        1B0C
CHECK_OP_ORI_TO_CCR  19B6
CHECK_OP_ORI_TO_SR  19C6
CHECK_OP_PEA        1DAE
CHECK_OP_RESET      1C90
CHECK_OP_ROL        241C
CHECK_OP_ROL_NO_ROT  2354
CHECK_OP_ROR        23FE
CHECK_OP_ROR_NO_ROT  233A
CHECK_OP_ROXL       23EA
CHECK_OP_ROXL_NO_ROT  2326
CHECK_OP_ROXR       23D6
CHECK_OP_ROXR_NO_ROT  2312
CHECK_OP_RTE        1CB0
CHECK_OP_RTR        1CD0
CHECK_OP_RTS        1E78
CHECK_OP_SBCD       20F4
CHECK_OP_SCC        1F24
CHECK_OP_STATIC_BCHG  1A7A
CHECK_OP_STATIC_BCLR  1B48
CHECK_OP_STATIC_BSET  1A8E
CHECK_OP_STATIC_BTST  1A66
CHECK_OP_STOP       1C80
CHECK_OP_SUB        2194
CHECK_OP_SUBA       2152
CHECK_OP_SUBI       1A2A
CHECK_OP_SUBQ       1F4C
CHECK_OP_SUBX       2166
CHECK_OP_SWAP       1D9A
CHECK_OP_TAS        1DC2
CHECK_OP_TRAP       1DEA
CHECK_OP_TRAPV      1CC0
CHECK_OP_TST        1DD6
CHECK_OP_UNLK       1E12
CHECK_PRINT         11C2
CHECK_SIZE_BIT_FOR_SUB  2140
CHECK_XXXX          290E
CHRDONE             1396
CHRLOOP             1382
CHUMP_BYTE          31A8
CHUMP_LONG          31B8
CHUMP_WORD          31B0
CLEARBUFFER         12C0
COMMA               28FB
COUNTDONE           1336
COUNTLOOP           1324
CR                  D
CUR_OP_CODE         10A0
C_GROUP_0           19B2
C_GROUP_1           1B90
C_GROUP_2           1BBA
C_GROUP_3           1C1C
C_GROUP_4           1C7E
C_GROUP_5           1F0C
C_GROUP_6           1F76
C_GROUP_7           20BC
C_GROUP_8           20DC
C_GROUP_9           213C
C_GROUP_A           21AE
C_GROUP_B           21B6
C_GROUP_C           222A
C_GROUP_D           22AE
C_GROUP_E           230E
C_GROUP_F           24BE
DATA                28F4
DIR_0               2C6A
DIR_1               2CBA
DIVS                2D0A
DIVS_BACK           2D2C
DONE                1252
DOWN_ONE            2B6C
DOWN_ZERO           2B64
DYNMC_BCLR          308A
END                 334A
ERRORFILE           170E
EXT                 290A
FILEID              175A
FILENAME            1702
FINDNULLLOOPDONE    1306
FIND_1_BIT_SIZE_6   18DE
FIND_1_BIT_SIZE_8   18FE
FIND_2_BIT_SIZE_7_TO_6  18BE
FIND_MOVEA_L_DIFFERENCE  1BD0
FIND_MOVEA_W_DIFF   1C32
FIRST_3             177A
FOURTH_3            177D
GO                  31C0
GOO                 30F8
GOO2                3124
GROUP0_INVALID      1B84
GROUP0_SUCCESS      1B8A
GROUP1_INVALID      1BAE
GROUP1_SUCCESS      1BB4
GROUP2_INVALID      1C10
GROUP2_SUCCESS      1C16
GROUP3_INVALID      1C72
GROUP3_SUCCESS      1C78
GROUP4_INVALID      1EFA
GROUP4_SUCCESS      1F06
GROUP5_INVALID      1F6A
GROUP5_SUCCESS      1F70
GROUP6_INVALID      20B0
GROUP6_SUCCESS      20B6
GROUP7_INVALID      20D0
GROUP7_SUCCESS      20D6
GROUP8_INVALID      2130
GROUP8_SUCCESS      2136
GROUP9_INVALID      21A2
GROUP9_SUCCESS      21A8
GROUPB_INVALID      221E
GROUPB_SUCCESS      2224
GROUPC_INVALID      22A2
GROUPC_SUCCESS      22A8
GROUPD_INVALID      2302
GROUPD_SUCCESS      2308
GROUPE_INVALID      24B2
GROUPE_SUCCESS      24B8
GROUP_0             1790
GROUP_1             17A2
GROUP_2             17B4
GROUP_3             17C6
GROUP_4             17D8
GROUP_5             17EA
GROUP_6             17FC
GROUP_7             180E
GROUP_8             1820
GROUP_9             1832
GROUP_A             1844
GROUP_B             1856
GROUP_C             1868
GROUP_D             187A
GROUP_E             188C
GROUP_F             189E
GT                  3336
G_BUFFER            1000
HEX_SIGN            28F7
IMMDTE_VALU         28F8
INVALID             334E
INVALID_ADDRESS_MESSAGE  175E
INVALID_OP          24C6
IS_VALID            10A2
JSR                 2ECE
JSR_BACK            2EE6
LABEL1              9468
LABEL2              9468
LABEL3              9468
LE                  3340
LEA                 2F04
LEA_BACK            2F26
LF                  A
LOAD_0000           2F50
LOAD_00XX           30D6
LOAD_0100           2DE0
LOAD_0101           2D56
LOAD_0110           2AC0
LOAD_1000           2C3E
LOAD_1001           2C38
LOAD_1011           2C32
LOAD_1100           2C2C
LOAD_1101           2BCA
LOAD_1110           29A0
LOAD_8              2A66
LOAD_A              32C4
LOAD_ABS_LONG       3256
LOAD_ABS_SHORT      3244
LOAD_ADDRESS        321A
LOAD_ADDRESS_W_POST_INC  322C
LOAD_ADDRESS_W_PRE_DEC  3238
LOAD_ADDR_REGISTER  3208
LOAD_BYTES          3272
LOAD_COMMA_SPACE    329E
LOAD_D              32B6
LOAD_DATA_REGISTER  31F6
LOAD_EA             313A
LOAD_FIRST3         2A70
LOAD_GE_111         317A
LOAD_HEX_SIGN       32EE
LOAD_IMMDTE         3268
LOAD_IMMDTE_VALU    32FC
LOAD_LT_111         314C
LOAD_MINUS_SIGN     3318
LOAD_NEW_LINE       329C
LOAD_NUM            332A
LOAD_PLUS_SIGN      330A
LOAD_PTHSIS_CLSD    32E0
LOAD_PTHSIS_OPEN    32D2
LOAD_THIS_SHIT      3326
LOOP                327C
LSS                 9418
MAINLOOP            1160
MAIN_CONSOLE        1430
MAIN_EA             2900
MINUS_SIGN          28FA
MNEMONIC            1779
MOVEM               2EFC
MOVEON              29FA
MOVE_AND_MOVEA_PARSE_EA  191E
MYBE_ASD_1          29C2
MYBE_ASD_2          2A28
MYBE_BCLR           2F98
MYBE_BRA            2AE0
MYBE_CMPI           2F80
MYBE_JSR            2E4E
MYBE_MOVEM          2E6E
MYBE_NEG            2DF8
MYBE_ORI            2F68
MYBE_RTS1           2E10
MYBE_RTS2           2E1E
MYBE_RTS3           2E2C
MYBE_SUBQ1          2D70
MYBE_SUBQ2          2D80
NEG                 2E8E
NEG_BACK            2EB0
NEG_WORD            2BAC
NEWLINE             16DC
NOT_BCLR            2FA2
NOT_BRA             2AEE
NOT_CMPI            2F8A
NOT_JSR             2E58
NOT_MOVEM           2E7E
NOT_NEG             2E02
NOT_ORI             2F72
NOT_RTS             2E40
NULLLOOP            12F8
NUMTOHEXSTR         13D0
OP_FOUND            27BE
OP_JSR_DONE         18AC
OP_JSR_ROUTINE      177E
OP_SIZE             1778
ORI_CMPI            2FB2
OR_BACK             2C90
OR_BACK2            2CF4
OUTFILENAME         16E2
PARSE_EA_CONSTANT_BITS  1964
PLUS_SIGN           28F9
POS_WORD            2B98
PRINT_DATA          11E0
PRINT_INSTRUCTION   11D0
PRINT_OP_ADD        26C4
PRINT_OP_ADDA       26D8
PRINT_OP_ASL        2728
PRINT_OP_ASR        2714
PRINT_OP_BCS        25F4
PRINT_OP_BGE        2608
PRINT_OP_BLT        261C
PRINT_OP_BRA        2644
PRINT_OP_BVC        2630
PRINT_OP_CMP        26A2
PRINT_OP_CMPI       24F0
PRINT_OP_DIVS       2658
PRINT_OP_DYNAMIC_BCLR  2518
PRINT_OP_EOR        268E
PRINT_OP_JSR        2572
PRINT_OP_LEA        259C
PRINT_OP_LSL        26EC
PRINT_OP_LSR        2700
PRINT_OP_MOVEA_L    253A
PRINT_OP_MOVEA_W    2556
PRINT_OP_MOVEB      252C
PRINT_OP_MOVEM_L    25D2
PRINT_OP_MOVEM_W    25C4
PRINT_OP_MOVE_L     2548
PRINT_OP_MOVE_W     2564
PRINT_OP_MULS       26B6
PRINT_OP_NEG        25B0
PRINT_OP_NOP        258E
PRINT_OP_OR         2666
PRINT_OP_ORI        24DC
PRINT_OP_ROL        273C
PRINT_OP_ROR        2750
PRINT_OP_RTS        2580
PRINT_OP_SIZE       278E
PRINT_OP_SIZE_ADDA  27A8
PRINT_OP_STATIC_BCLR  2504
PRINT_OP_SUB        267A
PRINT_OP_SUBQ       25E0
PRINT_SIZE_BYTE     2764
PRINT_SIZE_LONG     2780
PRINT_SIZE_WORD     2772
PRINT_TO_BUFFER     24CE
PTHSIS_CLSD         28F6
PTHSIS_OPEN         28F5
P_INVALID_OP        27B2
P_OP_ADD            28C2
P_OP_ADDA           28BA
P_OP_ASL            28DE
P_OP_ASR            28D7
P_OP_BCLR           27E2
P_OP_BCS            286D
P_OP_BGE            2874
P_OP_BLT            287B
P_OP_BRA            2866
P_OP_BVC            2882
P_OP_CMP            28A8
P_OP_CMPI           27DA
P_OP_DIVS           2889
P_OP_EOR            28A1
P_OP_JSR            2842
P_OP_LEA            283B
P_OP_LSL            28D0
P_OP_LSR            28C9
P_OP_MOVEA_L        27F5
P_OP_MOVEA_W        280C
P_OP_MOVEB          27EA
P_OP_MOVEM_L        282F
P_OP_MOVEM_W        2823
P_OP_MOVE_L         2801
P_OP_MOVE_W         2818
P_OP_MULS           28AF
P_OP_NEG            2857
P_OP_NOP            2849
P_OP_OR             2894
P_OP_ORI            27D3
P_OP_ROL            28EC
P_OP_ROR            28E5
P_OP_RTS            2850
P_OP_SUB            289A
P_OP_SUBQ           285E
P_SIZE_B            27C7
P_SIZE_L            27CF
P_SIZE_W            27CB
RET_ADDSTRTOBUFFER_SUCCESS  1262
RET_NUMTOHEXSTR_STR  13C7
RET_SA              13C0
ROTATE              3286
RTS                 2EC6
SAVED               314A
SECOND_3            177B
SIZE                14
SIZE_B              31DE
SIZE_L              31EE
SIZE_W              31E6
SPACE               28FC
START               10A3
STRING              1744
STRIP_ASCII         139C
STRSIZE             1758
SUB30               13BC
SUB37               13B4
SUBQ                2D90
SUBQ_BACK           2DCA
SUBQ_SAVED          2DA2
SUCCESS             172A
THIRD_3             177C
TOSAVE              C3F
TRAILING_HELPER     31DE
TRAILING_SIZE       28FE
TRAPTASK13          12E4
VALIDATEPOSITIVEADDRESS  10FA
VALIDATE_END_POS    111C
VALIDATE_EVEN       113E
VALIDATE_START_ADDRESS  10F8
_00000000           131A
_ADDSTRTOBUFFER_ADDLOOP  128E
_ADDSTRTOBUFFER_BUFFERLOOP  127A
_ADDSTRTOBUFFER_END  12B2
_ADDSTRTOBUFFER_LENGTHEXCEEDED  12AC
_ADDSTRTOBUFFER_SUCCESS  12A4
_CLEARBUFFER_END    12DA
_CLEARBUFFER_LOOP   12CE
_NUMTOHEXSTR_ADDCHAR  141E
_NUMTOHEXSTR_LETTER  1416
_NUMTOHEXSTR_LOOP   1402
_NUMTOHEXSTR_POSLENGTH  13F0
_NUMTOHEXSTR_VALIDLENGTH  13FA
