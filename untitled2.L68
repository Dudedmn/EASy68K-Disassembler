00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/10/2019 6:28:06 PM

00003000                             1      ORG $3000
00003000                             2  CUR_OP_CODE DS.W 1
00001000                             3      ORG    $1000
00001000                             4  START:
00001000                             5  
00001000                             6  **************************************************
00001000                             7  *   [NOTICE]
00001000                             8  *   Data Register for Mode => D3
00001000                             9  *   Data Register for Register# => D2
00001000                            10  *   Address Register for Trailing Bits => A3
00001000                            11  **************************************************
00001000                            12  
00001000                            13  *************FOR DENNY EA*********************************************************
00001000                            14      * BCLR.L #$0E,d0
00001000                            15      * 0000 100 010 000 000
00001000                            16      ;MOVEA.W #%0000, A6
00001000                            17      ;MOVE.B  #%100, D7
00001000                            18      ;MOVE.B  #%010, D6
00001000                            19      ;MOVE.B  #%000, D5
00001000                            20      ;MOVE.B  #%000, D4
00001000                            21      ;MOVEA.L #$000E, A3
00001000                            22  
00001000                            23      ;MOVE.W #%0000111110001110,(A6)              ;Dynamic BCLR
00001000                            24      ;MOVE.W #%0010001001001101,(A6)              ;MOVEA.L A5,A1
00001000                            25      ;MOVE.W #%0010000000001101,(A6)              ;MOVE.L A5,A1
00001000                            26      ;MOVE.W #%0011010001000000,(A6)              ;MOVEA.W D0,A2
00001000                            27      ;MOVE.W #%0011000000001101,(A6)              ;MOVEA.W A5,A1
00001000                            28      ;MOVE.W #%0011000000001101,(A6)              ;MOVE.W A5,A1
00001000                            29      ;MOVE.W #%0000000001000001,(A6)              ;ORI.W D1
00001000                            30      ;JSR MOVE_LAST_6_BITS_TO_EA
00001000                            31      ;JSR FIND_2_BIT_SIZE_TO_EA
00001000                            32      ;JSR FIND_3_BIT_REG_TO_EA
00001000                            33  
00001000                            34  
00001000                            35  **********************************************************************************
00001000                            36  
00001000  34BC 264D                 37      MOVE.W #%0010011001001101,(A2)
00001004                            38      
00001004                            39  MOVE_AND_MOVEA_PARSE_EA:       ;Move the 3 bit dynamic register bits to proper register
00001004                            40     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001004  3012                      41      MOVE.W (A2),D0           ;Move current OP code into D0
00001006  323C 000A                 42      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
0000100A  E368                      43      LSL.W   D1,D0            ;Truncate to find the last 6 bits
0000100C  E268                      44      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
0000100E  3E00                      45      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
00001010  323C 0003                 46      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
00001014  E26F                      47      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
00001016  3A07                      48      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
00001018  323C 000D                 49      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
0000101C  E368                      50      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
0000101E  E268                      51      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001020  3800                      52      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
00001022                            53      **************MOVING SOURCE*********** TO BE DONE LATER
00001022                            54      ; MOVE.W #%0011 011 001 001 101,(A6)              ;MOVEA.W A5,A3
00001022                            55      ; MOVE.W #%0010 011 001 001 101,D0                ;MOVEA.L A5,A3
00001022                            56       ;Expected values:
00001022                            57      ;D7, DST REG:   011
00001022                            58      ;D6, DST MODE:  001
00001022                            59      ;D5, SRC MODE:  001
00001022                            60      ;D4, SRC REG:   101
00001022                            61      ;00011001
00001022  3012                      62      MOVE.W (A2),D0     ;Move current OP code into D0     
00001024  323C 0004                 63      MOVE.W  #4,D1             ;Prepare 4 bit shift to D1
00001028  E368                      64      LSL.W   D1,D0             ;Truncate to find bits 11-6
0000102A  E268                      65      LSR.W   D1,D0             ;Reposition bits
0000102C  323C 0006                 66      MOVE.W  #6,D1             ;Prepare 6 bit shift to D1
00001030  E268                      67      LSR.W   D1,D0             ;Truncate the SRC Reg/Mode bits
00001032  323C 0003                 68      MOVE.W  #3,D1             ;Prepare a 3 bit shift to D1 for DST Reg/Mode
00001036  3C00                      69      MOVE.W  D0,D6             ;Copy over the current 6 bits to D6
00001038  E268                      70      LSR.W   D1,D0             ;Truncate DST Mode  
0000103A  3E00                      71      MOVE.W  D0,D7             ;Move DST Reg to D7
0000103C  323C 000D                 72      MOVE.W  #13,D1             
00001040  E36E                      73      LSL.W   D1,D6             ;Truncate 13 bits in D6
00001042  E26E                      74      LSR.W   D1,D6             ;Reposition D6
00001044                            75                                ;D6 now contains the DST Reg
00001044                            76     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
00001044  4E75                      77      RTS                     ;Return to stack
00001046                            78      
00001046  49F9 000012DA             79      LEA     G_BUFFER, A4
0000104C                            80  
0000104C  4EB9 00001088             81      JSR     CHECK_XXXX
00001052  FFFF FFFF                 82  EXT SIMHALT * This EXT alias is critical for NOT loading error
00001056                            83  
00001056                            84  
00001056                            85  PRINT_OP_MOVEB:
00001056  4EB8 1004                 86      JSR MOVE_AND_MOVEA_PARSE_EA
0000105A  3CBC 0001                 87      MOVE.W #$1,(A6)
0000105E  4E75                      88      RTS
00001060                            89  PRINT_OP_MOVEA_L:
00001060  4EB8 1004                 90      JSR MOVE_AND_MOVEA_PARSE_EA
00001064  3CBC 0002                 91      MOVE.W #$2,(A6)
00001068  4E75                      92      RTS
0000106A                            93  PRINT_OP_MOVE_L:
0000106A  4EB8 1004                 94      JSR MOVE_AND_MOVEA_PARSE_EA
0000106E  3CBC 0002                 95      MOVE.W #$2,(A6)
00001072  4E75                      96      RTS
00001074                            97  PRINT_OP_MOVEA_W:
00001074  4EB8 1004                 98      JSR MOVE_AND_MOVEA_PARSE_EA
00001078  3CBC 0003                 99      MOVE.W #$3,(A6)
0000107C  4E75                     100      RTS
0000107E                           101  PRINT_OP_MOVE_W:
0000107E  4EB8 1004                102      JSR MOVE_AND_MOVEA_PARSE_EA
00001082  3CBC 0003                103      MOVE.W #$3,(A6)
00001086  4E75                     104      RTS
00001088                           105  
00001088                           106  ***
00001088                           107  
00001088                           108  
00001088                           109  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00001088                           110  * EXECUTION **************************************
00001088                           111      * 0011 001 001 111 100
00001088                           112      ;MOVEA.W #%0001, A6
00001088                           113      ;MOVE.B  #%001, D7
00001088                           114      ;MOVE.B  #%001, D6
00001088                           115      ;MOVE.B  #%101, D5
00001088                           116      ;MOVE.B  #%100, D4
00001088                           117      ;MOVEA.L #$A0ABCDEF, A3
00001088                           118      ;LEA     G_BUFFER, A4
00001088                           119  
00001088                           120      ;JSR     CHECK_XXXX
00001088                           121  ;EXT SIMHALT * This EXT alias is critical for NOT loading error
00001088                           122  **************************************************
00001088                           123  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00001088                           124  
00001088                           125  
00001088                           126  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00001088                           127  * CHECK_INSTRUCTION_BITS FUNCTIONS ***************
00001088                           128  CHECK_XXXX:
00001088  BCFC 0008                129      CMPA    #$8, A6
0000108C  6D00 0008                130      BLT     CHECK_0XXX
00001090  4EF9 000010A4            131      JMP     CHECK_1XXX
00001096                           132      
00001096                           133  CHECK_0XXX:
00001096  BCFC 0004                134      CMPA    #$4, A6
0000109A  6D00 000A                135      BLT     CHECK_00XX
0000109E  4EF9 000010BC            136      JMP     CHECK_01XX
000010A4                           137  
000010A4                           138  CHECK_1XXX:
000010A4  4E75                     139      RTS
000010A6                           140  
000010A6                           141  CHECK_00XX:
000010A6  BCFC 0001                142      CMPA    #$1, A6
000010AA  6D00 0014                143      BLT     LOAD_0000
000010AE  BCFC 0002                144      CMPA    #$2, A6
000010B2  6E00 000A                145      BGT     CHECK_0011
000010B6                           146      
000010B6                           147      * IT IS 00XX(=MOVE(A))
000010B6  4EF9 000010EC            148      JMP     LOAD_00XX
000010BC                           149  
000010BC                           150  CHECK_01XX:
000010BC  4E75                     151      RTS
000010BE                           152      
000010BE                           153  CHECK_0011:
000010BE  4E75                     154      RTS
000010C0                           155  **************************************************
000010C0                           156  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000010C0                           157  
000010C0                           158  
000010C0                           159  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000010C0                           160  * LOAD_THIS FUNCTIONS (HIGHEST LEVEL) ************
000010C0                           161  LOAD_0000:
000010C0                           162              * Work on the First Half (Dynamic BCLR) Part
000010C0  0C04 0006                163              CMPI.B  #%110, D4
000010C4  6600 0014                164              BNE     LATER_HALF  * It's not Dynamic BCLR
000010C8                           165              
000010C8  163C 0000                166              MOVE.B  #%000, D3 * D3 is for mode (as if %000 was passed in as mode)
000010CC  1405                     167              MOVE.B  D5, D2 * D2 is for register #
000010CE                           168  
000010CE  4EB9 0000110E            169              JSR     LOAD_EA
000010D4  4EB9 0000121C            170              JSR     LOAD_COMMA_SPACE
000010DA                           171  
000010DA                           172              * ORI/CMPI/BCLR ********************************
000010DA  1606                     173  LATER_HALF  MOVE.B  D6, D3 * D3 is for mode
000010DC  1407                     174              MOVE.B  D7, D2 * D2 is for register #
000010DE                           175      
000010DE  4EB9 0000110E            176              JSR     LOAD_EA
000010E4  4EB9 00001202            177              JSR     LOAD_NEW_LINE
000010EA                           178      
000010EA  4E75                     179              RTS
000010EC                           180      
000010EC                           181  LOAD_00XX:
000010EC  1605                     182      MOVE.B  D5, D3
000010EE  1404                     183      MOVE.B  D4, D2
000010F0                           184      
000010F0  4EB9 0000110E            185      JSR     LOAD_EA
000010F6  4EB9 0000121C            186      JSR     LOAD_COMMA_SPACE
000010FC                           187      
000010FC  1606                     188      MOVE.B  D6, D3
000010FE  1407                     189      MOVE.B  D7, D2
00001100                           190      
00001100  4EB9 0000110E            191      JSR     LOAD_EA
00001106  4EB9 00001202            192      JSR     LOAD_NEW_LINE
0000110C                           193      
0000110C  4E75                     194      RTS
0000110E                           195  **************************************************
0000110E                           196  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000110E                           197  
0000110E                           198  
0000110E                           199  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000110E                           200  * LOAD_THIS FUNCTIONS (HIGH LEVEL) ***************
0000110E                           201  LOAD_EA:
0000110E  347C 111E                202          MOVEA.  #SAVED, A2 * remember to come back!
00001112                           203  
00001112  0C43 0007                204          CMPI    #%111, D3
00001116  6D00 0008                205          BLT     LOAD_LT_111
0000111A  6C00 0030                206          BGE     LOAD_GE_111
0000111E                           207      
0000111E  4E75                     208  SAVED   RTS
00001120                           209  
00001120                           210  LOAD_LT_111:
00001120  0C43 0000                211      CMPI    #%000, D3 * e.g. D3
00001124  6700 0042                212      BEQ     LOAD_DATA_REGISTER
00001128  0C43 0001                213      CMPI    #%001, D3 * e.g. A3
0000112C  6700 004A                214      BEQ     LOAD_ADDR_REGISTER
00001130  0C43 0002                215      CMPI    #%010, D3 * e.g. (A3)
00001134  6700 0052                216      BEQ     LOAD_ADDRESS
00001138  0C43 0003                217      CMPI    #%011, D3 * e.g. (A3)+
0000113C  6700 005C                218      BEQ     LOAD_ADDRESS_W_POST_INC
00001140  0C43 0004                219      CMPI    #%100, D3 * e.g. -(A3)
00001144  6700 0060                220      BEQ     LOAD_ADDRESS_W_PRE_DEC
00001148                           221      
00001148  4EF8 1052                222      JMP     EXT
0000114C                           223      
0000114C                           224  LOAD_GE_111:
0000114C  0C42 0000                225      CMPI    #%000, D2
00001150  6700 0060                226      BEQ     LOAD_ABS_SHORT
00001154  0C42 0001                227      CMPI    #%001, D2
00001158  6700 0068                228      BEQ     LOAD_ABS_LONG
0000115C  0C42 0004                229      CMPI    #%100, D2
00001160  6700 0070                230      BEQ     LOAD_IMMDTE
00001164                           231      
00001164  4EF8 1052                232      JMP     EXT
00001168                           233  **************************************************
00001168                           234  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00001168                           235  
00001168                           236  
00001168                           237  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00001168                           238  * LOAD_THIS FUNCTIONS (INTERMEDIATE LEVEL) *******
00001168                           239  LOAD_DATA_REGISTER:
00001168                           240      * e.g. D3
00001168  4EB9 00001236            241      JSR     LOAD_D
0000116E  2002                     242      MOVE.L  D2, D0 * Loading D2(=Dreg to D0)
00001170  4EB9 000012AA            243      JSR     LOAD_NUM
00001176  4ED2                     244      JMP     (A2)
00001178                           245  
00001178                           246  LOAD_ADDR_REGISTER:
00001178                           247      * e.g. A3
00001178  4EB9 00001244            248      JSR     LOAD_A
0000117E  2002                     249      MOVE.L  D2, D0
00001180  4EB9 000012AA            250      JSR     LOAD_NUM
00001186  4ED2                     251      JMP     (A2)
00001188                           252  
00001188                           253  LOAD_ADDRESS:
00001188                           254      * e.g. (A3)
00001188  4EB9 00001252            255      JSR     LOAD_PTHSIS_OPEN
0000118E  4EB8 1178                256      JSR     LOAD_ADDR_REGISTER
00001192  4EB9 00001260            257      JSR     LOAD_PTHSIS_CLSD
00001198  4ED2                     258      JMP     (A2)
0000119A                           259  
0000119A                           260  LOAD_ADDRESS_W_POST_INC:
0000119A                           261      * e.g. (A3)+
0000119A  4EB8 1188                262      JSR     LOAD_ADDRESS
0000119E  4EB9 0000128A            263      JSR     LOAD_PLUS_SIGN
000011A4  4ED2                     264      JMP     (A2)
000011A6                           265  
000011A6                           266  LOAD_ADDRESS_W_PRE_DEC:
000011A6                           267      * e.g. -(A3)
000011A6  4EB9 00001298            268      JSR     LOAD_MINUS_SIGN
000011AC  4EB8 1188                269      JSR     LOAD_ADDRESS
000011B0  4ED2                     270      JMP     (A2)
000011B2                           271  
000011B2                           272  LOAD_ABS_SHORT:
000011B2  4EB9 0000126E            273      JSR     LOAD_HEX_SIGN
000011B8  300B                     274      MOVE.W  A3, D0
000011BA  4EB9 000011DC            275      JSR     LOAD_BYTES
000011C0  4ED2                     276      JMP     (A2)
000011C2                           277  
000011C2                           278  LOAD_ABS_LONG:
000011C2  4EB9 0000126E            279      JSR     LOAD_HEX_SIGN
000011C8  200B                     280      MOVE.L  A3, D0
000011CA  4EB9 000011DC            281      JSR     LOAD_BYTES
000011D0  4ED2                     282      JMP     (A2)
000011D2                           283      
000011D2                           284  LOAD_IMMDTE:
000011D2  4EB9 0000127C            285      JSR     LOAD_IMMDTE_VALU
000011D8  4EF8 11C2                286      JMP     LOAD_ABS_LONG
000011DC                           287  
000011DC                           288  **************************************************
000011DC                           289  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000011DC                           290  
000011DC                           291  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000011DC                           292  * LOAD_THIS FUNCTIONS (LOW LEVEL) ****************
000011DC                           293  * Shifts the bits to the left and prints the
000011DC                           294  * left-most bit
000011DC                           295  LOAD_BYTES:
000011DC  2200                     296          MOVE.L  D0, D1
000011DE  3A7C 0008                297          MOVEA.W #8, A5
000011E2  BAFC 0000                298  LOOP    CMPA    #0, A5
000011E6  6E00 0004                299          BGT     ROTATE
000011EA  4E75                     300          RTS
000011EC                           301      
000011EC  E999                     302  ROTATE  ROL.L   #$04, D1
000011EE  1001                     303          MOVE.B  D1, D0
000011F0  0280 0000000F            304          ANDI.L  #$0000000F, D0
000011F6  4EB9 000012AA            305          JSR     LOAD_NUM
000011FC  534D                     306          SUBA    #1, A5
000011FE  4EF8 11E2                307          JMP     LOOP        
00001202                           308  
00001202                           309  LOAD_NEW_LINE:
00001202  1039 000012D8            310      MOVE.B  CR, D0
00001208  4EB9 000012A6            311      JSR     LOAD_THIS_SHIT
0000120E  1039 000012D9            312      MOVE.B  LF, D0
00001214  4EB9 000012A6            313      JSR     LOAD_THIS_SHIT
0000121A  4E75                     314      RTS
0000121C                           315  
0000121C                           316  LOAD_COMMA_SPACE:
0000121C  1039 000012D6            317      MOVE.B  COMMA, D0
00001222  4EB9 000012A6            318      JSR     LOAD_THIS_SHIT
00001228  1039 000012D7            319      MOVE.B  SPACE, D0
0000122E  4EB9 000012A6            320      JSR     LOAD_THIS_SHIT
00001234                           321      
00001234  4E75                     322      RTS
00001236                           323      
00001236                           324  LOAD_D:
00001236  1039 000012CF            325      MOVE.B  DATA, D0
0000123C  4EB9 000012A6            326      JSR     LOAD_THIS_SHIT
00001242  4E75                     327      RTS
00001244                           328      
00001244                           329  LOAD_A:
00001244  1039 000012CE            330      MOVE.B  ADDRESS, D0
0000124A  4EB9 000012A6            331      JSR     LOAD_THIS_SHIT
00001250  4E75                     332      RTS
00001252                           333  
00001252                           334  LOAD_PTHSIS_OPEN:    
00001252  1039 000012D0            335      MOVE.B  PTHSIS_OPEN, D0
00001258  4EB9 000012A6            336      JSR     LOAD_THIS_SHIT
0000125E  4E75                     337      RTS
00001260                           338      
00001260                           339  LOAD_PTHSIS_CLSD:
00001260  1039 000012D1            340      MOVE.B  PTHSIS_CLSD, D0
00001266  4EB9 000012A6            341      JSR     LOAD_THIS_SHIT
0000126C  4E75                     342      RTS
0000126E                           343      
0000126E                           344  LOAD_HEX_SIGN:
0000126E  1039 000012D2            345      MOVE.B  HEX_SIGN, D0
00001274  4EB9 000012A6            346      JSR     LOAD_THIS_SHIT
0000127A  4E75                     347      RTS
0000127C                           348  
0000127C                           349  LOAD_IMMDTE_VALU:
0000127C  1039 000012D3            350      MOVE.B  IMMDTE_VALU, D0
00001282  4EB9 000012A6            351      JSR     LOAD_THIS_SHIT
00001288  4E75                     352      RTS
0000128A                           353  
0000128A                           354  LOAD_PLUS_SIGN:
0000128A  1039 000012D4            355      MOVE.B  PLUS_SIGN, D0
00001290  4EB9 000012A6            356      JSR     LOAD_THIS_SHIT
00001296  4E75                     357      RTS
00001298                           358      
00001298                           359  LOAD_MINUS_SIGN:
00001298  1039 000012D5            360      MOVE.B  MINUS_SIGN, D0
0000129E  4EB9 000012A6            361      JSR     LOAD_THIS_SHIT
000012A4  4E75                     362      RTS
000012A6                           363  **************************************************
000012A6                           364  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000012A6                           365  
000012A6                           366  
000012A6                           367  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000012A6                           368  * LOAD_THIS FUNCTIONS (LOWEST LEVEL) *************
000012A6                           369  
000012A6                           370  * Moves the hex value from D0 to G_BUFFER in A4
000012A6                           371  LOAD_THIS_SHIT:
000012A6  18C0                     372      MOVE.B  D0, (A4)+
000012A8  4E75                     373      RTS
000012AA                           374  
000012AA                           375  * Adds $30 to a number in D0 to make it a hex
000012AA                           376  * If the number is greater than 9 (A~F), then adds $37
000012AA                           377  * Then moves the hex value from D0 to G_BUFFER in A4
000012AA                           378  LOAD_NUM:
000012AA  0C00 0009                379      CMPI.B  #$9, D0
000012AE  6E00 0006                380      BGT     GT
000012B2  6F00 000C                381      BLE     LE
000012B6                           382      
000012B6  0600 0037                383  GT  ADDI.B  #$37, D0 * A~F
000012BA  4EF9 000012CA            384      JMP     END
000012C0  0600 0030                385  LE  ADDI.B  #$30, D0 * 0~9
000012C4  4EF9 000012CA            386      JMP     END
000012CA                           387  
000012CA  18C0                     388  END MOVE.B  D0, (A4)+
000012CC  4E75                     389      RTS
000012CE                           390  **************************************************
000012CE                           391  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000012CE                           392  
000012CE                           393  
000012CE                           394  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000012CE                           395  * MESSAGE VARIABLES ******************************
000012CE= 41                       396  ADDRESS         DC.B    $41
000012CF= 44                       397  DATA            DC.B    $44
000012D0                           398  
000012D0= 28                       399  PTHSIS_OPEN     DC.B    $28
000012D1= 29                       400  PTHSIS_CLSD     DC.B    $29
000012D2= 24                       401  HEX_SIGN        DC.B    $24
000012D3= 23                       402  IMMDTE_VALU     DC.B    $23
000012D4= 2B                       403  PLUS_SIGN       DC.B    $2B
000012D5= 2D                       404  MINUS_SIGN      DC.B    $2D
000012D6                           405  
000012D6= 2C                       406  COMMA           DC.B    $2C
000012D7= 20                       407  SPACE           DC.B    $20
000012D8                           408  
000012D8= 0D                       409  CR              DC.B    $D
000012D9= 0A                       410  LF              DC.B    $A
000012DA                           411  **************************************************
000012DA                           412  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000012DA                           413  
000012DA                           414  
000012DA                           415  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000012DA                           416  * GLOBAL BUFFER **********************************
000012DA                           417  G_BUFFER        DS.B    100
0000133E                           418  **************************************************
0000133E                           419  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000133E                           420  
0000133E                           421  
0000133E                           422      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDRESS             12CE
CHECK_0011          10BE
CHECK_00XX          10A6
CHECK_01XX          10BC
CHECK_0XXX          1096
CHECK_1XXX          10A4
CHECK_XXXX          1088
COMMA               12D6
CR                  12D8
CUR_OP_CODE         3000
DATA                12CF
END                 12CA
EXT                 1052
GT                  12B6
G_BUFFER            12DA
HEX_SIGN            12D2
IMMDTE_VALU         12D3
LATER_HALF          10DA
LE                  12C0
LF                  12D9
LOAD_0000           10C0
LOAD_00XX           10EC
LOAD_A              1244
LOAD_ABS_LONG       11C2
LOAD_ABS_SHORT      11B2
LOAD_ADDRESS        1188
LOAD_ADDRESS_W_POST_INC  119A
LOAD_ADDRESS_W_PRE_DEC  11A6
LOAD_ADDR_REGISTER  1178
LOAD_BYTES          11DC
LOAD_COMMA_SPACE    121C
LOAD_D              1236
LOAD_DATA_REGISTER  1168
LOAD_EA             110E
LOAD_GE_111         114C
LOAD_HEX_SIGN       126E
LOAD_IMMDTE         11D2
LOAD_IMMDTE_VALU    127C
LOAD_LT_111         1120
LOAD_MINUS_SIGN     1298
LOAD_NEW_LINE       1202
LOAD_NUM            12AA
LOAD_PLUS_SIGN      128A
LOAD_PTHSIS_CLSD    1260
LOAD_PTHSIS_OPEN    1252
LOAD_THIS_SHIT      12A6
LOOP                11E2
MINUS_SIGN          12D5
MOVE_AND_MOVEA_PARSE_EA  1004
PLUS_SIGN           12D4
PRINT_OP_MOVEA_L    1060
PRINT_OP_MOVEA_W    1074
PRINT_OP_MOVEB      1056
PRINT_OP_MOVE_L     106A
PRINT_OP_MOVE_W     107E
PTHSIS_CLSD         12D1
PTHSIS_OPEN         12D0
ROTATE              11EC
SAVED               111E
SPACE               12D7
START               1000
