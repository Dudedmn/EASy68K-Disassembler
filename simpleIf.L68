00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 2/28/2019 7:50:47 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START                  ; first instruction of program
00001000                             9  
00001000  343C 0003                 10          MOVE.W  #3, D2 ; d2 is y
00001004  363C 0003                 11          MOVE.W  #3, D3 ; d3 is x
00001008  B642                      12  if      CMP.W D2,D3
0000100A  6600 000E                 13          BNE DONE
0000100E                            14  
0000100E  43F9 0000109A             15          LEA equal,A1
00001014  103C 000D                 16          MOVE.B #13,D0
00001018  4E4F                      17          TRAP #15
0000101A                            18  * Put program code here
0000101A                            19  DONE
0000101A  7601                      20      MOVE.L #1, D3
0000101C  7A03                      21      MOVE.L #3, D5 ; D5 is loop variable
0000101E                            22  LOOP
0000101E  1203                      23      MOVE.B D3,D1
00001020  103C 0003                 24      MOVE.B #3,D0
00001024  4E4F                      25      TRAP #15
00001026                            26      
00001026  E343                      27      ASL #1, D3 ; multiply by 2 (shifting left)
00001028                            28      
00001028  5305                      29      SUBI.B #1,D5
0000102A  66F2                      30      BNE LOOP
0000102C                            31  
0000102C                            32  disassembler
0000102C  47F9 0000108C             33      LEA testCode,A3 ;A3 as teh start of the code
00001032  1A3C 0003                 34      MOVE.B #3,D5 ; d5 is loop var
00001036                            35  disLOOP
00001036  361B                      36      MOVE.W (A3)+,D3 ; d3 is the opcode word
00001038  0C43 4E75                 37      CMPI.W #$4E75,D3 ; check if the input is rts
0000103C  6600 0042                 38      BNE skip1
00001040                            39      *print rts
00001040  43F9 000010A1             40      LEA rtsMSG,A1
00001046  103C 000D                 41      MOVE.B #13,D0
0000104A  4E4F                      42      TRAP #15
0000104C  1C3C 0001                 43      MOVE.B #1, D6 ;set d6 to a value for 'data'
00001050                            44  nopCheck *if nop    
00001050  0C43 4E71                 45      CMPI.W #$4E71,D3 ; chieck if the input is nop
00001054  6600 002E                 46      BNE skip2
00001058                            47      *print nop
00001058  43F9 000010A5             48      LEA nopMSG,A1
0000105E  103C 000D                 49      MOVE.B #13,D0
00001062  4E4F                      50      TRAP #15
00001064  1C3C 0001                 51      MOVE.B #1,D6
00001068                            52      
00001068                            53  dataCheck    *print data is D6 is set
00001068  0C46 0001                 54      CMPI.W #1,D6
0000106C  6600 001A                 55      BNE skip3
00001070  43F9 000010A9             56      LEA dataMSG,A1
00001076  103C 000D                 57      MOVE.B #13,D0
0000107A  4E4F                      58      TRAP #15
0000107C  1C3C 0000                 59      MOVE.B #0,D6 *reset DATA
00001080                            60      
00001080                            61      *if this is an if statement, print if
00001080                            62  skip1    *if this is rts
00001080  5305                      63      SUBI.B #1,D5
00001082  66CC                      64      BNE nopCheck
00001084                            65  skip2   *if this is NOP
00001084  5305                      66      SUBI.B #1,D5
00001086  66E0                      67      BNE dataCheck    
00001088                            68  skip3
00001088  5305                      69      SUBI.B #1,D5
0000108A  66AA                      70      BNE disLoop
0000108C                            71       
0000108C                            72  testCode  
0000108C  4E71                      73            NOP
0000108E  4E75                      74            RTS
00001090  4E75                      75            RTS
00001092  4E71                      76            NOP
00001094  4E75                      77            RTS
00001096  FFFF FFFF                 78      SIMHALT
0000109A                            79  * Put variables and constants here
0000109A= 45 71 75 61 6C 73 00      80  equal DC.B  'Equals',0
000010A1= 52 54 53 00               81  rtsMSG DC.B 'RTS',0
000010A5= 4E 4F 50 00               82  nopMSG DC.B 'NOP',0
000010A9= 44 41 54 41 00            83  dataMSG DC.B 'DATA',0
000010AE                            84      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
DATACHECK           1068
DATAMSG             10A9
DISASSEMBLER        102C
DISLOOP             1036
DONE                101A
EQUAL               109A
IF                  1008
LOOP                101E
NOPCHECK            1050
NOPMSG              10A5
RTSMSG              10A1
SKIP1               1080
SKIP2               1084
SKIP3               1088
START               1000
TESTCODE            108C
