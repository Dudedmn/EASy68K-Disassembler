000010B6 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/15/2019 7:09:34 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OP Code routines for Disassembler
00000000                             3  * Written by : Daniel Yan
00000000                             4  * Date       : 2/28/2019, Updated 3/12/2019
00000000                             5  
00000000                             6  * Description: Disassembler routines to identify any valid
00000000                             7  * OP code dependent on current supported list.
00000000                             8  *------------------------------------------------------------
00004000                             9      ORG $4000
00004000                            10   
00004000                            11  CUR_OP_CODE     DS.W    1 * Used for Daniel's code
00004002  11F8 0012 4002            12     MOVE.B $12, $4002
00004008  11FC 0034 4004            13     MOVE.B #$34, $4004
0000400E  11FC 0012 4006            14     MOVE.B #$12, $4006
00004014  11FC 0034 4008            15     MOVE.B #$34, $4008
00004100                            16      ORG $4100
00004100                            17  G_BUFFER    DS.B 80 
00001000                            18      ORG $1000 ; Start at Address $1000
00001000                            19    
00001000                            20  
00001000                            21  
00001000                            22  MNEMONIC        DS.B    1 * First four BITS of any instruction
00001001                            23   
00001002                            24  TRAILING_SIZE   DS.W    1 * Size of any immediate or
00001004                            25                            * address values. Immediate or address
00001004                            26                            * value of a BYTE is still processed as
00001004                            27                            * WORD because the trailing bytes
00001004                            28                            * are represented as a word regardless.
00001004                            29                            * $1 = BYTE, $2 = WORD, $4 = LONG
00001004                            30  
00001004                            31  FIRST_3         DS.B    1 * First, second, third, and fourth bundles of three bits each
00001005                            32  SECOND_3        DS.B    1
00001006                            33  THIRD_3         DS.B    1
00001007                            34  FOURTH_3        DS.B    1
00001008                            35  
00001008                            36  EA_SIZE     DS.B 1
00001009                            37  
00001009                            38  B_BUFFER    DS.B 80
00001059                            39  
00001059                            40  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00001059                            41  * MESSAGE VARIABLES ******************************
00001059                            42  
00001059                            43  * ASCII values for respective characters
00001059                            44  
00001059= 41                        45  ADDRESS         DC.B    $41
0000105A= 44                        46  DATA            DC.B    $44
0000105B                            47  
0000105B= 28                        48  PTHSIS_OPEN     DC.B    $28
0000105C= 29                        49  PTHSIS_CLSD     DC.B    $29
0000105D= 24                        50  HEX_SIGN        DC.B    $24
0000105E= 23                        51  IMMDTE_VALU     DC.B    $23
0000105F= 2B                        52  PLUS_SIGN       DC.B    $2B
00001060= 2D                        53  MINUS_SIGN      DC.B    $2D
00001061                            54  
00001061= 2C                        55  COMMA           DC.B    $2C
00001062= 20                        56  SPACE           DC.B    $20
00001063                            57  
00001063= 0D                        58  CR              DC.B    $D
00001064= 0A                        59  LF              DC.B    $A
00001065                            60  **************************************************
00001065                            61  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00001065                            62  
00001065                            63  
00001065                            64  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00001065                            65  * GLOBAL BUFFER **********************************
00001065                            66  
00001065                            67  
00001065  =00004000                 68  START_ADDRESS   EQU     $4000 * Used to parse through the entire instruction
00001065  =00005000                 69  END_ADDRESS     EQU     $5000
00001065                            70  
00001065                            71  EA_BUFFER       DS.B    80 * Used to load ASCII-converted EA ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000010B5                            72  IS_VALID        DS.B    1 * EA-bit validity flag
000010B6                            73                            * $0 = invalid, $1 = valid
000010B6                            74  
000010B6                            75  START:
000010B6                            76      
000010B6  49F8 4100                 77      LEA G_BUFFER,A4         ;Load G_BUFFER into A4, put a pointer to it as A4
000010BA  18BC 0000                 78      MOVE.B #0, (A4)         ;Move 0 to indicate where to put the loaded buffer word
000010BE                            79  
000010BE                            80      ;MOVE.L (A5)+, D0
000010BE                            81  ************** BUFFER PRINTING/LOADING EXAMPLES *************************************
000010BE                            82      ; Load the message onto A4
000010BE                            83      ;MOVE.L #P_OP_MOVEA_L_T, Arg_AddStrToBuffer_String
000010BE                            84      ;MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer 
000010BE                            85      ;JSR AddStrToBuffer
000010BE                            86      ;LEA G_BUFFER, A4   ; Load the value of the message onto the G_BUFFER
000010BE                            87      ;MOVE.L P_OP_MOVEA_L_T,(A4)+
000010BE                            88      ;MOVE.L P_OP_MOVEA_L_A_L,(A4)+
000010BE                            89      
000010BE                            90  ***************************** Input Tests ********************************************
000010BE                            91      ; indicates a test has been finished
000010BE                            92      * indicates a test hasn't been finished
000010BE                            93      
000010BE                            94      ***GROUP 0 tests**** SUPPORTED: ORI, BCLR (static, dynamic), CMPI
000010BE                            95      ;MOVE.W #%0000000000111100,CUR_OP_CODE      ;ORI TO CCR              SHOULD FAIL
000010BE                            96      ;MOVE.W #%0000000001111100,CUR_OP_CODE      ;ORI TO SR               SHOULD FAIL
000010BE                            97      ;MOVE.W #%0000000010000101,CUR_OP_CODE      ;ORI.W D5                SHOULD PASS
000010BE                            98      ;MOVE.W #%0000001001111100,CUR_OP_CODE      ;ANDI TO CCR             SHOULD FAIL
000010BE                            99      ;MOVE.W #%0000001001111100,CUR_OP_CODE      ;ANDI TO SR              SHOULD FAIL
000010BE                           100      ;MOVE.W #%0000001010000101,CUR_OP_CODE      ;ANDI.W D5               SHOULD FAIL
000010BE                           101      ;MOVE.W #%0000010010000101,CUR_OP_CODE      ;SUBI.W D5               SHOULD FAIL
000010BE                           102      ;MOVE.W #%0000011010000101,CUR_OP_CODE      ;ADDI.W D5               SHOULD FAIL
000010BE                           103      ;MOVE.W #%0000101000111100,CUR_OP_CODE      ;EORI TO CCR             SHOULD FAIL
000010BE                           104      ;MOVE.W #%0000101001111100,CUR_OP_CODE      ;EORI TO SR              SHOULD FAIL
000010BE                           105      ;MOVE.W #%0000101010000101,CUR_OP_CODE      ;EORI.W D5               SHOULD FAIL
000010BE                           106      ;MOVE.W #%0000110010000101,CUR_OP_CODE      ;CMPI.L D5               SHOULD PASS
000010BE                           107      ;MOVE.W #%0000100000000101,CUR_OP_CODE      ;STATIC BTST. B D5       SHOULD FAIL
000010BE                           108      ;MOVE.W #%0000100001000101,CUR_OP_CODE      ;STATIC BCHG .B D5       SHOULD FAIL
000010BE                           109      ;MOVE.W #%0000100010000101,CUR_OP_CODE      ;STATIC BCL R D5         SHOULD PASS
000010BE                           110      ;MOVE.W #%0000100011000101,CUR_OP_CODE      ;STATIC BS ET.B D5       SHOULD FAIL
000010BE                           111      ;MOVE.W #%0000111100000101,CUR_OP_CODE      ;DYNAMIC BTST.B D7,D5    SHOULD FAIL
000010BE                           112      ;MOVE.W #%0000111101000101,CUR_OP_CODE      ;DYNAMIC BCHG.B,D7,D5    SHOULD FAIL
000010BE                           113      ;MOVE.W #%0000101110000111,CUR_OP_CODE      ;DYNAMIC BCLR.B D7,D5    SHOULD PASS
000010BE                           114      ;MOVE.W #%0000111111000101,CUR_OP_CODE      ;DYNAMIC BSET.B D7,D5    SHOULD FAIL
000010BE                           115      ;MOVE.W #%0000111111001101,CUR_OP_CODE      ;MOVEP.L MEM TO REG, A5  SHOULD FAIL, MADE A SPECIAL CASE FOR DYNAMIC BSET BIT SHIFTING
000010BE                           116          
000010BE                           117      ***GROUP 1 tests**** SUPPORTED: MOVE.B
000010BE                           118      ;MOVE.W #%0001101000000111,CUR_OP_CODE       ;MOVE.B D5,D7           SHOULD PASS
000010BE                           119      ***GROUP 2 tests**** SUPPORTED: MOVEA.L, MOVE.L
000010BE                           120      ;MOVE.W #%0010101000000111,CUR_OP_CODE       ;MOVE.L D5,D7           SHOULD PASS
000010BE                           121      ;MOVE.W #%0010101001000111,CUR_OP_CODE       ;MOVEA.L D5,D7          SHOULD PASS
000010BE                           122      ;MOVE.W #%0010 101 000 111 100, MOVE.L #imm,D5
000010BE  31FC 2A3C 4000           123        MOVE.W #%0010101000111100,CUR_OP_CODE       ;MOVE.L #immed,D5 
000010C4                           124         
000010C4                           125      ***GROUP 3 tests**** SUPPORTED: MOVEA.W, MOVE.W
000010C4                           126      ;MOVE.W #%0011101000000111,CUR_OP_CODE       ;MOVE.W D5,D7           SHOULD PASS
000010C4                           127      ;MOVE.W #%0011101001000111,CUR_OP_CODE       ;MOVEA.W D5,D7          SHOULD PASS
000010C4                           128      
000010C4                           129      ****GROUP 4 tests**** SUPPORTED: LEA, JSR, RTS, NEG, MOVEM  
000010C4                           130      ;MOVE.W #%0100000011000101,CUR_OP_CODE       ;MOVE_FROM_SR           SHOULD FAIL
000010C4                           131      ;MOVE.W #%0100010011000101,CUR_OP_CODE       ;MOVE_TO_CCR            SHOULD FAIL
000010C4                           132      ;MOVE.W #%0100011011000101,CUR_OP_CODE       ;MOVE_TO_SR             SHOULD FAIL
000010C4                           133      ;MOVE.W #%0100000010000101,CUR_OP_CODE       ;NEGX                   SHOULD FAIL
000010C4                           134      ;MOVE.W #%0100001010000101,CUR_OP_CODE       ;CLR                    SHOULD FAIL
000010C4                           135      ;MOVE.W #%0100010001000101,CUR_OP_CODE       ;NEG                    SHOULD PASS
000010C4                           136      ;MOVE.W #%0100011010000101,CUR_OP_CODE       ;NOT                    SHOULD FAIL
000010C4                           137      ;MOVE.W #%0100100011000101,CUR_OP_CODE       ;EXT                    SHOULD FAIL
000010C4                           138      ;MOVE.W #%0100100000000101,CUR_OP_CODE       ;NBCD                   SHOULD FAIL
000010C4                           139      ;MOVE.W #%0100100001000101,CUR_OP_CODE       ;SWAP                   SHOULD FAIL
000010C4                           140      ;MOVE.W #%0100100001000101,CUR_OP_CODE       ;PEA                    SHOULD FAIL
000010C4                           141      ;MOVE.W #%0100101011111100,CUR_OP_CODE       ;ILLEGAL                SHOULD FAIL
000010C4                           142      ;MOVE.W #%0100101011000101,CUR_OP_CODE       ;TAS                    SHOULD FAIL
000010C4                           143      ;MOVE.W #%0100101010000101,CUR_OP_CODE       ;TST                    SHOULD FAIL
000010C4                           144      ;MOVE.W #%0100111001000111,CUR_OP_CODE       ;TRAP                   SHOULD FAIL
000010C4                           145      ;MOVE.W #%0100111001010101,CUR_OP_CODE       ;LINK                   SHOULD FAIL
000010C4                           146      ;MOVE.W #%0100111001011101,CUR_OP_CODE       ;UNLK                   SHOULD FAIL
000010C4                           147      ;MOVE.W #%0100111001101101,CUR_OP_CODE       ;MOVE_USP               SHOULD FAIL
000010C4                           148      ;MOVE.W #%0100111001110000,CUR_OP_CODE       ;RESET                  SHOULD FAIL
000010C4                           149      ;MOVE.W #%0100111001110001,CUR_OP_CODE       ;NOP                    SHOULD FAIL
000010C4                           150      ;MOVE.W #%0100111001110010,CUR_OP_CODE       ;STOP                   SHOULD FAIL
000010C4                           151      ;MOVE.W #%0100111001110011,CUR_OP_CODE       ;RTE                    SHOULD FAIL
000010C4                           152      ;MOVE.W #%0100111001110101,CUR_OP_CODE       ;RTS                    SHOULD PASS
000010C4                           153      ;MOVE.W #%0100111001110110,CUR_OP_CODE       ;TRAPV                  SHOULD FAIL
000010C4                           154      ;MOVE.W #%0100111001110111,CUR_OP_CODE       ;RTR                    SHOULD FAIL
000010C4                           155      ;MOVE.W #%0100111010000101,CUR_OP_CODE       ;JSR                    SHOULD PASS
000010C4                           156      ;MOVE.W #%0100111011000101,CUR_OP_CODE       ;JMP                    SHOULD FAIL
000010C4                           157      ;MOVE.W #$488E,CUR_OP_CODE                   ;MOVEM.W Reg to Mem,A6  SHOULD PASS
000010C4                           158      ;MOVE.W #$4C8E,CUR_OP_CODE                   ;MOVEM.W Mem to Reg,A6  SHOULD PASS
000010C4                           159      ;MOVE.W #$43CC,CUR_OP_CODE                   ;LEA A1,A6              SHOULD PASS
000010C4                           160      ;MOVE.W #%0100000110000101,CUR_OP_CODE       ;CHK                    SHOULD FAIL
000010C4                           161      ;MOVE.W #$4E75,CUR_OP_CODE                   ;RTS                    SHOULD PASS
000010C4                           162      ;MOVE.W #$4E71,CUR_OP_CODE                   ;NOP                    SHOULD FAIL
000010C4                           163      ;MOVE.W #$4415,CUR_OP_CODE                   ;NEG.L D5               SHOULD PASS
000010C4                           164     
000010C4                           165      *****GROUP 5 TESTS**** SUPPORTED: SUBQ
000010C4                           166      ;MOVE.W #%0101110010000101,CUR_OP_CODE        ;ADDQ                  SHOULD FAIL
000010C4                           167      ;MOVE.W #%0101110110000101,CUR_OP_CODE        ;SUBQ                  SHOULD PASS
000010C4                           168      ;MOVE.W #%0101101011000101,CUR_OP_CODE        ;Scc (SPL)             SHOULD FAIL
000010C4                           169      ;MOVE.W #%0101101011001101,CUR_OP_CODE         ;DBcc (DCPL)          SHOULD FAIL
000010C4                           170         
000010C4                           171      *****GROUP 6 TESTS********* SUPPORTED: BCS,BGE,BLT,BVC
000010C4                           172      ; DISPLACEMENT, $00 is 16 bits, $FF is 32 bits
000010C4                           173      ; DISPLACEMENT = Last 8 bits
000010C4                           174      ;MOVE.W #%0110000001010101,CUR_OP_CODE   ;BRA                        SHOULD PASS
000010C4                           175      ;MOVE.W #%0110000110101010,CUR_OP_CODE   ;BSR                        SHOULD FAIL
000010C4                           176      ;MOVE.W #%0110010100000001,CUR_OP_CODE   ;BCS                        SHOULD PASS
000010C4                           177      ;MOVE.W #%0110110001010100,CUR_OP_CODE   ;BGE                        SHOULD PASS
000010C4                           178      ;MOVE.W #%0110110110101010,CUR_OP_CODE   ;BLT                        SHOULD PASS
000010C4                           179      ;MOVE.W #%0110100001010100,CUR_OP_CODE   ;BVC                        SHOULD PASS
000010C4                           180      
000010C4                           181      *****GROUP 7 TESTS********** NONE SUPPORTED
000010C4                           182      ;MOVE.W #%0111101011110000,CUR_OP_CODE   ;MOVEQ                      SHOULD FAIL
000010C4                           183      
000010C4                           184      *****GROUP 8 TESTS********** SUPPORTED: DIVS, OR
000010C4                           185      ;MOVE.W #%1000101011000101,CUR_OP_CODE    ;DIVU                      SHOULD FAIL
000010C4                           186      ;MOVE.W #%1000101111000110,CUR_OP_CODE    ;DIVS                      SHOULD PASS
000010C4                           187      ;MOVE.W #%1000101100001111,CUR_OP_CODE    ;SBCD                      SHOULD FAIL
000010C4                           188      ;MOVE.W #%1000110101000101,CUR_OP_CODE    ;OR                        SHOULD PASS
000010C4                           189              
000010C4                           190      *****GROUP 9 TESTS********** SUPPORTED: SUB
000010C4                           191      ;MOVE.W #%1001101100000101,CUR_OP_CODE    ;SUB                       SHOULD PASS
000010C4                           192      ;MOVE.W #%1001000110001101,CUR_OP_CODE    ;SUBX                      SHOULD FAIL
000010C4                           193      ;MOVE.W #%1001101011001101,CUR_OP_CODE    ;SUBA                      SHOULD FAIL
000010C4                           194      
000010C4                           195      *****GROUP A TESTS********** NONE SUPPORTED
000010C4                           196      ;MOVE.W #%1010110101010011,CUR_OP_CODE    ;INVALID_OP                SHOULD FAIL
000010C4                           197      
000010C4                           198      *****GROUP B TESTS********** SUPPORTED: EOR, CMP
000010C4                           199      *MOVE.W #%1011101101000110,CUR_OP_CODE    ;EOR                       SHOULD PASS
000010C4                           200      *MOVE.W #%1011110101001101,CUR_OP_CODE    ;CMPM                      SHOULD FAIL
000010C4                           201      *MOVE.W #%1011010001000101,CUR_OP_CODE    ;CMP                       SHOULD PASS
000010C4                           202      *MOVE.W #%1011110011000101,CUR_OP_CODE    ;CMPA                      SHOULD FAIL
000010C4                           203      
000010C4                           204      *****GROUP C TESTS********** SUPPORTED: MULS
000010C4                           205      ;MOVE.W #%1100101011000110,CUR_OP_CODE    ;MULU                      SHOULD FAIL
000010C4                           206      ;MOVE.W #%1100101111000101,CUR_OP_CODE    ;MULS                      SHOULD PASS
000010C4                           207      ;MOVE.W #%1100101100000101,CUR_OP_CODE    ;ABCD                      SHOULD FAIL
000010C4                           208      ;MOVE.W #%1100101110001110,CUR_OP_CODE    ;EXG                       SHOULD FAIL
000010C4                           209      ;MOVE.W #%1100101001000101,CUR_OP_CODE    ;AND                       SHOULD FAIL   
000010C4                           210       
000010C4                           211      *****GROUP D TESTS********** SUPPORTED: ADD, ADDA
000010C4                           212      ;MOVE.W #%1101101101000101,CUR_OP_CODE    ;ADDX                      SHOULD FAIL
000010C4                           213      ;MOVE.W #%1101101011001101,CUR_OP_CODE    ;ADDA                      SHOULD FAIL
000010C4                           214      ;MOVE.W #%1101101001001101,CUR_OP_CODE    ;ADD                       SHOULD PASS
000010C4                           215      
000010C4                           216      *****GROUP E TESTS********** SUPPORTED: LSX, ASX, ROX
000010C4                           217      ;MOVE.W #%1110000011000101,CUR_OP_CODE    ;ASR NO_ROT                SHOULD PASS
000010C4                           218      ;MOVE.W #%1110000111000101,CUR_OP_CODE    ;ASL NO_ROT                SHOULD PASS
000010C4                           219      ;MOVE.W #%1110001011000101,CUR_OP_CODE    ;LSR NO_ROT                SHOULD PASS
000010C4                           220      ;MOVE.W #%1110001111000101,CUR_OP_CODE    ;LSL NO_ROT                SHOULD PASS
000010C4                           221      ;MOVE.W #%1110010011000101,CUR_OP_CODE    ;ROXR NO_ROT               SHOULD FAIL
000010C4                           222      ;MOVE.W #%1110010111000101,CUR_OP_CODE    ;ROXL NO_ROT               SHOULD FAIL
000010C4                           223      ;MOVE.W #%1110011011000101,CUR_OP_CODE    ;ROR NO_ROT                SHOULD PASS
000010C4                           224      ;MOVE.W #%1110011111000101,CUR_OP_CODE    ;ROL NO_ROT                SHOULD PASS    
000010C4                           225      
000010C4                           226      ;MOVE.W #%1110000001000101,CUR_OP_CODE    ;ASR                       SHOULD PASS
000010C4                           227      ;MOVE.W #%1110000101000101,CUR_OP_CODE    ;ASL                       SHOULD PASS
000010C4                           228      ;MOVE.W #%1110001001001101,CUR_OP_CODE    ;LSR                       SHOULD PASS
000010C4                           229      ;MOVE.W #%1110001101001101,CUR_OP_CODE    ;LSL                       SHOULD PASS
000010C4                           230      ;MOVE.W #%1110010001010101,CUR_OP_CODE    ;ROXR                      SHOULD FAIL
000010C4                           231      ;MOVE.W #%1110010101010101,CUR_OP_CODE    ;ROXL                      SHOULD FAIL
000010C4                           232      ;MOVE.W #%1110011001011101,CUR_OP_CODE    ;ROR                       SHOULD PASS
000010C4                           233      ;MOVE.W #%1110011101011101,CUR_OP_CODE    ;ROL                       SHOULD PASS    
000010C4                           234          
000010C4                           235      *****GROUP F TESTS********** NONE SUPPORTED
000010C4                           236      ;MOVE.W #%1111010110101011,CUR_OP_CODE    ;INVALID_OP                SHOULD FAIL
000010C4                           237      
000010C4                           238      
000010C4                           239  ************************************************************************************
000010C4                           240  * PRINTING BUFFER FUNCTION HAS BEEN FINISHED
000010C4                           241  * STATUS: 
000010C4                           242  * IDENTIFICATION FOR ALL OP CODES:      DONE
000010C4                           243  * VALIDATION TESTING FOR ALL OP CODES:  DONE
000010C4                           244  * PRINTING ALL OP CODES TO BUFFER:      DONE
000010C4                           245  * PRINTING SIZE BITS OF ALL OP CODES:   NOT DONE
000010C4                           246  *-----------------------------------------------------------
000010C4                           247  *First Nibble Values (15-12)
000010C4                           248  *Value                  Operations
000010C4                           249  *$0                     GROUP_0: ORI,BCLR (static and dynamic),CMPI --- DONE
000010C4                           250  *$1                     GROUP_1: MOVE.B                             --- DONE
000010C4                           251  *$2                     GROUP_2: MOVE.L, MOVEA.L                    --- DONE
000010C4                           252  *$3                     GROUP_3: MOVE.W, MOVEA.W                    --- DONE
000010C4                           253  *$4                     GROUP_4: LEA,JSR,RTS,NEG,MOVEM              --- DONE
000010C4                           254  *$5                     GROUP_5: SUBQ                               --- DONE
000010C4                           255  *$6                     GROUP_6: Bcc(BCS,BGE,BLT,BVC), BRA          --- DONE
000010C4                           256  *$7                     GROUP_7: INVALID_OP                         --- DONE
000010C4                           257  *$8                     GROUP_8: DIVS, OR                           --- DONE
000010C4                           258  *$9                     GROUP_9: SUB                                --- DONE
000010C4                           259  *$A                     GROUP_A: INVALID_OP                         --- DONE
000010C4                           260  *$B                     GROUP_B: EOR, CMP                           --- DONE
000010C4                           261  *$C                     GROUP_C: MULS                               --- DONE
000010C4                           262  *$D                     GROUP_D: ADD, ADDA                          --- DONE
000010C4                           263  *$E                     GROUP_E: LSR, LSL, ASR, ASL, ROL, ROR       --- DONE
000010C4                           264  *$F                     GROUP_F: INVALID_OP                         --- DONE
000010C4                           265  
000010C4                           266  
000010C4                           267  * OP_JSR_Routine
000010C4                           268  **********************************************************************************
000010C4                           269  * Description: Catalog all supported OP codes into groupings based on their hex
000010C4                           270  * values. Sort the supported OP codes by looking at the first nibble for their
000010C4                           271  * grouping value. Call underlying subroutines for further identification of the
000010C4                           272  * op code.
000010C4                           273  *
000010C4                           274  * Registers used: A6,D0,D1 
000010C4                           275  *
000010C4                           276  * Precondition: Instruction set (size Word) has been loaded in the appropriate
000010C4                           277  * address to be parsed and read.
000010C4                           278  
000010C4                           279  * Postcondition: OP code has been identified as either valid or invalid. If it is
000010C4                           280  * valid, it is stored into A6 and EA parsing methods are called to pass needed
000010C4                           281  * information to EA. If invalid, DATA output will be utilized to indicate so.
000010C4                           282  **********************************************************************************
000010C4                           283  * These valid operand codes refer to the basic supported operand codes
000010C4                           284  * Groups refer to the first nibble value that is supported by the operand
000010C4                           285  LOAD_OP_CODE:
000010C4  3038 4000                286      MOVE.W CUR_OP_CODE,D0
000010C8  11FC 0001 10B5           287      MOVE.B #1,IS_VALID
000010CE  4EB9 000010D4            288      JSR OP_JSR_Routine             ;Use the JSR routine to identify the op code
000010D4                           289      
000010D4                           290  OP_JSR_Routine:
000010D4  48E7 C000                291      MOVEM.L D0-D1, -(SP)           ;Backup registers D0 and D1 by pushing it on the Stack
000010D8  720C                     292      MOVE.L #12, D1                 ;Prepare bit shift left for D1   
000010DA  E2A8                     293      LSR.L   D1,D0                  ;Shift 12 bits to only get first 4 bits for D0
000010DC                           294  
000010DC                           295  GROUP_0:                ;$0| ORI, BCLR (static and dynamic), CMPI                  
000010DC  B03C 0000                296      CMP.B   #$0,D0                 ;Compare first nibble
000010E0  6600 000C                297      BNE     GROUP_1                ;If first nibble value isn't $0, branch to next
000010E4  4EB9 000012FA            298      JSR     C_GROUP_0              ;Jump to group 0 checking if nibble value is $0
000010EA  6000 010C                299      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000010EE                           300      
000010EE                           301  GROUP_1:                ;$1| MOVE.B
000010EE  B03C 0001                302      CMP.B   #$1,D0                 ;Compare first nibble
000010F2  6600 000C                303      BNE     GROUP_2                ;If first nibble value isn't $1, branch to next
000010F6  4EB9 000014C8            304      JSR     C_GROUP_1              ;Jump to group 1 checking if nibble value is $1
000010FC  6000 00FA                305      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001100                           306  
00001100                           307  GROUP_2:                ;$2| MOVE.L, MOVEA.L
00001100  B03C 0002                308      CMP.B   #$2,D0                 ;Compare first nibble
00001104  6600 000C                309      BNE     GROUP_3                ;If first nibble value isn't $2, branch to next
00001108  4EB9 000014F2            310      JSR     C_GROUP_2              ;Jump to group 2 checking if nibble value is $2
0000110E  6000 00E8                311      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001112                           312  
00001112                           313  GROUP_3:                ;$3| MOVE.W, MOVEA.W
00001112  B03C 0003                314      CMP.B   #$3,D0                 ;Compare first nibble
00001116  6600 000C                315      BNE     GROUP_4                ;If first nibble value isn't $3, branch to next
0000111A  4EB9 00001554            316      JSR     C_GROUP_3              ;Jump to group 3 checking if nibble value is $3
00001120  6000 00D6                317      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001124                           318  
00001124                           319  GROUP_4:                ;$4| LEA, JSR, RTS, NEG, MOVEM
00001124  B03C 0004                320      CMP.B   #$4,D0                 ;Compare first nibble
00001128  6600 000C                321      BNE     GROUP_5                ;If first nibble value isn't $4, branch to next
0000112C  4EB9 000015B6            322      JSR     C_GROUP_4              ;Jump to group 4 checking if nibble value is $4
00001132  6000 00C4                323      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001136                           324  
00001136                           325  
00001136                           326  GROUP_5:                ;$5| SUBQ
00001136  B03C 0005                327      CMP.B   #$5,D0                 ;Compare first nibble
0000113A  6600 000C                328      BNE     GROUP_6                ;If first nibble value isn't $5, branch to next
0000113E  4EB9 00001834            329      JSR     C_GROUP_5              ;Jump to group 5 checking if nibble value is $5
00001144  6000 00B2                330      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001148                           331  
00001148                           332  
00001148                           333  GROUP_6:                ;$6| Bcc (BCS,BGE,BLT,BVC) BRA
00001148  B03C 0006                334      CMP.B   #$6,D0                 ;Compare first nibble
0000114C  6600 000C                335      BNE     GROUP_7                ;If first nibble value isn't $6, branch to next
00001150  4EB9 0000189A            336      JSR     C_GROUP_6              ;Jump to group 6 checking if nibble value is $6
00001156  6000 00A0                337      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000115A                           338  
0000115A                           339  
0000115A                           340  GROUP_7:                ;$7| Display: DATA, $WXYZ (Unsupported)
0000115A  B03C 0007                341      CMP.B   #$7,D0                 ;Compare first nibble
0000115E  6600 000C                342      BNE     GROUP_8                ;If first nibble value isn't $7, branch to next
00001162  4EB9 00001940            343      JSR     C_GROUP_7              ;Jump to group 7 checking if nibble value is $7
00001168  6000 008E                344      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000116C                           345  
0000116C                           346  
0000116C                           347  GROUP_8:                ;$8| DIVS, OR
0000116C  B03C 0008                348      CMP.B   #$8,D0                 ;Compare first nibble
00001170  6600 000C                349      BNE     GROUP_9                ;If first nibble value isn't $8, branch to next
00001174  4EB9 00001964            350      JSR     C_GROUP_8              ;Jump to group 8 checking if nibble value is $8
0000117A  6000 007C                351      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
0000117E                           352  
0000117E                           353  
0000117E                           354  GROUP_9:                ;$9| SUB
0000117E  B03C 0009                355      CMP.B   #$9,D0                 ;Compare first nibble
00001182  6600 000C                356      BNE     GROUP_A                ;If first nibble value isn't $9, branch to next
00001186  4EB9 000019BA            357      JSR     C_GROUP_9              ;Jump to group 9 checking if nibble value is $9
0000118C  6000 006A                358      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
00001190                           359  
00001190                           360  
00001190                           361  GROUP_A:                ;$A| Display: DATA, $WXYZ (Unsupported)
00001190  B03C 000A                362      CMP.B   #$A,D0                 ;Compare first nibble
00001194  6600 000C                363      BNE     GROUP_B                ;If first nibble value isn't $A, branch to next
00001198  4EB9 00001A14            364      JSR     C_GROUP_A              ;Jump to group A checking if nibble value is $A
0000119E  6000 0058                365      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011A2                           366  
000011A2                           367  
000011A2                           368  GROUP_B:                ;$B| EOR, CMP
000011A2  B03C 000B                369      CMP.B   #$B,D0                 ;Compare first nibble
000011A6  6600 000C                370      BNE     GROUP_C                ;If first nibble value isn't $B, branch to next
000011AA  4EB9 00001A1C            371      JSR     C_GROUP_B              ;Jump to group B checking if nibble value is $B
000011B0  6000 0046                372      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011B4                           373  
000011B4                           374  
000011B4                           375  GROUP_C:                ;$C| MULS
000011B4  B03C 000C                376      CMP.B   #$C,D0                 ;Compare first nibble
000011B8  6600 000C                377      BNE     GROUP_D                ;If first nibble value isn't $C, branch to next
000011BC  4EB9 00001A7C            378      JSR     C_GROUP_C              ;Jump to group C checking if nibble value is $C
000011C2  6000 0034                379      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011C6                           380  
000011C6                           381  
000011C6                           382  GROUP_D:                 ;$D| ADD, ADDA
000011C6  B03C 000D                383      CMP.B   #$D,D0                 ;Compare first nibble
000011CA  6600 000C                384      BNE     GROUP_E                ;If first nibble value isn't $D, branch to next
000011CE  4EB9 00001B12            385      JSR     C_GROUP_D              ;Jump to group D checking if nibble value is $D
000011D4  6000 0022                386      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011D8                           387  
000011D8                           388  
000011D8                           389  GROUP_E:                ;$E| LSR, LSL, ASR, ASL, ROL, ROR
000011D8  B03C 000E                390      CMP.B   #$E,D0                 ;Compare first nibble
000011DC  6600 000C                391      BNE     GROUP_F                ;If first nibble value isn't $E, branch to next
000011E0  4EB9 00001B54            392      JSR     C_GROUP_E              ;Jump to group E checking if nibble value is $E
000011E6  6000 0010                393      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011EA                           394  
000011EA                           395  
000011EA                           396  GROUP_F:                ;$F| Display: DATA, $WXYZ (Unsupported)
000011EA  B03C 000F                397      CMP.B   #$F,D0                 ;Compare first nibble
000011EE  4EB9 00001CEC            398      JSR     C_GROUP_F              ;Jump to group F checking if nibble value is $F
000011F4  6000 0002                399      BRA     OP_JSR_DONE            ;Finish subroutine once checking is finished
000011F8                           400  
000011F8                           401  
000011F8                           402  OP_JSR_DONE:
000011F8  4CDF 0003                403           MOVEM.L (SP)+,D0-D1       ;Recover register D0
000011FC  4EF9 0000209C            404           JMP EA_ROUTINE
00001202                           405  **********************************************************************************
00001202                           406  
00001202                           407  ********** EA Parsing ************************************************************
00001202                           408  
00001202                           409  * MOVE_LAST_6_BITS_TO_EA
00001202                           410  **********************************************************************************
00001202                           411  * Description: For OP codes with the last 6 bits specified as EA Mode and EA Reg,
00001202                           412  * the last 6 bits will be parsed and moved into the appropriate registers.
00001202                           413  *
00001202                           414  * Registers used: A6,D0,D1,D6,D7 
00001202                           415  
00001202                           416  * Precondition: OP code has been identified with only the last 6 bits for EA,
00001202                           417  * current instruction set is stored into A6.
00001202                           418  
00001202                           419  * Postcondition: Last 6 bits of instruction bit has been isolated and stored. Bits
00001202                           420  * for EA Mode have been stored in D7, Bits for EA Reg been stored in D6.
00001202                           421  **********************************************************************************
00001202                           422  MOVE_LAST_6_BITS_TO_EA:      ;Move last 6 bits from EA field to relevant registers
00001202                           423     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001202  3038 4000                424      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
00001206  323C 000A                425      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
0000120A  E368                     426      LSL.W   D1,D0            ;Truncate to find the last 6 bits
0000120C  E268                     427      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
0000120E  3E00                     428      MOVE.W  D0,D7            ;Move last 6 bits into D7
00001210  323C 0003                429      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
00001214  E26F                     430      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
00001216  3C07                     431      MOVE.W  D7,D6            ;Move the 'upper' 3 bits into D6
00001218  323C 000D                432      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
0000121C  E368                     433      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
0000121E  E268                     434      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
00001220  3E00                     435      MOVE.W  D0,D7            ;Move the 'lower' 3 bits into D7
00001222                           436     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
00001222  4E75                     437      RTS                      ;Return to stack
00001224                           438      
00001224                           439  * FIND_2_BIT_SIZE_TO_EA
00001224                           440  **********************************************************************************
00001224                           441  * Description: For OP codes with 2 bit size fields, the 2 relevant bits (7-6) will 
00001224                           442  * be parsed and moved to the appropriate registers.
00001224                           443  *
00001224                           444  * Registers used: A6,D0,D1,D5
00001224                           445  *
00001224                           446  * Precondition: OP code has been identified with 2 size bit field for EA, current
00001224                           447  * instruction set for OP code is stored in to A6.
00001224                           448  *
00001224                           449  * Postcondition: 2 bit size field has been isolated and stored into D5.
00001224                           450  **********************************************************************************
00001224                           451  FIND_2_BIT_SIZE_TO_EA:      ;Move the 2 bit size field relevant register
00001224                           452     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
00001224  3038 4000                453      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
00001228  323C 0008                454      MOVE.W   #8,D1          ;Prepare 8 bit shift to D1
0000122C  E368                     455      LSL.W    D1,D0          ;Truncate to find the 2 size bits
0000122E  E268                     456      LSR.W    D1,D0          ;Reposition the bits
00001230  323C 0006                457      MOVE.W   #6,D1          ;Prepare 6 bit shift to D1
00001234  E268                     458      LSR.W    D1,D0          ;Truncate to shift 2 bits to a byte
00001236  3800                     459      MOVE.W   D0,D4          ;Move 2 size bits into D5
00001238                           460    ;  MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
00001238  4E75                     461      RTS                     ;Return to stack
0000123A                           462  **********************************************************************************
0000123A                           463  
0000123A                           464  * FIND_3_BIT_REG_TO_EA
0000123A                           465  **********************************************************************************
0000123A                           466  * Description: OP codes with a dynamic 3 bit register in bits 11-9 will be parsed
0000123A                           467  * and have those 3 bits isolated and moved to the appropriate registers.
0000123A                           468  *
0000123A                           469  * Registers used: A6,D0,D1,D5
0000123A                           470  *
0000123A                           471  * Precondition: OP code has been identified with a dynamic 3 bit register in bits
0000123A                           472  * 11-9.
0000123A                           473  *
0000123A                           474  * Postcondition: 3 bit dynamic register has been isolated and stored into D4.
0000123A                           475  **********************************************************************************
0000123A                           476  FIND_3_BIT_REG_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
0000123A                           477     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
0000123A  3038 4000                478      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
0000123E  323C 0004                479      MOVE.W   #4,D1          ;Prepare 4 bit shift to D1
00001242  E368                     480      LSL.W    D1,D0          ;Truncate to find the 2 size bits
00001244  E268                     481      LSR.W    D1,D0          ;Reposition the bits
00001246  323C 0009                482      MOVE.W   #9,D1          ;Prepare 9 bit shift to D1
0000124A  E268                     483      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
0000124C  3A00                     484      MOVE.W   D0,D5          ;Move 3 register bits into D4
0000124E                           485     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
0000124E  4E75                     486      RTS                     ;Return to stack
00001250                           487  **********************************************************************************
00001250                           488  
00001250                           489  * MOVE_AND_MOVEA_PARSE_EA
00001250                           490  **********************************************************************************
00001250                           491  * Description: Special parsing for the SRC and DST Mode/Reg for MOVE/MOVE
00001250                           492  *
00001250                           493  * Registers used: A6,D0,D1,D7,D6,D5,D4
00001250                           494  *
00001250                           495  * Precondition: OP code has been identified with either MOVE or MOVEA
00001250                           496  *
00001250                           497  * Postcondition: Store all relevant EA bits into associated register.
00001250                           498  **********************************************************************************
00001250                           499  MOVE_AND_MOVEA_PARSE_EA:       ;Move the 3 bit dynamic register bits to proper register
00001250                           500     ; MOVEM.L D0-D7/A6, -(SP)  ;Save all changed registers
00001250  3038 4000                501      MOVE.W CUR_OP_CODE,D0           ;Move current OP code into D0
00001254  323C 000A                502      MOVE.W  #10,D1           ;Prepare 10 bit shift to D1
00001258  E368                     503      LSL.W   D1,D0            ;Truncate to find the last 6 bits
0000125A  E268                     504      LSR.W   D1,D0            ;Shift back to get the proper 6 bits
0000125C  3E00                     505      MOVE.W  D0,D7            ;Move last 6 bits into D7, SRC REG MODE
0000125E  323C 0003                506      MOVE.W  #3,D1            ;Prepare 3 bit shift into D1
00001262  E26F                     507      LSR.W   D1,D7            ;Shift 3 bits off D7 to obtain EA Mode
00001264  3A07                     508      MOVE.W  D7,D5            ;Move the 'upper' 3 bits into D6
00001266  323C 000D                509      MOVE.W  #13,D1           ;Prepare 13 bit shift into D1
0000126A  E368                     510      LSL.W   D1,D0            ;Shift D0 left 13 bits to reposition current 3 bits
0000126C  E268                     511      LSR.W   D1,D0            ;Shift D0 right 13 bits to reposition current 3 bits
0000126E  3800                     512      MOVE.W  D0,D4            ;Move the 'lower' 3 bits into D7
00001270                           513      **************MOVING SOURCE*********** TO BE DONE LATER
00001270                           514      ; MOVE.W #%0011 011 001 001 101,(A6)              ;MOVEA.W A5,A3
00001270                           515      ; MOVE.W #%0010 011 001 001 101,D0                ;MOVEA.L A5,A3
00001270                           516       ;Expected values:
00001270                           517      ;D7, DST REG:   011
00001270                           518      ;D6, DST MODE:  001
00001270                           519      ;D5, SRC MODE:  001
00001270                           520      ;D4, SRC REG:   101
00001270                           521      ;00011001
00001270  3038 4000                522      MOVE.W CUR_OP_CODE,D0     ;Move current OP code into D0     
00001274  323C 0004                523      MOVE.W  #4,D1             ;Prepare 4 bit shift to D1
00001278  E368                     524      LSL.W   D1,D0             ;Truncate to find bits 11-6
0000127A  E268                     525      LSR.W   D1,D0             ;Reposition bits
0000127C  323C 0006                526      MOVE.W  #6,D1             ;Prepare 6 bit shift to D1
00001280  E268                     527      LSR.W   D1,D0             ;Truncate the SRC Reg/Mode bits
00001282  323C 0003                528      MOVE.W  #3,D1             ;Prepare a 3 bit shift to D1 for DST Reg/Mode
00001286  3C00                     529      MOVE.W  D0,D6             ;Copy over the current 6 bits to D6
00001288  E268                     530      LSR.W   D1,D0             ;Truncate DST Mode  
0000128A  3E00                     531      MOVE.W  D0,D7             ;Move DST Reg to D7
0000128C  323C 000D                532      MOVE.W  #13,D1             
00001290  E36E                     533      LSL.W   D1,D6             ;Truncate 13 bits in D6
00001292  E26E                     534      LSR.W   D1,D6             ;Reposition D6
00001294                           535                                ;D6 now contains the DST Reg
00001294                           536     ; MOVEM.L (SP)+,D0-D7/A6   ;Restore registers
00001294  4E75                     537      RTS                     ;Return to stack
00001296                           538  **********************************************************************************
00001296                           539  
00001296                           540  *FIND_TRAILING_BITS_TO_EA
00001296                           541  **********************************************************************************
00001296                           542  FIND_TRAILING_BITS_TO_EA:       ;Move the 3 bit dynamic register bits to proper register
00001296                           543     ; MOVEM.L  D0-D5/A6,-(SP) ;Save all changed registers
00001296  3038 4000                544      MOVE.W   CUR_OP_CODE,D0        ;Move current OP code into D0
0000129A  323C 0007                545      MOVE.W   #7,D1          ;Prepare 4 bit shift to D1
0000129E  E368                     546      LSL.W    D1,D0          ;Truncate to find the 2 size bits
000012A0  E268                     547      LSR.W    D1,D0          ;Reposition the bits
000012A2  323C 0006                548      MOVE.W   #6,D1          ;Prepare 9 bit shift to D1
000012A6  E268                     549      LSR.W    D1,D0          ;Truncate to shift 3 bits to a byte
000012A8  3680                     550      MOVE.W   D0,(A3)          ;Move 3 register bits into D4
000012AA                           551     ; MOVEM.L (SP)+,D0-D5/A6  ;Restore registers
000012AA  4E75                     552      RTS                    ;Return to stack
000012AC                           553  **********************************************************************************
000012AC                           554  
000012AC                           555  *PARSE_EA_CONSTANT_BITS
000012AC                           556  **********************************************************************************
000012AC                           557  * Definition: Uses CUR_OP_CODE to shift the proper bits into the global constants
000012AC                           558  * used for EA (MNEMONIC,FIRST_3,SECOND_3,THIRD_3,FOURTH_3. Where MNEMONIC refers
000012AC                           559  * to the first 4 bits of CUR_OP_CODE (15-12), FIRST_3 refers to the first group
000012AC                           560  * of 3 bits (11-9), SECOND_3 refers to the second group of 3 bits (8-6), THIRD_3
000012AC                           561  * refers to the third group of 3 bits (5-3), and FOURTH_3 refers to the fourth
000012AC                           562  * group of 3 bits (2-0). Shifts CUR_OP_CODE bits to initialize constants.
000012AC                           563  *
000012AC                           564  * Registers used: D0,D1
000012AC                           565  *
000012AC                           566  * Precondition: CUR_OP_CODE has been set with an 4 hex instruction set
000012AC                           567  * 
000012AC                           568  * Postcondition: MNEMONIC, FIRST_3, SECOND_3, THIRD_3, FOURTH_3 have been set
000012AC                           569  * to the corresponding values.
000012AC                           570  **********************************************************************************
000012AC                           571  PARSE_EA_CONSTANT_BITS:
000012AC                           572      *MNEMONIC SHIFT
000012AC  3038 4000                573      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D0
000012B0  323C 000C                574      MOVE.W #12,D1               ;Prepare a bit shift of 12 into D1
000012B4  E268                     575      LSR.W D1,D0                 ;Shift 12 bits from D0 right
000012B6  11C0 1000                576      MOVE.B D0,MNEMONIC          ;Set MNEMONIC to D0
000012BA                           577      *FIRST_3 SHIFT
000012BA  323C 0009                578      MOVE.W #9,D1                ;Prepare a bit shift of 9 into D1
000012BE  3038 4000                579      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012C2  E948                     580      LSL.W #4,D0                 ;Shift out bits 15-12 in D0
000012C4  E848                     581      LSR.W #4,D0                 ;Reposition D0
000012C6  E268                     582      LSR.W  D1,D0                ;Shift D0 9 bits right
000012C8  11C0 1004                583      MOVE.B D0,FIRST_3           ;Set FIRST_3 to D0
000012CC                           584      *SECOND_3 SHIFT
000012CC  3038 4000                585      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012D0  EF48                     586      LSL.W #7,D0                 ;Shift out bits 15-9 in D0
000012D2  EE48                     587      LSR.W #7,D0                 ;Reposition D0
000012D4  EC48                     588      LSR.W #6,D0                 ;Shift D0 6 bits right
000012D6  11C0 1005                589      MOVE.B D0,SECOND_3          ;Set SECOND_3 to D0
000012DA                           590      *THIRD_3 SHIFT
000012DA  3038 4000                591      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012DE  E648                     592      LSR.W #3,D0                 ;Shift D0 3 bits right
000012E0  323C 000D                593      MOVE.W #13,D1               ;Prepare a 13 bit shift into D1
000012E4  E368                     594      LSL.W D1,D0                 ;Truncate first 13 bits of D0
000012E6  E268                     595      LSR.W D1,D0                 ;Reposition D0
000012E8  11C0 1006                596      MOVE.B D0,THIRD_3           ;Set THIRD_3 to D0
000012EC                           597      *FOURTH_3 SHIFT
000012EC  3038 4000                598      MOVE.W CUR_OP_CODE,D0       ;Load in current instruction set into D
000012F0  E368                     599      LSL.W D1,D0                 ;Grab the fourth 3-bit group
000012F2  E268                     600      LSR.W D1,D0                 ;Shift D0 back into position
000012F4  11C0 1007                601      MOVE.B D0,FOURTH_3          ;Set FOURTH_3 to Do
000012F8  4E75                     602      RTS                         ;Return to stack
000012FA                           603  **********************************************************************************
000012FA                           604  ********** End of EA Parsing *****************************************************
000012FA                           605  
000012FA                           606  *******************JMP LABELS ****************************************************
000012FA                           607  * Labelling for group codes will be in the following format
000012FA                           608  
000012FA                           609  * <JMP Labelname>
000012FA                           610  ********************************************************************************
000012FA                           611  * Checking List Order (If more than one value)
000012FA                           612  * Operand1 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
000012FA                           613  * Operand2 - $<nibble value>, a-b <specifier>, c-d <specifier> ...
000012FA                           614  
000012FA                           615  * Where a-b will refer to the bit corresponding bit value in the instruction
000012FA                           616  * format, and a specifier will be attached such as Size, EA Mode, SRC Reg, etc
000012FA                           617  * to clarify what a specific bit range means.
000012FA                           618  * Checking order refers to what order the checks will be performed in. 
000012FA                           619  * Any other code outside of the listed ones will be INVALID_OP.
000012FA                           620  ********************************************************************************
000012FA                           621  
000012FA                           622  ********************************************************************************
000012FA                           623  * Global Field Descriptions
000012FA                           624  * Size Field: Byte = 00 Word = 01 Long = 10
000012FA                           625  * EA Mode: Refer to EA Address Modes
000012FA                           626  * EA Reg: 3-bit input that is mapped to the respective binary value
000012FA                           627  ********************************************************************************
000012FA                           628  
000012FA                           629  * GROUP_0                      
000012FA                           630  ********************************************************************************
000012FA                           631  * Description: Checks for the following listed OP codes to be present or not
000012FA                           632  * Supported OP codes:
000012FA                           633  * ORI: $00, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
000012FA                           634  * CMPI: $0C, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
000012FA                           635  * Dynamic BCLR: $0, 11-9 Register, 8-6 %110, 5-3 EA Mode, 2-0 EA Reg
000012FA                           636  * Static BCLR: $01, 7-6 10, 5-3 EA Mode, 2-0 EA Reg
000012FA                           637  *
000012FA                           638  * Registers used: D0
000012FA                           639  *
000012FA                           640  * Precondition: First nibble has been identified as $0
000012FA                           641  *
000012FA                           642  * Postcondition: Parses proper OP code with a nibble value of $0 or finds an
000012FA                           643  * invalid OP code. After a successful parse loading for EA values will be done
000012FA                           644  * through a subroutine.
000012FA                           645  * 
000012FA                           646  * Unsupported OP codes:
000012FA                           647  * ORI_TO_CCR, ORI_TO_SR, ANDI_TO_CCR, ANDI_TO_SR, ANDI, SUBI, ADDI, EORI_TO_CCR
000012FA                           648  * EORI_TO_SR, EORI, STATIC_BTST, STATIC_BCHG, STATIC_BSET, DYNAMIC_BTST,
000012FA                           649  * DYNAMIC_BCHG, DYNAMIC_BSET, MOVEP 
000012FA                           650  ********************************************************************************
000012FA                           651  C_GROUP_0:
000012FA  48E7 C000                652      MOVEM.L D0-D1, -(SP)            ;Backup registers
000012FE                           653      
000012FE                           654  *Unsupported OP codes that are fully static in bits
000012FE                           655  CHECK_OP_ORI_TO_CCR:
000012FE  3038 4000                656      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001302  B07C 003C                657      CMP.W #$003C,D0                 ;Compare the direct full bits
00001306  6700 01B4                658      BEQ GROUP0_INVALID              ;INVALID OP code found
0000130A  6600 0002                659      BNE CHECK_OP_ORI_TO_SR          ;Check next routine
0000130E                           660      
0000130E                           661  CHECK_OP_ORI_TO_SR:
0000130E  3038 4000                662      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001312  B07C 007C                663      CMP.W #$007C,D0                 ;Compare the direct full bits
00001316  6700 01A4                664      BEQ GROUP0_INVALID              ;INVALID OP code found
0000131A  6600 0002                665      BNE CHECK_OP_ANDI_TO_CCR        ;Check next routine
0000131E                           666      
0000131E                           667  CHECK_OP_ANDI_TO_CCR:
0000131E  3038 4000                668      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001322  B07C 023C                669      CMP.W #$023C,D0                 ;Compare the direct full bits
00001326  6700 0194                670      BEQ GROUP0_INVALID              ;INVALID OP code found
0000132A  6600 0002                671      BNE CHECK_OP_ANDI_TO_SR         ;Check next routine
0000132E                           672      
0000132E                           673  CHECK_OP_ANDI_TO_SR:
0000132E  3038 4000                674      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001332  B07C 027C                675      CMP.W #$027C,D0                 ;Compare the direct full bits
00001336  6700 0184                676      BEQ GROUP0_INVALID              ;INVALID OP code found
0000133A  6600 0022                677      BNE CHECK_OP_ANDI               ;Check next routine
0000133E                           678  
0000133E                           679  CHECK_OP_EORI_TO_CCR:
0000133E  3038 4000                680      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001342  B07C 0A3C                681      CMP.W #$0A3C,D0                 ;Compare the direct full bits
00001346  6700 0174                682      BEQ GROUP0_INVALID              ;INVALID OP code found
0000134A  6600 0002                683      BNE CHECK_OP_EORI_TO_SR         ;Check next routine
0000134E                           684      
0000134E                           685  CHECK_OP_EORI_TO_SR:
0000134E  3038 4000                686      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001352  B07C 0A7C                687      CMP.W #$0A7C,D0                 ;Compare the direct full bits
00001356  6700 0164                688      BEQ GROUP0_INVALID              ;INVALID OP code found
0000135A  6600 0002                689      BNE CHECK_OP_ANDI               ;Check next routine
0000135E                           690      
0000135E                           691  *Unsupported OP codes to check with partial static bits
0000135E                           692  CHECK_OP_ANDI:
0000135E  3038 4000                693      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001362  0240 FF00                694      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001366  B07C 0200                695      CMP.W #$0200,D0                 ;Compare the appropriate masked bits
0000136A  6700 0150                696      BEQ GROUP0_INVALID              ;INVALID OP code found
0000136E  6600 0002                697      BNE CHECK_OP_SUBI               Check next routine
00001372                           698      
00001372                           699  CHECK_OP_SUBI:
00001372  3038 4000                700      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001376  0240 FF00                701      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
0000137A  B07C 0400                702      CMP.W #$0400,D0                 ;Compare the appropriate masked bits
0000137E  6700 013C                703      BEQ GROUP0_INVALID              ;INVALID OP code found
00001382  6600 0002                704      BNE CHECK_OP_ADDI               ;Check next routine
00001386                           705  
00001386                           706  CHECK_OP_ADDI:
00001386  3038 4000                707      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000138A  0240 FF00                708      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
0000138E  B07C 0600                709      CMP.W #$0600,D0                 ;Compare the appropriate masked bits
00001392  6700 0128                710      BEQ GROUP0_INVALID              ;INVALID OP code found
00001396  6600 0002                711      BNE CHECK_OP_EORI               ;Check next routine 
0000139A                           712  
0000139A                           713  CHECK_OP_EORI:
0000139A  3038 4000                714      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000139E  0240 FF00                715      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
000013A2  B07C 0A00                716      CMP.W #$0A00,D0                 ;Compare the appropriate masked bits
000013A6  6700 0114                717      BEQ GROUP0_INVALID              ;INVALID OP code found
000013AA  6600 0002                718      BNE CHECK_OP_STATIC_BTST        ;Check next routine
000013AE                           719      
000013AE                           720  CHECK_OP_STATIC_BTST:
000013AE  3038 4000                721      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000013B2  0240 FFC0                722      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
000013B6  B07C 0800                723      CMP.W #$0800,D0                 ;Compare the appropriate masked bits
000013BA  6700 0100                724      BEQ GROUP0_INVALID              ;INVALID OP code found
000013BE  6600 0002                725      BNE CHECK_OP_STATIC_BCHG        ;Check next routine
000013C2                           726      
000013C2                           727  CHECK_OP_STATIC_BCHG:
000013C2  3038 4000                728      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000013C6  0240 FFC0                729      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
000013CA  B07C 0840                730      CMP.W #$0840,D0                 ;Compare the appropriate masked bits
000013CE  6700 00EC                731      BEQ GROUP0_INVALID              ;INVALID OP code found
000013D2  6600 0002                732      BNE CHECK_OP_STATIC_BSET        ;Check next routine
000013D6                           733  
000013D6                           734  CHECK_OP_STATIC_BSET:
000013D6  3038 4000                735      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000013DA  0240 FFC0                736      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
000013DE  B07C 08C0                737      CMP.W #$08C0,D0                 ;Compare the appropriate masked bits
000013E2  6700 00D8                738      BEQ GROUP0_INVALID              ;INVALID OP code found   
000013E6  6600 0002                739      BNE CHECK_OP_DYNAMIC_BTST       ;Check next routine
000013EA                           740  
000013EA                           741  CHECK_OP_DYNAMIC_BTST:
000013EA  3038 4000                742      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000013EE  0240 F1C0                743      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
000013F2  B07C 0100                744      CMP.W #$0100,D0                 ;Compare the appropriate masked bits
000013F6  6700 00C4                745      BEQ GROUP0_INVALID              ;INVALID OP code found
000013FA  6600 0002                746      BNE CHECK_OP_DYNAMIC_BCHG       ;Check next routine
000013FE                           747  
000013FE                           748  CHECK_OP_DYNAMIC_BCHG:
000013FE  3038 4000                749      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001402  0240 F1C0                750      ANDI.W #$F1C0,D0                ;Mask relevant bits to D0
00001406  B07C 0140                751      CMP.W #$0140,D0                 ;Compare the appropriate masked bits 
0000140A  6700 00B0                752      BEQ GROUP0_INVALID              ;INVALID OP code found
0000140E  6600 0002                753      BNE CHECK_OP_DYNAMIC_BSET       ;Check next routine
00001412                           754      
00001412                           755  CHECK_OP_DYNAMIC_BSET:
00001412                           756  
00001412  3038 4000                757      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001416  0240 F1C0                758      ANDI.W  #$F1C0,D0               ;Mask relevant bits to D0
0000141A  B07C 01C0                759      CMP.W   #$01C0,D0               ;Compare the appropriate masked bits 
0000141E  6700 0006                760      BEQ     BIT_CHECK_MOVEP         ;Check special case for MOVEP
00001422  6600 001C                761      BNE     CHECK_OP_MOVEP          ;Check next routine
00001426                           762  
00001426                           763  BIT_CHECK_MOVEP:                                ;This is a special case check for MOVEP
00001426  3038 4000                764      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000142A  323C 000A                765      MOVE.W  #10,D1                  ;Prepare a 10-bit shift
0000142E  E368                     766      LSL.W   D1,D0                   ;Shift out 10 bits left 
00001430  E268                     767      LSR.W   D1,D0                   ;Reposition D0 for last 6 bits
00001432  E648                     768      LSR.W   #3,D0                   ;Shift out 3 bits right, D0 contains bits 5-3
00001434  B07C 0001                769      CMP.W   #$1,D0                  ;Compare bits to D0
00001438  6700 0006                770      BEQ     CHECK_OP_MOVEP          ;If bits are $1 then it's addressing, goto MOVEP
0000143C  6600 007E                771      BNE     GROUP0_INVALID          ;If not then it's DYNAMIC_BSET which is invalid                                                    
00001440                           772      
00001440                           773  CHECK_OP_MOVEP:
00001440  3038 4000                774      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001444  0240 F138                775      ANDI.W #$F138,D0                ;Mask relevant bits to D0
00001448  B07C 0108                776      CMP.W #$0108,D0                 ;Compare the appropriate masked bits
0000144C  6700 08A6                777      BEQ INVALID_OP                  ;INVALID OP code found
00001450  6600 0002                778      BNE CHECK_OP_ORI                ;Check next routine
00001454                           779  
00001454                           780  *Supported OP code checks
00001454                           781  CHECK_OP_ORI:
00001454  3038 4000                782      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001458  0240 FF00                783      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
0000145C  B07C 0000                784      CMP.W   #$0000,D0               ;Compare the appropriate masked bits     
00001460  6600 000C                785      BNE     CHECK_OP_CMPI           ;Branch to next comparison if not equal
00001464  4EB9 00001D22            786      JSR     PRINT_OP_ORI            ;Print the OP code if equal    
0000146A  6000 0056                787      BRA     GROUP0_SUCCESS          ;Finish routine
0000146E                           788      
0000146E                           789  CHECK_OP_CMPI:
0000146E  3038 4000                790      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
00001472  0240 FF00                791      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001476  B07C 0C00                792      CMP.W   #$0C00,D0               ;Compare the appropriate masked bits   
0000147A  6600 000C                793      BNE     CHECK_OP_STATIC_BCLR    ;Branch to next comparison if not equal       
0000147E  4EB9 00001D32            794      JSR     PRINT_OP_CMPI           ;Print the OP code if equal
00001484  6000 003C                795      BRA     GROUP0_SUCCESS          ;Finish routine
00001488                           796      
00001488                           797  CHECK_OP_STATIC_BCLR:
00001488  3038 4000                798      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
0000148C  0240 FF00                799      ANDI.W  #$FF00,D0               ;Mask relevant bits to D0
00001490  B07C 0800                800      CMP.W   #$0800,D0               ;Compare the appropriate masked bits
00001494  6600 000C                801      BNE     CHECK_OP_DYNAMIC_BCLR   ;Branch to next comparison if not equal
00001498  4EB9 00001D42            802      JSR     PRINT_OP_STATIC_BCLR    ;Print the OP code if equal
0000149E  6000 0022                803      BRA     GROUP0_SUCCESS          ;Finish routine
000014A2                           804      
000014A2                           805  CHECK_OP_DYNAMIC_BCLR:
000014A2  3038 4000                806      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0
000014A6  0240 0180                807      ANDI.W  #$0180,D0               ;Mask relevant bits to D0
000014AA  B07C 0180                808      CMP.W   #$0180,D0               ;Compare the appropriate masked bits
000014AE  6600 000C                809      BNE     GROUP0_INVALID          ;If not equal this must be an invalid OP code
000014B2  4EB9 00001D52            810      JSR     PRINT_OP_DYNAMIC_BCLR   ;Print the OP code if equal
000014B8  6000 0008                811      BRA     GROUP0_SUCCESS          ;Finish routine
000014BC                           812  
000014BC                           813  GROUP0_INVALID:                     ;Checks have been finished, invalid OP code has been found
000014BC  4EB9 00001CF4            814      JSR INVALID_OP                  ;INVALID OP code found
000014C2                           815      
000014C2                           816  GROUP0_SUCCESS:                     ;Checks have been finished,a valid OP code has been found
000014C2  4CDF 0003                817      MOVEM.L (SP)+,D0-D1             ;Restore registers
000014C6  4E75                     818      RTS                             ;Return to stack
000014C8                           819      
000014C8                           820  * GROUP_1                      
000014C8                           821  ********************************************************************************
000014C8                           822  * Supported OP code:
000014C8                           823  * MOVE.B: $1, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000014C8                           824  ********************************************************************************
000014C8                           825  C_GROUP_1:
000014C8  48E7 C000                826      MOVEM.L D0-D1,-(SP)             ;Save registers to stack
000014CC                           827  
000014CC                           828  CHECK_OP_MOVE_B:
000014CC  3038 4000                829      MOVE.W  CUR_OP_CODE,D0          ;Move current instruction set into D0          
000014D0  0240 F000                830      ANDI.W  #$F000,D0               ;Mask relevant bits to D0
000014D4  B07C 1000                831      CMP.W   #$1000,D0               ;Compare the appropriate masked bits 
000014D8  6600 000C                832      BNE     GROUP1_INVALID          ;Invalid OP code has been found
000014DC  4EB9 00001D62            833      JSR     PRINT_OP_MOVEB          ;Print the OP code if equal
000014E2  6000 0008                834      BRA     GROUP1_SUCCESS          ;Finish routine
000014E6                           835      
000014E6                           836  GROUP1_INVALID:
000014E6  4EB9 00001CF4            837      JSR INVALID_OP                  ;Invalid OP code found
000014EC                           838      
000014EC                           839  GROUP1_SUCCESS:
000014EC  4CDF 0003                840      MOVEM.L (SP)+,D0-D1             ;Restore register
000014F0  4E75                     841      RTS                             ;Return to stack
000014F2                           842  * GROUP_2
000014F2                           843  ********************************************************************************
000014F2                           844  * Supported OP codes:
000014F2                           845  * MOVEA.L: $2, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
000014F2                           846  * MOVE.L: $2, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
000014F2                           847  ********************************************************************************
000014F2                           848  C_GROUP_2:
000014F2  48E7 E000                849      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
000014F6                           850  
000014F6                           851  CHECK_OP_MOVEA_L:
000014F6  3038 4000                852      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0  
000014FA  0240 F000                853      ANDI.W #$F000,D0                ;Mask relevant bits to D0
000014FE  B07C 2000                854      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
00001502  4EF9 00001508            855      JMP FIND_MOVEA_L_DIFFERENCE     ;Branch always to check 
00001508                           856      
00001508                           857  FIND_MOVEA_L_DIFFERENCE:            ;Finds difference between MOVEA and MOVE
00001508  3038 4000                858      MOVE.W   CUR_OP_CODE,D0         ;Move current OP code into D0
0000150C  323C 0007                859      MOVE.W   #7,D1                  ;Prepare 7 bit shift to D1
00001510  E368                     860      LSL.W    D1,D0                  ;Truncate to find the 3 address mode bits
00001512  E268                     861      LSR.W    D1,D0                  ;Reposition the bits
00001514  323C 0006                862      MOVE.W   #6,D1                  ;Prepare 6 bit shift to D1
00001518  E268                     863      LSR.W    D1,D0                  ;Truncate to shift 3 bits to a register
0000151A  3400                     864      MOVE.W   D0,D2                  ;Move 3 address mode bits into D6
0000151C  B47C 0001                865      CMP.W   #$1,D2                  ;Check if the address mode value is MOVEA
00001520  6600 000C                866      BNE     CHECK_OP_MOVE_L         ;Branch if not equal to check MOVE
00001524  4EB9 00001D72            867      JSR     PRINT_OP_MOVEA_L        ;Print the OP code if it's a match
0000152A  6000 0022                868      BRA     GROUP2_SUCCESS          ;Finish routine
0000152E                           869      
0000152E                           870      
0000152E                           871  CHECK_OP_MOVE_L:
0000152E  3038 4000                872      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001532  0240 F000                873      ANDI.W #$F000,D0                ;Mask relevant bits to D0
00001536  B07C 2000                874      CMP.W #$2000,D0                 ;Compare the appropriate masked bits
0000153A  6600 000C                875      BNE GROUP2_INVALID              ;If not equal, OP code is invalid
0000153E  4EB9 00001D82            876      JSR PRINT_OP_MOVE_L             ;Print out MOVE.L
00001544  6000 0008                877      BRA GROUP2_SUCCESS              ;Finish routine
00001548                           878      
00001548                           879  GROUP2_INVALID:    
00001548  4EB9 00001CF4            880      JSR INVALID_OP                  ;Invalid OP code found
0000154E                           881      
0000154E                           882  GROUP2_SUCCESS:
0000154E  4CDF 0007                883      MOVEM.L (SP)+,D0-D2             ;Restore register
00001552  4E75                     884      RTS                             ;Return to stack
00001554                           885  * GROUP_3
00001554                           886  ********************************************************************************
00001554                           887  * Supported OP codes:
00001554                           888  * MOVEA.W: $3, 11-9 DST Reg, 8-6 %001, 5-3 SRC Mode, 2-0 SRC Reg
00001554                           889  * MOVE.W: $3, 11-9 DST Reg, 8-6 DST Mode, 5-3 SRC Mode, 2-0 SRC Reg
00001554                           890  ********************************************************************************
00001554                           891  C_GROUP_3:
00001554  48E7 E000                892      MOVEM.L D0-D2,-(SP)             ;Save registers to stack
00001558                           893      
00001558                           894  CHECK_OP_MOVEA_W:
00001558  3038 4000                895      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
0000155C  0240 F000                896      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00001560  B07C 3000                897      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
00001564  4EF9 0000156A            898      JMP      FIND_MOVEA_W_DIFF     ;Custom routine to differentiate MOVE and MOVEA
0000156A                           899  
0000156A                           900      
0000156A                           901  FIND_MOVEA_W_DIFF:                 ;Finds difference between MOVEA and MOVE
0000156A  3038 4000                902      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
0000156E  323C 0007                903      MOVE.W   #7,D1                 ;Prepare 7 bit shift to D1
00001572  E368                     904      LSL.W    D1,D0                 ;Truncate to find the 3 address mode bits
00001574  E268                     905      LSR.W    D1,D0                 ;Reposition the bits
00001576  323C 0006                906      MOVE.W   #6,D1                 ;Prepare 6 bit shift to D1
0000157A  E268                     907      LSR.W    D1,D0                 ;Truncate to shift 3 bits to a register
0000157C  3400                     908      MOVE.W   D0,D2                 ;Move 3 address mode bits into D6
0000157E  B47C 0001                909      CMP.W    #$1,D2                ;Check if the address mode value is MOVEA
00001582  6600 000C                910      BNE      CHECK_OP_MOVE_W       ;If bits do not match, try MOVE 
00001586  4EB9 00001D92            911      JSR      PRINT_OP_MOVEA_W      ;Print the OP code if it's a match
0000158C  6000 0022                912      BRA      GROUP3_SUCCESS        ;Finish routine
00001590                           913      
00001590                           914  CHECK_OP_MOVE_W:
00001590  3038 4000                915      MOVE.W   CUR_OP_CODE,D0        ;Move current instruction set into D0
00001594  0240 F000                916      ANDI.W   #$F000,D0             ;Mask relevant bits to D0
00001598  B07C 3000                917      CMP.W    #$3000,D0             ;Compare the appropriate masked bits
0000159C  6600 000C                918      BNE      GROUP3_INVALID        ;INVALID OP code found
000015A0  4EB9 00001DA2            919      JSR      PRINT_OP_MOVE_W       ;Print the OP code if it's a match
000015A6  6000 0008                920      BRA      GROUP3_SUCCESS        ;Finish routine
000015AA                           921      
000015AA                           922  GROUP3_INVALID:
000015AA  4EB9 00001CF4            923      JSR INVALID_OP                 ;INVALID OP code found
000015B0                           924  
000015B0                           925  GROUP3_SUCCESS:
000015B0  4CDF 0007                926      MOVEM.L (SP)+,D0-D2            ;Restore registers from stack
000015B4  4E75                     927      RTS                            ;Return to stack
000015B6                           928  
000015B6                           929  * GROUP_4
000015B6                           930  ********************************************************************************
000015B6                           931  * Supported OP codes:
000015B6                           932  * LEA: $4, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
000015B6                           933  * JSR: $4E, 7-6 %10, 5-3 EA Mode, 2-0 EA Reg 
000015B6                           934  * RTS: $4E75
000015B6                           935  * NEG: $44, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
000015B6                           936  * MOVEM: $4, 11 %1, 10 %D, 9-7 %001, 6 S, 5-3 EA Mode, 2-0 EA Reg
000015B6                           937  * %D = 0 , Register to Memory, 1 Memory to Register
000015B6                           938  * Unsupported OP codes: MOVE_FROM_SR, MOVE_TO_CCR, MOVE_TO_SR, NEGX, CLR, NOT
000015B6                           939  * EXT, NBCD, SWAP, PEA, ILLEGAL, TAS, TST, TRAP, LINK, UNLK, MOVE_USP, RESET,
000015B6                           940  * NOP, STOP, RTE, TRAPV, RTR, JMP, CHK
000015B6                           941  ********************************************************************************
000015B6                           942  C_GROUP_4:
000015B6  2F00                     943      MOVE.L  D0,-(SP)            ;Save registers
000015B8                           944      
000015B8                           945  *Unsupported OP codes to check that are full static bits
000015B8                           946  CHECK_OP_STOP:
000015B8  3038 4000                947      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000015BC  B07C 4E72                948      CMP.W  #$4E72,D0                ;Compare the appropriate bits
000015C0  6700 0266                949      BEQ    GROUP4_INVALID           ;INVALID OP code found
000015C4  6600 0002                950      BNE    CHECK_OP_RESET           ;Check next OP code
000015C8                           951      
000015C8                           952  CHECK_OP_RESET:
000015C8  3038 4000                953      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000015CC  B07C 4E70                954      CMP.W  #$4E70,D0                ;Compare the appropriate bits
000015D0  6700 0256                955      BEQ    GROUP4_INVALID           ;INVALID OP code found
000015D4  6600 0002                956      BNE    CHECK_OP_NOP             ;Check next OP code
000015D8                           957      
000015D8                           958  CHECK_OP_NOP:
000015D8  3038 4000                959      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000015DC  B07C 4E71                960      CMP.W  #$4E71,D0                ;Compare the appropriate bits
000015E0  6700 0246                961      BEQ    GROUP4_INVALID           ;INVALID OP code found
000015E4  6600 0002                962      BNE    CHECK_OP_ILLEGAL         ;Check next OP code
000015E8                           963      
000015E8                           964  CHECK_OP_ILLEGAL:
000015E8  3038 4000                965      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000015EC  B07C 4AFC                966      CMP.W  #$4AFC,D0                ;Compare the appropriate bits
000015F0  6700 0236                967      BEQ    GROUP4_INVALID           ;INVALID OP code found
000015F4  6600 0002                968      BNE    CHECK_OP_RTE             ;Check next OP code
000015F8                           969      
000015F8                           970  CHECK_OP_RTE:    
000015F8  3038 4000                971      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000015FC  B07C 4E73                972      CMP.W #$4E73,D0                 ;Compare the appropriate bits
00001600  6700 0226                973      BEQ   GROUP4_INVALID            ;INVALID OP code found
00001604  6600 0002                974      BNE   CHECK_OP_TRAPV            ;Check next OP code
00001608                           975      
00001608                           976  CHECK_OP_TRAPV:
00001608  3038 4000                977      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000160C  B07C 4E76                978      CMP.W  #$4E76,D0                ;Compare the appropriate bits
00001610  6700 0216                979      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001614  6600 0002                980      BNE    CHECK_OP_RTR             ;Check next OP code
00001618                           981      
00001618                           982  CHECK_OP_RTR:
00001618  3038 4000                983      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000161C  B07C 4E77                984      CMP.W #$4E77,D0                 ;Compare the appropriate bits
00001620  6700 0206                985      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001624  6600 0002                986      BNE    CHECK_OP_MOVE_FROM_SR    ;Check next OP code
00001628                           987  
00001628                           988  
00001628                           989  *Unsupported OP codes to check that have partial static bits
00001628                           990  CHECK_OP_MOVE_FROM_SR:
00001628  3038 4000                991      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000162C  0240 FFC0                992      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001630  B07C 40C0                993      CMP.W  #$40C0,D0                ;Compare the appropriate masked bits
00001634  6700 01F2                994      BEQ    GROUP4_INVALID           ;INVALID OP code found  
00001638  6600 0002                995      BNE    CHECK_OP_MOVE_TO_CCR     ;Check next OP code
0000163C                           996      
0000163C                           997  CHECK_OP_MOVE_TO_CCR:
0000163C  3038 4000                998      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001640  0240 FFC0                999      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001644  B07C 44C0               1000      CMP.W  #$44C0,D0                ;Compare the appropriate masked bits
00001648  6700 01DE               1001      BEQ    GROUP4_INVALID           ;INVALID OP code found
0000164C  6600 0002               1002      BNE    CHECK_OP_MOVE_TO_SR      ;Check next OP code
00001650                          1003      
00001650                          1004  CHECK_OP_MOVE_TO_SR:
00001650  3038 4000               1005      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001654  0240 FFC0               1006      ANDI.W #$FFC0,D0                ;Mask relevant bits to D0
00001658  B07C 46C0               1007      CMP.W  #$46C0,D0                ;Compare the appropriate masked bits
0000165C  6700 01CA               1008      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001660  6600 0002               1009      BNE    CHECK_OP_NEGX            ;Check next OP code
00001664                          1010      
00001664                          1011  CHECK_OP_NEGX:
00001664  3038 4000               1012      MOVE.W CUR_OP_CODE,D0            ;Move current instruction set into D0
00001668  0240 FF00               1013      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
0000166C  B07C 4000               1014      CMP.W  #$4000,D0                ;Compare the appropriate masked bits
00001670  6700 01B6               1015      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001674  6600 0002               1016      BNE    CHECK_OP_CLR             ;Check next OP code
00001678                          1017      
00001678                          1018  CHECK_OP_CLR:
00001678  3038 4000               1019      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
0000167C  0240 FF00               1020      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001680  B07C 4200               1021      CMP.W  #$4200,D0                ;Compare the appropriate masked bits
00001684  6700 01A2               1022      BEQ    GROUP4_INVALID           ;INVALID OP code found
00001688  6600 0002               1023      BNE    CHECK_OP_NOT             ;Check next OP code
0000168C                          1024      
0000168C                          1025  CHECK_OP_NOT:
0000168C  3038 4000               1026      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
00001690  0240 FF00               1027      ANDI.W #$FF00,D0                ;Mask relevant bits to D0
00001694  B07C 4600               1028      CMP.W  #$4600,D0                ;Compare the appropriate masked bits
00001698  6700 018E               1029      BEQ    GROUP4_INVALID           ;INVALID OP code found
0000169C  6600 0002               1030      BNE    CHECK_OP_EXT             ;Check next OP code
000016A0                          1031      
000016A0                          1032  CHECK_OP_EXT:
000016A0  3038 4000               1033      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000016A4  0240 FF80               1034      ANDI.W #$FF80,D0                ;Mask relevant bits to D0
000016A8  B07C 4880               1035      CMP.W  #$4880,D0                ;Compare the appropriate masked bits
000016AC  6700 017A               1036      BEQ    GROUP4_INVALID           ;INVALID OP code BIT_CHECK_EXT
000016B0  6600 001C               1037      BNE    CHECK_OP_NBCD            ;Check next OP code
000016B4                          1038  
000016B4                          1039  BIT_CHECK_EXT:    
000016B4  3038 4000               1040      MOVE.W CUR_OP_CODE,D0           ;This is a special case to check against MOVEM
000016B8  323C 000A               1041      MOVE.W #10,D1
000016BC  E368                    1042      LSL.W  D1,D0
000016BE  E068                    1043      LSR.W  D0,D0
000016C0  E648                    1044      LSR.W  #3,D0
000016C2  B078 0000               1045      CMP.W  %000,D0
000016C6  6700 0160               1046      BEQ    GROUP4_INVALID           ;This means that this OP code is EXT
000016CA  6600 0142               1047      BNE    CHECK_OP_MOVEM           ;This is the only other possibility 
000016CE                          1048      
000016CE                          1049  CHECK_OP_NBCD:
000016CE  3038 4000               1050      MOVE.W CUR_OP_CODE,D0           ;Move current instruction set into D0
000016D2  0240 FFC0               1051      ANDI.W #$FFC0,D0            
000016D6  B07C 4800               1052      CMP.W  #$4800,D0
000016DA  6700 014C               1053      BEQ    GROUP4_INVALID
000016DE  6600 0002               1054      BNE    CHECK_OP_SWAP
000016E2                          1055      
000016E2                          1056  CHECK_OP_SWAP:                  ; This must go before CHECK_OP PEA as first 3 nibbles can be equivalent
000016E2  3038 4000               1057      MOVE.W CUR_OP_CODE,D0       ;Move current instruction set into D0
000016E6  0240 FF48               1058      ANDI.W #$FF48,D0
000016EA  B07C 4840               1059      CMP.W  #$4840,D0
000016EE  6700 0138               1060      BEQ    GROUP4_INVALID
000016F2  6600 0002               1061      BNE    CHECK_OP_PEA
000016F6                          1062   
000016F6                          1063  CHECK_OP_PEA:               ; This must go after CHECK_OP_SWAP as first 3 nibbles can be equivalent
000016F6  3038 4000               1064      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000016FA  0240 FF40               1065      ANDI.W #$FF40,D0
000016FE  B07C 4840               1066      CMP.W  #$4840,D0
00001702  6700 0124               1067      BEQ    GROUP4_INVALID
00001706  6600 0002               1068      BNE    CHECK_OP_TAS
0000170A                          1069      
0000170A                          1070  CHECK_OP_TAS:
0000170A  3038 4000               1071      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000170E  0240 FFC0               1072      ANDI.W #$FFC0,D0
00001712  B07C 4AC0               1073      CMP.W  #$4AC0,D0
00001716  6700 0110               1074      BEQ    GROUP4_INVALID
0000171A  6600 0002               1075      BNE    CHECK_OP_TST
0000171E                          1076  
0000171E                          1077  CHECK_OP_TST:               ; This must go after CHECK_OP_TAS as first 2 nibbles are equivalent
0000171E  3038 4000               1078      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001722  0240 FF00               1079      ANDI.W #$FF00,D0
00001726  B07C 4A00               1080      CMP.W  #$4A00,D0
0000172A  6700 00FC               1081      BEQ    GROUP4_INVALID
0000172E  6600 0002               1082      BNE    CHECK_OP_TRAP
00001732                          1083      
00001732                          1084  CHECK_OP_TRAP:
00001732  3038 4000               1085      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001736  0240 FFF0               1086      ANDI.W #$FFF0,D0
0000173A  B07C 4E40               1087      CMP.W  #$4E40,D0
0000173E  6700 00E8               1088      BEQ    GROUP4_INVALID
00001742  6600 0002               1089      BNE    CHECK_OP_LINK
00001746                          1090      
00001746                          1091  CHECK_OP_LINK:
00001746  3038 4000               1092      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000174A  0240 FFF8               1093      ANDI.W #$FFF8,D0
0000174E  B07C 4E50               1094      CMP.W  #$4E50,D0
00001752  6700 00D4               1095      BEQ    GROUP4_INVALID
00001756  6600 0002               1096      BNE    CHECK_OP_UNLK
0000175A                          1097  
0000175A                          1098  CHECK_OP_UNLK:
0000175A  3038 4000               1099      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000175E  0240 FFF8               1100      ANDI.W #$FFF8,D0
00001762  B07C 4E58               1101      CMP.W  #$4E58,D0
00001766  6700 00C0               1102      BEQ    GROUP4_INVALID
0000176A  6600 0002               1103      BNE    CHECK_OP_MOVE_USP
0000176E                          1104      
0000176E                          1105  CHECK_OP_MOVE_USP:
0000176E  3038 4000               1106      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001772  0240 FFF0               1107      ANDI.W #$FFF0,D0
00001776  B07C 4E60               1108      CMP.W  #$4E60,D0
0000177A  6700 00AC               1109      BEQ    GROUP4_INVALID
0000177E  6600 0002               1110      BNE    CHECK_OP_JMP
00001782                          1111  
00001782                          1112  CHECK_OP_JMP:
00001782  3038 4000               1113       MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001786  0240 FFC0               1114       ANDI.W #$FFC0,D0
0000178A  B07C 4EC0               1115       CMP.W  #$4EC0,D0
0000178E  6700 0098               1116       BEQ    GROUP4_INVALID
00001792  6600 0002               1117       BNE    CHECK_OP_CHK
00001796                          1118       
00001796                          1119  CHECK_OP_CHK:
00001796  3038 4000               1120      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
0000179A  0240 F1C0               1121      ANDI.W  #$F1C0,D0
0000179E  B07C 4180               1122      CMP.W   #$4180,D0
000017A2  6700 0550               1123      BEQ     INVALID_OP
000017A6  6600 0002               1124      BNE     CHECK_OP_RTS
000017AA                          1125  
000017AA                          1126  *Supported OP codes to check
000017AA                          1127  CHECK_OP_RTS:
000017AA  3038 4000               1128      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
000017AE  B07C 4E75               1129      CMP.W  #$4E75,D0
000017B2  6600 000C               1130      BNE    CHECK_OP_LEA
000017B6  4EB9 00001DC2           1131      JSR    PRINT_OP_RTS
000017BC  6000 0070               1132      BRA    GROUP4_SUCCESS              ;Finish routine
000017C0                          1133   
000017C0                          1134  CHECK_OP_LEA:
000017C0  3038 4000               1135      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000017C4  0240 F1C0               1136      ANDI.W #$F1C0,D0
000017C8  B07C 41C0               1137      CMP.W  #$41C0,D0
000017CC  6600 000C               1138      BNE    CHECK_OP_JSR
000017D0  4EB9 00001DD2           1139      JSR    PRINT_OP_LEA
000017D6  6000 0056               1140      BRA    GROUP4_SUCCESS              ;Finish routine
000017DA                          1141   
000017DA                          1142  CHECK_OP_JSR:
000017DA  3038 4000               1143      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000017DE  0240 FFC0               1144      ANDI.W #$FFC0,D0
000017E2  B07C 4E80               1145      CMP.W  #$4E80,D0
000017E6  6600 000C               1146      BNE    CHECK_OP_NEG
000017EA  4EB9 00001DB2           1147      JSR    PRINT_OP_JSR
000017F0  6000 003C               1148      BRA    GROUP4_SUCCESS              ;Finish routine
000017F4                          1149      
000017F4                          1150  CHECK_OP_NEG:
000017F4  3038 4000               1151      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000017F8  0240 FF00               1152      ANDI.W #$FF00,D0
000017FC  B07C 4400               1153      CMP.W  #$4400,D0
00001800  6600 000C               1154      BNE    CHECK_OP_MOVEM
00001804  4EB9 00001DE2           1155      JSR    PRINT_OP_NEG
0000180A  6000 0022               1156      BRA    GROUP4_SUCCESS              ;Finish routine
0000180E                          1157  
0000180E                          1158      
0000180E                          1159  **************** COME BACK TO FINISH UP SIZE **********************************
0000180E                          1160  CHECK_OP_MOVEM:
0000180E  3038 4000               1161      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001812  0240 FB80               1162      ANDI.W #$FB80,D0
00001816  B07C 4880               1163      CMP.W  #$4880,D0
0000181A  6600 04D8               1164      BNE    INVALID_OP       ;If no code is found, it is invalid
0000181E  4EB9 00001DF2           1165      JSR    PRINT_OP_MOVEM_W
00001824  6000 0008               1166      BRA    GROUP4_SUCCESS
00001828                          1167      
00001828                          1168  GROUP4_INVALID:
00001828  4EB9 00001CF4           1169      JSR INVALID_OP
0000182E                          1170  
0000182E                          1171  GROUP4_SUCCESS:
0000182E  4CDF 0001               1172      MOVEM.L (SP)+,D0 
00001832  4E75                    1173      RTS
00001834                          1174  * GROUP_5
00001834                          1175  ********************************************************************************
00001834                          1176  * Supported OP code:
00001834                          1177  * SUBQ: $5, 11-9 DATA, 8 %1, 7-6 Size, 5-3 EA Mode, 2-0 EA Reg
00001834                          1178  * Unsupported OP codes: ADDQ, Scc, DBcc
00001834                          1179  * Validation checking:
00001834                          1180  * Check against, ADDQ, Scc, DBcc
00001834                          1181  ********************************************************************************
00001834                          1182  C_GROUP_5:
00001834  48E7 8000               1183      MOVEM.L D0,-(SP)         ;Save registers to stack
00001838                          1184  *Unsupported OP codes
00001838                          1185  CHECK_OP_DBcc:               ;These are ordered first due to checking bits 7-6
00001838  3038 4000               1186      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
0000183C  0240 F0C8               1187      ANDI.W #$F0C8,D0
00001840  B07C 50C8               1188      CMP.W  #$50C8,D0
00001844  6700 0048               1189      BEQ    GROUP5_INVALID
00001848  6600 0002               1190      BNE    CHECK_OP_Scc 
0000184C                          1191  
0000184C                          1192  CHECK_OP_Scc:
0000184C  3038 4000               1193      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001850  0240 F0C0               1194      ANDI.W #$F0C0,D0 
00001854  B07C 50C0               1195      CMP.W  #$50C0,D0
00001858  6700 0034               1196      BEQ     GROUP5_INVALID
0000185C  6600 0002               1197      BNE     CHECK_OP_ADDQ
00001860                          1198  
00001860                          1199  CHECK_OP_ADDQ:
00001860  3038 4000               1200      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001864  0240 F100               1201      ANDI.W #$F100,D0
00001868  B07C 5000               1202      CMP.W  #$5000,D0
0000186C  6700 0020               1203      BEQ    GROUP5_INVALID
00001870  6600 0002               1204      BNE    CHECK_OP_SUBQ
00001874                          1205  
00001874                          1206  *Supported OP code   
00001874                          1207  CHECK_OP_SUBQ     
00001874  3038 4000               1208      MOVE.W  CUR_OP_CODE,D0  ;Actual check for SUBQ
00001878  0240 F100               1209      ANDI.W #$F100,D0        ;Bitmask check for SUBQ
0000187C  B07C 5100               1210      CMP.W  #$5100,D0        ;Compare the proper value
00001880  6600 000C               1211      BNE    GROUP5_INVALID       ;Else the operand is invalid
00001884  4EB9 00001E12           1212      JSR    PRINT_OP_SUBQ    ;If equal print it out
0000188A  6000 0008               1213      BRA    GROUP5_SUCCESS   ;Finish routine
0000188E                          1214      
0000188E                          1215  GROUP5_INVALID: 
0000188E  4EB9 00001CF4           1216      JSR INVALID_OP          ;INVALID OP has been found
00001894                          1217  
00001894                          1218  GROUP5_SUCCESS:
00001894  4CDF 0001               1219      MOVEM.L (SP)+,D0        ;Restore registers from stack
00001898  4E75                    1220      RTS                     ;Return to stack
0000189A                          1221      
0000189A                          1222  * GROUP_6
0000189A                          1223  ********************************************************************************
0000189A                          1224  * Supported OP codes
0000189A                          1225  * BRA: $60, 7-0 8-Bit Displacement
0000189A                          1226  * Bcc: $6, 11-8 Condition, 7-0 8-Bit Displacement
0000189A                          1227  *   Branch: <Condition>   
0000189A                          1228  *   BCS: %0101          
0000189A                          1229  *   BGE: %1100      
0000189A                          1230  *   BLT: %1101  
0000189A                          1231  *   BVC: %1000
0000189A                          1232  *   
0000189A                          1233  *   MOVE.W #%0110010100000000   ;BCS
0000189A                          1234  *   MOVE.W #%0110110001010101   ;BGE
0000189A                          1235  *   MVE.W #%0110110110101010    ;BLT
0000189A                          1236  *   MOVE.W #%0110100001010101   ;BVC
0000189A                          1237  * Unsupported OP code: BSR
0000189A                          1238  ********************************************************************************
0000189A                          1239  C_GROUP_6:
0000189A  48E7 8000               1240      MOVEM.L D0,-(SP)        ;Save register to stack
0000189E                          1241  *Unsupported OP code
0000189E                          1242  CHECK_OP_BSR:
0000189E  3038 4000               1243      MOVE.W  CUR_OP_CODE,D0
000018A2  0240 FF00               1244      ANDI.W  #$FF00,D0
000018A6  B07C 6100               1245      CMP.W   #$6100,D0
000018AA  6700 0088               1246      BEQ     GROUP6_INVALID
000018AE  6600 0002               1247      BNE     CHECK_OP_BRA
000018B2                          1248      
000018B2                          1249  *Supported OP codes
000018B2                          1250  CHECK_OP_BRA:
000018B2  3038 4000               1251      MOVE.W  CUR_OP_CODE,D0   ;Move current instruction set into D0       
000018B6  0240 FF00               1252      ANDI.W  #$FF00,D0
000018BA  B07C 6000               1253      CMP.W   #$6000,D0
000018BE  6600 000C               1254      BNE     CHECK_OP_BCS
000018C2  4EB9 00001E62           1255      JSR     PRINT_OP_BRA
000018C8  6000 0070               1256      BRA     GROUP6_SUCCESS
000018CC                          1257      
000018CC                          1258  CHECK_OP_BCS:
000018CC  3038 4000               1259      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000018D0  0240 FF00               1260      ANDI.W #$FF00,D0
000018D4  B07C 6500               1261      CMP.W  #$6500,D0 
000018D8  6600 000C               1262      BNE    CHECK_OP_BGE
000018DC  4EB9 00001E22           1263      JSR    PRINT_OP_BCS
000018E2  6000 0056               1264      BRA    GROUP6_SUCCESS
000018E6                          1265  
000018E6                          1266      
000018E6                          1267  CHECK_OP_BGE:
000018E6  3038 4000               1268      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
000018EA  0240 FF00               1269      ANDI.W #$FF00,D0
000018EE  B07C 6C00               1270      CMP.W  #$6C00,D0 
000018F2  6600 000C               1271      BNE    CHECK_OP_BLT
000018F6  4EB9 00001E32           1272      JSR    PRINT_OP_BGE
000018FC  6000 003C               1273      BRA    GROUP6_SUCCESS
00001900                          1274      
00001900                          1275      
00001900                          1276  CHECK_OP_BLT:
00001900  3038 4000               1277      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
00001904  0240 FF00               1278      ANDI.W #$FF00,D0
00001908  B07C 6D00               1279      CMP.W  #$6D00,D0 
0000190C  6600 000C               1280      BNE    CHECK_OP_BVC
00001910  4EB9 00001E42           1281      JSR    PRINT_OP_BLT
00001916  6000 0022               1282      BRA    GROUP6_SUCCESS
0000191A                          1283      
0000191A                          1284  CHECK_OP_BVC:
0000191A  3038 4000               1285      MOVE.W CUR_OP_CODE,D0   ;Move current instruction set into D0
0000191E  0240 FF00               1286      ANDI.W #$FF00,D0
00001922  B07C 6800               1287      CMP.W  #$6800,D0 
00001926  6600 000C               1288      BNE    GROUP6_INVALID
0000192A  4EB9 00001E52           1289      JSR    PRINT_OP_BVC
00001930  6000 0008               1290      BRA    GROUP6_SUCCESS
00001934                          1291      
00001934                          1292  GROUP6_INVALID:
00001934  4EB9 00001CF4           1293      JSR    INVALID_OP    
0000193A                          1294          
0000193A                          1295  GROUP6_SUCCESS:
0000193A  4CDF 0001               1296      MOVEM.L (SP)+,D0
0000193E  4E75                    1297      RTS
00001940                          1298      
00001940                          1299  *GROUP_7
00001940                          1300  ********************************************************************************
00001940                          1301  * Currently no OP codes here are supported. MOVEQ is the only code in this group
00001940                          1302  * Unsupported OP code: MOVEQ
00001940                          1303  ********************************************************************************
00001940                          1304  C_GROUP_7:
00001940  48E7 8000               1305      MOVEM.L D0,-(SP)        ;Save register to stack
00001944                          1306      
00001944                          1307  CHECK_OP_MOVEQ
00001944  3038 4000               1308      MOVE.W CUR_OP_CODE,D0
00001948  0240 F100               1309      ANDI.W #$F100,D0
0000194C  B07C 7000               1310      CMP.W  #$7000,D0
00001950  6600 0006               1311      BNE    GROUP7_INVALID
00001954  6700 0008               1312      BEQ    GROUP7_SUCCESS
00001958                          1313      
00001958                          1314  GROUP7_INVALID:
00001958  4EB9 00001CF4           1315      JSR INVALID_OP
0000195E                          1316      
0000195E                          1317  GROUP7_SUCCESS:    
0000195E  4CDF 0001               1318      MOVEM.L (SP)+,D0
00001962  4E75                    1319      RTS
00001964                          1320  * GROUP_8
00001964                          1321  ********************************************************************************
00001964                          1322  * Supported OP code:
00001964                          1323  * DIVS: $8, 11-9 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00001964                          1324  * OR: $80, 7-6 Size, 5-3 EA Mode, 2-0 EA Register
00001964                          1325  * Unsupported OP codes: DIVU, SBCD
00001964                          1326  ********************************************************************************
00001964                          1327  C_GROUP_8:
00001964  48E7 8000               1328      MOVEM.L D0,-(SP)
00001968                          1329  *Unsupported OP codes
00001968                          1330  CHECK_OP_DIVU:
00001968  3038 4000               1331      MOVE.W  CUR_OP_CODE,D0   ;Move current instruction set into D0
0000196C  0240 F1C0               1332      ANDI.W  #$F1C0,D0
00001970  B07C 80C0               1333      CMP.W   #$80C0,D0
00001974  6700 0038               1334      BEQ     GROUP8_INVALID
00001978  6600 0002               1335      BNE     CHECK_OP_SBCD 
0000197C                          1336  
0000197C                          1337  CHECK_OP_SBCD:
0000197C  3038 4000               1338      MOVE.W  CUR_OP_CODE,D0   ;Move current instruction set into D0
00001980  0240 F1F0               1339      ANDI.W  #$F1F0,D0
00001984  B07C 8100               1340      CMP.W   #$8100,D0
00001988  6700 0024               1341      BEQ     GROUP8_INVALID
0000198C  6600 0002               1342      BNE     CHECK_OP_DIVS
00001990                          1343      
00001990                          1344  *Supported OP codes
00001990                          1345  CHECK_OP_DIVS:
00001990  3038 4000               1346      MOVE.W  CUR_OP_CODE,D0   ;Move current instruction set into D0
00001994  0240 F1C0               1347      ANDI.W  #$F1C0,D0
00001998  B07C 81C0               1348      CMP.W   #$81C0,D0
0000199C  6700 04D4               1349      BEQ     PRINT_OP_DIVS
000019A0  6600 0002               1350      BNE     CHECK_OP_OR
000019A4                          1351      
000019A4                          1352  CHECK_OP_OR:              ;At this point only remaining $8 code is OR
000019A4  4EB9 00001E82           1353      JSR     PRINT_OP_OR
000019AA  6000 0008               1354      BRA     GROUP8_SUCCESS
000019AE                          1355  GROUP8_INVALID:
000019AE  4EB9 00001CF4           1356       JSR    INVALID_OP
000019B4                          1357       
000019B4                          1358  GROUP8_SUCCESS:
000019B4  4CDF 0001               1359       MOVEM.L (SP)+,D0
000019B8  4E75                    1360       RTS
000019BA                          1361       
000019BA                          1362  * GROUP_9                      
000019BA                          1363  ********************************************************************************
000019BA                          1364  * Supported OP code:
000019BA                          1365  * SUB: $9, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
000019BA                          1366  * Unsupported OP codes: SUBX, SUBA
000019BA                          1367  ********************************************************************************
000019BA                          1368  C_GROUP_9:
000019BA  48E7 C000               1369      MOVEM.L D0-D1,-(SP)     ;Save the registers
000019BE                          1370  CHECK_OP_SUBA:             ;Check SUBA first as it has static bits
000019BE  3038 4000               1371      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
000019C2  0240 F0C0               1372      ANDI.W  #$F0C0,D0
000019C6  B07C 90C0               1373      CMP.W   #$90C0,D0
000019CA  6700 0328               1374      BEQ     INVALID_OP
000019CE  6600 0002               1375      BNE     CHECK_OP_SUBX
000019D2                          1376  
000019D2                          1377  CHECK_OP_SUBX:
000019D2  3038 4000               1378      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
000019D6  0240 F130               1379      ANDI.W  #$F130,D0
000019DA  B07C 9100               1380      CMP.W   #$9100,D0
000019DE  6700 0006               1381      BEQ     BIT_CHECK_SUBX
000019E2  6600 0026               1382      BNE     GROUP9_INVALID     ;Cannot be a valid OP code here
000019E6                          1383      
000019E6                          1384  BIT_CHECK_SUBX:    
000019E6  3038 4000               1385      MOVE.W  CUR_OP_CODE,D0      ;Move current instruction set into D0
000019EA  323C 0007               1386      MOVE.W  #7,D1               ;Prepare a shift of 7 bits into D1
000019EE  E368                    1387      LSL.W   D1,D0               ;Shift left 7 bits truncate 15-9 bits
000019F0  E268                    1388      LSR.W   D1,D0               ;Reposition D0
000019F2  E848                    1389      LSR.W   #4,D0               ;Truncate 4 right most bits to
000019F4  0240 FF18               1390      ANDI.W  #$FF18,D0           ;Compare remaining static bits
000019F8  B07C 0018               1391      CMP.W   #$0018,D0           ;If equal to this value it's SUBX
000019FC  6700 000C               1392      BEQ     GROUP9_INVALID      ;INVALID OP code found
00001A00  6600 0002               1393      BNE     CHECK_OP_SUB        ;Not can only be SUB here
00001A04                          1394      
00001A04                          1395  CHECK_OP_SUB:                   ;At this point only remaining $9 is SUB
00001A04  4EF9 00001E92           1396      JMP     PRINT_OP_SUB
00001A0A                          1397  
00001A0A                          1398  GROUP9_INVALID:
00001A0A  6000 02E8               1399      BRA     INVALID_OP
00001A0E                          1400      
00001A0E                          1401  GROUP9_SUCCESS:
00001A0E  4CDF 0003               1402      MOVEM.L (SP)+,D0-D1         ;Restore registers
00001A12  4E75                    1403      RTS                         ;Return to stack
00001A14                          1404  
00001A14                          1405  *GROUP_A
00001A14                          1406  ********************************************************************************
00001A14                          1407  * Currently no OP codes here are supported. There are no current OP codes here.
00001A14                          1408  ********************************************************************************
00001A14                          1409  C_GROUP_A:
00001A14  4EB9 00001CF4           1410      JSR INVALID_OP
00001A1A  4E75                    1411      RTS
00001A1C                          1412      
00001A1C                          1413  * GROUP_B                     
00001A1C                          1414  ********************************************************************************
00001A1C                          1415  * Supported OP codes:
00001A1C                          1416  * EOR: $B, 11-9 Reg, 8 %1, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001A1C                          1417  * CMP: $B, 11-9 Reg, 8 %0, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001A1C                          1418  * The specific bit difference is listed 
00001A1C                          1419  * Unsupported OP codes: CMPM, CMPA
00001A1C                          1420  ********************************************************************************
00001A1C                          1421  C_GROUP_B:
00001A1C  48E7 8000               1422      MOVEM.L D0,-(SP)         ;Save current registers to stack
00001A20                          1423      
00001A20                          1424  CHECK_OP_CMPM
00001A20  3038 4000               1425      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A24  0240 F138               1426      ANDI.W  #$F138,D0
00001A28  B07C B108               1427      CMP.W   #$B108,D0
00001A2C  6700 0042               1428      BEQ     GROUPB_INVALID
00001A30  6600 0002               1429      BNE     CHECK_OP_CMPA
00001A34                          1430      
00001A34                          1431  CHECK_OP_CMPA:
00001A34  3038 4000               1432      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A38  0240 F0C0               1433      ANDI.W  #$F0C0,D0
00001A3C  B07C B0C0               1434      CMP.W   #$B0C0,D0
00001A40  6700 002E               1435      BEQ     GROUPB_INVALID
00001A44  6600 0002               1436      BNE     CHECK_OP_EOR
00001A48                          1437      
00001A48                          1438  CHECK_OP_EOR:
00001A48  3038 4000               1439      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A4C  0240 F100               1440      ANDI.W  #$F100,D0
00001A50  B07C B100               1441      CMP.W   #$B100,D0
00001A54  6700 044C               1442      BEQ     PRINT_OP_EOR
00001A58  6600 0002               1443      BNE     CHECK_OP_CMP
00001A5C                          1444      
00001A5C                          1445  CHECK_OP_CMP:
00001A5C  3038 4000               1446      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A60  0240 F100               1447      ANDI.W  #$F100,D0
00001A64  B07C B000               1448      CMP.W   #$B000,D0
00001A68  6700 0448               1449      BEQ     PRINT_OP_CMP
00001A6C  6600 0002               1450      BNE     GROUPB_INVALID
00001A70                          1451  
00001A70                          1452  GROUPB_INVALID:
00001A70  4EB9 00001CF4           1453      JSR     INVALID_OP           ;INVALID OP has been found 
00001A76                          1454   
00001A76                          1455  GROUPB_SUCCESS:
00001A76  4CDF 0001               1456      MOVEM.L (SP)+,D0         ;Restore registers from stack
00001A7A  4E75                    1457      RTS                      ;Return to stack
00001A7C                          1458  * GROUP_C                     
00001A7C                          1459  ********************************************************************************
00001A7C                          1460  * Supported OP code:
00001A7C                          1461  * MULS: $C, 11-8 Reg, 8-6 %111, 5-3 EA Mode, 2-0 EA Reg
00001A7C                          1462  * Note: EXG OP mode has to be 01000, 01001, 10001, as such can never be 11 for
00001A7C                          1463  * bits 7-6
00001A7C                          1464  * Unsupported OP codes: MULU, ABCD, EXG, AND
00001A7C                          1465  ********************************************************************************
00001A7C                          1466  C_GROUP_C:
00001A7C                          1467  *Unsupported OP codes
00001A7C  48E7 C000               1468      MOVEM.L D0-D1,-(SP)
00001A80                          1469      
00001A80                          1470  CHECK_OP_MULU:
00001A80  3038 4000               1471      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A84  0240 F1C0               1472      ANDI.W  #$F1C0,D0
00001A88  B07C C0C0               1473      CMP.W   #$C0C0,D0
00001A8C  6700 0078               1474      BEQ     GROUPC_INVALID
00001A90  6600 0002               1475      BNE     CHECK_OP_ABCD
00001A94                          1476   
00001A94                          1477  CHECK_OP_ABCD:
00001A94  3038 4000               1478      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001A98  0240 F1F0               1479      ANDI.W  #$F1F0,D0
00001A9C  B07C C100               1480      CMP.W   #$C100,D0
00001AA0  6700 0064               1481      BEQ     GROUPC_INVALID
00001AA4  6600 0002               1482      BNE     CHECK_OP_EXG
00001AA8                          1483   
00001AA8                          1484  CHECK_OP_EXG:
00001AA8  3038 4000               1485      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AAC  0240 F130               1486      ANDI.W  #$F130,D0
00001AB0  B07C C100               1487      CMP.W   #$C100,D0
00001AB4  6700 0006               1488      BEQ     BIT_CHECK_EXG
00001AB8  6600 003C               1489      BNE     CHECK_OP_AND
00001ABC                          1490                          
00001ABC                          1491  BIT_CHECK_EXG:                 ;Checks the OP mode bits 7-6 which cannot be 11 for EXG
00001ABC  3038 4000               1492      MOVE.W  CUR_OP_CODE,D0
00001AC0  323C 0008               1493      MOVE.W  #8,D1
00001AC4  E368                    1494      LSL.W   D1,D0
00001AC6  E268                    1495      LSR.W   D1,D0
00001AC8  EC48                    1496      LSR.W   #6,D0
00001ACA  0240 FFF3               1497      ANDI.W  #$FFF3,D0
00001ACE  B07C 0003               1498      CMP.W   #$0003,D0          ;This bit then equals MULS
00001AD2  6700 000E               1499      BEQ     CHECK_OP_MULS
00001AD6  B07C 0000               1500      CMP.W   #$0000,D0          ;Second comparison to check if OP mode bit is valid
00001ADA  6700 001A               1501      BEQ     CHECK_OP_AND       ;If it's 0 it could be OP_AND
00001ADE  6600 0026               1502      BNE     GROUPC_INVALID         ;Otherwise it's EXG (01,10 op bits)
00001AE2                          1503  *Supported OP code
00001AE2                          1504  CHECK_OP_MULS:
00001AE2  3038 4000               1505      MOVE.W CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AE6  0240 F1C0               1506      ANDI.W #$F1C0,D0
00001AEA  B07C C1C0               1507      CMP.W  #$C1C0,D0
00001AEE  6700 03D2               1508      BEQ    PRINT_OP_MULS
00001AF2  6600 0002               1509      BNE    CHECK_OP_AND          ; OP_AND is completely dynamic outside of first nibble
00001AF6                          1510  
00001AF6                          1511  *Odd completely dynamic unsupported OP code    
00001AF6                          1512  CHECK_OP_AND:                 ;This would be the only possible OP code left after CHECK_OP_MULS
00001AF6  3038 4000               1513      MOVE.W  CUR_OP_CODE,D0    ;Move current instruction set into D0
00001AFA  0240 F000               1514      ANDI.W  #$F000,D0
00001AFE  B07C C000               1515      CMP.W   #$C000,D0
00001B02  6700 0002               1516      BEQ     GROUPC_INVALID
00001B06                          1517      
00001B06                          1518  GROUPC_INVALID:
00001B06  4EB9 00001CF4           1519      JSR     INVALID_OP
00001B0C                          1520      
00001B0C                          1521  GROUPC_SUCCESS:
00001B0C  4CDF 0003               1522      MOVEM.L (SP)+,D0-D1
00001B10  4E75                    1523      RTS
00001B12                          1524      
00001B12                          1525  * GROUP_D                     
00001B12                          1526  ********************************************************************************
00001B12                          1527  * Supported OP codes:
00001B12                          1528  * ADD: $D, 11-9 Reg, 8-6 OPMODE, 5-3 EA Mode, 2-0 EA Reg
00001B12                          1529  * ADDA: $D, 11- 9 Reg, 8-6 OPMODE, 7-6 %11, 5-3 EA Mode, 2-0 EA Reg
00001B12                          1530  * The specific bit difference is listed out in the OPMODE field.
00001B12                          1531  * Unsupported: ADDX
00001B12                          1532  ********************************************************************************
00001B12                          1533  C_GROUP_D:
00001B12  48E7 8000               1534      MOVEM.L D0,-(SP)        ;Save registers to stack
00001B16                          1535      
00001B16                          1536  CHECK_OP_ADDX:
00001B16  3038 4000               1537      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B1A  0240 F130               1538      ANDI.W #$F130,D0
00001B1E  B07C D100               1539      CMP.W  #$D100,D0
00001B22  6700 0024               1540      BEQ    GROUPD_INVALID
00001B26  6600 0002               1541      BNE    CHECK_OP_ADDA
00001B2A                          1542  
00001B2A                          1543  CHECK_OP_ADDA:
00001B2A  3038 4000               1544      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B2E  0240 F0C0               1545      ANDI.W #$F0C0,D0
00001B32  B07C D0C0               1546      CMP.W  #$D0C0,D0
00001B36  6700 03AA               1547      BEQ    PRINT_OP_ADDA
00001B3A  6600 0002               1548      BNE    CHECK_OP_ADD
00001B3E                          1549  
00001B3E                          1550  CHECK_OP_ADD:
00001B3E  4EB9 00001ED2           1551      JSR PRINT_OP_ADD        ;Only remaining OP in $D is ADD
00001B44  6000 0008               1552      BRA GROUPD_SUCCESS
00001B48                          1553      
00001B48                          1554  GROUPD_INVALID:
00001B48  4EB9 00001CF4           1555      JSR INVALID_OP
00001B4E                          1556      
00001B4E                          1557  GROUPD_SUCCESS:
00001B4E  4CDF 0001               1558      MOVEM.L (SP)+,D0        ;Restore registers from stack
00001B52  4E75                    1559      RTS                     ;Return to stack
00001B54                          1560      
00001B54                          1561  * GROUP_E                     
00001B54                          1562  ********************************************************************************
00001B54                          1563  * Supported:
00001B54                          1564  * LSR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00001B54                          1565  * LSL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %01, 2-0 Reg
00001B54                          1566  * ASR: $E, $0, 8 %0, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00001B54                          1567  * ASL: $E, $0, 8 %1, 7-6 %11, 5-3 EA Mode, 2-0 EA reg
00001B54                          1568  * ROR: $E, 11-9 Count/Reg, 8 %0, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00001B54                          1569  * ROL: $E, 11-9 Count/Reg, 8 %1, 7-6 Size, 5 i/r, 4-3 %11, 2-0 Reg
00001B54                          1570  * Count/Reg for LSR/LSL refers to shift count, where 0 = shift count of 8, 1-7 
00001B54                          1571  * refers to the respective value when i/r = 0. If i/r = 1, data register in the 
00001B54                          1572  * Count/Reg field specifies the shift count.  
00001B54                          1573  * For directional bit at 8, R = 0, L = 1
00001B54                          1574  * Count/Reg for ROR/ROL specifies rotate count instead of shift count.
00001B54                          1575  *
00001B54                          1576  * Split into ROT and NO_ROT groups first to make identifying easier.
00001B54                          1577  * Unsupported: ROXL, ROXR
00001B54                          1578  ********************************************************************************
00001B54                          1579  C_GROUP_E:
00001B54  48E7 8000               1580      MOVEM.L D0,-(SP)
00001B58                          1581  *Unsupported OP codes
00001B58                          1582  CHECK_OP_ROXR_NO_ROT:
00001B58  3038 4000               1583      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B5C  0240 FFC0               1584      ANDI.W #$FFC0,D0
00001B60  B07C E4C0               1585      CMP.W  #$E4C0,D0
00001B64  6700 017A               1586      BEQ    GROUPE_INVALID
00001B68  6600 0002               1587      BNE    CHECK_OP_ROXL_NO_ROT
00001B6C                          1588  
00001B6C                          1589  CHECK_OP_ROXL_NO_ROT:
00001B6C  3038 4000               1590      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B70  0240 FFC0               1591      ANDI.W #$FFC0,D0
00001B74  B07C E5C0               1592      CMP.W  #$E5C0,D0
00001B78  6700 0166               1593      BEQ    GROUPE_INVALID
00001B7C  6600 0002               1594      BNE    CHECK_OP_ROR_NO_ROT
00001B80                          1595  
00001B80                          1596  *Supported OP codes
00001B80                          1597  CHECK_OP_ROR_NO_ROT:
00001B80  3038 4000               1598      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B84  0240 FFC0               1599      ANDI.W #$FFC0,D0
00001B88  B07C E6C0               1600      CMP.W  #$E6C0,D0
00001B8C  6600 000C               1601      BNE    CHECK_OP_ROL_NO_ROT
00001B90  4EB9 00001F42           1602      JSR    PRINT_OP_ROR
00001B96  6000 014E               1603      BRA    GROUPE_SUCCESS
00001B9A                          1604      
00001B9A                          1605  CHECK_OP_ROL_NO_ROT:
00001B9A  3038 4000               1606      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001B9E  0240 FFC0               1607      ANDI.W #$FFC0,D0
00001BA2  B07C E7C0               1608      CMP.W  #$E7C0,D0
00001BA6  6600 000C               1609      BNE    CHECK_OP_LSR_NO_ROT
00001BAA  4EB9 00001F32           1610      JSR    PRINT_OP_ROL
00001BB0  6000 0134               1611      BRA    GROUPE_SUCCESS
00001BB4                          1612   
00001BB4                          1613  CHECK_OP_LSR_NO_ROT:
00001BB4  3038 4000               1614      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001BB8  0240 FFC0               1615      ANDI.W #$FFC0,D0
00001BBC  B07C E2C0               1616      CMP.W  #$E2C0,D0
00001BC0  6600 000C               1617      BNE    CHECK_OP_LSL_NO_ROT
00001BC4  4EB9 00001F02           1618      JSR    PRINT_OP_LSR
00001BCA  6000 011A               1619      BRA    GROUPE_SUCCESS
00001BCE                          1620  
00001BCE                          1621  CHECK_OP_LSL_NO_ROT:
00001BCE  3038 4000               1622      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001BD2  0240 FFC0               1623      ANDI.W #$FFC0,D0
00001BD6  B07C E3C0               1624      CMP.W  #$E3C0,D0
00001BDA  6600 000C               1625      BNE    CHECK_OP_ASR_NO_ROT
00001BDE  4EB9 00001EF2           1626      JSR    PRINT_OP_LSL
00001BE4  6000 0100               1627      BRA    GROUPE_SUCCESS
00001BE8                          1628  
00001BE8                          1629  CHECK_OP_ASR_NO_ROT:
00001BE8  3038 4000               1630      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001BEC  0240 FFC0               1631      ANDI.W #$FFC0,D0
00001BF0  B07C E0C0               1632      CMP.W  #$E0C0,D0
00001BF4  6600 000C               1633      BNE    CHECK_OP_ASL_NO_ROT
00001BF8  4EB9 00001F12           1634      JSR    PRINT_OP_ASR
00001BFE  6000 00E6               1635      BRA    GROUPE_SUCCESS
00001C02                          1636              
00001C02                          1637  CHECK_OP_ASL_NO_ROT:
00001C02  3038 4000               1638      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C06  0240 FFC0               1639      ANDI.W #$FFC0,D0
00001C0A  B07C E1C0               1640      CMP.W  #$E1C0,D0
00001C0E  6600 000C               1641      BNE    CHECK_OP_ROXR
00001C12  4EB9 00001F22           1642      JSR    PRINT_OP_ASL
00001C18  6000 00CC               1643      BRA    GROUPE_SUCCESS
00001C1C                          1644  
00001C1C                          1645  *Unsupported OP codes
00001C1C                          1646  CHECK_OP_ROXR:
00001C1C  3038 4000               1647      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C20  0240 F118               1648      ANDI.W #$F118,D0
00001C24  B07C E010               1649      CMP.W  #$E010,D0
00001C28  6700 00B6               1650      BEQ    GROUPE_INVALID
00001C2C  6600 0002               1651      BNE    CHECK_OP_ROXL
00001C30                          1652      
00001C30                          1653  CHECK_OP_ROXL:
00001C30  3038 4000               1654      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C34  0240 F118               1655      ANDI.W #$F118,D0
00001C38  B07C E110               1656      CMP.W  #$E110,D0
00001C3C  6700 00A2               1657      BEQ    GROUPE_INVALID
00001C40  6600 0002               1658      BNE    CHECK_OP_ROR
00001C44                          1659      
00001C44                          1660  *Supported OP codes
00001C44                          1661  CHECK_OP_ROR:
00001C44  3038 4000               1662      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C48  0240 F118               1663      ANDI.W #$F118,D0
00001C4C  B07C E018               1664      CMP.W  #$E018,D0
00001C50  6600 000C               1665      BNE    CHECK_OP_ROL
00001C54  4EB9 00001F42           1666      JSR    PRINT_OP_ROR
00001C5A  6000 008A               1667      BRA    GROUPE_SUCCESS
00001C5E                          1668  
00001C5E                          1669  CHECK_OP_ROL:
00001C5E  3038 4000               1670      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C62  0240 F118               1671      ANDI.W #$F118,D0
00001C66  B07C E118               1672      CMP.W  #$E118,D0
00001C6A  6600 000C               1673      BNE    CHECK_OP_LSR
00001C6E  4EB9 00001F32           1674      JSR    PRINT_OP_ROL
00001C74  6000 0070               1675      BRA    GROUPE_SUCCESS
00001C78                          1676      
00001C78                          1677  CHECK_OP_LSR:
00001C78  3038 4000               1678      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C7C  0240 F118               1679      ANDI.W #$F118,D0
00001C80  B07C E008               1680      CMP.W  #$E008,D0
00001C84  6600 000C               1681      BNE    CHECK_OP_LSL
00001C88  4EB9 00001F02           1682      JSR    PRINT_OP_LSR
00001C8E  6000 0056               1683      BRA    GROUPE_SUCCESS
00001C92                          1684  
00001C92                          1685  CHECK_OP_LSL:
00001C92  3038 4000               1686      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001C96  0240 F118               1687      ANDI.W #$F118,D0
00001C9A  B07C E108               1688      CMP.W  #$E108,D0
00001C9E  6600 000C               1689      BNE    CHECK_OP_ASR
00001CA2  4EB9 00001EF2           1690      JSR    PRINT_OP_LSL
00001CA8  6000 003C               1691      BRA    GROUPE_SUCCESS
00001CAC                          1692  
00001CAC                          1693  CHECK_OP_ASR:
00001CAC  3038 4000               1694      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001CB0  0240 F118               1695      ANDI.W #$F118,D0
00001CB4  B07C E000               1696      CMP.W  #$E000,D0
00001CB8  6600 000C               1697      BNE    CHECK_OP_ASL
00001CBC  4EB9 00001F12           1698      JSR    PRINT_OP_ASR
00001CC2  6000 0022               1699      BRA    GROUPE_SUCCESS
00001CC6                          1700  
00001CC6                          1701  CHECK_OP_ASL:
00001CC6  3038 4000               1702      MOVE CUR_OP_CODE,D0    ;Move current instruction set into D0
00001CCA  0240 F118               1703      ANDI.W #$F118,D0
00001CCE  B07C E100               1704      CMP.W  #$E100,D0
00001CD2  6600 000C               1705      BNE    GROUPE_INVALID      ;Last possible OP code
00001CD6  4EB9 00001F22           1706      JSR    PRINT_OP_ASL
00001CDC  6000 0008               1707      BRA    GROUPE_SUCCESS
00001CE0                          1708  
00001CE0                          1709  GROUPE_INVALID:
00001CE0  4EB9 00001CF4           1710      JSR     INVALID_OP
00001CE6                          1711      
00001CE6                          1712  GROUPE_SUCCESS:
00001CE6  4CDF 0001               1713      MOVEM.L (SP)+,D0
00001CEA  4E75                    1714      RTS
00001CEC                          1715  * GROUP_F
00001CEC                          1716  ********************************************************************************
00001CEC                          1717  * Currently no OP codes here are supported. There are no OP codes here
00001CEC                          1718  ********************************************************************************
00001CEC                          1719  C_GROUP_F:
00001CEC  4EB9 00001CF4           1720      JSR INVALID_OP
00001CF2  4E75                    1721      RTS
00001CF4                          1722      
00001CF4                          1723  * INVALID_OP                     
00001CF4                          1724  ********************************************************************************
00001CF4                          1725  * Any value that is not covered in the above groups would be considered invalid. 
00001CF4                          1726  * The following values in the first nibble would also indicate that the 
00001CF4                          1727  * operand codes is already invalid: $7, $A, $F.
00001CF4                          1728  * For unsupported OP codes, display DATA $WXYZ   
00001CF4                          1729  * THIS WILL NEED TO BE CHANGED TO DISPLAY: 1000 DATA $WXYZ IN THE FUTURE
00001CF4                          1730  ********************************************************************************
00001CF4                          1731  INVALID_OP:  ; Prints DATA for invalid op, THIS SHOULD BE SETTING THE IS_VALID BIT TO 0
00001CF4  23FC 00001F5A 0000203A  1732      MOVE.L #P_INVALID_OP, Arg_AddStrToBuffer_String
00001CFE  4EB9 00001D10           1733      JSR PRINT_TO_BUFFER
00001D04  11FC 0000 10B5          1734      MOVE.B #0,IS_VALID
00001D0A  4E75                    1735      RTS
00001D0C                          1736      
00001D0C                          1737  READ_NEXT_INSTRUCTION: ; Needs to read next instruction set {PLACEHOLDER}
00001D0C  FFFF FFFF               1738      SIMHALT
00001D10                          1739  
00001D10                          1740  ********************** PRINTING ROUTINES **************************************
00001D10                          1741  * Description: These routines are to print the associated op codes, by placing
00001D10                          1742  * them in the appropriate area to the buffer
00001D10                          1743  *
00001D10                          1744  * Registers used: A1 for loading, A6 for EA parsing.
00001D10                          1745  *
00001D10                          1746  * Precondition: The relevant opcode has been identified correctly.
00001D10                          1747  *
00001D10                          1748  * Postcondition: Prints out the associated opcode to the buffer.
00001D10                          1749  
00001D10                          1750  * THIS NEEDS TO BE RETOOLED TO PRINT TO BUFFER NOT TO CONSOLE
00001D10                          1751  *******************************************************************************
00001D10                          1752  
00001D10                          1753  * Prints the loaded item into G_BUFFER
00001D10                          1754  PRINT_TO_BUFFER:
00001D10  23FC 00004100 0000203E  1755      MOVE.L #G_BUFFER, Arg_AddStrToBuffer_Buffer
00001D1A  4EB9 00002048           1756      JSR AddStrToBuffer
00001D20  4E75                    1757      RTS
00001D22                          1758      
00001D22                          1759  
00001D22                          1760  ****************************** GROUP 0 **************************************** 
00001D22                          1761  PRINT_OP_ORI:
00001D22  23FC 00001F77 0000203A  1762      MOVE.L #P_OP_ORI, Arg_AddStrToBuffer_String
00001D2C  4EB8 1D10               1763      JSR PRINT_TO_BUFFER
00001D30  4E75                    1764      RTS
00001D32                          1765  PRINT_OP_CMPI:
00001D32  23FC 00001F7B 0000203A  1766      MOVE.L #P_OP_CMPI, Arg_AddStrToBuffer_String
00001D3C  4EB8 1D10               1767      JSR PRINT_TO_BUFFER
00001D40  4E75                    1768      RTS
00001D42                          1769  PRINT_OP_STATIC_BCLR:
00001D42  23FC 00001F80 0000203A  1770      MOVE.L #P_OP_STATIC_BCLR, Arg_AddStrToBuffer_String
00001D4C  4EB8 1D10               1771      JSR PRINT_TO_BUFFER
00001D50  4E75                    1772      RTS
00001D52                          1773  PRINT_OP_DYNAMIC_BCLR:
00001D52  23FC 00001F85 0000203A  1774      MOVE.L #P_OP_DYNAMIC_BCLR, Arg_AddStrToBuffer_String
00001D5C  4EB8 1D10               1775      JSR PRINT_TO_BUFFER
00001D60  4E75                    1776      RTS
00001D62                          1777  ******************************* END OF GROUP 0 ********************************
00001D62                          1778  
00001D62                          1779  ****************************** GROUP 1 ****************************************    
00001D62                          1780  PRINT_OP_MOVEB:
00001D62  23FC 00001F8A 0000203A  1781      MOVE.L #P_OP_MOVEB, Arg_AddStrToBuffer_String
00001D6C  4EB8 1D10               1782      JSR PRINT_TO_BUFFER
00001D70  4E75                    1783      RTS
00001D72                          1784  ******************************* END OF GROUP 1 ********************************
00001D72                          1785      
00001D72                          1786  ****************************** GROUP 2 **************************************** 
00001D72                          1787  PRINT_OP_MOVEA_L:
00001D72  23FC 00001F92 0000203A  1788      MOVE.L #P_OP_MOVEA_L, Arg_AddStrToBuffer_String
00001D7C  4EB8 1D10               1789      JSR PRINT_TO_BUFFER
00001D80  4E75                    1790      RTS
00001D82                          1791  PRINT_OP_MOVE_L:
00001D82  23FC 00001F9E 0000203A  1792      MOVE.L #P_OP_MOVE_L, Arg_AddStrToBuffer_String
00001D8C  4EB8 1D10               1793      JSR PRINT_TO_BUFFER
00001D90  4E75                    1794      RTS
00001D92                          1795  ******************************* END OF GROUP 2 ********************************
00001D92                          1796      
00001D92                          1797  ****************************** GROUP 3 ****************************************    
00001D92                          1798  PRINT_OP_MOVEA_W:
00001D92  23FC 00001FA6 0000203A  1799      MOVE.L #P_OP_MOVEA_W, Arg_AddStrToBuffer_String
00001D9C  4EB8 1D10               1800      JSR PRINT_TO_BUFFER
00001DA0  4E75                    1801      RTS
00001DA2                          1802  PRINT_OP_MOVE_W:
00001DA2  23FC 00001FB2 0000203A  1803      MOVE.L #P_OP_MOVE_W, Arg_AddStrToBuffer_String
00001DAC  4EB8 1D10               1804      JSR PRINT_TO_BUFFER
00001DB0  4E75                    1805      RTS
00001DB2                          1806  ******************************* END OF GROUP 3 ********************************
00001DB2                          1807  
00001DB2                          1808  ****************************** GROUP 4 ****************************************
00001DB2                          1809  PRINT_OP_JSR:
00001DB2  23FC 00001FD6 0000203A  1810      MOVE.L #P_OP_JSR, Arg_AddStrToBuffer_String
00001DBC  4EB8 1D10               1811      JSR PRINT_TO_BUFFER
00001DC0  4E75                    1812      RTS
00001DC2                          1813  PRINT_OP_RTS:
00001DC2  23FC 00001FDE 0000203A  1814      MOVE.L #P_OP_RTS, Arg_AddStrToBuffer_String
00001DCC  4EB8 1D10               1815      JSR PRINT_TO_BUFFER
00001DD0  4E75                    1816      RTS
00001DD2                          1817  PRINT_OP_LEA:
00001DD2  23FC 00001FD2 0000203A  1818      MOVE.L #P_OP_LEA, Arg_AddStrToBuffer_String
00001DDC  4EB8 1D10               1819      JSR PRINT_TO_BUFFER
00001DE0  4E75                    1820      RTS
00001DE2                          1821  PRINT_OP_NEG:
00001DE2  23FC 00001FE2 0000203A  1822      MOVE.L #P_OP_NEG, Arg_AddStrToBuffer_String
00001DEC  4EB8 1D10               1823      JSR PRINT_TO_BUFFER
00001DF0  4E75                    1824      RTS
00001DF2                          1825  PRINT_OP_MOVEM_W:
00001DF2  23FC 00001FBA 0000203A  1826      MOVE.L #P_OP_MOVEM_W, Arg_AddStrToBuffer_String
00001DFC  4EB8 1D10               1827      JSR PRINT_TO_BUFFER
00001E00  4E75                    1828      RTS
00001E02                          1829  PRINT_OP_MOVEM_L:
00001E02  23FC 00001FC6 0000203A  1830      MOVE.L #P_OP_MOVEM_L, Arg_AddStrToBuffer_String
00001E0C  4EB8 1D10               1831      JSR PRINT_TO_BUFFER
00001E10  4E75                    1832      RTS
00001E12                          1833  ******************************* END OF GROUP 4 ********************************
00001E12                          1834      
00001E12                          1835  ****************************** GROUP 5 ****************************************
00001E12                          1836  PRINT_OP_SUBQ:
00001E12  23FC 00001FE6 0000203A  1837      MOVE.L #P_OP_SUBQ, Arg_AddStrToBuffer_String
00001E1C  4EB8 1D10               1838      JSR PRINT_TO_BUFFER
00001E20  4E75                    1839      RTS
00001E22                          1840  ******************************* END OF GROUP 5 ********************************
00001E22                          1841  
00001E22                          1842  ****************************** GROUP 6 ****************************************
00001E22                          1843  PRINT_OP_BCS:
00001E22  23FC 00001FEF 0000203A  1844      MOVE.L #P_OP_BCS, Arg_AddStrToBuffer_String
00001E2C  4EB8 1D10               1845      JSR PRINT_TO_BUFFER
00001E30  4E75                    1846      RTS
00001E32                          1847  PRINT_OP_BGE:
00001E32  23FC 00001FF3 0000203A  1848      MOVE.L #P_OP_BGE, Arg_AddStrToBuffer_String
00001E3C  4EB8 1D10               1849      JSR PRINT_TO_BUFFER
00001E40  4E75                    1850      RTS
00001E42                          1851  PRINT_OP_BLT:
00001E42  23FC 00001FF7 0000203A  1852      MOVE.L #P_OP_BLT, Arg_AddStrToBuffer_String
00001E4C  4EB8 1D10               1853      JSR PRINT_TO_BUFFER
00001E50  4E75                    1854      RTS
00001E52                          1855  PRINT_OP_BVC:
00001E52  23FC 00001FFB 0000203A  1856      MOVE.L #P_OP_BVC, Arg_AddStrToBuffer_String
00001E5C  4EB8 1D10               1857      JSR PRINT_TO_BUFFER
00001E60  4E75                    1858      RTS
00001E62                          1859  PRINT_OP_BRA:
00001E62  23FC 00001FEB 0000203A  1860      MOVE.L #P_OP_BRA, Arg_AddStrToBuffer_String
00001E6C  4EB8 1D10               1861      JSR PRINT_TO_BUFFER
00001E70  4E75                    1862      RTS
00001E72                          1863  ******************************* END OF GROUP 6 ********************************
00001E72                          1864  
00001E72                          1865  ****************************** GROUP 7 ****************************************
00001E72                          1866  * No currently supported OP codes to print here.
00001E72                          1867  ******************************* END OF GROUP 7 ********************************
00001E72                          1868  
00001E72                          1869  ****************************** GROUP 8 ****************************************
00001E72                          1870  PRINT_OP_DIVS:
00001E72  23FC 00001FFF 0000203A  1871      MOVE.L #P_OP_DIVS, Arg_AddStrToBuffer_String
00001E7C  4EB8 1D10               1872      JSR PRINT_TO_BUFFER
00001E80  4E75                    1873      RTS
00001E82                          1874  PRINT_OP_OR:
00001E82  23FC 00002004 0000203A  1875      MOVE.L #P_OP_OR, Arg_AddStrToBuffer_String
00001E8C  4EB8 1D10               1876      JSR PRINT_TO_BUFFER
00001E90  4E75                    1877      RTS
00001E92                          1878  ******************************* END OF GROUP 8 ********************************
00001E92                          1879  
00001E92                          1880  ****************************** GROUP 9 ****************************************
00001E92                          1881  PRINT_OP_SUB:
00001E92  23FC 00002007 0000203A  1882      MOVE.L #P_OP_SUB, Arg_AddStrToBuffer_String
00001E9C  4EB8 1D10               1883      JSR PRINT_TO_BUFFER
00001EA0  4E75                    1884      RTS
00001EA2                          1885  ******************************* END OF GROUP 9 ********************************
00001EA2                          1886  
00001EA2                          1887  ****************************** GROUP A ****************************************
00001EA2                          1888  * No currently supported OP codes to print here.
00001EA2                          1889  ******************************* END OF GROUP A ********************************
00001EA2                          1890  
00001EA2                          1891  ****************************** GROUP B ****************************************
00001EA2                          1892  PRINT_OP_EOR:
00001EA2  23FC 0000200B 0000203A  1893      MOVE.L #P_OP_EOR, Arg_AddStrToBuffer_String
00001EAC  4EB8 1D10               1894      JSR PRINT_TO_BUFFER
00001EB0  4E75                    1895      RTS
00001EB2                          1896  PRINT_OP_CMP:
00001EB2  23FC 0000200F 0000203A  1897      MOVE.L #P_OP_CMP, Arg_AddStrToBuffer_String
00001EBC  4EB8 1D10               1898      JSR PRINT_TO_BUFFER
00001EC0  4E75                    1899      RTS
00001EC2                          1900  ******************************* END OF GROUP B ********************************
00001EC2                          1901  
00001EC2                          1902  ****************************** GROUP C ****************************************
00001EC2                          1903  PRINT_OP_MULS:
00001EC2  23FC 00002013 0000203A  1904      MOVE.L #P_OP_MULS, Arg_AddStrToBuffer_String
00001ECC  4EB8 1D10               1905      JSR PRINT_TO_BUFFER
00001ED0  4E75                    1906      RTS
00001ED2                          1907  ******************************* END OF GROUP C ********************************
00001ED2                          1908  
00001ED2                          1909  ****************************** GROUP D ****************************************
00001ED2                          1910  PRINT_OP_ADD:
00001ED2  23FC 0000201D 0000203A  1911      MOVE.L #P_OP_ADD, Arg_AddStrToBuffer_String
00001EDC  4EB8 1D10               1912      JSR PRINT_TO_BUFFER
00001EE0  4E75                    1913      RTS
00001EE2                          1914  PRINT_OP_ADDA:
00001EE2  23FC 00002018 0000203A  1915      MOVE.L #P_OP_ADDA, Arg_AddStrToBuffer_String
00001EEC  4EB8 1D10               1916      JSR PRINT_TO_BUFFER
00001EF0  4E75                    1917      RTS
00001EF2                          1918  
00001EF2                          1919  ******************************* END OF GROUP D ********************************
00001EF2                          1920  
00001EF2                          1921  ****************************** GROUP E ****************************************
00001EF2                          1922  PRINT_OP_LSL:
00001EF2  23FC 00002025 0000203A  1923      MOVE.L #P_OP_LSL, Arg_AddStrToBuffer_String
00001EFC  4EB8 1D10               1924      JSR PRINT_TO_BUFFER
00001F00  4E75                    1925      RTS
00001F02                          1926  PRINT_OP_LSR:
00001F02  23FC 00002021 0000203A  1927      MOVE.L #P_OP_LSR, Arg_AddStrToBuffer_String
00001F0C  4EB8 1D10               1928      JSR PRINT_TO_BUFFER
00001F10  4E75                    1929      RTS
00001F12                          1930  PRINT_OP_ASR:
00001F12  23FC 00002029 0000203A  1931      MOVE.L #P_OP_ASR, Arg_AddStrToBuffer_String
00001F1C  4EB8 1D10               1932      JSR PRINT_TO_BUFFER
00001F20  4E75                    1933      RTS
00001F22                          1934  PRINT_OP_ASL:
00001F22  23FC 0000202D 0000203A  1935      MOVE.L #P_OP_ASL, Arg_AddStrToBuffer_String
00001F2C  4EB8 1D10               1936      JSR PRINT_TO_BUFFER
00001F30  4E75                    1937      RTS
00001F32                          1938  PRINT_OP_ROL:
00001F32  23FC 00002035 0000203A  1939      MOVE.L #P_OP_ROL, Arg_AddStrToBuffer_String
00001F3C  4EB8 1D10               1940      JSR PRINT_TO_BUFFER
00001F40  4E75                    1941      RTS
00001F42                          1942  PRINT_OP_ROR:
00001F42  23FC 00002031 0000203A  1943      MOVE.L #P_OP_ROR, Arg_AddStrToBuffer_String
00001F4C  4EB8 1D10               1944      JSR PRINT_TO_BUFFER
00001F50  4E75                    1945      RTS
00001F52                          1946  ******************************* END OF GROUP E ********************************
00001F52                          1947  
00001F52                          1948  ****************************** GROUP F ****************************************
00001F52                          1949  * No currently supported OP codes to print here.
00001F52                          1950  ******************************* END OF GROUP F ********************************
00001F52                          1951  
00001F52                          1952  
00001F52                          1953  
00001F52                          1954  PRINT_OP:   ;Prints current op code byte
00001F52                          1955      ;MOVE.W (A4),(A1)       ; NEEDS TO USE G_BUFFER LATER
00001F52  103C 000D               1956      MOVE.B #13,D0
00001F56  4E4F                    1957      TRAP #15
00001F58  4E75                    1958      RTS
00001F5A                          1959  ******************* END OF PRINTING ROUTINES **********************************
00001F5A                          1960  
00001F5A                          1961  ******************* END OF JMP LABELS *****************************************
00001F5A                          1962  
00001F5A                          1963  ******************* DATA CONSTANT PRINTS **************************************
00001F5A                          1964  * Formatting is as follows: P_OP_<OPCODE>, where P = Print, OP = Operation,
00001F5A                          1965  * <OPCODE> is any valid operand
00001F5A                          1966  
00001F5A= 44 41 54 41 20 20 ...   1967  P_INVALID_OP    DC.B    'DATA   ',0
00001F62= 46 6F 75 6E 64 20 ...   1968  OP_FOUND        DC.B    'Found OP',0 ; this should be taken out later
00001F6B= 2E 42 20 00             1969  P_SIZE_B        DC.B    '.B ',0
00001F6F= 2E 57 20 00             1970  P_SIZE_W        DC.B    '.W ',0
00001F73= 2E 4C 20 00             1971  P_SIZE_L        DC.B    '.L ',0
00001F77= 4F 52 49 00             1972  P_OP_ORI        DC.B    'ORI',0
00001F7B= 43 4D 50 49 00          1973  P_OP_CMPI       DC.B    'CMPI',0
00001F80= 42 43 4C 52 00          1974  P_OP_STATIC_BCLR     DC.B    'BCLR',0
00001F85= 42 43 4C 52 00          1975  P_OP_DYNAMIC_BCLR     DC.B    'BCLR',0
00001F8A= 4D 4F 56 45 2E 42 ...   1976  P_OP_MOVEB      DC.B    'MOVE.B ',0
00001F92= 4D 4F 56 45 41 2E ...   1977  P_OP_MOVEA_L    DC.B    'MOVEA.L    ',0 
00001F9E= 4D 4F 56 45 2E 4C ...   1978  P_OP_MOVE_L     DC.B    'MOVE.L ',0
00001FA6= 4D 4F 56 45 41 2E ...   1979  P_OP_MOVEA_W    DC.B    'MOVEA.W    ',0
00001FB2= 4D 4F 56 45 2E 57 ...   1980  P_OP_MOVE_W     DC.B    'MOVE.W ',0
00001FBA= 4D 4F 56 45 4D 2E ...   1981  P_OP_MOVEM_W    DC.B    'MOVEM.W    ',0
00001FC6= 4D 4F 56 45 4D 2E ...   1982  P_OP_MOVEM_L    DC.B    'MOVEM.L    ',0
00001FD2= 4C 45 41 00             1983  P_OP_LEA        DC.B    'LEA',0
00001FD6= 4A 53 52 00             1984  P_OP_JSR        DC.B    'JSR',0
00001FDA= 4E 4F 50 00             1985  P_OP_NOP        DC.B    'NOP',0
00001FDE= 52 54 53 00             1986  P_OP_RTS        DC.B    'RTS',0
00001FE2= 4E 45 47 00             1987  P_OP_NEG        DC.B    'NEG',0
00001FE6= 53 55 42 51 00          1988  P_OP_SUBQ       DC.B    'SUBQ',0
00001FEB= 42 52 41 00             1989  P_OP_BRA        DC.B    'BRA',0
00001FEF= 42 43 53 00             1990  P_OP_BCS        DC.B    'BCS',0
00001FF3= 42 47 45 00             1991  P_OP_BGE        DC.B    'BGE',0
00001FF7= 42 4C 54 00             1992  P_OP_BLT        DC.B    'BLT',0
00001FFB= 42 56 43 00             1993  P_OP_BVC        DC.B    'BVC',0
00001FFF= 44 49 56 53 00          1994  P_OP_DIVS       DC.B    'DIVS',0
00002004= 4F 52 00                1995  P_OP_OR         DC.B    'OR',0
00002007= 53 55 42 00             1996  P_OP_SUB        DC.B    'SUB',0
0000200B= 45 4F 52 00             1997  P_OP_EOR        DC.B    'EOR',0
0000200F= 43 4D 50 00             1998  P_OP_CMP        DC.B    'CMP',0
00002013= 4D 55 4C 53 00          1999  P_OP_MULS       DC.B    'MULS',0
00002018= 41 44 44 41 00          2000  P_OP_ADDA       DC.B    'ADDA',0
0000201D= 41 44 44 00             2001  P_OP_ADD        DC.B    'ADD',0
00002021= 4C 53 52 00             2002  P_OP_LSR        DC.B    'LSR',0
00002025= 4C 53 4C 00             2003  P_OP_LSL        DC.B    'LSL',0
00002029= 41 53 52 00             2004  P_OP_ASR        DC.B    'ASR',0
0000202D= 41 53 4C 00             2005  P_OP_ASL        DC.B    'ASL',0
00002031= 52 4F 52 00             2006  P_OP_ROR        DC.B    'ROR',0
00002035= 52 4F 4C 00             2007  P_OP_ROL        DC.B    'ROL',0
00002039                          2008  ***************** END OF DATA CONSTANT PRINTS ***********************************
00002039                          2009   
00002039                          2010  
00002039                          2011  **
00002039                          2012  * AddStrToBuffer
00002039                          2013  **
00002039                          2014  * Adds the given NULL-terminated string to the specified buffer.
00002039                          2015  *
00002039                          2016  * Default buffer length is 80 characters, but can be modified in the argument
00002039                          2017  * variables.
00002039                          2018  *
00002039                          2019  * If the buffer length is exceeded, either due to lack of a NULL character or
00002039                          2020  * an incorrectly specified length, 1 is returned. Otherwise, 0 is returned to
00002039                          2021  * indicate success.
00002039                          2022  *
00002039                          2023  **
00002039                          2024  * @param Arg_AddStrToBuffer_String              Pointer to string
00002039                          2025  * @param Arg_AddStrToBuffer_Buffer              Pointer to buffer
00002039                          2026  * @param Arg_AddStrToBuffer_BufferLength        Length of buffer (default 80 chars)
00002039                          2027  * @return Ret_AddStrToBuffer_Success            0 if successful, 1 otherwise.
00002039                          2028  * @branch _AddStrToBuffer_FindBufferNullLoop    Loop to find NULL in buffer
00002039                          2029  * @branch _AddStrToBuffer_AddLoop               Loop to add string to buffer
00002039                          2030  * @branch _AddStrToBuffer_Success               Branch when string successfully added
00002039                          2031  * @branch _AddStrToBuffer_StringLengthExceeded  Branch when length exceeded (either string or buffer)
00002039                          2032  * @branch _AddStrToBuffer_End                   End of subroutine
00002039                          2033  **
0000203A                          2034  Arg_AddStrToBuffer_String           DS.L    1
0000203E                          2035  Arg_AddStrToBuffer_Buffer           DS.L    1
00002042= 00000050                2036  Arg_AddStrToBuffer_BufferLength     DC.L    80
00002046                          2037  Ret_AddStrToBuffer_Success          DS.B    1
00002047                          2038  
00002048                          2039  AddStrToBuffer:                     DS.W    0
00002048  48E7 C0C0               2040      MOVEM.L     D0-D1/A0-A1, -(SP)                  * Backup registers to stack
0000204C                          2041  
0000204C  2078 203A               2042      MOVE.L      Arg_AddStrToBuffer_String, A0       * Load string pointer
00002050  2278 203E               2043      MOVE.L      Arg_AddStrToBuffer_Buffer, A1       * Load buffer pointer
00002054  2038 2042               2044      MOVE.L      Arg_AddStrToBuffer_BufferLength, D0 * Load buffer length
00002058  4278 2046               2045      CLR.W       Ret_AddStrToBuffer_Success          * Clear success bit
0000205C  4281                    2046      CLR.L       D1                                  * Clear loop counter
0000205E                          2047  
0000205E                          2048  _AddStrToBuffer_BufferLoop
0000205E  0C11 0000               2049      CMPI.B      #0, (A1)                            * If buffer char is NULL
00002062  6700 000E               2050      BEQ         _AddStrToBuffer_AddLoop             * Start adding string to bufer
00002066                          2051      
00002066  B280                    2052      CMP.L       D0, D1                              * If counter >= max length
00002068  6C00 0026               2053      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
0000206C                          2054      
0000206C  5289                    2055      ADDQ.L      #1, A1                              * Go to next character
0000206E  5201                    2056      ADDQ.B      #1, D1                              * Increment counter
00002070  60EC                    2057      BRA         _AddStrToBuffer_BufferLoop          * Loop back
00002072                          2058      
00002072                          2059  _AddStrToBuffer_AddLoop
00002072  0C10 0000               2060      CMPI.B      #0, (A0)                            * If string char is NULL
00002076  6700 0010               2061      BEQ         _AddStrToBuffer_Success             * String successfully added
0000207A                          2062      
0000207A  B200                    2063      CMP.B       D0, D1                              * If counter >= max length
0000207C  6C00 0012               2064      BGE         _AddStrToBuffer_LengthExceeded      * Error, return
00002080                          2065      
00002080  12D8                    2066      MOVE.B      (A0)+, (A1)+                        * Move string char to buffer char
00002082  528C                    2067      ADDQ.L      #1, A4
00002084  5201                    2068      ADDQ.B      #1, D1                              * Increment counter
00002086  60EA                    2069      BRA         _AddStrToBuffer_AddLoop             * Loop back
00002088                          2070  
00002088                          2071  _AddStrToBuffer_Success
00002088  12BC 0000               2072      MOVE.B      #0, (A1)                            * Add NULL to end of string
0000208C  6000 0008               2073      BRA         _AddStrToBuffer_End                 * Finish subroutine
00002090                          2074  
00002090                          2075  _AddStrToBuffer_LengthExceeded
00002090  31FC 0001 2046          2076      MOVE.W      #1, Ret_AddStrToBuffer_Success      * Invalidate success bit
00002096                          2077  
00002096                          2078  _AddStrToBuffer_End
00002096  4CDF 0303               2079      MOVEM.L     (SP)+, D0-D1/A0-A1                  * Restore registers from stack
0000209A  4E75                    2080      RTS                  
0000209C                          2081     
0000209C                          2082     
0000209C                          2083  ;EA_ROUTINE:
0000209C                          2084  
0000209C                          2085  ;    MOVEA.L #0, A5
0000209C                          2086   ;   MOVEA.L #START_ADDRESS, A5
0000209C                          2087    ;  JSR     PARSE_EA_CONSTANT_BITS
0000209C                          2088     ; JSR     CHECK_XXXX
0000209C                          2089  
0000209C                          2090  
0000209C                          2091  **************************************************
0000209C                          2092  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000209C                          2093   
0000209C                          2094  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000209C                          2095  * EXECUTION **************************************
0000209C                          2096   * TEST FOR MOVE.L
0000209C                          2097      *MOVE.B  #%0100, MNEMONIC
0000209C                          2098      *MOVE.B  #%001, FIRST_3
0000209C                          2099      ;MOVE.B  #%111, SECOND_3
0000209C                          2100      ;MOVE.B  #%111, THIRD_3
0000209C                          2101      ;MOVE.B  #%000, FOURTH_3
0000209C                          2102      ;MOVEA.L #START_ADDRESS, A5
0000209C                          2103  
0000209C                          2104      ;CHECK IF IS_VALID = 0
0000209C                          2105      ;IF SO SKIP TO RUN_FAHAD_CODE
0000209C                          2106  
0000209C                          2107  EA_ROUTINE:
0000209C                          2108  
0000209C  2A7C 00000000           2109      MOVEA.L #0, A5
000020A2  2A7C 00004000           2110      MOVEA.L #START_ADDRESS, A5
000020A8  4EB8 12AC               2111      JSR     PARSE_EA_CONSTANT_BITS
000020AC  4EB9 000020BC           2112      JSR     CHECK_XXXX              ;When it returns here, Denny's routines have finished
000020B2                          2113      ;CHECK IF IS_VALID = 0
000020B2                          2114  
000020B2  4EF9 000020B8           2115  EXT JMP RUN_FAHAD_CODE
000020B8                          2116  
000020B8  FFFF FFFF               2117  RUN_FAHAD_CODE SIMHALT * This EXT alias is critical for NOT loading error
000020BC                          2118  
000020BC                          2119  ;RUN_FAHAD_CODE here would do something like
000020BC                          2120  ;
000020BC                          2121  **************************************************
000020BC                          2122  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000020BC                          2123  
000020BC                          2124  
000020BC                          2125  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000020BC                          2126  * CHECK_MNEMONIC FUNCTIONS ***************
000020BC                          2127  
000020BC                          2128  * <EA>
000020BC                          2129  **********************************************************************************
000020BC                          2130  * Description: Checks the mnemonic starting from XXXX
000020BC                          2131  *
000020BC                          2132  * Registers used: X
000020BC                          2133  *
000020BC                          2134  * Precondition: X
000020BC                          2135  *
000020BC                          2136  * Postcondition: X
000020BC                          2137  **********************************************************************************
000020BC                          2138  CHECK_XXXX:
000020BC  0C38 0008 1000          2139      CMPI.B  #$8, MNEMONIC
000020C2  6D00 0008               2140      BLT     CHECK_0XXX
000020C6  4EF9 000020DC           2141      JMP     CHECK_1XXX
000020CC                          2142  
000020CC                          2143  * <EA>
000020CC                          2144  **********************************************************************************
000020CC                          2145  * Description: Checks the mnemonic starting from 0XXX
000020CC                          2146  *
000020CC                          2147  * Registers used: X
000020CC                          2148  *
000020CC                          2149  * Precondition: X
000020CC                          2150  *
000020CC                          2151  * Postcondition: X
000020CC                          2152  **********************************************************************************
000020CC                          2153  CHECK_0XXX:
000020CC  0C38 0004 1000          2154      CMPI.B  #$4, MNEMONIC
000020D2  6D00 003C               2155      BLT     CHECK_00XX
000020D6  4EF9 0000211E           2156      JMP     CHECK_01XX
000020DC                          2157  
000020DC                          2158  * <EA>
000020DC                          2159  **********************************************************************************
000020DC                          2160  * Description: Checks the mnemonic starting from 1XXX
000020DC                          2161  *
000020DC                          2162  * Registers used: X
000020DC                          2163  *
000020DC                          2164  * Precondition: X
000020DC                          2165  *
000020DC                          2166  * Postcondition: X
000020DC                          2167  **********************************************************************************
000020DC                          2168  CHECK_1XXX:
000020DC  0C38 0008 1000          2169      CMPI.B  #$8, MNEMONIC
000020E2  6700 00BE               2170      BEQ     LOAD_1000
000020E6  0C38 0009 1000          2171      CMPI.B  #$9, MNEMONIC
000020EC  6700 00AE               2172      BEQ     LOAD_1001
000020F0  0C38 0011 1000          2173      CMPI.B  #$11, MNEMONIC
000020F6  6700 009E               2174      BEQ     LOAD_1011
000020FA  0C38 0012 1000          2175      CMPI.B  #$12, MNEMONIC
00002100  6700 008E               2176      BEQ     LOAD_1100
00002104  0C38 0013 1000          2177      CMPI.B  #$13, MNEMONIC
0000210A  6700 0028               2178      BEQ     LOAD_1101
0000210E                          2179      
0000210E  4E75                    2180      RTS
00002110                          2181  
00002110                          2182  * <EA>
00002110                          2183  **********************************************************************************
00002110                          2184  * Description: Checks the mnemonic starting from 00XX
00002110                          2185  *
00002110                          2186  * Registers used: X
00002110                          2187  *
00002110                          2188  * Precondition: X
00002110                          2189  *
00002110                          2190  * Postcondition: X
00002110                          2191  **********************************************************************************
00002110                          2192  CHECK_00XX:
00002110  0C38 0001 1000          2193      CMPI.B  #$1, MNEMONIC
00002116  6D00 035E               2194      BLT     LOAD_0000
0000211A  6C00 04C4               2195      BGE     LOAD_00XX
0000211E                          2196  
0000211E                          2197  * <EA>
0000211E                          2198  **********************************************************************************
0000211E                          2199  * Description: Checks the mnemonic starting from 01XX
0000211E                          2200  *
0000211E                          2201  * Registers used: X
0000211E                          2202  *
0000211E                          2203  * Precondition: X
0000211E                          2204  *
0000211E                          2205  * Postcondition: X
0000211E                          2206  **********************************************************************************
0000211E                          2207  CHECK_01XX:
0000211E  0C38 0004 1000          2208      CMPI.B  #%0100, MNEMONIC
00002124  6700 01F8               2209      BEQ     LOAD_0100
00002128  0C38 0005 1000          2210      CMPI.B  #%0101, MNEMONIC
0000212E  6700 0164               2211      BEQ     LOAD_0101
00002132  4E75                    2212      RTS
00002134                          2213  
00002134                          2214  **************************************************
00002134                          2215  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00002134                          2216  
00002134                          2217  
00002134                          2218  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00002134                          2219  * LOAD_THIS FUNCTIONS (HIGHEST LEVEL) ************
00002134                          2220  * <EA>
00002134                          2221  **********************************************************************************
00002134                          2222  * Description: Once the mnemonic is 1001, it is either ADD or ADDA.
00002134                          2223  *
00002134                          2224  * Registers used: If ADDA, D3 for SRC/DST mod, D2 for SRC/DST reg, A3 to get back from the subbranch.
00002134                          2225  *                 If ADD, basically recycling the algorithm for DIVS/OR
00002134                          2226  *
00002134                          2227  * Precondition: FIRST_3, SECOND_3, THIRD_3, FOURTH_3
00002134                          2228  *
00002134                          2229  * Postcondition: X
00002134                          2230  **********************************************************************************
00002134                          2231  LOAD_1101:
00002134  0C38 0003 1005          2232              CMPI.B  #%011, SECOND_3
0000213A  6700 0012               2233              BEQ     ADDA
0000213E  0C38 0007 1005          2234              CMPI.B  #%111, SECOND_3
00002144  6700 0008               2235              BEQ     ADDA
00002148                          2236              
00002148  4EF9 000021A2           2237              JMP     LOAD_1000
0000214E                          2238              
0000214E  367C 2166               2239  ADDA        MOVEA.W #ADDA_BACK, A3
00002152  0C38 0000 1007          2240              CMPI.B  #%000, FOURTH_3
00002158  6700 059C               2241              BEQ     SIZE_W
0000215C  0C38 0001 1007          2242              CMPI.B  #%001, FOURTH_3
00002162  6700 059A               2243              BEQ     SIZE_L
00002166                          2244              
00002166  1638 1006               2245  ADDA_BACK   MOVE.B  THIRD_3, D3
0000216A  1438 1007               2246              MOVE.B  FOURTH_3, D2
0000216E                          2247  
0000216E  4EB9 00002644           2248              JSR     LOAD_EA
00002174  4EB9 000027C4           2249              JSR     LOAD_COMMA_SPACE
0000217A                          2250              
0000217A  163C 0001               2251              MOVE.B  #%001, D3
0000217E  1438 1004               2252              MOVE.B  FIRST_3, D2
00002182                          2253              
00002182  4EB9 00002644           2254              JSR     LOAD_EA
00002188  4EB9 000027AC           2255              JSR     LOAD_NEW_LINE
0000218E  4E75                    2256              RTS
00002190                          2257  
00002190                          2258  * <EA>
00002190                          2259  **********************************************************************************
00002190                          2260  * Description: Once the mnemonic is 1001, it is MULS.
00002190                          2261  *
00002190                          2262  * Registers used: X. Basically recycling the algorithm for DIVS/OR
00002190                          2263  *
00002190                          2264  * Precondition: X
00002190                          2265  *
00002190                          2266  * Postcondition: X
00002190                          2267  **********************************************************************************
00002190                          2268  LOAD_1100:
00002190  4EF9 000021A2           2269      JMP     LOAD_1000
00002196                          2270      
00002196                          2271  * <EA>
00002196                          2272  **********************************************************************************
00002196                          2273  * Description: Once the mnemonic is 1001, it is either EOR or CMP.
00002196                          2274  *
00002196                          2275  * Registers used: X. Basically recycling the algorithm for DIVS/OR
00002196                          2276  *
00002196                          2277  * Precondition: X
00002196                          2278  *
00002196                          2279  * Postcondition: X
00002196                          2280  **********************************************************************************
00002196                          2281  LOAD_1011:
00002196  4EF9 000021A2           2282      JMP     LOAD_1000
0000219C                          2283  
0000219C                          2284  
0000219C                          2285  * <EA>
0000219C                          2286  **********************************************************************************
0000219C                          2287  * Description: Once the mnemonic is 1001, it is SUB.
0000219C                          2288  *
0000219C                          2289  * Registers used: X. Basically recycling the algorithm for DIVS/OR
0000219C                          2290  *
0000219C                          2291  * Precondition: X
0000219C                          2292  *
0000219C                          2293  * Postcondition: X
0000219C                          2294  **********************************************************************************
0000219C                          2295  LOAD_1001:
0000219C  4EF9 000021A2           2296      JMP     LOAD_1000
000021A2                          2297  
000021A2                          2298  
000021A2                          2299  * <EA>
000021A2                          2300  **********************************************************************************
000021A2                          2301  * Description: Once the mnemonic is 1000, it is either DIVS or OR.
000021A2                          2302  *
000021A2                          2303  * Registers used: D3 for SRC/DST mod, D2 for SRC/DST reg, A3 to get back from the subbranch.
000021A2                          2304  *
000021A2                          2305  * Precondition: FIRST_3, SECOND_3, THIRD_3, FOURTH_3
000021A2                          2306  *
000021A2                          2307  * Postcondition: X
000021A2                          2308  **********************************************************************************
000021A2                          2309  LOAD_1000:
000021A2  4283                    2310              CLR.L   D3
000021A4  4282                    2311              CLR.L   D2
000021A6  267C 00000000           2312              MOVEA.L #0, A3
000021AC                          2313              
000021AC  0C38 0007 1005          2314              CMPI.B  #%111, SECOND_3
000021B2  6700 009E               2315              BEQ     DIVS
000021B6                          2316              
000021B6  0C38 0003 1005          2317              CMPI.B  #%011, SECOND_3
000021BC  6700 06B6               2318              BEQ     INVALID
000021C0                          2319              
000021C0                          2320  ***vvvvvvvvvvvvvvvvvvv***
000021C0  0C38 0004 1005          2321              CMPI.B  #%100, SECOND_3
000021C6  6D00 0006               2322              BLT     DIR_0 * direction bit 0
000021CA  6C00 0044               2323              BGE     DIR_1 * direction bit 1
000021CE                          2324              
000021CE  367C 21E6               2325  DIR_0       MOVEA.W #OR_BACK, A3
000021D2  0C38 0000 1007          2326              CMPI.B  #%000, FOURTH_3
000021D8  6700 051C               2327              BEQ     SIZE_W
000021DC  0C38 0001 1007          2328              CMPI.B  #%001, FOURTH_3
000021E2  6700 051A               2329              BEQ     SIZE_L
000021E6                          2330              
000021E6  1638 1006               2331  OR_BACK     MOVE.B  THIRD_3, D3
000021EA  1438 1007               2332              MOVE.B  FOURTH_3, D2
000021EE                          2333  
000021EE  4EB9 00002644           2334              JSR     LOAD_EA
000021F4  4EB9 000027C4           2335              JSR     LOAD_COMMA_SPACE
000021FA                          2336              
000021FA  163C 0000               2337              MOVE.B  #%000, D3
000021FE  1438 1004               2338              MOVE.B  FIRST_3, D2
00002202                          2339              
00002202  4EB9 00002644           2340              JSR     LOAD_EA
00002208  4EB9 000027AC           2341              JSR     LOAD_NEW_LINE
0000220E  4E75                    2342              RTS
00002210                          2343              
00002210  163C 0000               2344  DIR_1       MOVE.B  #%000, D3
00002214  1438 1004               2345              MOVE.B  FIRST_3, D2
00002218                          2346              
00002218  4EB9 00002644           2347              JSR     LOAD_EA
0000221E  4EB9 000027C4           2348              JSR     LOAD_COMMA_SPACE
00002224                          2349              
00002224  367C 223C               2350              MOVEA.W #OR_BACK2, A3
00002228  0C38 0000 1007          2351              CMPI.B  #%000, FOURTH_3
0000222E  6700 04C6               2352              BEQ     SIZE_W
00002232  0C38 0001 1007          2353              CMPI.B  #%001, FOURTH_3
00002238  6700 04C4               2354              BEQ     SIZE_L
0000223C                          2355              
0000223C  1638 1006               2356  OR_BACK2    MOVE.B  THIRD_3, D3
00002240  1438 1007               2357              MOVE.B  FOURTH_3, D2
00002244                          2358  
00002244  4EB9 00002644           2359              JSR     LOAD_EA
0000224A  4EB9 000027AC           2360              JSR     LOAD_NEW_LINE
00002250  4E75                    2361              RTS    
00002252                          2362  ***^^^^^^^^^^^^^^^^^^^***
00002252                          2363              
00002252                          2364  ***vvvvvvvvvvvvvvvvvvv***
00002252  163C 0000               2365  DIVS        MOVE.B  #%000, D3
00002256  1438 1004               2366              MOVE.B  FIRST_3, D2
0000225A                          2367  
0000225A  4EB9 00002644           2368              JSR     LOAD_EA
00002260  4EB9 000027C4           2369              JSR     LOAD_COMMA_SPACE
00002266                          2370              
00002266  367C 227E               2371              MOVEA.W #DIVS_BACK, A3
0000226A  0C38 0000 1007          2372              CMPI.B  #%000, FOURTH_3
00002270  6700 0484               2373              BEQ     SIZE_W
00002274  0C38 0001 1007          2374              CMPI.B  #%001, FOURTH_3
0000227A  6700 0482               2375              BEQ     SIZE_L
0000227E                          2376              
0000227E  1638 1006               2377  DIVS_BACK   MOVE.B  THIRD_3, D3
00002282  1438 1007               2378              MOVE.B  FOURTH_3, D2
00002286                          2379              
00002286  4EB9 00002644           2380              JSR     LOAD_EA
0000228C  4EB9 000027AC           2381              JSR     LOAD_NEW_LINE
00002292  4E75                    2382              RTS
00002294                          2383  ***^^^^^^^^^^^^^^^^^^^***
00002294                          2384  
00002294                          2385  
00002294                          2386  * <EA>
00002294                          2387  **********************************************************************************
00002294                          2388  * Description: Once the mnemonic is 0101, it is SUBQ
00002294                          2389  *
00002294                          2390  * Registers used: D4 to load the data within the EA bits, and A2 to come back
00002294                          2391  *
00002294                          2392  * Precondition: FIRST_3, SECOND_3, THIRD_3, FOURTH_3
00002294                          2393  *
00002294                          2394  * Postcondition: X
00002294                          2395  **********************************************************************************
00002294                          2396  LOAD_0101:
00002294  4283                    2397              CLR.L   D3
00002296  4282                    2398              CLR.L   D2
00002298  267C 00000000           2399              MOVEA.L #0, A3
0000229E                          2400  
0000229E  0C38 0007 1004          2401              CMPI.B  #%111, FIRST_3
000022A4  6F00 0008               2402              BLE     MYBE_SUBQ1
000022A8  4EF9 00002874           2403              JMP     INVALID
000022AE                          2404              
000022AE  0C38 0003 1005          2405  MYBE_SUBQ1  CMPI.B  #%011, SECOND_3
000022B4  6E00 0008               2406              BGT     MYBE_SUBQ2
000022B8  4EF9 00002874           2407              JMP     INVALID
000022BE                          2408  
000022BE  0C38 0007 1005          2409  MYBE_SUBQ2  CMPI.B  #%111, SECOND_3
000022C4  6D00 0008               2410              BLT     SUBQ
000022C8  4EF9 00002874           2411              JMP     INVALID
000022CE                          2412  
000022CE  5238 1004               2413  SUBQ        ADDI.B  #%1, FIRST_3
000022D2  1838 1004               2414              MOVE.B  FIRST_3, D4
000022D6                          2415              
000022D6  347C 22E0               2416              MOVEA.W #SUBQ_SAVED, A2
000022DA  4EF9 00002778           2417              JMP     LOAD_IMMDTE
000022E0                          2418              
000022E0  4EB9 000027C4           2419  SUBQ_SAVED  JSR     LOAD_COMMA_SPACE
000022E6                          2420  
000022E6  367C 2308               2421              MOVEA.W #SUBQ_BACK, A3
000022EA  0C38 0004 1005          2422              CMPI.B  #%100, SECOND_3
000022F0  6700 03FC               2423              BEQ     SIZE_B
000022F4  0C38 0005 1005          2424              CMPI.B  #%101, SECOND_3
000022FA  6700 03FA               2425              BEQ     SIZE_W
000022FE  0C38 0006 1005          2426              CMPI.B  #%110, SECOND_3
00002304  6700 03F8               2427              BEQ     SIZE_L
00002308                          2428              
00002308  1638 1006               2429  SUBQ_BACK   MOVE.B  THIRD_3, D3
0000230C  1438 1007               2430              MOVE.B  FOURTH_3, D2
00002310                          2431  
00002310  4EB9 00002644           2432              JSR     LOAD_EA
00002316  4EB9 000027AC           2433              JSR     LOAD_NEW_LINE
0000231C  4E75                    2434              RTS
0000231E                          2435  
0000231E                          2436  * <EA>
0000231E                          2437  **********************************************************************************
0000231E                          2438  * Description: Once the mnemonic is 0100, it is either NEG, RTS, JSR, MOVEM, or LEA.
0000231E                          2439  *
0000231E                          2440  * Registers used: D3 for SRC/DST mod, D2 for SRC/DST reg, A3 to get back from the subbranch,
0000231E                          2441  *                 D5, D4 for BCLR, D6 for recognizing MOVEM
0000231E                          2442  *
0000231E                          2443  * Precondition: FIRST_3, SECOND_3, THIRD_3, FOURTH_3
0000231E                          2444  *
0000231E                          2445  * Postcondition: X
0000231E                          2446  **********************************************************************************
0000231E                          2447  LOAD_0100:
0000231E  4283                    2448              CLR.L   D3
00002320  4282                    2449              CLR.L   D2
00002322  267C 00000000           2450              MOVEA.L #0, A3
00002328                          2451  
00002328  0C38 0002 1004          2452              CMPI.B  #%010, FIRST_3
0000232E  6700 0006               2453              BEQ     MYBE_NEG
00002332  6600 000C               2454              BNE     NOT_NEG
00002336  0C38 0003 1005          2455  MYBE_NEG    CMPI.B  #%011, SECOND_3
0000233C  6D00 0084               2456              BLT     NEG
00002340                          2457  
00002340  0C38 0007 1004          2458  NOT_NEG     CMPI.B  #%111, FIRST_3
00002346  6700 0006               2459              BEQ     MYBE_RTS1
0000234A  6600 0028               2460              BNE     NOT_RTS
0000234E  0C38 0001 1005          2461  MYBE_RTS1   CMPI.B  #%001, SECOND_3
00002354  6700 0006               2462              BEQ     MYBE_RTS2
00002358  6600 001A               2463              BNE     NOT_RTS
0000235C  0C38 0006 1006          2464  MYBE_RTS2   CMPI.B  #%110, THIRD_3
00002362  6700 0006               2465              BEQ     MYBE_RTS3
00002366  6600 000C               2466              BNE     NOT_RTS
0000236A  0C38 0005 1007          2467  MYBE_RTS3   CMPI.B  #%101, FOURTH_3
00002370  6700 0088               2468              BEQ     RTS
00002374                          2469              
00002374  0C38 0007 1004          2470  NOT_RTS     CMPI.B  #%111, FIRST_3
0000237A  6700 0006               2471              BEQ     MYBE_JSR
0000237E  6600 000C               2472              BNE     NOT_JSR
00002382  0C38 0002 1005          2473  MYBE_JSR    CMPI.B  #%010, SECOND_3
00002388  6700 0078               2474              BEQ     JSR
0000238C                          2475  
0000238C  4286                    2476  NOT_JSR     CLR.L   D6
0000238E  1C38 1004               2477              MOVE.B  FIRST_3, D6
00002392  0206 0005               2478              ANDI.B  #%101, D6 * Making %1X0 -> %100
00002396  0C06 0004               2479              CMPI.B  #%100, D6
0000239A  6700 0006               2480              BEQ     MYBE_MOVEM
0000239E  6600 0012               2481              BNE     NOT_MOVEM
000023A2                          2482              
000023A2  1C38 1005               2483  MYBE_MOVEM  MOVE.B  SECOND_3, D6
000023A6  0206 0006               2484              ANDI.B  #%110, D6
000023AA  0C06 0002               2485              CMPI.B  #%010, D6
000023AE  6700 0080               2486              BEQ     MOVEM
000023B2                          2487              
000023B2  0C38 0007 1005          2488  NOT_MOVEM   CMPI.B  #%111, SECOND_3
000023B8  6700 007A               2489              BEQ     LEA
000023BC                          2490              
000023BC  4EF9 00002874           2491              JMP     INVALID
000023C2                          2492  
000023C2                          2493  NEG:
000023C2  367C 23E4               2494              MOVEA.W #NEG_BACK, A3
000023C6  0C38 0000 1005          2495              CMPI.B  #%000, SECOND_3
000023CC  6700 0320               2496              BEQ     SIZE_B
000023D0  0C38 0001 1005          2497              CMPI.B  #%001, SECOND_3
000023D6  6700 031E               2498              BEQ     SIZE_W
000023DA  0C38 0002 1005          2499              CMPI.B  #%010, SECOND_3
000023E0  6700 031C               2500              BEQ     SIZE_L
000023E4                          2501              
000023E4  1638 1006               2502  NEG_BACK    MOVE.B  THIRD_3, D3
000023E8  1438 1007               2503              MOVE.B  FOURTH_3, D2
000023EC                          2504  
000023EC  4EB9 00002644           2505              JSR     LOAD_EA
000023F2  4EB9 000027AC           2506              JSR     LOAD_NEW_LINE
000023F8  4E75                    2507              RTS
000023FA                          2508              
000023FA                          2509  RTS:
000023FA  4EB9 000027AC           2510              JSR     LOAD_NEW_LINE
00002400  4E75                    2511              RTS
00002402                          2512  
00002402                          2513  JSR:
00002402  367C 241A               2514              MOVEA.W #JSR_BACK, A3
00002406  0C38 0000 1007          2515              CMPI.B  #%000, FOURTH_3
0000240C  6700 02E8               2516              BEQ     SIZE_W
00002410  0C38 0001 1007          2517              CMPI.B  #%001, FOURTH_3
00002416  6700 02E6               2518              BEQ     SIZE_L
0000241A                          2519              
0000241A  1638 1006               2520  JSR_BACK    MOVE.B  THIRD_3, D3
0000241E  1438 1007               2521              MOVE.B  FOURTH_3, D2
00002422                          2522              
00002422  4EB9 00002644           2523              JSR     LOAD_EA
00002428  4EB9 000027AC           2524              JSR     LOAD_NEW_LINE
0000242E  4E75                    2525              RTS
00002430                          2526  
00002430                          2527  MOVEM:
00002430  FFFF FFFF               2528      SIMHALT
00002434                          2529      
00002434                          2530  LEA:
00002434  367C 244C               2531              MOVEA.W #LEA_BACK, A3
00002438  0C38 0000 1007          2532              CMPI.B  #%000, FOURTH_3
0000243E  6700 02B6               2533              BEQ     SIZE_W
00002442  0C38 0001 1007          2534              CMPI.B  #%001, FOURTH_3
00002448  6700 02B4               2535              BEQ     SIZE_L
0000244C                          2536              
0000244C  1638 1006               2537  LEA_BACK    MOVE.B  THIRD_3, D3
00002450  1438 1007               2538              MOVE.B  FOURTH_3, D2
00002454                          2539              
00002454  4EB9 00002644           2540              JSR     LOAD_EA
0000245A  4EB9 000027C4           2541              JSR     LOAD_COMMA_SPACE
00002460                          2542              
00002460  163C 0001               2543              MOVE.B  #%001, D3
00002464  1438 1004               2544              MOVE.B  FIRST_3, D2
00002468                          2545              
00002468  4EB9 00002644           2546              JSR     LOAD_EA
0000246E  4EB9 000027AC           2547              JSR     LOAD_NEW_LINE
00002474  4E75                    2548              RTS
00002476                          2549  
00002476                          2550  * <EA>
00002476                          2551  **********************************************************************************
00002476                          2552  * Description: Once the mnemonic is 0000, it is either BCLR, CMPI, ORI, or Dynamic BCLR.
00002476                          2553  *
00002476                          2554  * Registers used: D3 for SRC/DST mod, D2 for SRC/DST reg, A3 to get back from the subbranch,
00002476                          2555  *                 D5, D4 for BCLR
00002476                          2556  *
00002476                          2557  * Precondition: FIRST_3, SECOND_3, THIRD_3, FOURTH_3
00002476                          2558  *
00002476                          2559  * Postcondition: X
00002476                          2560  **********************************************************************************
00002476                          2561  LOAD_0000:
00002476  4283                    2562              CLR.L   D3
00002478  4282                    2563              CLR.L   D2
0000247A  267C 00000000           2564              MOVEA.L #0, A3
00002480                          2565  
00002480  0C38 0000 1004          2566              CMPI.B  #%000, FIRST_3
00002486  6700 0006               2567              BEQ     MYBE_ORI
0000248A  6600 000C               2568              BNE     NOT_ORI
0000248E  0C38 0003 1005          2569  MYBE_ORI    CMPI.B  #%011, SECOND_3
00002494  6D00 0042               2570              BLT     ORI_CMPI            
00002498                          2571  
00002498  0C38 0006 1004          2572  NOT_ORI     CMPI.B  #%110, FIRST_3
0000249E  6700 0006               2573              BEQ     MYBE_CMPI
000024A2  6600 000C               2574              BNE     NOT_CMPI
000024A6  0C38 0003 1005          2575  MYBE_CMPI   CMPI.B  #%011, SECOND_3
000024AC  6D00 002A               2576              BLT     ORI_CMPI
000024B0                          2577              
000024B0  0C38 0004 1004          2578  NOT_CMPI    CMPI.B  #%100, FIRST_3
000024B6  6700 0006               2579              BEQ     MYBE_BCLR
000024BA  6600 000C               2580              BNE     NOT_BCLR
000024BE  0C38 0002 1005          2581  MYBE_BCLR   CMPI.B  #%010, SECOND_3
000024C4  6700 0076               2582              BEQ     BCLR
000024C8                          2583  
000024C8  0C38 0006 1005          2584  NOT_BCLR    CMPI.B  #%110, SECOND_3
000024CE  6700 00CE               2585              BEQ     DYNMC_BCLR
000024D2                          2586              
000024D2  4EF9 00002874           2587              JMP     INVALID
000024D8                          2588              
000024D8                          2589  ***vvvvvvvvvvvvvvvvvvv***
000024D8  367C 24FA               2590  ORI_CMPI    MOVEA.W #BACK, A3
000024DC  0C38 0000 1005          2591              CMPI.B  #%000, SECOND_3
000024E2  6700 020A               2592              BEQ     SIZE_B
000024E6  0C38 0001 1005          2593              CMPI.B  #%001, SECOND_3
000024EC  6700 0208               2594              BEQ     SIZE_W
000024F0  0C38 0002 1005          2595              CMPI.B  #%010, SECOND_3
000024F6  6700 0206               2596              BEQ     SIZE_L
000024FA                          2597  
000024FA  163C 0007               2598  BACK        MOVE.B  #%111, D3
000024FE  143C 0004               2599              MOVE.B  #%100, D2
00002502                          2600              
00002502  4EB9 00002644           2601              JSR     LOAD_EA
00002508  4EB9 000027C4           2602              JSR     LOAD_COMMA_SPACE
0000250E                          2603              
0000250E  367C 2526               2604              MOVEA.W #BACK2, A3   
00002512  0C38 0000 1007          2605              CMPI.B  #%000, FOURTH_3
00002518  6700 01DC               2606              BEQ     SIZE_W
0000251C  0C38 0001 1007          2607              CMPI.B  #%001, FOURTH_3
00002522  6700 01DA               2608              BEQ     SIZE_L
00002526                          2609  
00002526  1638 1006               2610  BACK2       MOVE.B  THIRD_3, D3
0000252A  1438 1007               2611              MOVE.B  FOURTH_3, D2
0000252E                          2612          
0000252E  4EB9 00002644           2613              JSR     LOAD_EA
00002534  4EB9 000027AC           2614              JSR     LOAD_NEW_LINE
0000253A  4E75                    2615              RTS
0000253C                          2616  ***^^^^^^^^^^^^^^^^^^^***
0000253C                          2617  
0000253C                          2618  ***vvvvvvvvvvvvvvvvvvv***
0000253C  4285                    2619  BCLR        CLR.L   D5
0000253E  4284                    2620              CLR.L   D4
00002540  247C 00000000           2621              MOVEA.L #0, A2
00002546                          2622  
00002546  3A3C 5000               2623              MOVE.W  #END_ADDRESS, D5
0000254A  9A4D                    2624              SUB.W   A5, D5
0000254C  0C45 0002               2625              CMPI.W  #$2, D5
00002550  6D00 0322               2626              BLT     INVALID
00002554                          2627  
00002554  381D                    2628              MOVE.W  (A5)+, D4
00002556  4284                    2629              CLR.L   D4
00002558  381D                    2630              MOVE.W  (A5)+, D4
0000255A  0244 00FF               2631              ANDI.W  #$00FF, D4
0000255E  247C 0000256A           2632              MOVEA.L #BACK4, A2
00002564  4EF9 00002778           2633              JMP     LOAD_IMMDTE
0000256A                          2634              
0000256A  4EB9 000027C4           2635  BACK4       JSR     LOAD_COMMA_SPACE
00002570                          2636              
00002570  367C 2588               2637              MOVEA.W #BACK3, A3
00002574  0C38 0000 1007          2638              CMPI.B  #%000, FOURTH_3
0000257A  6700 017A               2639              BEQ     SIZE_W
0000257E  0C38 0001 1007          2640              CMPI.B  #%001, FOURTH_3
00002584  6700 0178               2641              BEQ     SIZE_L
00002588                          2642  
00002588  1638 1006               2643  BACK3       MOVE.B  THIRD_3, D3
0000258C  1438 1007               2644              MOVE.B  FOURTH_3, D2
00002590                          2645  
00002590  4EB9 00002644           2646              JSR     LOAD_EA
00002596  4EB9 000027AC           2647              JSR     LOAD_NEW_LINE
0000259C                          2648  
0000259C  4E75                    2649              RTS
0000259E                          2650  ***^^^^^^^^^^^^^^^^^^^***
0000259E                          2651  
0000259E                          2652  ***vvvvvvvvvvvvvvvvvvv***
0000259E  163C 0000               2653  DYNMC_BCLR  MOVE.B  #%000, D3
000025A2  1438 1004               2654              MOVE.B  FIRST_3, D2
000025A6                          2655              
000025A6  4EB9 00002644           2656              JSR     LOAD_EA
000025AC  4EB9 000027C4           2657              JSR     LOAD_COMMA_SPACE
000025B2                          2658  
000025B2  367C 25CA               2659              MOVEA.W #BACK5, A3
000025B6  0C38 0000 1007          2660              CMPI.B  #%000, FOURTH_3
000025BC  6700 0138               2661              BEQ     SIZE_W
000025C0  0C38 0001 1007          2662              CMPI.B  #%001, FOURTH_3
000025C6  6700 0136               2663              BEQ     SIZE_L
000025CA                          2664              
000025CA  1638 1006               2665  BACK5       MOVE.B  THIRD_3, D3
000025CE  1438 1007               2666              MOVE.B  FOURTH_3, D2
000025D2                          2667              
000025D2  4EB9 00002644           2668              JSR     LOAD_EA
000025D8  4EB9 000027AC           2669              JSR     LOAD_NEW_LINE
000025DE                          2670              
000025DE  4E75                    2671              RTS
000025E0                          2672  ***^^^^^^^^^^^^^^^^^^^***
000025E0                          2673  
000025E0                          2674  * <EA>
000025E0                          2675  **********************************************************************************
000025E0                          2676  * Description: Once the mnemonic is 00XX, it is either MOVE or MOVEA. Checks the 3-bit bundles and
000025E0                          2677  *              the size of immediate/address values if necessary.
000025E0                          2678  *
000025E0                          2679  * Registers used: D3 for SRC/DST mod, D2 for SRC/DST reg, A3 to get back from the subbranch
000025E0                          2680  *
000025E0                          2681  * Precondition: FIRST_3, SECOND_3, THIRD_3, FOURTH_3
000025E0                          2682  *
000025E0                          2683  * Postcondition: X
000025E0                          2684  **********************************************************************************
000025E0                          2685  LOAD_00XX:
000025E0  4283                    2686          CLR.L   D3
000025E2  4282                    2687          CLR.L   D2
000025E4  267C 00000000           2688          MOVEA.L #0, A3
000025EA                          2689          
000025EA  367C 2602               2690          MOVEA.W #GOO, A3
000025EE  0C38 0003 1000          2691          CMPI.B  #%0011, MNEMONIC
000025F4  6700 0100               2692          BEQ     SIZE_W
000025F8  0C38 0002 1000          2693          CMPI.B  #%0010, MNEMONIC
000025FE  6700 00FE               2694          BEQ     SIZE_L
00002602                          2695  
00002602  1638 1006               2696  GOO     MOVE.B  THIRD_3, D3
00002606  1438 1007               2697          MOVE.B  FOURTH_3, D2
0000260A                          2698      
0000260A  4EB9 00002644           2699          JSR     LOAD_EA
00002610  4EB9 000027C4           2700          JSR     LOAD_COMMA_SPACE
00002616                          2701      
00002616  367C 262E               2702          MOVEA.W #GOO2, A3
0000261A  0C38 0000 1004          2703          CMPI.B  #%000, FIRST_3
00002620  6700 00D4               2704          BEQ     SIZE_W
00002624  0C38 0001 1004          2705          CMPI.B  #%001, FIRST_3
0000262A  6700 00D2               2706          BEQ     SIZE_L
0000262E                          2707      
0000262E  1638 1005               2708  GOO2    MOVE.B  SECOND_3, D3
00002632  1438 1004               2709          MOVE.B  FIRST_3, D2
00002636                          2710              
00002636  4EB9 00002644           2711          JSR     LOAD_EA
0000263C  4EB9 000027AC           2712          JSR     LOAD_NEW_LINE
00002642                          2713      
00002642  4E75                    2714          RTS
00002644                          2715  **************************************************
00002644                          2716  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00002644                          2717  
00002644                          2718  
00002644                          2719  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00002644                          2720  * LOAD_THIS FUNCTIONS (HIGH LEVEL) ***************
00002644                          2721  
00002644                          2722  * <EA>
00002644                          2723  **********************************************************************************
00002644                          2724  * Description: Checks the SRC/DST mod
00002644                          2725  *
00002644                          2726  * Registers used: A2 for branching back from subbranches
00002644                          2727  *
00002644                          2728  * Precondition: D3 for SRC/DST mod
00002644                          2729  *
00002644                          2730  * Postcondition: X
00002644                          2731  **********************************************************************************
00002644                          2732  LOAD_EA:
00002644  347C 2654               2733          MOVEA.W #SAVED, A2 * remember to come back!
00002648                          2734  
00002648  0C43 0007               2735          CMPI    #%111, D3
0000264C  6D00 0008               2736          BLT     LOAD_LT_111
00002650  6C00 0032               2737          BGE     LOAD_GE_111
00002654                          2738      
00002654  4E75                    2739  SAVED   RTS
00002656                          2740  
00002656                          2741  * <EA>
00002656                          2742  **********************************************************************************
00002656                          2743  * Description: Checks the SRC/DST mod where it is not immediate/address value
00002656                          2744  *
00002656                          2745  * Registers used: X
00002656                          2746  *
00002656                          2747  * Precondition: D3 for SRC/DST mod
00002656                          2748  *
00002656                          2749  * Postcondition: X
00002656                          2750  **********************************************************************************
00002656                          2751  LOAD_LT_111:
00002656  0C43 0000               2752      CMPI    #%000, D3 * e.g. D3
0000265A  6700 00AA               2753      BEQ     LOAD_DATA_REGISTER
0000265E  0C43 0001               2754      CMPI    #%001, D3 * e.g. A3
00002662  6700 00B4               2755      BEQ     LOAD_ADDR_REGISTER
00002666  0C43 0002               2756      CMPI    #%010, D3 * e.g. (A3)
0000266A  6700 00BE               2757      BEQ     LOAD_ADDRESS
0000266E  0C43 0003               2758      CMPI    #%011, D3 * e.g. (A3)+
00002672  6700 00C8               2759      BEQ     LOAD_ADDRESS_W_POST_INC
00002676  0C43 0004               2760      CMPI    #%100, D3 * e.g. -(A3)
0000267A  6700 00CC               2761      BEQ     LOAD_ADDRESS_W_PRE_DEC
0000267E                          2762      
0000267E  4EF9 00002874           2763      JMP     INVALID
00002684                          2764      
00002684                          2765  * <EA>
00002684                          2766  **********************************************************************************
00002684                          2767  * Description: Checks the SRC/DST mod where it is immediate/address value
00002684                          2768  *
00002684                          2769  * Registers used: D5 for SUB.W, D4 for immediate/address value extraction
00002684                          2770  *
00002684                          2771  * Precondition: A5 for START_ADDRESS iteration, TRAILING_SIZE for size of the immediate/address value
00002684                          2772  *
00002684                          2773  * Postcondition: IS_INVALID flag set if EA bit not valid
00002684                          2774  **********************************************************************************
00002684                          2775  LOAD_GE_111:
00002684  4285                    2776              CLR.L   D5
00002686  4284                    2777              CLR.L   D4
00002688                          2778  
00002688  3A3C 5000               2779              MOVE.W  #END_ADDRESS, D5
0000268C  9A4D                    2780              SUB.W   A5, D5
0000268E  BA78 1002               2781              CMP.W   TRAILING_SIZE, D5
00002692  6D00 01E0               2782              BLT     INVALID
00002696                          2783  
00002696  381D                    2784              MOVE.W  (A5)+, D4
00002698  4284                    2785              CLR.L   D4
0000269A                          2786              
0000269A  0C78 0001 1002          2787              CMPI.W  #$1, TRAILING_SIZE
000026A0  6700 0016               2788              BEQ     CHUMP_BYTE
000026A4  0C78 0002 1002          2789              CMPI.W  #$2, TRAILING_SIZE
000026AA  6700 0014               2790              BEQ     CHUMP_WORD
000026AE  0C78 0004 1002          2791              CMPI.W  #$4, TRAILING_SIZE
000026B4  6700 0012               2792              BEQ     CHUMP_LONG
000026B8                          2793  
000026B8  381D                    2794  CHUMP_BYTE  MOVE.W  (A5)+, D4 * Minimum 4 hex (e.g. MOVE.B #1, $2 = XXXX 0001 0002)
000026BA  4EF9 000026D0           2795              JMP     GO
000026C0                          2796  
000026C0  381D                    2797  CHUMP_WORD  MOVE.W  (A5)+, D4
000026C2  4EF9 000026D0           2798              JMP     GO
000026C8                          2799              
000026C8  281D                    2800  CHUMP_LONG  MOVE.L  (A5)+, D4
000026CA  4EF9 000026D0           2801              JMP     GO
000026D0                          2802  
000026D0  0C42 0000               2803  GO          CMPI    #%000, D2
000026D4  6700 007E               2804              BEQ     LOAD_ABS_SHORT
000026D8  0C42 0001               2805              CMPI    #%001, D2
000026DC  6700 0088               2806              BEQ     LOAD_ABS_LONG
000026E0  0C42 0004               2807              CMPI    #%100, D2
000026E4  6700 0092               2808              BEQ     LOAD_IMMDTE
000026E8                          2809      
000026E8  4EF9 00002874           2810              JMP     INVALID
000026EE                          2811  * <EA>
000026EE                          2812  **********************************************************************************
000026EE                          2813  * Description: Puts in the proper value in TRAILING_SIZE based on the immediate/address value size
000026EE                          2814  *
000026EE                          2815  * Registers used: X
000026EE                          2816  *
000026EE                          2817  * Precondition: X
000026EE                          2818  *
000026EE                          2819  * Postcondition: Set up TRAILING_SIZE
000026EE                          2820  **********************************************************************************
000026EE                          2821  TRAILING_HELPER:            
000026EE  31FC 0002 1002          2822  SIZE_B  MOVE.W  #$2, TRAILING_SIZE
000026F4  4ED3                    2823          JMP     (A3)
000026F6                          2824  
000026F6  31FC 0002 1002          2825  SIZE_W  MOVE.W  #$2, TRAILING_SIZE
000026FC  4ED3                    2826          JMP     (A3)
000026FE                          2827          
000026FE  31FC 0004 1002          2828  SIZE_L  MOVE.W  #$4, TRAILING_SIZE
00002704  4ED3                    2829          JMP     (A3)
00002706                          2830  **************************************************
00002706                          2831  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00002706                          2832  
00002706                          2833  
00002706                          2834  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00002706                          2835  * LOAD_THIS FUNCTIONS (INTERMEDIATE LEVEL) *******
00002706                          2836  
00002706                          2837  * <EA>
00002706                          2838  **********************************************************************************
00002706                          2839  * Description: Loads ASCII for e.g. D3 in EA_BUFFER
00002706                          2840  *
00002706                          2841  * Registers used: D0 for actually loading
00002706                          2842  *
00002706                          2843  * Precondition: D2 for SRC/DST reg
00002706                          2844  *
00002706                          2845  * Postcondition: X
00002706                          2846  **********************************************************************************
00002706                          2847  LOAD_DATA_REGISTER:
00002706  4280                    2848      CLR.L   D0
00002708                          2849      
00002708  4EB9 000027DC           2850      JSR     LOAD_D
0000270E  1002                    2851      MOVE.B  D2, D0
00002710  4EB9 00002850           2852      JSR     LOAD_NUM
00002716  4ED2                    2853      JMP     (A2)
00002718                          2854  
00002718                          2855  * <EA>
00002718                          2856  **********************************************************************************
00002718                          2857  * Description: Loads ASCII for e.g. A3 in EA_BUFFER
00002718                          2858  *
00002718                          2859  * Registers used: D0 for actually loading
00002718                          2860  *
00002718                          2861  * Precondition: D2 for SRC/DST reg
00002718                          2862  *
00002718                          2863  * Postcondition: X
00002718                          2864  **********************************************************************************
00002718                          2865  LOAD_ADDR_REGISTER:
00002718  4280                    2866      CLR.L   D0
0000271A                          2867  
0000271A  4EB9 000027EA           2868      JSR     LOAD_A
00002720  1002                    2869      MOVE.B  D2, D0
00002722  4EB9 00002850           2870      JSR     LOAD_NUM
00002728  4ED2                    2871      JMP     (A2)
0000272A                          2872  
0000272A                          2873  * <EA>
0000272A                          2874  **********************************************************************************
0000272A                          2875  * Description: Loads ASCII for e.g. (A3) in EA_BUFFER
0000272A                          2876  *
0000272A                          2877  * Registers used: X
0000272A                          2878  *
0000272A                          2879  * Precondition: X
0000272A                          2880  *
0000272A                          2881  * Postcondition: X
0000272A                          2882  **********************************************************************************
0000272A                          2883  LOAD_ADDRESS:
0000272A  4EB9 000027F8           2884      JSR     LOAD_PTHSIS_OPEN
00002730  4EB8 2718               2885      JSR     LOAD_ADDR_REGISTER
00002734  4EB9 00002806           2886      JSR     LOAD_PTHSIS_CLSD
0000273A  4ED2                    2887      JMP     (A2)
0000273C                          2888  
0000273C                          2889  * <EA>
0000273C                          2890  **********************************************************************************
0000273C                          2891  * Description: Loads ASCII for e.g. (A3)+ in EA_BUFFER
0000273C                          2892  *
0000273C                          2893  * Registers used: X
0000273C                          2894  *
0000273C                          2895  * Precondition: X
0000273C                          2896  *
0000273C                          2897  * Postcondition: X
0000273C                          2898  **********************************************************************************
0000273C                          2899  LOAD_ADDRESS_W_POST_INC:
0000273C  4EB8 272A               2900      JSR     LOAD_ADDRESS
00002740  4EB9 00002830           2901      JSR     LOAD_PLUS_SIGN
00002746  4ED2                    2902      JMP     (A2)
00002748                          2903  
00002748                          2904  * <EA>
00002748                          2905  **********************************************************************************
00002748                          2906  * Description: Loads ASCII for e.g. -(A3) in EA_BUFFER
00002748                          2907  *
00002748                          2908  * Registers used: X
00002748                          2909  *
00002748                          2910  * Precondition: X
00002748                          2911  *
00002748                          2912  * Postcondition: X
00002748                          2913  **********************************************************************************
00002748                          2914  LOAD_ADDRESS_W_PRE_DEC:
00002748  4EB9 0000283E           2915      JSR     LOAD_MINUS_SIGN
0000274E  4EB8 272A               2916      JSR     LOAD_ADDRESS
00002752  4ED2                    2917      JMP     (A2)
00002754                          2918  
00002754                          2919  * <EA>
00002754                          2920  **********************************************************************************
00002754                          2921  * Description: Loads ASCII for e.g. $1234 in EA_BUFFER
00002754                          2922  *
00002754                          2923  * Registers used: D0 for actually loading
00002754                          2924  *
00002754                          2925  * Precondition: D4 for immediate/address value  
00002754                          2926  *
00002754                          2927  * Postcondition: X
00002754                          2928  **********************************************************************************
00002754                          2929  LOAD_ABS_SHORT:
00002754  4280                    2930      CLR.L   D0
00002756                          2931  
00002756  4EB9 00002814           2932      JSR     LOAD_HEX_SIGN
0000275C  3004                    2933      MOVE.W  D4, D0
0000275E  4EB9 00002782           2934      JSR     LOAD_BYTES
00002764  4ED2                    2935      JMP     (A2)
00002766                          2936  
00002766                          2937  * <EA>
00002766                          2938  **********************************************************************************
00002766                          2939  * Description: Loads ASCII for e.g. $12345678 in EA_BUFFER
00002766                          2940  *
00002766                          2941  * Registers used: D0 for actually loading
00002766                          2942  *
00002766                          2943  * Precondition: D4 for immediate/address value  
00002766                          2944  *
00002766                          2945  * Postcondition: X
00002766                          2946  **********************************************************************************
00002766                          2947  LOAD_ABS_LONG:
00002766  4280                    2948      CLR.L   D0
00002768                          2949  
00002768  4EB9 00002814           2950      JSR     LOAD_HEX_SIGN
0000276E  2004                    2951      MOVE.L  D4, D0
00002770  4EB9 00002782           2952      JSR     LOAD_BYTES
00002776  4ED2                    2953      JMP     (A2)
00002778                          2954  
00002778                          2955  * <EA>
00002778                          2956  **********************************************************************************
00002778                          2957  * Description: Loads ASCII for e.g. #$1234 in EA_BUFFER
00002778                          2958  *
00002778                          2959  * Registers used: X
00002778                          2960  *
00002778                          2961  * Precondition: X 
00002778                          2962  *
00002778                          2963  * Postcondition: X
00002778                          2964  **********************************************************************************
00002778                          2965  LOAD_IMMDTE:
00002778  4EB9 00002822           2966      JSR     LOAD_IMMDTE_VALU
0000277E  4EF8 2766               2967      JMP     LOAD_ABS_LONG
00002782                          2968  
00002782                          2969  **************************************************
00002782                          2970  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00002782                          2971  
00002782                          2972  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00002782                          2973  * LOAD_THIS FUNCTIONS (LOW LEVEL) ****************
00002782                          2974  
00002782                          2975  * <EA>
00002782                          2976  **********************************************************************************
00002782                          2977  * Description: Shifts the hex to the left and loads from the left-most hex to EA_BUFFER in ASCII
00002782                          2978  *
00002782                          2979  * Registers used: D5 for the loop counter, D1 for loop assist
00002782                          2980  *
00002782                          2981  * Precondition: D0 for the immediate/address value  
00002782                          2982  *
00002782                          2983  * Postcondition: X
00002782                          2984  **********************************************************************************
00002782                          2985  LOAD_BYTES:
00002782  4285                    2986          CLR.L   D5
00002784  4281                    2987          CLR.L   D1
00002786                          2988  
00002786  2200                    2989          MOVE.L  D0, D1
00002788  1A3C 0008               2990          MOVE.B  #8, D5
0000278C  0C45 0000               2991  LOOP    CMPI    #0, D5
00002790  6E00 0004               2992          BGT     ROTATE
00002794  4E75                    2993          RTS
00002796                          2994      
00002796  E999                    2995  ROTATE  ROL.L   #$04, D1
00002798  1001                    2996          MOVE.B  D1, D0
0000279A  0280 0000000F           2997          ANDI.L  #$0000000F, D0
000027A0  4EB9 00002850           2998          JSR     LOAD_NUM
000027A6  5345                    2999          SUBI    #1, D5
000027A8  4EF8 278C               3000          JMP     LOOP        
000027AC                          3001  
000027AC                          3002  * <EA>
000027AC                          3003  **********************************************************************************
000027AC                          3004  * Description: Loads ASCII for CR, LF 
000027AC                          3005  *
000027AC                          3006  * Registers used: D0 for actually loading
000027AC                          3007  *
000027AC                          3008  * Precondition: CR, LF 
000027AC                          3009  *
000027AC                          3010  * Postcondition: X
000027AC                          3011  **********************************************************************************
000027AC                          3012  LOAD_NEW_LINE:
000027AC  4280                    3013      CLR.L   D0
000027AE                          3014  
000027AE  1038 1063               3015      MOVE.B  CR, D0
000027B2  4EB9 0000284C           3016      JSR     LOAD_THIS_SHIT
000027B8  1038 1064               3017      MOVE.B  LF, D0
000027BC  4EB9 0000284C           3018      JSR     LOAD_THIS_SHIT
000027C2  4E75                    3019      RTS
000027C4                          3020  
000027C4                          3021  * <EA>
000027C4                          3022  **********************************************************************************
000027C4                          3023  * Description: Loads ASCII for ', ' 
000027C4                          3024  *
000027C4                          3025  * Registers used: D0 for actually loading
000027C4                          3026  *
000027C4                          3027  * Precondition: COMMA, SPACE
000027C4                          3028  *
000027C4                          3029  * Postcondition: X
000027C4                          3030  **********************************************************************************
000027C4                          3031  LOAD_COMMA_SPACE:
000027C4  4280                    3032      CLR.L   D0
000027C6                          3033  
000027C6  1038 1061               3034      MOVE.B  COMMA, D0
000027CA  4EB9 0000284C           3035      JSR     LOAD_THIS_SHIT
000027D0  1038 1062               3036      MOVE.B  SPACE, D0
000027D4  4EB9 0000284C           3037      JSR     LOAD_THIS_SHIT
000027DA                          3038      
000027DA  4E75                    3039      RTS
000027DC                          3040  
000027DC                          3041  * <EA>
000027DC                          3042  **********************************************************************************
000027DC                          3043  * Description: Loads ASCII for D 
000027DC                          3044  *
000027DC                          3045  * Registers used: D0 for actually loading
000027DC                          3046  *
000027DC                          3047  * Precondition: DATA
000027DC                          3048  *
000027DC                          3049  * Postcondition: X
000027DC                          3050  **********************************************************************************
000027DC                          3051  LOAD_D:
000027DC  4280                    3052      CLR.L   D0
000027DE                          3053  
000027DE  1038 105A               3054      MOVE.B  DATA, D0
000027E2  4EB9 0000284C           3055      JSR     LOAD_THIS_SHIT
000027E8  4E75                    3056      RTS
000027EA                          3057  
000027EA                          3058  * <EA>
000027EA                          3059  **********************************************************************************
000027EA                          3060  * Description: Loads ASCII for A
000027EA                          3061  *
000027EA                          3062  * Registers used: D0 for actually loading
000027EA                          3063  *
000027EA                          3064  * Precondition: ADDRESS
000027EA                          3065  *
000027EA                          3066  * Postcondition: X
000027EA                          3067  **********************************************************************************
000027EA                          3068  LOAD_A:
000027EA  4280                    3069      CLR.L   D0
000027EC                          3070  
000027EC  1038 1059               3071      MOVE.B  ADDRESS, D0
000027F0  4EB9 0000284C           3072      JSR     LOAD_THIS_SHIT
000027F6  4E75                    3073      RTS
000027F8                          3074  
000027F8                          3075  * <EA>
000027F8                          3076  **********************************************************************************
000027F8                          3077  * Description: Loads ASCII for (
000027F8                          3078  *
000027F8                          3079  * Registers used: D0 for actually loading
000027F8                          3080  *
000027F8                          3081  * Precondition: PTHSIS_OPEN
000027F8                          3082  *
000027F8                          3083  * Postcondition: X
000027F8                          3084  **********************************************************************************
000027F8                          3085  LOAD_PTHSIS_OPEN:
000027F8  4280                    3086      CLR.L   D0
000027FA                          3087  
000027FA  1038 105B               3088      MOVE.B  PTHSIS_OPEN, D0
000027FE  4EB9 0000284C           3089      JSR     LOAD_THIS_SHIT
00002804  4E75                    3090      RTS
00002806                          3091  
00002806                          3092  * <EA>
00002806                          3093  **********************************************************************************
00002806                          3094  * Description: Loads ASCII for )
00002806                          3095  *
00002806                          3096  * Registers used: D0 for actually loading
00002806                          3097  *
00002806                          3098  * Precondition: PTHSIS_CLSD
00002806                          3099  *
00002806                          3100  * Postcondition: X
00002806                          3101  **********************************************************************************
00002806                          3102  LOAD_PTHSIS_CLSD:
00002806  4280                    3103      CLR.L   D0
00002808                          3104  
00002808  1038 105C               3105      MOVE.B  PTHSIS_CLSD, D0
0000280C  4EB9 0000284C           3106      JSR     LOAD_THIS_SHIT
00002812  4E75                    3107      RTS
00002814                          3108  
00002814                          3109  * <EA>
00002814                          3110  **********************************************************************************
00002814                          3111  * Description: Loads ASCII for $
00002814                          3112  *
00002814                          3113  * Registers used: D0 for actually loading
00002814                          3114  *
00002814                          3115  * Precondition: HEX_SIGN
00002814                          3116  *
00002814                          3117  * Postcondition: X
00002814                          3118  **********************************************************************************
00002814                          3119  LOAD_HEX_SIGN:
00002814  4280                    3120      CLR.L   D0
00002816                          3121  
00002816  1038 105D               3122      MOVE.B  HEX_SIGN, D0
0000281A  4EB9 0000284C           3123      JSR     LOAD_THIS_SHIT
00002820  4E75                    3124      RTS
00002822                          3125  
00002822                          3126  * <EA>
00002822                          3127  **********************************************************************************
00002822                          3128  * Description: Loads ASCII for #
00002822                          3129  *
00002822                          3130  * Registers used: D0 for actually loading
00002822                          3131  *
00002822                          3132  * Precondition: IMMDTE_VALU
00002822                          3133  *
00002822                          3134  * Postcondition: X
00002822                          3135  **********************************************************************************
00002822                          3136  LOAD_IMMDTE_VALU:
00002822  4280                    3137      CLR.L   D0
00002824                          3138  
00002824  1038 105E               3139      MOVE.B  IMMDTE_VALU, D0
00002828  4EB9 0000284C           3140      JSR     LOAD_THIS_SHIT
0000282E  4E75                    3141      RTS
00002830                          3142  
00002830                          3143  * <EA>
00002830                          3144  **********************************************************************************
00002830                          3145  * Description: Loads ASCII for +
00002830                          3146  *
00002830                          3147  * Registers used: D0 for actually loading
00002830                          3148  *
00002830                          3149  * Precondition: PLUS_SIGN
00002830                          3150  *
00002830                          3151  * Postcondition: X
00002830                          3152  **********************************************************************************
00002830                          3153  LOAD_PLUS_SIGN:
00002830  4280                    3154      CLR.L   D0
00002832                          3155  
00002832  1038 105F               3156      MOVE.B  PLUS_SIGN, D0
00002836  4EB9 0000284C           3157      JSR     LOAD_THIS_SHIT
0000283C  4E75                    3158      RTS
0000283E                          3159  
0000283E                          3160  * <EA>
0000283E                          3161  **********************************************************************************
0000283E                          3162  * Description: Loads ASCII for -
0000283E                          3163  *
0000283E                          3164  * Registers used: D0 for actually loading
0000283E                          3165  *
0000283E                          3166  * Precondition: MINUS_SIGN
0000283E                          3167  *
0000283E                          3168  * Postcondition: X
0000283E                          3169  **********************************************************************************
0000283E                          3170  LOAD_MINUS_SIGN:
0000283E  4280                    3171      CLR.L   D0
00002840                          3172  
00002840  1038 1060               3173      MOVE.B  MINUS_SIGN, D0
00002844  4EB9 0000284C           3174      JSR     LOAD_THIS_SHIT
0000284A  4E75                    3175      RTS
0000284C                          3176  **************************************************
0000284C                          3177  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000284C                          3178  
0000284C                          3179  
0000284C                          3180  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000284C                          3181  * LOAD_THIS FUNCTIONS (LOWEST LEVEL) *************
0000284C                          3182  * <EA>
0000284C                          3183  **********************************************************************************
0000284C                          3184  * Description: Loads the hex value from D0 to EA_BUFFER in ASCII
0000284C                          3185  *
0000284C                          3186  * Registers used: X
0000284C                          3187  *
0000284C                          3188  * Precondition: X
0000284C                          3189  *
0000284C                          3190  * Postcondition: X
0000284C                          3191  **********************************************************************************
0000284C                          3192  LOAD_THIS_SHIT:
0000284C  18C0                    3193      MOVE.B  D0, (A4)+
0000284E  4E75                    3194      RTS
00002850                          3195  
00002850                          3196  * <EA>
00002850                          3197  **********************************************************************************
00002850                          3198  * Description: Adds $30 to a number in D0 to make it a hex. If the number is greater
00002850                          3199  *              than 9 (A~F), then adds $37. Then moves the hex value from D0 to EA_BUFFER in ASCII
00002850                          3200  *
00002850                          3201  * Registers used: X
00002850                          3202  *
00002850                          3203  * Precondition: X
00002850                          3204  *
00002850                          3205  * Postcondition: X
00002850                          3206  **********************************************************************************
00002850                          3207  LOAD_NUM:
00002850  0C00 0009               3208      CMPI.B  #$9, D0
00002854  6E00 0006               3209      BGT     GT
00002858  6F00 000C               3210      BLE     LE
0000285C                          3211      
0000285C  0600 0037               3212  GT  ADDI.B  #$37, D0 * A~F
00002860  4EF9 00002870           3213      JMP     END
00002866  0600 0030               3214  LE  ADDI.B  #$30, D0 * 0~9
0000286A  4EF9 00002870           3215      JMP     END
00002870                          3216  
00002870  18C0                    3217  END MOVE.B  D0, (A4)+
00002872  4E75                    3218      RTS
00002874                          3219  
00002874                          3220  * <EA>
00002874                          3221  **********************************************************************************
00002874                          3222  * Description: Execution goes here if even one of the EA bit is invalid. Flags the invalid-bit and
00002874                          3223  *              entirely exits the EA process.
00002874                          3224  *
00002874                          3225  * Registers used: X
00002874                          3226  *
00002874                          3227  * Precondition: X
00002874                          3228  *
00002874                          3229  * Postcondition: X
00002874                          3230  **********************************************************************************
00002874                          3231  INVALID:
00002874  11FC 0000 10B5          3232              MOVE.B  #%0, IS_VALID
0000287A  4EF8 20B2               3233              JMP     EXT
0000287E                          3234  **************************************************
0000287E                          3235  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000287E                          3236  
0000287E                          3237      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA                214E
ADDA_BACK           2166
ADDRESS             1059
ADDSTRTOBUFFER      2048
ARG_ADDSTRTOBUFFER_BUFFER  203E
ARG_ADDSTRTOBUFFER_BUFFERLENGTH  2042
ARG_ADDSTRTOBUFFER_STRING  203A
BACK                24FA
BACK2               2526
BACK3               2588
BACK4               256A
BACK5               25CA
BCLR                253C
BIT_CHECK_EXG       1ABC
BIT_CHECK_EXT       16B4
BIT_CHECK_MOVEP     1426
BIT_CHECK_SUBX      19E6
B_BUFFER            1009
CHECK_00XX          2110
CHECK_01XX          211E
CHECK_0XXX          20CC
CHECK_1XXX          20DC
CHECK_OP_ABCD       1A94
CHECK_OP_ADD        1B3E
CHECK_OP_ADDA       1B2A
CHECK_OP_ADDI       1386
CHECK_OP_ADDQ       1860
CHECK_OP_ADDX       1B16
CHECK_OP_AND        1AF6
CHECK_OP_ANDI       135E
CHECK_OP_ANDI_TO_CCR  131E
CHECK_OP_ANDI_TO_SR  132E
CHECK_OP_ASL        1CC6
CHECK_OP_ASL_NO_ROT  1C02
CHECK_OP_ASR        1CAC
CHECK_OP_ASR_NO_ROT  1BE8
CHECK_OP_BCS        18CC
CHECK_OP_BGE        18E6
CHECK_OP_BLT        1900
CHECK_OP_BRA        18B2
CHECK_OP_BSR        189E
CHECK_OP_BVC        191A
CHECK_OP_CHK        1796
CHECK_OP_CLR        1678
CHECK_OP_CMP        1A5C
CHECK_OP_CMPA       1A34
CHECK_OP_CMPI       146E
CHECK_OP_CMPM       1A20
CHECK_OP_DBCC       1838
CHECK_OP_DIVS       1990
CHECK_OP_DIVU       1968
CHECK_OP_DYNAMIC_BCHG  13FE
CHECK_OP_DYNAMIC_BCLR  14A2
CHECK_OP_DYNAMIC_BSET  1412
CHECK_OP_DYNAMIC_BTST  13EA
CHECK_OP_EOR        1A48
CHECK_OP_EORI       139A
CHECK_OP_EORI_TO_CCR  133E
CHECK_OP_EORI_TO_SR  134E
CHECK_OP_EXG        1AA8
CHECK_OP_EXT        16A0
CHECK_OP_ILLEGAL    15E8
CHECK_OP_JMP        1782
CHECK_OP_JSR        17DA
CHECK_OP_LEA        17C0
CHECK_OP_LINK       1746
CHECK_OP_LSL        1C92
CHECK_OP_LSL_NO_ROT  1BCE
CHECK_OP_LSR        1C78
CHECK_OP_LSR_NO_ROT  1BB4
CHECK_OP_MOVEA_L    14F6
CHECK_OP_MOVEA_W    1558
CHECK_OP_MOVEM      180E
CHECK_OP_MOVEP      1440
CHECK_OP_MOVEQ      1944
CHECK_OP_MOVE_B     14CC
CHECK_OP_MOVE_FROM_SR  1628
CHECK_OP_MOVE_L     152E
CHECK_OP_MOVE_TO_CCR  163C
CHECK_OP_MOVE_TO_SR  1650
CHECK_OP_MOVE_USP   176E
CHECK_OP_MOVE_W     1590
CHECK_OP_MULS       1AE2
CHECK_OP_MULU       1A80
CHECK_OP_NBCD       16CE
CHECK_OP_NEG        17F4
CHECK_OP_NEGX       1664
CHECK_OP_NOP        15D8
CHECK_OP_NOT        168C
CHECK_OP_OR         19A4
CHECK_OP_ORI        1454
CHECK_OP_ORI_TO_CCR  12FE
CHECK_OP_ORI_TO_SR  130E
CHECK_OP_PEA        16F6
CHECK_OP_RESET      15C8
CHECK_OP_ROL        1C5E
CHECK_OP_ROL_NO_ROT  1B9A
CHECK_OP_ROR        1C44
CHECK_OP_ROR_NO_ROT  1B80
CHECK_OP_ROXL       1C30
CHECK_OP_ROXL_NO_ROT  1B6C
CHECK_OP_ROXR       1C1C
CHECK_OP_ROXR_NO_ROT  1B58
CHECK_OP_RTE        15F8
CHECK_OP_RTR        1618
CHECK_OP_RTS        17AA
CHECK_OP_SBCD       197C
CHECK_OP_SCC        184C
CHECK_OP_STATIC_BCHG  13C2
CHECK_OP_STATIC_BCLR  1488
CHECK_OP_STATIC_BSET  13D6
CHECK_OP_STATIC_BTST  13AE
CHECK_OP_STOP       15B8
CHECK_OP_SUB        1A04
CHECK_OP_SUBA       19BE
CHECK_OP_SUBI       1372
CHECK_OP_SUBQ       1874
CHECK_OP_SUBX       19D2
CHECK_OP_SWAP       16E2
CHECK_OP_TAS        170A
CHECK_OP_TRAP       1732
CHECK_OP_TRAPV      1608
CHECK_OP_TST        171E
CHECK_OP_UNLK       175A
CHECK_XXXX          20BC
CHUMP_BYTE          26B8
CHUMP_LONG          26C8
CHUMP_WORD          26C0
COMMA               1061
CR                  1063
CUR_OP_CODE         4000
C_GROUP_0           12FA
C_GROUP_1           14C8
C_GROUP_2           14F2
C_GROUP_3           1554
C_GROUP_4           15B6
C_GROUP_5           1834
C_GROUP_6           189A
C_GROUP_7           1940
C_GROUP_8           1964
C_GROUP_9           19BA
C_GROUP_A           1A14
C_GROUP_B           1A1C
C_GROUP_C           1A7C
C_GROUP_D           1B12
C_GROUP_E           1B54
C_GROUP_F           1CEC
DATA                105A
DIR_0               21CE
DIR_1               2210
DIVS                2252
DIVS_BACK           227E
DYNMC_BCLR          259E
EA_BUFFER           1065
EA_ROUTINE          209C
EA_SIZE             1008
END                 2870
END_ADDRESS         5000
EXT                 20B2
FIND_2_BIT_SIZE_TO_EA  1224
FIND_3_BIT_REG_TO_EA  123A
FIND_MOVEA_L_DIFFERENCE  1508
FIND_MOVEA_W_DIFF   156A
FIND_TRAILING_BITS_TO_EA  1296
FIRST_3             1004
FOURTH_3            1007
GO                  26D0
GOO                 2602
GOO2                262E
GROUP0_INVALID      14BC
GROUP0_SUCCESS      14C2
GROUP1_INVALID      14E6
GROUP1_SUCCESS      14EC
GROUP2_INVALID      1548
GROUP2_SUCCESS      154E
GROUP3_INVALID      15AA
GROUP3_SUCCESS      15B0
GROUP4_INVALID      1828
GROUP4_SUCCESS      182E
GROUP5_INVALID      188E
GROUP5_SUCCESS      1894
GROUP6_INVALID      1934
GROUP6_SUCCESS      193A
GROUP7_INVALID      1958
GROUP7_SUCCESS      195E
GROUP8_INVALID      19AE
GROUP8_SUCCESS      19B4
GROUP9_INVALID      1A0A
GROUP9_SUCCESS      1A0E
GROUPB_INVALID      1A70
GROUPB_SUCCESS      1A76
GROUPC_INVALID      1B06
GROUPC_SUCCESS      1B0C
GROUPD_INVALID      1B48
GROUPD_SUCCESS      1B4E
GROUPE_INVALID      1CE0
GROUPE_SUCCESS      1CE6
GROUP_0             10DC
GROUP_1             10EE
GROUP_2             1100
GROUP_3             1112
GROUP_4             1124
GROUP_5             1136
GROUP_6             1148
GROUP_7             115A
GROUP_8             116C
GROUP_9             117E
GROUP_A             1190
GROUP_B             11A2
GROUP_C             11B4
GROUP_D             11C6
GROUP_E             11D8
GROUP_F             11EA
GT                  285C
G_BUFFER            4100
HEX_SIGN            105D
IMMDTE_VALU         105E
INVALID             2874
INVALID_OP          1CF4
IS_VALID            10B5
JSR                 2402
JSR_BACK            241A
LE                  2866
LEA                 2434
LEA_BACK            244C
LF                  1064
LOAD_0000           2476
LOAD_00XX           25E0
LOAD_0100           231E
LOAD_0101           2294
LOAD_1000           21A2
LOAD_1001           219C
LOAD_1011           2196
LOAD_1100           2190
LOAD_1101           2134
LOAD_A              27EA
LOAD_ABS_LONG       2766
LOAD_ABS_SHORT      2754
LOAD_ADDRESS        272A
LOAD_ADDRESS_W_POST_INC  273C
LOAD_ADDRESS_W_PRE_DEC  2748
LOAD_ADDR_REGISTER  2718
LOAD_BYTES          2782
LOAD_COMMA_SPACE    27C4
LOAD_D              27DC
LOAD_DATA_REGISTER  2706
LOAD_EA             2644
LOAD_GE_111         2684
LOAD_HEX_SIGN       2814
LOAD_IMMDTE         2778
LOAD_IMMDTE_VALU    2822
LOAD_LT_111         2656
LOAD_MINUS_SIGN     283E
LOAD_NEW_LINE       27AC
LOAD_NUM            2850
LOAD_OP_CODE        10C4
LOAD_PLUS_SIGN      2830
LOAD_PTHSIS_CLSD    2806
LOAD_PTHSIS_OPEN    27F8
LOAD_THIS_SHIT      284C
LOOP                278C
MINUS_SIGN          1060
MNEMONIC            1000
MOVEM               2430
MOVE_AND_MOVEA_PARSE_EA  1250
MOVE_LAST_6_BITS_TO_EA  1202
MYBE_BCLR           24BE
MYBE_CMPI           24A6
MYBE_JSR            2382
MYBE_MOVEM          23A2
MYBE_NEG            2336
MYBE_ORI            248E
MYBE_RTS1           234E
MYBE_RTS2           235C
MYBE_RTS3           236A
MYBE_SUBQ1          22AE
MYBE_SUBQ2          22BE
NEG                 23C2
NEG_BACK            23E4
NOT_BCLR            24C8
NOT_CMPI            24B0
NOT_JSR             238C
NOT_MOVEM           23B2
NOT_NEG             2340
NOT_ORI             2498
NOT_RTS             2374
OP_FOUND            1F62
OP_JSR_DONE         11F8
OP_JSR_ROUTINE      10D4
ORI_CMPI            24D8
OR_BACK             21E6
OR_BACK2            223C
PARSE_EA_CONSTANT_BITS  12AC
PLUS_SIGN           105F
PRINT_OP            1F52
PRINT_OP_ADD        1ED2
PRINT_OP_ADDA       1EE2
PRINT_OP_ASL        1F22
PRINT_OP_ASR        1F12
PRINT_OP_BCS        1E22
PRINT_OP_BGE        1E32
PRINT_OP_BLT        1E42
PRINT_OP_BRA        1E62
PRINT_OP_BVC        1E52
PRINT_OP_CMP        1EB2
PRINT_OP_CMPI       1D32
PRINT_OP_DIVS       1E72
PRINT_OP_DYNAMIC_BCLR  1D52
PRINT_OP_EOR        1EA2
PRINT_OP_JSR        1DB2
PRINT_OP_LEA        1DD2
PRINT_OP_LSL        1EF2
PRINT_OP_LSR        1F02
PRINT_OP_MOVEA_L    1D72
PRINT_OP_MOVEA_W    1D92
PRINT_OP_MOVEB      1D62
PRINT_OP_MOVEM_L    1E02
PRINT_OP_MOVEM_W    1DF2
PRINT_OP_MOVE_L     1D82
PRINT_OP_MOVE_W     1DA2
PRINT_OP_MULS       1EC2
PRINT_OP_NEG        1DE2
PRINT_OP_OR         1E82
PRINT_OP_ORI        1D22
PRINT_OP_ROL        1F32
PRINT_OP_ROR        1F42
PRINT_OP_RTS        1DC2
PRINT_OP_STATIC_BCLR  1D42
PRINT_OP_SUB        1E92
PRINT_OP_SUBQ       1E12
PRINT_TO_BUFFER     1D10
PTHSIS_CLSD         105C
PTHSIS_OPEN         105B
P_INVALID_OP        1F5A
P_OP_ADD            201D
P_OP_ADDA           2018
P_OP_ASL            202D
P_OP_ASR            2029
P_OP_BCS            1FEF
P_OP_BGE            1FF3
P_OP_BLT            1FF7
P_OP_BRA            1FEB
P_OP_BVC            1FFB
P_OP_CMP            200F
P_OP_CMPI           1F7B
P_OP_DIVS           1FFF
P_OP_DYNAMIC_BCLR   1F85
P_OP_EOR            200B
P_OP_JSR            1FD6
P_OP_LEA            1FD2
P_OP_LSL            2025
P_OP_LSR            2021
P_OP_MOVEA_L        1F92
P_OP_MOVEA_W        1FA6
P_OP_MOVEB          1F8A
P_OP_MOVEM_L        1FC6
P_OP_MOVEM_W        1FBA
P_OP_MOVE_L         1F9E
P_OP_MOVE_W         1FB2
P_OP_MULS           2013
P_OP_NEG            1FE2
P_OP_NOP            1FDA
P_OP_OR             2004
P_OP_ORI            1F77
P_OP_ROL            2035
P_OP_ROR            2031
P_OP_RTS            1FDE
P_OP_STATIC_BCLR    1F80
P_OP_SUB            2007
P_OP_SUBQ           1FE6
P_SIZE_B            1F6B
P_SIZE_L            1F73
P_SIZE_W            1F6F
READ_NEXT_INSTRUCTION  1D0C
RET_ADDSTRTOBUFFER_SUCCESS  2046
ROTATE              2796
RTS                 23FA
RUN_FAHAD_CODE      20B8
SAVED               2654
SECOND_3            1005
SIZE_B              26EE
SIZE_L              26FE
SIZE_W              26F6
SPACE               1062
START               10B6
START_ADDRESS       4000
SUBQ                22CE
SUBQ_BACK           2308
SUBQ_SAVED          22E0
THIRD_3             1006
TRAILING_HELPER     26EE
TRAILING_SIZE       1002
_ADDSTRTOBUFFER_ADDLOOP  2072
_ADDSTRTOBUFFER_BUFFERLOOP  205E
_ADDSTRTOBUFFER_END  2096
_ADDSTRTOBUFFER_LENGTHEXCEEDED  2090
_ADDSTRTOBUFFER_SUCCESS  2088
